
import
  json, options, hashes, tables, openapi/rest, os, uri, strutils, httpcore, sigv4

## auto-generated via openapi macro
## title: Amazon Simple Email Service
## version: 2010-12-01
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>Amazon Simple Email Service</fullname> <p> This document contains reference information for the <a href="https://aws.amazon.com/ses/">Amazon Simple Email Service</a> (Amazon SES) API, version 2010-12-01. This document is best used in conjunction with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html">Amazon SES Developer Guide</a>. </p> <note> <p> For a list of Amazon SES endpoints to use in service requests, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/regions.html">Regions and Amazon SES</a> in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html">Amazon SES Developer Guide</a>.</p> </note>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/email/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode): string

  OpenApiRestCall_600426 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_600426](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_600426): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    if js.kind notin {JString, JInt, JFloat, JNull, JBool}:
      return
    head = $js
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get())

const
  awsServers = {Scheme.Http: {"ap-northeast-1": "email.ap-northeast-1.amazonaws.com", "ap-southeast-1": "email.ap-southeast-1.amazonaws.com",
                           "us-west-2": "email.us-west-2.amazonaws.com",
                           "eu-west-2": "email.eu-west-2.amazonaws.com", "ap-northeast-3": "email.ap-northeast-3.amazonaws.com",
                           "eu-central-1": "email.eu-central-1.amazonaws.com",
                           "us-east-2": "email.us-east-2.amazonaws.com",
                           "us-east-1": "email.us-east-1.amazonaws.com", "cn-northwest-1": "email.cn-northwest-1.amazonaws.com.cn",
                           "ap-south-1": "email.ap-south-1.amazonaws.com",
                           "eu-north-1": "email.eu-north-1.amazonaws.com", "ap-northeast-2": "email.ap-northeast-2.amazonaws.com",
                           "us-west-1": "email.us-west-1.amazonaws.com", "us-gov-east-1": "email.us-gov-east-1.amazonaws.com",
                           "eu-west-3": "email.eu-west-3.amazonaws.com",
                           "cn-north-1": "email.cn-north-1.amazonaws.com.cn",
                           "sa-east-1": "email.sa-east-1.amazonaws.com",
                           "eu-west-1": "email.eu-west-1.amazonaws.com", "us-gov-west-1": "email.us-gov-west-1.amazonaws.com", "ap-southeast-2": "email.ap-southeast-2.amazonaws.com",
                           "ca-central-1": "email.ca-central-1.amazonaws.com"}.toTable, Scheme.Https: {
      "ap-northeast-1": "email.ap-northeast-1.amazonaws.com",
      "ap-southeast-1": "email.ap-southeast-1.amazonaws.com",
      "us-west-2": "email.us-west-2.amazonaws.com",
      "eu-west-2": "email.eu-west-2.amazonaws.com",
      "ap-northeast-3": "email.ap-northeast-3.amazonaws.com",
      "eu-central-1": "email.eu-central-1.amazonaws.com",
      "us-east-2": "email.us-east-2.amazonaws.com",
      "us-east-1": "email.us-east-1.amazonaws.com",
      "cn-northwest-1": "email.cn-northwest-1.amazonaws.com.cn",
      "ap-south-1": "email.ap-south-1.amazonaws.com",
      "eu-north-1": "email.eu-north-1.amazonaws.com",
      "ap-northeast-2": "email.ap-northeast-2.amazonaws.com",
      "us-west-1": "email.us-west-1.amazonaws.com",
      "us-gov-east-1": "email.us-gov-east-1.amazonaws.com",
      "eu-west-3": "email.eu-west-3.amazonaws.com",
      "cn-north-1": "email.cn-north-1.amazonaws.com.cn",
      "sa-east-1": "email.sa-east-1.amazonaws.com",
      "eu-west-1": "email.eu-west-1.amazonaws.com",
      "us-gov-west-1": "email.us-gov-west-1.amazonaws.com",
      "ap-southeast-2": "email.ap-southeast-2.amazonaws.com",
      "ca-central-1": "email.ca-central-1.amazonaws.com"}.toTable}.toTable
const
  awsServiceName = "email"
method hook(call: OpenApiRestCall; url: string; input: JsonNode): Recallable {.base.}
type
  Call_PostCloneReceiptRuleSet_601040 = ref object of OpenApiRestCall_600426
proc url_PostCloneReceiptRuleSet_601042(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCloneReceiptRuleSet_601041(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a receipt rule set by cloning an existing one. All receipt rules and configurations are copied to the new receipt rule set and are completely independent of the source rule set.</p> <p>For information about setting up rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601043 = query.getOrDefault("Action")
  valid_601043 = validateParameter(valid_601043, JString, required = true,
                                 default = newJString("CloneReceiptRuleSet"))
  if valid_601043 != nil:
    section.add "Action", valid_601043
  var valid_601044 = query.getOrDefault("Version")
  valid_601044 = validateParameter(valid_601044, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601044 != nil:
    section.add "Version", valid_601044
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601045 = header.getOrDefault("X-Amz-Date")
  valid_601045 = validateParameter(valid_601045, JString, required = false,
                                 default = nil)
  if valid_601045 != nil:
    section.add "X-Amz-Date", valid_601045
  var valid_601046 = header.getOrDefault("X-Amz-Security-Token")
  valid_601046 = validateParameter(valid_601046, JString, required = false,
                                 default = nil)
  if valid_601046 != nil:
    section.add "X-Amz-Security-Token", valid_601046
  var valid_601047 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601047 = validateParameter(valid_601047, JString, required = false,
                                 default = nil)
  if valid_601047 != nil:
    section.add "X-Amz-Content-Sha256", valid_601047
  var valid_601048 = header.getOrDefault("X-Amz-Algorithm")
  valid_601048 = validateParameter(valid_601048, JString, required = false,
                                 default = nil)
  if valid_601048 != nil:
    section.add "X-Amz-Algorithm", valid_601048
  var valid_601049 = header.getOrDefault("X-Amz-Signature")
  valid_601049 = validateParameter(valid_601049, JString, required = false,
                                 default = nil)
  if valid_601049 != nil:
    section.add "X-Amz-Signature", valid_601049
  var valid_601050 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601050 = validateParameter(valid_601050, JString, required = false,
                                 default = nil)
  if valid_601050 != nil:
    section.add "X-Amz-SignedHeaders", valid_601050
  var valid_601051 = header.getOrDefault("X-Amz-Credential")
  valid_601051 = validateParameter(valid_601051, JString, required = false,
                                 default = nil)
  if valid_601051 != nil:
    section.add "X-Amz-Credential", valid_601051
  result.add "header", section
  ## parameters in `formData` object:
  ##   OriginalRuleSetName: JString (required)
  ##                      : The name of the rule set to clone.
  ##   RuleSetName: JString (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OriginalRuleSetName` field"
  var valid_601052 = formData.getOrDefault("OriginalRuleSetName")
  valid_601052 = validateParameter(valid_601052, JString, required = true,
                                 default = nil)
  if valid_601052 != nil:
    section.add "OriginalRuleSetName", valid_601052
  var valid_601053 = formData.getOrDefault("RuleSetName")
  valid_601053 = validateParameter(valid_601053, JString, required = true,
                                 default = nil)
  if valid_601053 != nil:
    section.add "RuleSetName", valid_601053
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601054: Call_PostCloneReceiptRuleSet_601040; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a receipt rule set by cloning an existing one. All receipt rules and configurations are copied to the new receipt rule set and are completely independent of the source rule set.</p> <p>For information about setting up rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_601054.validator(path, query, header, formData, body)
  let scheme = call_601054.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601054.url(scheme.get, call_601054.host, call_601054.base,
                         call_601054.route, valid.getOrDefault("path"))
  result = hook(call_601054, url, valid)

proc call*(call_601055: Call_PostCloneReceiptRuleSet_601040;
          OriginalRuleSetName: string; RuleSetName: string;
          Action: string = "CloneReceiptRuleSet"; Version: string = "2010-12-01"): Recallable =
  ## postCloneReceiptRuleSet
  ## <p>Creates a receipt rule set by cloning an existing one. All receipt rules and configurations are copied to the new receipt rule set and are completely independent of the source rule set.</p> <p>For information about setting up rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   OriginalRuleSetName: string (required)
  ##                      : The name of the rule set to clone.
  ##   RuleSetName: string (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601056 = newJObject()
  var formData_601057 = newJObject()
  add(formData_601057, "OriginalRuleSetName", newJString(OriginalRuleSetName))
  add(formData_601057, "RuleSetName", newJString(RuleSetName))
  add(query_601056, "Action", newJString(Action))
  add(query_601056, "Version", newJString(Version))
  result = call_601055.call(nil, query_601056, nil, formData_601057, nil)

var postCloneReceiptRuleSet* = Call_PostCloneReceiptRuleSet_601040(
    name: "postCloneReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=CloneReceiptRuleSet",
    validator: validate_PostCloneReceiptRuleSet_601041, base: "/",
    url: url_PostCloneReceiptRuleSet_601042, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCloneReceiptRuleSet_600768 = ref object of OpenApiRestCall_600426
proc url_GetCloneReceiptRuleSet_600770(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCloneReceiptRuleSet_600769(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a receipt rule set by cloning an existing one. All receipt rules and configurations are copied to the new receipt rule set and are completely independent of the source rule set.</p> <p>For information about setting up rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleSetName: JString (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Action: JString (required)
  ##   OriginalRuleSetName: JString (required)
  ##                      : The name of the rule set to clone.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleSetName` field"
  var valid_600882 = query.getOrDefault("RuleSetName")
  valid_600882 = validateParameter(valid_600882, JString, required = true,
                                 default = nil)
  if valid_600882 != nil:
    section.add "RuleSetName", valid_600882
  var valid_600896 = query.getOrDefault("Action")
  valid_600896 = validateParameter(valid_600896, JString, required = true,
                                 default = newJString("CloneReceiptRuleSet"))
  if valid_600896 != nil:
    section.add "Action", valid_600896
  var valid_600897 = query.getOrDefault("OriginalRuleSetName")
  valid_600897 = validateParameter(valid_600897, JString, required = true,
                                 default = nil)
  if valid_600897 != nil:
    section.add "OriginalRuleSetName", valid_600897
  var valid_600898 = query.getOrDefault("Version")
  valid_600898 = validateParameter(valid_600898, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_600898 != nil:
    section.add "Version", valid_600898
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600899 = header.getOrDefault("X-Amz-Date")
  valid_600899 = validateParameter(valid_600899, JString, required = false,
                                 default = nil)
  if valid_600899 != nil:
    section.add "X-Amz-Date", valid_600899
  var valid_600900 = header.getOrDefault("X-Amz-Security-Token")
  valid_600900 = validateParameter(valid_600900, JString, required = false,
                                 default = nil)
  if valid_600900 != nil:
    section.add "X-Amz-Security-Token", valid_600900
  var valid_600901 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600901 = validateParameter(valid_600901, JString, required = false,
                                 default = nil)
  if valid_600901 != nil:
    section.add "X-Amz-Content-Sha256", valid_600901
  var valid_600902 = header.getOrDefault("X-Amz-Algorithm")
  valid_600902 = validateParameter(valid_600902, JString, required = false,
                                 default = nil)
  if valid_600902 != nil:
    section.add "X-Amz-Algorithm", valid_600902
  var valid_600903 = header.getOrDefault("X-Amz-Signature")
  valid_600903 = validateParameter(valid_600903, JString, required = false,
                                 default = nil)
  if valid_600903 != nil:
    section.add "X-Amz-Signature", valid_600903
  var valid_600904 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600904 = validateParameter(valid_600904, JString, required = false,
                                 default = nil)
  if valid_600904 != nil:
    section.add "X-Amz-SignedHeaders", valid_600904
  var valid_600905 = header.getOrDefault("X-Amz-Credential")
  valid_600905 = validateParameter(valid_600905, JString, required = false,
                                 default = nil)
  if valid_600905 != nil:
    section.add "X-Amz-Credential", valid_600905
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600928: Call_GetCloneReceiptRuleSet_600768; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a receipt rule set by cloning an existing one. All receipt rules and configurations are copied to the new receipt rule set and are completely independent of the source rule set.</p> <p>For information about setting up rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_600928.validator(path, query, header, formData, body)
  let scheme = call_600928.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600928.url(scheme.get, call_600928.host, call_600928.base,
                         call_600928.route, valid.getOrDefault("path"))
  result = hook(call_600928, url, valid)

proc call*(call_600999: Call_GetCloneReceiptRuleSet_600768; RuleSetName: string;
          OriginalRuleSetName: string; Action: string = "CloneReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## getCloneReceiptRuleSet
  ## <p>Creates a receipt rule set by cloning an existing one. All receipt rules and configurations are copied to the new receipt rule set and are completely independent of the source rule set.</p> <p>For information about setting up rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Action: string (required)
  ##   OriginalRuleSetName: string (required)
  ##                      : The name of the rule set to clone.
  ##   Version: string (required)
  var query_601000 = newJObject()
  add(query_601000, "RuleSetName", newJString(RuleSetName))
  add(query_601000, "Action", newJString(Action))
  add(query_601000, "OriginalRuleSetName", newJString(OriginalRuleSetName))
  add(query_601000, "Version", newJString(Version))
  result = call_600999.call(nil, query_601000, nil, nil, nil)

var getCloneReceiptRuleSet* = Call_GetCloneReceiptRuleSet_600768(
    name: "getCloneReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=CloneReceiptRuleSet",
    validator: validate_GetCloneReceiptRuleSet_600769, base: "/",
    url: url_GetCloneReceiptRuleSet_600770, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateConfigurationSet_601074 = ref object of OpenApiRestCall_600426
proc url_PostCreateConfigurationSet_601076(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateConfigurationSet_601075(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a configuration set.</p> <p>Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601077 = query.getOrDefault("Action")
  valid_601077 = validateParameter(valid_601077, JString, required = true,
                                 default = newJString("CreateConfigurationSet"))
  if valid_601077 != nil:
    section.add "Action", valid_601077
  var valid_601078 = query.getOrDefault("Version")
  valid_601078 = validateParameter(valid_601078, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601078 != nil:
    section.add "Version", valid_601078
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601079 = header.getOrDefault("X-Amz-Date")
  valid_601079 = validateParameter(valid_601079, JString, required = false,
                                 default = nil)
  if valid_601079 != nil:
    section.add "X-Amz-Date", valid_601079
  var valid_601080 = header.getOrDefault("X-Amz-Security-Token")
  valid_601080 = validateParameter(valid_601080, JString, required = false,
                                 default = nil)
  if valid_601080 != nil:
    section.add "X-Amz-Security-Token", valid_601080
  var valid_601081 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601081 = validateParameter(valid_601081, JString, required = false,
                                 default = nil)
  if valid_601081 != nil:
    section.add "X-Amz-Content-Sha256", valid_601081
  var valid_601082 = header.getOrDefault("X-Amz-Algorithm")
  valid_601082 = validateParameter(valid_601082, JString, required = false,
                                 default = nil)
  if valid_601082 != nil:
    section.add "X-Amz-Algorithm", valid_601082
  var valid_601083 = header.getOrDefault("X-Amz-Signature")
  valid_601083 = validateParameter(valid_601083, JString, required = false,
                                 default = nil)
  if valid_601083 != nil:
    section.add "X-Amz-Signature", valid_601083
  var valid_601084 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601084 = validateParameter(valid_601084, JString, required = false,
                                 default = nil)
  if valid_601084 != nil:
    section.add "X-Amz-SignedHeaders", valid_601084
  var valid_601085 = header.getOrDefault("X-Amz-Credential")
  valid_601085 = validateParameter(valid_601085, JString, required = false,
                                 default = nil)
  if valid_601085 != nil:
    section.add "X-Amz-Credential", valid_601085
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSet.Name: JString
  ##                        : <p>The name of the configuration set.</p> <p>Configuration sets let you create groups of rules that you can apply to the emails you send using Amazon SES. For more information about using configuration sets, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/using-configuration-sets.html">Using Amazon SES Configuration Sets</a> in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the configuration set. The name must meet the following requirements:</p> <ul> <li> <p>Contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain 64 characters or fewer.</p> </li> </ul>
  section = newJObject()
  var valid_601086 = formData.getOrDefault("ConfigurationSet.Name")
  valid_601086 = validateParameter(valid_601086, JString, required = false,
                                 default = nil)
  if valid_601086 != nil:
    section.add "ConfigurationSet.Name", valid_601086
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601087: Call_PostCreateConfigurationSet_601074; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a configuration set.</p> <p>Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_601087.validator(path, query, header, formData, body)
  let scheme = call_601087.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601087.url(scheme.get, call_601087.host, call_601087.base,
                         call_601087.route, valid.getOrDefault("path"))
  result = hook(call_601087, url, valid)

proc call*(call_601088: Call_PostCreateConfigurationSet_601074;
          ConfigurationSetName: string = "";
          Action: string = "CreateConfigurationSet"; Version: string = "2010-12-01"): Recallable =
  ## postCreateConfigurationSet
  ## <p>Creates a configuration set.</p> <p>Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string
  ##                       : <p>The name of the configuration set.</p> <p>Configuration sets let you create groups of rules that you can apply to the emails you send using Amazon SES. For more information about using configuration sets, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/using-configuration-sets.html">Using Amazon SES Configuration Sets</a> in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the configuration set. The name must meet the following requirements:</p> <ul> <li> <p>Contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain 64 characters or fewer.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601089 = newJObject()
  var formData_601090 = newJObject()
  add(formData_601090, "ConfigurationSet.Name", newJString(ConfigurationSetName))
  add(query_601089, "Action", newJString(Action))
  add(query_601089, "Version", newJString(Version))
  result = call_601088.call(nil, query_601089, nil, formData_601090, nil)

var postCreateConfigurationSet* = Call_PostCreateConfigurationSet_601074(
    name: "postCreateConfigurationSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=CreateConfigurationSet",
    validator: validate_PostCreateConfigurationSet_601075, base: "/",
    url: url_PostCreateConfigurationSet_601076,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateConfigurationSet_601058 = ref object of OpenApiRestCall_600426
proc url_GetCreateConfigurationSet_601060(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateConfigurationSet_601059(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a configuration set.</p> <p>Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ConfigurationSet.Name: JString
  ##                        : <p>The name of the configuration set.</p> <p>Configuration sets let you create groups of rules that you can apply to the emails you send using Amazon SES. For more information about using configuration sets, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/using-configuration-sets.html">Using Amazon SES Configuration Sets</a> in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the configuration set. The name must meet the following requirements:</p> <ul> <li> <p>Contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain 64 characters or fewer.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_601061 = query.getOrDefault("ConfigurationSet.Name")
  valid_601061 = validateParameter(valid_601061, JString, required = false,
                                 default = nil)
  if valid_601061 != nil:
    section.add "ConfigurationSet.Name", valid_601061
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601062 = query.getOrDefault("Action")
  valid_601062 = validateParameter(valid_601062, JString, required = true,
                                 default = newJString("CreateConfigurationSet"))
  if valid_601062 != nil:
    section.add "Action", valid_601062
  var valid_601063 = query.getOrDefault("Version")
  valid_601063 = validateParameter(valid_601063, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601063 != nil:
    section.add "Version", valid_601063
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601064 = header.getOrDefault("X-Amz-Date")
  valid_601064 = validateParameter(valid_601064, JString, required = false,
                                 default = nil)
  if valid_601064 != nil:
    section.add "X-Amz-Date", valid_601064
  var valid_601065 = header.getOrDefault("X-Amz-Security-Token")
  valid_601065 = validateParameter(valid_601065, JString, required = false,
                                 default = nil)
  if valid_601065 != nil:
    section.add "X-Amz-Security-Token", valid_601065
  var valid_601066 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601066 = validateParameter(valid_601066, JString, required = false,
                                 default = nil)
  if valid_601066 != nil:
    section.add "X-Amz-Content-Sha256", valid_601066
  var valid_601067 = header.getOrDefault("X-Amz-Algorithm")
  valid_601067 = validateParameter(valid_601067, JString, required = false,
                                 default = nil)
  if valid_601067 != nil:
    section.add "X-Amz-Algorithm", valid_601067
  var valid_601068 = header.getOrDefault("X-Amz-Signature")
  valid_601068 = validateParameter(valid_601068, JString, required = false,
                                 default = nil)
  if valid_601068 != nil:
    section.add "X-Amz-Signature", valid_601068
  var valid_601069 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601069 = validateParameter(valid_601069, JString, required = false,
                                 default = nil)
  if valid_601069 != nil:
    section.add "X-Amz-SignedHeaders", valid_601069
  var valid_601070 = header.getOrDefault("X-Amz-Credential")
  valid_601070 = validateParameter(valid_601070, JString, required = false,
                                 default = nil)
  if valid_601070 != nil:
    section.add "X-Amz-Credential", valid_601070
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601071: Call_GetCreateConfigurationSet_601058; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a configuration set.</p> <p>Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_601071.validator(path, query, header, formData, body)
  let scheme = call_601071.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601071.url(scheme.get, call_601071.host, call_601071.base,
                         call_601071.route, valid.getOrDefault("path"))
  result = hook(call_601071, url, valid)

proc call*(call_601072: Call_GetCreateConfigurationSet_601058;
          ConfigurationSetName: string = "";
          Action: string = "CreateConfigurationSet"; Version: string = "2010-12-01"): Recallable =
  ## getCreateConfigurationSet
  ## <p>Creates a configuration set.</p> <p>Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string
  ##                       : <p>The name of the configuration set.</p> <p>Configuration sets let you create groups of rules that you can apply to the emails you send using Amazon SES. For more information about using configuration sets, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/using-configuration-sets.html">Using Amazon SES Configuration Sets</a> in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the configuration set. The name must meet the following requirements:</p> <ul> <li> <p>Contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain 64 characters or fewer.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601073 = newJObject()
  add(query_601073, "ConfigurationSet.Name", newJString(ConfigurationSetName))
  add(query_601073, "Action", newJString(Action))
  add(query_601073, "Version", newJString(Version))
  result = call_601072.call(nil, query_601073, nil, nil, nil)

var getCreateConfigurationSet* = Call_GetCreateConfigurationSet_601058(
    name: "getCreateConfigurationSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=CreateConfigurationSet",
    validator: validate_GetCreateConfigurationSet_601059, base: "/",
    url: url_GetCreateConfigurationSet_601060,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateConfigurationSetEventDestination_601113 = ref object of OpenApiRestCall_600426
proc url_PostCreateConfigurationSetEventDestination_601115(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateConfigurationSetEventDestination_601114(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a configuration set event destination.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>An event destination is the AWS service to which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601116 = query.getOrDefault("Action")
  valid_601116 = validateParameter(valid_601116, JString, required = true, default = newJString(
      "CreateConfigurationSetEventDestination"))
  if valid_601116 != nil:
    section.add "Action", valid_601116
  var valid_601117 = query.getOrDefault("Version")
  valid_601117 = validateParameter(valid_601117, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601117 != nil:
    section.add "Version", valid_601117
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601118 = header.getOrDefault("X-Amz-Date")
  valid_601118 = validateParameter(valid_601118, JString, required = false,
                                 default = nil)
  if valid_601118 != nil:
    section.add "X-Amz-Date", valid_601118
  var valid_601119 = header.getOrDefault("X-Amz-Security-Token")
  valid_601119 = validateParameter(valid_601119, JString, required = false,
                                 default = nil)
  if valid_601119 != nil:
    section.add "X-Amz-Security-Token", valid_601119
  var valid_601120 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601120 = validateParameter(valid_601120, JString, required = false,
                                 default = nil)
  if valid_601120 != nil:
    section.add "X-Amz-Content-Sha256", valid_601120
  var valid_601121 = header.getOrDefault("X-Amz-Algorithm")
  valid_601121 = validateParameter(valid_601121, JString, required = false,
                                 default = nil)
  if valid_601121 != nil:
    section.add "X-Amz-Algorithm", valid_601121
  var valid_601122 = header.getOrDefault("X-Amz-Signature")
  valid_601122 = validateParameter(valid_601122, JString, required = false,
                                 default = nil)
  if valid_601122 != nil:
    section.add "X-Amz-Signature", valid_601122
  var valid_601123 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601123 = validateParameter(valid_601123, JString, required = false,
                                 default = nil)
  if valid_601123 != nil:
    section.add "X-Amz-SignedHeaders", valid_601123
  var valid_601124 = header.getOrDefault("X-Amz-Credential")
  valid_601124 = validateParameter(valid_601124, JString, required = false,
                                 default = nil)
  if valid_601124 != nil:
    section.add "X-Amz-Credential", valid_601124
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that the event destination should be associated with.
  ##   EventDestination.Name: JString
  ##                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestination.CloudWatchDestination: JString
  ##                                         : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   EventDestination.MatchingEventTypes: JArray
  ##                                      : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   EventDestination.KinesisFirehoseDestination: JString
  ##                                              : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   EventDestination.Enabled: JString
  ##                           : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestination.SNSDestination: JString
  ##                                  : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_601125 = formData.getOrDefault("ConfigurationSetName")
  valid_601125 = validateParameter(valid_601125, JString, required = true,
                                 default = nil)
  if valid_601125 != nil:
    section.add "ConfigurationSetName", valid_601125
  var valid_601126 = formData.getOrDefault("EventDestination.Name")
  valid_601126 = validateParameter(valid_601126, JString, required = false,
                                 default = nil)
  if valid_601126 != nil:
    section.add "EventDestination.Name", valid_601126
  var valid_601127 = formData.getOrDefault("EventDestination.CloudWatchDestination")
  valid_601127 = validateParameter(valid_601127, JString, required = false,
                                 default = nil)
  if valid_601127 != nil:
    section.add "EventDestination.CloudWatchDestination", valid_601127
  var valid_601128 = formData.getOrDefault("EventDestination.MatchingEventTypes")
  valid_601128 = validateParameter(valid_601128, JArray, required = false,
                                 default = nil)
  if valid_601128 != nil:
    section.add "EventDestination.MatchingEventTypes", valid_601128
  var valid_601129 = formData.getOrDefault("EventDestination.KinesisFirehoseDestination")
  valid_601129 = validateParameter(valid_601129, JString, required = false,
                                 default = nil)
  if valid_601129 != nil:
    section.add "EventDestination.KinesisFirehoseDestination", valid_601129
  var valid_601130 = formData.getOrDefault("EventDestination.Enabled")
  valid_601130 = validateParameter(valid_601130, JString, required = false,
                                 default = nil)
  if valid_601130 != nil:
    section.add "EventDestination.Enabled", valid_601130
  var valid_601131 = formData.getOrDefault("EventDestination.SNSDestination")
  valid_601131 = validateParameter(valid_601131, JString, required = false,
                                 default = nil)
  if valid_601131 != nil:
    section.add "EventDestination.SNSDestination", valid_601131
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601132: Call_PostCreateConfigurationSetEventDestination_601113;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a configuration set event destination.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>An event destination is the AWS service to which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_601132.validator(path, query, header, formData, body)
  let scheme = call_601132.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601132.url(scheme.get, call_601132.host, call_601132.base,
                         call_601132.route, valid.getOrDefault("path"))
  result = hook(call_601132, url, valid)

proc call*(call_601133: Call_PostCreateConfigurationSetEventDestination_601113;
          ConfigurationSetName: string; EventDestinationName: string = "";
          EventDestinationCloudWatchDestination: string = "";
          Action: string = "CreateConfigurationSetEventDestination";
          EventDestinationMatchingEventTypes: JsonNode = nil;
          EventDestinationKinesisFirehoseDestination: string = "";
          EventDestinationEnabled: string = "";
          EventDestinationSNSDestination: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## postCreateConfigurationSetEventDestination
  ## <p>Creates a configuration set event destination.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>An event destination is the AWS service to which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that the event destination should be associated with.
  ##   EventDestinationName: string
  ##                       : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestinationCloudWatchDestination: string
  ##                                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   Action: string (required)
  ##   EventDestinationMatchingEventTypes: JArray
  ##                                     : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   EventDestinationKinesisFirehoseDestination: string
  ##                                             : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   EventDestinationEnabled: string
  ##                          : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestinationSNSDestination: string
  ##                                 : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  ##   Version: string (required)
  var query_601134 = newJObject()
  var formData_601135 = newJObject()
  add(formData_601135, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_601135, "EventDestination.Name", newJString(EventDestinationName))
  add(formData_601135, "EventDestination.CloudWatchDestination",
      newJString(EventDestinationCloudWatchDestination))
  add(query_601134, "Action", newJString(Action))
  if EventDestinationMatchingEventTypes != nil:
    formData_601135.add "EventDestination.MatchingEventTypes",
                       EventDestinationMatchingEventTypes
  add(formData_601135, "EventDestination.KinesisFirehoseDestination",
      newJString(EventDestinationKinesisFirehoseDestination))
  add(formData_601135, "EventDestination.Enabled",
      newJString(EventDestinationEnabled))
  add(formData_601135, "EventDestination.SNSDestination",
      newJString(EventDestinationSNSDestination))
  add(query_601134, "Version", newJString(Version))
  result = call_601133.call(nil, query_601134, nil, formData_601135, nil)

var postCreateConfigurationSetEventDestination* = Call_PostCreateConfigurationSetEventDestination_601113(
    name: "postCreateConfigurationSetEventDestination", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=CreateConfigurationSetEventDestination",
    validator: validate_PostCreateConfigurationSetEventDestination_601114,
    base: "/", url: url_PostCreateConfigurationSetEventDestination_601115,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateConfigurationSetEventDestination_601091 = ref object of OpenApiRestCall_600426
proc url_GetCreateConfigurationSetEventDestination_601093(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateConfigurationSetEventDestination_601092(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a configuration set event destination.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>An event destination is the AWS service to which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EventDestination.Enabled: JString
  ##                           : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestination.KinesisFirehoseDestination: JString
  ##                                              : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   Action: JString (required)
  ##   EventDestination.Name: JString
  ##                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestination.CloudWatchDestination: JString
  ##                                         : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   EventDestination.SNSDestination: JString
  ##                                  : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  ##   EventDestination.MatchingEventTypes: JArray
  ##                                      : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that the event destination should be associated with.
  ##   Version: JString (required)
  section = newJObject()
  var valid_601094 = query.getOrDefault("EventDestination.Enabled")
  valid_601094 = validateParameter(valid_601094, JString, required = false,
                                 default = nil)
  if valid_601094 != nil:
    section.add "EventDestination.Enabled", valid_601094
  var valid_601095 = query.getOrDefault("EventDestination.KinesisFirehoseDestination")
  valid_601095 = validateParameter(valid_601095, JString, required = false,
                                 default = nil)
  if valid_601095 != nil:
    section.add "EventDestination.KinesisFirehoseDestination", valid_601095
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601096 = query.getOrDefault("Action")
  valid_601096 = validateParameter(valid_601096, JString, required = true, default = newJString(
      "CreateConfigurationSetEventDestination"))
  if valid_601096 != nil:
    section.add "Action", valid_601096
  var valid_601097 = query.getOrDefault("EventDestination.Name")
  valid_601097 = validateParameter(valid_601097, JString, required = false,
                                 default = nil)
  if valid_601097 != nil:
    section.add "EventDestination.Name", valid_601097
  var valid_601098 = query.getOrDefault("EventDestination.CloudWatchDestination")
  valid_601098 = validateParameter(valid_601098, JString, required = false,
                                 default = nil)
  if valid_601098 != nil:
    section.add "EventDestination.CloudWatchDestination", valid_601098
  var valid_601099 = query.getOrDefault("EventDestination.SNSDestination")
  valid_601099 = validateParameter(valid_601099, JString, required = false,
                                 default = nil)
  if valid_601099 != nil:
    section.add "EventDestination.SNSDestination", valid_601099
  var valid_601100 = query.getOrDefault("EventDestination.MatchingEventTypes")
  valid_601100 = validateParameter(valid_601100, JArray, required = false,
                                 default = nil)
  if valid_601100 != nil:
    section.add "EventDestination.MatchingEventTypes", valid_601100
  var valid_601101 = query.getOrDefault("ConfigurationSetName")
  valid_601101 = validateParameter(valid_601101, JString, required = true,
                                 default = nil)
  if valid_601101 != nil:
    section.add "ConfigurationSetName", valid_601101
  var valid_601102 = query.getOrDefault("Version")
  valid_601102 = validateParameter(valid_601102, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601102 != nil:
    section.add "Version", valid_601102
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601103 = header.getOrDefault("X-Amz-Date")
  valid_601103 = validateParameter(valid_601103, JString, required = false,
                                 default = nil)
  if valid_601103 != nil:
    section.add "X-Amz-Date", valid_601103
  var valid_601104 = header.getOrDefault("X-Amz-Security-Token")
  valid_601104 = validateParameter(valid_601104, JString, required = false,
                                 default = nil)
  if valid_601104 != nil:
    section.add "X-Amz-Security-Token", valid_601104
  var valid_601105 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601105 = validateParameter(valid_601105, JString, required = false,
                                 default = nil)
  if valid_601105 != nil:
    section.add "X-Amz-Content-Sha256", valid_601105
  var valid_601106 = header.getOrDefault("X-Amz-Algorithm")
  valid_601106 = validateParameter(valid_601106, JString, required = false,
                                 default = nil)
  if valid_601106 != nil:
    section.add "X-Amz-Algorithm", valid_601106
  var valid_601107 = header.getOrDefault("X-Amz-Signature")
  valid_601107 = validateParameter(valid_601107, JString, required = false,
                                 default = nil)
  if valid_601107 != nil:
    section.add "X-Amz-Signature", valid_601107
  var valid_601108 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601108 = validateParameter(valid_601108, JString, required = false,
                                 default = nil)
  if valid_601108 != nil:
    section.add "X-Amz-SignedHeaders", valid_601108
  var valid_601109 = header.getOrDefault("X-Amz-Credential")
  valid_601109 = validateParameter(valid_601109, JString, required = false,
                                 default = nil)
  if valid_601109 != nil:
    section.add "X-Amz-Credential", valid_601109
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601110: Call_GetCreateConfigurationSetEventDestination_601091;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a configuration set event destination.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>An event destination is the AWS service to which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_601110.validator(path, query, header, formData, body)
  let scheme = call_601110.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601110.url(scheme.get, call_601110.host, call_601110.base,
                         call_601110.route, valid.getOrDefault("path"))
  result = hook(call_601110, url, valid)

proc call*(call_601111: Call_GetCreateConfigurationSetEventDestination_601091;
          ConfigurationSetName: string; EventDestinationEnabled: string = "";
          EventDestinationKinesisFirehoseDestination: string = "";
          Action: string = "CreateConfigurationSetEventDestination";
          EventDestinationName: string = "";
          EventDestinationCloudWatchDestination: string = "";
          EventDestinationSNSDestination: string = "";
          EventDestinationMatchingEventTypes: JsonNode = nil;
          Version: string = "2010-12-01"): Recallable =
  ## getCreateConfigurationSetEventDestination
  ## <p>Creates a configuration set event destination.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>An event destination is the AWS service to which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   EventDestinationEnabled: string
  ##                          : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestinationKinesisFirehoseDestination: string
  ##                                             : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   Action: string (required)
  ##   EventDestinationName: string
  ##                       : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestinationCloudWatchDestination: string
  ##                                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   EventDestinationSNSDestination: string
  ##                                 : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  ##   EventDestinationMatchingEventTypes: JArray
  ##                                     : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that the event destination should be associated with.
  ##   Version: string (required)
  var query_601112 = newJObject()
  add(query_601112, "EventDestination.Enabled",
      newJString(EventDestinationEnabled))
  add(query_601112, "EventDestination.KinesisFirehoseDestination",
      newJString(EventDestinationKinesisFirehoseDestination))
  add(query_601112, "Action", newJString(Action))
  add(query_601112, "EventDestination.Name", newJString(EventDestinationName))
  add(query_601112, "EventDestination.CloudWatchDestination",
      newJString(EventDestinationCloudWatchDestination))
  add(query_601112, "EventDestination.SNSDestination",
      newJString(EventDestinationSNSDestination))
  if EventDestinationMatchingEventTypes != nil:
    query_601112.add "EventDestination.MatchingEventTypes",
                    EventDestinationMatchingEventTypes
  add(query_601112, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_601112, "Version", newJString(Version))
  result = call_601111.call(nil, query_601112, nil, nil, nil)

var getCreateConfigurationSetEventDestination* = Call_GetCreateConfigurationSetEventDestination_601091(
    name: "getCreateConfigurationSetEventDestination", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=CreateConfigurationSetEventDestination",
    validator: validate_GetCreateConfigurationSetEventDestination_601092,
    base: "/", url: url_GetCreateConfigurationSetEventDestination_601093,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateConfigurationSetTrackingOptions_601153 = ref object of OpenApiRestCall_600426
proc url_PostCreateConfigurationSetTrackingOptions_601155(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateConfigurationSetTrackingOptions_601154(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601156 = query.getOrDefault("Action")
  valid_601156 = validateParameter(valid_601156, JString, required = true, default = newJString(
      "CreateConfigurationSetTrackingOptions"))
  if valid_601156 != nil:
    section.add "Action", valid_601156
  var valid_601157 = query.getOrDefault("Version")
  valid_601157 = validateParameter(valid_601157, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601157 != nil:
    section.add "Version", valid_601157
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601158 = header.getOrDefault("X-Amz-Date")
  valid_601158 = validateParameter(valid_601158, JString, required = false,
                                 default = nil)
  if valid_601158 != nil:
    section.add "X-Amz-Date", valid_601158
  var valid_601159 = header.getOrDefault("X-Amz-Security-Token")
  valid_601159 = validateParameter(valid_601159, JString, required = false,
                                 default = nil)
  if valid_601159 != nil:
    section.add "X-Amz-Security-Token", valid_601159
  var valid_601160 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601160 = validateParameter(valid_601160, JString, required = false,
                                 default = nil)
  if valid_601160 != nil:
    section.add "X-Amz-Content-Sha256", valid_601160
  var valid_601161 = header.getOrDefault("X-Amz-Algorithm")
  valid_601161 = validateParameter(valid_601161, JString, required = false,
                                 default = nil)
  if valid_601161 != nil:
    section.add "X-Amz-Algorithm", valid_601161
  var valid_601162 = header.getOrDefault("X-Amz-Signature")
  valid_601162 = validateParameter(valid_601162, JString, required = false,
                                 default = nil)
  if valid_601162 != nil:
    section.add "X-Amz-Signature", valid_601162
  var valid_601163 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601163 = validateParameter(valid_601163, JString, required = false,
                                 default = nil)
  if valid_601163 != nil:
    section.add "X-Amz-SignedHeaders", valid_601163
  var valid_601164 = header.getOrDefault("X-Amz-Credential")
  valid_601164 = validateParameter(valid_601164, JString, required = false,
                                 default = nil)
  if valid_601164 != nil:
    section.add "X-Amz-Credential", valid_601164
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that the tracking options should be associated with.
  ##   TrackingOptions.CustomRedirectDomain: JString
  ##                                       : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_601165 = formData.getOrDefault("ConfigurationSetName")
  valid_601165 = validateParameter(valid_601165, JString, required = true,
                                 default = nil)
  if valid_601165 != nil:
    section.add "ConfigurationSetName", valid_601165
  var valid_601166 = formData.getOrDefault("TrackingOptions.CustomRedirectDomain")
  valid_601166 = validateParameter(valid_601166, JString, required = false,
                                 default = nil)
  if valid_601166 != nil:
    section.add "TrackingOptions.CustomRedirectDomain", valid_601166
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601167: Call_PostCreateConfigurationSetTrackingOptions_601153;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_601167.validator(path, query, header, formData, body)
  let scheme = call_601167.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601167.url(scheme.get, call_601167.host, call_601167.base,
                         call_601167.route, valid.getOrDefault("path"))
  result = hook(call_601167, url, valid)

proc call*(call_601168: Call_PostCreateConfigurationSetTrackingOptions_601153;
          ConfigurationSetName: string;
          Action: string = "CreateConfigurationSetTrackingOptions";
          TrackingOptionsCustomRedirectDomain: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## postCreateConfigurationSetTrackingOptions
  ## <p>Creates an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that the tracking options should be associated with.
  ##   Action: string (required)
  ##   TrackingOptionsCustomRedirectDomain: string
  ##                                      : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  ##   Version: string (required)
  var query_601169 = newJObject()
  var formData_601170 = newJObject()
  add(formData_601170, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_601169, "Action", newJString(Action))
  add(formData_601170, "TrackingOptions.CustomRedirectDomain",
      newJString(TrackingOptionsCustomRedirectDomain))
  add(query_601169, "Version", newJString(Version))
  result = call_601168.call(nil, query_601169, nil, formData_601170, nil)

var postCreateConfigurationSetTrackingOptions* = Call_PostCreateConfigurationSetTrackingOptions_601153(
    name: "postCreateConfigurationSetTrackingOptions", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=CreateConfigurationSetTrackingOptions",
    validator: validate_PostCreateConfigurationSetTrackingOptions_601154,
    base: "/", url: url_PostCreateConfigurationSetTrackingOptions_601155,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateConfigurationSetTrackingOptions_601136 = ref object of OpenApiRestCall_600426
proc url_GetCreateConfigurationSetTrackingOptions_601138(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateConfigurationSetTrackingOptions_601137(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TrackingOptions.CustomRedirectDomain: JString
  ##                                       : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  ##   Action: JString (required)
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that the tracking options should be associated with.
  ##   Version: JString (required)
  section = newJObject()
  var valid_601139 = query.getOrDefault("TrackingOptions.CustomRedirectDomain")
  valid_601139 = validateParameter(valid_601139, JString, required = false,
                                 default = nil)
  if valid_601139 != nil:
    section.add "TrackingOptions.CustomRedirectDomain", valid_601139
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601140 = query.getOrDefault("Action")
  valid_601140 = validateParameter(valid_601140, JString, required = true, default = newJString(
      "CreateConfigurationSetTrackingOptions"))
  if valid_601140 != nil:
    section.add "Action", valid_601140
  var valid_601141 = query.getOrDefault("ConfigurationSetName")
  valid_601141 = validateParameter(valid_601141, JString, required = true,
                                 default = nil)
  if valid_601141 != nil:
    section.add "ConfigurationSetName", valid_601141
  var valid_601142 = query.getOrDefault("Version")
  valid_601142 = validateParameter(valid_601142, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601142 != nil:
    section.add "Version", valid_601142
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601143 = header.getOrDefault("X-Amz-Date")
  valid_601143 = validateParameter(valid_601143, JString, required = false,
                                 default = nil)
  if valid_601143 != nil:
    section.add "X-Amz-Date", valid_601143
  var valid_601144 = header.getOrDefault("X-Amz-Security-Token")
  valid_601144 = validateParameter(valid_601144, JString, required = false,
                                 default = nil)
  if valid_601144 != nil:
    section.add "X-Amz-Security-Token", valid_601144
  var valid_601145 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601145 = validateParameter(valid_601145, JString, required = false,
                                 default = nil)
  if valid_601145 != nil:
    section.add "X-Amz-Content-Sha256", valid_601145
  var valid_601146 = header.getOrDefault("X-Amz-Algorithm")
  valid_601146 = validateParameter(valid_601146, JString, required = false,
                                 default = nil)
  if valid_601146 != nil:
    section.add "X-Amz-Algorithm", valid_601146
  var valid_601147 = header.getOrDefault("X-Amz-Signature")
  valid_601147 = validateParameter(valid_601147, JString, required = false,
                                 default = nil)
  if valid_601147 != nil:
    section.add "X-Amz-Signature", valid_601147
  var valid_601148 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601148 = validateParameter(valid_601148, JString, required = false,
                                 default = nil)
  if valid_601148 != nil:
    section.add "X-Amz-SignedHeaders", valid_601148
  var valid_601149 = header.getOrDefault("X-Amz-Credential")
  valid_601149 = validateParameter(valid_601149, JString, required = false,
                                 default = nil)
  if valid_601149 != nil:
    section.add "X-Amz-Credential", valid_601149
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601150: Call_GetCreateConfigurationSetTrackingOptions_601136;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_601150.validator(path, query, header, formData, body)
  let scheme = call_601150.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601150.url(scheme.get, call_601150.host, call_601150.base,
                         call_601150.route, valid.getOrDefault("path"))
  result = hook(call_601150, url, valid)

proc call*(call_601151: Call_GetCreateConfigurationSetTrackingOptions_601136;
          ConfigurationSetName: string;
          TrackingOptionsCustomRedirectDomain: string = "";
          Action: string = "CreateConfigurationSetTrackingOptions";
          Version: string = "2010-12-01"): Recallable =
  ## getCreateConfigurationSetTrackingOptions
  ## <p>Creates an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ##   TrackingOptionsCustomRedirectDomain: string
  ##                                      : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that the tracking options should be associated with.
  ##   Version: string (required)
  var query_601152 = newJObject()
  add(query_601152, "TrackingOptions.CustomRedirectDomain",
      newJString(TrackingOptionsCustomRedirectDomain))
  add(query_601152, "Action", newJString(Action))
  add(query_601152, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_601152, "Version", newJString(Version))
  result = call_601151.call(nil, query_601152, nil, nil, nil)

var getCreateConfigurationSetTrackingOptions* = Call_GetCreateConfigurationSetTrackingOptions_601136(
    name: "getCreateConfigurationSetTrackingOptions", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=CreateConfigurationSetTrackingOptions",
    validator: validate_GetCreateConfigurationSetTrackingOptions_601137,
    base: "/", url: url_GetCreateConfigurationSetTrackingOptions_601138,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCustomVerificationEmailTemplate_601192 = ref object of OpenApiRestCall_600426
proc url_PostCreateCustomVerificationEmailTemplate_601194(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateCustomVerificationEmailTemplate_601193(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601195 = query.getOrDefault("Action")
  valid_601195 = validateParameter(valid_601195, JString, required = true, default = newJString(
      "CreateCustomVerificationEmailTemplate"))
  if valid_601195 != nil:
    section.add "Action", valid_601195
  var valid_601196 = query.getOrDefault("Version")
  valid_601196 = validateParameter(valid_601196, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601196 != nil:
    section.add "Version", valid_601196
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601197 = header.getOrDefault("X-Amz-Date")
  valid_601197 = validateParameter(valid_601197, JString, required = false,
                                 default = nil)
  if valid_601197 != nil:
    section.add "X-Amz-Date", valid_601197
  var valid_601198 = header.getOrDefault("X-Amz-Security-Token")
  valid_601198 = validateParameter(valid_601198, JString, required = false,
                                 default = nil)
  if valid_601198 != nil:
    section.add "X-Amz-Security-Token", valid_601198
  var valid_601199 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601199 = validateParameter(valid_601199, JString, required = false,
                                 default = nil)
  if valid_601199 != nil:
    section.add "X-Amz-Content-Sha256", valid_601199
  var valid_601200 = header.getOrDefault("X-Amz-Algorithm")
  valid_601200 = validateParameter(valid_601200, JString, required = false,
                                 default = nil)
  if valid_601200 != nil:
    section.add "X-Amz-Algorithm", valid_601200
  var valid_601201 = header.getOrDefault("X-Amz-Signature")
  valid_601201 = validateParameter(valid_601201, JString, required = false,
                                 default = nil)
  if valid_601201 != nil:
    section.add "X-Amz-Signature", valid_601201
  var valid_601202 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601202 = validateParameter(valid_601202, JString, required = false,
                                 default = nil)
  if valid_601202 != nil:
    section.add "X-Amz-SignedHeaders", valid_601202
  var valid_601203 = header.getOrDefault("X-Amz-Credential")
  valid_601203 = validateParameter(valid_601203, JString, required = false,
                                 default = nil)
  if valid_601203 != nil:
    section.add "X-Amz-Credential", valid_601203
  result.add "header", section
  ## parameters in `formData` object:
  ##   SuccessRedirectionURL: JString (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   FailureRedirectionURL: JString (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   FromEmailAddress: JString (required)
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateContent: JString (required)
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template.
  ##   TemplateSubject: JString (required)
  ##                  : The subject line of the custom verification email.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SuccessRedirectionURL` field"
  var valid_601204 = formData.getOrDefault("SuccessRedirectionURL")
  valid_601204 = validateParameter(valid_601204, JString, required = true,
                                 default = nil)
  if valid_601204 != nil:
    section.add "SuccessRedirectionURL", valid_601204
  var valid_601205 = formData.getOrDefault("FailureRedirectionURL")
  valid_601205 = validateParameter(valid_601205, JString, required = true,
                                 default = nil)
  if valid_601205 != nil:
    section.add "FailureRedirectionURL", valid_601205
  var valid_601206 = formData.getOrDefault("FromEmailAddress")
  valid_601206 = validateParameter(valid_601206, JString, required = true,
                                 default = nil)
  if valid_601206 != nil:
    section.add "FromEmailAddress", valid_601206
  var valid_601207 = formData.getOrDefault("TemplateContent")
  valid_601207 = validateParameter(valid_601207, JString, required = true,
                                 default = nil)
  if valid_601207 != nil:
    section.add "TemplateContent", valid_601207
  var valid_601208 = formData.getOrDefault("TemplateName")
  valid_601208 = validateParameter(valid_601208, JString, required = true,
                                 default = nil)
  if valid_601208 != nil:
    section.add "TemplateName", valid_601208
  var valid_601209 = formData.getOrDefault("TemplateSubject")
  valid_601209 = validateParameter(valid_601209, JString, required = true,
                                 default = nil)
  if valid_601209 != nil:
    section.add "TemplateSubject", valid_601209
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601210: Call_PostCreateCustomVerificationEmailTemplate_601192;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_601210.validator(path, query, header, formData, body)
  let scheme = call_601210.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601210.url(scheme.get, call_601210.host, call_601210.base,
                         call_601210.route, valid.getOrDefault("path"))
  result = hook(call_601210, url, valid)

proc call*(call_601211: Call_PostCreateCustomVerificationEmailTemplate_601192;
          SuccessRedirectionURL: string; FailureRedirectionURL: string;
          FromEmailAddress: string; TemplateContent: string; TemplateName: string;
          TemplateSubject: string;
          Action: string = "CreateCustomVerificationEmailTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## postCreateCustomVerificationEmailTemplate
  ## <p>Creates a new custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   SuccessRedirectionURL: string (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   FailureRedirectionURL: string (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   FromEmailAddress: string (required)
  ##                   : The email address that the custom verification email is sent from.
  ##   Action: string (required)
  ##   TemplateContent: string (required)
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template.
  ##   TemplateSubject: string (required)
  ##                  : The subject line of the custom verification email.
  ##   Version: string (required)
  var query_601212 = newJObject()
  var formData_601213 = newJObject()
  add(formData_601213, "SuccessRedirectionURL", newJString(SuccessRedirectionURL))
  add(formData_601213, "FailureRedirectionURL", newJString(FailureRedirectionURL))
  add(formData_601213, "FromEmailAddress", newJString(FromEmailAddress))
  add(query_601212, "Action", newJString(Action))
  add(formData_601213, "TemplateContent", newJString(TemplateContent))
  add(formData_601213, "TemplateName", newJString(TemplateName))
  add(formData_601213, "TemplateSubject", newJString(TemplateSubject))
  add(query_601212, "Version", newJString(Version))
  result = call_601211.call(nil, query_601212, nil, formData_601213, nil)

var postCreateCustomVerificationEmailTemplate* = Call_PostCreateCustomVerificationEmailTemplate_601192(
    name: "postCreateCustomVerificationEmailTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=CreateCustomVerificationEmailTemplate",
    validator: validate_PostCreateCustomVerificationEmailTemplate_601193,
    base: "/", url: url_PostCreateCustomVerificationEmailTemplate_601194,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCustomVerificationEmailTemplate_601171 = ref object of OpenApiRestCall_600426
proc url_GetCreateCustomVerificationEmailTemplate_601173(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateCustomVerificationEmailTemplate_601172(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TemplateSubject: JString (required)
  ##                  : The subject line of the custom verification email.
  ##   FromEmailAddress: JString (required)
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateContent: JString (required)
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   Action: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template.
  ##   SuccessRedirectionURL: JString (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   FailureRedirectionURL: JString (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `TemplateSubject` field"
  var valid_601174 = query.getOrDefault("TemplateSubject")
  valid_601174 = validateParameter(valid_601174, JString, required = true,
                                 default = nil)
  if valid_601174 != nil:
    section.add "TemplateSubject", valid_601174
  var valid_601175 = query.getOrDefault("FromEmailAddress")
  valid_601175 = validateParameter(valid_601175, JString, required = true,
                                 default = nil)
  if valid_601175 != nil:
    section.add "FromEmailAddress", valid_601175
  var valid_601176 = query.getOrDefault("TemplateContent")
  valid_601176 = validateParameter(valid_601176, JString, required = true,
                                 default = nil)
  if valid_601176 != nil:
    section.add "TemplateContent", valid_601176
  var valid_601177 = query.getOrDefault("Action")
  valid_601177 = validateParameter(valid_601177, JString, required = true, default = newJString(
      "CreateCustomVerificationEmailTemplate"))
  if valid_601177 != nil:
    section.add "Action", valid_601177
  var valid_601178 = query.getOrDefault("TemplateName")
  valid_601178 = validateParameter(valid_601178, JString, required = true,
                                 default = nil)
  if valid_601178 != nil:
    section.add "TemplateName", valid_601178
  var valid_601179 = query.getOrDefault("SuccessRedirectionURL")
  valid_601179 = validateParameter(valid_601179, JString, required = true,
                                 default = nil)
  if valid_601179 != nil:
    section.add "SuccessRedirectionURL", valid_601179
  var valid_601180 = query.getOrDefault("FailureRedirectionURL")
  valid_601180 = validateParameter(valid_601180, JString, required = true,
                                 default = nil)
  if valid_601180 != nil:
    section.add "FailureRedirectionURL", valid_601180
  var valid_601181 = query.getOrDefault("Version")
  valid_601181 = validateParameter(valid_601181, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601181 != nil:
    section.add "Version", valid_601181
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601182 = header.getOrDefault("X-Amz-Date")
  valid_601182 = validateParameter(valid_601182, JString, required = false,
                                 default = nil)
  if valid_601182 != nil:
    section.add "X-Amz-Date", valid_601182
  var valid_601183 = header.getOrDefault("X-Amz-Security-Token")
  valid_601183 = validateParameter(valid_601183, JString, required = false,
                                 default = nil)
  if valid_601183 != nil:
    section.add "X-Amz-Security-Token", valid_601183
  var valid_601184 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601184 = validateParameter(valid_601184, JString, required = false,
                                 default = nil)
  if valid_601184 != nil:
    section.add "X-Amz-Content-Sha256", valid_601184
  var valid_601185 = header.getOrDefault("X-Amz-Algorithm")
  valid_601185 = validateParameter(valid_601185, JString, required = false,
                                 default = nil)
  if valid_601185 != nil:
    section.add "X-Amz-Algorithm", valid_601185
  var valid_601186 = header.getOrDefault("X-Amz-Signature")
  valid_601186 = validateParameter(valid_601186, JString, required = false,
                                 default = nil)
  if valid_601186 != nil:
    section.add "X-Amz-Signature", valid_601186
  var valid_601187 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601187 = validateParameter(valid_601187, JString, required = false,
                                 default = nil)
  if valid_601187 != nil:
    section.add "X-Amz-SignedHeaders", valid_601187
  var valid_601188 = header.getOrDefault("X-Amz-Credential")
  valid_601188 = validateParameter(valid_601188, JString, required = false,
                                 default = nil)
  if valid_601188 != nil:
    section.add "X-Amz-Credential", valid_601188
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601189: Call_GetCreateCustomVerificationEmailTemplate_601171;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_601189.validator(path, query, header, formData, body)
  let scheme = call_601189.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601189.url(scheme.get, call_601189.host, call_601189.base,
                         call_601189.route, valid.getOrDefault("path"))
  result = hook(call_601189, url, valid)

proc call*(call_601190: Call_GetCreateCustomVerificationEmailTemplate_601171;
          TemplateSubject: string; FromEmailAddress: string;
          TemplateContent: string; TemplateName: string;
          SuccessRedirectionURL: string; FailureRedirectionURL: string;
          Action: string = "CreateCustomVerificationEmailTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## getCreateCustomVerificationEmailTemplate
  ## <p>Creates a new custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateSubject: string (required)
  ##                  : The subject line of the custom verification email.
  ##   FromEmailAddress: string (required)
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateContent: string (required)
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template.
  ##   SuccessRedirectionURL: string (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   FailureRedirectionURL: string (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   Version: string (required)
  var query_601191 = newJObject()
  add(query_601191, "TemplateSubject", newJString(TemplateSubject))
  add(query_601191, "FromEmailAddress", newJString(FromEmailAddress))
  add(query_601191, "TemplateContent", newJString(TemplateContent))
  add(query_601191, "Action", newJString(Action))
  add(query_601191, "TemplateName", newJString(TemplateName))
  add(query_601191, "SuccessRedirectionURL", newJString(SuccessRedirectionURL))
  add(query_601191, "FailureRedirectionURL", newJString(FailureRedirectionURL))
  add(query_601191, "Version", newJString(Version))
  result = call_601190.call(nil, query_601191, nil, nil, nil)

var getCreateCustomVerificationEmailTemplate* = Call_GetCreateCustomVerificationEmailTemplate_601171(
    name: "getCreateCustomVerificationEmailTemplate", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=CreateCustomVerificationEmailTemplate",
    validator: validate_GetCreateCustomVerificationEmailTemplate_601172,
    base: "/", url: url_GetCreateCustomVerificationEmailTemplate_601173,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateReceiptFilter_601231 = ref object of OpenApiRestCall_600426
proc url_PostCreateReceiptFilter_601233(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateReceiptFilter_601232(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new IP address filter.</p> <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601234 = query.getOrDefault("Action")
  valid_601234 = validateParameter(valid_601234, JString, required = true,
                                 default = newJString("CreateReceiptFilter"))
  if valid_601234 != nil:
    section.add "Action", valid_601234
  var valid_601235 = query.getOrDefault("Version")
  valid_601235 = validateParameter(valid_601235, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601235 != nil:
    section.add "Version", valid_601235
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601236 = header.getOrDefault("X-Amz-Date")
  valid_601236 = validateParameter(valid_601236, JString, required = false,
                                 default = nil)
  if valid_601236 != nil:
    section.add "X-Amz-Date", valid_601236
  var valid_601237 = header.getOrDefault("X-Amz-Security-Token")
  valid_601237 = validateParameter(valid_601237, JString, required = false,
                                 default = nil)
  if valid_601237 != nil:
    section.add "X-Amz-Security-Token", valid_601237
  var valid_601238 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601238 = validateParameter(valid_601238, JString, required = false,
                                 default = nil)
  if valid_601238 != nil:
    section.add "X-Amz-Content-Sha256", valid_601238
  var valid_601239 = header.getOrDefault("X-Amz-Algorithm")
  valid_601239 = validateParameter(valid_601239, JString, required = false,
                                 default = nil)
  if valid_601239 != nil:
    section.add "X-Amz-Algorithm", valid_601239
  var valid_601240 = header.getOrDefault("X-Amz-Signature")
  valid_601240 = validateParameter(valid_601240, JString, required = false,
                                 default = nil)
  if valid_601240 != nil:
    section.add "X-Amz-Signature", valid_601240
  var valid_601241 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601241 = validateParameter(valid_601241, JString, required = false,
                                 default = nil)
  if valid_601241 != nil:
    section.add "X-Amz-SignedHeaders", valid_601241
  var valid_601242 = header.getOrDefault("X-Amz-Credential")
  valid_601242 = validateParameter(valid_601242, JString, required = false,
                                 default = nil)
  if valid_601242 != nil:
    section.add "X-Amz-Credential", valid_601242
  result.add "header", section
  ## parameters in `formData` object:
  ##   Filter.IpFilter: JString
  ##                  : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## A structure that provides the IP addresses to block or allow, and whether to block or allow incoming mail from them.
  ##   Filter.Name: JString
  ##              : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the IP address filter. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  section = newJObject()
  var valid_601243 = formData.getOrDefault("Filter.IpFilter")
  valid_601243 = validateParameter(valid_601243, JString, required = false,
                                 default = nil)
  if valid_601243 != nil:
    section.add "Filter.IpFilter", valid_601243
  var valid_601244 = formData.getOrDefault("Filter.Name")
  valid_601244 = validateParameter(valid_601244, JString, required = false,
                                 default = nil)
  if valid_601244 != nil:
    section.add "Filter.Name", valid_601244
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601245: Call_PostCreateReceiptFilter_601231; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new IP address filter.</p> <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_601245.validator(path, query, header, formData, body)
  let scheme = call_601245.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601245.url(scheme.get, call_601245.host, call_601245.base,
                         call_601245.route, valid.getOrDefault("path"))
  result = hook(call_601245, url, valid)

proc call*(call_601246: Call_PostCreateReceiptFilter_601231;
          Action: string = "CreateReceiptFilter"; FilterIpFilter: string = "";
          FilterName: string = ""; Version: string = "2010-12-01"): Recallable =
  ## postCreateReceiptFilter
  ## <p>Creates a new IP address filter.</p> <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   FilterIpFilter: string
  ##                 : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## A structure that provides the IP addresses to block or allow, and whether to block or allow incoming mail from them.
  ##   FilterName: string
  ##             : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the IP address filter. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Version: string (required)
  var query_601247 = newJObject()
  var formData_601248 = newJObject()
  add(query_601247, "Action", newJString(Action))
  add(formData_601248, "Filter.IpFilter", newJString(FilterIpFilter))
  add(formData_601248, "Filter.Name", newJString(FilterName))
  add(query_601247, "Version", newJString(Version))
  result = call_601246.call(nil, query_601247, nil, formData_601248, nil)

var postCreateReceiptFilter* = Call_PostCreateReceiptFilter_601231(
    name: "postCreateReceiptFilter", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=CreateReceiptFilter",
    validator: validate_PostCreateReceiptFilter_601232, base: "/",
    url: url_PostCreateReceiptFilter_601233, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateReceiptFilter_601214 = ref object of OpenApiRestCall_600426
proc url_GetCreateReceiptFilter_601216(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateReceiptFilter_601215(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new IP address filter.</p> <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Filter.IpFilter: JString
  ##                  : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## A structure that provides the IP addresses to block or allow, and whether to block or allow incoming mail from them.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filter.Name: JString
  ##              : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the IP address filter. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  section = newJObject()
  var valid_601217 = query.getOrDefault("Filter.IpFilter")
  valid_601217 = validateParameter(valid_601217, JString, required = false,
                                 default = nil)
  if valid_601217 != nil:
    section.add "Filter.IpFilter", valid_601217
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601218 = query.getOrDefault("Action")
  valid_601218 = validateParameter(valid_601218, JString, required = true,
                                 default = newJString("CreateReceiptFilter"))
  if valid_601218 != nil:
    section.add "Action", valid_601218
  var valid_601219 = query.getOrDefault("Version")
  valid_601219 = validateParameter(valid_601219, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601219 != nil:
    section.add "Version", valid_601219
  var valid_601220 = query.getOrDefault("Filter.Name")
  valid_601220 = validateParameter(valid_601220, JString, required = false,
                                 default = nil)
  if valid_601220 != nil:
    section.add "Filter.Name", valid_601220
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601221 = header.getOrDefault("X-Amz-Date")
  valid_601221 = validateParameter(valid_601221, JString, required = false,
                                 default = nil)
  if valid_601221 != nil:
    section.add "X-Amz-Date", valid_601221
  var valid_601222 = header.getOrDefault("X-Amz-Security-Token")
  valid_601222 = validateParameter(valid_601222, JString, required = false,
                                 default = nil)
  if valid_601222 != nil:
    section.add "X-Amz-Security-Token", valid_601222
  var valid_601223 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601223 = validateParameter(valid_601223, JString, required = false,
                                 default = nil)
  if valid_601223 != nil:
    section.add "X-Amz-Content-Sha256", valid_601223
  var valid_601224 = header.getOrDefault("X-Amz-Algorithm")
  valid_601224 = validateParameter(valid_601224, JString, required = false,
                                 default = nil)
  if valid_601224 != nil:
    section.add "X-Amz-Algorithm", valid_601224
  var valid_601225 = header.getOrDefault("X-Amz-Signature")
  valid_601225 = validateParameter(valid_601225, JString, required = false,
                                 default = nil)
  if valid_601225 != nil:
    section.add "X-Amz-Signature", valid_601225
  var valid_601226 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601226 = validateParameter(valid_601226, JString, required = false,
                                 default = nil)
  if valid_601226 != nil:
    section.add "X-Amz-SignedHeaders", valid_601226
  var valid_601227 = header.getOrDefault("X-Amz-Credential")
  valid_601227 = validateParameter(valid_601227, JString, required = false,
                                 default = nil)
  if valid_601227 != nil:
    section.add "X-Amz-Credential", valid_601227
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601228: Call_GetCreateReceiptFilter_601214; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new IP address filter.</p> <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_601228.validator(path, query, header, formData, body)
  let scheme = call_601228.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601228.url(scheme.get, call_601228.host, call_601228.base,
                         call_601228.route, valid.getOrDefault("path"))
  result = hook(call_601228, url, valid)

proc call*(call_601229: Call_GetCreateReceiptFilter_601214;
          FilterIpFilter: string = ""; Action: string = "CreateReceiptFilter";
          Version: string = "2010-12-01"; FilterName: string = ""): Recallable =
  ## getCreateReceiptFilter
  ## <p>Creates a new IP address filter.</p> <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   FilterIpFilter: string
  ##                 : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## A structure that provides the IP addresses to block or allow, and whether to block or allow incoming mail from them.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   FilterName: string
  ##             : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the IP address filter. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  var query_601230 = newJObject()
  add(query_601230, "Filter.IpFilter", newJString(FilterIpFilter))
  add(query_601230, "Action", newJString(Action))
  add(query_601230, "Version", newJString(Version))
  add(query_601230, "Filter.Name", newJString(FilterName))
  result = call_601229.call(nil, query_601230, nil, nil, nil)

var getCreateReceiptFilter* = Call_GetCreateReceiptFilter_601214(
    name: "getCreateReceiptFilter", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=CreateReceiptFilter",
    validator: validate_GetCreateReceiptFilter_601215, base: "/",
    url: url_GetCreateReceiptFilter_601216, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateReceiptRule_601272 = ref object of OpenApiRestCall_600426
proc url_PostCreateReceiptRule_601274(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateReceiptRule_601273(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601275 = query.getOrDefault("Action")
  valid_601275 = validateParameter(valid_601275, JString, required = true,
                                 default = newJString("CreateReceiptRule"))
  if valid_601275 != nil:
    section.add "Action", valid_601275
  var valid_601276 = query.getOrDefault("Version")
  valid_601276 = validateParameter(valid_601276, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601276 != nil:
    section.add "Version", valid_601276
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601277 = header.getOrDefault("X-Amz-Date")
  valid_601277 = validateParameter(valid_601277, JString, required = false,
                                 default = nil)
  if valid_601277 != nil:
    section.add "X-Amz-Date", valid_601277
  var valid_601278 = header.getOrDefault("X-Amz-Security-Token")
  valid_601278 = validateParameter(valid_601278, JString, required = false,
                                 default = nil)
  if valid_601278 != nil:
    section.add "X-Amz-Security-Token", valid_601278
  var valid_601279 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601279 = validateParameter(valid_601279, JString, required = false,
                                 default = nil)
  if valid_601279 != nil:
    section.add "X-Amz-Content-Sha256", valid_601279
  var valid_601280 = header.getOrDefault("X-Amz-Algorithm")
  valid_601280 = validateParameter(valid_601280, JString, required = false,
                                 default = nil)
  if valid_601280 != nil:
    section.add "X-Amz-Algorithm", valid_601280
  var valid_601281 = header.getOrDefault("X-Amz-Signature")
  valid_601281 = validateParameter(valid_601281, JString, required = false,
                                 default = nil)
  if valid_601281 != nil:
    section.add "X-Amz-Signature", valid_601281
  var valid_601282 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601282 = validateParameter(valid_601282, JString, required = false,
                                 default = nil)
  if valid_601282 != nil:
    section.add "X-Amz-SignedHeaders", valid_601282
  var valid_601283 = header.getOrDefault("X-Amz-Credential")
  valid_601283 = validateParameter(valid_601283, JString, required = false,
                                 default = nil)
  if valid_601283 != nil:
    section.add "X-Amz-Credential", valid_601283
  result.add "header", section
  ## parameters in `formData` object:
  ##   Rule.Recipients: JArray
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   After: JString
  ##        : The name of an existing rule after which the new rule will be placed. If this parameter is null, the new rule will be inserted at the beginning of the rule list.
  ##   Rule.Enabled: JString
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   RuleSetName: JString (required)
  ##              : The name of the rule set that the receipt rule will be added to.
  ##   Rule.Actions: JArray
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   Rule.Name: JString
  ##            : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Rule.ScanEnabled: JString
  ##                   : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   Rule.TlsPolicy: JString
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  section = newJObject()
  var valid_601284 = formData.getOrDefault("Rule.Recipients")
  valid_601284 = validateParameter(valid_601284, JArray, required = false,
                                 default = nil)
  if valid_601284 != nil:
    section.add "Rule.Recipients", valid_601284
  var valid_601285 = formData.getOrDefault("After")
  valid_601285 = validateParameter(valid_601285, JString, required = false,
                                 default = nil)
  if valid_601285 != nil:
    section.add "After", valid_601285
  var valid_601286 = formData.getOrDefault("Rule.Enabled")
  valid_601286 = validateParameter(valid_601286, JString, required = false,
                                 default = nil)
  if valid_601286 != nil:
    section.add "Rule.Enabled", valid_601286
  assert formData != nil,
        "formData argument is necessary due to required `RuleSetName` field"
  var valid_601287 = formData.getOrDefault("RuleSetName")
  valid_601287 = validateParameter(valid_601287, JString, required = true,
                                 default = nil)
  if valid_601287 != nil:
    section.add "RuleSetName", valid_601287
  var valid_601288 = formData.getOrDefault("Rule.Actions")
  valid_601288 = validateParameter(valid_601288, JArray, required = false,
                                 default = nil)
  if valid_601288 != nil:
    section.add "Rule.Actions", valid_601288
  var valid_601289 = formData.getOrDefault("Rule.Name")
  valid_601289 = validateParameter(valid_601289, JString, required = false,
                                 default = nil)
  if valid_601289 != nil:
    section.add "Rule.Name", valid_601289
  var valid_601290 = formData.getOrDefault("Rule.ScanEnabled")
  valid_601290 = validateParameter(valid_601290, JString, required = false,
                                 default = nil)
  if valid_601290 != nil:
    section.add "Rule.ScanEnabled", valid_601290
  var valid_601291 = formData.getOrDefault("Rule.TlsPolicy")
  valid_601291 = validateParameter(valid_601291, JString, required = false,
                                 default = nil)
  if valid_601291 != nil:
    section.add "Rule.TlsPolicy", valid_601291
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601292: Call_PostCreateReceiptRule_601272; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_601292.validator(path, query, header, formData, body)
  let scheme = call_601292.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601292.url(scheme.get, call_601292.host, call_601292.base,
                         call_601292.route, valid.getOrDefault("path"))
  result = hook(call_601292, url, valid)

proc call*(call_601293: Call_PostCreateReceiptRule_601272; RuleSetName: string;
          RuleRecipients: JsonNode = nil; After: string = ""; RuleEnabled: string = "";
          Action: string = "CreateReceiptRule"; RuleActions: JsonNode = nil;
          RuleName: string = ""; RuleScanEnabled: string = "";
          RuleTlsPolicy: string = ""; Version: string = "2010-12-01"): Recallable =
  ## postCreateReceiptRule
  ## <p>Creates a receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleRecipients: JArray
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   After: string
  ##        : The name of an existing rule after which the new rule will be placed. If this parameter is null, the new rule will be inserted at the beginning of the rule list.
  ##   RuleEnabled: string
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   RuleSetName: string (required)
  ##              : The name of the rule set that the receipt rule will be added to.
  ##   Action: string (required)
  ##   RuleActions: JArray
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   RuleName: string
  ##           : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   RuleScanEnabled: string
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   RuleTlsPolicy: string
  ##                : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   Version: string (required)
  var query_601294 = newJObject()
  var formData_601295 = newJObject()
  if RuleRecipients != nil:
    formData_601295.add "Rule.Recipients", RuleRecipients
  add(formData_601295, "After", newJString(After))
  add(formData_601295, "Rule.Enabled", newJString(RuleEnabled))
  add(formData_601295, "RuleSetName", newJString(RuleSetName))
  add(query_601294, "Action", newJString(Action))
  if RuleActions != nil:
    formData_601295.add "Rule.Actions", RuleActions
  add(formData_601295, "Rule.Name", newJString(RuleName))
  add(formData_601295, "Rule.ScanEnabled", newJString(RuleScanEnabled))
  add(formData_601295, "Rule.TlsPolicy", newJString(RuleTlsPolicy))
  add(query_601294, "Version", newJString(Version))
  result = call_601293.call(nil, query_601294, nil, formData_601295, nil)

var postCreateReceiptRule* = Call_PostCreateReceiptRule_601272(
    name: "postCreateReceiptRule", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=CreateReceiptRule",
    validator: validate_PostCreateReceiptRule_601273, base: "/",
    url: url_PostCreateReceiptRule_601274, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateReceiptRule_601249 = ref object of OpenApiRestCall_600426
proc url_GetCreateReceiptRule_601251(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateReceiptRule_601250(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Rule.ScanEnabled: JString
  ##                   : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   Rule.Name: JString
  ##            : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Rule.Enabled: JString
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   After: JString
  ##        : The name of an existing rule after which the new rule will be placed. If this parameter is null, the new rule will be inserted at the beginning of the rule list.
  ##   Rule.TlsPolicy: JString
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   RuleSetName: JString (required)
  ##              : The name of the rule set that the receipt rule will be added to.
  ##   Action: JString (required)
  ##   Rule.Actions: JArray
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   Rule.Recipients: JArray
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   Version: JString (required)
  section = newJObject()
  var valid_601252 = query.getOrDefault("Rule.ScanEnabled")
  valid_601252 = validateParameter(valid_601252, JString, required = false,
                                 default = nil)
  if valid_601252 != nil:
    section.add "Rule.ScanEnabled", valid_601252
  var valid_601253 = query.getOrDefault("Rule.Name")
  valid_601253 = validateParameter(valid_601253, JString, required = false,
                                 default = nil)
  if valid_601253 != nil:
    section.add "Rule.Name", valid_601253
  var valid_601254 = query.getOrDefault("Rule.Enabled")
  valid_601254 = validateParameter(valid_601254, JString, required = false,
                                 default = nil)
  if valid_601254 != nil:
    section.add "Rule.Enabled", valid_601254
  var valid_601255 = query.getOrDefault("After")
  valid_601255 = validateParameter(valid_601255, JString, required = false,
                                 default = nil)
  if valid_601255 != nil:
    section.add "After", valid_601255
  var valid_601256 = query.getOrDefault("Rule.TlsPolicy")
  valid_601256 = validateParameter(valid_601256, JString, required = false,
                                 default = nil)
  if valid_601256 != nil:
    section.add "Rule.TlsPolicy", valid_601256
  assert query != nil,
        "query argument is necessary due to required `RuleSetName` field"
  var valid_601257 = query.getOrDefault("RuleSetName")
  valid_601257 = validateParameter(valid_601257, JString, required = true,
                                 default = nil)
  if valid_601257 != nil:
    section.add "RuleSetName", valid_601257
  var valid_601258 = query.getOrDefault("Action")
  valid_601258 = validateParameter(valid_601258, JString, required = true,
                                 default = newJString("CreateReceiptRule"))
  if valid_601258 != nil:
    section.add "Action", valid_601258
  var valid_601259 = query.getOrDefault("Rule.Actions")
  valid_601259 = validateParameter(valid_601259, JArray, required = false,
                                 default = nil)
  if valid_601259 != nil:
    section.add "Rule.Actions", valid_601259
  var valid_601260 = query.getOrDefault("Rule.Recipients")
  valid_601260 = validateParameter(valid_601260, JArray, required = false,
                                 default = nil)
  if valid_601260 != nil:
    section.add "Rule.Recipients", valid_601260
  var valid_601261 = query.getOrDefault("Version")
  valid_601261 = validateParameter(valid_601261, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601261 != nil:
    section.add "Version", valid_601261
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601262 = header.getOrDefault("X-Amz-Date")
  valid_601262 = validateParameter(valid_601262, JString, required = false,
                                 default = nil)
  if valid_601262 != nil:
    section.add "X-Amz-Date", valid_601262
  var valid_601263 = header.getOrDefault("X-Amz-Security-Token")
  valid_601263 = validateParameter(valid_601263, JString, required = false,
                                 default = nil)
  if valid_601263 != nil:
    section.add "X-Amz-Security-Token", valid_601263
  var valid_601264 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601264 = validateParameter(valid_601264, JString, required = false,
                                 default = nil)
  if valid_601264 != nil:
    section.add "X-Amz-Content-Sha256", valid_601264
  var valid_601265 = header.getOrDefault("X-Amz-Algorithm")
  valid_601265 = validateParameter(valid_601265, JString, required = false,
                                 default = nil)
  if valid_601265 != nil:
    section.add "X-Amz-Algorithm", valid_601265
  var valid_601266 = header.getOrDefault("X-Amz-Signature")
  valid_601266 = validateParameter(valid_601266, JString, required = false,
                                 default = nil)
  if valid_601266 != nil:
    section.add "X-Amz-Signature", valid_601266
  var valid_601267 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601267 = validateParameter(valid_601267, JString, required = false,
                                 default = nil)
  if valid_601267 != nil:
    section.add "X-Amz-SignedHeaders", valid_601267
  var valid_601268 = header.getOrDefault("X-Amz-Credential")
  valid_601268 = validateParameter(valid_601268, JString, required = false,
                                 default = nil)
  if valid_601268 != nil:
    section.add "X-Amz-Credential", valid_601268
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601269: Call_GetCreateReceiptRule_601249; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_601269.validator(path, query, header, formData, body)
  let scheme = call_601269.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601269.url(scheme.get, call_601269.host, call_601269.base,
                         call_601269.route, valid.getOrDefault("path"))
  result = hook(call_601269, url, valid)

proc call*(call_601270: Call_GetCreateReceiptRule_601249; RuleSetName: string;
          RuleScanEnabled: string = ""; RuleName: string = ""; RuleEnabled: string = "";
          After: string = ""; RuleTlsPolicy: string = "";
          Action: string = "CreateReceiptRule"; RuleActions: JsonNode = nil;
          RuleRecipients: JsonNode = nil; Version: string = "2010-12-01"): Recallable =
  ## getCreateReceiptRule
  ## <p>Creates a receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleScanEnabled: string
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   RuleName: string
  ##           : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   RuleEnabled: string
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   After: string
  ##        : The name of an existing rule after which the new rule will be placed. If this parameter is null, the new rule will be inserted at the beginning of the rule list.
  ##   RuleTlsPolicy: string
  ##                : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   RuleSetName: string (required)
  ##              : The name of the rule set that the receipt rule will be added to.
  ##   Action: string (required)
  ##   RuleActions: JArray
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   RuleRecipients: JArray
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   Version: string (required)
  var query_601271 = newJObject()
  add(query_601271, "Rule.ScanEnabled", newJString(RuleScanEnabled))
  add(query_601271, "Rule.Name", newJString(RuleName))
  add(query_601271, "Rule.Enabled", newJString(RuleEnabled))
  add(query_601271, "After", newJString(After))
  add(query_601271, "Rule.TlsPolicy", newJString(RuleTlsPolicy))
  add(query_601271, "RuleSetName", newJString(RuleSetName))
  add(query_601271, "Action", newJString(Action))
  if RuleActions != nil:
    query_601271.add "Rule.Actions", RuleActions
  if RuleRecipients != nil:
    query_601271.add "Rule.Recipients", RuleRecipients
  add(query_601271, "Version", newJString(Version))
  result = call_601270.call(nil, query_601271, nil, nil, nil)

var getCreateReceiptRule* = Call_GetCreateReceiptRule_601249(
    name: "getCreateReceiptRule", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=CreateReceiptRule",
    validator: validate_GetCreateReceiptRule_601250, base: "/",
    url: url_GetCreateReceiptRule_601251, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateReceiptRuleSet_601312 = ref object of OpenApiRestCall_600426
proc url_PostCreateReceiptRuleSet_601314(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateReceiptRuleSet_601313(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an empty receipt rule set.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601315 = query.getOrDefault("Action")
  valid_601315 = validateParameter(valid_601315, JString, required = true,
                                 default = newJString("CreateReceiptRuleSet"))
  if valid_601315 != nil:
    section.add "Action", valid_601315
  var valid_601316 = query.getOrDefault("Version")
  valid_601316 = validateParameter(valid_601316, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601316 != nil:
    section.add "Version", valid_601316
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601317 = header.getOrDefault("X-Amz-Date")
  valid_601317 = validateParameter(valid_601317, JString, required = false,
                                 default = nil)
  if valid_601317 != nil:
    section.add "X-Amz-Date", valid_601317
  var valid_601318 = header.getOrDefault("X-Amz-Security-Token")
  valid_601318 = validateParameter(valid_601318, JString, required = false,
                                 default = nil)
  if valid_601318 != nil:
    section.add "X-Amz-Security-Token", valid_601318
  var valid_601319 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601319 = validateParameter(valid_601319, JString, required = false,
                                 default = nil)
  if valid_601319 != nil:
    section.add "X-Amz-Content-Sha256", valid_601319
  var valid_601320 = header.getOrDefault("X-Amz-Algorithm")
  valid_601320 = validateParameter(valid_601320, JString, required = false,
                                 default = nil)
  if valid_601320 != nil:
    section.add "X-Amz-Algorithm", valid_601320
  var valid_601321 = header.getOrDefault("X-Amz-Signature")
  valid_601321 = validateParameter(valid_601321, JString, required = false,
                                 default = nil)
  if valid_601321 != nil:
    section.add "X-Amz-Signature", valid_601321
  var valid_601322 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601322 = validateParameter(valid_601322, JString, required = false,
                                 default = nil)
  if valid_601322 != nil:
    section.add "X-Amz-SignedHeaders", valid_601322
  var valid_601323 = header.getOrDefault("X-Amz-Credential")
  valid_601323 = validateParameter(valid_601323, JString, required = false,
                                 default = nil)
  if valid_601323 != nil:
    section.add "X-Amz-Credential", valid_601323
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleSetName: JString (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleSetName` field"
  var valid_601324 = formData.getOrDefault("RuleSetName")
  valid_601324 = validateParameter(valid_601324, JString, required = true,
                                 default = nil)
  if valid_601324 != nil:
    section.add "RuleSetName", valid_601324
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601325: Call_PostCreateReceiptRuleSet_601312; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an empty receipt rule set.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_601325.validator(path, query, header, formData, body)
  let scheme = call_601325.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601325.url(scheme.get, call_601325.host, call_601325.base,
                         call_601325.route, valid.getOrDefault("path"))
  result = hook(call_601325, url, valid)

proc call*(call_601326: Call_PostCreateReceiptRuleSet_601312; RuleSetName: string;
          Action: string = "CreateReceiptRuleSet"; Version: string = "2010-12-01"): Recallable =
  ## postCreateReceiptRuleSet
  ## <p>Creates an empty receipt rule set.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601327 = newJObject()
  var formData_601328 = newJObject()
  add(formData_601328, "RuleSetName", newJString(RuleSetName))
  add(query_601327, "Action", newJString(Action))
  add(query_601327, "Version", newJString(Version))
  result = call_601326.call(nil, query_601327, nil, formData_601328, nil)

var postCreateReceiptRuleSet* = Call_PostCreateReceiptRuleSet_601312(
    name: "postCreateReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=CreateReceiptRuleSet",
    validator: validate_PostCreateReceiptRuleSet_601313, base: "/",
    url: url_PostCreateReceiptRuleSet_601314, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateReceiptRuleSet_601296 = ref object of OpenApiRestCall_600426
proc url_GetCreateReceiptRuleSet_601298(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateReceiptRuleSet_601297(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an empty receipt rule set.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleSetName: JString (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleSetName` field"
  var valid_601299 = query.getOrDefault("RuleSetName")
  valid_601299 = validateParameter(valid_601299, JString, required = true,
                                 default = nil)
  if valid_601299 != nil:
    section.add "RuleSetName", valid_601299
  var valid_601300 = query.getOrDefault("Action")
  valid_601300 = validateParameter(valid_601300, JString, required = true,
                                 default = newJString("CreateReceiptRuleSet"))
  if valid_601300 != nil:
    section.add "Action", valid_601300
  var valid_601301 = query.getOrDefault("Version")
  valid_601301 = validateParameter(valid_601301, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601301 != nil:
    section.add "Version", valid_601301
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601302 = header.getOrDefault("X-Amz-Date")
  valid_601302 = validateParameter(valid_601302, JString, required = false,
                                 default = nil)
  if valid_601302 != nil:
    section.add "X-Amz-Date", valid_601302
  var valid_601303 = header.getOrDefault("X-Amz-Security-Token")
  valid_601303 = validateParameter(valid_601303, JString, required = false,
                                 default = nil)
  if valid_601303 != nil:
    section.add "X-Amz-Security-Token", valid_601303
  var valid_601304 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601304 = validateParameter(valid_601304, JString, required = false,
                                 default = nil)
  if valid_601304 != nil:
    section.add "X-Amz-Content-Sha256", valid_601304
  var valid_601305 = header.getOrDefault("X-Amz-Algorithm")
  valid_601305 = validateParameter(valid_601305, JString, required = false,
                                 default = nil)
  if valid_601305 != nil:
    section.add "X-Amz-Algorithm", valid_601305
  var valid_601306 = header.getOrDefault("X-Amz-Signature")
  valid_601306 = validateParameter(valid_601306, JString, required = false,
                                 default = nil)
  if valid_601306 != nil:
    section.add "X-Amz-Signature", valid_601306
  var valid_601307 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601307 = validateParameter(valid_601307, JString, required = false,
                                 default = nil)
  if valid_601307 != nil:
    section.add "X-Amz-SignedHeaders", valid_601307
  var valid_601308 = header.getOrDefault("X-Amz-Credential")
  valid_601308 = validateParameter(valid_601308, JString, required = false,
                                 default = nil)
  if valid_601308 != nil:
    section.add "X-Amz-Credential", valid_601308
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601309: Call_GetCreateReceiptRuleSet_601296; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an empty receipt rule set.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_601309.validator(path, query, header, formData, body)
  let scheme = call_601309.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601309.url(scheme.get, call_601309.host, call_601309.base,
                         call_601309.route, valid.getOrDefault("path"))
  result = hook(call_601309, url, valid)

proc call*(call_601310: Call_GetCreateReceiptRuleSet_601296; RuleSetName: string;
          Action: string = "CreateReceiptRuleSet"; Version: string = "2010-12-01"): Recallable =
  ## getCreateReceiptRuleSet
  ## <p>Creates an empty receipt rule set.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601311 = newJObject()
  add(query_601311, "RuleSetName", newJString(RuleSetName))
  add(query_601311, "Action", newJString(Action))
  add(query_601311, "Version", newJString(Version))
  result = call_601310.call(nil, query_601311, nil, nil, nil)

var getCreateReceiptRuleSet* = Call_GetCreateReceiptRuleSet_601296(
    name: "getCreateReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=CreateReceiptRuleSet",
    validator: validate_GetCreateReceiptRuleSet_601297, base: "/",
    url: url_GetCreateReceiptRuleSet_601298, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateTemplate_601348 = ref object of OpenApiRestCall_600426
proc url_PostCreateTemplate_601350(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateTemplate_601349(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601351 = query.getOrDefault("Action")
  valid_601351 = validateParameter(valid_601351, JString, required = true,
                                 default = newJString("CreateTemplate"))
  if valid_601351 != nil:
    section.add "Action", valid_601351
  var valid_601352 = query.getOrDefault("Version")
  valid_601352 = validateParameter(valid_601352, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601352 != nil:
    section.add "Version", valid_601352
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601353 = header.getOrDefault("X-Amz-Date")
  valid_601353 = validateParameter(valid_601353, JString, required = false,
                                 default = nil)
  if valid_601353 != nil:
    section.add "X-Amz-Date", valid_601353
  var valid_601354 = header.getOrDefault("X-Amz-Security-Token")
  valid_601354 = validateParameter(valid_601354, JString, required = false,
                                 default = nil)
  if valid_601354 != nil:
    section.add "X-Amz-Security-Token", valid_601354
  var valid_601355 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601355 = validateParameter(valid_601355, JString, required = false,
                                 default = nil)
  if valid_601355 != nil:
    section.add "X-Amz-Content-Sha256", valid_601355
  var valid_601356 = header.getOrDefault("X-Amz-Algorithm")
  valid_601356 = validateParameter(valid_601356, JString, required = false,
                                 default = nil)
  if valid_601356 != nil:
    section.add "X-Amz-Algorithm", valid_601356
  var valid_601357 = header.getOrDefault("X-Amz-Signature")
  valid_601357 = validateParameter(valid_601357, JString, required = false,
                                 default = nil)
  if valid_601357 != nil:
    section.add "X-Amz-Signature", valid_601357
  var valid_601358 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601358 = validateParameter(valid_601358, JString, required = false,
                                 default = nil)
  if valid_601358 != nil:
    section.add "X-Amz-SignedHeaders", valid_601358
  var valid_601359 = header.getOrDefault("X-Amz-Credential")
  valid_601359 = validateParameter(valid_601359, JString, required = false,
                                 default = nil)
  if valid_601359 != nil:
    section.add "X-Amz-Credential", valid_601359
  result.add "header", section
  ## parameters in `formData` object:
  ##   Template.HtmlPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   Template.TemplateName: JString
  ##                        : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   Template.TextPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Template.SubjectPart: JString
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  section = newJObject()
  var valid_601360 = formData.getOrDefault("Template.HtmlPart")
  valid_601360 = validateParameter(valid_601360, JString, required = false,
                                 default = nil)
  if valid_601360 != nil:
    section.add "Template.HtmlPart", valid_601360
  var valid_601361 = formData.getOrDefault("Template.TemplateName")
  valid_601361 = validateParameter(valid_601361, JString, required = false,
                                 default = nil)
  if valid_601361 != nil:
    section.add "Template.TemplateName", valid_601361
  var valid_601362 = formData.getOrDefault("Template.TextPart")
  valid_601362 = validateParameter(valid_601362, JString, required = false,
                                 default = nil)
  if valid_601362 != nil:
    section.add "Template.TextPart", valid_601362
  var valid_601363 = formData.getOrDefault("Template.SubjectPart")
  valid_601363 = validateParameter(valid_601363, JString, required = false,
                                 default = nil)
  if valid_601363 != nil:
    section.add "Template.SubjectPart", valid_601363
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601364: Call_PostCreateTemplate_601348; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_601364.validator(path, query, header, formData, body)
  let scheme = call_601364.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601364.url(scheme.get, call_601364.host, call_601364.base,
                         call_601364.route, valid.getOrDefault("path"))
  result = hook(call_601364, url, valid)

proc call*(call_601365: Call_PostCreateTemplate_601348;
          Action: string = "CreateTemplate"; TemplateHtmlPart: string = "";
          TemplateTemplateName: string = ""; TemplateTextPart: string = "";
          Version: string = "2010-12-01"; TemplateSubjectPart: string = ""): Recallable =
  ## postCreateTemplate
  ## <p>Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateHtmlPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   TemplateTemplateName: string
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   TemplateTextPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Version: string (required)
  ##   TemplateSubjectPart: string
  ##                      : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  var query_601366 = newJObject()
  var formData_601367 = newJObject()
  add(query_601366, "Action", newJString(Action))
  add(formData_601367, "Template.HtmlPart", newJString(TemplateHtmlPart))
  add(formData_601367, "Template.TemplateName", newJString(TemplateTemplateName))
  add(formData_601367, "Template.TextPart", newJString(TemplateTextPart))
  add(query_601366, "Version", newJString(Version))
  add(formData_601367, "Template.SubjectPart", newJString(TemplateSubjectPart))
  result = call_601365.call(nil, query_601366, nil, formData_601367, nil)

var postCreateTemplate* = Call_PostCreateTemplate_601348(
    name: "postCreateTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=CreateTemplate",
    validator: validate_PostCreateTemplate_601349, base: "/",
    url: url_PostCreateTemplate_601350, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateTemplate_601329 = ref object of OpenApiRestCall_600426
proc url_GetCreateTemplate_601331(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateTemplate_601330(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Template.TemplateName: JString
  ##                        : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   Action: JString (required)
  ##   Template.SubjectPart: JString
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  ##   Template.HtmlPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   Template.TextPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Version: JString (required)
  section = newJObject()
  var valid_601332 = query.getOrDefault("Template.TemplateName")
  valid_601332 = validateParameter(valid_601332, JString, required = false,
                                 default = nil)
  if valid_601332 != nil:
    section.add "Template.TemplateName", valid_601332
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601333 = query.getOrDefault("Action")
  valid_601333 = validateParameter(valid_601333, JString, required = true,
                                 default = newJString("CreateTemplate"))
  if valid_601333 != nil:
    section.add "Action", valid_601333
  var valid_601334 = query.getOrDefault("Template.SubjectPart")
  valid_601334 = validateParameter(valid_601334, JString, required = false,
                                 default = nil)
  if valid_601334 != nil:
    section.add "Template.SubjectPart", valid_601334
  var valid_601335 = query.getOrDefault("Template.HtmlPart")
  valid_601335 = validateParameter(valid_601335, JString, required = false,
                                 default = nil)
  if valid_601335 != nil:
    section.add "Template.HtmlPart", valid_601335
  var valid_601336 = query.getOrDefault("Template.TextPart")
  valid_601336 = validateParameter(valid_601336, JString, required = false,
                                 default = nil)
  if valid_601336 != nil:
    section.add "Template.TextPart", valid_601336
  var valid_601337 = query.getOrDefault("Version")
  valid_601337 = validateParameter(valid_601337, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601337 != nil:
    section.add "Version", valid_601337
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601338 = header.getOrDefault("X-Amz-Date")
  valid_601338 = validateParameter(valid_601338, JString, required = false,
                                 default = nil)
  if valid_601338 != nil:
    section.add "X-Amz-Date", valid_601338
  var valid_601339 = header.getOrDefault("X-Amz-Security-Token")
  valid_601339 = validateParameter(valid_601339, JString, required = false,
                                 default = nil)
  if valid_601339 != nil:
    section.add "X-Amz-Security-Token", valid_601339
  var valid_601340 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601340 = validateParameter(valid_601340, JString, required = false,
                                 default = nil)
  if valid_601340 != nil:
    section.add "X-Amz-Content-Sha256", valid_601340
  var valid_601341 = header.getOrDefault("X-Amz-Algorithm")
  valid_601341 = validateParameter(valid_601341, JString, required = false,
                                 default = nil)
  if valid_601341 != nil:
    section.add "X-Amz-Algorithm", valid_601341
  var valid_601342 = header.getOrDefault("X-Amz-Signature")
  valid_601342 = validateParameter(valid_601342, JString, required = false,
                                 default = nil)
  if valid_601342 != nil:
    section.add "X-Amz-Signature", valid_601342
  var valid_601343 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601343 = validateParameter(valid_601343, JString, required = false,
                                 default = nil)
  if valid_601343 != nil:
    section.add "X-Amz-SignedHeaders", valid_601343
  var valid_601344 = header.getOrDefault("X-Amz-Credential")
  valid_601344 = validateParameter(valid_601344, JString, required = false,
                                 default = nil)
  if valid_601344 != nil:
    section.add "X-Amz-Credential", valid_601344
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601345: Call_GetCreateTemplate_601329; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_601345.validator(path, query, header, formData, body)
  let scheme = call_601345.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601345.url(scheme.get, call_601345.host, call_601345.base,
                         call_601345.route, valid.getOrDefault("path"))
  result = hook(call_601345, url, valid)

proc call*(call_601346: Call_GetCreateTemplate_601329;
          TemplateTemplateName: string = ""; Action: string = "CreateTemplate";
          TemplateSubjectPart: string = ""; TemplateHtmlPart: string = "";
          TemplateTextPart: string = ""; Version: string = "2010-12-01"): Recallable =
  ## getCreateTemplate
  ## <p>Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateTemplateName: string
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   Action: string (required)
  ##   TemplateSubjectPart: string
  ##                      : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  ##   TemplateHtmlPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   TemplateTextPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Version: string (required)
  var query_601347 = newJObject()
  add(query_601347, "Template.TemplateName", newJString(TemplateTemplateName))
  add(query_601347, "Action", newJString(Action))
  add(query_601347, "Template.SubjectPart", newJString(TemplateSubjectPart))
  add(query_601347, "Template.HtmlPart", newJString(TemplateHtmlPart))
  add(query_601347, "Template.TextPart", newJString(TemplateTextPart))
  add(query_601347, "Version", newJString(Version))
  result = call_601346.call(nil, query_601347, nil, nil, nil)

var getCreateTemplate* = Call_GetCreateTemplate_601329(name: "getCreateTemplate",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=CreateTemplate", validator: validate_GetCreateTemplate_601330,
    base: "/", url: url_GetCreateTemplate_601331,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteConfigurationSet_601384 = ref object of OpenApiRestCall_600426
proc url_PostDeleteConfigurationSet_601386(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteConfigurationSet_601385(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601387 = query.getOrDefault("Action")
  valid_601387 = validateParameter(valid_601387, JString, required = true,
                                 default = newJString("DeleteConfigurationSet"))
  if valid_601387 != nil:
    section.add "Action", valid_601387
  var valid_601388 = query.getOrDefault("Version")
  valid_601388 = validateParameter(valid_601388, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601388 != nil:
    section.add "Version", valid_601388
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601389 = header.getOrDefault("X-Amz-Date")
  valid_601389 = validateParameter(valid_601389, JString, required = false,
                                 default = nil)
  if valid_601389 != nil:
    section.add "X-Amz-Date", valid_601389
  var valid_601390 = header.getOrDefault("X-Amz-Security-Token")
  valid_601390 = validateParameter(valid_601390, JString, required = false,
                                 default = nil)
  if valid_601390 != nil:
    section.add "X-Amz-Security-Token", valid_601390
  var valid_601391 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601391 = validateParameter(valid_601391, JString, required = false,
                                 default = nil)
  if valid_601391 != nil:
    section.add "X-Amz-Content-Sha256", valid_601391
  var valid_601392 = header.getOrDefault("X-Amz-Algorithm")
  valid_601392 = validateParameter(valid_601392, JString, required = false,
                                 default = nil)
  if valid_601392 != nil:
    section.add "X-Amz-Algorithm", valid_601392
  var valid_601393 = header.getOrDefault("X-Amz-Signature")
  valid_601393 = validateParameter(valid_601393, JString, required = false,
                                 default = nil)
  if valid_601393 != nil:
    section.add "X-Amz-Signature", valid_601393
  var valid_601394 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601394 = validateParameter(valid_601394, JString, required = false,
                                 default = nil)
  if valid_601394 != nil:
    section.add "X-Amz-SignedHeaders", valid_601394
  var valid_601395 = header.getOrDefault("X-Amz-Credential")
  valid_601395 = validateParameter(valid_601395, JString, required = false,
                                 default = nil)
  if valid_601395 != nil:
    section.add "X-Amz-Credential", valid_601395
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set to delete.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_601396 = formData.getOrDefault("ConfigurationSetName")
  valid_601396 = validateParameter(valid_601396, JString, required = true,
                                 default = nil)
  if valid_601396 != nil:
    section.add "ConfigurationSetName", valid_601396
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601397: Call_PostDeleteConfigurationSet_601384; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_601397.validator(path, query, header, formData, body)
  let scheme = call_601397.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601397.url(scheme.get, call_601397.host, call_601397.base,
                         call_601397.route, valid.getOrDefault("path"))
  result = hook(call_601397, url, valid)

proc call*(call_601398: Call_PostDeleteConfigurationSet_601384;
          ConfigurationSetName: string; Action: string = "DeleteConfigurationSet";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteConfigurationSet
  ## <p>Deletes a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601399 = newJObject()
  var formData_601400 = newJObject()
  add(formData_601400, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_601399, "Action", newJString(Action))
  add(query_601399, "Version", newJString(Version))
  result = call_601398.call(nil, query_601399, nil, formData_601400, nil)

var postDeleteConfigurationSet* = Call_PostDeleteConfigurationSet_601384(
    name: "postDeleteConfigurationSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteConfigurationSet",
    validator: validate_PostDeleteConfigurationSet_601385, base: "/",
    url: url_PostDeleteConfigurationSet_601386,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteConfigurationSet_601368 = ref object of OpenApiRestCall_600426
proc url_GetDeleteConfigurationSet_601370(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteConfigurationSet_601369(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set to delete.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601371 = query.getOrDefault("Action")
  valid_601371 = validateParameter(valid_601371, JString, required = true,
                                 default = newJString("DeleteConfigurationSet"))
  if valid_601371 != nil:
    section.add "Action", valid_601371
  var valid_601372 = query.getOrDefault("ConfigurationSetName")
  valid_601372 = validateParameter(valid_601372, JString, required = true,
                                 default = nil)
  if valid_601372 != nil:
    section.add "ConfigurationSetName", valid_601372
  var valid_601373 = query.getOrDefault("Version")
  valid_601373 = validateParameter(valid_601373, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601373 != nil:
    section.add "Version", valid_601373
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601374 = header.getOrDefault("X-Amz-Date")
  valid_601374 = validateParameter(valid_601374, JString, required = false,
                                 default = nil)
  if valid_601374 != nil:
    section.add "X-Amz-Date", valid_601374
  var valid_601375 = header.getOrDefault("X-Amz-Security-Token")
  valid_601375 = validateParameter(valid_601375, JString, required = false,
                                 default = nil)
  if valid_601375 != nil:
    section.add "X-Amz-Security-Token", valid_601375
  var valid_601376 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601376 = validateParameter(valid_601376, JString, required = false,
                                 default = nil)
  if valid_601376 != nil:
    section.add "X-Amz-Content-Sha256", valid_601376
  var valid_601377 = header.getOrDefault("X-Amz-Algorithm")
  valid_601377 = validateParameter(valid_601377, JString, required = false,
                                 default = nil)
  if valid_601377 != nil:
    section.add "X-Amz-Algorithm", valid_601377
  var valid_601378 = header.getOrDefault("X-Amz-Signature")
  valid_601378 = validateParameter(valid_601378, JString, required = false,
                                 default = nil)
  if valid_601378 != nil:
    section.add "X-Amz-Signature", valid_601378
  var valid_601379 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601379 = validateParameter(valid_601379, JString, required = false,
                                 default = nil)
  if valid_601379 != nil:
    section.add "X-Amz-SignedHeaders", valid_601379
  var valid_601380 = header.getOrDefault("X-Amz-Credential")
  valid_601380 = validateParameter(valid_601380, JString, required = false,
                                 default = nil)
  if valid_601380 != nil:
    section.add "X-Amz-Credential", valid_601380
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601381: Call_GetDeleteConfigurationSet_601368; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_601381.validator(path, query, header, formData, body)
  let scheme = call_601381.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601381.url(scheme.get, call_601381.host, call_601381.base,
                         call_601381.route, valid.getOrDefault("path"))
  result = hook(call_601381, url, valid)

proc call*(call_601382: Call_GetDeleteConfigurationSet_601368;
          ConfigurationSetName: string; Action: string = "DeleteConfigurationSet";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteConfigurationSet
  ## <p>Deletes a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set to delete.
  ##   Version: string (required)
  var query_601383 = newJObject()
  add(query_601383, "Action", newJString(Action))
  add(query_601383, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_601383, "Version", newJString(Version))
  result = call_601382.call(nil, query_601383, nil, nil, nil)

var getDeleteConfigurationSet* = Call_GetDeleteConfigurationSet_601368(
    name: "getDeleteConfigurationSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DeleteConfigurationSet",
    validator: validate_GetDeleteConfigurationSet_601369, base: "/",
    url: url_GetDeleteConfigurationSet_601370,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteConfigurationSetEventDestination_601418 = ref object of OpenApiRestCall_600426
proc url_PostDeleteConfigurationSetEventDestination_601420(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteConfigurationSetEventDestination_601419(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601421 = query.getOrDefault("Action")
  valid_601421 = validateParameter(valid_601421, JString, required = true, default = newJString(
      "DeleteConfigurationSetEventDestination"))
  if valid_601421 != nil:
    section.add "Action", valid_601421
  var valid_601422 = query.getOrDefault("Version")
  valid_601422 = validateParameter(valid_601422, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601422 != nil:
    section.add "Version", valid_601422
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601423 = header.getOrDefault("X-Amz-Date")
  valid_601423 = validateParameter(valid_601423, JString, required = false,
                                 default = nil)
  if valid_601423 != nil:
    section.add "X-Amz-Date", valid_601423
  var valid_601424 = header.getOrDefault("X-Amz-Security-Token")
  valid_601424 = validateParameter(valid_601424, JString, required = false,
                                 default = nil)
  if valid_601424 != nil:
    section.add "X-Amz-Security-Token", valid_601424
  var valid_601425 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601425 = validateParameter(valid_601425, JString, required = false,
                                 default = nil)
  if valid_601425 != nil:
    section.add "X-Amz-Content-Sha256", valid_601425
  var valid_601426 = header.getOrDefault("X-Amz-Algorithm")
  valid_601426 = validateParameter(valid_601426, JString, required = false,
                                 default = nil)
  if valid_601426 != nil:
    section.add "X-Amz-Algorithm", valid_601426
  var valid_601427 = header.getOrDefault("X-Amz-Signature")
  valid_601427 = validateParameter(valid_601427, JString, required = false,
                                 default = nil)
  if valid_601427 != nil:
    section.add "X-Amz-Signature", valid_601427
  var valid_601428 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601428 = validateParameter(valid_601428, JString, required = false,
                                 default = nil)
  if valid_601428 != nil:
    section.add "X-Amz-SignedHeaders", valid_601428
  var valid_601429 = header.getOrDefault("X-Amz-Credential")
  valid_601429 = validateParameter(valid_601429, JString, required = false,
                                 default = nil)
  if valid_601429 != nil:
    section.add "X-Amz-Credential", valid_601429
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set from which to delete the event destination.
  ##   EventDestinationName: JString (required)
  ##                       : The name of the event destination to delete.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_601430 = formData.getOrDefault("ConfigurationSetName")
  valid_601430 = validateParameter(valid_601430, JString, required = true,
                                 default = nil)
  if valid_601430 != nil:
    section.add "ConfigurationSetName", valid_601430
  var valid_601431 = formData.getOrDefault("EventDestinationName")
  valid_601431 = validateParameter(valid_601431, JString, required = true,
                                 default = nil)
  if valid_601431 != nil:
    section.add "EventDestinationName", valid_601431
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601432: Call_PostDeleteConfigurationSetEventDestination_601418;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_601432.validator(path, query, header, formData, body)
  let scheme = call_601432.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601432.url(scheme.get, call_601432.host, call_601432.base,
                         call_601432.route, valid.getOrDefault("path"))
  result = hook(call_601432, url, valid)

proc call*(call_601433: Call_PostDeleteConfigurationSetEventDestination_601418;
          ConfigurationSetName: string; EventDestinationName: string;
          Action: string = "DeleteConfigurationSetEventDestination";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteConfigurationSetEventDestination
  ## <p>Deletes a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set from which to delete the event destination.
  ##   EventDestinationName: string (required)
  ##                       : The name of the event destination to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601434 = newJObject()
  var formData_601435 = newJObject()
  add(formData_601435, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_601435, "EventDestinationName", newJString(EventDestinationName))
  add(query_601434, "Action", newJString(Action))
  add(query_601434, "Version", newJString(Version))
  result = call_601433.call(nil, query_601434, nil, formData_601435, nil)

var postDeleteConfigurationSetEventDestination* = Call_PostDeleteConfigurationSetEventDestination_601418(
    name: "postDeleteConfigurationSetEventDestination", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=DeleteConfigurationSetEventDestination",
    validator: validate_PostDeleteConfigurationSetEventDestination_601419,
    base: "/", url: url_PostDeleteConfigurationSetEventDestination_601420,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteConfigurationSetEventDestination_601401 = ref object of OpenApiRestCall_600426
proc url_GetDeleteConfigurationSetEventDestination_601403(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteConfigurationSetEventDestination_601402(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   EventDestinationName: JString (required)
  ##                       : The name of the event destination to delete.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set from which to delete the event destination.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601404 = query.getOrDefault("Action")
  valid_601404 = validateParameter(valid_601404, JString, required = true, default = newJString(
      "DeleteConfigurationSetEventDestination"))
  if valid_601404 != nil:
    section.add "Action", valid_601404
  var valid_601405 = query.getOrDefault("EventDestinationName")
  valid_601405 = validateParameter(valid_601405, JString, required = true,
                                 default = nil)
  if valid_601405 != nil:
    section.add "EventDestinationName", valid_601405
  var valid_601406 = query.getOrDefault("ConfigurationSetName")
  valid_601406 = validateParameter(valid_601406, JString, required = true,
                                 default = nil)
  if valid_601406 != nil:
    section.add "ConfigurationSetName", valid_601406
  var valid_601407 = query.getOrDefault("Version")
  valid_601407 = validateParameter(valid_601407, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601407 != nil:
    section.add "Version", valid_601407
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601408 = header.getOrDefault("X-Amz-Date")
  valid_601408 = validateParameter(valid_601408, JString, required = false,
                                 default = nil)
  if valid_601408 != nil:
    section.add "X-Amz-Date", valid_601408
  var valid_601409 = header.getOrDefault("X-Amz-Security-Token")
  valid_601409 = validateParameter(valid_601409, JString, required = false,
                                 default = nil)
  if valid_601409 != nil:
    section.add "X-Amz-Security-Token", valid_601409
  var valid_601410 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601410 = validateParameter(valid_601410, JString, required = false,
                                 default = nil)
  if valid_601410 != nil:
    section.add "X-Amz-Content-Sha256", valid_601410
  var valid_601411 = header.getOrDefault("X-Amz-Algorithm")
  valid_601411 = validateParameter(valid_601411, JString, required = false,
                                 default = nil)
  if valid_601411 != nil:
    section.add "X-Amz-Algorithm", valid_601411
  var valid_601412 = header.getOrDefault("X-Amz-Signature")
  valid_601412 = validateParameter(valid_601412, JString, required = false,
                                 default = nil)
  if valid_601412 != nil:
    section.add "X-Amz-Signature", valid_601412
  var valid_601413 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601413 = validateParameter(valid_601413, JString, required = false,
                                 default = nil)
  if valid_601413 != nil:
    section.add "X-Amz-SignedHeaders", valid_601413
  var valid_601414 = header.getOrDefault("X-Amz-Credential")
  valid_601414 = validateParameter(valid_601414, JString, required = false,
                                 default = nil)
  if valid_601414 != nil:
    section.add "X-Amz-Credential", valid_601414
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601415: Call_GetDeleteConfigurationSetEventDestination_601401;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_601415.validator(path, query, header, formData, body)
  let scheme = call_601415.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601415.url(scheme.get, call_601415.host, call_601415.base,
                         call_601415.route, valid.getOrDefault("path"))
  result = hook(call_601415, url, valid)

proc call*(call_601416: Call_GetDeleteConfigurationSetEventDestination_601401;
          EventDestinationName: string; ConfigurationSetName: string;
          Action: string = "DeleteConfigurationSetEventDestination";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteConfigurationSetEventDestination
  ## <p>Deletes a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   EventDestinationName: string (required)
  ##                       : The name of the event destination to delete.
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set from which to delete the event destination.
  ##   Version: string (required)
  var query_601417 = newJObject()
  add(query_601417, "Action", newJString(Action))
  add(query_601417, "EventDestinationName", newJString(EventDestinationName))
  add(query_601417, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_601417, "Version", newJString(Version))
  result = call_601416.call(nil, query_601417, nil, nil, nil)

var getDeleteConfigurationSetEventDestination* = Call_GetDeleteConfigurationSetEventDestination_601401(
    name: "getDeleteConfigurationSetEventDestination", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=DeleteConfigurationSetEventDestination",
    validator: validate_GetDeleteConfigurationSetEventDestination_601402,
    base: "/", url: url_GetDeleteConfigurationSetEventDestination_601403,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteConfigurationSetTrackingOptions_601452 = ref object of OpenApiRestCall_600426
proc url_PostDeleteConfigurationSetTrackingOptions_601454(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteConfigurationSetTrackingOptions_601453(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an association between a configuration set and a custom domain for open and click event tracking.</p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p> <note> <p>Deleting this kind of association will result in emails sent using the specified configuration set to capture open and click events using the standard, Amazon SES-operated domains.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601455 = query.getOrDefault("Action")
  valid_601455 = validateParameter(valid_601455, JString, required = true, default = newJString(
      "DeleteConfigurationSetTrackingOptions"))
  if valid_601455 != nil:
    section.add "Action", valid_601455
  var valid_601456 = query.getOrDefault("Version")
  valid_601456 = validateParameter(valid_601456, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601456 != nil:
    section.add "Version", valid_601456
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601457 = header.getOrDefault("X-Amz-Date")
  valid_601457 = validateParameter(valid_601457, JString, required = false,
                                 default = nil)
  if valid_601457 != nil:
    section.add "X-Amz-Date", valid_601457
  var valid_601458 = header.getOrDefault("X-Amz-Security-Token")
  valid_601458 = validateParameter(valid_601458, JString, required = false,
                                 default = nil)
  if valid_601458 != nil:
    section.add "X-Amz-Security-Token", valid_601458
  var valid_601459 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601459 = validateParameter(valid_601459, JString, required = false,
                                 default = nil)
  if valid_601459 != nil:
    section.add "X-Amz-Content-Sha256", valid_601459
  var valid_601460 = header.getOrDefault("X-Amz-Algorithm")
  valid_601460 = validateParameter(valid_601460, JString, required = false,
                                 default = nil)
  if valid_601460 != nil:
    section.add "X-Amz-Algorithm", valid_601460
  var valid_601461 = header.getOrDefault("X-Amz-Signature")
  valid_601461 = validateParameter(valid_601461, JString, required = false,
                                 default = nil)
  if valid_601461 != nil:
    section.add "X-Amz-Signature", valid_601461
  var valid_601462 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601462 = validateParameter(valid_601462, JString, required = false,
                                 default = nil)
  if valid_601462 != nil:
    section.add "X-Amz-SignedHeaders", valid_601462
  var valid_601463 = header.getOrDefault("X-Amz-Credential")
  valid_601463 = validateParameter(valid_601463, JString, required = false,
                                 default = nil)
  if valid_601463 != nil:
    section.add "X-Amz-Credential", valid_601463
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set from which you want to delete the tracking options.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_601464 = formData.getOrDefault("ConfigurationSetName")
  valid_601464 = validateParameter(valid_601464, JString, required = true,
                                 default = nil)
  if valid_601464 != nil:
    section.add "ConfigurationSetName", valid_601464
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601465: Call_PostDeleteConfigurationSetTrackingOptions_601452;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes an association between a configuration set and a custom domain for open and click event tracking.</p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p> <note> <p>Deleting this kind of association will result in emails sent using the specified configuration set to capture open and click events using the standard, Amazon SES-operated domains.</p> </note>
  ## 
  let valid = call_601465.validator(path, query, header, formData, body)
  let scheme = call_601465.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601465.url(scheme.get, call_601465.host, call_601465.base,
                         call_601465.route, valid.getOrDefault("path"))
  result = hook(call_601465, url, valid)

proc call*(call_601466: Call_PostDeleteConfigurationSetTrackingOptions_601452;
          ConfigurationSetName: string;
          Action: string = "DeleteConfigurationSetTrackingOptions";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteConfigurationSetTrackingOptions
  ## <p>Deletes an association between a configuration set and a custom domain for open and click event tracking.</p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p> <note> <p>Deleting this kind of association will result in emails sent using the specified configuration set to capture open and click events using the standard, Amazon SES-operated domains.</p> </note>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set from which you want to delete the tracking options.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601467 = newJObject()
  var formData_601468 = newJObject()
  add(formData_601468, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_601467, "Action", newJString(Action))
  add(query_601467, "Version", newJString(Version))
  result = call_601466.call(nil, query_601467, nil, formData_601468, nil)

var postDeleteConfigurationSetTrackingOptions* = Call_PostDeleteConfigurationSetTrackingOptions_601452(
    name: "postDeleteConfigurationSetTrackingOptions", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=DeleteConfigurationSetTrackingOptions",
    validator: validate_PostDeleteConfigurationSetTrackingOptions_601453,
    base: "/", url: url_PostDeleteConfigurationSetTrackingOptions_601454,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteConfigurationSetTrackingOptions_601436 = ref object of OpenApiRestCall_600426
proc url_GetDeleteConfigurationSetTrackingOptions_601438(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteConfigurationSetTrackingOptions_601437(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an association between a configuration set and a custom domain for open and click event tracking.</p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p> <note> <p>Deleting this kind of association will result in emails sent using the specified configuration set to capture open and click events using the standard, Amazon SES-operated domains.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set from which you want to delete the tracking options.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601439 = query.getOrDefault("Action")
  valid_601439 = validateParameter(valid_601439, JString, required = true, default = newJString(
      "DeleteConfigurationSetTrackingOptions"))
  if valid_601439 != nil:
    section.add "Action", valid_601439
  var valid_601440 = query.getOrDefault("ConfigurationSetName")
  valid_601440 = validateParameter(valid_601440, JString, required = true,
                                 default = nil)
  if valid_601440 != nil:
    section.add "ConfigurationSetName", valid_601440
  var valid_601441 = query.getOrDefault("Version")
  valid_601441 = validateParameter(valid_601441, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601441 != nil:
    section.add "Version", valid_601441
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601442 = header.getOrDefault("X-Amz-Date")
  valid_601442 = validateParameter(valid_601442, JString, required = false,
                                 default = nil)
  if valid_601442 != nil:
    section.add "X-Amz-Date", valid_601442
  var valid_601443 = header.getOrDefault("X-Amz-Security-Token")
  valid_601443 = validateParameter(valid_601443, JString, required = false,
                                 default = nil)
  if valid_601443 != nil:
    section.add "X-Amz-Security-Token", valid_601443
  var valid_601444 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601444 = validateParameter(valid_601444, JString, required = false,
                                 default = nil)
  if valid_601444 != nil:
    section.add "X-Amz-Content-Sha256", valid_601444
  var valid_601445 = header.getOrDefault("X-Amz-Algorithm")
  valid_601445 = validateParameter(valid_601445, JString, required = false,
                                 default = nil)
  if valid_601445 != nil:
    section.add "X-Amz-Algorithm", valid_601445
  var valid_601446 = header.getOrDefault("X-Amz-Signature")
  valid_601446 = validateParameter(valid_601446, JString, required = false,
                                 default = nil)
  if valid_601446 != nil:
    section.add "X-Amz-Signature", valid_601446
  var valid_601447 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601447 = validateParameter(valid_601447, JString, required = false,
                                 default = nil)
  if valid_601447 != nil:
    section.add "X-Amz-SignedHeaders", valid_601447
  var valid_601448 = header.getOrDefault("X-Amz-Credential")
  valid_601448 = validateParameter(valid_601448, JString, required = false,
                                 default = nil)
  if valid_601448 != nil:
    section.add "X-Amz-Credential", valid_601448
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601449: Call_GetDeleteConfigurationSetTrackingOptions_601436;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes an association between a configuration set and a custom domain for open and click event tracking.</p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p> <note> <p>Deleting this kind of association will result in emails sent using the specified configuration set to capture open and click events using the standard, Amazon SES-operated domains.</p> </note>
  ## 
  let valid = call_601449.validator(path, query, header, formData, body)
  let scheme = call_601449.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601449.url(scheme.get, call_601449.host, call_601449.base,
                         call_601449.route, valid.getOrDefault("path"))
  result = hook(call_601449, url, valid)

proc call*(call_601450: Call_GetDeleteConfigurationSetTrackingOptions_601436;
          ConfigurationSetName: string;
          Action: string = "DeleteConfigurationSetTrackingOptions";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteConfigurationSetTrackingOptions
  ## <p>Deletes an association between a configuration set and a custom domain for open and click event tracking.</p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p> <note> <p>Deleting this kind of association will result in emails sent using the specified configuration set to capture open and click events using the standard, Amazon SES-operated domains.</p> </note>
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set from which you want to delete the tracking options.
  ##   Version: string (required)
  var query_601451 = newJObject()
  add(query_601451, "Action", newJString(Action))
  add(query_601451, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_601451, "Version", newJString(Version))
  result = call_601450.call(nil, query_601451, nil, nil, nil)

var getDeleteConfigurationSetTrackingOptions* = Call_GetDeleteConfigurationSetTrackingOptions_601436(
    name: "getDeleteConfigurationSetTrackingOptions", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=DeleteConfigurationSetTrackingOptions",
    validator: validate_GetDeleteConfigurationSetTrackingOptions_601437,
    base: "/", url: url_GetDeleteConfigurationSetTrackingOptions_601438,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCustomVerificationEmailTemplate_601485 = ref object of OpenApiRestCall_600426
proc url_PostDeleteCustomVerificationEmailTemplate_601487(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteCustomVerificationEmailTemplate_601486(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an existing custom verification email template. </p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601488 = query.getOrDefault("Action")
  valid_601488 = validateParameter(valid_601488, JString, required = true, default = newJString(
      "DeleteCustomVerificationEmailTemplate"))
  if valid_601488 != nil:
    section.add "Action", valid_601488
  var valid_601489 = query.getOrDefault("Version")
  valid_601489 = validateParameter(valid_601489, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601489 != nil:
    section.add "Version", valid_601489
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601490 = header.getOrDefault("X-Amz-Date")
  valid_601490 = validateParameter(valid_601490, JString, required = false,
                                 default = nil)
  if valid_601490 != nil:
    section.add "X-Amz-Date", valid_601490
  var valid_601491 = header.getOrDefault("X-Amz-Security-Token")
  valid_601491 = validateParameter(valid_601491, JString, required = false,
                                 default = nil)
  if valid_601491 != nil:
    section.add "X-Amz-Security-Token", valid_601491
  var valid_601492 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601492 = validateParameter(valid_601492, JString, required = false,
                                 default = nil)
  if valid_601492 != nil:
    section.add "X-Amz-Content-Sha256", valid_601492
  var valid_601493 = header.getOrDefault("X-Amz-Algorithm")
  valid_601493 = validateParameter(valid_601493, JString, required = false,
                                 default = nil)
  if valid_601493 != nil:
    section.add "X-Amz-Algorithm", valid_601493
  var valid_601494 = header.getOrDefault("X-Amz-Signature")
  valid_601494 = validateParameter(valid_601494, JString, required = false,
                                 default = nil)
  if valid_601494 != nil:
    section.add "X-Amz-Signature", valid_601494
  var valid_601495 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601495 = validateParameter(valid_601495, JString, required = false,
                                 default = nil)
  if valid_601495 != nil:
    section.add "X-Amz-SignedHeaders", valid_601495
  var valid_601496 = header.getOrDefault("X-Amz-Credential")
  valid_601496 = validateParameter(valid_601496, JString, required = false,
                                 default = nil)
  if valid_601496 != nil:
    section.add "X-Amz-Credential", valid_601496
  result.add "header", section
  ## parameters in `formData` object:
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template that you want to delete.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TemplateName` field"
  var valid_601497 = formData.getOrDefault("TemplateName")
  valid_601497 = validateParameter(valid_601497, JString, required = true,
                                 default = nil)
  if valid_601497 != nil:
    section.add "TemplateName", valid_601497
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601498: Call_PostDeleteCustomVerificationEmailTemplate_601485;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes an existing custom verification email template. </p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_601498.validator(path, query, header, formData, body)
  let scheme = call_601498.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601498.url(scheme.get, call_601498.host, call_601498.base,
                         call_601498.route, valid.getOrDefault("path"))
  result = hook(call_601498, url, valid)

proc call*(call_601499: Call_PostDeleteCustomVerificationEmailTemplate_601485;
          TemplateName: string;
          Action: string = "DeleteCustomVerificationEmailTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteCustomVerificationEmailTemplate
  ## <p>Deletes an existing custom verification email template. </p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template that you want to delete.
  ##   Version: string (required)
  var query_601500 = newJObject()
  var formData_601501 = newJObject()
  add(query_601500, "Action", newJString(Action))
  add(formData_601501, "TemplateName", newJString(TemplateName))
  add(query_601500, "Version", newJString(Version))
  result = call_601499.call(nil, query_601500, nil, formData_601501, nil)

var postDeleteCustomVerificationEmailTemplate* = Call_PostDeleteCustomVerificationEmailTemplate_601485(
    name: "postDeleteCustomVerificationEmailTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=DeleteCustomVerificationEmailTemplate",
    validator: validate_PostDeleteCustomVerificationEmailTemplate_601486,
    base: "/", url: url_PostDeleteCustomVerificationEmailTemplate_601487,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCustomVerificationEmailTemplate_601469 = ref object of OpenApiRestCall_600426
proc url_GetDeleteCustomVerificationEmailTemplate_601471(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteCustomVerificationEmailTemplate_601470(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an existing custom verification email template. </p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template that you want to delete.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601472 = query.getOrDefault("Action")
  valid_601472 = validateParameter(valid_601472, JString, required = true, default = newJString(
      "DeleteCustomVerificationEmailTemplate"))
  if valid_601472 != nil:
    section.add "Action", valid_601472
  var valid_601473 = query.getOrDefault("TemplateName")
  valid_601473 = validateParameter(valid_601473, JString, required = true,
                                 default = nil)
  if valid_601473 != nil:
    section.add "TemplateName", valid_601473
  var valid_601474 = query.getOrDefault("Version")
  valid_601474 = validateParameter(valid_601474, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601474 != nil:
    section.add "Version", valid_601474
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601475 = header.getOrDefault("X-Amz-Date")
  valid_601475 = validateParameter(valid_601475, JString, required = false,
                                 default = nil)
  if valid_601475 != nil:
    section.add "X-Amz-Date", valid_601475
  var valid_601476 = header.getOrDefault("X-Amz-Security-Token")
  valid_601476 = validateParameter(valid_601476, JString, required = false,
                                 default = nil)
  if valid_601476 != nil:
    section.add "X-Amz-Security-Token", valid_601476
  var valid_601477 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601477 = validateParameter(valid_601477, JString, required = false,
                                 default = nil)
  if valid_601477 != nil:
    section.add "X-Amz-Content-Sha256", valid_601477
  var valid_601478 = header.getOrDefault("X-Amz-Algorithm")
  valid_601478 = validateParameter(valid_601478, JString, required = false,
                                 default = nil)
  if valid_601478 != nil:
    section.add "X-Amz-Algorithm", valid_601478
  var valid_601479 = header.getOrDefault("X-Amz-Signature")
  valid_601479 = validateParameter(valid_601479, JString, required = false,
                                 default = nil)
  if valid_601479 != nil:
    section.add "X-Amz-Signature", valid_601479
  var valid_601480 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601480 = validateParameter(valid_601480, JString, required = false,
                                 default = nil)
  if valid_601480 != nil:
    section.add "X-Amz-SignedHeaders", valid_601480
  var valid_601481 = header.getOrDefault("X-Amz-Credential")
  valid_601481 = validateParameter(valid_601481, JString, required = false,
                                 default = nil)
  if valid_601481 != nil:
    section.add "X-Amz-Credential", valid_601481
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601482: Call_GetDeleteCustomVerificationEmailTemplate_601469;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes an existing custom verification email template. </p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_601482.validator(path, query, header, formData, body)
  let scheme = call_601482.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601482.url(scheme.get, call_601482.host, call_601482.base,
                         call_601482.route, valid.getOrDefault("path"))
  result = hook(call_601482, url, valid)

proc call*(call_601483: Call_GetDeleteCustomVerificationEmailTemplate_601469;
          TemplateName: string;
          Action: string = "DeleteCustomVerificationEmailTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteCustomVerificationEmailTemplate
  ## <p>Deletes an existing custom verification email template. </p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template that you want to delete.
  ##   Version: string (required)
  var query_601484 = newJObject()
  add(query_601484, "Action", newJString(Action))
  add(query_601484, "TemplateName", newJString(TemplateName))
  add(query_601484, "Version", newJString(Version))
  result = call_601483.call(nil, query_601484, nil, nil, nil)

var getDeleteCustomVerificationEmailTemplate* = Call_GetDeleteCustomVerificationEmailTemplate_601469(
    name: "getDeleteCustomVerificationEmailTemplate", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=DeleteCustomVerificationEmailTemplate",
    validator: validate_GetDeleteCustomVerificationEmailTemplate_601470,
    base: "/", url: url_GetDeleteCustomVerificationEmailTemplate_601471,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteIdentity_601518 = ref object of OpenApiRestCall_600426
proc url_PostDeleteIdentity_601520(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteIdentity_601519(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Deletes the specified identity (an email address or a domain) from the list of verified identities.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601521 = query.getOrDefault("Action")
  valid_601521 = validateParameter(valid_601521, JString, required = true,
                                 default = newJString("DeleteIdentity"))
  if valid_601521 != nil:
    section.add "Action", valid_601521
  var valid_601522 = query.getOrDefault("Version")
  valid_601522 = validateParameter(valid_601522, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601522 != nil:
    section.add "Version", valid_601522
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601523 = header.getOrDefault("X-Amz-Date")
  valid_601523 = validateParameter(valid_601523, JString, required = false,
                                 default = nil)
  if valid_601523 != nil:
    section.add "X-Amz-Date", valid_601523
  var valid_601524 = header.getOrDefault("X-Amz-Security-Token")
  valid_601524 = validateParameter(valid_601524, JString, required = false,
                                 default = nil)
  if valid_601524 != nil:
    section.add "X-Amz-Security-Token", valid_601524
  var valid_601525 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601525 = validateParameter(valid_601525, JString, required = false,
                                 default = nil)
  if valid_601525 != nil:
    section.add "X-Amz-Content-Sha256", valid_601525
  var valid_601526 = header.getOrDefault("X-Amz-Algorithm")
  valid_601526 = validateParameter(valid_601526, JString, required = false,
                                 default = nil)
  if valid_601526 != nil:
    section.add "X-Amz-Algorithm", valid_601526
  var valid_601527 = header.getOrDefault("X-Amz-Signature")
  valid_601527 = validateParameter(valid_601527, JString, required = false,
                                 default = nil)
  if valid_601527 != nil:
    section.add "X-Amz-Signature", valid_601527
  var valid_601528 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601528 = validateParameter(valid_601528, JString, required = false,
                                 default = nil)
  if valid_601528 != nil:
    section.add "X-Amz-SignedHeaders", valid_601528
  var valid_601529 = header.getOrDefault("X-Amz-Credential")
  valid_601529 = validateParameter(valid_601529, JString, required = false,
                                 default = nil)
  if valid_601529 != nil:
    section.add "X-Amz-Credential", valid_601529
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identity: JString (required)
  ##           : The identity to be removed from the list of identities for the AWS Account.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identity` field"
  var valid_601530 = formData.getOrDefault("Identity")
  valid_601530 = validateParameter(valid_601530, JString, required = true,
                                 default = nil)
  if valid_601530 != nil:
    section.add "Identity", valid_601530
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601531: Call_PostDeleteIdentity_601518; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified identity (an email address or a domain) from the list of verified identities.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_601531.validator(path, query, header, formData, body)
  let scheme = call_601531.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601531.url(scheme.get, call_601531.host, call_601531.base,
                         call_601531.route, valid.getOrDefault("path"))
  result = hook(call_601531, url, valid)

proc call*(call_601532: Call_PostDeleteIdentity_601518; Identity: string;
          Action: string = "DeleteIdentity"; Version: string = "2010-12-01"): Recallable =
  ## postDeleteIdentity
  ## <p>Deletes the specified identity (an email address or a domain) from the list of verified identities.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : The identity to be removed from the list of identities for the AWS Account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601533 = newJObject()
  var formData_601534 = newJObject()
  add(formData_601534, "Identity", newJString(Identity))
  add(query_601533, "Action", newJString(Action))
  add(query_601533, "Version", newJString(Version))
  result = call_601532.call(nil, query_601533, nil, formData_601534, nil)

var postDeleteIdentity* = Call_PostDeleteIdentity_601518(
    name: "postDeleteIdentity", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteIdentity",
    validator: validate_PostDeleteIdentity_601519, base: "/",
    url: url_PostDeleteIdentity_601520, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteIdentity_601502 = ref object of OpenApiRestCall_600426
proc url_GetDeleteIdentity_601504(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteIdentity_601503(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Deletes the specified identity (an email address or a domain) from the list of verified identities.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : The identity to be removed from the list of identities for the AWS Account.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_601505 = query.getOrDefault("Identity")
  valid_601505 = validateParameter(valid_601505, JString, required = true,
                                 default = nil)
  if valid_601505 != nil:
    section.add "Identity", valid_601505
  var valid_601506 = query.getOrDefault("Action")
  valid_601506 = validateParameter(valid_601506, JString, required = true,
                                 default = newJString("DeleteIdentity"))
  if valid_601506 != nil:
    section.add "Action", valid_601506
  var valid_601507 = query.getOrDefault("Version")
  valid_601507 = validateParameter(valid_601507, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601507 != nil:
    section.add "Version", valid_601507
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601508 = header.getOrDefault("X-Amz-Date")
  valid_601508 = validateParameter(valid_601508, JString, required = false,
                                 default = nil)
  if valid_601508 != nil:
    section.add "X-Amz-Date", valid_601508
  var valid_601509 = header.getOrDefault("X-Amz-Security-Token")
  valid_601509 = validateParameter(valid_601509, JString, required = false,
                                 default = nil)
  if valid_601509 != nil:
    section.add "X-Amz-Security-Token", valid_601509
  var valid_601510 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601510 = validateParameter(valid_601510, JString, required = false,
                                 default = nil)
  if valid_601510 != nil:
    section.add "X-Amz-Content-Sha256", valid_601510
  var valid_601511 = header.getOrDefault("X-Amz-Algorithm")
  valid_601511 = validateParameter(valid_601511, JString, required = false,
                                 default = nil)
  if valid_601511 != nil:
    section.add "X-Amz-Algorithm", valid_601511
  var valid_601512 = header.getOrDefault("X-Amz-Signature")
  valid_601512 = validateParameter(valid_601512, JString, required = false,
                                 default = nil)
  if valid_601512 != nil:
    section.add "X-Amz-Signature", valid_601512
  var valid_601513 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601513 = validateParameter(valid_601513, JString, required = false,
                                 default = nil)
  if valid_601513 != nil:
    section.add "X-Amz-SignedHeaders", valid_601513
  var valid_601514 = header.getOrDefault("X-Amz-Credential")
  valid_601514 = validateParameter(valid_601514, JString, required = false,
                                 default = nil)
  if valid_601514 != nil:
    section.add "X-Amz-Credential", valid_601514
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601515: Call_GetDeleteIdentity_601502; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified identity (an email address or a domain) from the list of verified identities.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_601515.validator(path, query, header, formData, body)
  let scheme = call_601515.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601515.url(scheme.get, call_601515.host, call_601515.base,
                         call_601515.route, valid.getOrDefault("path"))
  result = hook(call_601515, url, valid)

proc call*(call_601516: Call_GetDeleteIdentity_601502; Identity: string;
          Action: string = "DeleteIdentity"; Version: string = "2010-12-01"): Recallable =
  ## getDeleteIdentity
  ## <p>Deletes the specified identity (an email address or a domain) from the list of verified identities.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : The identity to be removed from the list of identities for the AWS Account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601517 = newJObject()
  add(query_601517, "Identity", newJString(Identity))
  add(query_601517, "Action", newJString(Action))
  add(query_601517, "Version", newJString(Version))
  result = call_601516.call(nil, query_601517, nil, nil, nil)

var getDeleteIdentity* = Call_GetDeleteIdentity_601502(name: "getDeleteIdentity",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=DeleteIdentity", validator: validate_GetDeleteIdentity_601503,
    base: "/", url: url_GetDeleteIdentity_601504,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteIdentityPolicy_601552 = ref object of OpenApiRestCall_600426
proc url_PostDeleteIdentityPolicy_601554(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteIdentityPolicy_601553(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601555 = query.getOrDefault("Action")
  valid_601555 = validateParameter(valid_601555, JString, required = true,
                                 default = newJString("DeleteIdentityPolicy"))
  if valid_601555 != nil:
    section.add "Action", valid_601555
  var valid_601556 = query.getOrDefault("Version")
  valid_601556 = validateParameter(valid_601556, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601556 != nil:
    section.add "Version", valid_601556
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601557 = header.getOrDefault("X-Amz-Date")
  valid_601557 = validateParameter(valid_601557, JString, required = false,
                                 default = nil)
  if valid_601557 != nil:
    section.add "X-Amz-Date", valid_601557
  var valid_601558 = header.getOrDefault("X-Amz-Security-Token")
  valid_601558 = validateParameter(valid_601558, JString, required = false,
                                 default = nil)
  if valid_601558 != nil:
    section.add "X-Amz-Security-Token", valid_601558
  var valid_601559 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601559 = validateParameter(valid_601559, JString, required = false,
                                 default = nil)
  if valid_601559 != nil:
    section.add "X-Amz-Content-Sha256", valid_601559
  var valid_601560 = header.getOrDefault("X-Amz-Algorithm")
  valid_601560 = validateParameter(valid_601560, JString, required = false,
                                 default = nil)
  if valid_601560 != nil:
    section.add "X-Amz-Algorithm", valid_601560
  var valid_601561 = header.getOrDefault("X-Amz-Signature")
  valid_601561 = validateParameter(valid_601561, JString, required = false,
                                 default = nil)
  if valid_601561 != nil:
    section.add "X-Amz-Signature", valid_601561
  var valid_601562 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601562 = validateParameter(valid_601562, JString, required = false,
                                 default = nil)
  if valid_601562 != nil:
    section.add "X-Amz-SignedHeaders", valid_601562
  var valid_601563 = header.getOrDefault("X-Amz-Credential")
  valid_601563 = validateParameter(valid_601563, JString, required = false,
                                 default = nil)
  if valid_601563 != nil:
    section.add "X-Amz-Credential", valid_601563
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : The name of the policy to be deleted.
  ##   Identity: JString (required)
  ##           : <p>The identity that is associated with the policy that you want to delete. You can specify the identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_601564 = formData.getOrDefault("PolicyName")
  valid_601564 = validateParameter(valid_601564, JString, required = true,
                                 default = nil)
  if valid_601564 != nil:
    section.add "PolicyName", valid_601564
  var valid_601565 = formData.getOrDefault("Identity")
  valid_601565 = validateParameter(valid_601565, JString, required = true,
                                 default = nil)
  if valid_601565 != nil:
    section.add "Identity", valid_601565
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601566: Call_PostDeleteIdentityPolicy_601552; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_601566.validator(path, query, header, formData, body)
  let scheme = call_601566.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601566.url(scheme.get, call_601566.host, call_601566.base,
                         call_601566.route, valid.getOrDefault("path"))
  result = hook(call_601566, url, valid)

proc call*(call_601567: Call_PostDeleteIdentityPolicy_601552; PolicyName: string;
          Identity: string; Action: string = "DeleteIdentityPolicy";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteIdentityPolicy
  ## <p>Deletes the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   PolicyName: string (required)
  ##             : The name of the policy to be deleted.
  ##   Identity: string (required)
  ##           : <p>The identity that is associated with the policy that you want to delete. You can specify the identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601568 = newJObject()
  var formData_601569 = newJObject()
  add(formData_601569, "PolicyName", newJString(PolicyName))
  add(formData_601569, "Identity", newJString(Identity))
  add(query_601568, "Action", newJString(Action))
  add(query_601568, "Version", newJString(Version))
  result = call_601567.call(nil, query_601568, nil, formData_601569, nil)

var postDeleteIdentityPolicy* = Call_PostDeleteIdentityPolicy_601552(
    name: "postDeleteIdentityPolicy", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteIdentityPolicy",
    validator: validate_PostDeleteIdentityPolicy_601553, base: "/",
    url: url_PostDeleteIdentityPolicy_601554, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteIdentityPolicy_601535 = ref object of OpenApiRestCall_600426
proc url_GetDeleteIdentityPolicy_601537(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteIdentityPolicy_601536(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : <p>The identity that is associated with the policy that you want to delete. You can specify the identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : The name of the policy to be deleted.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_601538 = query.getOrDefault("Identity")
  valid_601538 = validateParameter(valid_601538, JString, required = true,
                                 default = nil)
  if valid_601538 != nil:
    section.add "Identity", valid_601538
  var valid_601539 = query.getOrDefault("Action")
  valid_601539 = validateParameter(valid_601539, JString, required = true,
                                 default = newJString("DeleteIdentityPolicy"))
  if valid_601539 != nil:
    section.add "Action", valid_601539
  var valid_601540 = query.getOrDefault("Version")
  valid_601540 = validateParameter(valid_601540, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601540 != nil:
    section.add "Version", valid_601540
  var valid_601541 = query.getOrDefault("PolicyName")
  valid_601541 = validateParameter(valid_601541, JString, required = true,
                                 default = nil)
  if valid_601541 != nil:
    section.add "PolicyName", valid_601541
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601542 = header.getOrDefault("X-Amz-Date")
  valid_601542 = validateParameter(valid_601542, JString, required = false,
                                 default = nil)
  if valid_601542 != nil:
    section.add "X-Amz-Date", valid_601542
  var valid_601543 = header.getOrDefault("X-Amz-Security-Token")
  valid_601543 = validateParameter(valid_601543, JString, required = false,
                                 default = nil)
  if valid_601543 != nil:
    section.add "X-Amz-Security-Token", valid_601543
  var valid_601544 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601544 = validateParameter(valid_601544, JString, required = false,
                                 default = nil)
  if valid_601544 != nil:
    section.add "X-Amz-Content-Sha256", valid_601544
  var valid_601545 = header.getOrDefault("X-Amz-Algorithm")
  valid_601545 = validateParameter(valid_601545, JString, required = false,
                                 default = nil)
  if valid_601545 != nil:
    section.add "X-Amz-Algorithm", valid_601545
  var valid_601546 = header.getOrDefault("X-Amz-Signature")
  valid_601546 = validateParameter(valid_601546, JString, required = false,
                                 default = nil)
  if valid_601546 != nil:
    section.add "X-Amz-Signature", valid_601546
  var valid_601547 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601547 = validateParameter(valid_601547, JString, required = false,
                                 default = nil)
  if valid_601547 != nil:
    section.add "X-Amz-SignedHeaders", valid_601547
  var valid_601548 = header.getOrDefault("X-Amz-Credential")
  valid_601548 = validateParameter(valid_601548, JString, required = false,
                                 default = nil)
  if valid_601548 != nil:
    section.add "X-Amz-Credential", valid_601548
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601549: Call_GetDeleteIdentityPolicy_601535; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_601549.validator(path, query, header, formData, body)
  let scheme = call_601549.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601549.url(scheme.get, call_601549.host, call_601549.base,
                         call_601549.route, valid.getOrDefault("path"))
  result = hook(call_601549, url, valid)

proc call*(call_601550: Call_GetDeleteIdentityPolicy_601535; Identity: string;
          PolicyName: string; Action: string = "DeleteIdentityPolicy";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteIdentityPolicy
  ## <p>Deletes the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : <p>The identity that is associated with the policy that you want to delete. You can specify the identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : The name of the policy to be deleted.
  var query_601551 = newJObject()
  add(query_601551, "Identity", newJString(Identity))
  add(query_601551, "Action", newJString(Action))
  add(query_601551, "Version", newJString(Version))
  add(query_601551, "PolicyName", newJString(PolicyName))
  result = call_601550.call(nil, query_601551, nil, nil, nil)

var getDeleteIdentityPolicy* = Call_GetDeleteIdentityPolicy_601535(
    name: "getDeleteIdentityPolicy", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DeleteIdentityPolicy",
    validator: validate_GetDeleteIdentityPolicy_601536, base: "/",
    url: url_GetDeleteIdentityPolicy_601537, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteReceiptFilter_601586 = ref object of OpenApiRestCall_600426
proc url_PostDeleteReceiptFilter_601588(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteReceiptFilter_601587(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified IP address filter.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601589 = query.getOrDefault("Action")
  valid_601589 = validateParameter(valid_601589, JString, required = true,
                                 default = newJString("DeleteReceiptFilter"))
  if valid_601589 != nil:
    section.add "Action", valid_601589
  var valid_601590 = query.getOrDefault("Version")
  valid_601590 = validateParameter(valid_601590, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601590 != nil:
    section.add "Version", valid_601590
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601591 = header.getOrDefault("X-Amz-Date")
  valid_601591 = validateParameter(valid_601591, JString, required = false,
                                 default = nil)
  if valid_601591 != nil:
    section.add "X-Amz-Date", valid_601591
  var valid_601592 = header.getOrDefault("X-Amz-Security-Token")
  valid_601592 = validateParameter(valid_601592, JString, required = false,
                                 default = nil)
  if valid_601592 != nil:
    section.add "X-Amz-Security-Token", valid_601592
  var valid_601593 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601593 = validateParameter(valid_601593, JString, required = false,
                                 default = nil)
  if valid_601593 != nil:
    section.add "X-Amz-Content-Sha256", valid_601593
  var valid_601594 = header.getOrDefault("X-Amz-Algorithm")
  valid_601594 = validateParameter(valid_601594, JString, required = false,
                                 default = nil)
  if valid_601594 != nil:
    section.add "X-Amz-Algorithm", valid_601594
  var valid_601595 = header.getOrDefault("X-Amz-Signature")
  valid_601595 = validateParameter(valid_601595, JString, required = false,
                                 default = nil)
  if valid_601595 != nil:
    section.add "X-Amz-Signature", valid_601595
  var valid_601596 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601596 = validateParameter(valid_601596, JString, required = false,
                                 default = nil)
  if valid_601596 != nil:
    section.add "X-Amz-SignedHeaders", valid_601596
  var valid_601597 = header.getOrDefault("X-Amz-Credential")
  valid_601597 = validateParameter(valid_601597, JString, required = false,
                                 default = nil)
  if valid_601597 != nil:
    section.add "X-Amz-Credential", valid_601597
  result.add "header", section
  ## parameters in `formData` object:
  ##   FilterName: JString (required)
  ##             : The name of the IP address filter to delete.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `FilterName` field"
  var valid_601598 = formData.getOrDefault("FilterName")
  valid_601598 = validateParameter(valid_601598, JString, required = true,
                                 default = nil)
  if valid_601598 != nil:
    section.add "FilterName", valid_601598
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601599: Call_PostDeleteReceiptFilter_601586; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified IP address filter.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_601599.validator(path, query, header, formData, body)
  let scheme = call_601599.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601599.url(scheme.get, call_601599.host, call_601599.base,
                         call_601599.route, valid.getOrDefault("path"))
  result = hook(call_601599, url, valid)

proc call*(call_601600: Call_PostDeleteReceiptFilter_601586; FilterName: string;
          Action: string = "DeleteReceiptFilter"; Version: string = "2010-12-01"): Recallable =
  ## postDeleteReceiptFilter
  ## <p>Deletes the specified IP address filter.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   FilterName: string (required)
  ##             : The name of the IP address filter to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601601 = newJObject()
  var formData_601602 = newJObject()
  add(formData_601602, "FilterName", newJString(FilterName))
  add(query_601601, "Action", newJString(Action))
  add(query_601601, "Version", newJString(Version))
  result = call_601600.call(nil, query_601601, nil, formData_601602, nil)

var postDeleteReceiptFilter* = Call_PostDeleteReceiptFilter_601586(
    name: "postDeleteReceiptFilter", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteReceiptFilter",
    validator: validate_PostDeleteReceiptFilter_601587, base: "/",
    url: url_PostDeleteReceiptFilter_601588, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteReceiptFilter_601570 = ref object of OpenApiRestCall_600426
proc url_GetDeleteReceiptFilter_601572(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteReceiptFilter_601571(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified IP address filter.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   FilterName: JString (required)
  ##             : The name of the IP address filter to delete.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601573 = query.getOrDefault("Action")
  valid_601573 = validateParameter(valid_601573, JString, required = true,
                                 default = newJString("DeleteReceiptFilter"))
  if valid_601573 != nil:
    section.add "Action", valid_601573
  var valid_601574 = query.getOrDefault("Version")
  valid_601574 = validateParameter(valid_601574, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601574 != nil:
    section.add "Version", valid_601574
  var valid_601575 = query.getOrDefault("FilterName")
  valid_601575 = validateParameter(valid_601575, JString, required = true,
                                 default = nil)
  if valid_601575 != nil:
    section.add "FilterName", valid_601575
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601576 = header.getOrDefault("X-Amz-Date")
  valid_601576 = validateParameter(valid_601576, JString, required = false,
                                 default = nil)
  if valid_601576 != nil:
    section.add "X-Amz-Date", valid_601576
  var valid_601577 = header.getOrDefault("X-Amz-Security-Token")
  valid_601577 = validateParameter(valid_601577, JString, required = false,
                                 default = nil)
  if valid_601577 != nil:
    section.add "X-Amz-Security-Token", valid_601577
  var valid_601578 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601578 = validateParameter(valid_601578, JString, required = false,
                                 default = nil)
  if valid_601578 != nil:
    section.add "X-Amz-Content-Sha256", valid_601578
  var valid_601579 = header.getOrDefault("X-Amz-Algorithm")
  valid_601579 = validateParameter(valid_601579, JString, required = false,
                                 default = nil)
  if valid_601579 != nil:
    section.add "X-Amz-Algorithm", valid_601579
  var valid_601580 = header.getOrDefault("X-Amz-Signature")
  valid_601580 = validateParameter(valid_601580, JString, required = false,
                                 default = nil)
  if valid_601580 != nil:
    section.add "X-Amz-Signature", valid_601580
  var valid_601581 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601581 = validateParameter(valid_601581, JString, required = false,
                                 default = nil)
  if valid_601581 != nil:
    section.add "X-Amz-SignedHeaders", valid_601581
  var valid_601582 = header.getOrDefault("X-Amz-Credential")
  valid_601582 = validateParameter(valid_601582, JString, required = false,
                                 default = nil)
  if valid_601582 != nil:
    section.add "X-Amz-Credential", valid_601582
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601583: Call_GetDeleteReceiptFilter_601570; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified IP address filter.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_601583.validator(path, query, header, formData, body)
  let scheme = call_601583.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601583.url(scheme.get, call_601583.host, call_601583.base,
                         call_601583.route, valid.getOrDefault("path"))
  result = hook(call_601583, url, valid)

proc call*(call_601584: Call_GetDeleteReceiptFilter_601570; FilterName: string;
          Action: string = "DeleteReceiptFilter"; Version: string = "2010-12-01"): Recallable =
  ## getDeleteReceiptFilter
  ## <p>Deletes the specified IP address filter.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   FilterName: string (required)
  ##             : The name of the IP address filter to delete.
  var query_601585 = newJObject()
  add(query_601585, "Action", newJString(Action))
  add(query_601585, "Version", newJString(Version))
  add(query_601585, "FilterName", newJString(FilterName))
  result = call_601584.call(nil, query_601585, nil, nil, nil)

var getDeleteReceiptFilter* = Call_GetDeleteReceiptFilter_601570(
    name: "getDeleteReceiptFilter", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DeleteReceiptFilter",
    validator: validate_GetDeleteReceiptFilter_601571, base: "/",
    url: url_GetDeleteReceiptFilter_601572, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteReceiptRule_601620 = ref object of OpenApiRestCall_600426
proc url_PostDeleteReceiptRule_601622(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteReceiptRule_601621(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601623 = query.getOrDefault("Action")
  valid_601623 = validateParameter(valid_601623, JString, required = true,
                                 default = newJString("DeleteReceiptRule"))
  if valid_601623 != nil:
    section.add "Action", valid_601623
  var valid_601624 = query.getOrDefault("Version")
  valid_601624 = validateParameter(valid_601624, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601624 != nil:
    section.add "Version", valid_601624
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601625 = header.getOrDefault("X-Amz-Date")
  valid_601625 = validateParameter(valid_601625, JString, required = false,
                                 default = nil)
  if valid_601625 != nil:
    section.add "X-Amz-Date", valid_601625
  var valid_601626 = header.getOrDefault("X-Amz-Security-Token")
  valid_601626 = validateParameter(valid_601626, JString, required = false,
                                 default = nil)
  if valid_601626 != nil:
    section.add "X-Amz-Security-Token", valid_601626
  var valid_601627 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601627 = validateParameter(valid_601627, JString, required = false,
                                 default = nil)
  if valid_601627 != nil:
    section.add "X-Amz-Content-Sha256", valid_601627
  var valid_601628 = header.getOrDefault("X-Amz-Algorithm")
  valid_601628 = validateParameter(valid_601628, JString, required = false,
                                 default = nil)
  if valid_601628 != nil:
    section.add "X-Amz-Algorithm", valid_601628
  var valid_601629 = header.getOrDefault("X-Amz-Signature")
  valid_601629 = validateParameter(valid_601629, JString, required = false,
                                 default = nil)
  if valid_601629 != nil:
    section.add "X-Amz-Signature", valid_601629
  var valid_601630 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601630 = validateParameter(valid_601630, JString, required = false,
                                 default = nil)
  if valid_601630 != nil:
    section.add "X-Amz-SignedHeaders", valid_601630
  var valid_601631 = header.getOrDefault("X-Amz-Credential")
  valid_601631 = validateParameter(valid_601631, JString, required = false,
                                 default = nil)
  if valid_601631 != nil:
    section.add "X-Amz-Credential", valid_601631
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleName: JString (required)
  ##           : The name of the receipt rule to delete.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that contains the receipt rule to delete.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleName` field"
  var valid_601632 = formData.getOrDefault("RuleName")
  valid_601632 = validateParameter(valid_601632, JString, required = true,
                                 default = nil)
  if valid_601632 != nil:
    section.add "RuleName", valid_601632
  var valid_601633 = formData.getOrDefault("RuleSetName")
  valid_601633 = validateParameter(valid_601633, JString, required = true,
                                 default = nil)
  if valid_601633 != nil:
    section.add "RuleSetName", valid_601633
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601634: Call_PostDeleteReceiptRule_601620; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_601634.validator(path, query, header, formData, body)
  let scheme = call_601634.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601634.url(scheme.get, call_601634.host, call_601634.base,
                         call_601634.route, valid.getOrDefault("path"))
  result = hook(call_601634, url, valid)

proc call*(call_601635: Call_PostDeleteReceiptRule_601620; RuleName: string;
          RuleSetName: string; Action: string = "DeleteReceiptRule";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteReceiptRule
  ## <p>Deletes the specified receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleName: string (required)
  ##           : The name of the receipt rule to delete.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that contains the receipt rule to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601636 = newJObject()
  var formData_601637 = newJObject()
  add(formData_601637, "RuleName", newJString(RuleName))
  add(formData_601637, "RuleSetName", newJString(RuleSetName))
  add(query_601636, "Action", newJString(Action))
  add(query_601636, "Version", newJString(Version))
  result = call_601635.call(nil, query_601636, nil, formData_601637, nil)

var postDeleteReceiptRule* = Call_PostDeleteReceiptRule_601620(
    name: "postDeleteReceiptRule", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteReceiptRule",
    validator: validate_PostDeleteReceiptRule_601621, base: "/",
    url: url_PostDeleteReceiptRule_601622, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteReceiptRule_601603 = ref object of OpenApiRestCall_600426
proc url_GetDeleteReceiptRule_601605(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteReceiptRule_601604(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleName: JString (required)
  ##           : The name of the receipt rule to delete.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that contains the receipt rule to delete.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleName` field"
  var valid_601606 = query.getOrDefault("RuleName")
  valid_601606 = validateParameter(valid_601606, JString, required = true,
                                 default = nil)
  if valid_601606 != nil:
    section.add "RuleName", valid_601606
  var valid_601607 = query.getOrDefault("RuleSetName")
  valid_601607 = validateParameter(valid_601607, JString, required = true,
                                 default = nil)
  if valid_601607 != nil:
    section.add "RuleSetName", valid_601607
  var valid_601608 = query.getOrDefault("Action")
  valid_601608 = validateParameter(valid_601608, JString, required = true,
                                 default = newJString("DeleteReceiptRule"))
  if valid_601608 != nil:
    section.add "Action", valid_601608
  var valid_601609 = query.getOrDefault("Version")
  valid_601609 = validateParameter(valid_601609, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601609 != nil:
    section.add "Version", valid_601609
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601610 = header.getOrDefault("X-Amz-Date")
  valid_601610 = validateParameter(valid_601610, JString, required = false,
                                 default = nil)
  if valid_601610 != nil:
    section.add "X-Amz-Date", valid_601610
  var valid_601611 = header.getOrDefault("X-Amz-Security-Token")
  valid_601611 = validateParameter(valid_601611, JString, required = false,
                                 default = nil)
  if valid_601611 != nil:
    section.add "X-Amz-Security-Token", valid_601611
  var valid_601612 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601612 = validateParameter(valid_601612, JString, required = false,
                                 default = nil)
  if valid_601612 != nil:
    section.add "X-Amz-Content-Sha256", valid_601612
  var valid_601613 = header.getOrDefault("X-Amz-Algorithm")
  valid_601613 = validateParameter(valid_601613, JString, required = false,
                                 default = nil)
  if valid_601613 != nil:
    section.add "X-Amz-Algorithm", valid_601613
  var valid_601614 = header.getOrDefault("X-Amz-Signature")
  valid_601614 = validateParameter(valid_601614, JString, required = false,
                                 default = nil)
  if valid_601614 != nil:
    section.add "X-Amz-Signature", valid_601614
  var valid_601615 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601615 = validateParameter(valid_601615, JString, required = false,
                                 default = nil)
  if valid_601615 != nil:
    section.add "X-Amz-SignedHeaders", valid_601615
  var valid_601616 = header.getOrDefault("X-Amz-Credential")
  valid_601616 = validateParameter(valid_601616, JString, required = false,
                                 default = nil)
  if valid_601616 != nil:
    section.add "X-Amz-Credential", valid_601616
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601617: Call_GetDeleteReceiptRule_601603; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_601617.validator(path, query, header, formData, body)
  let scheme = call_601617.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601617.url(scheme.get, call_601617.host, call_601617.base,
                         call_601617.route, valid.getOrDefault("path"))
  result = hook(call_601617, url, valid)

proc call*(call_601618: Call_GetDeleteReceiptRule_601603; RuleName: string;
          RuleSetName: string; Action: string = "DeleteReceiptRule";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteReceiptRule
  ## <p>Deletes the specified receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleName: string (required)
  ##           : The name of the receipt rule to delete.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that contains the receipt rule to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601619 = newJObject()
  add(query_601619, "RuleName", newJString(RuleName))
  add(query_601619, "RuleSetName", newJString(RuleSetName))
  add(query_601619, "Action", newJString(Action))
  add(query_601619, "Version", newJString(Version))
  result = call_601618.call(nil, query_601619, nil, nil, nil)

var getDeleteReceiptRule* = Call_GetDeleteReceiptRule_601603(
    name: "getDeleteReceiptRule", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DeleteReceiptRule",
    validator: validate_GetDeleteReceiptRule_601604, base: "/",
    url: url_GetDeleteReceiptRule_601605, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteReceiptRuleSet_601654 = ref object of OpenApiRestCall_600426
proc url_PostDeleteReceiptRuleSet_601656(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteReceiptRuleSet_601655(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified receipt rule set and all of the receipt rules it contains.</p> <note> <p>The currently active rule set cannot be deleted.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601657 = query.getOrDefault("Action")
  valid_601657 = validateParameter(valid_601657, JString, required = true,
                                 default = newJString("DeleteReceiptRuleSet"))
  if valid_601657 != nil:
    section.add "Action", valid_601657
  var valid_601658 = query.getOrDefault("Version")
  valid_601658 = validateParameter(valid_601658, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601658 != nil:
    section.add "Version", valid_601658
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601659 = header.getOrDefault("X-Amz-Date")
  valid_601659 = validateParameter(valid_601659, JString, required = false,
                                 default = nil)
  if valid_601659 != nil:
    section.add "X-Amz-Date", valid_601659
  var valid_601660 = header.getOrDefault("X-Amz-Security-Token")
  valid_601660 = validateParameter(valid_601660, JString, required = false,
                                 default = nil)
  if valid_601660 != nil:
    section.add "X-Amz-Security-Token", valid_601660
  var valid_601661 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601661 = validateParameter(valid_601661, JString, required = false,
                                 default = nil)
  if valid_601661 != nil:
    section.add "X-Amz-Content-Sha256", valid_601661
  var valid_601662 = header.getOrDefault("X-Amz-Algorithm")
  valid_601662 = validateParameter(valid_601662, JString, required = false,
                                 default = nil)
  if valid_601662 != nil:
    section.add "X-Amz-Algorithm", valid_601662
  var valid_601663 = header.getOrDefault("X-Amz-Signature")
  valid_601663 = validateParameter(valid_601663, JString, required = false,
                                 default = nil)
  if valid_601663 != nil:
    section.add "X-Amz-Signature", valid_601663
  var valid_601664 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601664 = validateParameter(valid_601664, JString, required = false,
                                 default = nil)
  if valid_601664 != nil:
    section.add "X-Amz-SignedHeaders", valid_601664
  var valid_601665 = header.getOrDefault("X-Amz-Credential")
  valid_601665 = validateParameter(valid_601665, JString, required = false,
                                 default = nil)
  if valid_601665 != nil:
    section.add "X-Amz-Credential", valid_601665
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set to delete.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleSetName` field"
  var valid_601666 = formData.getOrDefault("RuleSetName")
  valid_601666 = validateParameter(valid_601666, JString, required = true,
                                 default = nil)
  if valid_601666 != nil:
    section.add "RuleSetName", valid_601666
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601667: Call_PostDeleteReceiptRuleSet_601654; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified receipt rule set and all of the receipt rules it contains.</p> <note> <p>The currently active rule set cannot be deleted.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_601667.validator(path, query, header, formData, body)
  let scheme = call_601667.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601667.url(scheme.get, call_601667.host, call_601667.base,
                         call_601667.route, valid.getOrDefault("path"))
  result = hook(call_601667, url, valid)

proc call*(call_601668: Call_PostDeleteReceiptRuleSet_601654; RuleSetName: string;
          Action: string = "DeleteReceiptRuleSet"; Version: string = "2010-12-01"): Recallable =
  ## postDeleteReceiptRuleSet
  ## <p>Deletes the specified receipt rule set and all of the receipt rules it contains.</p> <note> <p>The currently active rule set cannot be deleted.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601669 = newJObject()
  var formData_601670 = newJObject()
  add(formData_601670, "RuleSetName", newJString(RuleSetName))
  add(query_601669, "Action", newJString(Action))
  add(query_601669, "Version", newJString(Version))
  result = call_601668.call(nil, query_601669, nil, formData_601670, nil)

var postDeleteReceiptRuleSet* = Call_PostDeleteReceiptRuleSet_601654(
    name: "postDeleteReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteReceiptRuleSet",
    validator: validate_PostDeleteReceiptRuleSet_601655, base: "/",
    url: url_PostDeleteReceiptRuleSet_601656, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteReceiptRuleSet_601638 = ref object of OpenApiRestCall_600426
proc url_GetDeleteReceiptRuleSet_601640(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteReceiptRuleSet_601639(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified receipt rule set and all of the receipt rules it contains.</p> <note> <p>The currently active rule set cannot be deleted.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set to delete.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleSetName` field"
  var valid_601641 = query.getOrDefault("RuleSetName")
  valid_601641 = validateParameter(valid_601641, JString, required = true,
                                 default = nil)
  if valid_601641 != nil:
    section.add "RuleSetName", valid_601641
  var valid_601642 = query.getOrDefault("Action")
  valid_601642 = validateParameter(valid_601642, JString, required = true,
                                 default = newJString("DeleteReceiptRuleSet"))
  if valid_601642 != nil:
    section.add "Action", valid_601642
  var valid_601643 = query.getOrDefault("Version")
  valid_601643 = validateParameter(valid_601643, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601643 != nil:
    section.add "Version", valid_601643
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601644 = header.getOrDefault("X-Amz-Date")
  valid_601644 = validateParameter(valid_601644, JString, required = false,
                                 default = nil)
  if valid_601644 != nil:
    section.add "X-Amz-Date", valid_601644
  var valid_601645 = header.getOrDefault("X-Amz-Security-Token")
  valid_601645 = validateParameter(valid_601645, JString, required = false,
                                 default = nil)
  if valid_601645 != nil:
    section.add "X-Amz-Security-Token", valid_601645
  var valid_601646 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601646 = validateParameter(valid_601646, JString, required = false,
                                 default = nil)
  if valid_601646 != nil:
    section.add "X-Amz-Content-Sha256", valid_601646
  var valid_601647 = header.getOrDefault("X-Amz-Algorithm")
  valid_601647 = validateParameter(valid_601647, JString, required = false,
                                 default = nil)
  if valid_601647 != nil:
    section.add "X-Amz-Algorithm", valid_601647
  var valid_601648 = header.getOrDefault("X-Amz-Signature")
  valid_601648 = validateParameter(valid_601648, JString, required = false,
                                 default = nil)
  if valid_601648 != nil:
    section.add "X-Amz-Signature", valid_601648
  var valid_601649 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601649 = validateParameter(valid_601649, JString, required = false,
                                 default = nil)
  if valid_601649 != nil:
    section.add "X-Amz-SignedHeaders", valid_601649
  var valid_601650 = header.getOrDefault("X-Amz-Credential")
  valid_601650 = validateParameter(valid_601650, JString, required = false,
                                 default = nil)
  if valid_601650 != nil:
    section.add "X-Amz-Credential", valid_601650
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601651: Call_GetDeleteReceiptRuleSet_601638; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified receipt rule set and all of the receipt rules it contains.</p> <note> <p>The currently active rule set cannot be deleted.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_601651.validator(path, query, header, formData, body)
  let scheme = call_601651.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601651.url(scheme.get, call_601651.host, call_601651.base,
                         call_601651.route, valid.getOrDefault("path"))
  result = hook(call_601651, url, valid)

proc call*(call_601652: Call_GetDeleteReceiptRuleSet_601638; RuleSetName: string;
          Action: string = "DeleteReceiptRuleSet"; Version: string = "2010-12-01"): Recallable =
  ## getDeleteReceiptRuleSet
  ## <p>Deletes the specified receipt rule set and all of the receipt rules it contains.</p> <note> <p>The currently active rule set cannot be deleted.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601653 = newJObject()
  add(query_601653, "RuleSetName", newJString(RuleSetName))
  add(query_601653, "Action", newJString(Action))
  add(query_601653, "Version", newJString(Version))
  result = call_601652.call(nil, query_601653, nil, nil, nil)

var getDeleteReceiptRuleSet* = Call_GetDeleteReceiptRuleSet_601638(
    name: "getDeleteReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DeleteReceiptRuleSet",
    validator: validate_GetDeleteReceiptRuleSet_601639, base: "/",
    url: url_GetDeleteReceiptRuleSet_601640, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteTemplate_601687 = ref object of OpenApiRestCall_600426
proc url_PostDeleteTemplate_601689(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteTemplate_601688(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Deletes an email template.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601690 = query.getOrDefault("Action")
  valid_601690 = validateParameter(valid_601690, JString, required = true,
                                 default = newJString("DeleteTemplate"))
  if valid_601690 != nil:
    section.add "Action", valid_601690
  var valid_601691 = query.getOrDefault("Version")
  valid_601691 = validateParameter(valid_601691, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601691 != nil:
    section.add "Version", valid_601691
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601692 = header.getOrDefault("X-Amz-Date")
  valid_601692 = validateParameter(valid_601692, JString, required = false,
                                 default = nil)
  if valid_601692 != nil:
    section.add "X-Amz-Date", valid_601692
  var valid_601693 = header.getOrDefault("X-Amz-Security-Token")
  valid_601693 = validateParameter(valid_601693, JString, required = false,
                                 default = nil)
  if valid_601693 != nil:
    section.add "X-Amz-Security-Token", valid_601693
  var valid_601694 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601694 = validateParameter(valid_601694, JString, required = false,
                                 default = nil)
  if valid_601694 != nil:
    section.add "X-Amz-Content-Sha256", valid_601694
  var valid_601695 = header.getOrDefault("X-Amz-Algorithm")
  valid_601695 = validateParameter(valid_601695, JString, required = false,
                                 default = nil)
  if valid_601695 != nil:
    section.add "X-Amz-Algorithm", valid_601695
  var valid_601696 = header.getOrDefault("X-Amz-Signature")
  valid_601696 = validateParameter(valid_601696, JString, required = false,
                                 default = nil)
  if valid_601696 != nil:
    section.add "X-Amz-Signature", valid_601696
  var valid_601697 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601697 = validateParameter(valid_601697, JString, required = false,
                                 default = nil)
  if valid_601697 != nil:
    section.add "X-Amz-SignedHeaders", valid_601697
  var valid_601698 = header.getOrDefault("X-Amz-Credential")
  valid_601698 = validateParameter(valid_601698, JString, required = false,
                                 default = nil)
  if valid_601698 != nil:
    section.add "X-Amz-Credential", valid_601698
  result.add "header", section
  ## parameters in `formData` object:
  ##   TemplateName: JString (required)
  ##               : The name of the template to be deleted.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TemplateName` field"
  var valid_601699 = formData.getOrDefault("TemplateName")
  valid_601699 = validateParameter(valid_601699, JString, required = true,
                                 default = nil)
  if valid_601699 != nil:
    section.add "TemplateName", valid_601699
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601700: Call_PostDeleteTemplate_601687; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an email template.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_601700.validator(path, query, header, formData, body)
  let scheme = call_601700.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601700.url(scheme.get, call_601700.host, call_601700.base,
                         call_601700.route, valid.getOrDefault("path"))
  result = hook(call_601700, url, valid)

proc call*(call_601701: Call_PostDeleteTemplate_601687; TemplateName: string;
          Action: string = "DeleteTemplate"; Version: string = "2010-12-01"): Recallable =
  ## postDeleteTemplate
  ## <p>Deletes an email template.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the template to be deleted.
  ##   Version: string (required)
  var query_601702 = newJObject()
  var formData_601703 = newJObject()
  add(query_601702, "Action", newJString(Action))
  add(formData_601703, "TemplateName", newJString(TemplateName))
  add(query_601702, "Version", newJString(Version))
  result = call_601701.call(nil, query_601702, nil, formData_601703, nil)

var postDeleteTemplate* = Call_PostDeleteTemplate_601687(
    name: "postDeleteTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteTemplate",
    validator: validate_PostDeleteTemplate_601688, base: "/",
    url: url_PostDeleteTemplate_601689, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteTemplate_601671 = ref object of OpenApiRestCall_600426
proc url_GetDeleteTemplate_601673(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteTemplate_601672(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Deletes an email template.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the template to be deleted.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601674 = query.getOrDefault("Action")
  valid_601674 = validateParameter(valid_601674, JString, required = true,
                                 default = newJString("DeleteTemplate"))
  if valid_601674 != nil:
    section.add "Action", valid_601674
  var valid_601675 = query.getOrDefault("TemplateName")
  valid_601675 = validateParameter(valid_601675, JString, required = true,
                                 default = nil)
  if valid_601675 != nil:
    section.add "TemplateName", valid_601675
  var valid_601676 = query.getOrDefault("Version")
  valid_601676 = validateParameter(valid_601676, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601676 != nil:
    section.add "Version", valid_601676
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601677 = header.getOrDefault("X-Amz-Date")
  valid_601677 = validateParameter(valid_601677, JString, required = false,
                                 default = nil)
  if valid_601677 != nil:
    section.add "X-Amz-Date", valid_601677
  var valid_601678 = header.getOrDefault("X-Amz-Security-Token")
  valid_601678 = validateParameter(valid_601678, JString, required = false,
                                 default = nil)
  if valid_601678 != nil:
    section.add "X-Amz-Security-Token", valid_601678
  var valid_601679 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601679 = validateParameter(valid_601679, JString, required = false,
                                 default = nil)
  if valid_601679 != nil:
    section.add "X-Amz-Content-Sha256", valid_601679
  var valid_601680 = header.getOrDefault("X-Amz-Algorithm")
  valid_601680 = validateParameter(valid_601680, JString, required = false,
                                 default = nil)
  if valid_601680 != nil:
    section.add "X-Amz-Algorithm", valid_601680
  var valid_601681 = header.getOrDefault("X-Amz-Signature")
  valid_601681 = validateParameter(valid_601681, JString, required = false,
                                 default = nil)
  if valid_601681 != nil:
    section.add "X-Amz-Signature", valid_601681
  var valid_601682 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601682 = validateParameter(valid_601682, JString, required = false,
                                 default = nil)
  if valid_601682 != nil:
    section.add "X-Amz-SignedHeaders", valid_601682
  var valid_601683 = header.getOrDefault("X-Amz-Credential")
  valid_601683 = validateParameter(valid_601683, JString, required = false,
                                 default = nil)
  if valid_601683 != nil:
    section.add "X-Amz-Credential", valid_601683
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601684: Call_GetDeleteTemplate_601671; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an email template.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_601684.validator(path, query, header, formData, body)
  let scheme = call_601684.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601684.url(scheme.get, call_601684.host, call_601684.base,
                         call_601684.route, valid.getOrDefault("path"))
  result = hook(call_601684, url, valid)

proc call*(call_601685: Call_GetDeleteTemplate_601671; TemplateName: string;
          Action: string = "DeleteTemplate"; Version: string = "2010-12-01"): Recallable =
  ## getDeleteTemplate
  ## <p>Deletes an email template.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the template to be deleted.
  ##   Version: string (required)
  var query_601686 = newJObject()
  add(query_601686, "Action", newJString(Action))
  add(query_601686, "TemplateName", newJString(TemplateName))
  add(query_601686, "Version", newJString(Version))
  result = call_601685.call(nil, query_601686, nil, nil, nil)

var getDeleteTemplate* = Call_GetDeleteTemplate_601671(name: "getDeleteTemplate",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=DeleteTemplate", validator: validate_GetDeleteTemplate_601672,
    base: "/", url: url_GetDeleteTemplate_601673,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteVerifiedEmailAddress_601720 = ref object of OpenApiRestCall_600426
proc url_PostDeleteVerifiedEmailAddress_601722(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteVerifiedEmailAddress_601721(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deprecated. Use the <code>DeleteIdentity</code> operation to delete email addresses and domains.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601723 = query.getOrDefault("Action")
  valid_601723 = validateParameter(valid_601723, JString, required = true, default = newJString(
      "DeleteVerifiedEmailAddress"))
  if valid_601723 != nil:
    section.add "Action", valid_601723
  var valid_601724 = query.getOrDefault("Version")
  valid_601724 = validateParameter(valid_601724, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601724 != nil:
    section.add "Version", valid_601724
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601725 = header.getOrDefault("X-Amz-Date")
  valid_601725 = validateParameter(valid_601725, JString, required = false,
                                 default = nil)
  if valid_601725 != nil:
    section.add "X-Amz-Date", valid_601725
  var valid_601726 = header.getOrDefault("X-Amz-Security-Token")
  valid_601726 = validateParameter(valid_601726, JString, required = false,
                                 default = nil)
  if valid_601726 != nil:
    section.add "X-Amz-Security-Token", valid_601726
  var valid_601727 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601727 = validateParameter(valid_601727, JString, required = false,
                                 default = nil)
  if valid_601727 != nil:
    section.add "X-Amz-Content-Sha256", valid_601727
  var valid_601728 = header.getOrDefault("X-Amz-Algorithm")
  valid_601728 = validateParameter(valid_601728, JString, required = false,
                                 default = nil)
  if valid_601728 != nil:
    section.add "X-Amz-Algorithm", valid_601728
  var valid_601729 = header.getOrDefault("X-Amz-Signature")
  valid_601729 = validateParameter(valid_601729, JString, required = false,
                                 default = nil)
  if valid_601729 != nil:
    section.add "X-Amz-Signature", valid_601729
  var valid_601730 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601730 = validateParameter(valid_601730, JString, required = false,
                                 default = nil)
  if valid_601730 != nil:
    section.add "X-Amz-SignedHeaders", valid_601730
  var valid_601731 = header.getOrDefault("X-Amz-Credential")
  valid_601731 = validateParameter(valid_601731, JString, required = false,
                                 default = nil)
  if valid_601731 != nil:
    section.add "X-Amz-Credential", valid_601731
  result.add "header", section
  ## parameters in `formData` object:
  ##   EmailAddress: JString (required)
  ##               : An email address to be removed from the list of verified addresses.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `EmailAddress` field"
  var valid_601732 = formData.getOrDefault("EmailAddress")
  valid_601732 = validateParameter(valid_601732, JString, required = true,
                                 default = nil)
  if valid_601732 != nil:
    section.add "EmailAddress", valid_601732
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601733: Call_PostDeleteVerifiedEmailAddress_601720; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deprecated. Use the <code>DeleteIdentity</code> operation to delete email addresses and domains.
  ## 
  let valid = call_601733.validator(path, query, header, formData, body)
  let scheme = call_601733.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601733.url(scheme.get, call_601733.host, call_601733.base,
                         call_601733.route, valid.getOrDefault("path"))
  result = hook(call_601733, url, valid)

proc call*(call_601734: Call_PostDeleteVerifiedEmailAddress_601720;
          EmailAddress: string; Action: string = "DeleteVerifiedEmailAddress";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteVerifiedEmailAddress
  ## Deprecated. Use the <code>DeleteIdentity</code> operation to delete email addresses and domains.
  ##   EmailAddress: string (required)
  ##               : An email address to be removed from the list of verified addresses.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601735 = newJObject()
  var formData_601736 = newJObject()
  add(formData_601736, "EmailAddress", newJString(EmailAddress))
  add(query_601735, "Action", newJString(Action))
  add(query_601735, "Version", newJString(Version))
  result = call_601734.call(nil, query_601735, nil, formData_601736, nil)

var postDeleteVerifiedEmailAddress* = Call_PostDeleteVerifiedEmailAddress_601720(
    name: "postDeleteVerifiedEmailAddress", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteVerifiedEmailAddress",
    validator: validate_PostDeleteVerifiedEmailAddress_601721, base: "/",
    url: url_PostDeleteVerifiedEmailAddress_601722,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteVerifiedEmailAddress_601704 = ref object of OpenApiRestCall_600426
proc url_GetDeleteVerifiedEmailAddress_601706(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteVerifiedEmailAddress_601705(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deprecated. Use the <code>DeleteIdentity</code> operation to delete email addresses and domains.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   EmailAddress: JString (required)
  ##               : An email address to be removed from the list of verified addresses.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601707 = query.getOrDefault("Action")
  valid_601707 = validateParameter(valid_601707, JString, required = true, default = newJString(
      "DeleteVerifiedEmailAddress"))
  if valid_601707 != nil:
    section.add "Action", valid_601707
  var valid_601708 = query.getOrDefault("EmailAddress")
  valid_601708 = validateParameter(valid_601708, JString, required = true,
                                 default = nil)
  if valid_601708 != nil:
    section.add "EmailAddress", valid_601708
  var valid_601709 = query.getOrDefault("Version")
  valid_601709 = validateParameter(valid_601709, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601709 != nil:
    section.add "Version", valid_601709
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601710 = header.getOrDefault("X-Amz-Date")
  valid_601710 = validateParameter(valid_601710, JString, required = false,
                                 default = nil)
  if valid_601710 != nil:
    section.add "X-Amz-Date", valid_601710
  var valid_601711 = header.getOrDefault("X-Amz-Security-Token")
  valid_601711 = validateParameter(valid_601711, JString, required = false,
                                 default = nil)
  if valid_601711 != nil:
    section.add "X-Amz-Security-Token", valid_601711
  var valid_601712 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601712 = validateParameter(valid_601712, JString, required = false,
                                 default = nil)
  if valid_601712 != nil:
    section.add "X-Amz-Content-Sha256", valid_601712
  var valid_601713 = header.getOrDefault("X-Amz-Algorithm")
  valid_601713 = validateParameter(valid_601713, JString, required = false,
                                 default = nil)
  if valid_601713 != nil:
    section.add "X-Amz-Algorithm", valid_601713
  var valid_601714 = header.getOrDefault("X-Amz-Signature")
  valid_601714 = validateParameter(valid_601714, JString, required = false,
                                 default = nil)
  if valid_601714 != nil:
    section.add "X-Amz-Signature", valid_601714
  var valid_601715 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601715 = validateParameter(valid_601715, JString, required = false,
                                 default = nil)
  if valid_601715 != nil:
    section.add "X-Amz-SignedHeaders", valid_601715
  var valid_601716 = header.getOrDefault("X-Amz-Credential")
  valid_601716 = validateParameter(valid_601716, JString, required = false,
                                 default = nil)
  if valid_601716 != nil:
    section.add "X-Amz-Credential", valid_601716
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601717: Call_GetDeleteVerifiedEmailAddress_601704; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deprecated. Use the <code>DeleteIdentity</code> operation to delete email addresses and domains.
  ## 
  let valid = call_601717.validator(path, query, header, formData, body)
  let scheme = call_601717.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601717.url(scheme.get, call_601717.host, call_601717.base,
                         call_601717.route, valid.getOrDefault("path"))
  result = hook(call_601717, url, valid)

proc call*(call_601718: Call_GetDeleteVerifiedEmailAddress_601704;
          EmailAddress: string; Action: string = "DeleteVerifiedEmailAddress";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteVerifiedEmailAddress
  ## Deprecated. Use the <code>DeleteIdentity</code> operation to delete email addresses and domains.
  ##   Action: string (required)
  ##   EmailAddress: string (required)
  ##               : An email address to be removed from the list of verified addresses.
  ##   Version: string (required)
  var query_601719 = newJObject()
  add(query_601719, "Action", newJString(Action))
  add(query_601719, "EmailAddress", newJString(EmailAddress))
  add(query_601719, "Version", newJString(Version))
  result = call_601718.call(nil, query_601719, nil, nil, nil)

var getDeleteVerifiedEmailAddress* = Call_GetDeleteVerifiedEmailAddress_601704(
    name: "getDeleteVerifiedEmailAddress", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DeleteVerifiedEmailAddress",
    validator: validate_GetDeleteVerifiedEmailAddress_601705, base: "/",
    url: url_GetDeleteVerifiedEmailAddress_601706,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeActiveReceiptRuleSet_601752 = ref object of OpenApiRestCall_600426
proc url_PostDescribeActiveReceiptRuleSet_601754(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeActiveReceiptRuleSet_601753(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the metadata and receipt rules for the receipt rule set that is currently active.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601755 = query.getOrDefault("Action")
  valid_601755 = validateParameter(valid_601755, JString, required = true, default = newJString(
      "DescribeActiveReceiptRuleSet"))
  if valid_601755 != nil:
    section.add "Action", valid_601755
  var valid_601756 = query.getOrDefault("Version")
  valid_601756 = validateParameter(valid_601756, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601756 != nil:
    section.add "Version", valid_601756
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601757 = header.getOrDefault("X-Amz-Date")
  valid_601757 = validateParameter(valid_601757, JString, required = false,
                                 default = nil)
  if valid_601757 != nil:
    section.add "X-Amz-Date", valid_601757
  var valid_601758 = header.getOrDefault("X-Amz-Security-Token")
  valid_601758 = validateParameter(valid_601758, JString, required = false,
                                 default = nil)
  if valid_601758 != nil:
    section.add "X-Amz-Security-Token", valid_601758
  var valid_601759 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601759 = validateParameter(valid_601759, JString, required = false,
                                 default = nil)
  if valid_601759 != nil:
    section.add "X-Amz-Content-Sha256", valid_601759
  var valid_601760 = header.getOrDefault("X-Amz-Algorithm")
  valid_601760 = validateParameter(valid_601760, JString, required = false,
                                 default = nil)
  if valid_601760 != nil:
    section.add "X-Amz-Algorithm", valid_601760
  var valid_601761 = header.getOrDefault("X-Amz-Signature")
  valid_601761 = validateParameter(valid_601761, JString, required = false,
                                 default = nil)
  if valid_601761 != nil:
    section.add "X-Amz-Signature", valid_601761
  var valid_601762 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601762 = validateParameter(valid_601762, JString, required = false,
                                 default = nil)
  if valid_601762 != nil:
    section.add "X-Amz-SignedHeaders", valid_601762
  var valid_601763 = header.getOrDefault("X-Amz-Credential")
  valid_601763 = validateParameter(valid_601763, JString, required = false,
                                 default = nil)
  if valid_601763 != nil:
    section.add "X-Amz-Credential", valid_601763
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601764: Call_PostDescribeActiveReceiptRuleSet_601752;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the metadata and receipt rules for the receipt rule set that is currently active.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_601764.validator(path, query, header, formData, body)
  let scheme = call_601764.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601764.url(scheme.get, call_601764.host, call_601764.base,
                         call_601764.route, valid.getOrDefault("path"))
  result = hook(call_601764, url, valid)

proc call*(call_601765: Call_PostDescribeActiveReceiptRuleSet_601752;
          Action: string = "DescribeActiveReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## postDescribeActiveReceiptRuleSet
  ## <p>Returns the metadata and receipt rules for the receipt rule set that is currently active.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601766 = newJObject()
  add(query_601766, "Action", newJString(Action))
  add(query_601766, "Version", newJString(Version))
  result = call_601765.call(nil, query_601766, nil, nil, nil)

var postDescribeActiveReceiptRuleSet* = Call_PostDescribeActiveReceiptRuleSet_601752(
    name: "postDescribeActiveReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DescribeActiveReceiptRuleSet",
    validator: validate_PostDescribeActiveReceiptRuleSet_601753, base: "/",
    url: url_PostDescribeActiveReceiptRuleSet_601754,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeActiveReceiptRuleSet_601737 = ref object of OpenApiRestCall_600426
proc url_GetDescribeActiveReceiptRuleSet_601739(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeActiveReceiptRuleSet_601738(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the metadata and receipt rules for the receipt rule set that is currently active.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601740 = query.getOrDefault("Action")
  valid_601740 = validateParameter(valid_601740, JString, required = true, default = newJString(
      "DescribeActiveReceiptRuleSet"))
  if valid_601740 != nil:
    section.add "Action", valid_601740
  var valid_601741 = query.getOrDefault("Version")
  valid_601741 = validateParameter(valid_601741, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601741 != nil:
    section.add "Version", valid_601741
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601742 = header.getOrDefault("X-Amz-Date")
  valid_601742 = validateParameter(valid_601742, JString, required = false,
                                 default = nil)
  if valid_601742 != nil:
    section.add "X-Amz-Date", valid_601742
  var valid_601743 = header.getOrDefault("X-Amz-Security-Token")
  valid_601743 = validateParameter(valid_601743, JString, required = false,
                                 default = nil)
  if valid_601743 != nil:
    section.add "X-Amz-Security-Token", valid_601743
  var valid_601744 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601744 = validateParameter(valid_601744, JString, required = false,
                                 default = nil)
  if valid_601744 != nil:
    section.add "X-Amz-Content-Sha256", valid_601744
  var valid_601745 = header.getOrDefault("X-Amz-Algorithm")
  valid_601745 = validateParameter(valid_601745, JString, required = false,
                                 default = nil)
  if valid_601745 != nil:
    section.add "X-Amz-Algorithm", valid_601745
  var valid_601746 = header.getOrDefault("X-Amz-Signature")
  valid_601746 = validateParameter(valid_601746, JString, required = false,
                                 default = nil)
  if valid_601746 != nil:
    section.add "X-Amz-Signature", valid_601746
  var valid_601747 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601747 = validateParameter(valid_601747, JString, required = false,
                                 default = nil)
  if valid_601747 != nil:
    section.add "X-Amz-SignedHeaders", valid_601747
  var valid_601748 = header.getOrDefault("X-Amz-Credential")
  valid_601748 = validateParameter(valid_601748, JString, required = false,
                                 default = nil)
  if valid_601748 != nil:
    section.add "X-Amz-Credential", valid_601748
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601749: Call_GetDescribeActiveReceiptRuleSet_601737;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the metadata and receipt rules for the receipt rule set that is currently active.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_601749.validator(path, query, header, formData, body)
  let scheme = call_601749.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601749.url(scheme.get, call_601749.host, call_601749.base,
                         call_601749.route, valid.getOrDefault("path"))
  result = hook(call_601749, url, valid)

proc call*(call_601750: Call_GetDescribeActiveReceiptRuleSet_601737;
          Action: string = "DescribeActiveReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## getDescribeActiveReceiptRuleSet
  ## <p>Returns the metadata and receipt rules for the receipt rule set that is currently active.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601751 = newJObject()
  add(query_601751, "Action", newJString(Action))
  add(query_601751, "Version", newJString(Version))
  result = call_601750.call(nil, query_601751, nil, nil, nil)

var getDescribeActiveReceiptRuleSet* = Call_GetDescribeActiveReceiptRuleSet_601737(
    name: "getDescribeActiveReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DescribeActiveReceiptRuleSet",
    validator: validate_GetDescribeActiveReceiptRuleSet_601738, base: "/",
    url: url_GetDescribeActiveReceiptRuleSet_601739,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeConfigurationSet_601784 = ref object of OpenApiRestCall_600426
proc url_PostDescribeConfigurationSet_601786(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeConfigurationSet_601785(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the details of the specified configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601787 = query.getOrDefault("Action")
  valid_601787 = validateParameter(valid_601787, JString, required = true, default = newJString(
      "DescribeConfigurationSet"))
  if valid_601787 != nil:
    section.add "Action", valid_601787
  var valid_601788 = query.getOrDefault("Version")
  valid_601788 = validateParameter(valid_601788, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601788 != nil:
    section.add "Version", valid_601788
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601789 = header.getOrDefault("X-Amz-Date")
  valid_601789 = validateParameter(valid_601789, JString, required = false,
                                 default = nil)
  if valid_601789 != nil:
    section.add "X-Amz-Date", valid_601789
  var valid_601790 = header.getOrDefault("X-Amz-Security-Token")
  valid_601790 = validateParameter(valid_601790, JString, required = false,
                                 default = nil)
  if valid_601790 != nil:
    section.add "X-Amz-Security-Token", valid_601790
  var valid_601791 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601791 = validateParameter(valid_601791, JString, required = false,
                                 default = nil)
  if valid_601791 != nil:
    section.add "X-Amz-Content-Sha256", valid_601791
  var valid_601792 = header.getOrDefault("X-Amz-Algorithm")
  valid_601792 = validateParameter(valid_601792, JString, required = false,
                                 default = nil)
  if valid_601792 != nil:
    section.add "X-Amz-Algorithm", valid_601792
  var valid_601793 = header.getOrDefault("X-Amz-Signature")
  valid_601793 = validateParameter(valid_601793, JString, required = false,
                                 default = nil)
  if valid_601793 != nil:
    section.add "X-Amz-Signature", valid_601793
  var valid_601794 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601794 = validateParameter(valid_601794, JString, required = false,
                                 default = nil)
  if valid_601794 != nil:
    section.add "X-Amz-SignedHeaders", valid_601794
  var valid_601795 = header.getOrDefault("X-Amz-Credential")
  valid_601795 = validateParameter(valid_601795, JString, required = false,
                                 default = nil)
  if valid_601795 != nil:
    section.add "X-Amz-Credential", valid_601795
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetAttributeNames: JArray
  ##                                 : A list of configuration set attributes to return.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set to describe.
  section = newJObject()
  var valid_601796 = formData.getOrDefault("ConfigurationSetAttributeNames")
  valid_601796 = validateParameter(valid_601796, JArray, required = false,
                                 default = nil)
  if valid_601796 != nil:
    section.add "ConfigurationSetAttributeNames", valid_601796
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_601797 = formData.getOrDefault("ConfigurationSetName")
  valid_601797 = validateParameter(valid_601797, JString, required = true,
                                 default = nil)
  if valid_601797 != nil:
    section.add "ConfigurationSetName", valid_601797
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601798: Call_PostDescribeConfigurationSet_601784; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the details of the specified configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_601798.validator(path, query, header, formData, body)
  let scheme = call_601798.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601798.url(scheme.get, call_601798.host, call_601798.base,
                         call_601798.route, valid.getOrDefault("path"))
  result = hook(call_601798, url, valid)

proc call*(call_601799: Call_PostDescribeConfigurationSet_601784;
          ConfigurationSetName: string;
          ConfigurationSetAttributeNames: JsonNode = nil;
          Action: string = "DescribeConfigurationSet";
          Version: string = "2010-12-01"): Recallable =
  ## postDescribeConfigurationSet
  ## <p>Returns the details of the specified configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetAttributeNames: JArray
  ##                                 : A list of configuration set attributes to return.
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set to describe.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601800 = newJObject()
  var formData_601801 = newJObject()
  if ConfigurationSetAttributeNames != nil:
    formData_601801.add "ConfigurationSetAttributeNames",
                       ConfigurationSetAttributeNames
  add(formData_601801, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_601800, "Action", newJString(Action))
  add(query_601800, "Version", newJString(Version))
  result = call_601799.call(nil, query_601800, nil, formData_601801, nil)

var postDescribeConfigurationSet* = Call_PostDescribeConfigurationSet_601784(
    name: "postDescribeConfigurationSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DescribeConfigurationSet",
    validator: validate_PostDescribeConfigurationSet_601785, base: "/",
    url: url_PostDescribeConfigurationSet_601786,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeConfigurationSet_601767 = ref object of OpenApiRestCall_600426
proc url_GetDescribeConfigurationSet_601769(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeConfigurationSet_601768(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the details of the specified configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ConfigurationSetAttributeNames: JArray
  ##                                 : A list of configuration set attributes to return.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set to describe.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601770 = query.getOrDefault("Action")
  valid_601770 = validateParameter(valid_601770, JString, required = true, default = newJString(
      "DescribeConfigurationSet"))
  if valid_601770 != nil:
    section.add "Action", valid_601770
  var valid_601771 = query.getOrDefault("ConfigurationSetAttributeNames")
  valid_601771 = validateParameter(valid_601771, JArray, required = false,
                                 default = nil)
  if valid_601771 != nil:
    section.add "ConfigurationSetAttributeNames", valid_601771
  var valid_601772 = query.getOrDefault("ConfigurationSetName")
  valid_601772 = validateParameter(valid_601772, JString, required = true,
                                 default = nil)
  if valid_601772 != nil:
    section.add "ConfigurationSetName", valid_601772
  var valid_601773 = query.getOrDefault("Version")
  valid_601773 = validateParameter(valid_601773, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601773 != nil:
    section.add "Version", valid_601773
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601774 = header.getOrDefault("X-Amz-Date")
  valid_601774 = validateParameter(valid_601774, JString, required = false,
                                 default = nil)
  if valid_601774 != nil:
    section.add "X-Amz-Date", valid_601774
  var valid_601775 = header.getOrDefault("X-Amz-Security-Token")
  valid_601775 = validateParameter(valid_601775, JString, required = false,
                                 default = nil)
  if valid_601775 != nil:
    section.add "X-Amz-Security-Token", valid_601775
  var valid_601776 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601776 = validateParameter(valid_601776, JString, required = false,
                                 default = nil)
  if valid_601776 != nil:
    section.add "X-Amz-Content-Sha256", valid_601776
  var valid_601777 = header.getOrDefault("X-Amz-Algorithm")
  valid_601777 = validateParameter(valid_601777, JString, required = false,
                                 default = nil)
  if valid_601777 != nil:
    section.add "X-Amz-Algorithm", valid_601777
  var valid_601778 = header.getOrDefault("X-Amz-Signature")
  valid_601778 = validateParameter(valid_601778, JString, required = false,
                                 default = nil)
  if valid_601778 != nil:
    section.add "X-Amz-Signature", valid_601778
  var valid_601779 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601779 = validateParameter(valid_601779, JString, required = false,
                                 default = nil)
  if valid_601779 != nil:
    section.add "X-Amz-SignedHeaders", valid_601779
  var valid_601780 = header.getOrDefault("X-Amz-Credential")
  valid_601780 = validateParameter(valid_601780, JString, required = false,
                                 default = nil)
  if valid_601780 != nil:
    section.add "X-Amz-Credential", valid_601780
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601781: Call_GetDescribeConfigurationSet_601767; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the details of the specified configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_601781.validator(path, query, header, formData, body)
  let scheme = call_601781.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601781.url(scheme.get, call_601781.host, call_601781.base,
                         call_601781.route, valid.getOrDefault("path"))
  result = hook(call_601781, url, valid)

proc call*(call_601782: Call_GetDescribeConfigurationSet_601767;
          ConfigurationSetName: string;
          Action: string = "DescribeConfigurationSet";
          ConfigurationSetAttributeNames: JsonNode = nil;
          Version: string = "2010-12-01"): Recallable =
  ## getDescribeConfigurationSet
  ## <p>Returns the details of the specified configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   ConfigurationSetAttributeNames: JArray
  ##                                 : A list of configuration set attributes to return.
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set to describe.
  ##   Version: string (required)
  var query_601783 = newJObject()
  add(query_601783, "Action", newJString(Action))
  if ConfigurationSetAttributeNames != nil:
    query_601783.add "ConfigurationSetAttributeNames",
                    ConfigurationSetAttributeNames
  add(query_601783, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_601783, "Version", newJString(Version))
  result = call_601782.call(nil, query_601783, nil, nil, nil)

var getDescribeConfigurationSet* = Call_GetDescribeConfigurationSet_601767(
    name: "getDescribeConfigurationSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DescribeConfigurationSet",
    validator: validate_GetDescribeConfigurationSet_601768, base: "/",
    url: url_GetDescribeConfigurationSet_601769,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReceiptRule_601819 = ref object of OpenApiRestCall_600426
proc url_PostDescribeReceiptRule_601821(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeReceiptRule_601820(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the details of the specified receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601822 = query.getOrDefault("Action")
  valid_601822 = validateParameter(valid_601822, JString, required = true,
                                 default = newJString("DescribeReceiptRule"))
  if valid_601822 != nil:
    section.add "Action", valid_601822
  var valid_601823 = query.getOrDefault("Version")
  valid_601823 = validateParameter(valid_601823, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601823 != nil:
    section.add "Version", valid_601823
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601824 = header.getOrDefault("X-Amz-Date")
  valid_601824 = validateParameter(valid_601824, JString, required = false,
                                 default = nil)
  if valid_601824 != nil:
    section.add "X-Amz-Date", valid_601824
  var valid_601825 = header.getOrDefault("X-Amz-Security-Token")
  valid_601825 = validateParameter(valid_601825, JString, required = false,
                                 default = nil)
  if valid_601825 != nil:
    section.add "X-Amz-Security-Token", valid_601825
  var valid_601826 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601826 = validateParameter(valid_601826, JString, required = false,
                                 default = nil)
  if valid_601826 != nil:
    section.add "X-Amz-Content-Sha256", valid_601826
  var valid_601827 = header.getOrDefault("X-Amz-Algorithm")
  valid_601827 = validateParameter(valid_601827, JString, required = false,
                                 default = nil)
  if valid_601827 != nil:
    section.add "X-Amz-Algorithm", valid_601827
  var valid_601828 = header.getOrDefault("X-Amz-Signature")
  valid_601828 = validateParameter(valid_601828, JString, required = false,
                                 default = nil)
  if valid_601828 != nil:
    section.add "X-Amz-Signature", valid_601828
  var valid_601829 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601829 = validateParameter(valid_601829, JString, required = false,
                                 default = nil)
  if valid_601829 != nil:
    section.add "X-Amz-SignedHeaders", valid_601829
  var valid_601830 = header.getOrDefault("X-Amz-Credential")
  valid_601830 = validateParameter(valid_601830, JString, required = false,
                                 default = nil)
  if valid_601830 != nil:
    section.add "X-Amz-Credential", valid_601830
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleName: JString (required)
  ##           : The name of the receipt rule.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleName` field"
  var valid_601831 = formData.getOrDefault("RuleName")
  valid_601831 = validateParameter(valid_601831, JString, required = true,
                                 default = nil)
  if valid_601831 != nil:
    section.add "RuleName", valid_601831
  var valid_601832 = formData.getOrDefault("RuleSetName")
  valid_601832 = validateParameter(valid_601832, JString, required = true,
                                 default = nil)
  if valid_601832 != nil:
    section.add "RuleSetName", valid_601832
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601833: Call_PostDescribeReceiptRule_601819; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the details of the specified receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_601833.validator(path, query, header, formData, body)
  let scheme = call_601833.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601833.url(scheme.get, call_601833.host, call_601833.base,
                         call_601833.route, valid.getOrDefault("path"))
  result = hook(call_601833, url, valid)

proc call*(call_601834: Call_PostDescribeReceiptRule_601819; RuleName: string;
          RuleSetName: string; Action: string = "DescribeReceiptRule";
          Version: string = "2010-12-01"): Recallable =
  ## postDescribeReceiptRule
  ## <p>Returns the details of the specified receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleName: string (required)
  ##           : The name of the receipt rule.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601835 = newJObject()
  var formData_601836 = newJObject()
  add(formData_601836, "RuleName", newJString(RuleName))
  add(formData_601836, "RuleSetName", newJString(RuleSetName))
  add(query_601835, "Action", newJString(Action))
  add(query_601835, "Version", newJString(Version))
  result = call_601834.call(nil, query_601835, nil, formData_601836, nil)

var postDescribeReceiptRule* = Call_PostDescribeReceiptRule_601819(
    name: "postDescribeReceiptRule", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DescribeReceiptRule",
    validator: validate_PostDescribeReceiptRule_601820, base: "/",
    url: url_PostDescribeReceiptRule_601821, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReceiptRule_601802 = ref object of OpenApiRestCall_600426
proc url_GetDescribeReceiptRule_601804(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeReceiptRule_601803(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the details of the specified receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleName: JString (required)
  ##           : The name of the receipt rule.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleName` field"
  var valid_601805 = query.getOrDefault("RuleName")
  valid_601805 = validateParameter(valid_601805, JString, required = true,
                                 default = nil)
  if valid_601805 != nil:
    section.add "RuleName", valid_601805
  var valid_601806 = query.getOrDefault("RuleSetName")
  valid_601806 = validateParameter(valid_601806, JString, required = true,
                                 default = nil)
  if valid_601806 != nil:
    section.add "RuleSetName", valid_601806
  var valid_601807 = query.getOrDefault("Action")
  valid_601807 = validateParameter(valid_601807, JString, required = true,
                                 default = newJString("DescribeReceiptRule"))
  if valid_601807 != nil:
    section.add "Action", valid_601807
  var valid_601808 = query.getOrDefault("Version")
  valid_601808 = validateParameter(valid_601808, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601808 != nil:
    section.add "Version", valid_601808
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601809 = header.getOrDefault("X-Amz-Date")
  valid_601809 = validateParameter(valid_601809, JString, required = false,
                                 default = nil)
  if valid_601809 != nil:
    section.add "X-Amz-Date", valid_601809
  var valid_601810 = header.getOrDefault("X-Amz-Security-Token")
  valid_601810 = validateParameter(valid_601810, JString, required = false,
                                 default = nil)
  if valid_601810 != nil:
    section.add "X-Amz-Security-Token", valid_601810
  var valid_601811 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601811 = validateParameter(valid_601811, JString, required = false,
                                 default = nil)
  if valid_601811 != nil:
    section.add "X-Amz-Content-Sha256", valid_601811
  var valid_601812 = header.getOrDefault("X-Amz-Algorithm")
  valid_601812 = validateParameter(valid_601812, JString, required = false,
                                 default = nil)
  if valid_601812 != nil:
    section.add "X-Amz-Algorithm", valid_601812
  var valid_601813 = header.getOrDefault("X-Amz-Signature")
  valid_601813 = validateParameter(valid_601813, JString, required = false,
                                 default = nil)
  if valid_601813 != nil:
    section.add "X-Amz-Signature", valid_601813
  var valid_601814 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601814 = validateParameter(valid_601814, JString, required = false,
                                 default = nil)
  if valid_601814 != nil:
    section.add "X-Amz-SignedHeaders", valid_601814
  var valid_601815 = header.getOrDefault("X-Amz-Credential")
  valid_601815 = validateParameter(valid_601815, JString, required = false,
                                 default = nil)
  if valid_601815 != nil:
    section.add "X-Amz-Credential", valid_601815
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601816: Call_GetDescribeReceiptRule_601802; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the details of the specified receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_601816.validator(path, query, header, formData, body)
  let scheme = call_601816.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601816.url(scheme.get, call_601816.host, call_601816.base,
                         call_601816.route, valid.getOrDefault("path"))
  result = hook(call_601816, url, valid)

proc call*(call_601817: Call_GetDescribeReceiptRule_601802; RuleName: string;
          RuleSetName: string; Action: string = "DescribeReceiptRule";
          Version: string = "2010-12-01"): Recallable =
  ## getDescribeReceiptRule
  ## <p>Returns the details of the specified receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleName: string (required)
  ##           : The name of the receipt rule.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601818 = newJObject()
  add(query_601818, "RuleName", newJString(RuleName))
  add(query_601818, "RuleSetName", newJString(RuleSetName))
  add(query_601818, "Action", newJString(Action))
  add(query_601818, "Version", newJString(Version))
  result = call_601817.call(nil, query_601818, nil, nil, nil)

var getDescribeReceiptRule* = Call_GetDescribeReceiptRule_601802(
    name: "getDescribeReceiptRule", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DescribeReceiptRule",
    validator: validate_GetDescribeReceiptRule_601803, base: "/",
    url: url_GetDescribeReceiptRule_601804, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReceiptRuleSet_601853 = ref object of OpenApiRestCall_600426
proc url_PostDescribeReceiptRuleSet_601855(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeReceiptRuleSet_601854(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the details of the specified receipt rule set.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601856 = query.getOrDefault("Action")
  valid_601856 = validateParameter(valid_601856, JString, required = true,
                                 default = newJString("DescribeReceiptRuleSet"))
  if valid_601856 != nil:
    section.add "Action", valid_601856
  var valid_601857 = query.getOrDefault("Version")
  valid_601857 = validateParameter(valid_601857, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601857 != nil:
    section.add "Version", valid_601857
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601858 = header.getOrDefault("X-Amz-Date")
  valid_601858 = validateParameter(valid_601858, JString, required = false,
                                 default = nil)
  if valid_601858 != nil:
    section.add "X-Amz-Date", valid_601858
  var valid_601859 = header.getOrDefault("X-Amz-Security-Token")
  valid_601859 = validateParameter(valid_601859, JString, required = false,
                                 default = nil)
  if valid_601859 != nil:
    section.add "X-Amz-Security-Token", valid_601859
  var valid_601860 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601860 = validateParameter(valid_601860, JString, required = false,
                                 default = nil)
  if valid_601860 != nil:
    section.add "X-Amz-Content-Sha256", valid_601860
  var valid_601861 = header.getOrDefault("X-Amz-Algorithm")
  valid_601861 = validateParameter(valid_601861, JString, required = false,
                                 default = nil)
  if valid_601861 != nil:
    section.add "X-Amz-Algorithm", valid_601861
  var valid_601862 = header.getOrDefault("X-Amz-Signature")
  valid_601862 = validateParameter(valid_601862, JString, required = false,
                                 default = nil)
  if valid_601862 != nil:
    section.add "X-Amz-Signature", valid_601862
  var valid_601863 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601863 = validateParameter(valid_601863, JString, required = false,
                                 default = nil)
  if valid_601863 != nil:
    section.add "X-Amz-SignedHeaders", valid_601863
  var valid_601864 = header.getOrDefault("X-Amz-Credential")
  valid_601864 = validateParameter(valid_601864, JString, required = false,
                                 default = nil)
  if valid_601864 != nil:
    section.add "X-Amz-Credential", valid_601864
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set to describe.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleSetName` field"
  var valid_601865 = formData.getOrDefault("RuleSetName")
  valid_601865 = validateParameter(valid_601865, JString, required = true,
                                 default = nil)
  if valid_601865 != nil:
    section.add "RuleSetName", valid_601865
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601866: Call_PostDescribeReceiptRuleSet_601853; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the details of the specified receipt rule set.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_601866.validator(path, query, header, formData, body)
  let scheme = call_601866.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601866.url(scheme.get, call_601866.host, call_601866.base,
                         call_601866.route, valid.getOrDefault("path"))
  result = hook(call_601866, url, valid)

proc call*(call_601867: Call_PostDescribeReceiptRuleSet_601853;
          RuleSetName: string; Action: string = "DescribeReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## postDescribeReceiptRuleSet
  ## <p>Returns the details of the specified receipt rule set.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set to describe.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601868 = newJObject()
  var formData_601869 = newJObject()
  add(formData_601869, "RuleSetName", newJString(RuleSetName))
  add(query_601868, "Action", newJString(Action))
  add(query_601868, "Version", newJString(Version))
  result = call_601867.call(nil, query_601868, nil, formData_601869, nil)

var postDescribeReceiptRuleSet* = Call_PostDescribeReceiptRuleSet_601853(
    name: "postDescribeReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DescribeReceiptRuleSet",
    validator: validate_PostDescribeReceiptRuleSet_601854, base: "/",
    url: url_PostDescribeReceiptRuleSet_601855,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReceiptRuleSet_601837 = ref object of OpenApiRestCall_600426
proc url_GetDescribeReceiptRuleSet_601839(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeReceiptRuleSet_601838(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the details of the specified receipt rule set.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set to describe.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleSetName` field"
  var valid_601840 = query.getOrDefault("RuleSetName")
  valid_601840 = validateParameter(valid_601840, JString, required = true,
                                 default = nil)
  if valid_601840 != nil:
    section.add "RuleSetName", valid_601840
  var valid_601841 = query.getOrDefault("Action")
  valid_601841 = validateParameter(valid_601841, JString, required = true,
                                 default = newJString("DescribeReceiptRuleSet"))
  if valid_601841 != nil:
    section.add "Action", valid_601841
  var valid_601842 = query.getOrDefault("Version")
  valid_601842 = validateParameter(valid_601842, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601842 != nil:
    section.add "Version", valid_601842
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601843 = header.getOrDefault("X-Amz-Date")
  valid_601843 = validateParameter(valid_601843, JString, required = false,
                                 default = nil)
  if valid_601843 != nil:
    section.add "X-Amz-Date", valid_601843
  var valid_601844 = header.getOrDefault("X-Amz-Security-Token")
  valid_601844 = validateParameter(valid_601844, JString, required = false,
                                 default = nil)
  if valid_601844 != nil:
    section.add "X-Amz-Security-Token", valid_601844
  var valid_601845 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601845 = validateParameter(valid_601845, JString, required = false,
                                 default = nil)
  if valid_601845 != nil:
    section.add "X-Amz-Content-Sha256", valid_601845
  var valid_601846 = header.getOrDefault("X-Amz-Algorithm")
  valid_601846 = validateParameter(valid_601846, JString, required = false,
                                 default = nil)
  if valid_601846 != nil:
    section.add "X-Amz-Algorithm", valid_601846
  var valid_601847 = header.getOrDefault("X-Amz-Signature")
  valid_601847 = validateParameter(valid_601847, JString, required = false,
                                 default = nil)
  if valid_601847 != nil:
    section.add "X-Amz-Signature", valid_601847
  var valid_601848 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601848 = validateParameter(valid_601848, JString, required = false,
                                 default = nil)
  if valid_601848 != nil:
    section.add "X-Amz-SignedHeaders", valid_601848
  var valid_601849 = header.getOrDefault("X-Amz-Credential")
  valid_601849 = validateParameter(valid_601849, JString, required = false,
                                 default = nil)
  if valid_601849 != nil:
    section.add "X-Amz-Credential", valid_601849
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601850: Call_GetDescribeReceiptRuleSet_601837; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the details of the specified receipt rule set.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_601850.validator(path, query, header, formData, body)
  let scheme = call_601850.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601850.url(scheme.get, call_601850.host, call_601850.base,
                         call_601850.route, valid.getOrDefault("path"))
  result = hook(call_601850, url, valid)

proc call*(call_601851: Call_GetDescribeReceiptRuleSet_601837; RuleSetName: string;
          Action: string = "DescribeReceiptRuleSet"; Version: string = "2010-12-01"): Recallable =
  ## getDescribeReceiptRuleSet
  ## <p>Returns the details of the specified receipt rule set.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set to describe.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601852 = newJObject()
  add(query_601852, "RuleSetName", newJString(RuleSetName))
  add(query_601852, "Action", newJString(Action))
  add(query_601852, "Version", newJString(Version))
  result = call_601851.call(nil, query_601852, nil, nil, nil)

var getDescribeReceiptRuleSet* = Call_GetDescribeReceiptRuleSet_601837(
    name: "getDescribeReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DescribeReceiptRuleSet",
    validator: validate_GetDescribeReceiptRuleSet_601838, base: "/",
    url: url_GetDescribeReceiptRuleSet_601839,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetAccountSendingEnabled_601885 = ref object of OpenApiRestCall_600426
proc url_PostGetAccountSendingEnabled_601887(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetAccountSendingEnabled_601886(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the email sending status of the Amazon SES account for the current region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601888 = query.getOrDefault("Action")
  valid_601888 = validateParameter(valid_601888, JString, required = true, default = newJString(
      "GetAccountSendingEnabled"))
  if valid_601888 != nil:
    section.add "Action", valid_601888
  var valid_601889 = query.getOrDefault("Version")
  valid_601889 = validateParameter(valid_601889, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601889 != nil:
    section.add "Version", valid_601889
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601890 = header.getOrDefault("X-Amz-Date")
  valid_601890 = validateParameter(valid_601890, JString, required = false,
                                 default = nil)
  if valid_601890 != nil:
    section.add "X-Amz-Date", valid_601890
  var valid_601891 = header.getOrDefault("X-Amz-Security-Token")
  valid_601891 = validateParameter(valid_601891, JString, required = false,
                                 default = nil)
  if valid_601891 != nil:
    section.add "X-Amz-Security-Token", valid_601891
  var valid_601892 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601892 = validateParameter(valid_601892, JString, required = false,
                                 default = nil)
  if valid_601892 != nil:
    section.add "X-Amz-Content-Sha256", valid_601892
  var valid_601893 = header.getOrDefault("X-Amz-Algorithm")
  valid_601893 = validateParameter(valid_601893, JString, required = false,
                                 default = nil)
  if valid_601893 != nil:
    section.add "X-Amz-Algorithm", valid_601893
  var valid_601894 = header.getOrDefault("X-Amz-Signature")
  valid_601894 = validateParameter(valid_601894, JString, required = false,
                                 default = nil)
  if valid_601894 != nil:
    section.add "X-Amz-Signature", valid_601894
  var valid_601895 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601895 = validateParameter(valid_601895, JString, required = false,
                                 default = nil)
  if valid_601895 != nil:
    section.add "X-Amz-SignedHeaders", valid_601895
  var valid_601896 = header.getOrDefault("X-Amz-Credential")
  valid_601896 = validateParameter(valid_601896, JString, required = false,
                                 default = nil)
  if valid_601896 != nil:
    section.add "X-Amz-Credential", valid_601896
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601897: Call_PostGetAccountSendingEnabled_601885; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the email sending status of the Amazon SES account for the current region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_601897.validator(path, query, header, formData, body)
  let scheme = call_601897.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601897.url(scheme.get, call_601897.host, call_601897.base,
                         call_601897.route, valid.getOrDefault("path"))
  result = hook(call_601897, url, valid)

proc call*(call_601898: Call_PostGetAccountSendingEnabled_601885;
          Action: string = "GetAccountSendingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## postGetAccountSendingEnabled
  ## <p>Returns the email sending status of the Amazon SES account for the current region.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601899 = newJObject()
  add(query_601899, "Action", newJString(Action))
  add(query_601899, "Version", newJString(Version))
  result = call_601898.call(nil, query_601899, nil, nil, nil)

var postGetAccountSendingEnabled* = Call_PostGetAccountSendingEnabled_601885(
    name: "postGetAccountSendingEnabled", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=GetAccountSendingEnabled",
    validator: validate_PostGetAccountSendingEnabled_601886, base: "/",
    url: url_PostGetAccountSendingEnabled_601887,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetAccountSendingEnabled_601870 = ref object of OpenApiRestCall_600426
proc url_GetGetAccountSendingEnabled_601872(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetAccountSendingEnabled_601871(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the email sending status of the Amazon SES account for the current region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601873 = query.getOrDefault("Action")
  valid_601873 = validateParameter(valid_601873, JString, required = true, default = newJString(
      "GetAccountSendingEnabled"))
  if valid_601873 != nil:
    section.add "Action", valid_601873
  var valid_601874 = query.getOrDefault("Version")
  valid_601874 = validateParameter(valid_601874, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601874 != nil:
    section.add "Version", valid_601874
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601875 = header.getOrDefault("X-Amz-Date")
  valid_601875 = validateParameter(valid_601875, JString, required = false,
                                 default = nil)
  if valid_601875 != nil:
    section.add "X-Amz-Date", valid_601875
  var valid_601876 = header.getOrDefault("X-Amz-Security-Token")
  valid_601876 = validateParameter(valid_601876, JString, required = false,
                                 default = nil)
  if valid_601876 != nil:
    section.add "X-Amz-Security-Token", valid_601876
  var valid_601877 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601877 = validateParameter(valid_601877, JString, required = false,
                                 default = nil)
  if valid_601877 != nil:
    section.add "X-Amz-Content-Sha256", valid_601877
  var valid_601878 = header.getOrDefault("X-Amz-Algorithm")
  valid_601878 = validateParameter(valid_601878, JString, required = false,
                                 default = nil)
  if valid_601878 != nil:
    section.add "X-Amz-Algorithm", valid_601878
  var valid_601879 = header.getOrDefault("X-Amz-Signature")
  valid_601879 = validateParameter(valid_601879, JString, required = false,
                                 default = nil)
  if valid_601879 != nil:
    section.add "X-Amz-Signature", valid_601879
  var valid_601880 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601880 = validateParameter(valid_601880, JString, required = false,
                                 default = nil)
  if valid_601880 != nil:
    section.add "X-Amz-SignedHeaders", valid_601880
  var valid_601881 = header.getOrDefault("X-Amz-Credential")
  valid_601881 = validateParameter(valid_601881, JString, required = false,
                                 default = nil)
  if valid_601881 != nil:
    section.add "X-Amz-Credential", valid_601881
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601882: Call_GetGetAccountSendingEnabled_601870; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the email sending status of the Amazon SES account for the current region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_601882.validator(path, query, header, formData, body)
  let scheme = call_601882.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601882.url(scheme.get, call_601882.host, call_601882.base,
                         call_601882.route, valid.getOrDefault("path"))
  result = hook(call_601882, url, valid)

proc call*(call_601883: Call_GetGetAccountSendingEnabled_601870;
          Action: string = "GetAccountSendingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## getGetAccountSendingEnabled
  ## <p>Returns the email sending status of the Amazon SES account for the current region.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601884 = newJObject()
  add(query_601884, "Action", newJString(Action))
  add(query_601884, "Version", newJString(Version))
  result = call_601883.call(nil, query_601884, nil, nil, nil)

var getGetAccountSendingEnabled* = Call_GetGetAccountSendingEnabled_601870(
    name: "getGetAccountSendingEnabled", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=GetAccountSendingEnabled",
    validator: validate_GetGetAccountSendingEnabled_601871, base: "/",
    url: url_GetGetAccountSendingEnabled_601872,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetCustomVerificationEmailTemplate_601916 = ref object of OpenApiRestCall_600426
proc url_PostGetCustomVerificationEmailTemplate_601918(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetCustomVerificationEmailTemplate_601917(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the custom email verification template for the template name you specify.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601919 = query.getOrDefault("Action")
  valid_601919 = validateParameter(valid_601919, JString, required = true, default = newJString(
      "GetCustomVerificationEmailTemplate"))
  if valid_601919 != nil:
    section.add "Action", valid_601919
  var valid_601920 = query.getOrDefault("Version")
  valid_601920 = validateParameter(valid_601920, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601920 != nil:
    section.add "Version", valid_601920
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601921 = header.getOrDefault("X-Amz-Date")
  valid_601921 = validateParameter(valid_601921, JString, required = false,
                                 default = nil)
  if valid_601921 != nil:
    section.add "X-Amz-Date", valid_601921
  var valid_601922 = header.getOrDefault("X-Amz-Security-Token")
  valid_601922 = validateParameter(valid_601922, JString, required = false,
                                 default = nil)
  if valid_601922 != nil:
    section.add "X-Amz-Security-Token", valid_601922
  var valid_601923 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601923 = validateParameter(valid_601923, JString, required = false,
                                 default = nil)
  if valid_601923 != nil:
    section.add "X-Amz-Content-Sha256", valid_601923
  var valid_601924 = header.getOrDefault("X-Amz-Algorithm")
  valid_601924 = validateParameter(valid_601924, JString, required = false,
                                 default = nil)
  if valid_601924 != nil:
    section.add "X-Amz-Algorithm", valid_601924
  var valid_601925 = header.getOrDefault("X-Amz-Signature")
  valid_601925 = validateParameter(valid_601925, JString, required = false,
                                 default = nil)
  if valid_601925 != nil:
    section.add "X-Amz-Signature", valid_601925
  var valid_601926 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601926 = validateParameter(valid_601926, JString, required = false,
                                 default = nil)
  if valid_601926 != nil:
    section.add "X-Amz-SignedHeaders", valid_601926
  var valid_601927 = header.getOrDefault("X-Amz-Credential")
  valid_601927 = validateParameter(valid_601927, JString, required = false,
                                 default = nil)
  if valid_601927 != nil:
    section.add "X-Amz-Credential", valid_601927
  result.add "header", section
  ## parameters in `formData` object:
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template that you want to retrieve.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TemplateName` field"
  var valid_601928 = formData.getOrDefault("TemplateName")
  valid_601928 = validateParameter(valid_601928, JString, required = true,
                                 default = nil)
  if valid_601928 != nil:
    section.add "TemplateName", valid_601928
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601929: Call_PostGetCustomVerificationEmailTemplate_601916;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the custom email verification template for the template name you specify.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_601929.validator(path, query, header, formData, body)
  let scheme = call_601929.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601929.url(scheme.get, call_601929.host, call_601929.base,
                         call_601929.route, valid.getOrDefault("path"))
  result = hook(call_601929, url, valid)

proc call*(call_601930: Call_PostGetCustomVerificationEmailTemplate_601916;
          TemplateName: string;
          Action: string = "GetCustomVerificationEmailTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## postGetCustomVerificationEmailTemplate
  ## <p>Returns the custom email verification template for the template name you specify.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template that you want to retrieve.
  ##   Version: string (required)
  var query_601931 = newJObject()
  var formData_601932 = newJObject()
  add(query_601931, "Action", newJString(Action))
  add(formData_601932, "TemplateName", newJString(TemplateName))
  add(query_601931, "Version", newJString(Version))
  result = call_601930.call(nil, query_601931, nil, formData_601932, nil)

var postGetCustomVerificationEmailTemplate* = Call_PostGetCustomVerificationEmailTemplate_601916(
    name: "postGetCustomVerificationEmailTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=GetCustomVerificationEmailTemplate",
    validator: validate_PostGetCustomVerificationEmailTemplate_601917, base: "/",
    url: url_PostGetCustomVerificationEmailTemplate_601918,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetCustomVerificationEmailTemplate_601900 = ref object of OpenApiRestCall_600426
proc url_GetGetCustomVerificationEmailTemplate_601902(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetCustomVerificationEmailTemplate_601901(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the custom email verification template for the template name you specify.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template that you want to retrieve.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601903 = query.getOrDefault("Action")
  valid_601903 = validateParameter(valid_601903, JString, required = true, default = newJString(
      "GetCustomVerificationEmailTemplate"))
  if valid_601903 != nil:
    section.add "Action", valid_601903
  var valid_601904 = query.getOrDefault("TemplateName")
  valid_601904 = validateParameter(valid_601904, JString, required = true,
                                 default = nil)
  if valid_601904 != nil:
    section.add "TemplateName", valid_601904
  var valid_601905 = query.getOrDefault("Version")
  valid_601905 = validateParameter(valid_601905, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601905 != nil:
    section.add "Version", valid_601905
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601906 = header.getOrDefault("X-Amz-Date")
  valid_601906 = validateParameter(valid_601906, JString, required = false,
                                 default = nil)
  if valid_601906 != nil:
    section.add "X-Amz-Date", valid_601906
  var valid_601907 = header.getOrDefault("X-Amz-Security-Token")
  valid_601907 = validateParameter(valid_601907, JString, required = false,
                                 default = nil)
  if valid_601907 != nil:
    section.add "X-Amz-Security-Token", valid_601907
  var valid_601908 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601908 = validateParameter(valid_601908, JString, required = false,
                                 default = nil)
  if valid_601908 != nil:
    section.add "X-Amz-Content-Sha256", valid_601908
  var valid_601909 = header.getOrDefault("X-Amz-Algorithm")
  valid_601909 = validateParameter(valid_601909, JString, required = false,
                                 default = nil)
  if valid_601909 != nil:
    section.add "X-Amz-Algorithm", valid_601909
  var valid_601910 = header.getOrDefault("X-Amz-Signature")
  valid_601910 = validateParameter(valid_601910, JString, required = false,
                                 default = nil)
  if valid_601910 != nil:
    section.add "X-Amz-Signature", valid_601910
  var valid_601911 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601911 = validateParameter(valid_601911, JString, required = false,
                                 default = nil)
  if valid_601911 != nil:
    section.add "X-Amz-SignedHeaders", valid_601911
  var valid_601912 = header.getOrDefault("X-Amz-Credential")
  valid_601912 = validateParameter(valid_601912, JString, required = false,
                                 default = nil)
  if valid_601912 != nil:
    section.add "X-Amz-Credential", valid_601912
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601913: Call_GetGetCustomVerificationEmailTemplate_601900;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the custom email verification template for the template name you specify.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_601913.validator(path, query, header, formData, body)
  let scheme = call_601913.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601913.url(scheme.get, call_601913.host, call_601913.base,
                         call_601913.route, valid.getOrDefault("path"))
  result = hook(call_601913, url, valid)

proc call*(call_601914: Call_GetGetCustomVerificationEmailTemplate_601900;
          TemplateName: string;
          Action: string = "GetCustomVerificationEmailTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## getGetCustomVerificationEmailTemplate
  ## <p>Returns the custom email verification template for the template name you specify.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template that you want to retrieve.
  ##   Version: string (required)
  var query_601915 = newJObject()
  add(query_601915, "Action", newJString(Action))
  add(query_601915, "TemplateName", newJString(TemplateName))
  add(query_601915, "Version", newJString(Version))
  result = call_601914.call(nil, query_601915, nil, nil, nil)

var getGetCustomVerificationEmailTemplate* = Call_GetGetCustomVerificationEmailTemplate_601900(
    name: "getGetCustomVerificationEmailTemplate", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=GetCustomVerificationEmailTemplate",
    validator: validate_GetGetCustomVerificationEmailTemplate_601901, base: "/",
    url: url_GetGetCustomVerificationEmailTemplate_601902,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetIdentityDkimAttributes_601949 = ref object of OpenApiRestCall_600426
proc url_PostGetIdentityDkimAttributes_601951(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetIdentityDkimAttributes_601950(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the current status of Easy DKIM signing for an entity. For domain name identities, this operation also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES has successfully verified that these tokens have been published.</p> <p>This operation takes a list of identities as input and returns the following information for each:</p> <ul> <li> <p>Whether Easy DKIM signing is enabled or disabled.</p> </li> <li> <p>A set of DKIM tokens that represent the identity. If the identity is an email address, the tokens represent the domain of that address.</p> </li> <li> <p>Whether Amazon SES has successfully verified the DKIM tokens published in the domain's DNS. This information is only returned for domain name identities, not for email addresses.</p> </li> </ul> <p>This operation is throttled at one request per second and can only get DKIM attributes for up to 100 identities at a time.</p> <p>For more information about creating DNS records using DKIM tokens, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601952 = query.getOrDefault("Action")
  valid_601952 = validateParameter(valid_601952, JString, required = true, default = newJString(
      "GetIdentityDkimAttributes"))
  if valid_601952 != nil:
    section.add "Action", valid_601952
  var valid_601953 = query.getOrDefault("Version")
  valid_601953 = validateParameter(valid_601953, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601953 != nil:
    section.add "Version", valid_601953
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601954 = header.getOrDefault("X-Amz-Date")
  valid_601954 = validateParameter(valid_601954, JString, required = false,
                                 default = nil)
  if valid_601954 != nil:
    section.add "X-Amz-Date", valid_601954
  var valid_601955 = header.getOrDefault("X-Amz-Security-Token")
  valid_601955 = validateParameter(valid_601955, JString, required = false,
                                 default = nil)
  if valid_601955 != nil:
    section.add "X-Amz-Security-Token", valid_601955
  var valid_601956 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601956 = validateParameter(valid_601956, JString, required = false,
                                 default = nil)
  if valid_601956 != nil:
    section.add "X-Amz-Content-Sha256", valid_601956
  var valid_601957 = header.getOrDefault("X-Amz-Algorithm")
  valid_601957 = validateParameter(valid_601957, JString, required = false,
                                 default = nil)
  if valid_601957 != nil:
    section.add "X-Amz-Algorithm", valid_601957
  var valid_601958 = header.getOrDefault("X-Amz-Signature")
  valid_601958 = validateParameter(valid_601958, JString, required = false,
                                 default = nil)
  if valid_601958 != nil:
    section.add "X-Amz-Signature", valid_601958
  var valid_601959 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601959 = validateParameter(valid_601959, JString, required = false,
                                 default = nil)
  if valid_601959 != nil:
    section.add "X-Amz-SignedHeaders", valid_601959
  var valid_601960 = header.getOrDefault("X-Amz-Credential")
  valid_601960 = validateParameter(valid_601960, JString, required = false,
                                 default = nil)
  if valid_601960 != nil:
    section.add "X-Amz-Credential", valid_601960
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identities: JArray (required)
  ##             : A list of one or more verified identities - email addresses, domains, or both.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identities` field"
  var valid_601961 = formData.getOrDefault("Identities")
  valid_601961 = validateParameter(valid_601961, JArray, required = true, default = nil)
  if valid_601961 != nil:
    section.add "Identities", valid_601961
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601962: Call_PostGetIdentityDkimAttributes_601949; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the current status of Easy DKIM signing for an entity. For domain name identities, this operation also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES has successfully verified that these tokens have been published.</p> <p>This operation takes a list of identities as input and returns the following information for each:</p> <ul> <li> <p>Whether Easy DKIM signing is enabled or disabled.</p> </li> <li> <p>A set of DKIM tokens that represent the identity. If the identity is an email address, the tokens represent the domain of that address.</p> </li> <li> <p>Whether Amazon SES has successfully verified the DKIM tokens published in the domain's DNS. This information is only returned for domain name identities, not for email addresses.</p> </li> </ul> <p>This operation is throttled at one request per second and can only get DKIM attributes for up to 100 identities at a time.</p> <p>For more information about creating DNS records using DKIM tokens, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_601962.validator(path, query, header, formData, body)
  let scheme = call_601962.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601962.url(scheme.get, call_601962.host, call_601962.base,
                         call_601962.route, valid.getOrDefault("path"))
  result = hook(call_601962, url, valid)

proc call*(call_601963: Call_PostGetIdentityDkimAttributes_601949;
          Identities: JsonNode; Action: string = "GetIdentityDkimAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## postGetIdentityDkimAttributes
  ## <p>Returns the current status of Easy DKIM signing for an entity. For domain name identities, this operation also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES has successfully verified that these tokens have been published.</p> <p>This operation takes a list of identities as input and returns the following information for each:</p> <ul> <li> <p>Whether Easy DKIM signing is enabled or disabled.</p> </li> <li> <p>A set of DKIM tokens that represent the identity. If the identity is an email address, the tokens represent the domain of that address.</p> </li> <li> <p>Whether Amazon SES has successfully verified the DKIM tokens published in the domain's DNS. This information is only returned for domain name identities, not for email addresses.</p> </li> </ul> <p>This operation is throttled at one request per second and can only get DKIM attributes for up to 100 identities at a time.</p> <p>For more information about creating DNS records using DKIM tokens, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html">Amazon SES Developer Guide</a>.</p>
  ##   Identities: JArray (required)
  ##             : A list of one or more verified identities - email addresses, domains, or both.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601964 = newJObject()
  var formData_601965 = newJObject()
  if Identities != nil:
    formData_601965.add "Identities", Identities
  add(query_601964, "Action", newJString(Action))
  add(query_601964, "Version", newJString(Version))
  result = call_601963.call(nil, query_601964, nil, formData_601965, nil)

var postGetIdentityDkimAttributes* = Call_PostGetIdentityDkimAttributes_601949(
    name: "postGetIdentityDkimAttributes", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=GetIdentityDkimAttributes",
    validator: validate_PostGetIdentityDkimAttributes_601950, base: "/",
    url: url_PostGetIdentityDkimAttributes_601951,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetIdentityDkimAttributes_601933 = ref object of OpenApiRestCall_600426
proc url_GetGetIdentityDkimAttributes_601935(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetIdentityDkimAttributes_601934(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the current status of Easy DKIM signing for an entity. For domain name identities, this operation also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES has successfully verified that these tokens have been published.</p> <p>This operation takes a list of identities as input and returns the following information for each:</p> <ul> <li> <p>Whether Easy DKIM signing is enabled or disabled.</p> </li> <li> <p>A set of DKIM tokens that represent the identity. If the identity is an email address, the tokens represent the domain of that address.</p> </li> <li> <p>Whether Amazon SES has successfully verified the DKIM tokens published in the domain's DNS. This information is only returned for domain name identities, not for email addresses.</p> </li> </ul> <p>This operation is throttled at one request per second and can only get DKIM attributes for up to 100 identities at a time.</p> <p>For more information about creating DNS records using DKIM tokens, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identities: JArray (required)
  ##             : A list of one or more verified identities - email addresses, domains, or both.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identities` field"
  var valid_601936 = query.getOrDefault("Identities")
  valid_601936 = validateParameter(valid_601936, JArray, required = true, default = nil)
  if valid_601936 != nil:
    section.add "Identities", valid_601936
  var valid_601937 = query.getOrDefault("Action")
  valid_601937 = validateParameter(valid_601937, JString, required = true, default = newJString(
      "GetIdentityDkimAttributes"))
  if valid_601937 != nil:
    section.add "Action", valid_601937
  var valid_601938 = query.getOrDefault("Version")
  valid_601938 = validateParameter(valid_601938, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601938 != nil:
    section.add "Version", valid_601938
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601939 = header.getOrDefault("X-Amz-Date")
  valid_601939 = validateParameter(valid_601939, JString, required = false,
                                 default = nil)
  if valid_601939 != nil:
    section.add "X-Amz-Date", valid_601939
  var valid_601940 = header.getOrDefault("X-Amz-Security-Token")
  valid_601940 = validateParameter(valid_601940, JString, required = false,
                                 default = nil)
  if valid_601940 != nil:
    section.add "X-Amz-Security-Token", valid_601940
  var valid_601941 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601941 = validateParameter(valid_601941, JString, required = false,
                                 default = nil)
  if valid_601941 != nil:
    section.add "X-Amz-Content-Sha256", valid_601941
  var valid_601942 = header.getOrDefault("X-Amz-Algorithm")
  valid_601942 = validateParameter(valid_601942, JString, required = false,
                                 default = nil)
  if valid_601942 != nil:
    section.add "X-Amz-Algorithm", valid_601942
  var valid_601943 = header.getOrDefault("X-Amz-Signature")
  valid_601943 = validateParameter(valid_601943, JString, required = false,
                                 default = nil)
  if valid_601943 != nil:
    section.add "X-Amz-Signature", valid_601943
  var valid_601944 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601944 = validateParameter(valid_601944, JString, required = false,
                                 default = nil)
  if valid_601944 != nil:
    section.add "X-Amz-SignedHeaders", valid_601944
  var valid_601945 = header.getOrDefault("X-Amz-Credential")
  valid_601945 = validateParameter(valid_601945, JString, required = false,
                                 default = nil)
  if valid_601945 != nil:
    section.add "X-Amz-Credential", valid_601945
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601946: Call_GetGetIdentityDkimAttributes_601933; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the current status of Easy DKIM signing for an entity. For domain name identities, this operation also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES has successfully verified that these tokens have been published.</p> <p>This operation takes a list of identities as input and returns the following information for each:</p> <ul> <li> <p>Whether Easy DKIM signing is enabled or disabled.</p> </li> <li> <p>A set of DKIM tokens that represent the identity. If the identity is an email address, the tokens represent the domain of that address.</p> </li> <li> <p>Whether Amazon SES has successfully verified the DKIM tokens published in the domain's DNS. This information is only returned for domain name identities, not for email addresses.</p> </li> </ul> <p>This operation is throttled at one request per second and can only get DKIM attributes for up to 100 identities at a time.</p> <p>For more information about creating DNS records using DKIM tokens, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_601946.validator(path, query, header, formData, body)
  let scheme = call_601946.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601946.url(scheme.get, call_601946.host, call_601946.base,
                         call_601946.route, valid.getOrDefault("path"))
  result = hook(call_601946, url, valid)

proc call*(call_601947: Call_GetGetIdentityDkimAttributes_601933;
          Identities: JsonNode; Action: string = "GetIdentityDkimAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## getGetIdentityDkimAttributes
  ## <p>Returns the current status of Easy DKIM signing for an entity. For domain name identities, this operation also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES has successfully verified that these tokens have been published.</p> <p>This operation takes a list of identities as input and returns the following information for each:</p> <ul> <li> <p>Whether Easy DKIM signing is enabled or disabled.</p> </li> <li> <p>A set of DKIM tokens that represent the identity. If the identity is an email address, the tokens represent the domain of that address.</p> </li> <li> <p>Whether Amazon SES has successfully verified the DKIM tokens published in the domain's DNS. This information is only returned for domain name identities, not for email addresses.</p> </li> </ul> <p>This operation is throttled at one request per second and can only get DKIM attributes for up to 100 identities at a time.</p> <p>For more information about creating DNS records using DKIM tokens, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html">Amazon SES Developer Guide</a>.</p>
  ##   Identities: JArray (required)
  ##             : A list of one or more verified identities - email addresses, domains, or both.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601948 = newJObject()
  if Identities != nil:
    query_601948.add "Identities", Identities
  add(query_601948, "Action", newJString(Action))
  add(query_601948, "Version", newJString(Version))
  result = call_601947.call(nil, query_601948, nil, nil, nil)

var getGetIdentityDkimAttributes* = Call_GetGetIdentityDkimAttributes_601933(
    name: "getGetIdentityDkimAttributes", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=GetIdentityDkimAttributes",
    validator: validate_GetGetIdentityDkimAttributes_601934, base: "/",
    url: url_GetGetIdentityDkimAttributes_601935,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetIdentityMailFromDomainAttributes_601982 = ref object of OpenApiRestCall_600426
proc url_PostGetIdentityMailFromDomainAttributes_601984(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetIdentityMailFromDomainAttributes_601983(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the custom MAIL FROM attributes for a list of identities (email addresses : domains).</p> <p>This operation is throttled at one request per second and can only get custom MAIL FROM attributes for up to 100 identities at a time.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601985 = query.getOrDefault("Action")
  valid_601985 = validateParameter(valid_601985, JString, required = true, default = newJString(
      "GetIdentityMailFromDomainAttributes"))
  if valid_601985 != nil:
    section.add "Action", valid_601985
  var valid_601986 = query.getOrDefault("Version")
  valid_601986 = validateParameter(valid_601986, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601986 != nil:
    section.add "Version", valid_601986
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601987 = header.getOrDefault("X-Amz-Date")
  valid_601987 = validateParameter(valid_601987, JString, required = false,
                                 default = nil)
  if valid_601987 != nil:
    section.add "X-Amz-Date", valid_601987
  var valid_601988 = header.getOrDefault("X-Amz-Security-Token")
  valid_601988 = validateParameter(valid_601988, JString, required = false,
                                 default = nil)
  if valid_601988 != nil:
    section.add "X-Amz-Security-Token", valid_601988
  var valid_601989 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601989 = validateParameter(valid_601989, JString, required = false,
                                 default = nil)
  if valid_601989 != nil:
    section.add "X-Amz-Content-Sha256", valid_601989
  var valid_601990 = header.getOrDefault("X-Amz-Algorithm")
  valid_601990 = validateParameter(valid_601990, JString, required = false,
                                 default = nil)
  if valid_601990 != nil:
    section.add "X-Amz-Algorithm", valid_601990
  var valid_601991 = header.getOrDefault("X-Amz-Signature")
  valid_601991 = validateParameter(valid_601991, JString, required = false,
                                 default = nil)
  if valid_601991 != nil:
    section.add "X-Amz-Signature", valid_601991
  var valid_601992 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601992 = validateParameter(valid_601992, JString, required = false,
                                 default = nil)
  if valid_601992 != nil:
    section.add "X-Amz-SignedHeaders", valid_601992
  var valid_601993 = header.getOrDefault("X-Amz-Credential")
  valid_601993 = validateParameter(valid_601993, JString, required = false,
                                 default = nil)
  if valid_601993 != nil:
    section.add "X-Amz-Credential", valid_601993
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identities: JArray (required)
  ##             : A list of one or more identities.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identities` field"
  var valid_601994 = formData.getOrDefault("Identities")
  valid_601994 = validateParameter(valid_601994, JArray, required = true, default = nil)
  if valid_601994 != nil:
    section.add "Identities", valid_601994
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601995: Call_PostGetIdentityMailFromDomainAttributes_601982;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the custom MAIL FROM attributes for a list of identities (email addresses : domains).</p> <p>This operation is throttled at one request per second and can only get custom MAIL FROM attributes for up to 100 identities at a time.</p>
  ## 
  let valid = call_601995.validator(path, query, header, formData, body)
  let scheme = call_601995.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601995.url(scheme.get, call_601995.host, call_601995.base,
                         call_601995.route, valid.getOrDefault("path"))
  result = hook(call_601995, url, valid)

proc call*(call_601996: Call_PostGetIdentityMailFromDomainAttributes_601982;
          Identities: JsonNode;
          Action: string = "GetIdentityMailFromDomainAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## postGetIdentityMailFromDomainAttributes
  ## <p>Returns the custom MAIL FROM attributes for a list of identities (email addresses : domains).</p> <p>This operation is throttled at one request per second and can only get custom MAIL FROM attributes for up to 100 identities at a time.</p>
  ##   Identities: JArray (required)
  ##             : A list of one or more identities.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601997 = newJObject()
  var formData_601998 = newJObject()
  if Identities != nil:
    formData_601998.add "Identities", Identities
  add(query_601997, "Action", newJString(Action))
  add(query_601997, "Version", newJString(Version))
  result = call_601996.call(nil, query_601997, nil, formData_601998, nil)

var postGetIdentityMailFromDomainAttributes* = Call_PostGetIdentityMailFromDomainAttributes_601982(
    name: "postGetIdentityMailFromDomainAttributes", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=GetIdentityMailFromDomainAttributes",
    validator: validate_PostGetIdentityMailFromDomainAttributes_601983, base: "/",
    url: url_PostGetIdentityMailFromDomainAttributes_601984,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetIdentityMailFromDomainAttributes_601966 = ref object of OpenApiRestCall_600426
proc url_GetGetIdentityMailFromDomainAttributes_601968(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetIdentityMailFromDomainAttributes_601967(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the custom MAIL FROM attributes for a list of identities (email addresses : domains).</p> <p>This operation is throttled at one request per second and can only get custom MAIL FROM attributes for up to 100 identities at a time.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identities: JArray (required)
  ##             : A list of one or more identities.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identities` field"
  var valid_601969 = query.getOrDefault("Identities")
  valid_601969 = validateParameter(valid_601969, JArray, required = true, default = nil)
  if valid_601969 != nil:
    section.add "Identities", valid_601969
  var valid_601970 = query.getOrDefault("Action")
  valid_601970 = validateParameter(valid_601970, JString, required = true, default = newJString(
      "GetIdentityMailFromDomainAttributes"))
  if valid_601970 != nil:
    section.add "Action", valid_601970
  var valid_601971 = query.getOrDefault("Version")
  valid_601971 = validateParameter(valid_601971, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_601971 != nil:
    section.add "Version", valid_601971
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601972 = header.getOrDefault("X-Amz-Date")
  valid_601972 = validateParameter(valid_601972, JString, required = false,
                                 default = nil)
  if valid_601972 != nil:
    section.add "X-Amz-Date", valid_601972
  var valid_601973 = header.getOrDefault("X-Amz-Security-Token")
  valid_601973 = validateParameter(valid_601973, JString, required = false,
                                 default = nil)
  if valid_601973 != nil:
    section.add "X-Amz-Security-Token", valid_601973
  var valid_601974 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601974 = validateParameter(valid_601974, JString, required = false,
                                 default = nil)
  if valid_601974 != nil:
    section.add "X-Amz-Content-Sha256", valid_601974
  var valid_601975 = header.getOrDefault("X-Amz-Algorithm")
  valid_601975 = validateParameter(valid_601975, JString, required = false,
                                 default = nil)
  if valid_601975 != nil:
    section.add "X-Amz-Algorithm", valid_601975
  var valid_601976 = header.getOrDefault("X-Amz-Signature")
  valid_601976 = validateParameter(valid_601976, JString, required = false,
                                 default = nil)
  if valid_601976 != nil:
    section.add "X-Amz-Signature", valid_601976
  var valid_601977 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601977 = validateParameter(valid_601977, JString, required = false,
                                 default = nil)
  if valid_601977 != nil:
    section.add "X-Amz-SignedHeaders", valid_601977
  var valid_601978 = header.getOrDefault("X-Amz-Credential")
  valid_601978 = validateParameter(valid_601978, JString, required = false,
                                 default = nil)
  if valid_601978 != nil:
    section.add "X-Amz-Credential", valid_601978
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601979: Call_GetGetIdentityMailFromDomainAttributes_601966;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the custom MAIL FROM attributes for a list of identities (email addresses : domains).</p> <p>This operation is throttled at one request per second and can only get custom MAIL FROM attributes for up to 100 identities at a time.</p>
  ## 
  let valid = call_601979.validator(path, query, header, formData, body)
  let scheme = call_601979.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601979.url(scheme.get, call_601979.host, call_601979.base,
                         call_601979.route, valid.getOrDefault("path"))
  result = hook(call_601979, url, valid)

proc call*(call_601980: Call_GetGetIdentityMailFromDomainAttributes_601966;
          Identities: JsonNode;
          Action: string = "GetIdentityMailFromDomainAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## getGetIdentityMailFromDomainAttributes
  ## <p>Returns the custom MAIL FROM attributes for a list of identities (email addresses : domains).</p> <p>This operation is throttled at one request per second and can only get custom MAIL FROM attributes for up to 100 identities at a time.</p>
  ##   Identities: JArray (required)
  ##             : A list of one or more identities.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601981 = newJObject()
  if Identities != nil:
    query_601981.add "Identities", Identities
  add(query_601981, "Action", newJString(Action))
  add(query_601981, "Version", newJString(Version))
  result = call_601980.call(nil, query_601981, nil, nil, nil)

var getGetIdentityMailFromDomainAttributes* = Call_GetGetIdentityMailFromDomainAttributes_601966(
    name: "getGetIdentityMailFromDomainAttributes", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=GetIdentityMailFromDomainAttributes",
    validator: validate_GetGetIdentityMailFromDomainAttributes_601967, base: "/",
    url: url_GetGetIdentityMailFromDomainAttributes_601968,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetIdentityNotificationAttributes_602015 = ref object of OpenApiRestCall_600426
proc url_PostGetIdentityNotificationAttributes_602017(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetIdentityNotificationAttributes_602016(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given a list of verified identities (email addresses and/or domains), returns a structure describing identity notification attributes.</p> <p>This operation is throttled at one request per second and can only get notification attributes for up to 100 identities at a time.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602018 = query.getOrDefault("Action")
  valid_602018 = validateParameter(valid_602018, JString, required = true, default = newJString(
      "GetIdentityNotificationAttributes"))
  if valid_602018 != nil:
    section.add "Action", valid_602018
  var valid_602019 = query.getOrDefault("Version")
  valid_602019 = validateParameter(valid_602019, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602019 != nil:
    section.add "Version", valid_602019
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602020 = header.getOrDefault("X-Amz-Date")
  valid_602020 = validateParameter(valid_602020, JString, required = false,
                                 default = nil)
  if valid_602020 != nil:
    section.add "X-Amz-Date", valid_602020
  var valid_602021 = header.getOrDefault("X-Amz-Security-Token")
  valid_602021 = validateParameter(valid_602021, JString, required = false,
                                 default = nil)
  if valid_602021 != nil:
    section.add "X-Amz-Security-Token", valid_602021
  var valid_602022 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602022 = validateParameter(valid_602022, JString, required = false,
                                 default = nil)
  if valid_602022 != nil:
    section.add "X-Amz-Content-Sha256", valid_602022
  var valid_602023 = header.getOrDefault("X-Amz-Algorithm")
  valid_602023 = validateParameter(valid_602023, JString, required = false,
                                 default = nil)
  if valid_602023 != nil:
    section.add "X-Amz-Algorithm", valid_602023
  var valid_602024 = header.getOrDefault("X-Amz-Signature")
  valid_602024 = validateParameter(valid_602024, JString, required = false,
                                 default = nil)
  if valid_602024 != nil:
    section.add "X-Amz-Signature", valid_602024
  var valid_602025 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602025 = validateParameter(valid_602025, JString, required = false,
                                 default = nil)
  if valid_602025 != nil:
    section.add "X-Amz-SignedHeaders", valid_602025
  var valid_602026 = header.getOrDefault("X-Amz-Credential")
  valid_602026 = validateParameter(valid_602026, JString, required = false,
                                 default = nil)
  if valid_602026 != nil:
    section.add "X-Amz-Credential", valid_602026
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identities: JArray (required)
  ##             : A list of one or more identities. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identities` field"
  var valid_602027 = formData.getOrDefault("Identities")
  valid_602027 = validateParameter(valid_602027, JArray, required = true, default = nil)
  if valid_602027 != nil:
    section.add "Identities", valid_602027
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602028: Call_PostGetIdentityNotificationAttributes_602015;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given a list of verified identities (email addresses and/or domains), returns a structure describing identity notification attributes.</p> <p>This operation is throttled at one request per second and can only get notification attributes for up to 100 identities at a time.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_602028.validator(path, query, header, formData, body)
  let scheme = call_602028.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602028.url(scheme.get, call_602028.host, call_602028.base,
                         call_602028.route, valid.getOrDefault("path"))
  result = hook(call_602028, url, valid)

proc call*(call_602029: Call_PostGetIdentityNotificationAttributes_602015;
          Identities: JsonNode;
          Action: string = "GetIdentityNotificationAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## postGetIdentityNotificationAttributes
  ## <p>Given a list of verified identities (email addresses and/or domains), returns a structure describing identity notification attributes.</p> <p>This operation is throttled at one request per second and can only get notification attributes for up to 100 identities at a time.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Identities: JArray (required)
  ##             : A list of one or more identities. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602030 = newJObject()
  var formData_602031 = newJObject()
  if Identities != nil:
    formData_602031.add "Identities", Identities
  add(query_602030, "Action", newJString(Action))
  add(query_602030, "Version", newJString(Version))
  result = call_602029.call(nil, query_602030, nil, formData_602031, nil)

var postGetIdentityNotificationAttributes* = Call_PostGetIdentityNotificationAttributes_602015(
    name: "postGetIdentityNotificationAttributes", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=GetIdentityNotificationAttributes",
    validator: validate_PostGetIdentityNotificationAttributes_602016, base: "/",
    url: url_PostGetIdentityNotificationAttributes_602017,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetIdentityNotificationAttributes_601999 = ref object of OpenApiRestCall_600426
proc url_GetGetIdentityNotificationAttributes_602001(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetIdentityNotificationAttributes_602000(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given a list of verified identities (email addresses and/or domains), returns a structure describing identity notification attributes.</p> <p>This operation is throttled at one request per second and can only get notification attributes for up to 100 identities at a time.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identities: JArray (required)
  ##             : A list of one or more identities. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identities` field"
  var valid_602002 = query.getOrDefault("Identities")
  valid_602002 = validateParameter(valid_602002, JArray, required = true, default = nil)
  if valid_602002 != nil:
    section.add "Identities", valid_602002
  var valid_602003 = query.getOrDefault("Action")
  valid_602003 = validateParameter(valid_602003, JString, required = true, default = newJString(
      "GetIdentityNotificationAttributes"))
  if valid_602003 != nil:
    section.add "Action", valid_602003
  var valid_602004 = query.getOrDefault("Version")
  valid_602004 = validateParameter(valid_602004, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602004 != nil:
    section.add "Version", valid_602004
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602005 = header.getOrDefault("X-Amz-Date")
  valid_602005 = validateParameter(valid_602005, JString, required = false,
                                 default = nil)
  if valid_602005 != nil:
    section.add "X-Amz-Date", valid_602005
  var valid_602006 = header.getOrDefault("X-Amz-Security-Token")
  valid_602006 = validateParameter(valid_602006, JString, required = false,
                                 default = nil)
  if valid_602006 != nil:
    section.add "X-Amz-Security-Token", valid_602006
  var valid_602007 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602007 = validateParameter(valid_602007, JString, required = false,
                                 default = nil)
  if valid_602007 != nil:
    section.add "X-Amz-Content-Sha256", valid_602007
  var valid_602008 = header.getOrDefault("X-Amz-Algorithm")
  valid_602008 = validateParameter(valid_602008, JString, required = false,
                                 default = nil)
  if valid_602008 != nil:
    section.add "X-Amz-Algorithm", valid_602008
  var valid_602009 = header.getOrDefault("X-Amz-Signature")
  valid_602009 = validateParameter(valid_602009, JString, required = false,
                                 default = nil)
  if valid_602009 != nil:
    section.add "X-Amz-Signature", valid_602009
  var valid_602010 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602010 = validateParameter(valid_602010, JString, required = false,
                                 default = nil)
  if valid_602010 != nil:
    section.add "X-Amz-SignedHeaders", valid_602010
  var valid_602011 = header.getOrDefault("X-Amz-Credential")
  valid_602011 = validateParameter(valid_602011, JString, required = false,
                                 default = nil)
  if valid_602011 != nil:
    section.add "X-Amz-Credential", valid_602011
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602012: Call_GetGetIdentityNotificationAttributes_601999;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given a list of verified identities (email addresses and/or domains), returns a structure describing identity notification attributes.</p> <p>This operation is throttled at one request per second and can only get notification attributes for up to 100 identities at a time.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_602012.validator(path, query, header, formData, body)
  let scheme = call_602012.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602012.url(scheme.get, call_602012.host, call_602012.base,
                         call_602012.route, valid.getOrDefault("path"))
  result = hook(call_602012, url, valid)

proc call*(call_602013: Call_GetGetIdentityNotificationAttributes_601999;
          Identities: JsonNode;
          Action: string = "GetIdentityNotificationAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## getGetIdentityNotificationAttributes
  ## <p>Given a list of verified identities (email addresses and/or domains), returns a structure describing identity notification attributes.</p> <p>This operation is throttled at one request per second and can only get notification attributes for up to 100 identities at a time.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Identities: JArray (required)
  ##             : A list of one or more identities. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602014 = newJObject()
  if Identities != nil:
    query_602014.add "Identities", Identities
  add(query_602014, "Action", newJString(Action))
  add(query_602014, "Version", newJString(Version))
  result = call_602013.call(nil, query_602014, nil, nil, nil)

var getGetIdentityNotificationAttributes* = Call_GetGetIdentityNotificationAttributes_601999(
    name: "getGetIdentityNotificationAttributes", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=GetIdentityNotificationAttributes",
    validator: validate_GetGetIdentityNotificationAttributes_602000, base: "/",
    url: url_GetGetIdentityNotificationAttributes_602001,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetIdentityPolicies_602049 = ref object of OpenApiRestCall_600426
proc url_PostGetIdentityPolicies_602051(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetIdentityPolicies_602050(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602052 = query.getOrDefault("Action")
  valid_602052 = validateParameter(valid_602052, JString, required = true,
                                 default = newJString("GetIdentityPolicies"))
  if valid_602052 != nil:
    section.add "Action", valid_602052
  var valid_602053 = query.getOrDefault("Version")
  valid_602053 = validateParameter(valid_602053, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602053 != nil:
    section.add "Version", valid_602053
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602054 = header.getOrDefault("X-Amz-Date")
  valid_602054 = validateParameter(valid_602054, JString, required = false,
                                 default = nil)
  if valid_602054 != nil:
    section.add "X-Amz-Date", valid_602054
  var valid_602055 = header.getOrDefault("X-Amz-Security-Token")
  valid_602055 = validateParameter(valid_602055, JString, required = false,
                                 default = nil)
  if valid_602055 != nil:
    section.add "X-Amz-Security-Token", valid_602055
  var valid_602056 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602056 = validateParameter(valid_602056, JString, required = false,
                                 default = nil)
  if valid_602056 != nil:
    section.add "X-Amz-Content-Sha256", valid_602056
  var valid_602057 = header.getOrDefault("X-Amz-Algorithm")
  valid_602057 = validateParameter(valid_602057, JString, required = false,
                                 default = nil)
  if valid_602057 != nil:
    section.add "X-Amz-Algorithm", valid_602057
  var valid_602058 = header.getOrDefault("X-Amz-Signature")
  valid_602058 = validateParameter(valid_602058, JString, required = false,
                                 default = nil)
  if valid_602058 != nil:
    section.add "X-Amz-Signature", valid_602058
  var valid_602059 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602059 = validateParameter(valid_602059, JString, required = false,
                                 default = nil)
  if valid_602059 != nil:
    section.add "X-Amz-SignedHeaders", valid_602059
  var valid_602060 = header.getOrDefault("X-Amz-Credential")
  valid_602060 = validateParameter(valid_602060, JString, required = false,
                                 default = nil)
  if valid_602060 != nil:
    section.add "X-Amz-Credential", valid_602060
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyNames: JArray (required)
  ##              : A list of the names of policies to be retrieved. You can retrieve a maximum of 20 policies at a time. If you do not know the names of the policies that are attached to the identity, you can use <code>ListIdentityPolicies</code>.
  ##   Identity: JString (required)
  ##           : <p>The identity for which the policies will be retrieved. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyNames` field"
  var valid_602061 = formData.getOrDefault("PolicyNames")
  valid_602061 = validateParameter(valid_602061, JArray, required = true, default = nil)
  if valid_602061 != nil:
    section.add "PolicyNames", valid_602061
  var valid_602062 = formData.getOrDefault("Identity")
  valid_602062 = validateParameter(valid_602062, JString, required = true,
                                 default = nil)
  if valid_602062 != nil:
    section.add "Identity", valid_602062
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602063: Call_PostGetIdentityPolicies_602049; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_602063.validator(path, query, header, formData, body)
  let scheme = call_602063.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602063.url(scheme.get, call_602063.host, call_602063.base,
                         call_602063.route, valid.getOrDefault("path"))
  result = hook(call_602063, url, valid)

proc call*(call_602064: Call_PostGetIdentityPolicies_602049; PolicyNames: JsonNode;
          Identity: string; Action: string = "GetIdentityPolicies";
          Version: string = "2010-12-01"): Recallable =
  ## postGetIdentityPolicies
  ## <p>Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   PolicyNames: JArray (required)
  ##              : A list of the names of policies to be retrieved. You can retrieve a maximum of 20 policies at a time. If you do not know the names of the policies that are attached to the identity, you can use <code>ListIdentityPolicies</code>.
  ##   Identity: string (required)
  ##           : <p>The identity for which the policies will be retrieved. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602065 = newJObject()
  var formData_602066 = newJObject()
  if PolicyNames != nil:
    formData_602066.add "PolicyNames", PolicyNames
  add(formData_602066, "Identity", newJString(Identity))
  add(query_602065, "Action", newJString(Action))
  add(query_602065, "Version", newJString(Version))
  result = call_602064.call(nil, query_602065, nil, formData_602066, nil)

var postGetIdentityPolicies* = Call_PostGetIdentityPolicies_602049(
    name: "postGetIdentityPolicies", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=GetIdentityPolicies",
    validator: validate_PostGetIdentityPolicies_602050, base: "/",
    url: url_PostGetIdentityPolicies_602051, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetIdentityPolicies_602032 = ref object of OpenApiRestCall_600426
proc url_GetGetIdentityPolicies_602034(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetIdentityPolicies_602033(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : <p>The identity for which the policies will be retrieved. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: JString (required)
  ##   PolicyNames: JArray (required)
  ##              : A list of the names of policies to be retrieved. You can retrieve a maximum of 20 policies at a time. If you do not know the names of the policies that are attached to the identity, you can use <code>ListIdentityPolicies</code>.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_602035 = query.getOrDefault("Identity")
  valid_602035 = validateParameter(valid_602035, JString, required = true,
                                 default = nil)
  if valid_602035 != nil:
    section.add "Identity", valid_602035
  var valid_602036 = query.getOrDefault("Action")
  valid_602036 = validateParameter(valid_602036, JString, required = true,
                                 default = newJString("GetIdentityPolicies"))
  if valid_602036 != nil:
    section.add "Action", valid_602036
  var valid_602037 = query.getOrDefault("PolicyNames")
  valid_602037 = validateParameter(valid_602037, JArray, required = true, default = nil)
  if valid_602037 != nil:
    section.add "PolicyNames", valid_602037
  var valid_602038 = query.getOrDefault("Version")
  valid_602038 = validateParameter(valid_602038, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602038 != nil:
    section.add "Version", valid_602038
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602039 = header.getOrDefault("X-Amz-Date")
  valid_602039 = validateParameter(valid_602039, JString, required = false,
                                 default = nil)
  if valid_602039 != nil:
    section.add "X-Amz-Date", valid_602039
  var valid_602040 = header.getOrDefault("X-Amz-Security-Token")
  valid_602040 = validateParameter(valid_602040, JString, required = false,
                                 default = nil)
  if valid_602040 != nil:
    section.add "X-Amz-Security-Token", valid_602040
  var valid_602041 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602041 = validateParameter(valid_602041, JString, required = false,
                                 default = nil)
  if valid_602041 != nil:
    section.add "X-Amz-Content-Sha256", valid_602041
  var valid_602042 = header.getOrDefault("X-Amz-Algorithm")
  valid_602042 = validateParameter(valid_602042, JString, required = false,
                                 default = nil)
  if valid_602042 != nil:
    section.add "X-Amz-Algorithm", valid_602042
  var valid_602043 = header.getOrDefault("X-Amz-Signature")
  valid_602043 = validateParameter(valid_602043, JString, required = false,
                                 default = nil)
  if valid_602043 != nil:
    section.add "X-Amz-Signature", valid_602043
  var valid_602044 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602044 = validateParameter(valid_602044, JString, required = false,
                                 default = nil)
  if valid_602044 != nil:
    section.add "X-Amz-SignedHeaders", valid_602044
  var valid_602045 = header.getOrDefault("X-Amz-Credential")
  valid_602045 = validateParameter(valid_602045, JString, required = false,
                                 default = nil)
  if valid_602045 != nil:
    section.add "X-Amz-Credential", valid_602045
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602046: Call_GetGetIdentityPolicies_602032; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_602046.validator(path, query, header, formData, body)
  let scheme = call_602046.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602046.url(scheme.get, call_602046.host, call_602046.base,
                         call_602046.route, valid.getOrDefault("path"))
  result = hook(call_602046, url, valid)

proc call*(call_602047: Call_GetGetIdentityPolicies_602032; Identity: string;
          PolicyNames: JsonNode; Action: string = "GetIdentityPolicies";
          Version: string = "2010-12-01"): Recallable =
  ## getGetIdentityPolicies
  ## <p>Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : <p>The identity for which the policies will be retrieved. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   PolicyNames: JArray (required)
  ##              : A list of the names of policies to be retrieved. You can retrieve a maximum of 20 policies at a time. If you do not know the names of the policies that are attached to the identity, you can use <code>ListIdentityPolicies</code>.
  ##   Version: string (required)
  var query_602048 = newJObject()
  add(query_602048, "Identity", newJString(Identity))
  add(query_602048, "Action", newJString(Action))
  if PolicyNames != nil:
    query_602048.add "PolicyNames", PolicyNames
  add(query_602048, "Version", newJString(Version))
  result = call_602047.call(nil, query_602048, nil, nil, nil)

var getGetIdentityPolicies* = Call_GetGetIdentityPolicies_602032(
    name: "getGetIdentityPolicies", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=GetIdentityPolicies",
    validator: validate_GetGetIdentityPolicies_602033, base: "/",
    url: url_GetGetIdentityPolicies_602034, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetIdentityVerificationAttributes_602083 = ref object of OpenApiRestCall_600426
proc url_PostGetIdentityVerificationAttributes_602085(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetIdentityVerificationAttributes_602084(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given a list of identities (email addresses and/or domains), returns the verification status and (for domain identities) the verification token for each identity.</p> <p>The verification status of an email address is "Pending" until the email address owner clicks the link within the verification email that Amazon SES sent to that address. If the email address owner clicks the link within 24 hours, the verification status of the email address changes to "Success". If the link is not clicked within 24 hours, the verification status changes to "Failed." In that case, if you still want to verify the email address, you must restart the verification process from the beginning.</p> <p>For domain identities, the domain's verification status is "Pending" as Amazon SES searches for the required TXT record in the DNS settings of the domain. When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p> <p>This operation is throttled at one request per second and can only get verification attributes for up to 100 identities at a time.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602086 = query.getOrDefault("Action")
  valid_602086 = validateParameter(valid_602086, JString, required = true, default = newJString(
      "GetIdentityVerificationAttributes"))
  if valid_602086 != nil:
    section.add "Action", valid_602086
  var valid_602087 = query.getOrDefault("Version")
  valid_602087 = validateParameter(valid_602087, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602087 != nil:
    section.add "Version", valid_602087
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602088 = header.getOrDefault("X-Amz-Date")
  valid_602088 = validateParameter(valid_602088, JString, required = false,
                                 default = nil)
  if valid_602088 != nil:
    section.add "X-Amz-Date", valid_602088
  var valid_602089 = header.getOrDefault("X-Amz-Security-Token")
  valid_602089 = validateParameter(valid_602089, JString, required = false,
                                 default = nil)
  if valid_602089 != nil:
    section.add "X-Amz-Security-Token", valid_602089
  var valid_602090 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602090 = validateParameter(valid_602090, JString, required = false,
                                 default = nil)
  if valid_602090 != nil:
    section.add "X-Amz-Content-Sha256", valid_602090
  var valid_602091 = header.getOrDefault("X-Amz-Algorithm")
  valid_602091 = validateParameter(valid_602091, JString, required = false,
                                 default = nil)
  if valid_602091 != nil:
    section.add "X-Amz-Algorithm", valid_602091
  var valid_602092 = header.getOrDefault("X-Amz-Signature")
  valid_602092 = validateParameter(valid_602092, JString, required = false,
                                 default = nil)
  if valid_602092 != nil:
    section.add "X-Amz-Signature", valid_602092
  var valid_602093 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602093 = validateParameter(valid_602093, JString, required = false,
                                 default = nil)
  if valid_602093 != nil:
    section.add "X-Amz-SignedHeaders", valid_602093
  var valid_602094 = header.getOrDefault("X-Amz-Credential")
  valid_602094 = validateParameter(valid_602094, JString, required = false,
                                 default = nil)
  if valid_602094 != nil:
    section.add "X-Amz-Credential", valid_602094
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identities: JArray (required)
  ##             : A list of identities.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identities` field"
  var valid_602095 = formData.getOrDefault("Identities")
  valid_602095 = validateParameter(valid_602095, JArray, required = true, default = nil)
  if valid_602095 != nil:
    section.add "Identities", valid_602095
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602096: Call_PostGetIdentityVerificationAttributes_602083;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given a list of identities (email addresses and/or domains), returns the verification status and (for domain identities) the verification token for each identity.</p> <p>The verification status of an email address is "Pending" until the email address owner clicks the link within the verification email that Amazon SES sent to that address. If the email address owner clicks the link within 24 hours, the verification status of the email address changes to "Success". If the link is not clicked within 24 hours, the verification status changes to "Failed." In that case, if you still want to verify the email address, you must restart the verification process from the beginning.</p> <p>For domain identities, the domain's verification status is "Pending" as Amazon SES searches for the required TXT record in the DNS settings of the domain. When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p> <p>This operation is throttled at one request per second and can only get verification attributes for up to 100 identities at a time.</p>
  ## 
  let valid = call_602096.validator(path, query, header, formData, body)
  let scheme = call_602096.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602096.url(scheme.get, call_602096.host, call_602096.base,
                         call_602096.route, valid.getOrDefault("path"))
  result = hook(call_602096, url, valid)

proc call*(call_602097: Call_PostGetIdentityVerificationAttributes_602083;
          Identities: JsonNode;
          Action: string = "GetIdentityVerificationAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## postGetIdentityVerificationAttributes
  ## <p>Given a list of identities (email addresses and/or domains), returns the verification status and (for domain identities) the verification token for each identity.</p> <p>The verification status of an email address is "Pending" until the email address owner clicks the link within the verification email that Amazon SES sent to that address. If the email address owner clicks the link within 24 hours, the verification status of the email address changes to "Success". If the link is not clicked within 24 hours, the verification status changes to "Failed." In that case, if you still want to verify the email address, you must restart the verification process from the beginning.</p> <p>For domain identities, the domain's verification status is "Pending" as Amazon SES searches for the required TXT record in the DNS settings of the domain. When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p> <p>This operation is throttled at one request per second and can only get verification attributes for up to 100 identities at a time.</p>
  ##   Identities: JArray (required)
  ##             : A list of identities.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602098 = newJObject()
  var formData_602099 = newJObject()
  if Identities != nil:
    formData_602099.add "Identities", Identities
  add(query_602098, "Action", newJString(Action))
  add(query_602098, "Version", newJString(Version))
  result = call_602097.call(nil, query_602098, nil, formData_602099, nil)

var postGetIdentityVerificationAttributes* = Call_PostGetIdentityVerificationAttributes_602083(
    name: "postGetIdentityVerificationAttributes", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=GetIdentityVerificationAttributes",
    validator: validate_PostGetIdentityVerificationAttributes_602084, base: "/",
    url: url_PostGetIdentityVerificationAttributes_602085,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetIdentityVerificationAttributes_602067 = ref object of OpenApiRestCall_600426
proc url_GetGetIdentityVerificationAttributes_602069(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetIdentityVerificationAttributes_602068(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given a list of identities (email addresses and/or domains), returns the verification status and (for domain identities) the verification token for each identity.</p> <p>The verification status of an email address is "Pending" until the email address owner clicks the link within the verification email that Amazon SES sent to that address. If the email address owner clicks the link within 24 hours, the verification status of the email address changes to "Success". If the link is not clicked within 24 hours, the verification status changes to "Failed." In that case, if you still want to verify the email address, you must restart the verification process from the beginning.</p> <p>For domain identities, the domain's verification status is "Pending" as Amazon SES searches for the required TXT record in the DNS settings of the domain. When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p> <p>This operation is throttled at one request per second and can only get verification attributes for up to 100 identities at a time.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identities: JArray (required)
  ##             : A list of identities.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identities` field"
  var valid_602070 = query.getOrDefault("Identities")
  valid_602070 = validateParameter(valid_602070, JArray, required = true, default = nil)
  if valid_602070 != nil:
    section.add "Identities", valid_602070
  var valid_602071 = query.getOrDefault("Action")
  valid_602071 = validateParameter(valid_602071, JString, required = true, default = newJString(
      "GetIdentityVerificationAttributes"))
  if valid_602071 != nil:
    section.add "Action", valid_602071
  var valid_602072 = query.getOrDefault("Version")
  valid_602072 = validateParameter(valid_602072, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602072 != nil:
    section.add "Version", valid_602072
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602073 = header.getOrDefault("X-Amz-Date")
  valid_602073 = validateParameter(valid_602073, JString, required = false,
                                 default = nil)
  if valid_602073 != nil:
    section.add "X-Amz-Date", valid_602073
  var valid_602074 = header.getOrDefault("X-Amz-Security-Token")
  valid_602074 = validateParameter(valid_602074, JString, required = false,
                                 default = nil)
  if valid_602074 != nil:
    section.add "X-Amz-Security-Token", valid_602074
  var valid_602075 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602075 = validateParameter(valid_602075, JString, required = false,
                                 default = nil)
  if valid_602075 != nil:
    section.add "X-Amz-Content-Sha256", valid_602075
  var valid_602076 = header.getOrDefault("X-Amz-Algorithm")
  valid_602076 = validateParameter(valid_602076, JString, required = false,
                                 default = nil)
  if valid_602076 != nil:
    section.add "X-Amz-Algorithm", valid_602076
  var valid_602077 = header.getOrDefault("X-Amz-Signature")
  valid_602077 = validateParameter(valid_602077, JString, required = false,
                                 default = nil)
  if valid_602077 != nil:
    section.add "X-Amz-Signature", valid_602077
  var valid_602078 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602078 = validateParameter(valid_602078, JString, required = false,
                                 default = nil)
  if valid_602078 != nil:
    section.add "X-Amz-SignedHeaders", valid_602078
  var valid_602079 = header.getOrDefault("X-Amz-Credential")
  valid_602079 = validateParameter(valid_602079, JString, required = false,
                                 default = nil)
  if valid_602079 != nil:
    section.add "X-Amz-Credential", valid_602079
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602080: Call_GetGetIdentityVerificationAttributes_602067;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given a list of identities (email addresses and/or domains), returns the verification status and (for domain identities) the verification token for each identity.</p> <p>The verification status of an email address is "Pending" until the email address owner clicks the link within the verification email that Amazon SES sent to that address. If the email address owner clicks the link within 24 hours, the verification status of the email address changes to "Success". If the link is not clicked within 24 hours, the verification status changes to "Failed." In that case, if you still want to verify the email address, you must restart the verification process from the beginning.</p> <p>For domain identities, the domain's verification status is "Pending" as Amazon SES searches for the required TXT record in the DNS settings of the domain. When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p> <p>This operation is throttled at one request per second and can only get verification attributes for up to 100 identities at a time.</p>
  ## 
  let valid = call_602080.validator(path, query, header, formData, body)
  let scheme = call_602080.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602080.url(scheme.get, call_602080.host, call_602080.base,
                         call_602080.route, valid.getOrDefault("path"))
  result = hook(call_602080, url, valid)

proc call*(call_602081: Call_GetGetIdentityVerificationAttributes_602067;
          Identities: JsonNode;
          Action: string = "GetIdentityVerificationAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## getGetIdentityVerificationAttributes
  ## <p>Given a list of identities (email addresses and/or domains), returns the verification status and (for domain identities) the verification token for each identity.</p> <p>The verification status of an email address is "Pending" until the email address owner clicks the link within the verification email that Amazon SES sent to that address. If the email address owner clicks the link within 24 hours, the verification status of the email address changes to "Success". If the link is not clicked within 24 hours, the verification status changes to "Failed." In that case, if you still want to verify the email address, you must restart the verification process from the beginning.</p> <p>For domain identities, the domain's verification status is "Pending" as Amazon SES searches for the required TXT record in the DNS settings of the domain. When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p> <p>This operation is throttled at one request per second and can only get verification attributes for up to 100 identities at a time.</p>
  ##   Identities: JArray (required)
  ##             : A list of identities.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602082 = newJObject()
  if Identities != nil:
    query_602082.add "Identities", Identities
  add(query_602082, "Action", newJString(Action))
  add(query_602082, "Version", newJString(Version))
  result = call_602081.call(nil, query_602082, nil, nil, nil)

var getGetIdentityVerificationAttributes* = Call_GetGetIdentityVerificationAttributes_602067(
    name: "getGetIdentityVerificationAttributes", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=GetIdentityVerificationAttributes",
    validator: validate_GetGetIdentityVerificationAttributes_602068, base: "/",
    url: url_GetGetIdentityVerificationAttributes_602069,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetSendQuota_602115 = ref object of OpenApiRestCall_600426
proc url_PostGetSendQuota_602117(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetSendQuota_602116(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Provides the sending limits for the Amazon SES account. </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602118 = query.getOrDefault("Action")
  valid_602118 = validateParameter(valid_602118, JString, required = true,
                                 default = newJString("GetSendQuota"))
  if valid_602118 != nil:
    section.add "Action", valid_602118
  var valid_602119 = query.getOrDefault("Version")
  valid_602119 = validateParameter(valid_602119, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602119 != nil:
    section.add "Version", valid_602119
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602120 = header.getOrDefault("X-Amz-Date")
  valid_602120 = validateParameter(valid_602120, JString, required = false,
                                 default = nil)
  if valid_602120 != nil:
    section.add "X-Amz-Date", valid_602120
  var valid_602121 = header.getOrDefault("X-Amz-Security-Token")
  valid_602121 = validateParameter(valid_602121, JString, required = false,
                                 default = nil)
  if valid_602121 != nil:
    section.add "X-Amz-Security-Token", valid_602121
  var valid_602122 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602122 = validateParameter(valid_602122, JString, required = false,
                                 default = nil)
  if valid_602122 != nil:
    section.add "X-Amz-Content-Sha256", valid_602122
  var valid_602123 = header.getOrDefault("X-Amz-Algorithm")
  valid_602123 = validateParameter(valid_602123, JString, required = false,
                                 default = nil)
  if valid_602123 != nil:
    section.add "X-Amz-Algorithm", valid_602123
  var valid_602124 = header.getOrDefault("X-Amz-Signature")
  valid_602124 = validateParameter(valid_602124, JString, required = false,
                                 default = nil)
  if valid_602124 != nil:
    section.add "X-Amz-Signature", valid_602124
  var valid_602125 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602125 = validateParameter(valid_602125, JString, required = false,
                                 default = nil)
  if valid_602125 != nil:
    section.add "X-Amz-SignedHeaders", valid_602125
  var valid_602126 = header.getOrDefault("X-Amz-Credential")
  valid_602126 = validateParameter(valid_602126, JString, required = false,
                                 default = nil)
  if valid_602126 != nil:
    section.add "X-Amz-Credential", valid_602126
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602127: Call_PostGetSendQuota_602115; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Provides the sending limits for the Amazon SES account. </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_602127.validator(path, query, header, formData, body)
  let scheme = call_602127.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602127.url(scheme.get, call_602127.host, call_602127.base,
                         call_602127.route, valid.getOrDefault("path"))
  result = hook(call_602127, url, valid)

proc call*(call_602128: Call_PostGetSendQuota_602115;
          Action: string = "GetSendQuota"; Version: string = "2010-12-01"): Recallable =
  ## postGetSendQuota
  ## <p>Provides the sending limits for the Amazon SES account. </p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602129 = newJObject()
  add(query_602129, "Action", newJString(Action))
  add(query_602129, "Version", newJString(Version))
  result = call_602128.call(nil, query_602129, nil, nil, nil)

var postGetSendQuota* = Call_PostGetSendQuota_602115(name: "postGetSendQuota",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=GetSendQuota", validator: validate_PostGetSendQuota_602116,
    base: "/", url: url_PostGetSendQuota_602117,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetSendQuota_602100 = ref object of OpenApiRestCall_600426
proc url_GetGetSendQuota_602102(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetSendQuota_602101(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Provides the sending limits for the Amazon SES account. </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602103 = query.getOrDefault("Action")
  valid_602103 = validateParameter(valid_602103, JString, required = true,
                                 default = newJString("GetSendQuota"))
  if valid_602103 != nil:
    section.add "Action", valid_602103
  var valid_602104 = query.getOrDefault("Version")
  valid_602104 = validateParameter(valid_602104, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602104 != nil:
    section.add "Version", valid_602104
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602105 = header.getOrDefault("X-Amz-Date")
  valid_602105 = validateParameter(valid_602105, JString, required = false,
                                 default = nil)
  if valid_602105 != nil:
    section.add "X-Amz-Date", valid_602105
  var valid_602106 = header.getOrDefault("X-Amz-Security-Token")
  valid_602106 = validateParameter(valid_602106, JString, required = false,
                                 default = nil)
  if valid_602106 != nil:
    section.add "X-Amz-Security-Token", valid_602106
  var valid_602107 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602107 = validateParameter(valid_602107, JString, required = false,
                                 default = nil)
  if valid_602107 != nil:
    section.add "X-Amz-Content-Sha256", valid_602107
  var valid_602108 = header.getOrDefault("X-Amz-Algorithm")
  valid_602108 = validateParameter(valid_602108, JString, required = false,
                                 default = nil)
  if valid_602108 != nil:
    section.add "X-Amz-Algorithm", valid_602108
  var valid_602109 = header.getOrDefault("X-Amz-Signature")
  valid_602109 = validateParameter(valid_602109, JString, required = false,
                                 default = nil)
  if valid_602109 != nil:
    section.add "X-Amz-Signature", valid_602109
  var valid_602110 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602110 = validateParameter(valid_602110, JString, required = false,
                                 default = nil)
  if valid_602110 != nil:
    section.add "X-Amz-SignedHeaders", valid_602110
  var valid_602111 = header.getOrDefault("X-Amz-Credential")
  valid_602111 = validateParameter(valid_602111, JString, required = false,
                                 default = nil)
  if valid_602111 != nil:
    section.add "X-Amz-Credential", valid_602111
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602112: Call_GetGetSendQuota_602100; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Provides the sending limits for the Amazon SES account. </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_602112.validator(path, query, header, formData, body)
  let scheme = call_602112.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602112.url(scheme.get, call_602112.host, call_602112.base,
                         call_602112.route, valid.getOrDefault("path"))
  result = hook(call_602112, url, valid)

proc call*(call_602113: Call_GetGetSendQuota_602100;
          Action: string = "GetSendQuota"; Version: string = "2010-12-01"): Recallable =
  ## getGetSendQuota
  ## <p>Provides the sending limits for the Amazon SES account. </p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602114 = newJObject()
  add(query_602114, "Action", newJString(Action))
  add(query_602114, "Version", newJString(Version))
  result = call_602113.call(nil, query_602114, nil, nil, nil)

var getGetSendQuota* = Call_GetGetSendQuota_602100(name: "getGetSendQuota",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=GetSendQuota", validator: validate_GetGetSendQuota_602101,
    base: "/", url: url_GetGetSendQuota_602102, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetSendStatistics_602145 = ref object of OpenApiRestCall_600426
proc url_PostGetSendStatistics_602147(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetSendStatistics_602146(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Provides sending statistics for the current AWS Region. The result is a list of data points, representing the last two weeks of sending activity. Each data point in the list contains statistics for a 15-minute period of time.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602148 = query.getOrDefault("Action")
  valid_602148 = validateParameter(valid_602148, JString, required = true,
                                 default = newJString("GetSendStatistics"))
  if valid_602148 != nil:
    section.add "Action", valid_602148
  var valid_602149 = query.getOrDefault("Version")
  valid_602149 = validateParameter(valid_602149, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602149 != nil:
    section.add "Version", valid_602149
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602150 = header.getOrDefault("X-Amz-Date")
  valid_602150 = validateParameter(valid_602150, JString, required = false,
                                 default = nil)
  if valid_602150 != nil:
    section.add "X-Amz-Date", valid_602150
  var valid_602151 = header.getOrDefault("X-Amz-Security-Token")
  valid_602151 = validateParameter(valid_602151, JString, required = false,
                                 default = nil)
  if valid_602151 != nil:
    section.add "X-Amz-Security-Token", valid_602151
  var valid_602152 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602152 = validateParameter(valid_602152, JString, required = false,
                                 default = nil)
  if valid_602152 != nil:
    section.add "X-Amz-Content-Sha256", valid_602152
  var valid_602153 = header.getOrDefault("X-Amz-Algorithm")
  valid_602153 = validateParameter(valid_602153, JString, required = false,
                                 default = nil)
  if valid_602153 != nil:
    section.add "X-Amz-Algorithm", valid_602153
  var valid_602154 = header.getOrDefault("X-Amz-Signature")
  valid_602154 = validateParameter(valid_602154, JString, required = false,
                                 default = nil)
  if valid_602154 != nil:
    section.add "X-Amz-Signature", valid_602154
  var valid_602155 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602155 = validateParameter(valid_602155, JString, required = false,
                                 default = nil)
  if valid_602155 != nil:
    section.add "X-Amz-SignedHeaders", valid_602155
  var valid_602156 = header.getOrDefault("X-Amz-Credential")
  valid_602156 = validateParameter(valid_602156, JString, required = false,
                                 default = nil)
  if valid_602156 != nil:
    section.add "X-Amz-Credential", valid_602156
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602157: Call_PostGetSendStatistics_602145; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Provides sending statistics for the current AWS Region. The result is a list of data points, representing the last two weeks of sending activity. Each data point in the list contains statistics for a 15-minute period of time.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_602157.validator(path, query, header, formData, body)
  let scheme = call_602157.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602157.url(scheme.get, call_602157.host, call_602157.base,
                         call_602157.route, valid.getOrDefault("path"))
  result = hook(call_602157, url, valid)

proc call*(call_602158: Call_PostGetSendStatistics_602145;
          Action: string = "GetSendStatistics"; Version: string = "2010-12-01"): Recallable =
  ## postGetSendStatistics
  ## <p>Provides sending statistics for the current AWS Region. The result is a list of data points, representing the last two weeks of sending activity. Each data point in the list contains statistics for a 15-minute period of time.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602159 = newJObject()
  add(query_602159, "Action", newJString(Action))
  add(query_602159, "Version", newJString(Version))
  result = call_602158.call(nil, query_602159, nil, nil, nil)

var postGetSendStatistics* = Call_PostGetSendStatistics_602145(
    name: "postGetSendStatistics", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=GetSendStatistics",
    validator: validate_PostGetSendStatistics_602146, base: "/",
    url: url_PostGetSendStatistics_602147, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetSendStatistics_602130 = ref object of OpenApiRestCall_600426
proc url_GetGetSendStatistics_602132(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetSendStatistics_602131(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Provides sending statistics for the current AWS Region. The result is a list of data points, representing the last two weeks of sending activity. Each data point in the list contains statistics for a 15-minute period of time.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602133 = query.getOrDefault("Action")
  valid_602133 = validateParameter(valid_602133, JString, required = true,
                                 default = newJString("GetSendStatistics"))
  if valid_602133 != nil:
    section.add "Action", valid_602133
  var valid_602134 = query.getOrDefault("Version")
  valid_602134 = validateParameter(valid_602134, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602134 != nil:
    section.add "Version", valid_602134
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602135 = header.getOrDefault("X-Amz-Date")
  valid_602135 = validateParameter(valid_602135, JString, required = false,
                                 default = nil)
  if valid_602135 != nil:
    section.add "X-Amz-Date", valid_602135
  var valid_602136 = header.getOrDefault("X-Amz-Security-Token")
  valid_602136 = validateParameter(valid_602136, JString, required = false,
                                 default = nil)
  if valid_602136 != nil:
    section.add "X-Amz-Security-Token", valid_602136
  var valid_602137 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602137 = validateParameter(valid_602137, JString, required = false,
                                 default = nil)
  if valid_602137 != nil:
    section.add "X-Amz-Content-Sha256", valid_602137
  var valid_602138 = header.getOrDefault("X-Amz-Algorithm")
  valid_602138 = validateParameter(valid_602138, JString, required = false,
                                 default = nil)
  if valid_602138 != nil:
    section.add "X-Amz-Algorithm", valid_602138
  var valid_602139 = header.getOrDefault("X-Amz-Signature")
  valid_602139 = validateParameter(valid_602139, JString, required = false,
                                 default = nil)
  if valid_602139 != nil:
    section.add "X-Amz-Signature", valid_602139
  var valid_602140 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602140 = validateParameter(valid_602140, JString, required = false,
                                 default = nil)
  if valid_602140 != nil:
    section.add "X-Amz-SignedHeaders", valid_602140
  var valid_602141 = header.getOrDefault("X-Amz-Credential")
  valid_602141 = validateParameter(valid_602141, JString, required = false,
                                 default = nil)
  if valid_602141 != nil:
    section.add "X-Amz-Credential", valid_602141
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602142: Call_GetGetSendStatistics_602130; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Provides sending statistics for the current AWS Region. The result is a list of data points, representing the last two weeks of sending activity. Each data point in the list contains statistics for a 15-minute period of time.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_602142.validator(path, query, header, formData, body)
  let scheme = call_602142.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602142.url(scheme.get, call_602142.host, call_602142.base,
                         call_602142.route, valid.getOrDefault("path"))
  result = hook(call_602142, url, valid)

proc call*(call_602143: Call_GetGetSendStatistics_602130;
          Action: string = "GetSendStatistics"; Version: string = "2010-12-01"): Recallable =
  ## getGetSendStatistics
  ## <p>Provides sending statistics for the current AWS Region. The result is a list of data points, representing the last two weeks of sending activity. Each data point in the list contains statistics for a 15-minute period of time.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602144 = newJObject()
  add(query_602144, "Action", newJString(Action))
  add(query_602144, "Version", newJString(Version))
  result = call_602143.call(nil, query_602144, nil, nil, nil)

var getGetSendStatistics* = Call_GetGetSendStatistics_602130(
    name: "getGetSendStatistics", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=GetSendStatistics",
    validator: validate_GetGetSendStatistics_602131, base: "/",
    url: url_GetGetSendStatistics_602132, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetTemplate_602176 = ref object of OpenApiRestCall_600426
proc url_PostGetTemplate_602178(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetTemplate_602177(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Displays the template object (which includes the Subject line, HTML part and text part) for the template you specify.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602179 = query.getOrDefault("Action")
  valid_602179 = validateParameter(valid_602179, JString, required = true,
                                 default = newJString("GetTemplate"))
  if valid_602179 != nil:
    section.add "Action", valid_602179
  var valid_602180 = query.getOrDefault("Version")
  valid_602180 = validateParameter(valid_602180, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602180 != nil:
    section.add "Version", valid_602180
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602181 = header.getOrDefault("X-Amz-Date")
  valid_602181 = validateParameter(valid_602181, JString, required = false,
                                 default = nil)
  if valid_602181 != nil:
    section.add "X-Amz-Date", valid_602181
  var valid_602182 = header.getOrDefault("X-Amz-Security-Token")
  valid_602182 = validateParameter(valid_602182, JString, required = false,
                                 default = nil)
  if valid_602182 != nil:
    section.add "X-Amz-Security-Token", valid_602182
  var valid_602183 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602183 = validateParameter(valid_602183, JString, required = false,
                                 default = nil)
  if valid_602183 != nil:
    section.add "X-Amz-Content-Sha256", valid_602183
  var valid_602184 = header.getOrDefault("X-Amz-Algorithm")
  valid_602184 = validateParameter(valid_602184, JString, required = false,
                                 default = nil)
  if valid_602184 != nil:
    section.add "X-Amz-Algorithm", valid_602184
  var valid_602185 = header.getOrDefault("X-Amz-Signature")
  valid_602185 = validateParameter(valid_602185, JString, required = false,
                                 default = nil)
  if valid_602185 != nil:
    section.add "X-Amz-Signature", valid_602185
  var valid_602186 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602186 = validateParameter(valid_602186, JString, required = false,
                                 default = nil)
  if valid_602186 != nil:
    section.add "X-Amz-SignedHeaders", valid_602186
  var valid_602187 = header.getOrDefault("X-Amz-Credential")
  valid_602187 = validateParameter(valid_602187, JString, required = false,
                                 default = nil)
  if valid_602187 != nil:
    section.add "X-Amz-Credential", valid_602187
  result.add "header", section
  ## parameters in `formData` object:
  ##   TemplateName: JString (required)
  ##               : The name of the template you want to retrieve.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TemplateName` field"
  var valid_602188 = formData.getOrDefault("TemplateName")
  valid_602188 = validateParameter(valid_602188, JString, required = true,
                                 default = nil)
  if valid_602188 != nil:
    section.add "TemplateName", valid_602188
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602189: Call_PostGetTemplate_602176; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Displays the template object (which includes the Subject line, HTML part and text part) for the template you specify.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_602189.validator(path, query, header, formData, body)
  let scheme = call_602189.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602189.url(scheme.get, call_602189.host, call_602189.base,
                         call_602189.route, valid.getOrDefault("path"))
  result = hook(call_602189, url, valid)

proc call*(call_602190: Call_PostGetTemplate_602176; TemplateName: string;
          Action: string = "GetTemplate"; Version: string = "2010-12-01"): Recallable =
  ## postGetTemplate
  ## <p>Displays the template object (which includes the Subject line, HTML part and text part) for the template you specify.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the template you want to retrieve.
  ##   Version: string (required)
  var query_602191 = newJObject()
  var formData_602192 = newJObject()
  add(query_602191, "Action", newJString(Action))
  add(formData_602192, "TemplateName", newJString(TemplateName))
  add(query_602191, "Version", newJString(Version))
  result = call_602190.call(nil, query_602191, nil, formData_602192, nil)

var postGetTemplate* = Call_PostGetTemplate_602176(name: "postGetTemplate",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=GetTemplate", validator: validate_PostGetTemplate_602177,
    base: "/", url: url_PostGetTemplate_602178, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetTemplate_602160 = ref object of OpenApiRestCall_600426
proc url_GetGetTemplate_602162(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetTemplate_602161(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Displays the template object (which includes the Subject line, HTML part and text part) for the template you specify.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the template you want to retrieve.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602163 = query.getOrDefault("Action")
  valid_602163 = validateParameter(valid_602163, JString, required = true,
                                 default = newJString("GetTemplate"))
  if valid_602163 != nil:
    section.add "Action", valid_602163
  var valid_602164 = query.getOrDefault("TemplateName")
  valid_602164 = validateParameter(valid_602164, JString, required = true,
                                 default = nil)
  if valid_602164 != nil:
    section.add "TemplateName", valid_602164
  var valid_602165 = query.getOrDefault("Version")
  valid_602165 = validateParameter(valid_602165, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602165 != nil:
    section.add "Version", valid_602165
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602166 = header.getOrDefault("X-Amz-Date")
  valid_602166 = validateParameter(valid_602166, JString, required = false,
                                 default = nil)
  if valid_602166 != nil:
    section.add "X-Amz-Date", valid_602166
  var valid_602167 = header.getOrDefault("X-Amz-Security-Token")
  valid_602167 = validateParameter(valid_602167, JString, required = false,
                                 default = nil)
  if valid_602167 != nil:
    section.add "X-Amz-Security-Token", valid_602167
  var valid_602168 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602168 = validateParameter(valid_602168, JString, required = false,
                                 default = nil)
  if valid_602168 != nil:
    section.add "X-Amz-Content-Sha256", valid_602168
  var valid_602169 = header.getOrDefault("X-Amz-Algorithm")
  valid_602169 = validateParameter(valid_602169, JString, required = false,
                                 default = nil)
  if valid_602169 != nil:
    section.add "X-Amz-Algorithm", valid_602169
  var valid_602170 = header.getOrDefault("X-Amz-Signature")
  valid_602170 = validateParameter(valid_602170, JString, required = false,
                                 default = nil)
  if valid_602170 != nil:
    section.add "X-Amz-Signature", valid_602170
  var valid_602171 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602171 = validateParameter(valid_602171, JString, required = false,
                                 default = nil)
  if valid_602171 != nil:
    section.add "X-Amz-SignedHeaders", valid_602171
  var valid_602172 = header.getOrDefault("X-Amz-Credential")
  valid_602172 = validateParameter(valid_602172, JString, required = false,
                                 default = nil)
  if valid_602172 != nil:
    section.add "X-Amz-Credential", valid_602172
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602173: Call_GetGetTemplate_602160; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Displays the template object (which includes the Subject line, HTML part and text part) for the template you specify.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_602173.validator(path, query, header, formData, body)
  let scheme = call_602173.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602173.url(scheme.get, call_602173.host, call_602173.base,
                         call_602173.route, valid.getOrDefault("path"))
  result = hook(call_602173, url, valid)

proc call*(call_602174: Call_GetGetTemplate_602160; TemplateName: string;
          Action: string = "GetTemplate"; Version: string = "2010-12-01"): Recallable =
  ## getGetTemplate
  ## <p>Displays the template object (which includes the Subject line, HTML part and text part) for the template you specify.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the template you want to retrieve.
  ##   Version: string (required)
  var query_602175 = newJObject()
  add(query_602175, "Action", newJString(Action))
  add(query_602175, "TemplateName", newJString(TemplateName))
  add(query_602175, "Version", newJString(Version))
  result = call_602174.call(nil, query_602175, nil, nil, nil)

var getGetTemplate* = Call_GetGetTemplate_602160(name: "getGetTemplate",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=GetTemplate", validator: validate_GetGetTemplate_602161,
    base: "/", url: url_GetGetTemplate_602162, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListConfigurationSets_602210 = ref object of OpenApiRestCall_600426
proc url_PostListConfigurationSets_602212(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListConfigurationSets_602211(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Provides a list of the configuration sets associated with your Amazon SES account in the current AWS Region. For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second. This operation will return up to 1,000 configuration sets each time it is run. If your Amazon SES account has more than 1,000 configuration sets, this operation will also return a NextToken element. You can then execute the <code>ListConfigurationSets</code> operation again, passing the <code>NextToken</code> parameter and the value of the NextToken element to retrieve additional results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602213 = query.getOrDefault("Action")
  valid_602213 = validateParameter(valid_602213, JString, required = true,
                                 default = newJString("ListConfigurationSets"))
  if valid_602213 != nil:
    section.add "Action", valid_602213
  var valid_602214 = query.getOrDefault("Version")
  valid_602214 = validateParameter(valid_602214, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602214 != nil:
    section.add "Version", valid_602214
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602215 = header.getOrDefault("X-Amz-Date")
  valid_602215 = validateParameter(valid_602215, JString, required = false,
                                 default = nil)
  if valid_602215 != nil:
    section.add "X-Amz-Date", valid_602215
  var valid_602216 = header.getOrDefault("X-Amz-Security-Token")
  valid_602216 = validateParameter(valid_602216, JString, required = false,
                                 default = nil)
  if valid_602216 != nil:
    section.add "X-Amz-Security-Token", valid_602216
  var valid_602217 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602217 = validateParameter(valid_602217, JString, required = false,
                                 default = nil)
  if valid_602217 != nil:
    section.add "X-Amz-Content-Sha256", valid_602217
  var valid_602218 = header.getOrDefault("X-Amz-Algorithm")
  valid_602218 = validateParameter(valid_602218, JString, required = false,
                                 default = nil)
  if valid_602218 != nil:
    section.add "X-Amz-Algorithm", valid_602218
  var valid_602219 = header.getOrDefault("X-Amz-Signature")
  valid_602219 = validateParameter(valid_602219, JString, required = false,
                                 default = nil)
  if valid_602219 != nil:
    section.add "X-Amz-Signature", valid_602219
  var valid_602220 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602220 = validateParameter(valid_602220, JString, required = false,
                                 default = nil)
  if valid_602220 != nil:
    section.add "X-Amz-SignedHeaders", valid_602220
  var valid_602221 = header.getOrDefault("X-Amz-Credential")
  valid_602221 = validateParameter(valid_602221, JString, required = false,
                                 default = nil)
  if valid_602221 != nil:
    section.add "X-Amz-Credential", valid_602221
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : A token returned from a previous call to <code>ListConfigurationSets</code> to indicate the position of the configuration set in the configuration set list.
  ##   MaxItems: JInt
  ##           : The number of configuration sets to return.
  section = newJObject()
  var valid_602222 = formData.getOrDefault("NextToken")
  valid_602222 = validateParameter(valid_602222, JString, required = false,
                                 default = nil)
  if valid_602222 != nil:
    section.add "NextToken", valid_602222
  var valid_602223 = formData.getOrDefault("MaxItems")
  valid_602223 = validateParameter(valid_602223, JInt, required = false, default = nil)
  if valid_602223 != nil:
    section.add "MaxItems", valid_602223
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602224: Call_PostListConfigurationSets_602210; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Provides a list of the configuration sets associated with your Amazon SES account in the current AWS Region. For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second. This operation will return up to 1,000 configuration sets each time it is run. If your Amazon SES account has more than 1,000 configuration sets, this operation will also return a NextToken element. You can then execute the <code>ListConfigurationSets</code> operation again, passing the <code>NextToken</code> parameter and the value of the NextToken element to retrieve additional results.</p>
  ## 
  let valid = call_602224.validator(path, query, header, formData, body)
  let scheme = call_602224.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602224.url(scheme.get, call_602224.host, call_602224.base,
                         call_602224.route, valid.getOrDefault("path"))
  result = hook(call_602224, url, valid)

proc call*(call_602225: Call_PostListConfigurationSets_602210;
          NextToken: string = ""; Action: string = "ListConfigurationSets";
          MaxItems: int = 0; Version: string = "2010-12-01"): Recallable =
  ## postListConfigurationSets
  ## <p>Provides a list of the configuration sets associated with your Amazon SES account in the current AWS Region. For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second. This operation will return up to 1,000 configuration sets each time it is run. If your Amazon SES account has more than 1,000 configuration sets, this operation will also return a NextToken element. You can then execute the <code>ListConfigurationSets</code> operation again, passing the <code>NextToken</code> parameter and the value of the NextToken element to retrieve additional results.</p>
  ##   NextToken: string
  ##            : A token returned from a previous call to <code>ListConfigurationSets</code> to indicate the position of the configuration set in the configuration set list.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : The number of configuration sets to return.
  ##   Version: string (required)
  var query_602226 = newJObject()
  var formData_602227 = newJObject()
  add(formData_602227, "NextToken", newJString(NextToken))
  add(query_602226, "Action", newJString(Action))
  add(formData_602227, "MaxItems", newJInt(MaxItems))
  add(query_602226, "Version", newJString(Version))
  result = call_602225.call(nil, query_602226, nil, formData_602227, nil)

var postListConfigurationSets* = Call_PostListConfigurationSets_602210(
    name: "postListConfigurationSets", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ListConfigurationSets",
    validator: validate_PostListConfigurationSets_602211, base: "/",
    url: url_PostListConfigurationSets_602212,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListConfigurationSets_602193 = ref object of OpenApiRestCall_600426
proc url_GetListConfigurationSets_602195(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListConfigurationSets_602194(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Provides a list of the configuration sets associated with your Amazon SES account in the current AWS Region. For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second. This operation will return up to 1,000 configuration sets each time it is run. If your Amazon SES account has more than 1,000 configuration sets, this operation will also return a NextToken element. You can then execute the <code>ListConfigurationSets</code> operation again, passing the <code>NextToken</code> parameter and the value of the NextToken element to retrieve additional results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : A token returned from a previous call to <code>ListConfigurationSets</code> to indicate the position of the configuration set in the configuration set list.
  ##   Action: JString (required)
  ##   MaxItems: JInt
  ##           : The number of configuration sets to return.
  ##   Version: JString (required)
  section = newJObject()
  var valid_602196 = query.getOrDefault("NextToken")
  valid_602196 = validateParameter(valid_602196, JString, required = false,
                                 default = nil)
  if valid_602196 != nil:
    section.add "NextToken", valid_602196
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602197 = query.getOrDefault("Action")
  valid_602197 = validateParameter(valid_602197, JString, required = true,
                                 default = newJString("ListConfigurationSets"))
  if valid_602197 != nil:
    section.add "Action", valid_602197
  var valid_602198 = query.getOrDefault("MaxItems")
  valid_602198 = validateParameter(valid_602198, JInt, required = false, default = nil)
  if valid_602198 != nil:
    section.add "MaxItems", valid_602198
  var valid_602199 = query.getOrDefault("Version")
  valid_602199 = validateParameter(valid_602199, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602199 != nil:
    section.add "Version", valid_602199
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602200 = header.getOrDefault("X-Amz-Date")
  valid_602200 = validateParameter(valid_602200, JString, required = false,
                                 default = nil)
  if valid_602200 != nil:
    section.add "X-Amz-Date", valid_602200
  var valid_602201 = header.getOrDefault("X-Amz-Security-Token")
  valid_602201 = validateParameter(valid_602201, JString, required = false,
                                 default = nil)
  if valid_602201 != nil:
    section.add "X-Amz-Security-Token", valid_602201
  var valid_602202 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602202 = validateParameter(valid_602202, JString, required = false,
                                 default = nil)
  if valid_602202 != nil:
    section.add "X-Amz-Content-Sha256", valid_602202
  var valid_602203 = header.getOrDefault("X-Amz-Algorithm")
  valid_602203 = validateParameter(valid_602203, JString, required = false,
                                 default = nil)
  if valid_602203 != nil:
    section.add "X-Amz-Algorithm", valid_602203
  var valid_602204 = header.getOrDefault("X-Amz-Signature")
  valid_602204 = validateParameter(valid_602204, JString, required = false,
                                 default = nil)
  if valid_602204 != nil:
    section.add "X-Amz-Signature", valid_602204
  var valid_602205 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602205 = validateParameter(valid_602205, JString, required = false,
                                 default = nil)
  if valid_602205 != nil:
    section.add "X-Amz-SignedHeaders", valid_602205
  var valid_602206 = header.getOrDefault("X-Amz-Credential")
  valid_602206 = validateParameter(valid_602206, JString, required = false,
                                 default = nil)
  if valid_602206 != nil:
    section.add "X-Amz-Credential", valid_602206
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602207: Call_GetListConfigurationSets_602193; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Provides a list of the configuration sets associated with your Amazon SES account in the current AWS Region. For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second. This operation will return up to 1,000 configuration sets each time it is run. If your Amazon SES account has more than 1,000 configuration sets, this operation will also return a NextToken element. You can then execute the <code>ListConfigurationSets</code> operation again, passing the <code>NextToken</code> parameter and the value of the NextToken element to retrieve additional results.</p>
  ## 
  let valid = call_602207.validator(path, query, header, formData, body)
  let scheme = call_602207.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602207.url(scheme.get, call_602207.host, call_602207.base,
                         call_602207.route, valid.getOrDefault("path"))
  result = hook(call_602207, url, valid)

proc call*(call_602208: Call_GetListConfigurationSets_602193;
          NextToken: string = ""; Action: string = "ListConfigurationSets";
          MaxItems: int = 0; Version: string = "2010-12-01"): Recallable =
  ## getListConfigurationSets
  ## <p>Provides a list of the configuration sets associated with your Amazon SES account in the current AWS Region. For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second. This operation will return up to 1,000 configuration sets each time it is run. If your Amazon SES account has more than 1,000 configuration sets, this operation will also return a NextToken element. You can then execute the <code>ListConfigurationSets</code> operation again, passing the <code>NextToken</code> parameter and the value of the NextToken element to retrieve additional results.</p>
  ##   NextToken: string
  ##            : A token returned from a previous call to <code>ListConfigurationSets</code> to indicate the position of the configuration set in the configuration set list.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : The number of configuration sets to return.
  ##   Version: string (required)
  var query_602209 = newJObject()
  add(query_602209, "NextToken", newJString(NextToken))
  add(query_602209, "Action", newJString(Action))
  add(query_602209, "MaxItems", newJInt(MaxItems))
  add(query_602209, "Version", newJString(Version))
  result = call_602208.call(nil, query_602209, nil, nil, nil)

var getListConfigurationSets* = Call_GetListConfigurationSets_602193(
    name: "getListConfigurationSets", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=ListConfigurationSets",
    validator: validate_GetListConfigurationSets_602194, base: "/",
    url: url_GetListConfigurationSets_602195, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListCustomVerificationEmailTemplates_602245 = ref object of OpenApiRestCall_600426
proc url_PostListCustomVerificationEmailTemplates_602247(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListCustomVerificationEmailTemplates_602246(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the existing custom verification email templates for your account in the current AWS Region.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602248 = query.getOrDefault("Action")
  valid_602248 = validateParameter(valid_602248, JString, required = true, default = newJString(
      "ListCustomVerificationEmailTemplates"))
  if valid_602248 != nil:
    section.add "Action", valid_602248
  var valid_602249 = query.getOrDefault("Version")
  valid_602249 = validateParameter(valid_602249, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602249 != nil:
    section.add "Version", valid_602249
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602250 = header.getOrDefault("X-Amz-Date")
  valid_602250 = validateParameter(valid_602250, JString, required = false,
                                 default = nil)
  if valid_602250 != nil:
    section.add "X-Amz-Date", valid_602250
  var valid_602251 = header.getOrDefault("X-Amz-Security-Token")
  valid_602251 = validateParameter(valid_602251, JString, required = false,
                                 default = nil)
  if valid_602251 != nil:
    section.add "X-Amz-Security-Token", valid_602251
  var valid_602252 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602252 = validateParameter(valid_602252, JString, required = false,
                                 default = nil)
  if valid_602252 != nil:
    section.add "X-Amz-Content-Sha256", valid_602252
  var valid_602253 = header.getOrDefault("X-Amz-Algorithm")
  valid_602253 = validateParameter(valid_602253, JString, required = false,
                                 default = nil)
  if valid_602253 != nil:
    section.add "X-Amz-Algorithm", valid_602253
  var valid_602254 = header.getOrDefault("X-Amz-Signature")
  valid_602254 = validateParameter(valid_602254, JString, required = false,
                                 default = nil)
  if valid_602254 != nil:
    section.add "X-Amz-Signature", valid_602254
  var valid_602255 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602255 = validateParameter(valid_602255, JString, required = false,
                                 default = nil)
  if valid_602255 != nil:
    section.add "X-Amz-SignedHeaders", valid_602255
  var valid_602256 = header.getOrDefault("X-Amz-Credential")
  valid_602256 = validateParameter(valid_602256, JString, required = false,
                                 default = nil)
  if valid_602256 != nil:
    section.add "X-Amz-Credential", valid_602256
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : An array the contains the name and creation time stamp for each template in your Amazon SES account.
  ##   MaxResults: JInt
  ##             : The maximum number of custom verification email templates to return. This value must be at least 1 and less than or equal to 50. If you do not specify a value, or if you specify a value less than 1 or greater than 50, the operation will return up to 50 results.
  section = newJObject()
  var valid_602257 = formData.getOrDefault("NextToken")
  valid_602257 = validateParameter(valid_602257, JString, required = false,
                                 default = nil)
  if valid_602257 != nil:
    section.add "NextToken", valid_602257
  var valid_602258 = formData.getOrDefault("MaxResults")
  valid_602258 = validateParameter(valid_602258, JInt, required = false, default = nil)
  if valid_602258 != nil:
    section.add "MaxResults", valid_602258
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602259: Call_PostListCustomVerificationEmailTemplates_602245;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Lists the existing custom verification email templates for your account in the current AWS Region.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_602259.validator(path, query, header, formData, body)
  let scheme = call_602259.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602259.url(scheme.get, call_602259.host, call_602259.base,
                         call_602259.route, valid.getOrDefault("path"))
  result = hook(call_602259, url, valid)

proc call*(call_602260: Call_PostListCustomVerificationEmailTemplates_602245;
          NextToken: string = ""; MaxResults: int = 0;
          Action: string = "ListCustomVerificationEmailTemplates";
          Version: string = "2010-12-01"): Recallable =
  ## postListCustomVerificationEmailTemplates
  ## <p>Lists the existing custom verification email templates for your account in the current AWS Region.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : An array the contains the name and creation time stamp for each template in your Amazon SES account.
  ##   MaxResults: int
  ##             : The maximum number of custom verification email templates to return. This value must be at least 1 and less than or equal to 50. If you do not specify a value, or if you specify a value less than 1 or greater than 50, the operation will return up to 50 results.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602261 = newJObject()
  var formData_602262 = newJObject()
  add(formData_602262, "NextToken", newJString(NextToken))
  add(formData_602262, "MaxResults", newJInt(MaxResults))
  add(query_602261, "Action", newJString(Action))
  add(query_602261, "Version", newJString(Version))
  result = call_602260.call(nil, query_602261, nil, formData_602262, nil)

var postListCustomVerificationEmailTemplates* = Call_PostListCustomVerificationEmailTemplates_602245(
    name: "postListCustomVerificationEmailTemplates", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=ListCustomVerificationEmailTemplates",
    validator: validate_PostListCustomVerificationEmailTemplates_602246,
    base: "/", url: url_PostListCustomVerificationEmailTemplates_602247,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListCustomVerificationEmailTemplates_602228 = ref object of OpenApiRestCall_600426
proc url_GetListCustomVerificationEmailTemplates_602230(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListCustomVerificationEmailTemplates_602229(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the existing custom verification email templates for your account in the current AWS Region.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : An array the contains the name and creation time stamp for each template in your Amazon SES account.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxResults: JInt
  ##             : The maximum number of custom verification email templates to return. This value must be at least 1 and less than or equal to 50. If you do not specify a value, or if you specify a value less than 1 or greater than 50, the operation will return up to 50 results.
  section = newJObject()
  var valid_602231 = query.getOrDefault("NextToken")
  valid_602231 = validateParameter(valid_602231, JString, required = false,
                                 default = nil)
  if valid_602231 != nil:
    section.add "NextToken", valid_602231
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602232 = query.getOrDefault("Action")
  valid_602232 = validateParameter(valid_602232, JString, required = true, default = newJString(
      "ListCustomVerificationEmailTemplates"))
  if valid_602232 != nil:
    section.add "Action", valid_602232
  var valid_602233 = query.getOrDefault("Version")
  valid_602233 = validateParameter(valid_602233, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602233 != nil:
    section.add "Version", valid_602233
  var valid_602234 = query.getOrDefault("MaxResults")
  valid_602234 = validateParameter(valid_602234, JInt, required = false, default = nil)
  if valid_602234 != nil:
    section.add "MaxResults", valid_602234
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602235 = header.getOrDefault("X-Amz-Date")
  valid_602235 = validateParameter(valid_602235, JString, required = false,
                                 default = nil)
  if valid_602235 != nil:
    section.add "X-Amz-Date", valid_602235
  var valid_602236 = header.getOrDefault("X-Amz-Security-Token")
  valid_602236 = validateParameter(valid_602236, JString, required = false,
                                 default = nil)
  if valid_602236 != nil:
    section.add "X-Amz-Security-Token", valid_602236
  var valid_602237 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602237 = validateParameter(valid_602237, JString, required = false,
                                 default = nil)
  if valid_602237 != nil:
    section.add "X-Amz-Content-Sha256", valid_602237
  var valid_602238 = header.getOrDefault("X-Amz-Algorithm")
  valid_602238 = validateParameter(valid_602238, JString, required = false,
                                 default = nil)
  if valid_602238 != nil:
    section.add "X-Amz-Algorithm", valid_602238
  var valid_602239 = header.getOrDefault("X-Amz-Signature")
  valid_602239 = validateParameter(valid_602239, JString, required = false,
                                 default = nil)
  if valid_602239 != nil:
    section.add "X-Amz-Signature", valid_602239
  var valid_602240 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602240 = validateParameter(valid_602240, JString, required = false,
                                 default = nil)
  if valid_602240 != nil:
    section.add "X-Amz-SignedHeaders", valid_602240
  var valid_602241 = header.getOrDefault("X-Amz-Credential")
  valid_602241 = validateParameter(valid_602241, JString, required = false,
                                 default = nil)
  if valid_602241 != nil:
    section.add "X-Amz-Credential", valid_602241
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602242: Call_GetListCustomVerificationEmailTemplates_602228;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Lists the existing custom verification email templates for your account in the current AWS Region.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_602242.validator(path, query, header, formData, body)
  let scheme = call_602242.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602242.url(scheme.get, call_602242.host, call_602242.base,
                         call_602242.route, valid.getOrDefault("path"))
  result = hook(call_602242, url, valid)

proc call*(call_602243: Call_GetListCustomVerificationEmailTemplates_602228;
          NextToken: string = "";
          Action: string = "ListCustomVerificationEmailTemplates";
          Version: string = "2010-12-01"; MaxResults: int = 0): Recallable =
  ## getListCustomVerificationEmailTemplates
  ## <p>Lists the existing custom verification email templates for your account in the current AWS Region.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : An array the contains the name and creation time stamp for each template in your Amazon SES account.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxResults: int
  ##             : The maximum number of custom verification email templates to return. This value must be at least 1 and less than or equal to 50. If you do not specify a value, or if you specify a value less than 1 or greater than 50, the operation will return up to 50 results.
  var query_602244 = newJObject()
  add(query_602244, "NextToken", newJString(NextToken))
  add(query_602244, "Action", newJString(Action))
  add(query_602244, "Version", newJString(Version))
  add(query_602244, "MaxResults", newJInt(MaxResults))
  result = call_602243.call(nil, query_602244, nil, nil, nil)

var getListCustomVerificationEmailTemplates* = Call_GetListCustomVerificationEmailTemplates_602228(
    name: "getListCustomVerificationEmailTemplates", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=ListCustomVerificationEmailTemplates",
    validator: validate_GetListCustomVerificationEmailTemplates_602229, base: "/",
    url: url_GetListCustomVerificationEmailTemplates_602230,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListIdentities_602281 = ref object of OpenApiRestCall_600426
proc url_PostListIdentities_602283(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListIdentities_602282(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Returns a list containing all of the identities (email addresses and domains) for your AWS account in the current AWS Region, regardless of verification status.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602284 = query.getOrDefault("Action")
  valid_602284 = validateParameter(valid_602284, JString, required = true,
                                 default = newJString("ListIdentities"))
  if valid_602284 != nil:
    section.add "Action", valid_602284
  var valid_602285 = query.getOrDefault("Version")
  valid_602285 = validateParameter(valid_602285, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602285 != nil:
    section.add "Version", valid_602285
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602286 = header.getOrDefault("X-Amz-Date")
  valid_602286 = validateParameter(valid_602286, JString, required = false,
                                 default = nil)
  if valid_602286 != nil:
    section.add "X-Amz-Date", valid_602286
  var valid_602287 = header.getOrDefault("X-Amz-Security-Token")
  valid_602287 = validateParameter(valid_602287, JString, required = false,
                                 default = nil)
  if valid_602287 != nil:
    section.add "X-Amz-Security-Token", valid_602287
  var valid_602288 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602288 = validateParameter(valid_602288, JString, required = false,
                                 default = nil)
  if valid_602288 != nil:
    section.add "X-Amz-Content-Sha256", valid_602288
  var valid_602289 = header.getOrDefault("X-Amz-Algorithm")
  valid_602289 = validateParameter(valid_602289, JString, required = false,
                                 default = nil)
  if valid_602289 != nil:
    section.add "X-Amz-Algorithm", valid_602289
  var valid_602290 = header.getOrDefault("X-Amz-Signature")
  valid_602290 = validateParameter(valid_602290, JString, required = false,
                                 default = nil)
  if valid_602290 != nil:
    section.add "X-Amz-Signature", valid_602290
  var valid_602291 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602291 = validateParameter(valid_602291, JString, required = false,
                                 default = nil)
  if valid_602291 != nil:
    section.add "X-Amz-SignedHeaders", valid_602291
  var valid_602292 = header.getOrDefault("X-Amz-Credential")
  valid_602292 = validateParameter(valid_602292, JString, required = false,
                                 default = nil)
  if valid_602292 != nil:
    section.add "X-Amz-Credential", valid_602292
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : The token to use for pagination.
  ##   IdentityType: JString
  ##               : The type of the identities to list. Possible values are "EmailAddress" and "Domain". If this parameter is omitted, then all identities will be listed.
  ##   MaxItems: JInt
  ##           : The maximum number of identities per page. Possible values are 1-1000 inclusive.
  section = newJObject()
  var valid_602293 = formData.getOrDefault("NextToken")
  valid_602293 = validateParameter(valid_602293, JString, required = false,
                                 default = nil)
  if valid_602293 != nil:
    section.add "NextToken", valid_602293
  var valid_602294 = formData.getOrDefault("IdentityType")
  valid_602294 = validateParameter(valid_602294, JString, required = false,
                                 default = newJString("EmailAddress"))
  if valid_602294 != nil:
    section.add "IdentityType", valid_602294
  var valid_602295 = formData.getOrDefault("MaxItems")
  valid_602295 = validateParameter(valid_602295, JInt, required = false, default = nil)
  if valid_602295 != nil:
    section.add "MaxItems", valid_602295
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602296: Call_PostListIdentities_602281; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list containing all of the identities (email addresses and domains) for your AWS account in the current AWS Region, regardless of verification status.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_602296.validator(path, query, header, formData, body)
  let scheme = call_602296.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602296.url(scheme.get, call_602296.host, call_602296.base,
                         call_602296.route, valid.getOrDefault("path"))
  result = hook(call_602296, url, valid)

proc call*(call_602297: Call_PostListIdentities_602281; NextToken: string = "";
          IdentityType: string = "EmailAddress"; Action: string = "ListIdentities";
          MaxItems: int = 0; Version: string = "2010-12-01"): Recallable =
  ## postListIdentities
  ## <p>Returns a list containing all of the identities (email addresses and domains) for your AWS account in the current AWS Region, regardless of verification status.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : The token to use for pagination.
  ##   IdentityType: string
  ##               : The type of the identities to list. Possible values are "EmailAddress" and "Domain". If this parameter is omitted, then all identities will be listed.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : The maximum number of identities per page. Possible values are 1-1000 inclusive.
  ##   Version: string (required)
  var query_602298 = newJObject()
  var formData_602299 = newJObject()
  add(formData_602299, "NextToken", newJString(NextToken))
  add(formData_602299, "IdentityType", newJString(IdentityType))
  add(query_602298, "Action", newJString(Action))
  add(formData_602299, "MaxItems", newJInt(MaxItems))
  add(query_602298, "Version", newJString(Version))
  result = call_602297.call(nil, query_602298, nil, formData_602299, nil)

var postListIdentities* = Call_PostListIdentities_602281(
    name: "postListIdentities", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ListIdentities",
    validator: validate_PostListIdentities_602282, base: "/",
    url: url_PostListIdentities_602283, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListIdentities_602263 = ref object of OpenApiRestCall_600426
proc url_GetListIdentities_602265(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListIdentities_602264(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Returns a list containing all of the identities (email addresses and domains) for your AWS account in the current AWS Region, regardless of verification status.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : The token to use for pagination.
  ##   Action: JString (required)
  ##   IdentityType: JString
  ##               : The type of the identities to list. Possible values are "EmailAddress" and "Domain". If this parameter is omitted, then all identities will be listed.
  ##   MaxItems: JInt
  ##           : The maximum number of identities per page. Possible values are 1-1000 inclusive.
  ##   Version: JString (required)
  section = newJObject()
  var valid_602266 = query.getOrDefault("NextToken")
  valid_602266 = validateParameter(valid_602266, JString, required = false,
                                 default = nil)
  if valid_602266 != nil:
    section.add "NextToken", valid_602266
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602267 = query.getOrDefault("Action")
  valid_602267 = validateParameter(valid_602267, JString, required = true,
                                 default = newJString("ListIdentities"))
  if valid_602267 != nil:
    section.add "Action", valid_602267
  var valid_602268 = query.getOrDefault("IdentityType")
  valid_602268 = validateParameter(valid_602268, JString, required = false,
                                 default = newJString("EmailAddress"))
  if valid_602268 != nil:
    section.add "IdentityType", valid_602268
  var valid_602269 = query.getOrDefault("MaxItems")
  valid_602269 = validateParameter(valid_602269, JInt, required = false, default = nil)
  if valid_602269 != nil:
    section.add "MaxItems", valid_602269
  var valid_602270 = query.getOrDefault("Version")
  valid_602270 = validateParameter(valid_602270, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602270 != nil:
    section.add "Version", valid_602270
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602271 = header.getOrDefault("X-Amz-Date")
  valid_602271 = validateParameter(valid_602271, JString, required = false,
                                 default = nil)
  if valid_602271 != nil:
    section.add "X-Amz-Date", valid_602271
  var valid_602272 = header.getOrDefault("X-Amz-Security-Token")
  valid_602272 = validateParameter(valid_602272, JString, required = false,
                                 default = nil)
  if valid_602272 != nil:
    section.add "X-Amz-Security-Token", valid_602272
  var valid_602273 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602273 = validateParameter(valid_602273, JString, required = false,
                                 default = nil)
  if valid_602273 != nil:
    section.add "X-Amz-Content-Sha256", valid_602273
  var valid_602274 = header.getOrDefault("X-Amz-Algorithm")
  valid_602274 = validateParameter(valid_602274, JString, required = false,
                                 default = nil)
  if valid_602274 != nil:
    section.add "X-Amz-Algorithm", valid_602274
  var valid_602275 = header.getOrDefault("X-Amz-Signature")
  valid_602275 = validateParameter(valid_602275, JString, required = false,
                                 default = nil)
  if valid_602275 != nil:
    section.add "X-Amz-Signature", valid_602275
  var valid_602276 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602276 = validateParameter(valid_602276, JString, required = false,
                                 default = nil)
  if valid_602276 != nil:
    section.add "X-Amz-SignedHeaders", valid_602276
  var valid_602277 = header.getOrDefault("X-Amz-Credential")
  valid_602277 = validateParameter(valid_602277, JString, required = false,
                                 default = nil)
  if valid_602277 != nil:
    section.add "X-Amz-Credential", valid_602277
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602278: Call_GetListIdentities_602263; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list containing all of the identities (email addresses and domains) for your AWS account in the current AWS Region, regardless of verification status.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_602278.validator(path, query, header, formData, body)
  let scheme = call_602278.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602278.url(scheme.get, call_602278.host, call_602278.base,
                         call_602278.route, valid.getOrDefault("path"))
  result = hook(call_602278, url, valid)

proc call*(call_602279: Call_GetListIdentities_602263; NextToken: string = "";
          Action: string = "ListIdentities"; IdentityType: string = "EmailAddress";
          MaxItems: int = 0; Version: string = "2010-12-01"): Recallable =
  ## getListIdentities
  ## <p>Returns a list containing all of the identities (email addresses and domains) for your AWS account in the current AWS Region, regardless of verification status.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : The token to use for pagination.
  ##   Action: string (required)
  ##   IdentityType: string
  ##               : The type of the identities to list. Possible values are "EmailAddress" and "Domain". If this parameter is omitted, then all identities will be listed.
  ##   MaxItems: int
  ##           : The maximum number of identities per page. Possible values are 1-1000 inclusive.
  ##   Version: string (required)
  var query_602280 = newJObject()
  add(query_602280, "NextToken", newJString(NextToken))
  add(query_602280, "Action", newJString(Action))
  add(query_602280, "IdentityType", newJString(IdentityType))
  add(query_602280, "MaxItems", newJInt(MaxItems))
  add(query_602280, "Version", newJString(Version))
  result = call_602279.call(nil, query_602280, nil, nil, nil)

var getListIdentities* = Call_GetListIdentities_602263(name: "getListIdentities",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=ListIdentities", validator: validate_GetListIdentities_602264,
    base: "/", url: url_GetListIdentities_602265,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListIdentityPolicies_602316 = ref object of OpenApiRestCall_600426
proc url_PostListIdentityPolicies_602318(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListIdentityPolicies_602317(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of sending authorization policies that are attached to the given identity (an email address or a domain). This API returns only a list. If you want the actual policy content, you can use <code>GetIdentityPolicies</code>.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602319 = query.getOrDefault("Action")
  valid_602319 = validateParameter(valid_602319, JString, required = true,
                                 default = newJString("ListIdentityPolicies"))
  if valid_602319 != nil:
    section.add "Action", valid_602319
  var valid_602320 = query.getOrDefault("Version")
  valid_602320 = validateParameter(valid_602320, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602320 != nil:
    section.add "Version", valid_602320
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602321 = header.getOrDefault("X-Amz-Date")
  valid_602321 = validateParameter(valid_602321, JString, required = false,
                                 default = nil)
  if valid_602321 != nil:
    section.add "X-Amz-Date", valid_602321
  var valid_602322 = header.getOrDefault("X-Amz-Security-Token")
  valid_602322 = validateParameter(valid_602322, JString, required = false,
                                 default = nil)
  if valid_602322 != nil:
    section.add "X-Amz-Security-Token", valid_602322
  var valid_602323 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602323 = validateParameter(valid_602323, JString, required = false,
                                 default = nil)
  if valid_602323 != nil:
    section.add "X-Amz-Content-Sha256", valid_602323
  var valid_602324 = header.getOrDefault("X-Amz-Algorithm")
  valid_602324 = validateParameter(valid_602324, JString, required = false,
                                 default = nil)
  if valid_602324 != nil:
    section.add "X-Amz-Algorithm", valid_602324
  var valid_602325 = header.getOrDefault("X-Amz-Signature")
  valid_602325 = validateParameter(valid_602325, JString, required = false,
                                 default = nil)
  if valid_602325 != nil:
    section.add "X-Amz-Signature", valid_602325
  var valid_602326 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602326 = validateParameter(valid_602326, JString, required = false,
                                 default = nil)
  if valid_602326 != nil:
    section.add "X-Amz-SignedHeaders", valid_602326
  var valid_602327 = header.getOrDefault("X-Amz-Credential")
  valid_602327 = validateParameter(valid_602327, JString, required = false,
                                 default = nil)
  if valid_602327 != nil:
    section.add "X-Amz-Credential", valid_602327
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identity: JString (required)
  ##           : <p>The identity that is associated with the policy for which the policies will be listed. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identity` field"
  var valid_602328 = formData.getOrDefault("Identity")
  valid_602328 = validateParameter(valid_602328, JString, required = true,
                                 default = nil)
  if valid_602328 != nil:
    section.add "Identity", valid_602328
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602329: Call_PostListIdentityPolicies_602316; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list of sending authorization policies that are attached to the given identity (an email address or a domain). This API returns only a list. If you want the actual policy content, you can use <code>GetIdentityPolicies</code>.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_602329.validator(path, query, header, formData, body)
  let scheme = call_602329.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602329.url(scheme.get, call_602329.host, call_602329.base,
                         call_602329.route, valid.getOrDefault("path"))
  result = hook(call_602329, url, valid)

proc call*(call_602330: Call_PostListIdentityPolicies_602316; Identity: string;
          Action: string = "ListIdentityPolicies"; Version: string = "2010-12-01"): Recallable =
  ## postListIdentityPolicies
  ## <p>Returns a list of sending authorization policies that are attached to the given identity (an email address or a domain). This API returns only a list. If you want the actual policy content, you can use <code>GetIdentityPolicies</code>.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : <p>The identity that is associated with the policy for which the policies will be listed. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602331 = newJObject()
  var formData_602332 = newJObject()
  add(formData_602332, "Identity", newJString(Identity))
  add(query_602331, "Action", newJString(Action))
  add(query_602331, "Version", newJString(Version))
  result = call_602330.call(nil, query_602331, nil, formData_602332, nil)

var postListIdentityPolicies* = Call_PostListIdentityPolicies_602316(
    name: "postListIdentityPolicies", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ListIdentityPolicies",
    validator: validate_PostListIdentityPolicies_602317, base: "/",
    url: url_PostListIdentityPolicies_602318, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListIdentityPolicies_602300 = ref object of OpenApiRestCall_600426
proc url_GetListIdentityPolicies_602302(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListIdentityPolicies_602301(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of sending authorization policies that are attached to the given identity (an email address or a domain). This API returns only a list. If you want the actual policy content, you can use <code>GetIdentityPolicies</code>.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : <p>The identity that is associated with the policy for which the policies will be listed. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_602303 = query.getOrDefault("Identity")
  valid_602303 = validateParameter(valid_602303, JString, required = true,
                                 default = nil)
  if valid_602303 != nil:
    section.add "Identity", valid_602303
  var valid_602304 = query.getOrDefault("Action")
  valid_602304 = validateParameter(valid_602304, JString, required = true,
                                 default = newJString("ListIdentityPolicies"))
  if valid_602304 != nil:
    section.add "Action", valid_602304
  var valid_602305 = query.getOrDefault("Version")
  valid_602305 = validateParameter(valid_602305, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602305 != nil:
    section.add "Version", valid_602305
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602306 = header.getOrDefault("X-Amz-Date")
  valid_602306 = validateParameter(valid_602306, JString, required = false,
                                 default = nil)
  if valid_602306 != nil:
    section.add "X-Amz-Date", valid_602306
  var valid_602307 = header.getOrDefault("X-Amz-Security-Token")
  valid_602307 = validateParameter(valid_602307, JString, required = false,
                                 default = nil)
  if valid_602307 != nil:
    section.add "X-Amz-Security-Token", valid_602307
  var valid_602308 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602308 = validateParameter(valid_602308, JString, required = false,
                                 default = nil)
  if valid_602308 != nil:
    section.add "X-Amz-Content-Sha256", valid_602308
  var valid_602309 = header.getOrDefault("X-Amz-Algorithm")
  valid_602309 = validateParameter(valid_602309, JString, required = false,
                                 default = nil)
  if valid_602309 != nil:
    section.add "X-Amz-Algorithm", valid_602309
  var valid_602310 = header.getOrDefault("X-Amz-Signature")
  valid_602310 = validateParameter(valid_602310, JString, required = false,
                                 default = nil)
  if valid_602310 != nil:
    section.add "X-Amz-Signature", valid_602310
  var valid_602311 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602311 = validateParameter(valid_602311, JString, required = false,
                                 default = nil)
  if valid_602311 != nil:
    section.add "X-Amz-SignedHeaders", valid_602311
  var valid_602312 = header.getOrDefault("X-Amz-Credential")
  valid_602312 = validateParameter(valid_602312, JString, required = false,
                                 default = nil)
  if valid_602312 != nil:
    section.add "X-Amz-Credential", valid_602312
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602313: Call_GetListIdentityPolicies_602300; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list of sending authorization policies that are attached to the given identity (an email address or a domain). This API returns only a list. If you want the actual policy content, you can use <code>GetIdentityPolicies</code>.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_602313.validator(path, query, header, formData, body)
  let scheme = call_602313.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602313.url(scheme.get, call_602313.host, call_602313.base,
                         call_602313.route, valid.getOrDefault("path"))
  result = hook(call_602313, url, valid)

proc call*(call_602314: Call_GetListIdentityPolicies_602300; Identity: string;
          Action: string = "ListIdentityPolicies"; Version: string = "2010-12-01"): Recallable =
  ## getListIdentityPolicies
  ## <p>Returns a list of sending authorization policies that are attached to the given identity (an email address or a domain). This API returns only a list. If you want the actual policy content, you can use <code>GetIdentityPolicies</code>.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : <p>The identity that is associated with the policy for which the policies will be listed. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602315 = newJObject()
  add(query_602315, "Identity", newJString(Identity))
  add(query_602315, "Action", newJString(Action))
  add(query_602315, "Version", newJString(Version))
  result = call_602314.call(nil, query_602315, nil, nil, nil)

var getListIdentityPolicies* = Call_GetListIdentityPolicies_602300(
    name: "getListIdentityPolicies", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=ListIdentityPolicies",
    validator: validate_GetListIdentityPolicies_602301, base: "/",
    url: url_GetListIdentityPolicies_602302, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListReceiptFilters_602348 = ref object of OpenApiRestCall_600426
proc url_PostListReceiptFilters_602350(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListReceiptFilters_602349(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IP address filters associated with your AWS account in the current AWS Region.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602351 = query.getOrDefault("Action")
  valid_602351 = validateParameter(valid_602351, JString, required = true,
                                 default = newJString("ListReceiptFilters"))
  if valid_602351 != nil:
    section.add "Action", valid_602351
  var valid_602352 = query.getOrDefault("Version")
  valid_602352 = validateParameter(valid_602352, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602352 != nil:
    section.add "Version", valid_602352
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602353 = header.getOrDefault("X-Amz-Date")
  valid_602353 = validateParameter(valid_602353, JString, required = false,
                                 default = nil)
  if valid_602353 != nil:
    section.add "X-Amz-Date", valid_602353
  var valid_602354 = header.getOrDefault("X-Amz-Security-Token")
  valid_602354 = validateParameter(valid_602354, JString, required = false,
                                 default = nil)
  if valid_602354 != nil:
    section.add "X-Amz-Security-Token", valid_602354
  var valid_602355 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602355 = validateParameter(valid_602355, JString, required = false,
                                 default = nil)
  if valid_602355 != nil:
    section.add "X-Amz-Content-Sha256", valid_602355
  var valid_602356 = header.getOrDefault("X-Amz-Algorithm")
  valid_602356 = validateParameter(valid_602356, JString, required = false,
                                 default = nil)
  if valid_602356 != nil:
    section.add "X-Amz-Algorithm", valid_602356
  var valid_602357 = header.getOrDefault("X-Amz-Signature")
  valid_602357 = validateParameter(valid_602357, JString, required = false,
                                 default = nil)
  if valid_602357 != nil:
    section.add "X-Amz-Signature", valid_602357
  var valid_602358 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602358 = validateParameter(valid_602358, JString, required = false,
                                 default = nil)
  if valid_602358 != nil:
    section.add "X-Amz-SignedHeaders", valid_602358
  var valid_602359 = header.getOrDefault("X-Amz-Credential")
  valid_602359 = validateParameter(valid_602359, JString, required = false,
                                 default = nil)
  if valid_602359 != nil:
    section.add "X-Amz-Credential", valid_602359
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602360: Call_PostListReceiptFilters_602348; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IP address filters associated with your AWS account in the current AWS Region.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_602360.validator(path, query, header, formData, body)
  let scheme = call_602360.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602360.url(scheme.get, call_602360.host, call_602360.base,
                         call_602360.route, valid.getOrDefault("path"))
  result = hook(call_602360, url, valid)

proc call*(call_602361: Call_PostListReceiptFilters_602348;
          Action: string = "ListReceiptFilters"; Version: string = "2010-12-01"): Recallable =
  ## postListReceiptFilters
  ## <p>Lists the IP address filters associated with your AWS account in the current AWS Region.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602362 = newJObject()
  add(query_602362, "Action", newJString(Action))
  add(query_602362, "Version", newJString(Version))
  result = call_602361.call(nil, query_602362, nil, nil, nil)

var postListReceiptFilters* = Call_PostListReceiptFilters_602348(
    name: "postListReceiptFilters", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ListReceiptFilters",
    validator: validate_PostListReceiptFilters_602349, base: "/",
    url: url_PostListReceiptFilters_602350, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListReceiptFilters_602333 = ref object of OpenApiRestCall_600426
proc url_GetListReceiptFilters_602335(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListReceiptFilters_602334(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IP address filters associated with your AWS account in the current AWS Region.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602336 = query.getOrDefault("Action")
  valid_602336 = validateParameter(valid_602336, JString, required = true,
                                 default = newJString("ListReceiptFilters"))
  if valid_602336 != nil:
    section.add "Action", valid_602336
  var valid_602337 = query.getOrDefault("Version")
  valid_602337 = validateParameter(valid_602337, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602337 != nil:
    section.add "Version", valid_602337
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602338 = header.getOrDefault("X-Amz-Date")
  valid_602338 = validateParameter(valid_602338, JString, required = false,
                                 default = nil)
  if valid_602338 != nil:
    section.add "X-Amz-Date", valid_602338
  var valid_602339 = header.getOrDefault("X-Amz-Security-Token")
  valid_602339 = validateParameter(valid_602339, JString, required = false,
                                 default = nil)
  if valid_602339 != nil:
    section.add "X-Amz-Security-Token", valid_602339
  var valid_602340 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602340 = validateParameter(valid_602340, JString, required = false,
                                 default = nil)
  if valid_602340 != nil:
    section.add "X-Amz-Content-Sha256", valid_602340
  var valid_602341 = header.getOrDefault("X-Amz-Algorithm")
  valid_602341 = validateParameter(valid_602341, JString, required = false,
                                 default = nil)
  if valid_602341 != nil:
    section.add "X-Amz-Algorithm", valid_602341
  var valid_602342 = header.getOrDefault("X-Amz-Signature")
  valid_602342 = validateParameter(valid_602342, JString, required = false,
                                 default = nil)
  if valid_602342 != nil:
    section.add "X-Amz-Signature", valid_602342
  var valid_602343 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602343 = validateParameter(valid_602343, JString, required = false,
                                 default = nil)
  if valid_602343 != nil:
    section.add "X-Amz-SignedHeaders", valid_602343
  var valid_602344 = header.getOrDefault("X-Amz-Credential")
  valid_602344 = validateParameter(valid_602344, JString, required = false,
                                 default = nil)
  if valid_602344 != nil:
    section.add "X-Amz-Credential", valid_602344
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602345: Call_GetListReceiptFilters_602333; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IP address filters associated with your AWS account in the current AWS Region.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_602345.validator(path, query, header, formData, body)
  let scheme = call_602345.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602345.url(scheme.get, call_602345.host, call_602345.base,
                         call_602345.route, valid.getOrDefault("path"))
  result = hook(call_602345, url, valid)

proc call*(call_602346: Call_GetListReceiptFilters_602333;
          Action: string = "ListReceiptFilters"; Version: string = "2010-12-01"): Recallable =
  ## getListReceiptFilters
  ## <p>Lists the IP address filters associated with your AWS account in the current AWS Region.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602347 = newJObject()
  add(query_602347, "Action", newJString(Action))
  add(query_602347, "Version", newJString(Version))
  result = call_602346.call(nil, query_602347, nil, nil, nil)

var getListReceiptFilters* = Call_GetListReceiptFilters_602333(
    name: "getListReceiptFilters", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=ListReceiptFilters",
    validator: validate_GetListReceiptFilters_602334, base: "/",
    url: url_GetListReceiptFilters_602335, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListReceiptRuleSets_602379 = ref object of OpenApiRestCall_600426
proc url_PostListReceiptRuleSets_602381(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListReceiptRuleSets_602380(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the receipt rule sets that exist under your AWS account in the current AWS Region. If there are additional receipt rule sets to be retrieved, you will receive a <code>NextToken</code> that you can provide to the next call to <code>ListReceiptRuleSets</code> to retrieve the additional entries.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602382 = query.getOrDefault("Action")
  valid_602382 = validateParameter(valid_602382, JString, required = true,
                                 default = newJString("ListReceiptRuleSets"))
  if valid_602382 != nil:
    section.add "Action", valid_602382
  var valid_602383 = query.getOrDefault("Version")
  valid_602383 = validateParameter(valid_602383, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602383 != nil:
    section.add "Version", valid_602383
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602384 = header.getOrDefault("X-Amz-Date")
  valid_602384 = validateParameter(valid_602384, JString, required = false,
                                 default = nil)
  if valid_602384 != nil:
    section.add "X-Amz-Date", valid_602384
  var valid_602385 = header.getOrDefault("X-Amz-Security-Token")
  valid_602385 = validateParameter(valid_602385, JString, required = false,
                                 default = nil)
  if valid_602385 != nil:
    section.add "X-Amz-Security-Token", valid_602385
  var valid_602386 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602386 = validateParameter(valid_602386, JString, required = false,
                                 default = nil)
  if valid_602386 != nil:
    section.add "X-Amz-Content-Sha256", valid_602386
  var valid_602387 = header.getOrDefault("X-Amz-Algorithm")
  valid_602387 = validateParameter(valid_602387, JString, required = false,
                                 default = nil)
  if valid_602387 != nil:
    section.add "X-Amz-Algorithm", valid_602387
  var valid_602388 = header.getOrDefault("X-Amz-Signature")
  valid_602388 = validateParameter(valid_602388, JString, required = false,
                                 default = nil)
  if valid_602388 != nil:
    section.add "X-Amz-Signature", valid_602388
  var valid_602389 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602389 = validateParameter(valid_602389, JString, required = false,
                                 default = nil)
  if valid_602389 != nil:
    section.add "X-Amz-SignedHeaders", valid_602389
  var valid_602390 = header.getOrDefault("X-Amz-Credential")
  valid_602390 = validateParameter(valid_602390, JString, required = false,
                                 default = nil)
  if valid_602390 != nil:
    section.add "X-Amz-Credential", valid_602390
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : A token returned from a previous call to <code>ListReceiptRuleSets</code> to indicate the position in the receipt rule set list.
  section = newJObject()
  var valid_602391 = formData.getOrDefault("NextToken")
  valid_602391 = validateParameter(valid_602391, JString, required = false,
                                 default = nil)
  if valid_602391 != nil:
    section.add "NextToken", valid_602391
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602392: Call_PostListReceiptRuleSets_602379; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the receipt rule sets that exist under your AWS account in the current AWS Region. If there are additional receipt rule sets to be retrieved, you will receive a <code>NextToken</code> that you can provide to the next call to <code>ListReceiptRuleSets</code> to retrieve the additional entries.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_602392.validator(path, query, header, formData, body)
  let scheme = call_602392.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602392.url(scheme.get, call_602392.host, call_602392.base,
                         call_602392.route, valid.getOrDefault("path"))
  result = hook(call_602392, url, valid)

proc call*(call_602393: Call_PostListReceiptRuleSets_602379;
          NextToken: string = ""; Action: string = "ListReceiptRuleSets";
          Version: string = "2010-12-01"): Recallable =
  ## postListReceiptRuleSets
  ## <p>Lists the receipt rule sets that exist under your AWS account in the current AWS Region. If there are additional receipt rule sets to be retrieved, you will receive a <code>NextToken</code> that you can provide to the next call to <code>ListReceiptRuleSets</code> to retrieve the additional entries.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : A token returned from a previous call to <code>ListReceiptRuleSets</code> to indicate the position in the receipt rule set list.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602394 = newJObject()
  var formData_602395 = newJObject()
  add(formData_602395, "NextToken", newJString(NextToken))
  add(query_602394, "Action", newJString(Action))
  add(query_602394, "Version", newJString(Version))
  result = call_602393.call(nil, query_602394, nil, formData_602395, nil)

var postListReceiptRuleSets* = Call_PostListReceiptRuleSets_602379(
    name: "postListReceiptRuleSets", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ListReceiptRuleSets",
    validator: validate_PostListReceiptRuleSets_602380, base: "/",
    url: url_PostListReceiptRuleSets_602381, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListReceiptRuleSets_602363 = ref object of OpenApiRestCall_600426
proc url_GetListReceiptRuleSets_602365(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListReceiptRuleSets_602364(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the receipt rule sets that exist under your AWS account in the current AWS Region. If there are additional receipt rule sets to be retrieved, you will receive a <code>NextToken</code> that you can provide to the next call to <code>ListReceiptRuleSets</code> to retrieve the additional entries.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : A token returned from a previous call to <code>ListReceiptRuleSets</code> to indicate the position in the receipt rule set list.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_602366 = query.getOrDefault("NextToken")
  valid_602366 = validateParameter(valid_602366, JString, required = false,
                                 default = nil)
  if valid_602366 != nil:
    section.add "NextToken", valid_602366
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602367 = query.getOrDefault("Action")
  valid_602367 = validateParameter(valid_602367, JString, required = true,
                                 default = newJString("ListReceiptRuleSets"))
  if valid_602367 != nil:
    section.add "Action", valid_602367
  var valid_602368 = query.getOrDefault("Version")
  valid_602368 = validateParameter(valid_602368, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602368 != nil:
    section.add "Version", valid_602368
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602369 = header.getOrDefault("X-Amz-Date")
  valid_602369 = validateParameter(valid_602369, JString, required = false,
                                 default = nil)
  if valid_602369 != nil:
    section.add "X-Amz-Date", valid_602369
  var valid_602370 = header.getOrDefault("X-Amz-Security-Token")
  valid_602370 = validateParameter(valid_602370, JString, required = false,
                                 default = nil)
  if valid_602370 != nil:
    section.add "X-Amz-Security-Token", valid_602370
  var valid_602371 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602371 = validateParameter(valid_602371, JString, required = false,
                                 default = nil)
  if valid_602371 != nil:
    section.add "X-Amz-Content-Sha256", valid_602371
  var valid_602372 = header.getOrDefault("X-Amz-Algorithm")
  valid_602372 = validateParameter(valid_602372, JString, required = false,
                                 default = nil)
  if valid_602372 != nil:
    section.add "X-Amz-Algorithm", valid_602372
  var valid_602373 = header.getOrDefault("X-Amz-Signature")
  valid_602373 = validateParameter(valid_602373, JString, required = false,
                                 default = nil)
  if valid_602373 != nil:
    section.add "X-Amz-Signature", valid_602373
  var valid_602374 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602374 = validateParameter(valid_602374, JString, required = false,
                                 default = nil)
  if valid_602374 != nil:
    section.add "X-Amz-SignedHeaders", valid_602374
  var valid_602375 = header.getOrDefault("X-Amz-Credential")
  valid_602375 = validateParameter(valid_602375, JString, required = false,
                                 default = nil)
  if valid_602375 != nil:
    section.add "X-Amz-Credential", valid_602375
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602376: Call_GetListReceiptRuleSets_602363; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the receipt rule sets that exist under your AWS account in the current AWS Region. If there are additional receipt rule sets to be retrieved, you will receive a <code>NextToken</code> that you can provide to the next call to <code>ListReceiptRuleSets</code> to retrieve the additional entries.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_602376.validator(path, query, header, formData, body)
  let scheme = call_602376.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602376.url(scheme.get, call_602376.host, call_602376.base,
                         call_602376.route, valid.getOrDefault("path"))
  result = hook(call_602376, url, valid)

proc call*(call_602377: Call_GetListReceiptRuleSets_602363; NextToken: string = "";
          Action: string = "ListReceiptRuleSets"; Version: string = "2010-12-01"): Recallable =
  ## getListReceiptRuleSets
  ## <p>Lists the receipt rule sets that exist under your AWS account in the current AWS Region. If there are additional receipt rule sets to be retrieved, you will receive a <code>NextToken</code> that you can provide to the next call to <code>ListReceiptRuleSets</code> to retrieve the additional entries.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : A token returned from a previous call to <code>ListReceiptRuleSets</code> to indicate the position in the receipt rule set list.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602378 = newJObject()
  add(query_602378, "NextToken", newJString(NextToken))
  add(query_602378, "Action", newJString(Action))
  add(query_602378, "Version", newJString(Version))
  result = call_602377.call(nil, query_602378, nil, nil, nil)

var getListReceiptRuleSets* = Call_GetListReceiptRuleSets_602363(
    name: "getListReceiptRuleSets", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=ListReceiptRuleSets",
    validator: validate_GetListReceiptRuleSets_602364, base: "/",
    url: url_GetListReceiptRuleSets_602365, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListTemplates_602413 = ref object of OpenApiRestCall_600426
proc url_PostListTemplates_602415(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListTemplates_602414(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Lists the email templates present in your Amazon SES account in the current AWS Region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602416 = query.getOrDefault("Action")
  valid_602416 = validateParameter(valid_602416, JString, required = true,
                                 default = newJString("ListTemplates"))
  if valid_602416 != nil:
    section.add "Action", valid_602416
  var valid_602417 = query.getOrDefault("Version")
  valid_602417 = validateParameter(valid_602417, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602417 != nil:
    section.add "Version", valid_602417
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602418 = header.getOrDefault("X-Amz-Date")
  valid_602418 = validateParameter(valid_602418, JString, required = false,
                                 default = nil)
  if valid_602418 != nil:
    section.add "X-Amz-Date", valid_602418
  var valid_602419 = header.getOrDefault("X-Amz-Security-Token")
  valid_602419 = validateParameter(valid_602419, JString, required = false,
                                 default = nil)
  if valid_602419 != nil:
    section.add "X-Amz-Security-Token", valid_602419
  var valid_602420 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602420 = validateParameter(valid_602420, JString, required = false,
                                 default = nil)
  if valid_602420 != nil:
    section.add "X-Amz-Content-Sha256", valid_602420
  var valid_602421 = header.getOrDefault("X-Amz-Algorithm")
  valid_602421 = validateParameter(valid_602421, JString, required = false,
                                 default = nil)
  if valid_602421 != nil:
    section.add "X-Amz-Algorithm", valid_602421
  var valid_602422 = header.getOrDefault("X-Amz-Signature")
  valid_602422 = validateParameter(valid_602422, JString, required = false,
                                 default = nil)
  if valid_602422 != nil:
    section.add "X-Amz-Signature", valid_602422
  var valid_602423 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602423 = validateParameter(valid_602423, JString, required = false,
                                 default = nil)
  if valid_602423 != nil:
    section.add "X-Amz-SignedHeaders", valid_602423
  var valid_602424 = header.getOrDefault("X-Amz-Credential")
  valid_602424 = validateParameter(valid_602424, JString, required = false,
                                 default = nil)
  if valid_602424 != nil:
    section.add "X-Amz-Credential", valid_602424
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : A token returned from a previous call to <code>ListTemplates</code> to indicate the position in the list of email templates.
  ##   MaxItems: JInt
  ##           : The maximum number of templates to return. This value must be at least 1 and less than or equal to 10. If you do not specify a value, or if you specify a value less than 1 or greater than 10, the operation will return up to 10 results.
  section = newJObject()
  var valid_602425 = formData.getOrDefault("NextToken")
  valid_602425 = validateParameter(valid_602425, JString, required = false,
                                 default = nil)
  if valid_602425 != nil:
    section.add "NextToken", valid_602425
  var valid_602426 = formData.getOrDefault("MaxItems")
  valid_602426 = validateParameter(valid_602426, JInt, required = false, default = nil)
  if valid_602426 != nil:
    section.add "MaxItems", valid_602426
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602427: Call_PostListTemplates_602413; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the email templates present in your Amazon SES account in the current AWS Region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_602427.validator(path, query, header, formData, body)
  let scheme = call_602427.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602427.url(scheme.get, call_602427.host, call_602427.base,
                         call_602427.route, valid.getOrDefault("path"))
  result = hook(call_602427, url, valid)

proc call*(call_602428: Call_PostListTemplates_602413; NextToken: string = "";
          Action: string = "ListTemplates"; MaxItems: int = 0;
          Version: string = "2010-12-01"): Recallable =
  ## postListTemplates
  ## <p>Lists the email templates present in your Amazon SES account in the current AWS Region.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : A token returned from a previous call to <code>ListTemplates</code> to indicate the position in the list of email templates.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : The maximum number of templates to return. This value must be at least 1 and less than or equal to 10. If you do not specify a value, or if you specify a value less than 1 or greater than 10, the operation will return up to 10 results.
  ##   Version: string (required)
  var query_602429 = newJObject()
  var formData_602430 = newJObject()
  add(formData_602430, "NextToken", newJString(NextToken))
  add(query_602429, "Action", newJString(Action))
  add(formData_602430, "MaxItems", newJInt(MaxItems))
  add(query_602429, "Version", newJString(Version))
  result = call_602428.call(nil, query_602429, nil, formData_602430, nil)

var postListTemplates* = Call_PostListTemplates_602413(name: "postListTemplates",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=ListTemplates", validator: validate_PostListTemplates_602414,
    base: "/", url: url_PostListTemplates_602415,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListTemplates_602396 = ref object of OpenApiRestCall_600426
proc url_GetListTemplates_602398(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListTemplates_602397(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Lists the email templates present in your Amazon SES account in the current AWS Region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : A token returned from a previous call to <code>ListTemplates</code> to indicate the position in the list of email templates.
  ##   Action: JString (required)
  ##   MaxItems: JInt
  ##           : The maximum number of templates to return. This value must be at least 1 and less than or equal to 10. If you do not specify a value, or if you specify a value less than 1 or greater than 10, the operation will return up to 10 results.
  ##   Version: JString (required)
  section = newJObject()
  var valid_602399 = query.getOrDefault("NextToken")
  valid_602399 = validateParameter(valid_602399, JString, required = false,
                                 default = nil)
  if valid_602399 != nil:
    section.add "NextToken", valid_602399
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602400 = query.getOrDefault("Action")
  valid_602400 = validateParameter(valid_602400, JString, required = true,
                                 default = newJString("ListTemplates"))
  if valid_602400 != nil:
    section.add "Action", valid_602400
  var valid_602401 = query.getOrDefault("MaxItems")
  valid_602401 = validateParameter(valid_602401, JInt, required = false, default = nil)
  if valid_602401 != nil:
    section.add "MaxItems", valid_602401
  var valid_602402 = query.getOrDefault("Version")
  valid_602402 = validateParameter(valid_602402, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602402 != nil:
    section.add "Version", valid_602402
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602403 = header.getOrDefault("X-Amz-Date")
  valid_602403 = validateParameter(valid_602403, JString, required = false,
                                 default = nil)
  if valid_602403 != nil:
    section.add "X-Amz-Date", valid_602403
  var valid_602404 = header.getOrDefault("X-Amz-Security-Token")
  valid_602404 = validateParameter(valid_602404, JString, required = false,
                                 default = nil)
  if valid_602404 != nil:
    section.add "X-Amz-Security-Token", valid_602404
  var valid_602405 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602405 = validateParameter(valid_602405, JString, required = false,
                                 default = nil)
  if valid_602405 != nil:
    section.add "X-Amz-Content-Sha256", valid_602405
  var valid_602406 = header.getOrDefault("X-Amz-Algorithm")
  valid_602406 = validateParameter(valid_602406, JString, required = false,
                                 default = nil)
  if valid_602406 != nil:
    section.add "X-Amz-Algorithm", valid_602406
  var valid_602407 = header.getOrDefault("X-Amz-Signature")
  valid_602407 = validateParameter(valid_602407, JString, required = false,
                                 default = nil)
  if valid_602407 != nil:
    section.add "X-Amz-Signature", valid_602407
  var valid_602408 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602408 = validateParameter(valid_602408, JString, required = false,
                                 default = nil)
  if valid_602408 != nil:
    section.add "X-Amz-SignedHeaders", valid_602408
  var valid_602409 = header.getOrDefault("X-Amz-Credential")
  valid_602409 = validateParameter(valid_602409, JString, required = false,
                                 default = nil)
  if valid_602409 != nil:
    section.add "X-Amz-Credential", valid_602409
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602410: Call_GetListTemplates_602396; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the email templates present in your Amazon SES account in the current AWS Region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_602410.validator(path, query, header, formData, body)
  let scheme = call_602410.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602410.url(scheme.get, call_602410.host, call_602410.base,
                         call_602410.route, valid.getOrDefault("path"))
  result = hook(call_602410, url, valid)

proc call*(call_602411: Call_GetListTemplates_602396; NextToken: string = "";
          Action: string = "ListTemplates"; MaxItems: int = 0;
          Version: string = "2010-12-01"): Recallable =
  ## getListTemplates
  ## <p>Lists the email templates present in your Amazon SES account in the current AWS Region.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : A token returned from a previous call to <code>ListTemplates</code> to indicate the position in the list of email templates.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : The maximum number of templates to return. This value must be at least 1 and less than or equal to 10. If you do not specify a value, or if you specify a value less than 1 or greater than 10, the operation will return up to 10 results.
  ##   Version: string (required)
  var query_602412 = newJObject()
  add(query_602412, "NextToken", newJString(NextToken))
  add(query_602412, "Action", newJString(Action))
  add(query_602412, "MaxItems", newJInt(MaxItems))
  add(query_602412, "Version", newJString(Version))
  result = call_602411.call(nil, query_602412, nil, nil, nil)

var getListTemplates* = Call_GetListTemplates_602396(name: "getListTemplates",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=ListTemplates", validator: validate_GetListTemplates_602397,
    base: "/", url: url_GetListTemplates_602398,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListVerifiedEmailAddresses_602446 = ref object of OpenApiRestCall_600426
proc url_PostListVerifiedEmailAddresses_602448(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListVerifiedEmailAddresses_602447(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deprecated. Use the <code>ListIdentities</code> operation to list the email addresses and domains associated with your account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602449 = query.getOrDefault("Action")
  valid_602449 = validateParameter(valid_602449, JString, required = true, default = newJString(
      "ListVerifiedEmailAddresses"))
  if valid_602449 != nil:
    section.add "Action", valid_602449
  var valid_602450 = query.getOrDefault("Version")
  valid_602450 = validateParameter(valid_602450, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602450 != nil:
    section.add "Version", valid_602450
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602451 = header.getOrDefault("X-Amz-Date")
  valid_602451 = validateParameter(valid_602451, JString, required = false,
                                 default = nil)
  if valid_602451 != nil:
    section.add "X-Amz-Date", valid_602451
  var valid_602452 = header.getOrDefault("X-Amz-Security-Token")
  valid_602452 = validateParameter(valid_602452, JString, required = false,
                                 default = nil)
  if valid_602452 != nil:
    section.add "X-Amz-Security-Token", valid_602452
  var valid_602453 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602453 = validateParameter(valid_602453, JString, required = false,
                                 default = nil)
  if valid_602453 != nil:
    section.add "X-Amz-Content-Sha256", valid_602453
  var valid_602454 = header.getOrDefault("X-Amz-Algorithm")
  valid_602454 = validateParameter(valid_602454, JString, required = false,
                                 default = nil)
  if valid_602454 != nil:
    section.add "X-Amz-Algorithm", valid_602454
  var valid_602455 = header.getOrDefault("X-Amz-Signature")
  valid_602455 = validateParameter(valid_602455, JString, required = false,
                                 default = nil)
  if valid_602455 != nil:
    section.add "X-Amz-Signature", valid_602455
  var valid_602456 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602456 = validateParameter(valid_602456, JString, required = false,
                                 default = nil)
  if valid_602456 != nil:
    section.add "X-Amz-SignedHeaders", valid_602456
  var valid_602457 = header.getOrDefault("X-Amz-Credential")
  valid_602457 = validateParameter(valid_602457, JString, required = false,
                                 default = nil)
  if valid_602457 != nil:
    section.add "X-Amz-Credential", valid_602457
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602458: Call_PostListVerifiedEmailAddresses_602446; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deprecated. Use the <code>ListIdentities</code> operation to list the email addresses and domains associated with your account.
  ## 
  let valid = call_602458.validator(path, query, header, formData, body)
  let scheme = call_602458.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602458.url(scheme.get, call_602458.host, call_602458.base,
                         call_602458.route, valid.getOrDefault("path"))
  result = hook(call_602458, url, valid)

proc call*(call_602459: Call_PostListVerifiedEmailAddresses_602446;
          Action: string = "ListVerifiedEmailAddresses";
          Version: string = "2010-12-01"): Recallable =
  ## postListVerifiedEmailAddresses
  ## Deprecated. Use the <code>ListIdentities</code> operation to list the email addresses and domains associated with your account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602460 = newJObject()
  add(query_602460, "Action", newJString(Action))
  add(query_602460, "Version", newJString(Version))
  result = call_602459.call(nil, query_602460, nil, nil, nil)

var postListVerifiedEmailAddresses* = Call_PostListVerifiedEmailAddresses_602446(
    name: "postListVerifiedEmailAddresses", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ListVerifiedEmailAddresses",
    validator: validate_PostListVerifiedEmailAddresses_602447, base: "/",
    url: url_PostListVerifiedEmailAddresses_602448,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListVerifiedEmailAddresses_602431 = ref object of OpenApiRestCall_600426
proc url_GetListVerifiedEmailAddresses_602433(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListVerifiedEmailAddresses_602432(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deprecated. Use the <code>ListIdentities</code> operation to list the email addresses and domains associated with your account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602434 = query.getOrDefault("Action")
  valid_602434 = validateParameter(valid_602434, JString, required = true, default = newJString(
      "ListVerifiedEmailAddresses"))
  if valid_602434 != nil:
    section.add "Action", valid_602434
  var valid_602435 = query.getOrDefault("Version")
  valid_602435 = validateParameter(valid_602435, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602435 != nil:
    section.add "Version", valid_602435
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602436 = header.getOrDefault("X-Amz-Date")
  valid_602436 = validateParameter(valid_602436, JString, required = false,
                                 default = nil)
  if valid_602436 != nil:
    section.add "X-Amz-Date", valid_602436
  var valid_602437 = header.getOrDefault("X-Amz-Security-Token")
  valid_602437 = validateParameter(valid_602437, JString, required = false,
                                 default = nil)
  if valid_602437 != nil:
    section.add "X-Amz-Security-Token", valid_602437
  var valid_602438 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602438 = validateParameter(valid_602438, JString, required = false,
                                 default = nil)
  if valid_602438 != nil:
    section.add "X-Amz-Content-Sha256", valid_602438
  var valid_602439 = header.getOrDefault("X-Amz-Algorithm")
  valid_602439 = validateParameter(valid_602439, JString, required = false,
                                 default = nil)
  if valid_602439 != nil:
    section.add "X-Amz-Algorithm", valid_602439
  var valid_602440 = header.getOrDefault("X-Amz-Signature")
  valid_602440 = validateParameter(valid_602440, JString, required = false,
                                 default = nil)
  if valid_602440 != nil:
    section.add "X-Amz-Signature", valid_602440
  var valid_602441 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602441 = validateParameter(valid_602441, JString, required = false,
                                 default = nil)
  if valid_602441 != nil:
    section.add "X-Amz-SignedHeaders", valid_602441
  var valid_602442 = header.getOrDefault("X-Amz-Credential")
  valid_602442 = validateParameter(valid_602442, JString, required = false,
                                 default = nil)
  if valid_602442 != nil:
    section.add "X-Amz-Credential", valid_602442
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602443: Call_GetListVerifiedEmailAddresses_602431; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deprecated. Use the <code>ListIdentities</code> operation to list the email addresses and domains associated with your account.
  ## 
  let valid = call_602443.validator(path, query, header, formData, body)
  let scheme = call_602443.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602443.url(scheme.get, call_602443.host, call_602443.base,
                         call_602443.route, valid.getOrDefault("path"))
  result = hook(call_602443, url, valid)

proc call*(call_602444: Call_GetListVerifiedEmailAddresses_602431;
          Action: string = "ListVerifiedEmailAddresses";
          Version: string = "2010-12-01"): Recallable =
  ## getListVerifiedEmailAddresses
  ## Deprecated. Use the <code>ListIdentities</code> operation to list the email addresses and domains associated with your account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602445 = newJObject()
  add(query_602445, "Action", newJString(Action))
  add(query_602445, "Version", newJString(Version))
  result = call_602444.call(nil, query_602445, nil, nil, nil)

var getListVerifiedEmailAddresses* = Call_GetListVerifiedEmailAddresses_602431(
    name: "getListVerifiedEmailAddresses", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=ListVerifiedEmailAddresses",
    validator: validate_GetListVerifiedEmailAddresses_602432, base: "/",
    url: url_GetListVerifiedEmailAddresses_602433,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutConfigurationSetDeliveryOptions_602478 = ref object of OpenApiRestCall_600426
proc url_PostPutConfigurationSetDeliveryOptions_602480(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostPutConfigurationSetDeliveryOptions_602479(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds or updates the delivery options for a configuration set.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602481 = query.getOrDefault("Action")
  valid_602481 = validateParameter(valid_602481, JString, required = true, default = newJString(
      "PutConfigurationSetDeliveryOptions"))
  if valid_602481 != nil:
    section.add "Action", valid_602481
  var valid_602482 = query.getOrDefault("Version")
  valid_602482 = validateParameter(valid_602482, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602482 != nil:
    section.add "Version", valid_602482
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602483 = header.getOrDefault("X-Amz-Date")
  valid_602483 = validateParameter(valid_602483, JString, required = false,
                                 default = nil)
  if valid_602483 != nil:
    section.add "X-Amz-Date", valid_602483
  var valid_602484 = header.getOrDefault("X-Amz-Security-Token")
  valid_602484 = validateParameter(valid_602484, JString, required = false,
                                 default = nil)
  if valid_602484 != nil:
    section.add "X-Amz-Security-Token", valid_602484
  var valid_602485 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602485 = validateParameter(valid_602485, JString, required = false,
                                 default = nil)
  if valid_602485 != nil:
    section.add "X-Amz-Content-Sha256", valid_602485
  var valid_602486 = header.getOrDefault("X-Amz-Algorithm")
  valid_602486 = validateParameter(valid_602486, JString, required = false,
                                 default = nil)
  if valid_602486 != nil:
    section.add "X-Amz-Algorithm", valid_602486
  var valid_602487 = header.getOrDefault("X-Amz-Signature")
  valid_602487 = validateParameter(valid_602487, JString, required = false,
                                 default = nil)
  if valid_602487 != nil:
    section.add "X-Amz-Signature", valid_602487
  var valid_602488 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602488 = validateParameter(valid_602488, JString, required = false,
                                 default = nil)
  if valid_602488 != nil:
    section.add "X-Amz-SignedHeaders", valid_602488
  var valid_602489 = header.getOrDefault("X-Amz-Credential")
  valid_602489 = validateParameter(valid_602489, JString, required = false,
                                 default = nil)
  if valid_602489 != nil:
    section.add "X-Amz-Credential", valid_602489
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that you want to specify the delivery options for.
  ##   DeliveryOptions.TlsPolicy: JString
  ##                            : Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS).
  ## Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only delivered if a TLS connection can be established. If the value is <code>Optional</code>, messages can be delivered in plain text if a TLS connection can't be established.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_602490 = formData.getOrDefault("ConfigurationSetName")
  valid_602490 = validateParameter(valid_602490, JString, required = true,
                                 default = nil)
  if valid_602490 != nil:
    section.add "ConfigurationSetName", valid_602490
  var valid_602491 = formData.getOrDefault("DeliveryOptions.TlsPolicy")
  valid_602491 = validateParameter(valid_602491, JString, required = false,
                                 default = nil)
  if valid_602491 != nil:
    section.add "DeliveryOptions.TlsPolicy", valid_602491
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602492: Call_PostPutConfigurationSetDeliveryOptions_602478;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds or updates the delivery options for a configuration set.
  ## 
  let valid = call_602492.validator(path, query, header, formData, body)
  let scheme = call_602492.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602492.url(scheme.get, call_602492.host, call_602492.base,
                         call_602492.route, valid.getOrDefault("path"))
  result = hook(call_602492, url, valid)

proc call*(call_602493: Call_PostPutConfigurationSetDeliveryOptions_602478;
          ConfigurationSetName: string;
          Action: string = "PutConfigurationSetDeliveryOptions";
          DeliveryOptionsTlsPolicy: string = ""; Version: string = "2010-12-01"): Recallable =
  ## postPutConfigurationSetDeliveryOptions
  ## Adds or updates the delivery options for a configuration set.
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that you want to specify the delivery options for.
  ##   Action: string (required)
  ##   DeliveryOptionsTlsPolicy: string
  ##                           : Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS).
  ## Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only delivered if a TLS connection can be established. If the value is <code>Optional</code>, messages can be delivered in plain text if a TLS connection can't be established.
  ##   Version: string (required)
  var query_602494 = newJObject()
  var formData_602495 = newJObject()
  add(formData_602495, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_602494, "Action", newJString(Action))
  add(formData_602495, "DeliveryOptions.TlsPolicy",
      newJString(DeliveryOptionsTlsPolicy))
  add(query_602494, "Version", newJString(Version))
  result = call_602493.call(nil, query_602494, nil, formData_602495, nil)

var postPutConfigurationSetDeliveryOptions* = Call_PostPutConfigurationSetDeliveryOptions_602478(
    name: "postPutConfigurationSetDeliveryOptions", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=PutConfigurationSetDeliveryOptions",
    validator: validate_PostPutConfigurationSetDeliveryOptions_602479, base: "/",
    url: url_PostPutConfigurationSetDeliveryOptions_602480,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutConfigurationSetDeliveryOptions_602461 = ref object of OpenApiRestCall_600426
proc url_GetPutConfigurationSetDeliveryOptions_602463(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetPutConfigurationSetDeliveryOptions_602462(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds or updates the delivery options for a configuration set.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DeliveryOptions.TlsPolicy: JString
  ##                            : Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS).
  ## Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only delivered if a TLS connection can be established. If the value is <code>Optional</code>, messages can be delivered in plain text if a TLS connection can't be established.
  ##   Action: JString (required)
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that you want to specify the delivery options for.
  ##   Version: JString (required)
  section = newJObject()
  var valid_602464 = query.getOrDefault("DeliveryOptions.TlsPolicy")
  valid_602464 = validateParameter(valid_602464, JString, required = false,
                                 default = nil)
  if valid_602464 != nil:
    section.add "DeliveryOptions.TlsPolicy", valid_602464
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602465 = query.getOrDefault("Action")
  valid_602465 = validateParameter(valid_602465, JString, required = true, default = newJString(
      "PutConfigurationSetDeliveryOptions"))
  if valid_602465 != nil:
    section.add "Action", valid_602465
  var valid_602466 = query.getOrDefault("ConfigurationSetName")
  valid_602466 = validateParameter(valid_602466, JString, required = true,
                                 default = nil)
  if valid_602466 != nil:
    section.add "ConfigurationSetName", valid_602466
  var valid_602467 = query.getOrDefault("Version")
  valid_602467 = validateParameter(valid_602467, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602467 != nil:
    section.add "Version", valid_602467
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602468 = header.getOrDefault("X-Amz-Date")
  valid_602468 = validateParameter(valid_602468, JString, required = false,
                                 default = nil)
  if valid_602468 != nil:
    section.add "X-Amz-Date", valid_602468
  var valid_602469 = header.getOrDefault("X-Amz-Security-Token")
  valid_602469 = validateParameter(valid_602469, JString, required = false,
                                 default = nil)
  if valid_602469 != nil:
    section.add "X-Amz-Security-Token", valid_602469
  var valid_602470 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602470 = validateParameter(valid_602470, JString, required = false,
                                 default = nil)
  if valid_602470 != nil:
    section.add "X-Amz-Content-Sha256", valid_602470
  var valid_602471 = header.getOrDefault("X-Amz-Algorithm")
  valid_602471 = validateParameter(valid_602471, JString, required = false,
                                 default = nil)
  if valid_602471 != nil:
    section.add "X-Amz-Algorithm", valid_602471
  var valid_602472 = header.getOrDefault("X-Amz-Signature")
  valid_602472 = validateParameter(valid_602472, JString, required = false,
                                 default = nil)
  if valid_602472 != nil:
    section.add "X-Amz-Signature", valid_602472
  var valid_602473 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602473 = validateParameter(valid_602473, JString, required = false,
                                 default = nil)
  if valid_602473 != nil:
    section.add "X-Amz-SignedHeaders", valid_602473
  var valid_602474 = header.getOrDefault("X-Amz-Credential")
  valid_602474 = validateParameter(valid_602474, JString, required = false,
                                 default = nil)
  if valid_602474 != nil:
    section.add "X-Amz-Credential", valid_602474
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602475: Call_GetPutConfigurationSetDeliveryOptions_602461;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds or updates the delivery options for a configuration set.
  ## 
  let valid = call_602475.validator(path, query, header, formData, body)
  let scheme = call_602475.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602475.url(scheme.get, call_602475.host, call_602475.base,
                         call_602475.route, valid.getOrDefault("path"))
  result = hook(call_602475, url, valid)

proc call*(call_602476: Call_GetPutConfigurationSetDeliveryOptions_602461;
          ConfigurationSetName: string; DeliveryOptionsTlsPolicy: string = "";
          Action: string = "PutConfigurationSetDeliveryOptions";
          Version: string = "2010-12-01"): Recallable =
  ## getPutConfigurationSetDeliveryOptions
  ## Adds or updates the delivery options for a configuration set.
  ##   DeliveryOptionsTlsPolicy: string
  ##                           : Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS).
  ## Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only delivered if a TLS connection can be established. If the value is <code>Optional</code>, messages can be delivered in plain text if a TLS connection can't be established.
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that you want to specify the delivery options for.
  ##   Version: string (required)
  var query_602477 = newJObject()
  add(query_602477, "DeliveryOptions.TlsPolicy",
      newJString(DeliveryOptionsTlsPolicy))
  add(query_602477, "Action", newJString(Action))
  add(query_602477, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_602477, "Version", newJString(Version))
  result = call_602476.call(nil, query_602477, nil, nil, nil)

var getPutConfigurationSetDeliveryOptions* = Call_GetPutConfigurationSetDeliveryOptions_602461(
    name: "getPutConfigurationSetDeliveryOptions", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=PutConfigurationSetDeliveryOptions",
    validator: validate_GetPutConfigurationSetDeliveryOptions_602462, base: "/",
    url: url_GetPutConfigurationSetDeliveryOptions_602463,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutIdentityPolicy_602514 = ref object of OpenApiRestCall_600426
proc url_PostPutIdentityPolicy_602516(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostPutIdentityPolicy_602515(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds or updates a sending authorization policy for the specified identity (an email address or a domain).</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602517 = query.getOrDefault("Action")
  valid_602517 = validateParameter(valid_602517, JString, required = true,
                                 default = newJString("PutIdentityPolicy"))
  if valid_602517 != nil:
    section.add "Action", valid_602517
  var valid_602518 = query.getOrDefault("Version")
  valid_602518 = validateParameter(valid_602518, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602518 != nil:
    section.add "Version", valid_602518
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602519 = header.getOrDefault("X-Amz-Date")
  valid_602519 = validateParameter(valid_602519, JString, required = false,
                                 default = nil)
  if valid_602519 != nil:
    section.add "X-Amz-Date", valid_602519
  var valid_602520 = header.getOrDefault("X-Amz-Security-Token")
  valid_602520 = validateParameter(valid_602520, JString, required = false,
                                 default = nil)
  if valid_602520 != nil:
    section.add "X-Amz-Security-Token", valid_602520
  var valid_602521 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602521 = validateParameter(valid_602521, JString, required = false,
                                 default = nil)
  if valid_602521 != nil:
    section.add "X-Amz-Content-Sha256", valid_602521
  var valid_602522 = header.getOrDefault("X-Amz-Algorithm")
  valid_602522 = validateParameter(valid_602522, JString, required = false,
                                 default = nil)
  if valid_602522 != nil:
    section.add "X-Amz-Algorithm", valid_602522
  var valid_602523 = header.getOrDefault("X-Amz-Signature")
  valid_602523 = validateParameter(valid_602523, JString, required = false,
                                 default = nil)
  if valid_602523 != nil:
    section.add "X-Amz-Signature", valid_602523
  var valid_602524 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602524 = validateParameter(valid_602524, JString, required = false,
                                 default = nil)
  if valid_602524 != nil:
    section.add "X-Amz-SignedHeaders", valid_602524
  var valid_602525 = header.getOrDefault("X-Amz-Credential")
  valid_602525 = validateParameter(valid_602525, JString, required = false,
                                 default = nil)
  if valid_602525 != nil:
    section.add "X-Amz-Credential", valid_602525
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy.</p> <p>The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.</p>
  ##   Identity: JString (required)
  ##           : <p>The identity that the policy will apply to. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Policy: JString (required)
  ##         : <p>The text of the policy in JSON format. The policy cannot exceed 4 KB.</p> <p>For information about the syntax of sending authorization policies, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-policies.html">Amazon SES Developer Guide</a>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_602526 = formData.getOrDefault("PolicyName")
  valid_602526 = validateParameter(valid_602526, JString, required = true,
                                 default = nil)
  if valid_602526 != nil:
    section.add "PolicyName", valid_602526
  var valid_602527 = formData.getOrDefault("Identity")
  valid_602527 = validateParameter(valid_602527, JString, required = true,
                                 default = nil)
  if valid_602527 != nil:
    section.add "Identity", valid_602527
  var valid_602528 = formData.getOrDefault("Policy")
  valid_602528 = validateParameter(valid_602528, JString, required = true,
                                 default = nil)
  if valid_602528 != nil:
    section.add "Policy", valid_602528
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602529: Call_PostPutIdentityPolicy_602514; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates a sending authorization policy for the specified identity (an email address or a domain).</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_602529.validator(path, query, header, formData, body)
  let scheme = call_602529.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602529.url(scheme.get, call_602529.host, call_602529.base,
                         call_602529.route, valid.getOrDefault("path"))
  result = hook(call_602529, url, valid)

proc call*(call_602530: Call_PostPutIdentityPolicy_602514; PolicyName: string;
          Identity: string; Policy: string; Action: string = "PutIdentityPolicy";
          Version: string = "2010-12-01"): Recallable =
  ## postPutIdentityPolicy
  ## <p>Adds or updates a sending authorization policy for the specified identity (an email address or a domain).</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy.</p> <p>The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.</p>
  ##   Identity: string (required)
  ##           : <p>The identity that the policy will apply to. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Policy: string (required)
  ##         : <p>The text of the policy in JSON format. The policy cannot exceed 4 KB.</p> <p>For information about the syntax of sending authorization policies, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-policies.html">Amazon SES Developer Guide</a>. </p>
  ##   Version: string (required)
  var query_602531 = newJObject()
  var formData_602532 = newJObject()
  add(formData_602532, "PolicyName", newJString(PolicyName))
  add(formData_602532, "Identity", newJString(Identity))
  add(query_602531, "Action", newJString(Action))
  add(formData_602532, "Policy", newJString(Policy))
  add(query_602531, "Version", newJString(Version))
  result = call_602530.call(nil, query_602531, nil, formData_602532, nil)

var postPutIdentityPolicy* = Call_PostPutIdentityPolicy_602514(
    name: "postPutIdentityPolicy", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=PutIdentityPolicy",
    validator: validate_PostPutIdentityPolicy_602515, base: "/",
    url: url_PostPutIdentityPolicy_602516, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutIdentityPolicy_602496 = ref object of OpenApiRestCall_600426
proc url_GetPutIdentityPolicy_602498(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetPutIdentityPolicy_602497(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds or updates a sending authorization policy for the specified identity (an email address or a domain).</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : <p>The identity that the policy will apply to. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: JString (required)
  ##   Policy: JString (required)
  ##         : <p>The text of the policy in JSON format. The policy cannot exceed 4 KB.</p> <p>For information about the syntax of sending authorization policies, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-policies.html">Amazon SES Developer Guide</a>. </p>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy.</p> <p>The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.</p>
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_602499 = query.getOrDefault("Identity")
  valid_602499 = validateParameter(valid_602499, JString, required = true,
                                 default = nil)
  if valid_602499 != nil:
    section.add "Identity", valid_602499
  var valid_602500 = query.getOrDefault("Action")
  valid_602500 = validateParameter(valid_602500, JString, required = true,
                                 default = newJString("PutIdentityPolicy"))
  if valid_602500 != nil:
    section.add "Action", valid_602500
  var valid_602501 = query.getOrDefault("Policy")
  valid_602501 = validateParameter(valid_602501, JString, required = true,
                                 default = nil)
  if valid_602501 != nil:
    section.add "Policy", valid_602501
  var valid_602502 = query.getOrDefault("Version")
  valid_602502 = validateParameter(valid_602502, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602502 != nil:
    section.add "Version", valid_602502
  var valid_602503 = query.getOrDefault("PolicyName")
  valid_602503 = validateParameter(valid_602503, JString, required = true,
                                 default = nil)
  if valid_602503 != nil:
    section.add "PolicyName", valid_602503
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602504 = header.getOrDefault("X-Amz-Date")
  valid_602504 = validateParameter(valid_602504, JString, required = false,
                                 default = nil)
  if valid_602504 != nil:
    section.add "X-Amz-Date", valid_602504
  var valid_602505 = header.getOrDefault("X-Amz-Security-Token")
  valid_602505 = validateParameter(valid_602505, JString, required = false,
                                 default = nil)
  if valid_602505 != nil:
    section.add "X-Amz-Security-Token", valid_602505
  var valid_602506 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602506 = validateParameter(valid_602506, JString, required = false,
                                 default = nil)
  if valid_602506 != nil:
    section.add "X-Amz-Content-Sha256", valid_602506
  var valid_602507 = header.getOrDefault("X-Amz-Algorithm")
  valid_602507 = validateParameter(valid_602507, JString, required = false,
                                 default = nil)
  if valid_602507 != nil:
    section.add "X-Amz-Algorithm", valid_602507
  var valid_602508 = header.getOrDefault("X-Amz-Signature")
  valid_602508 = validateParameter(valid_602508, JString, required = false,
                                 default = nil)
  if valid_602508 != nil:
    section.add "X-Amz-Signature", valid_602508
  var valid_602509 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602509 = validateParameter(valid_602509, JString, required = false,
                                 default = nil)
  if valid_602509 != nil:
    section.add "X-Amz-SignedHeaders", valid_602509
  var valid_602510 = header.getOrDefault("X-Amz-Credential")
  valid_602510 = validateParameter(valid_602510, JString, required = false,
                                 default = nil)
  if valid_602510 != nil:
    section.add "X-Amz-Credential", valid_602510
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602511: Call_GetPutIdentityPolicy_602496; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates a sending authorization policy for the specified identity (an email address or a domain).</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_602511.validator(path, query, header, formData, body)
  let scheme = call_602511.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602511.url(scheme.get, call_602511.host, call_602511.base,
                         call_602511.route, valid.getOrDefault("path"))
  result = hook(call_602511, url, valid)

proc call*(call_602512: Call_GetPutIdentityPolicy_602496; Identity: string;
          Policy: string; PolicyName: string; Action: string = "PutIdentityPolicy";
          Version: string = "2010-12-01"): Recallable =
  ## getPutIdentityPolicy
  ## <p>Adds or updates a sending authorization policy for the specified identity (an email address or a domain).</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : <p>The identity that the policy will apply to. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Policy: string (required)
  ##         : <p>The text of the policy in JSON format. The policy cannot exceed 4 KB.</p> <p>For information about the syntax of sending authorization policies, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-policies.html">Amazon SES Developer Guide</a>. </p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy.</p> <p>The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.</p>
  var query_602513 = newJObject()
  add(query_602513, "Identity", newJString(Identity))
  add(query_602513, "Action", newJString(Action))
  add(query_602513, "Policy", newJString(Policy))
  add(query_602513, "Version", newJString(Version))
  add(query_602513, "PolicyName", newJString(PolicyName))
  result = call_602512.call(nil, query_602513, nil, nil, nil)

var getPutIdentityPolicy* = Call_GetPutIdentityPolicy_602496(
    name: "getPutIdentityPolicy", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=PutIdentityPolicy",
    validator: validate_GetPutIdentityPolicy_602497, base: "/",
    url: url_GetPutIdentityPolicy_602498, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostReorderReceiptRuleSet_602550 = ref object of OpenApiRestCall_600426
proc url_PostReorderReceiptRuleSet_602552(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostReorderReceiptRuleSet_602551(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Reorders the receipt rules within a receipt rule set.</p> <note> <p>All of the rules in the rule set must be represented in this request. That is, this API will return an error if the reorder request doesn't explicitly position all of the rules.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602553 = query.getOrDefault("Action")
  valid_602553 = validateParameter(valid_602553, JString, required = true,
                                 default = newJString("ReorderReceiptRuleSet"))
  if valid_602553 != nil:
    section.add "Action", valid_602553
  var valid_602554 = query.getOrDefault("Version")
  valid_602554 = validateParameter(valid_602554, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602554 != nil:
    section.add "Version", valid_602554
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602555 = header.getOrDefault("X-Amz-Date")
  valid_602555 = validateParameter(valid_602555, JString, required = false,
                                 default = nil)
  if valid_602555 != nil:
    section.add "X-Amz-Date", valid_602555
  var valid_602556 = header.getOrDefault("X-Amz-Security-Token")
  valid_602556 = validateParameter(valid_602556, JString, required = false,
                                 default = nil)
  if valid_602556 != nil:
    section.add "X-Amz-Security-Token", valid_602556
  var valid_602557 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602557 = validateParameter(valid_602557, JString, required = false,
                                 default = nil)
  if valid_602557 != nil:
    section.add "X-Amz-Content-Sha256", valid_602557
  var valid_602558 = header.getOrDefault("X-Amz-Algorithm")
  valid_602558 = validateParameter(valid_602558, JString, required = false,
                                 default = nil)
  if valid_602558 != nil:
    section.add "X-Amz-Algorithm", valid_602558
  var valid_602559 = header.getOrDefault("X-Amz-Signature")
  valid_602559 = validateParameter(valid_602559, JString, required = false,
                                 default = nil)
  if valid_602559 != nil:
    section.add "X-Amz-Signature", valid_602559
  var valid_602560 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602560 = validateParameter(valid_602560, JString, required = false,
                                 default = nil)
  if valid_602560 != nil:
    section.add "X-Amz-SignedHeaders", valid_602560
  var valid_602561 = header.getOrDefault("X-Amz-Credential")
  valid_602561 = validateParameter(valid_602561, JString, required = false,
                                 default = nil)
  if valid_602561 != nil:
    section.add "X-Amz-Credential", valid_602561
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleNames: JArray (required)
  ##            : A list of the specified receipt rule set's receipt rules in the order that you want to put them.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set to reorder.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleNames` field"
  var valid_602562 = formData.getOrDefault("RuleNames")
  valid_602562 = validateParameter(valid_602562, JArray, required = true, default = nil)
  if valid_602562 != nil:
    section.add "RuleNames", valid_602562
  var valid_602563 = formData.getOrDefault("RuleSetName")
  valid_602563 = validateParameter(valid_602563, JString, required = true,
                                 default = nil)
  if valid_602563 != nil:
    section.add "RuleSetName", valid_602563
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602564: Call_PostReorderReceiptRuleSet_602550; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Reorders the receipt rules within a receipt rule set.</p> <note> <p>All of the rules in the rule set must be represented in this request. That is, this API will return an error if the reorder request doesn't explicitly position all of the rules.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_602564.validator(path, query, header, formData, body)
  let scheme = call_602564.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602564.url(scheme.get, call_602564.host, call_602564.base,
                         call_602564.route, valid.getOrDefault("path"))
  result = hook(call_602564, url, valid)

proc call*(call_602565: Call_PostReorderReceiptRuleSet_602550; RuleNames: JsonNode;
          RuleSetName: string; Action: string = "ReorderReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## postReorderReceiptRuleSet
  ## <p>Reorders the receipt rules within a receipt rule set.</p> <note> <p>All of the rules in the rule set must be represented in this request. That is, this API will return an error if the reorder request doesn't explicitly position all of the rules.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleNames: JArray (required)
  ##            : A list of the specified receipt rule set's receipt rules in the order that you want to put them.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set to reorder.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602566 = newJObject()
  var formData_602567 = newJObject()
  if RuleNames != nil:
    formData_602567.add "RuleNames", RuleNames
  add(formData_602567, "RuleSetName", newJString(RuleSetName))
  add(query_602566, "Action", newJString(Action))
  add(query_602566, "Version", newJString(Version))
  result = call_602565.call(nil, query_602566, nil, formData_602567, nil)

var postReorderReceiptRuleSet* = Call_PostReorderReceiptRuleSet_602550(
    name: "postReorderReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ReorderReceiptRuleSet",
    validator: validate_PostReorderReceiptRuleSet_602551, base: "/",
    url: url_PostReorderReceiptRuleSet_602552,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetReorderReceiptRuleSet_602533 = ref object of OpenApiRestCall_600426
proc url_GetReorderReceiptRuleSet_602535(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetReorderReceiptRuleSet_602534(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Reorders the receipt rules within a receipt rule set.</p> <note> <p>All of the rules in the rule set must be represented in this request. That is, this API will return an error if the reorder request doesn't explicitly position all of the rules.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set to reorder.
  ##   Action: JString (required)
  ##   RuleNames: JArray (required)
  ##            : A list of the specified receipt rule set's receipt rules in the order that you want to put them.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleSetName` field"
  var valid_602536 = query.getOrDefault("RuleSetName")
  valid_602536 = validateParameter(valid_602536, JString, required = true,
                                 default = nil)
  if valid_602536 != nil:
    section.add "RuleSetName", valid_602536
  var valid_602537 = query.getOrDefault("Action")
  valid_602537 = validateParameter(valid_602537, JString, required = true,
                                 default = newJString("ReorderReceiptRuleSet"))
  if valid_602537 != nil:
    section.add "Action", valid_602537
  var valid_602538 = query.getOrDefault("RuleNames")
  valid_602538 = validateParameter(valid_602538, JArray, required = true, default = nil)
  if valid_602538 != nil:
    section.add "RuleNames", valid_602538
  var valid_602539 = query.getOrDefault("Version")
  valid_602539 = validateParameter(valid_602539, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602539 != nil:
    section.add "Version", valid_602539
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602540 = header.getOrDefault("X-Amz-Date")
  valid_602540 = validateParameter(valid_602540, JString, required = false,
                                 default = nil)
  if valid_602540 != nil:
    section.add "X-Amz-Date", valid_602540
  var valid_602541 = header.getOrDefault("X-Amz-Security-Token")
  valid_602541 = validateParameter(valid_602541, JString, required = false,
                                 default = nil)
  if valid_602541 != nil:
    section.add "X-Amz-Security-Token", valid_602541
  var valid_602542 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602542 = validateParameter(valid_602542, JString, required = false,
                                 default = nil)
  if valid_602542 != nil:
    section.add "X-Amz-Content-Sha256", valid_602542
  var valid_602543 = header.getOrDefault("X-Amz-Algorithm")
  valid_602543 = validateParameter(valid_602543, JString, required = false,
                                 default = nil)
  if valid_602543 != nil:
    section.add "X-Amz-Algorithm", valid_602543
  var valid_602544 = header.getOrDefault("X-Amz-Signature")
  valid_602544 = validateParameter(valid_602544, JString, required = false,
                                 default = nil)
  if valid_602544 != nil:
    section.add "X-Amz-Signature", valid_602544
  var valid_602545 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602545 = validateParameter(valid_602545, JString, required = false,
                                 default = nil)
  if valid_602545 != nil:
    section.add "X-Amz-SignedHeaders", valid_602545
  var valid_602546 = header.getOrDefault("X-Amz-Credential")
  valid_602546 = validateParameter(valid_602546, JString, required = false,
                                 default = nil)
  if valid_602546 != nil:
    section.add "X-Amz-Credential", valid_602546
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602547: Call_GetReorderReceiptRuleSet_602533; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Reorders the receipt rules within a receipt rule set.</p> <note> <p>All of the rules in the rule set must be represented in this request. That is, this API will return an error if the reorder request doesn't explicitly position all of the rules.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_602547.validator(path, query, header, formData, body)
  let scheme = call_602547.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602547.url(scheme.get, call_602547.host, call_602547.base,
                         call_602547.route, valid.getOrDefault("path"))
  result = hook(call_602547, url, valid)

proc call*(call_602548: Call_GetReorderReceiptRuleSet_602533; RuleSetName: string;
          RuleNames: JsonNode; Action: string = "ReorderReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## getReorderReceiptRuleSet
  ## <p>Reorders the receipt rules within a receipt rule set.</p> <note> <p>All of the rules in the rule set must be represented in this request. That is, this API will return an error if the reorder request doesn't explicitly position all of the rules.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set to reorder.
  ##   Action: string (required)
  ##   RuleNames: JArray (required)
  ##            : A list of the specified receipt rule set's receipt rules in the order that you want to put them.
  ##   Version: string (required)
  var query_602549 = newJObject()
  add(query_602549, "RuleSetName", newJString(RuleSetName))
  add(query_602549, "Action", newJString(Action))
  if RuleNames != nil:
    query_602549.add "RuleNames", RuleNames
  add(query_602549, "Version", newJString(Version))
  result = call_602548.call(nil, query_602549, nil, nil, nil)

var getReorderReceiptRuleSet* = Call_GetReorderReceiptRuleSet_602533(
    name: "getReorderReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=ReorderReceiptRuleSet",
    validator: validate_GetReorderReceiptRuleSet_602534, base: "/",
    url: url_GetReorderReceiptRuleSet_602535, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSendBounce_602591 = ref object of OpenApiRestCall_600426
proc url_PostSendBounce_602593(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSendBounce_602592(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Generates and sends a bounce message to the sender of an email you received through Amazon SES. You can only use this API on an email up to 24 hours after you receive it.</p> <note> <p>You cannot use this API to send generic bounces for mail that was not received by Amazon SES.</p> </note> <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602594 = query.getOrDefault("Action")
  valid_602594 = validateParameter(valid_602594, JString, required = true,
                                 default = newJString("SendBounce"))
  if valid_602594 != nil:
    section.add "Action", valid_602594
  var valid_602595 = query.getOrDefault("Version")
  valid_602595 = validateParameter(valid_602595, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602595 != nil:
    section.add "Version", valid_602595
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602596 = header.getOrDefault("X-Amz-Date")
  valid_602596 = validateParameter(valid_602596, JString, required = false,
                                 default = nil)
  if valid_602596 != nil:
    section.add "X-Amz-Date", valid_602596
  var valid_602597 = header.getOrDefault("X-Amz-Security-Token")
  valid_602597 = validateParameter(valid_602597, JString, required = false,
                                 default = nil)
  if valid_602597 != nil:
    section.add "X-Amz-Security-Token", valid_602597
  var valid_602598 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602598 = validateParameter(valid_602598, JString, required = false,
                                 default = nil)
  if valid_602598 != nil:
    section.add "X-Amz-Content-Sha256", valid_602598
  var valid_602599 = header.getOrDefault("X-Amz-Algorithm")
  valid_602599 = validateParameter(valid_602599, JString, required = false,
                                 default = nil)
  if valid_602599 != nil:
    section.add "X-Amz-Algorithm", valid_602599
  var valid_602600 = header.getOrDefault("X-Amz-Signature")
  valid_602600 = validateParameter(valid_602600, JString, required = false,
                                 default = nil)
  if valid_602600 != nil:
    section.add "X-Amz-Signature", valid_602600
  var valid_602601 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602601 = validateParameter(valid_602601, JString, required = false,
                                 default = nil)
  if valid_602601 != nil:
    section.add "X-Amz-SignedHeaders", valid_602601
  var valid_602602 = header.getOrDefault("X-Amz-Credential")
  valid_602602 = validateParameter(valid_602602, JString, required = false,
                                 default = nil)
  if valid_602602 != nil:
    section.add "X-Amz-Credential", valid_602602
  result.add "header", section
  ## parameters in `formData` object:
  ##   OriginalMessageId: JString (required)
  ##                    : The message ID of the message to be bounced.
  ##   BounceSenderArn: JString
  ##                  : This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the address in the "From" header of the bounce. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.
  ##   MessageDsn.ReportingMta: JString
  ##                          : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## The reporting MTA that attempted to deliver the message, formatted as specified in <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a> (<code>mta-name-type; mta-name</code>). The default value is <code>dns; inbound-smtp.[region].amazonaws.com</code>.
  ##   MessageDsn.ExtensionFields: JArray
  ##                             : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## Additional X-headers to include in the DSN.
  ##   BounceSender: JString (required)
  ##               : The address to use in the "From" header of the bounce message. This must be an identity that you have verified with Amazon SES.
  ##   Explanation: JString
  ##              : Human-readable text for the bounce message to explain the failure. If not specified, the text will be auto-generated based on the bounced recipient information.
  ##   MessageDsn.ArrivalDate: JString
  ##                         : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## When the message was received by the reporting mail transfer agent (MTA), in <a href="https://www.ietf.org/rfc/rfc0822.txt">RFC 822</a> date-time format.
  ##   BouncedRecipientInfoList: JArray (required)
  ##                           : A list of recipients of the bounced message, including the information required to create the Delivery Status Notifications (DSNs) for the recipients. You must specify at least one <code>BouncedRecipientInfo</code> in the list.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OriginalMessageId` field"
  var valid_602603 = formData.getOrDefault("OriginalMessageId")
  valid_602603 = validateParameter(valid_602603, JString, required = true,
                                 default = nil)
  if valid_602603 != nil:
    section.add "OriginalMessageId", valid_602603
  var valid_602604 = formData.getOrDefault("BounceSenderArn")
  valid_602604 = validateParameter(valid_602604, JString, required = false,
                                 default = nil)
  if valid_602604 != nil:
    section.add "BounceSenderArn", valid_602604
  var valid_602605 = formData.getOrDefault("MessageDsn.ReportingMta")
  valid_602605 = validateParameter(valid_602605, JString, required = false,
                                 default = nil)
  if valid_602605 != nil:
    section.add "MessageDsn.ReportingMta", valid_602605
  var valid_602606 = formData.getOrDefault("MessageDsn.ExtensionFields")
  valid_602606 = validateParameter(valid_602606, JArray, required = false,
                                 default = nil)
  if valid_602606 != nil:
    section.add "MessageDsn.ExtensionFields", valid_602606
  var valid_602607 = formData.getOrDefault("BounceSender")
  valid_602607 = validateParameter(valid_602607, JString, required = true,
                                 default = nil)
  if valid_602607 != nil:
    section.add "BounceSender", valid_602607
  var valid_602608 = formData.getOrDefault("Explanation")
  valid_602608 = validateParameter(valid_602608, JString, required = false,
                                 default = nil)
  if valid_602608 != nil:
    section.add "Explanation", valid_602608
  var valid_602609 = formData.getOrDefault("MessageDsn.ArrivalDate")
  valid_602609 = validateParameter(valid_602609, JString, required = false,
                                 default = nil)
  if valid_602609 != nil:
    section.add "MessageDsn.ArrivalDate", valid_602609
  var valid_602610 = formData.getOrDefault("BouncedRecipientInfoList")
  valid_602610 = validateParameter(valid_602610, JArray, required = true, default = nil)
  if valid_602610 != nil:
    section.add "BouncedRecipientInfoList", valid_602610
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602611: Call_PostSendBounce_602591; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Generates and sends a bounce message to the sender of an email you received through Amazon SES. You can only use this API on an email up to 24 hours after you receive it.</p> <note> <p>You cannot use this API to send generic bounces for mail that was not received by Amazon SES.</p> </note> <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_602611.validator(path, query, header, formData, body)
  let scheme = call_602611.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602611.url(scheme.get, call_602611.host, call_602611.base,
                         call_602611.route, valid.getOrDefault("path"))
  result = hook(call_602611, url, valid)

proc call*(call_602612: Call_PostSendBounce_602591; OriginalMessageId: string;
          BounceSender: string; BouncedRecipientInfoList: JsonNode;
          BounceSenderArn: string = ""; MessageDsnReportingMta: string = "";
          MessageDsnExtensionFields: JsonNode = nil; Explanation: string = "";
          Action: string = "SendBounce"; MessageDsnArrivalDate: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## postSendBounce
  ## <p>Generates and sends a bounce message to the sender of an email you received through Amazon SES. You can only use this API on an email up to 24 hours after you receive it.</p> <note> <p>You cannot use this API to send generic bounces for mail that was not received by Amazon SES.</p> </note> <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   OriginalMessageId: string (required)
  ##                    : The message ID of the message to be bounced.
  ##   BounceSenderArn: string
  ##                  : This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the address in the "From" header of the bounce. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.
  ##   MessageDsnReportingMta: string
  ##                         : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## The reporting MTA that attempted to deliver the message, formatted as specified in <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a> (<code>mta-name-type; mta-name</code>). The default value is <code>dns; inbound-smtp.[region].amazonaws.com</code>.
  ##   MessageDsnExtensionFields: JArray
  ##                            : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## Additional X-headers to include in the DSN.
  ##   BounceSender: string (required)
  ##               : The address to use in the "From" header of the bounce message. This must be an identity that you have verified with Amazon SES.
  ##   Explanation: string
  ##              : Human-readable text for the bounce message to explain the failure. If not specified, the text will be auto-generated based on the bounced recipient information.
  ##   Action: string (required)
  ##   MessageDsnArrivalDate: string
  ##                        : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## When the message was received by the reporting mail transfer agent (MTA), in <a href="https://www.ietf.org/rfc/rfc0822.txt">RFC 822</a> date-time format.
  ##   BouncedRecipientInfoList: JArray (required)
  ##                           : A list of recipients of the bounced message, including the information required to create the Delivery Status Notifications (DSNs) for the recipients. You must specify at least one <code>BouncedRecipientInfo</code> in the list.
  ##   Version: string (required)
  var query_602613 = newJObject()
  var formData_602614 = newJObject()
  add(formData_602614, "OriginalMessageId", newJString(OriginalMessageId))
  add(formData_602614, "BounceSenderArn", newJString(BounceSenderArn))
  add(formData_602614, "MessageDsn.ReportingMta",
      newJString(MessageDsnReportingMta))
  if MessageDsnExtensionFields != nil:
    formData_602614.add "MessageDsn.ExtensionFields", MessageDsnExtensionFields
  add(formData_602614, "BounceSender", newJString(BounceSender))
  add(formData_602614, "Explanation", newJString(Explanation))
  add(query_602613, "Action", newJString(Action))
  add(formData_602614, "MessageDsn.ArrivalDate", newJString(MessageDsnArrivalDate))
  if BouncedRecipientInfoList != nil:
    formData_602614.add "BouncedRecipientInfoList", BouncedRecipientInfoList
  add(query_602613, "Version", newJString(Version))
  result = call_602612.call(nil, query_602613, nil, formData_602614, nil)

var postSendBounce* = Call_PostSendBounce_602591(name: "postSendBounce",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=SendBounce", validator: validate_PostSendBounce_602592,
    base: "/", url: url_PostSendBounce_602593, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSendBounce_602568 = ref object of OpenApiRestCall_600426
proc url_GetSendBounce_602570(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSendBounce_602569(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates and sends a bounce message to the sender of an email you received through Amazon SES. You can only use this API on an email up to 24 hours after you receive it.</p> <note> <p>You cannot use this API to send generic bounces for mail that was not received by Amazon SES.</p> </note> <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Explanation: JString
  ##              : Human-readable text for the bounce message to explain the failure. If not specified, the text will be auto-generated based on the bounced recipient information.
  ##   BounceSender: JString (required)
  ##               : The address to use in the "From" header of the bounce message. This must be an identity that you have verified with Amazon SES.
  ##   OriginalMessageId: JString (required)
  ##                    : The message ID of the message to be bounced.
  ##   BouncedRecipientInfoList: JArray (required)
  ##                           : A list of recipients of the bounced message, including the information required to create the Delivery Status Notifications (DSNs) for the recipients. You must specify at least one <code>BouncedRecipientInfo</code> in the list.
  ##   Action: JString (required)
  ##   BounceSenderArn: JString
  ##                  : This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the address in the "From" header of the bounce. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.
  ##   MessageDsn.ArrivalDate: JString
  ##                         : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## When the message was received by the reporting mail transfer agent (MTA), in <a href="https://www.ietf.org/rfc/rfc0822.txt">RFC 822</a> date-time format.
  ##   MessageDsn.ReportingMta: JString
  ##                          : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## The reporting MTA that attempted to deliver the message, formatted as specified in <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a> (<code>mta-name-type; mta-name</code>). The default value is <code>dns; inbound-smtp.[region].amazonaws.com</code>.
  ##   Version: JString (required)
  ##   MessageDsn.ExtensionFields: JArray
  ##                             : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## Additional X-headers to include in the DSN.
  section = newJObject()
  var valid_602571 = query.getOrDefault("Explanation")
  valid_602571 = validateParameter(valid_602571, JString, required = false,
                                 default = nil)
  if valid_602571 != nil:
    section.add "Explanation", valid_602571
  assert query != nil,
        "query argument is necessary due to required `BounceSender` field"
  var valid_602572 = query.getOrDefault("BounceSender")
  valid_602572 = validateParameter(valid_602572, JString, required = true,
                                 default = nil)
  if valid_602572 != nil:
    section.add "BounceSender", valid_602572
  var valid_602573 = query.getOrDefault("OriginalMessageId")
  valid_602573 = validateParameter(valid_602573, JString, required = true,
                                 default = nil)
  if valid_602573 != nil:
    section.add "OriginalMessageId", valid_602573
  var valid_602574 = query.getOrDefault("BouncedRecipientInfoList")
  valid_602574 = validateParameter(valid_602574, JArray, required = true, default = nil)
  if valid_602574 != nil:
    section.add "BouncedRecipientInfoList", valid_602574
  var valid_602575 = query.getOrDefault("Action")
  valid_602575 = validateParameter(valid_602575, JString, required = true,
                                 default = newJString("SendBounce"))
  if valid_602575 != nil:
    section.add "Action", valid_602575
  var valid_602576 = query.getOrDefault("BounceSenderArn")
  valid_602576 = validateParameter(valid_602576, JString, required = false,
                                 default = nil)
  if valid_602576 != nil:
    section.add "BounceSenderArn", valid_602576
  var valid_602577 = query.getOrDefault("MessageDsn.ArrivalDate")
  valid_602577 = validateParameter(valid_602577, JString, required = false,
                                 default = nil)
  if valid_602577 != nil:
    section.add "MessageDsn.ArrivalDate", valid_602577
  var valid_602578 = query.getOrDefault("MessageDsn.ReportingMta")
  valid_602578 = validateParameter(valid_602578, JString, required = false,
                                 default = nil)
  if valid_602578 != nil:
    section.add "MessageDsn.ReportingMta", valid_602578
  var valid_602579 = query.getOrDefault("Version")
  valid_602579 = validateParameter(valid_602579, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602579 != nil:
    section.add "Version", valid_602579
  var valid_602580 = query.getOrDefault("MessageDsn.ExtensionFields")
  valid_602580 = validateParameter(valid_602580, JArray, required = false,
                                 default = nil)
  if valid_602580 != nil:
    section.add "MessageDsn.ExtensionFields", valid_602580
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602581 = header.getOrDefault("X-Amz-Date")
  valid_602581 = validateParameter(valid_602581, JString, required = false,
                                 default = nil)
  if valid_602581 != nil:
    section.add "X-Amz-Date", valid_602581
  var valid_602582 = header.getOrDefault("X-Amz-Security-Token")
  valid_602582 = validateParameter(valid_602582, JString, required = false,
                                 default = nil)
  if valid_602582 != nil:
    section.add "X-Amz-Security-Token", valid_602582
  var valid_602583 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602583 = validateParameter(valid_602583, JString, required = false,
                                 default = nil)
  if valid_602583 != nil:
    section.add "X-Amz-Content-Sha256", valid_602583
  var valid_602584 = header.getOrDefault("X-Amz-Algorithm")
  valid_602584 = validateParameter(valid_602584, JString, required = false,
                                 default = nil)
  if valid_602584 != nil:
    section.add "X-Amz-Algorithm", valid_602584
  var valid_602585 = header.getOrDefault("X-Amz-Signature")
  valid_602585 = validateParameter(valid_602585, JString, required = false,
                                 default = nil)
  if valid_602585 != nil:
    section.add "X-Amz-Signature", valid_602585
  var valid_602586 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602586 = validateParameter(valid_602586, JString, required = false,
                                 default = nil)
  if valid_602586 != nil:
    section.add "X-Amz-SignedHeaders", valid_602586
  var valid_602587 = header.getOrDefault("X-Amz-Credential")
  valid_602587 = validateParameter(valid_602587, JString, required = false,
                                 default = nil)
  if valid_602587 != nil:
    section.add "X-Amz-Credential", valid_602587
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602588: Call_GetSendBounce_602568; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Generates and sends a bounce message to the sender of an email you received through Amazon SES. You can only use this API on an email up to 24 hours after you receive it.</p> <note> <p>You cannot use this API to send generic bounces for mail that was not received by Amazon SES.</p> </note> <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_602588.validator(path, query, header, formData, body)
  let scheme = call_602588.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602588.url(scheme.get, call_602588.host, call_602588.base,
                         call_602588.route, valid.getOrDefault("path"))
  result = hook(call_602588, url, valid)

proc call*(call_602589: Call_GetSendBounce_602568; BounceSender: string;
          OriginalMessageId: string; BouncedRecipientInfoList: JsonNode;
          Explanation: string = ""; Action: string = "SendBounce";
          BounceSenderArn: string = ""; MessageDsnArrivalDate: string = "";
          MessageDsnReportingMta: string = ""; Version: string = "2010-12-01";
          MessageDsnExtensionFields: JsonNode = nil): Recallable =
  ## getSendBounce
  ## <p>Generates and sends a bounce message to the sender of an email you received through Amazon SES. You can only use this API on an email up to 24 hours after you receive it.</p> <note> <p>You cannot use this API to send generic bounces for mail that was not received by Amazon SES.</p> </note> <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Explanation: string
  ##              : Human-readable text for the bounce message to explain the failure. If not specified, the text will be auto-generated based on the bounced recipient information.
  ##   BounceSender: string (required)
  ##               : The address to use in the "From" header of the bounce message. This must be an identity that you have verified with Amazon SES.
  ##   OriginalMessageId: string (required)
  ##                    : The message ID of the message to be bounced.
  ##   BouncedRecipientInfoList: JArray (required)
  ##                           : A list of recipients of the bounced message, including the information required to create the Delivery Status Notifications (DSNs) for the recipients. You must specify at least one <code>BouncedRecipientInfo</code> in the list.
  ##   Action: string (required)
  ##   BounceSenderArn: string
  ##                  : This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the address in the "From" header of the bounce. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.
  ##   MessageDsnArrivalDate: string
  ##                        : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## When the message was received by the reporting mail transfer agent (MTA), in <a href="https://www.ietf.org/rfc/rfc0822.txt">RFC 822</a> date-time format.
  ##   MessageDsnReportingMta: string
  ##                         : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## The reporting MTA that attempted to deliver the message, formatted as specified in <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a> (<code>mta-name-type; mta-name</code>). The default value is <code>dns; inbound-smtp.[region].amazonaws.com</code>.
  ##   Version: string (required)
  ##   MessageDsnExtensionFields: JArray
  ##                            : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## Additional X-headers to include in the DSN.
  var query_602590 = newJObject()
  add(query_602590, "Explanation", newJString(Explanation))
  add(query_602590, "BounceSender", newJString(BounceSender))
  add(query_602590, "OriginalMessageId", newJString(OriginalMessageId))
  if BouncedRecipientInfoList != nil:
    query_602590.add "BouncedRecipientInfoList", BouncedRecipientInfoList
  add(query_602590, "Action", newJString(Action))
  add(query_602590, "BounceSenderArn", newJString(BounceSenderArn))
  add(query_602590, "MessageDsn.ArrivalDate", newJString(MessageDsnArrivalDate))
  add(query_602590, "MessageDsn.ReportingMta", newJString(MessageDsnReportingMta))
  add(query_602590, "Version", newJString(Version))
  if MessageDsnExtensionFields != nil:
    query_602590.add "MessageDsn.ExtensionFields", MessageDsnExtensionFields
  result = call_602589.call(nil, query_602590, nil, nil, nil)

var getSendBounce* = Call_GetSendBounce_602568(name: "getSendBounce",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=SendBounce", validator: validate_GetSendBounce_602569,
    base: "/", url: url_GetSendBounce_602570, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSendBulkTemplatedEmail_602641 = ref object of OpenApiRestCall_600426
proc url_PostSendBulkTemplatedEmail_602643(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSendBulkTemplatedEmail_602642(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Composes an email message to multiple destinations. The message body is created using an email template.</p> <p>In order to send email using the <code>SendBulkTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Each <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendBulkTemplatedEmail</code> operation several times to send the message to each group.</p> </li> <li> <p>The number of destinations you can contact in a single call to the API may be limited by your account's maximum sending rate.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602644 = query.getOrDefault("Action")
  valid_602644 = validateParameter(valid_602644, JString, required = true,
                                 default = newJString("SendBulkTemplatedEmail"))
  if valid_602644 != nil:
    section.add "Action", valid_602644
  var valid_602645 = query.getOrDefault("Version")
  valid_602645 = validateParameter(valid_602645, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602645 != nil:
    section.add "Version", valid_602645
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602646 = header.getOrDefault("X-Amz-Date")
  valid_602646 = validateParameter(valid_602646, JString, required = false,
                                 default = nil)
  if valid_602646 != nil:
    section.add "X-Amz-Date", valid_602646
  var valid_602647 = header.getOrDefault("X-Amz-Security-Token")
  valid_602647 = validateParameter(valid_602647, JString, required = false,
                                 default = nil)
  if valid_602647 != nil:
    section.add "X-Amz-Security-Token", valid_602647
  var valid_602648 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602648 = validateParameter(valid_602648, JString, required = false,
                                 default = nil)
  if valid_602648 != nil:
    section.add "X-Amz-Content-Sha256", valid_602648
  var valid_602649 = header.getOrDefault("X-Amz-Algorithm")
  valid_602649 = validateParameter(valid_602649, JString, required = false,
                                 default = nil)
  if valid_602649 != nil:
    section.add "X-Amz-Algorithm", valid_602649
  var valid_602650 = header.getOrDefault("X-Amz-Signature")
  valid_602650 = validateParameter(valid_602650, JString, required = false,
                                 default = nil)
  if valid_602650 != nil:
    section.add "X-Amz-Signature", valid_602650
  var valid_602651 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602651 = validateParameter(valid_602651, JString, required = false,
                                 default = nil)
  if valid_602651 != nil:
    section.add "X-Amz-SignedHeaders", valid_602651
  var valid_602652 = header.getOrDefault("X-Amz-Credential")
  valid_602652 = validateParameter(valid_602652, JString, required = false,
                                 default = nil)
  if valid_602652 != nil:
    section.add "X-Amz-Credential", valid_602652
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendBulkTemplatedEmail</code>.
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Destinations: JArray (required)
  ##               : One or more <code>Destination</code> objects. All of the recipients in a <code>Destination</code> will receive the same version of the email. You can specify up to 50 <code>Destination</code> objects within a <code>Destinations</code> array.
  ##   DefaultTags: JArray
  ##              : A list of tags, in the form of name/value pairs, to apply to an email that you send to a destination using <code>SendBulkTemplatedEmail</code>.
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Template: JString (required)
  ##           : The template to use when sending this email.
  ##   ReturnPath: JString
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   DefaultTemplateData: JString
  ##                      : <p>A list of replacement values to apply to the template when replacement data is not specified in a Destination object. These values act as a default or fallback option when no other data is available.</p> <p>The template data is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.</p>
  ##   TemplateArn: JString
  ##              : The ARN of the template to use when sending this email.
  ##   Source: JString (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  section = newJObject()
  var valid_602653 = formData.getOrDefault("ConfigurationSetName")
  valid_602653 = validateParameter(valid_602653, JString, required = false,
                                 default = nil)
  if valid_602653 != nil:
    section.add "ConfigurationSetName", valid_602653
  var valid_602654 = formData.getOrDefault("SourceArn")
  valid_602654 = validateParameter(valid_602654, JString, required = false,
                                 default = nil)
  if valid_602654 != nil:
    section.add "SourceArn", valid_602654
  assert formData != nil,
        "formData argument is necessary due to required `Destinations` field"
  var valid_602655 = formData.getOrDefault("Destinations")
  valid_602655 = validateParameter(valid_602655, JArray, required = true, default = nil)
  if valid_602655 != nil:
    section.add "Destinations", valid_602655
  var valid_602656 = formData.getOrDefault("DefaultTags")
  valid_602656 = validateParameter(valid_602656, JArray, required = false,
                                 default = nil)
  if valid_602656 != nil:
    section.add "DefaultTags", valid_602656
  var valid_602657 = formData.getOrDefault("ReplyToAddresses")
  valid_602657 = validateParameter(valid_602657, JArray, required = false,
                                 default = nil)
  if valid_602657 != nil:
    section.add "ReplyToAddresses", valid_602657
  var valid_602658 = formData.getOrDefault("Template")
  valid_602658 = validateParameter(valid_602658, JString, required = true,
                                 default = nil)
  if valid_602658 != nil:
    section.add "Template", valid_602658
  var valid_602659 = formData.getOrDefault("ReturnPath")
  valid_602659 = validateParameter(valid_602659, JString, required = false,
                                 default = nil)
  if valid_602659 != nil:
    section.add "ReturnPath", valid_602659
  var valid_602660 = formData.getOrDefault("ReturnPathArn")
  valid_602660 = validateParameter(valid_602660, JString, required = false,
                                 default = nil)
  if valid_602660 != nil:
    section.add "ReturnPathArn", valid_602660
  var valid_602661 = formData.getOrDefault("DefaultTemplateData")
  valid_602661 = validateParameter(valid_602661, JString, required = false,
                                 default = nil)
  if valid_602661 != nil:
    section.add "DefaultTemplateData", valid_602661
  var valid_602662 = formData.getOrDefault("TemplateArn")
  valid_602662 = validateParameter(valid_602662, JString, required = false,
                                 default = nil)
  if valid_602662 != nil:
    section.add "TemplateArn", valid_602662
  var valid_602663 = formData.getOrDefault("Source")
  valid_602663 = validateParameter(valid_602663, JString, required = true,
                                 default = nil)
  if valid_602663 != nil:
    section.add "Source", valid_602663
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602664: Call_PostSendBulkTemplatedEmail_602641; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message to multiple destinations. The message body is created using an email template.</p> <p>In order to send email using the <code>SendBulkTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Each <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendBulkTemplatedEmail</code> operation several times to send the message to each group.</p> </li> <li> <p>The number of destinations you can contact in a single call to the API may be limited by your account's maximum sending rate.</p> </li> </ul>
  ## 
  let valid = call_602664.validator(path, query, header, formData, body)
  let scheme = call_602664.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602664.url(scheme.get, call_602664.host, call_602664.base,
                         call_602664.route, valid.getOrDefault("path"))
  result = hook(call_602664, url, valid)

proc call*(call_602665: Call_PostSendBulkTemplatedEmail_602641;
          Destinations: JsonNode; Template: string; Source: string;
          ConfigurationSetName: string = ""; SourceArn: string = "";
          DefaultTags: JsonNode = nil; ReplyToAddresses: JsonNode = nil;
          ReturnPath: string = ""; ReturnPathArn: string = "";
          Action: string = "SendBulkTemplatedEmail";
          DefaultTemplateData: string = ""; TemplateArn: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## postSendBulkTemplatedEmail
  ## <p>Composes an email message to multiple destinations. The message body is created using an email template.</p> <p>In order to send email using the <code>SendBulkTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Each <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendBulkTemplatedEmail</code> operation several times to send the message to each group.</p> </li> <li> <p>The number of destinations you can contact in a single call to the API may be limited by your account's maximum sending rate.</p> </li> </ul>
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendBulkTemplatedEmail</code>.
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Destinations: JArray (required)
  ##               : One or more <code>Destination</code> objects. All of the recipients in a <code>Destination</code> will receive the same version of the email. You can specify up to 50 <code>Destination</code> objects within a <code>Destinations</code> array.
  ##   DefaultTags: JArray
  ##              : A list of tags, in the form of name/value pairs, to apply to an email that you send to a destination using <code>SendBulkTemplatedEmail</code>.
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Template: string (required)
  ##           : The template to use when sending this email.
  ##   ReturnPath: string
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Action: string (required)
  ##   DefaultTemplateData: string
  ##                      : <p>A list of replacement values to apply to the template when replacement data is not specified in a Destination object. These values act as a default or fallback option when no other data is available.</p> <p>The template data is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.</p>
  ##   TemplateArn: string
  ##              : The ARN of the template to use when sending this email.
  ##   Version: string (required)
  ##   Source: string (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  var query_602666 = newJObject()
  var formData_602667 = newJObject()
  add(formData_602667, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_602667, "SourceArn", newJString(SourceArn))
  if Destinations != nil:
    formData_602667.add "Destinations", Destinations
  if DefaultTags != nil:
    formData_602667.add "DefaultTags", DefaultTags
  if ReplyToAddresses != nil:
    formData_602667.add "ReplyToAddresses", ReplyToAddresses
  add(formData_602667, "Template", newJString(Template))
  add(formData_602667, "ReturnPath", newJString(ReturnPath))
  add(formData_602667, "ReturnPathArn", newJString(ReturnPathArn))
  add(query_602666, "Action", newJString(Action))
  add(formData_602667, "DefaultTemplateData", newJString(DefaultTemplateData))
  add(formData_602667, "TemplateArn", newJString(TemplateArn))
  add(query_602666, "Version", newJString(Version))
  add(formData_602667, "Source", newJString(Source))
  result = call_602665.call(nil, query_602666, nil, formData_602667, nil)

var postSendBulkTemplatedEmail* = Call_PostSendBulkTemplatedEmail_602641(
    name: "postSendBulkTemplatedEmail", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SendBulkTemplatedEmail",
    validator: validate_PostSendBulkTemplatedEmail_602642, base: "/",
    url: url_PostSendBulkTemplatedEmail_602643,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSendBulkTemplatedEmail_602615 = ref object of OpenApiRestCall_600426
proc url_GetSendBulkTemplatedEmail_602617(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSendBulkTemplatedEmail_602616(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Composes an email message to multiple destinations. The message body is created using an email template.</p> <p>In order to send email using the <code>SendBulkTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Each <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendBulkTemplatedEmail</code> operation several times to send the message to each group.</p> </li> <li> <p>The number of destinations you can contact in a single call to the API may be limited by your account's maximum sending rate.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Template: JString (required)
  ##           : The template to use when sending this email.
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   TemplateArn: JString
  ##              : The ARN of the template to use when sending this email.
  ##   DefaultTemplateData: JString
  ##                      : <p>A list of replacement values to apply to the template when replacement data is not specified in a Destination object. These values act as a default or fallback option when no other data is available.</p> <p>The template data is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.</p>
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   DefaultTags: JArray
  ##              : A list of tags, in the form of name/value pairs, to apply to an email that you send to a destination using <code>SendBulkTemplatedEmail</code>.
  ##   Action: JString (required)
  ##   Destinations: JArray (required)
  ##               : One or more <code>Destination</code> objects. All of the recipients in a <code>Destination</code> will receive the same version of the email. You can specify up to 50 <code>Destination</code> objects within a <code>Destinations</code> array.
  ##   Source: JString (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   ReturnPath: JString
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendBulkTemplatedEmail</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_602618 = query.getOrDefault("ReplyToAddresses")
  valid_602618 = validateParameter(valid_602618, JArray, required = false,
                                 default = nil)
  if valid_602618 != nil:
    section.add "ReplyToAddresses", valid_602618
  assert query != nil,
        "query argument is necessary due to required `Template` field"
  var valid_602619 = query.getOrDefault("Template")
  valid_602619 = validateParameter(valid_602619, JString, required = true,
                                 default = nil)
  if valid_602619 != nil:
    section.add "Template", valid_602619
  var valid_602620 = query.getOrDefault("ReturnPathArn")
  valid_602620 = validateParameter(valid_602620, JString, required = false,
                                 default = nil)
  if valid_602620 != nil:
    section.add "ReturnPathArn", valid_602620
  var valid_602621 = query.getOrDefault("TemplateArn")
  valid_602621 = validateParameter(valid_602621, JString, required = false,
                                 default = nil)
  if valid_602621 != nil:
    section.add "TemplateArn", valid_602621
  var valid_602622 = query.getOrDefault("DefaultTemplateData")
  valid_602622 = validateParameter(valid_602622, JString, required = false,
                                 default = nil)
  if valid_602622 != nil:
    section.add "DefaultTemplateData", valid_602622
  var valid_602623 = query.getOrDefault("SourceArn")
  valid_602623 = validateParameter(valid_602623, JString, required = false,
                                 default = nil)
  if valid_602623 != nil:
    section.add "SourceArn", valid_602623
  var valid_602624 = query.getOrDefault("DefaultTags")
  valid_602624 = validateParameter(valid_602624, JArray, required = false,
                                 default = nil)
  if valid_602624 != nil:
    section.add "DefaultTags", valid_602624
  var valid_602625 = query.getOrDefault("Action")
  valid_602625 = validateParameter(valid_602625, JString, required = true,
                                 default = newJString("SendBulkTemplatedEmail"))
  if valid_602625 != nil:
    section.add "Action", valid_602625
  var valid_602626 = query.getOrDefault("Destinations")
  valid_602626 = validateParameter(valid_602626, JArray, required = true, default = nil)
  if valid_602626 != nil:
    section.add "Destinations", valid_602626
  var valid_602627 = query.getOrDefault("Source")
  valid_602627 = validateParameter(valid_602627, JString, required = true,
                                 default = nil)
  if valid_602627 != nil:
    section.add "Source", valid_602627
  var valid_602628 = query.getOrDefault("ReturnPath")
  valid_602628 = validateParameter(valid_602628, JString, required = false,
                                 default = nil)
  if valid_602628 != nil:
    section.add "ReturnPath", valid_602628
  var valid_602629 = query.getOrDefault("ConfigurationSetName")
  valid_602629 = validateParameter(valid_602629, JString, required = false,
                                 default = nil)
  if valid_602629 != nil:
    section.add "ConfigurationSetName", valid_602629
  var valid_602630 = query.getOrDefault("Version")
  valid_602630 = validateParameter(valid_602630, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602630 != nil:
    section.add "Version", valid_602630
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602631 = header.getOrDefault("X-Amz-Date")
  valid_602631 = validateParameter(valid_602631, JString, required = false,
                                 default = nil)
  if valid_602631 != nil:
    section.add "X-Amz-Date", valid_602631
  var valid_602632 = header.getOrDefault("X-Amz-Security-Token")
  valid_602632 = validateParameter(valid_602632, JString, required = false,
                                 default = nil)
  if valid_602632 != nil:
    section.add "X-Amz-Security-Token", valid_602632
  var valid_602633 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602633 = validateParameter(valid_602633, JString, required = false,
                                 default = nil)
  if valid_602633 != nil:
    section.add "X-Amz-Content-Sha256", valid_602633
  var valid_602634 = header.getOrDefault("X-Amz-Algorithm")
  valid_602634 = validateParameter(valid_602634, JString, required = false,
                                 default = nil)
  if valid_602634 != nil:
    section.add "X-Amz-Algorithm", valid_602634
  var valid_602635 = header.getOrDefault("X-Amz-Signature")
  valid_602635 = validateParameter(valid_602635, JString, required = false,
                                 default = nil)
  if valid_602635 != nil:
    section.add "X-Amz-Signature", valid_602635
  var valid_602636 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602636 = validateParameter(valid_602636, JString, required = false,
                                 default = nil)
  if valid_602636 != nil:
    section.add "X-Amz-SignedHeaders", valid_602636
  var valid_602637 = header.getOrDefault("X-Amz-Credential")
  valid_602637 = validateParameter(valid_602637, JString, required = false,
                                 default = nil)
  if valid_602637 != nil:
    section.add "X-Amz-Credential", valid_602637
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602638: Call_GetSendBulkTemplatedEmail_602615; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message to multiple destinations. The message body is created using an email template.</p> <p>In order to send email using the <code>SendBulkTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Each <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendBulkTemplatedEmail</code> operation several times to send the message to each group.</p> </li> <li> <p>The number of destinations you can contact in a single call to the API may be limited by your account's maximum sending rate.</p> </li> </ul>
  ## 
  let valid = call_602638.validator(path, query, header, formData, body)
  let scheme = call_602638.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602638.url(scheme.get, call_602638.host, call_602638.base,
                         call_602638.route, valid.getOrDefault("path"))
  result = hook(call_602638, url, valid)

proc call*(call_602639: Call_GetSendBulkTemplatedEmail_602615; Template: string;
          Destinations: JsonNode; Source: string; ReplyToAddresses: JsonNode = nil;
          ReturnPathArn: string = ""; TemplateArn: string = "";
          DefaultTemplateData: string = ""; SourceArn: string = "";
          DefaultTags: JsonNode = nil; Action: string = "SendBulkTemplatedEmail";
          ReturnPath: string = ""; ConfigurationSetName: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## getSendBulkTemplatedEmail
  ## <p>Composes an email message to multiple destinations. The message body is created using an email template.</p> <p>In order to send email using the <code>SendBulkTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Each <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendBulkTemplatedEmail</code> operation several times to send the message to each group.</p> </li> <li> <p>The number of destinations you can contact in a single call to the API may be limited by your account's maximum sending rate.</p> </li> </ul>
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Template: string (required)
  ##           : The template to use when sending this email.
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   TemplateArn: string
  ##              : The ARN of the template to use when sending this email.
  ##   DefaultTemplateData: string
  ##                      : <p>A list of replacement values to apply to the template when replacement data is not specified in a Destination object. These values act as a default or fallback option when no other data is available.</p> <p>The template data is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.</p>
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   DefaultTags: JArray
  ##              : A list of tags, in the form of name/value pairs, to apply to an email that you send to a destination using <code>SendBulkTemplatedEmail</code>.
  ##   Action: string (required)
  ##   Destinations: JArray (required)
  ##               : One or more <code>Destination</code> objects. All of the recipients in a <code>Destination</code> will receive the same version of the email. You can specify up to 50 <code>Destination</code> objects within a <code>Destinations</code> array.
  ##   Source: string (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   ReturnPath: string
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendBulkTemplatedEmail</code>.
  ##   Version: string (required)
  var query_602640 = newJObject()
  if ReplyToAddresses != nil:
    query_602640.add "ReplyToAddresses", ReplyToAddresses
  add(query_602640, "Template", newJString(Template))
  add(query_602640, "ReturnPathArn", newJString(ReturnPathArn))
  add(query_602640, "TemplateArn", newJString(TemplateArn))
  add(query_602640, "DefaultTemplateData", newJString(DefaultTemplateData))
  add(query_602640, "SourceArn", newJString(SourceArn))
  if DefaultTags != nil:
    query_602640.add "DefaultTags", DefaultTags
  add(query_602640, "Action", newJString(Action))
  if Destinations != nil:
    query_602640.add "Destinations", Destinations
  add(query_602640, "Source", newJString(Source))
  add(query_602640, "ReturnPath", newJString(ReturnPath))
  add(query_602640, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_602640, "Version", newJString(Version))
  result = call_602639.call(nil, query_602640, nil, nil, nil)

var getSendBulkTemplatedEmail* = Call_GetSendBulkTemplatedEmail_602615(
    name: "getSendBulkTemplatedEmail", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SendBulkTemplatedEmail",
    validator: validate_GetSendBulkTemplatedEmail_602616, base: "/",
    url: url_GetSendBulkTemplatedEmail_602617,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSendCustomVerificationEmail_602686 = ref object of OpenApiRestCall_600426
proc url_PostSendCustomVerificationEmail_602688(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSendCustomVerificationEmail_602687(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address.</p> <p>To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602689 = query.getOrDefault("Action")
  valid_602689 = validateParameter(valid_602689, JString, required = true, default = newJString(
      "SendCustomVerificationEmail"))
  if valid_602689 != nil:
    section.add "Action", valid_602689
  var valid_602690 = query.getOrDefault("Version")
  valid_602690 = validateParameter(valid_602690, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602690 != nil:
    section.add "Version", valid_602690
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602691 = header.getOrDefault("X-Amz-Date")
  valid_602691 = validateParameter(valid_602691, JString, required = false,
                                 default = nil)
  if valid_602691 != nil:
    section.add "X-Amz-Date", valid_602691
  var valid_602692 = header.getOrDefault("X-Amz-Security-Token")
  valid_602692 = validateParameter(valid_602692, JString, required = false,
                                 default = nil)
  if valid_602692 != nil:
    section.add "X-Amz-Security-Token", valid_602692
  var valid_602693 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602693 = validateParameter(valid_602693, JString, required = false,
                                 default = nil)
  if valid_602693 != nil:
    section.add "X-Amz-Content-Sha256", valid_602693
  var valid_602694 = header.getOrDefault("X-Amz-Algorithm")
  valid_602694 = validateParameter(valid_602694, JString, required = false,
                                 default = nil)
  if valid_602694 != nil:
    section.add "X-Amz-Algorithm", valid_602694
  var valid_602695 = header.getOrDefault("X-Amz-Signature")
  valid_602695 = validateParameter(valid_602695, JString, required = false,
                                 default = nil)
  if valid_602695 != nil:
    section.add "X-Amz-Signature", valid_602695
  var valid_602696 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602696 = validateParameter(valid_602696, JString, required = false,
                                 default = nil)
  if valid_602696 != nil:
    section.add "X-Amz-SignedHeaders", valid_602696
  var valid_602697 = header.getOrDefault("X-Amz-Credential")
  valid_602697 = validateParameter(valid_602697, JString, required = false,
                                 default = nil)
  if valid_602697 != nil:
    section.add "X-Amz-Credential", valid_602697
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString
  ##                       : Name of a configuration set to use when sending the verification email.
  ##   EmailAddress: JString (required)
  ##               : The email address to verify.
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template to use when sending the verification email.
  section = newJObject()
  var valid_602698 = formData.getOrDefault("ConfigurationSetName")
  valid_602698 = validateParameter(valid_602698, JString, required = false,
                                 default = nil)
  if valid_602698 != nil:
    section.add "ConfigurationSetName", valid_602698
  assert formData != nil,
        "formData argument is necessary due to required `EmailAddress` field"
  var valid_602699 = formData.getOrDefault("EmailAddress")
  valid_602699 = validateParameter(valid_602699, JString, required = true,
                                 default = nil)
  if valid_602699 != nil:
    section.add "EmailAddress", valid_602699
  var valid_602700 = formData.getOrDefault("TemplateName")
  valid_602700 = validateParameter(valid_602700, JString, required = true,
                                 default = nil)
  if valid_602700 != nil:
    section.add "TemplateName", valid_602700
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602701: Call_PostSendCustomVerificationEmail_602686;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address.</p> <p>To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_602701.validator(path, query, header, formData, body)
  let scheme = call_602701.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602701.url(scheme.get, call_602701.host, call_602701.base,
                         call_602701.route, valid.getOrDefault("path"))
  result = hook(call_602701, url, valid)

proc call*(call_602702: Call_PostSendCustomVerificationEmail_602686;
          EmailAddress: string; TemplateName: string;
          ConfigurationSetName: string = "";
          Action: string = "SendCustomVerificationEmail";
          Version: string = "2010-12-01"): Recallable =
  ## postSendCustomVerificationEmail
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address.</p> <p>To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string
  ##                       : Name of a configuration set to use when sending the verification email.
  ##   EmailAddress: string (required)
  ##               : The email address to verify.
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template to use when sending the verification email.
  ##   Version: string (required)
  var query_602703 = newJObject()
  var formData_602704 = newJObject()
  add(formData_602704, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_602704, "EmailAddress", newJString(EmailAddress))
  add(query_602703, "Action", newJString(Action))
  add(formData_602704, "TemplateName", newJString(TemplateName))
  add(query_602703, "Version", newJString(Version))
  result = call_602702.call(nil, query_602703, nil, formData_602704, nil)

var postSendCustomVerificationEmail* = Call_PostSendCustomVerificationEmail_602686(
    name: "postSendCustomVerificationEmail", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SendCustomVerificationEmail",
    validator: validate_PostSendCustomVerificationEmail_602687, base: "/",
    url: url_PostSendCustomVerificationEmail_602688,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSendCustomVerificationEmail_602668 = ref object of OpenApiRestCall_600426
proc url_GetSendCustomVerificationEmail_602670(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSendCustomVerificationEmail_602669(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address.</p> <p>To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template to use when sending the verification email.
  ##   EmailAddress: JString (required)
  ##               : The email address to verify.
  ##   ConfigurationSetName: JString
  ##                       : Name of a configuration set to use when sending the verification email.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602671 = query.getOrDefault("Action")
  valid_602671 = validateParameter(valid_602671, JString, required = true, default = newJString(
      "SendCustomVerificationEmail"))
  if valid_602671 != nil:
    section.add "Action", valid_602671
  var valid_602672 = query.getOrDefault("TemplateName")
  valid_602672 = validateParameter(valid_602672, JString, required = true,
                                 default = nil)
  if valid_602672 != nil:
    section.add "TemplateName", valid_602672
  var valid_602673 = query.getOrDefault("EmailAddress")
  valid_602673 = validateParameter(valid_602673, JString, required = true,
                                 default = nil)
  if valid_602673 != nil:
    section.add "EmailAddress", valid_602673
  var valid_602674 = query.getOrDefault("ConfigurationSetName")
  valid_602674 = validateParameter(valid_602674, JString, required = false,
                                 default = nil)
  if valid_602674 != nil:
    section.add "ConfigurationSetName", valid_602674
  var valid_602675 = query.getOrDefault("Version")
  valid_602675 = validateParameter(valid_602675, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602675 != nil:
    section.add "Version", valid_602675
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602676 = header.getOrDefault("X-Amz-Date")
  valid_602676 = validateParameter(valid_602676, JString, required = false,
                                 default = nil)
  if valid_602676 != nil:
    section.add "X-Amz-Date", valid_602676
  var valid_602677 = header.getOrDefault("X-Amz-Security-Token")
  valid_602677 = validateParameter(valid_602677, JString, required = false,
                                 default = nil)
  if valid_602677 != nil:
    section.add "X-Amz-Security-Token", valid_602677
  var valid_602678 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602678 = validateParameter(valid_602678, JString, required = false,
                                 default = nil)
  if valid_602678 != nil:
    section.add "X-Amz-Content-Sha256", valid_602678
  var valid_602679 = header.getOrDefault("X-Amz-Algorithm")
  valid_602679 = validateParameter(valid_602679, JString, required = false,
                                 default = nil)
  if valid_602679 != nil:
    section.add "X-Amz-Algorithm", valid_602679
  var valid_602680 = header.getOrDefault("X-Amz-Signature")
  valid_602680 = validateParameter(valid_602680, JString, required = false,
                                 default = nil)
  if valid_602680 != nil:
    section.add "X-Amz-Signature", valid_602680
  var valid_602681 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602681 = validateParameter(valid_602681, JString, required = false,
                                 default = nil)
  if valid_602681 != nil:
    section.add "X-Amz-SignedHeaders", valid_602681
  var valid_602682 = header.getOrDefault("X-Amz-Credential")
  valid_602682 = validateParameter(valid_602682, JString, required = false,
                                 default = nil)
  if valid_602682 != nil:
    section.add "X-Amz-Credential", valid_602682
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602683: Call_GetSendCustomVerificationEmail_602668; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address.</p> <p>To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_602683.validator(path, query, header, formData, body)
  let scheme = call_602683.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602683.url(scheme.get, call_602683.host, call_602683.base,
                         call_602683.route, valid.getOrDefault("path"))
  result = hook(call_602683, url, valid)

proc call*(call_602684: Call_GetSendCustomVerificationEmail_602668;
          TemplateName: string; EmailAddress: string;
          Action: string = "SendCustomVerificationEmail";
          ConfigurationSetName: string = ""; Version: string = "2010-12-01"): Recallable =
  ## getSendCustomVerificationEmail
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address.</p> <p>To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template to use when sending the verification email.
  ##   EmailAddress: string (required)
  ##               : The email address to verify.
  ##   ConfigurationSetName: string
  ##                       : Name of a configuration set to use when sending the verification email.
  ##   Version: string (required)
  var query_602685 = newJObject()
  add(query_602685, "Action", newJString(Action))
  add(query_602685, "TemplateName", newJString(TemplateName))
  add(query_602685, "EmailAddress", newJString(EmailAddress))
  add(query_602685, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_602685, "Version", newJString(Version))
  result = call_602684.call(nil, query_602685, nil, nil, nil)

var getSendCustomVerificationEmail* = Call_GetSendCustomVerificationEmail_602668(
    name: "getSendCustomVerificationEmail", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SendCustomVerificationEmail",
    validator: validate_GetSendCustomVerificationEmail_602669, base: "/",
    url: url_GetSendCustomVerificationEmail_602670,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSendEmail_602732 = ref object of OpenApiRestCall_600426
proc url_PostSendEmail_602734(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSendEmail_602733(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Composes an email message and immediately queues it for sending. In order to send email using the <code>SendEmail</code> operation, your message must meet the following requirements:</p> <ul> <li> <p>The message must be sent from a verified email address or domain. If you attempt to send email using a non-verified address or domain, the operation will result in an "Email address not verified" error. </p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>The message must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendEmail</code> operation several times to send the message to each group.</p> </li> </ul> <important> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602735 = query.getOrDefault("Action")
  valid_602735 = validateParameter(valid_602735, JString, required = true,
                                 default = newJString("SendEmail"))
  if valid_602735 != nil:
    section.add "Action", valid_602735
  var valid_602736 = query.getOrDefault("Version")
  valid_602736 = validateParameter(valid_602736, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602736 != nil:
    section.add "Version", valid_602736
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602737 = header.getOrDefault("X-Amz-Date")
  valid_602737 = validateParameter(valid_602737, JString, required = false,
                                 default = nil)
  if valid_602737 != nil:
    section.add "X-Amz-Date", valid_602737
  var valid_602738 = header.getOrDefault("X-Amz-Security-Token")
  valid_602738 = validateParameter(valid_602738, JString, required = false,
                                 default = nil)
  if valid_602738 != nil:
    section.add "X-Amz-Security-Token", valid_602738
  var valid_602739 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602739 = validateParameter(valid_602739, JString, required = false,
                                 default = nil)
  if valid_602739 != nil:
    section.add "X-Amz-Content-Sha256", valid_602739
  var valid_602740 = header.getOrDefault("X-Amz-Algorithm")
  valid_602740 = validateParameter(valid_602740, JString, required = false,
                                 default = nil)
  if valid_602740 != nil:
    section.add "X-Amz-Algorithm", valid_602740
  var valid_602741 = header.getOrDefault("X-Amz-Signature")
  valid_602741 = validateParameter(valid_602741, JString, required = false,
                                 default = nil)
  if valid_602741 != nil:
    section.add "X-Amz-Signature", valid_602741
  var valid_602742 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602742 = validateParameter(valid_602742, JString, required = false,
                                 default = nil)
  if valid_602742 != nil:
    section.add "X-Amz-SignedHeaders", valid_602742
  var valid_602743 = header.getOrDefault("X-Amz-Credential")
  valid_602743 = validateParameter(valid_602743, JString, required = false,
                                 default = nil)
  if valid_602743 != nil:
    section.add "X-Amz-Credential", valid_602743
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendEmail</code>.
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Destination.BccAddresses: JArray
  ##                           : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Message.Body: JString
  ##               : Represents the message to be sent, composed of a subject and a body.
  ## The message body.
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ReturnPath: JString
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Destination.CcAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   Message.Subject: JString
  ##                  : Represents the message to be sent, composed of a subject and a body.
  ## The subject of the message: A short summary of the content, which will appear in the recipient's inbox.
  ##   Source: JString (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   Destination.ToAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  section = newJObject()
  var valid_602744 = formData.getOrDefault("ConfigurationSetName")
  valid_602744 = validateParameter(valid_602744, JString, required = false,
                                 default = nil)
  if valid_602744 != nil:
    section.add "ConfigurationSetName", valid_602744
  var valid_602745 = formData.getOrDefault("SourceArn")
  valid_602745 = validateParameter(valid_602745, JString, required = false,
                                 default = nil)
  if valid_602745 != nil:
    section.add "SourceArn", valid_602745
  var valid_602746 = formData.getOrDefault("Destination.BccAddresses")
  valid_602746 = validateParameter(valid_602746, JArray, required = false,
                                 default = nil)
  if valid_602746 != nil:
    section.add "Destination.BccAddresses", valid_602746
  var valid_602747 = formData.getOrDefault("ReplyToAddresses")
  valid_602747 = validateParameter(valid_602747, JArray, required = false,
                                 default = nil)
  if valid_602747 != nil:
    section.add "ReplyToAddresses", valid_602747
  var valid_602748 = formData.getOrDefault("Message.Body")
  valid_602748 = validateParameter(valid_602748, JString, required = false,
                                 default = nil)
  if valid_602748 != nil:
    section.add "Message.Body", valid_602748
  var valid_602749 = formData.getOrDefault("Tags")
  valid_602749 = validateParameter(valid_602749, JArray, required = false,
                                 default = nil)
  if valid_602749 != nil:
    section.add "Tags", valid_602749
  var valid_602750 = formData.getOrDefault("ReturnPath")
  valid_602750 = validateParameter(valid_602750, JString, required = false,
                                 default = nil)
  if valid_602750 != nil:
    section.add "ReturnPath", valid_602750
  var valid_602751 = formData.getOrDefault("ReturnPathArn")
  valid_602751 = validateParameter(valid_602751, JString, required = false,
                                 default = nil)
  if valid_602751 != nil:
    section.add "ReturnPathArn", valid_602751
  var valid_602752 = formData.getOrDefault("Destination.CcAddresses")
  valid_602752 = validateParameter(valid_602752, JArray, required = false,
                                 default = nil)
  if valid_602752 != nil:
    section.add "Destination.CcAddresses", valid_602752
  var valid_602753 = formData.getOrDefault("Message.Subject")
  valid_602753 = validateParameter(valid_602753, JString, required = false,
                                 default = nil)
  if valid_602753 != nil:
    section.add "Message.Subject", valid_602753
  assert formData != nil,
        "formData argument is necessary due to required `Source` field"
  var valid_602754 = formData.getOrDefault("Source")
  valid_602754 = validateParameter(valid_602754, JString, required = true,
                                 default = nil)
  if valid_602754 != nil:
    section.add "Source", valid_602754
  var valid_602755 = formData.getOrDefault("Destination.ToAddresses")
  valid_602755 = validateParameter(valid_602755, JArray, required = false,
                                 default = nil)
  if valid_602755 != nil:
    section.add "Destination.ToAddresses", valid_602755
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602756: Call_PostSendEmail_602732; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message and immediately queues it for sending. In order to send email using the <code>SendEmail</code> operation, your message must meet the following requirements:</p> <ul> <li> <p>The message must be sent from a verified email address or domain. If you attempt to send email using a non-verified address or domain, the operation will result in an "Email address not verified" error. </p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>The message must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendEmail</code> operation several times to send the message to each group.</p> </li> </ul> <important> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </important>
  ## 
  let valid = call_602756.validator(path, query, header, formData, body)
  let scheme = call_602756.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602756.url(scheme.get, call_602756.host, call_602756.base,
                         call_602756.route, valid.getOrDefault("path"))
  result = hook(call_602756, url, valid)

proc call*(call_602757: Call_PostSendEmail_602732; Source: string;
          ConfigurationSetName: string = ""; SourceArn: string = "";
          DestinationBccAddresses: JsonNode = nil; ReplyToAddresses: JsonNode = nil;
          MessageBody: string = ""; Tags: JsonNode = nil; ReturnPath: string = "";
          ReturnPathArn: string = ""; Action: string = "SendEmail";
          DestinationCcAddresses: JsonNode = nil; MessageSubject: string = "";
          Version: string = "2010-12-01"; DestinationToAddresses: JsonNode = nil): Recallable =
  ## postSendEmail
  ## <p>Composes an email message and immediately queues it for sending. In order to send email using the <code>SendEmail</code> operation, your message must meet the following requirements:</p> <ul> <li> <p>The message must be sent from a verified email address or domain. If you attempt to send email using a non-verified address or domain, the operation will result in an "Email address not verified" error. </p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>The message must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendEmail</code> operation several times to send the message to each group.</p> </li> </ul> <important> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </important>
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendEmail</code>.
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   DestinationBccAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   MessageBody: string
  ##              : Represents the message to be sent, composed of a subject and a body.
  ## The message body.
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ReturnPath: string
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Action: string (required)
  ##   DestinationCcAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   MessageSubject: string
  ##                 : Represents the message to be sent, composed of a subject and a body.
  ## The subject of the message: A short summary of the content, which will appear in the recipient's inbox.
  ##   Version: string (required)
  ##   Source: string (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   DestinationToAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  var query_602758 = newJObject()
  var formData_602759 = newJObject()
  add(formData_602759, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_602759, "SourceArn", newJString(SourceArn))
  if DestinationBccAddresses != nil:
    formData_602759.add "Destination.BccAddresses", DestinationBccAddresses
  if ReplyToAddresses != nil:
    formData_602759.add "ReplyToAddresses", ReplyToAddresses
  add(formData_602759, "Message.Body", newJString(MessageBody))
  if Tags != nil:
    formData_602759.add "Tags", Tags
  add(formData_602759, "ReturnPath", newJString(ReturnPath))
  add(formData_602759, "ReturnPathArn", newJString(ReturnPathArn))
  add(query_602758, "Action", newJString(Action))
  if DestinationCcAddresses != nil:
    formData_602759.add "Destination.CcAddresses", DestinationCcAddresses
  add(formData_602759, "Message.Subject", newJString(MessageSubject))
  add(query_602758, "Version", newJString(Version))
  add(formData_602759, "Source", newJString(Source))
  if DestinationToAddresses != nil:
    formData_602759.add "Destination.ToAddresses", DestinationToAddresses
  result = call_602757.call(nil, query_602758, nil, formData_602759, nil)

var postSendEmail* = Call_PostSendEmail_602732(name: "postSendEmail",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=SendEmail", validator: validate_PostSendEmail_602733,
    base: "/", url: url_PostSendEmail_602734, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSendEmail_602705 = ref object of OpenApiRestCall_600426
proc url_GetSendEmail_602707(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSendEmail_602706(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Composes an email message and immediately queues it for sending. In order to send email using the <code>SendEmail</code> operation, your message must meet the following requirements:</p> <ul> <li> <p>The message must be sent from a verified email address or domain. If you attempt to send email using a non-verified address or domain, the operation will result in an "Email address not verified" error. </p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>The message must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendEmail</code> operation several times to send the message to each group.</p> </li> </ul> <important> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Destination.BccAddresses: JArray
  ##                           : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Destination.ToAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Action: JString (required)
  ##   Destination.CcAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   Message.Subject: JString
  ##                  : Represents the message to be sent, composed of a subject and a body.
  ## The subject of the message: A short summary of the content, which will appear in the recipient's inbox.
  ##   Source: JString (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   ReturnPath: JString
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   Message.Body: JString
  ##               : Represents the message to be sent, composed of a subject and a body.
  ## The message body.
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendEmail</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_602708 = query.getOrDefault("ReplyToAddresses")
  valid_602708 = validateParameter(valid_602708, JArray, required = false,
                                 default = nil)
  if valid_602708 != nil:
    section.add "ReplyToAddresses", valid_602708
  var valid_602709 = query.getOrDefault("Destination.BccAddresses")
  valid_602709 = validateParameter(valid_602709, JArray, required = false,
                                 default = nil)
  if valid_602709 != nil:
    section.add "Destination.BccAddresses", valid_602709
  var valid_602710 = query.getOrDefault("ReturnPathArn")
  valid_602710 = validateParameter(valid_602710, JString, required = false,
                                 default = nil)
  if valid_602710 != nil:
    section.add "ReturnPathArn", valid_602710
  var valid_602711 = query.getOrDefault("Destination.ToAddresses")
  valid_602711 = validateParameter(valid_602711, JArray, required = false,
                                 default = nil)
  if valid_602711 != nil:
    section.add "Destination.ToAddresses", valid_602711
  var valid_602712 = query.getOrDefault("Tags")
  valid_602712 = validateParameter(valid_602712, JArray, required = false,
                                 default = nil)
  if valid_602712 != nil:
    section.add "Tags", valid_602712
  var valid_602713 = query.getOrDefault("SourceArn")
  valid_602713 = validateParameter(valid_602713, JString, required = false,
                                 default = nil)
  if valid_602713 != nil:
    section.add "SourceArn", valid_602713
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602714 = query.getOrDefault("Action")
  valid_602714 = validateParameter(valid_602714, JString, required = true,
                                 default = newJString("SendEmail"))
  if valid_602714 != nil:
    section.add "Action", valid_602714
  var valid_602715 = query.getOrDefault("Destination.CcAddresses")
  valid_602715 = validateParameter(valid_602715, JArray, required = false,
                                 default = nil)
  if valid_602715 != nil:
    section.add "Destination.CcAddresses", valid_602715
  var valid_602716 = query.getOrDefault("Message.Subject")
  valid_602716 = validateParameter(valid_602716, JString, required = false,
                                 default = nil)
  if valid_602716 != nil:
    section.add "Message.Subject", valid_602716
  var valid_602717 = query.getOrDefault("Source")
  valid_602717 = validateParameter(valid_602717, JString, required = true,
                                 default = nil)
  if valid_602717 != nil:
    section.add "Source", valid_602717
  var valid_602718 = query.getOrDefault("ReturnPath")
  valid_602718 = validateParameter(valid_602718, JString, required = false,
                                 default = nil)
  if valid_602718 != nil:
    section.add "ReturnPath", valid_602718
  var valid_602719 = query.getOrDefault("Message.Body")
  valid_602719 = validateParameter(valid_602719, JString, required = false,
                                 default = nil)
  if valid_602719 != nil:
    section.add "Message.Body", valid_602719
  var valid_602720 = query.getOrDefault("ConfigurationSetName")
  valid_602720 = validateParameter(valid_602720, JString, required = false,
                                 default = nil)
  if valid_602720 != nil:
    section.add "ConfigurationSetName", valid_602720
  var valid_602721 = query.getOrDefault("Version")
  valid_602721 = validateParameter(valid_602721, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602721 != nil:
    section.add "Version", valid_602721
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602722 = header.getOrDefault("X-Amz-Date")
  valid_602722 = validateParameter(valid_602722, JString, required = false,
                                 default = nil)
  if valid_602722 != nil:
    section.add "X-Amz-Date", valid_602722
  var valid_602723 = header.getOrDefault("X-Amz-Security-Token")
  valid_602723 = validateParameter(valid_602723, JString, required = false,
                                 default = nil)
  if valid_602723 != nil:
    section.add "X-Amz-Security-Token", valid_602723
  var valid_602724 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602724 = validateParameter(valid_602724, JString, required = false,
                                 default = nil)
  if valid_602724 != nil:
    section.add "X-Amz-Content-Sha256", valid_602724
  var valid_602725 = header.getOrDefault("X-Amz-Algorithm")
  valid_602725 = validateParameter(valid_602725, JString, required = false,
                                 default = nil)
  if valid_602725 != nil:
    section.add "X-Amz-Algorithm", valid_602725
  var valid_602726 = header.getOrDefault("X-Amz-Signature")
  valid_602726 = validateParameter(valid_602726, JString, required = false,
                                 default = nil)
  if valid_602726 != nil:
    section.add "X-Amz-Signature", valid_602726
  var valid_602727 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602727 = validateParameter(valid_602727, JString, required = false,
                                 default = nil)
  if valid_602727 != nil:
    section.add "X-Amz-SignedHeaders", valid_602727
  var valid_602728 = header.getOrDefault("X-Amz-Credential")
  valid_602728 = validateParameter(valid_602728, JString, required = false,
                                 default = nil)
  if valid_602728 != nil:
    section.add "X-Amz-Credential", valid_602728
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602729: Call_GetSendEmail_602705; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message and immediately queues it for sending. In order to send email using the <code>SendEmail</code> operation, your message must meet the following requirements:</p> <ul> <li> <p>The message must be sent from a verified email address or domain. If you attempt to send email using a non-verified address or domain, the operation will result in an "Email address not verified" error. </p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>The message must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendEmail</code> operation several times to send the message to each group.</p> </li> </ul> <important> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </important>
  ## 
  let valid = call_602729.validator(path, query, header, formData, body)
  let scheme = call_602729.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602729.url(scheme.get, call_602729.host, call_602729.base,
                         call_602729.route, valid.getOrDefault("path"))
  result = hook(call_602729, url, valid)

proc call*(call_602730: Call_GetSendEmail_602705; Source: string;
          ReplyToAddresses: JsonNode = nil; DestinationBccAddresses: JsonNode = nil;
          ReturnPathArn: string = ""; DestinationToAddresses: JsonNode = nil;
          Tags: JsonNode = nil; SourceArn: string = ""; Action: string = "SendEmail";
          DestinationCcAddresses: JsonNode = nil; MessageSubject: string = "";
          ReturnPath: string = ""; MessageBody: string = "";
          ConfigurationSetName: string = ""; Version: string = "2010-12-01"): Recallable =
  ## getSendEmail
  ## <p>Composes an email message and immediately queues it for sending. In order to send email using the <code>SendEmail</code> operation, your message must meet the following requirements:</p> <ul> <li> <p>The message must be sent from a verified email address or domain. If you attempt to send email using a non-verified address or domain, the operation will result in an "Email address not verified" error. </p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>The message must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendEmail</code> operation several times to send the message to each group.</p> </li> </ul> <important> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </important>
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   DestinationBccAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   DestinationToAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Action: string (required)
  ##   DestinationCcAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   MessageSubject: string
  ##                 : Represents the message to be sent, composed of a subject and a body.
  ## The subject of the message: A short summary of the content, which will appear in the recipient's inbox.
  ##   Source: string (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   ReturnPath: string
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   MessageBody: string
  ##              : Represents the message to be sent, composed of a subject and a body.
  ## The message body.
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendEmail</code>.
  ##   Version: string (required)
  var query_602731 = newJObject()
  if ReplyToAddresses != nil:
    query_602731.add "ReplyToAddresses", ReplyToAddresses
  if DestinationBccAddresses != nil:
    query_602731.add "Destination.BccAddresses", DestinationBccAddresses
  add(query_602731, "ReturnPathArn", newJString(ReturnPathArn))
  if DestinationToAddresses != nil:
    query_602731.add "Destination.ToAddresses", DestinationToAddresses
  if Tags != nil:
    query_602731.add "Tags", Tags
  add(query_602731, "SourceArn", newJString(SourceArn))
  add(query_602731, "Action", newJString(Action))
  if DestinationCcAddresses != nil:
    query_602731.add "Destination.CcAddresses", DestinationCcAddresses
  add(query_602731, "Message.Subject", newJString(MessageSubject))
  add(query_602731, "Source", newJString(Source))
  add(query_602731, "ReturnPath", newJString(ReturnPath))
  add(query_602731, "Message.Body", newJString(MessageBody))
  add(query_602731, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_602731, "Version", newJString(Version))
  result = call_602730.call(nil, query_602731, nil, nil, nil)

var getSendEmail* = Call_GetSendEmail_602705(name: "getSendEmail",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=SendEmail", validator: validate_GetSendEmail_602706, base: "/",
    url: url_GetSendEmail_602707, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSendRawEmail_602783 = ref object of OpenApiRestCall_600426
proc url_PostSendRawEmail_602785(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSendRawEmail_602784(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Composes an email message and immediately queues it for sending.</p> <p>This operation is more flexible than the <code>SendEmail</code> API operation. When you use the <code>SendRawEmail</code> operation, you can specify the headers of the message as well as its content. This flexibility is useful, for example, when you want to send a multipart MIME email (such a message that contains both a text and an HTML version). You can also use this operation to send messages that include attachments.</p> <p>The <code>SendRawEmail</code> operation has the following requirements:</p> <ul> <li> <p>You can only send email from <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified email addresses or domains</a>. If you try to send email from an address that isn't verified, the operation results in an "Email address not verified" error.</p> </li> <li> <p>If your account is still in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon SES sandbox</a>, you can only send email to other verified addresses in your account, or to addresses that are associated with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon SES mailbox simulator</a>.</p> </li> <li> <p>The maximum message size, including attachments, is 10 MB.</p> </li> <li> <p>Each message has to include at least one recipient address. A recipient address includes any address on the To:, CC:, or BCC: lines.</p> </li> <li> <p>If you send a single message to more than one recipient address, and one of the recipient addresses isn't in a valid format (that is, it's not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), Amazon SES rejects the entire message, even if the other addresses are valid.</p> </li> <li> <p>Each message can include up to 50 recipient addresses across the To:, CC:, or BCC: lines. If you need to send a single message to more than 50 recipients, you have to split the list of recipient addresses into groups of less than 50 recipients, and send separate messages to each group.</p> </li> <li> <p>Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message parts. However, if Amazon SES has to modify the contents of your message (for example, if you use open and click tracking), 8-bit content isn't preserved. For this reason, we highly recommend that you encode all content that isn't 7-bit ASCII. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME Encoding</a> in the <i>Amazon SES Developer Guide</i>.</p> </li> </ul> <p>Additionally, keep the following considerations in mind when using the <code>SendRawEmail</code> operation:</p> <ul> <li> <p>Although you can customize the message headers when using the <code>SendRawEmail</code> operation, Amazon SES will automatically apply its own <code>Message-ID</code> and <code>Date</code> headers; if you passed these headers when creating the message, they will be overwritten by the values that Amazon SES provides.</p> </li> <li> <p>If you are using sending authorization to send on behalf of another user, <code>SendRawEmail</code> enables you to specify the cross-account identity for the email's Source, From, and Return-Path parameters in one of two ways: you can pass optional parameters <code>SourceArn</code>, <code>FromArn</code>, and/or <code>ReturnPathArn</code> to the API, or you can include the following X-headers in the header of your raw email:</p> <ul> <li> <p> <code>X-SES-SOURCE-ARN</code> </p> </li> <li> <p> <code>X-SES-FROM-ARN</code> </p> </li> <li> <p> <code>X-SES-RETURN-PATH-ARN</code> </p> </li> </ul> <important> <p>Don't include these X-headers in the DKIM signature. Amazon SES removes these before it sends the email.</p> </important> <p>If you only specify the <code>SourceIdentityArn</code> parameter, Amazon SES sets the From and Return-Path addresses to the same identity that you specified.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using Sending Authorization with Amazon SES</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602786 = query.getOrDefault("Action")
  valid_602786 = validateParameter(valid_602786, JString, required = true,
                                 default = newJString("SendRawEmail"))
  if valid_602786 != nil:
    section.add "Action", valid_602786
  var valid_602787 = query.getOrDefault("Version")
  valid_602787 = validateParameter(valid_602787, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602787 != nil:
    section.add "Version", valid_602787
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602788 = header.getOrDefault("X-Amz-Date")
  valid_602788 = validateParameter(valid_602788, JString, required = false,
                                 default = nil)
  if valid_602788 != nil:
    section.add "X-Amz-Date", valid_602788
  var valid_602789 = header.getOrDefault("X-Amz-Security-Token")
  valid_602789 = validateParameter(valid_602789, JString, required = false,
                                 default = nil)
  if valid_602789 != nil:
    section.add "X-Amz-Security-Token", valid_602789
  var valid_602790 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602790 = validateParameter(valid_602790, JString, required = false,
                                 default = nil)
  if valid_602790 != nil:
    section.add "X-Amz-Content-Sha256", valid_602790
  var valid_602791 = header.getOrDefault("X-Amz-Algorithm")
  valid_602791 = validateParameter(valid_602791, JString, required = false,
                                 default = nil)
  if valid_602791 != nil:
    section.add "X-Amz-Algorithm", valid_602791
  var valid_602792 = header.getOrDefault("X-Amz-Signature")
  valid_602792 = validateParameter(valid_602792, JString, required = false,
                                 default = nil)
  if valid_602792 != nil:
    section.add "X-Amz-Signature", valid_602792
  var valid_602793 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602793 = validateParameter(valid_602793, JString, required = false,
                                 default = nil)
  if valid_602793 != nil:
    section.add "X-Amz-SignedHeaders", valid_602793
  var valid_602794 = header.getOrDefault("X-Amz-Credential")
  valid_602794 = validateParameter(valid_602794, JString, required = false,
                                 default = nil)
  if valid_602794 != nil:
    section.add "X-Amz-Credential", valid_602794
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendRawEmail</code>.
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-SOURCE-ARN</code> in the raw message of the email. If you use both the <code>SourceArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>SourceArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Destinations: JArray
  ##               : A list of destinations for the message, consisting of To:, CC:, and BCC: addresses.
  ##   FromArn: JString
  ##          : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to specify a particular "From" address in the header of the raw email.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-FROM-ARN</code> in the raw message of the email. If you use both the <code>FromArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>FromArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendRawEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-RETURN-PATH-ARN</code> in the raw message of the email. If you use both the <code>ReturnPathArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>ReturnPathArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Source: JString
  ##         : <p>The identity's email address. If you do not provide a value for this parameter, you must specify a "From" address in the raw text of the message. (You can also specify both.)</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in<a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note> <p>If you specify the <code>Source</code> parameter and have feedback forwarding enabled, then bounces and complaints will be sent to this email address. This takes precedence over any Return-Path header that you might include in the raw text of the message.</p>
  ##   RawMessage.Data: JString
  ##                  : Represents the raw data of the message.
  ## <p>The raw data of the message. This data needs to base64-encoded if you are accessing Amazon SES directly through the HTTPS interface. If you are accessing Amazon SES using an AWS SDK, the SDK takes care of the base 64-encoding for you. In all cases, the client must ensure that the message format complies with Internet email standards regarding email header fields, MIME types, and MIME encoding.</p> <p>The To:, CC:, and BCC: headers in the raw message can contain a group list.</p> <p>If you are using <code>SendRawEmail</code> with sending authorization, you can include X-headers in the raw message to specify the "Source," "From," and "Return-Path" addresses. For more information, see the documentation for <code>SendRawEmail</code>. </p> <important> <p>Do not include these X-headers in the DKIM signature, because they are removed by Amazon SES before sending the email.</p> </important> <p>For more information, go to the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html">Amazon SES Developer Guide</a>.</p>
  section = newJObject()
  var valid_602795 = formData.getOrDefault("ConfigurationSetName")
  valid_602795 = validateParameter(valid_602795, JString, required = false,
                                 default = nil)
  if valid_602795 != nil:
    section.add "ConfigurationSetName", valid_602795
  var valid_602796 = formData.getOrDefault("SourceArn")
  valid_602796 = validateParameter(valid_602796, JString, required = false,
                                 default = nil)
  if valid_602796 != nil:
    section.add "SourceArn", valid_602796
  var valid_602797 = formData.getOrDefault("Destinations")
  valid_602797 = validateParameter(valid_602797, JArray, required = false,
                                 default = nil)
  if valid_602797 != nil:
    section.add "Destinations", valid_602797
  var valid_602798 = formData.getOrDefault("FromArn")
  valid_602798 = validateParameter(valid_602798, JString, required = false,
                                 default = nil)
  if valid_602798 != nil:
    section.add "FromArn", valid_602798
  var valid_602799 = formData.getOrDefault("Tags")
  valid_602799 = validateParameter(valid_602799, JArray, required = false,
                                 default = nil)
  if valid_602799 != nil:
    section.add "Tags", valid_602799
  var valid_602800 = formData.getOrDefault("ReturnPathArn")
  valid_602800 = validateParameter(valid_602800, JString, required = false,
                                 default = nil)
  if valid_602800 != nil:
    section.add "ReturnPathArn", valid_602800
  var valid_602801 = formData.getOrDefault("Source")
  valid_602801 = validateParameter(valid_602801, JString, required = false,
                                 default = nil)
  if valid_602801 != nil:
    section.add "Source", valid_602801
  var valid_602802 = formData.getOrDefault("RawMessage.Data")
  valid_602802 = validateParameter(valid_602802, JString, required = false,
                                 default = nil)
  if valid_602802 != nil:
    section.add "RawMessage.Data", valid_602802
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602803: Call_PostSendRawEmail_602783; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message and immediately queues it for sending.</p> <p>This operation is more flexible than the <code>SendEmail</code> API operation. When you use the <code>SendRawEmail</code> operation, you can specify the headers of the message as well as its content. This flexibility is useful, for example, when you want to send a multipart MIME email (such a message that contains both a text and an HTML version). You can also use this operation to send messages that include attachments.</p> <p>The <code>SendRawEmail</code> operation has the following requirements:</p> <ul> <li> <p>You can only send email from <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified email addresses or domains</a>. If you try to send email from an address that isn't verified, the operation results in an "Email address not verified" error.</p> </li> <li> <p>If your account is still in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon SES sandbox</a>, you can only send email to other verified addresses in your account, or to addresses that are associated with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon SES mailbox simulator</a>.</p> </li> <li> <p>The maximum message size, including attachments, is 10 MB.</p> </li> <li> <p>Each message has to include at least one recipient address. A recipient address includes any address on the To:, CC:, or BCC: lines.</p> </li> <li> <p>If you send a single message to more than one recipient address, and one of the recipient addresses isn't in a valid format (that is, it's not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), Amazon SES rejects the entire message, even if the other addresses are valid.</p> </li> <li> <p>Each message can include up to 50 recipient addresses across the To:, CC:, or BCC: lines. If you need to send a single message to more than 50 recipients, you have to split the list of recipient addresses into groups of less than 50 recipients, and send separate messages to each group.</p> </li> <li> <p>Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message parts. However, if Amazon SES has to modify the contents of your message (for example, if you use open and click tracking), 8-bit content isn't preserved. For this reason, we highly recommend that you encode all content that isn't 7-bit ASCII. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME Encoding</a> in the <i>Amazon SES Developer Guide</i>.</p> </li> </ul> <p>Additionally, keep the following considerations in mind when using the <code>SendRawEmail</code> operation:</p> <ul> <li> <p>Although you can customize the message headers when using the <code>SendRawEmail</code> operation, Amazon SES will automatically apply its own <code>Message-ID</code> and <code>Date</code> headers; if you passed these headers when creating the message, they will be overwritten by the values that Amazon SES provides.</p> </li> <li> <p>If you are using sending authorization to send on behalf of another user, <code>SendRawEmail</code> enables you to specify the cross-account identity for the email's Source, From, and Return-Path parameters in one of two ways: you can pass optional parameters <code>SourceArn</code>, <code>FromArn</code>, and/or <code>ReturnPathArn</code> to the API, or you can include the following X-headers in the header of your raw email:</p> <ul> <li> <p> <code>X-SES-SOURCE-ARN</code> </p> </li> <li> <p> <code>X-SES-FROM-ARN</code> </p> </li> <li> <p> <code>X-SES-RETURN-PATH-ARN</code> </p> </li> </ul> <important> <p>Don't include these X-headers in the DKIM signature. Amazon SES removes these before it sends the email.</p> </important> <p>If you only specify the <code>SourceIdentityArn</code> parameter, Amazon SES sets the From and Return-Path addresses to the same identity that you specified.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using Sending Authorization with Amazon SES</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> </ul>
  ## 
  let valid = call_602803.validator(path, query, header, formData, body)
  let scheme = call_602803.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602803.url(scheme.get, call_602803.host, call_602803.base,
                         call_602803.route, valid.getOrDefault("path"))
  result = hook(call_602803, url, valid)

proc call*(call_602804: Call_PostSendRawEmail_602783;
          ConfigurationSetName: string = ""; SourceArn: string = "";
          Destinations: JsonNode = nil; FromArn: string = ""; Tags: JsonNode = nil;
          ReturnPathArn: string = ""; Action: string = "SendRawEmail";
          Version: string = "2010-12-01"; Source: string = "";
          RawMessageData: string = ""): Recallable =
  ## postSendRawEmail
  ## <p>Composes an email message and immediately queues it for sending.</p> <p>This operation is more flexible than the <code>SendEmail</code> API operation. When you use the <code>SendRawEmail</code> operation, you can specify the headers of the message as well as its content. This flexibility is useful, for example, when you want to send a multipart MIME email (such a message that contains both a text and an HTML version). You can also use this operation to send messages that include attachments.</p> <p>The <code>SendRawEmail</code> operation has the following requirements:</p> <ul> <li> <p>You can only send email from <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified email addresses or domains</a>. If you try to send email from an address that isn't verified, the operation results in an "Email address not verified" error.</p> </li> <li> <p>If your account is still in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon SES sandbox</a>, you can only send email to other verified addresses in your account, or to addresses that are associated with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon SES mailbox simulator</a>.</p> </li> <li> <p>The maximum message size, including attachments, is 10 MB.</p> </li> <li> <p>Each message has to include at least one recipient address. A recipient address includes any address on the To:, CC:, or BCC: lines.</p> </li> <li> <p>If you send a single message to more than one recipient address, and one of the recipient addresses isn't in a valid format (that is, it's not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), Amazon SES rejects the entire message, even if the other addresses are valid.</p> </li> <li> <p>Each message can include up to 50 recipient addresses across the To:, CC:, or BCC: lines. If you need to send a single message to more than 50 recipients, you have to split the list of recipient addresses into groups of less than 50 recipients, and send separate messages to each group.</p> </li> <li> <p>Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message parts. However, if Amazon SES has to modify the contents of your message (for example, if you use open and click tracking), 8-bit content isn't preserved. For this reason, we highly recommend that you encode all content that isn't 7-bit ASCII. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME Encoding</a> in the <i>Amazon SES Developer Guide</i>.</p> </li> </ul> <p>Additionally, keep the following considerations in mind when using the <code>SendRawEmail</code> operation:</p> <ul> <li> <p>Although you can customize the message headers when using the <code>SendRawEmail</code> operation, Amazon SES will automatically apply its own <code>Message-ID</code> and <code>Date</code> headers; if you passed these headers when creating the message, they will be overwritten by the values that Amazon SES provides.</p> </li> <li> <p>If you are using sending authorization to send on behalf of another user, <code>SendRawEmail</code> enables you to specify the cross-account identity for the email's Source, From, and Return-Path parameters in one of two ways: you can pass optional parameters <code>SourceArn</code>, <code>FromArn</code>, and/or <code>ReturnPathArn</code> to the API, or you can include the following X-headers in the header of your raw email:</p> <ul> <li> <p> <code>X-SES-SOURCE-ARN</code> </p> </li> <li> <p> <code>X-SES-FROM-ARN</code> </p> </li> <li> <p> <code>X-SES-RETURN-PATH-ARN</code> </p> </li> </ul> <important> <p>Don't include these X-headers in the DKIM signature. Amazon SES removes these before it sends the email.</p> </important> <p>If you only specify the <code>SourceIdentityArn</code> parameter, Amazon SES sets the From and Return-Path addresses to the same identity that you specified.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using Sending Authorization with Amazon SES</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> </ul>
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendRawEmail</code>.
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-SOURCE-ARN</code> in the raw message of the email. If you use both the <code>SourceArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>SourceArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Destinations: JArray
  ##               : A list of destinations for the message, consisting of To:, CC:, and BCC: addresses.
  ##   FromArn: string
  ##          : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to specify a particular "From" address in the header of the raw email.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-FROM-ARN</code> in the raw message of the email. If you use both the <code>FromArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>FromArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendRawEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-RETURN-PATH-ARN</code> in the raw message of the email. If you use both the <code>ReturnPathArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>ReturnPathArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Source: string
  ##         : <p>The identity's email address. If you do not provide a value for this parameter, you must specify a "From" address in the raw text of the message. (You can also specify both.)</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in<a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note> <p>If you specify the <code>Source</code> parameter and have feedback forwarding enabled, then bounces and complaints will be sent to this email address. This takes precedence over any Return-Path header that you might include in the raw text of the message.</p>
  ##   RawMessageData: string
  ##                 : Represents the raw data of the message.
  ## <p>The raw data of the message. This data needs to base64-encoded if you are accessing Amazon SES directly through the HTTPS interface. If you are accessing Amazon SES using an AWS SDK, the SDK takes care of the base 64-encoding for you. In all cases, the client must ensure that the message format complies with Internet email standards regarding email header fields, MIME types, and MIME encoding.</p> <p>The To:, CC:, and BCC: headers in the raw message can contain a group list.</p> <p>If you are using <code>SendRawEmail</code> with sending authorization, you can include X-headers in the raw message to specify the "Source," "From," and "Return-Path" addresses. For more information, see the documentation for <code>SendRawEmail</code>. </p> <important> <p>Do not include these X-headers in the DKIM signature, because they are removed by Amazon SES before sending the email.</p> </important> <p>For more information, go to the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html">Amazon SES Developer Guide</a>.</p>
  var query_602805 = newJObject()
  var formData_602806 = newJObject()
  add(formData_602806, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_602806, "SourceArn", newJString(SourceArn))
  if Destinations != nil:
    formData_602806.add "Destinations", Destinations
  add(formData_602806, "FromArn", newJString(FromArn))
  if Tags != nil:
    formData_602806.add "Tags", Tags
  add(formData_602806, "ReturnPathArn", newJString(ReturnPathArn))
  add(query_602805, "Action", newJString(Action))
  add(query_602805, "Version", newJString(Version))
  add(formData_602806, "Source", newJString(Source))
  add(formData_602806, "RawMessage.Data", newJString(RawMessageData))
  result = call_602804.call(nil, query_602805, nil, formData_602806, nil)

var postSendRawEmail* = Call_PostSendRawEmail_602783(name: "postSendRawEmail",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=SendRawEmail", validator: validate_PostSendRawEmail_602784,
    base: "/", url: url_PostSendRawEmail_602785,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSendRawEmail_602760 = ref object of OpenApiRestCall_600426
proc url_GetSendRawEmail_602762(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSendRawEmail_602761(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Composes an email message and immediately queues it for sending.</p> <p>This operation is more flexible than the <code>SendEmail</code> API operation. When you use the <code>SendRawEmail</code> operation, you can specify the headers of the message as well as its content. This flexibility is useful, for example, when you want to send a multipart MIME email (such a message that contains both a text and an HTML version). You can also use this operation to send messages that include attachments.</p> <p>The <code>SendRawEmail</code> operation has the following requirements:</p> <ul> <li> <p>You can only send email from <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified email addresses or domains</a>. If you try to send email from an address that isn't verified, the operation results in an "Email address not verified" error.</p> </li> <li> <p>If your account is still in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon SES sandbox</a>, you can only send email to other verified addresses in your account, or to addresses that are associated with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon SES mailbox simulator</a>.</p> </li> <li> <p>The maximum message size, including attachments, is 10 MB.</p> </li> <li> <p>Each message has to include at least one recipient address. A recipient address includes any address on the To:, CC:, or BCC: lines.</p> </li> <li> <p>If you send a single message to more than one recipient address, and one of the recipient addresses isn't in a valid format (that is, it's not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), Amazon SES rejects the entire message, even if the other addresses are valid.</p> </li> <li> <p>Each message can include up to 50 recipient addresses across the To:, CC:, or BCC: lines. If you need to send a single message to more than 50 recipients, you have to split the list of recipient addresses into groups of less than 50 recipients, and send separate messages to each group.</p> </li> <li> <p>Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message parts. However, if Amazon SES has to modify the contents of your message (for example, if you use open and click tracking), 8-bit content isn't preserved. For this reason, we highly recommend that you encode all content that isn't 7-bit ASCII. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME Encoding</a> in the <i>Amazon SES Developer Guide</i>.</p> </li> </ul> <p>Additionally, keep the following considerations in mind when using the <code>SendRawEmail</code> operation:</p> <ul> <li> <p>Although you can customize the message headers when using the <code>SendRawEmail</code> operation, Amazon SES will automatically apply its own <code>Message-ID</code> and <code>Date</code> headers; if you passed these headers when creating the message, they will be overwritten by the values that Amazon SES provides.</p> </li> <li> <p>If you are using sending authorization to send on behalf of another user, <code>SendRawEmail</code> enables you to specify the cross-account identity for the email's Source, From, and Return-Path parameters in one of two ways: you can pass optional parameters <code>SourceArn</code>, <code>FromArn</code>, and/or <code>ReturnPathArn</code> to the API, or you can include the following X-headers in the header of your raw email:</p> <ul> <li> <p> <code>X-SES-SOURCE-ARN</code> </p> </li> <li> <p> <code>X-SES-FROM-ARN</code> </p> </li> <li> <p> <code>X-SES-RETURN-PATH-ARN</code> </p> </li> </ul> <important> <p>Don't include these X-headers in the DKIM signature. Amazon SES removes these before it sends the email.</p> </important> <p>If you only specify the <code>SourceIdentityArn</code> parameter, Amazon SES sets the From and Return-Path addresses to the same identity that you specified.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using Sending Authorization with Amazon SES</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   FromArn: JString
  ##          : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to specify a particular "From" address in the header of the raw email.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-FROM-ARN</code> in the raw message of the email. If you use both the <code>FromArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>FromArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   RawMessage.Data: JString
  ##                  : Represents the raw data of the message.
  ## <p>The raw data of the message. This data needs to base64-encoded if you are accessing Amazon SES directly through the HTTPS interface. If you are accessing Amazon SES using an AWS SDK, the SDK takes care of the base 64-encoding for you. In all cases, the client must ensure that the message format complies with Internet email standards regarding email header fields, MIME types, and MIME encoding.</p> <p>The To:, CC:, and BCC: headers in the raw message can contain a group list.</p> <p>If you are using <code>SendRawEmail</code> with sending authorization, you can include X-headers in the raw message to specify the "Source," "From," and "Return-Path" addresses. For more information, see the documentation for <code>SendRawEmail</code>. </p> <important> <p>Do not include these X-headers in the DKIM signature, because they are removed by Amazon SES before sending the email.</p> </important> <p>For more information, go to the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html">Amazon SES Developer Guide</a>.</p>
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-RETURN-PATH-ARN</code> in the raw message of the email. If you use both the <code>ReturnPathArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>ReturnPathArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendRawEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-SOURCE-ARN</code> in the raw message of the email. If you use both the <code>SourceArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>SourceArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Action: JString (required)
  ##   Destinations: JArray
  ##               : A list of destinations for the message, consisting of To:, CC:, and BCC: addresses.
  ##   Source: JString
  ##         : <p>The identity's email address. If you do not provide a value for this parameter, you must specify a "From" address in the raw text of the message. (You can also specify both.)</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in<a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note> <p>If you specify the <code>Source</code> parameter and have feedback forwarding enabled, then bounces and complaints will be sent to this email address. This takes precedence over any Return-Path header that you might include in the raw text of the message.</p>
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendRawEmail</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_602763 = query.getOrDefault("FromArn")
  valid_602763 = validateParameter(valid_602763, JString, required = false,
                                 default = nil)
  if valid_602763 != nil:
    section.add "FromArn", valid_602763
  var valid_602764 = query.getOrDefault("RawMessage.Data")
  valid_602764 = validateParameter(valid_602764, JString, required = false,
                                 default = nil)
  if valid_602764 != nil:
    section.add "RawMessage.Data", valid_602764
  var valid_602765 = query.getOrDefault("ReturnPathArn")
  valid_602765 = validateParameter(valid_602765, JString, required = false,
                                 default = nil)
  if valid_602765 != nil:
    section.add "ReturnPathArn", valid_602765
  var valid_602766 = query.getOrDefault("Tags")
  valid_602766 = validateParameter(valid_602766, JArray, required = false,
                                 default = nil)
  if valid_602766 != nil:
    section.add "Tags", valid_602766
  var valid_602767 = query.getOrDefault("SourceArn")
  valid_602767 = validateParameter(valid_602767, JString, required = false,
                                 default = nil)
  if valid_602767 != nil:
    section.add "SourceArn", valid_602767
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602768 = query.getOrDefault("Action")
  valid_602768 = validateParameter(valid_602768, JString, required = true,
                                 default = newJString("SendRawEmail"))
  if valid_602768 != nil:
    section.add "Action", valid_602768
  var valid_602769 = query.getOrDefault("Destinations")
  valid_602769 = validateParameter(valid_602769, JArray, required = false,
                                 default = nil)
  if valid_602769 != nil:
    section.add "Destinations", valid_602769
  var valid_602770 = query.getOrDefault("Source")
  valid_602770 = validateParameter(valid_602770, JString, required = false,
                                 default = nil)
  if valid_602770 != nil:
    section.add "Source", valid_602770
  var valid_602771 = query.getOrDefault("ConfigurationSetName")
  valid_602771 = validateParameter(valid_602771, JString, required = false,
                                 default = nil)
  if valid_602771 != nil:
    section.add "ConfigurationSetName", valid_602771
  var valid_602772 = query.getOrDefault("Version")
  valid_602772 = validateParameter(valid_602772, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602772 != nil:
    section.add "Version", valid_602772
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602773 = header.getOrDefault("X-Amz-Date")
  valid_602773 = validateParameter(valid_602773, JString, required = false,
                                 default = nil)
  if valid_602773 != nil:
    section.add "X-Amz-Date", valid_602773
  var valid_602774 = header.getOrDefault("X-Amz-Security-Token")
  valid_602774 = validateParameter(valid_602774, JString, required = false,
                                 default = nil)
  if valid_602774 != nil:
    section.add "X-Amz-Security-Token", valid_602774
  var valid_602775 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602775 = validateParameter(valid_602775, JString, required = false,
                                 default = nil)
  if valid_602775 != nil:
    section.add "X-Amz-Content-Sha256", valid_602775
  var valid_602776 = header.getOrDefault("X-Amz-Algorithm")
  valid_602776 = validateParameter(valid_602776, JString, required = false,
                                 default = nil)
  if valid_602776 != nil:
    section.add "X-Amz-Algorithm", valid_602776
  var valid_602777 = header.getOrDefault("X-Amz-Signature")
  valid_602777 = validateParameter(valid_602777, JString, required = false,
                                 default = nil)
  if valid_602777 != nil:
    section.add "X-Amz-Signature", valid_602777
  var valid_602778 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602778 = validateParameter(valid_602778, JString, required = false,
                                 default = nil)
  if valid_602778 != nil:
    section.add "X-Amz-SignedHeaders", valid_602778
  var valid_602779 = header.getOrDefault("X-Amz-Credential")
  valid_602779 = validateParameter(valid_602779, JString, required = false,
                                 default = nil)
  if valid_602779 != nil:
    section.add "X-Amz-Credential", valid_602779
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602780: Call_GetSendRawEmail_602760; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message and immediately queues it for sending.</p> <p>This operation is more flexible than the <code>SendEmail</code> API operation. When you use the <code>SendRawEmail</code> operation, you can specify the headers of the message as well as its content. This flexibility is useful, for example, when you want to send a multipart MIME email (such a message that contains both a text and an HTML version). You can also use this operation to send messages that include attachments.</p> <p>The <code>SendRawEmail</code> operation has the following requirements:</p> <ul> <li> <p>You can only send email from <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified email addresses or domains</a>. If you try to send email from an address that isn't verified, the operation results in an "Email address not verified" error.</p> </li> <li> <p>If your account is still in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon SES sandbox</a>, you can only send email to other verified addresses in your account, or to addresses that are associated with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon SES mailbox simulator</a>.</p> </li> <li> <p>The maximum message size, including attachments, is 10 MB.</p> </li> <li> <p>Each message has to include at least one recipient address. A recipient address includes any address on the To:, CC:, or BCC: lines.</p> </li> <li> <p>If you send a single message to more than one recipient address, and one of the recipient addresses isn't in a valid format (that is, it's not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), Amazon SES rejects the entire message, even if the other addresses are valid.</p> </li> <li> <p>Each message can include up to 50 recipient addresses across the To:, CC:, or BCC: lines. If you need to send a single message to more than 50 recipients, you have to split the list of recipient addresses into groups of less than 50 recipients, and send separate messages to each group.</p> </li> <li> <p>Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message parts. However, if Amazon SES has to modify the contents of your message (for example, if you use open and click tracking), 8-bit content isn't preserved. For this reason, we highly recommend that you encode all content that isn't 7-bit ASCII. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME Encoding</a> in the <i>Amazon SES Developer Guide</i>.</p> </li> </ul> <p>Additionally, keep the following considerations in mind when using the <code>SendRawEmail</code> operation:</p> <ul> <li> <p>Although you can customize the message headers when using the <code>SendRawEmail</code> operation, Amazon SES will automatically apply its own <code>Message-ID</code> and <code>Date</code> headers; if you passed these headers when creating the message, they will be overwritten by the values that Amazon SES provides.</p> </li> <li> <p>If you are using sending authorization to send on behalf of another user, <code>SendRawEmail</code> enables you to specify the cross-account identity for the email's Source, From, and Return-Path parameters in one of two ways: you can pass optional parameters <code>SourceArn</code>, <code>FromArn</code>, and/or <code>ReturnPathArn</code> to the API, or you can include the following X-headers in the header of your raw email:</p> <ul> <li> <p> <code>X-SES-SOURCE-ARN</code> </p> </li> <li> <p> <code>X-SES-FROM-ARN</code> </p> </li> <li> <p> <code>X-SES-RETURN-PATH-ARN</code> </p> </li> </ul> <important> <p>Don't include these X-headers in the DKIM signature. Amazon SES removes these before it sends the email.</p> </important> <p>If you only specify the <code>SourceIdentityArn</code> parameter, Amazon SES sets the From and Return-Path addresses to the same identity that you specified.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using Sending Authorization with Amazon SES</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> </ul>
  ## 
  let valid = call_602780.validator(path, query, header, formData, body)
  let scheme = call_602780.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602780.url(scheme.get, call_602780.host, call_602780.base,
                         call_602780.route, valid.getOrDefault("path"))
  result = hook(call_602780, url, valid)

proc call*(call_602781: Call_GetSendRawEmail_602760; FromArn: string = "";
          RawMessageData: string = ""; ReturnPathArn: string = ""; Tags: JsonNode = nil;
          SourceArn: string = ""; Action: string = "SendRawEmail";
          Destinations: JsonNode = nil; Source: string = "";
          ConfigurationSetName: string = ""; Version: string = "2010-12-01"): Recallable =
  ## getSendRawEmail
  ## <p>Composes an email message and immediately queues it for sending.</p> <p>This operation is more flexible than the <code>SendEmail</code> API operation. When you use the <code>SendRawEmail</code> operation, you can specify the headers of the message as well as its content. This flexibility is useful, for example, when you want to send a multipart MIME email (such a message that contains both a text and an HTML version). You can also use this operation to send messages that include attachments.</p> <p>The <code>SendRawEmail</code> operation has the following requirements:</p> <ul> <li> <p>You can only send email from <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified email addresses or domains</a>. If you try to send email from an address that isn't verified, the operation results in an "Email address not verified" error.</p> </li> <li> <p>If your account is still in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon SES sandbox</a>, you can only send email to other verified addresses in your account, or to addresses that are associated with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon SES mailbox simulator</a>.</p> </li> <li> <p>The maximum message size, including attachments, is 10 MB.</p> </li> <li> <p>Each message has to include at least one recipient address. A recipient address includes any address on the To:, CC:, or BCC: lines.</p> </li> <li> <p>If you send a single message to more than one recipient address, and one of the recipient addresses isn't in a valid format (that is, it's not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), Amazon SES rejects the entire message, even if the other addresses are valid.</p> </li> <li> <p>Each message can include up to 50 recipient addresses across the To:, CC:, or BCC: lines. If you need to send a single message to more than 50 recipients, you have to split the list of recipient addresses into groups of less than 50 recipients, and send separate messages to each group.</p> </li> <li> <p>Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message parts. However, if Amazon SES has to modify the contents of your message (for example, if you use open and click tracking), 8-bit content isn't preserved. For this reason, we highly recommend that you encode all content that isn't 7-bit ASCII. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME Encoding</a> in the <i>Amazon SES Developer Guide</i>.</p> </li> </ul> <p>Additionally, keep the following considerations in mind when using the <code>SendRawEmail</code> operation:</p> <ul> <li> <p>Although you can customize the message headers when using the <code>SendRawEmail</code> operation, Amazon SES will automatically apply its own <code>Message-ID</code> and <code>Date</code> headers; if you passed these headers when creating the message, they will be overwritten by the values that Amazon SES provides.</p> </li> <li> <p>If you are using sending authorization to send on behalf of another user, <code>SendRawEmail</code> enables you to specify the cross-account identity for the email's Source, From, and Return-Path parameters in one of two ways: you can pass optional parameters <code>SourceArn</code>, <code>FromArn</code>, and/or <code>ReturnPathArn</code> to the API, or you can include the following X-headers in the header of your raw email:</p> <ul> <li> <p> <code>X-SES-SOURCE-ARN</code> </p> </li> <li> <p> <code>X-SES-FROM-ARN</code> </p> </li> <li> <p> <code>X-SES-RETURN-PATH-ARN</code> </p> </li> </ul> <important> <p>Don't include these X-headers in the DKIM signature. Amazon SES removes these before it sends the email.</p> </important> <p>If you only specify the <code>SourceIdentityArn</code> parameter, Amazon SES sets the From and Return-Path addresses to the same identity that you specified.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using Sending Authorization with Amazon SES</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> </ul>
  ##   FromArn: string
  ##          : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to specify a particular "From" address in the header of the raw email.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-FROM-ARN</code> in the raw message of the email. If you use both the <code>FromArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>FromArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   RawMessageData: string
  ##                 : Represents the raw data of the message.
  ## <p>The raw data of the message. This data needs to base64-encoded if you are accessing Amazon SES directly through the HTTPS interface. If you are accessing Amazon SES using an AWS SDK, the SDK takes care of the base 64-encoding for you. In all cases, the client must ensure that the message format complies with Internet email standards regarding email header fields, MIME types, and MIME encoding.</p> <p>The To:, CC:, and BCC: headers in the raw message can contain a group list.</p> <p>If you are using <code>SendRawEmail</code> with sending authorization, you can include X-headers in the raw message to specify the "Source," "From," and "Return-Path" addresses. For more information, see the documentation for <code>SendRawEmail</code>. </p> <important> <p>Do not include these X-headers in the DKIM signature, because they are removed by Amazon SES before sending the email.</p> </important> <p>For more information, go to the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html">Amazon SES Developer Guide</a>.</p>
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-RETURN-PATH-ARN</code> in the raw message of the email. If you use both the <code>ReturnPathArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>ReturnPathArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendRawEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-SOURCE-ARN</code> in the raw message of the email. If you use both the <code>SourceArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>SourceArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Action: string (required)
  ##   Destinations: JArray
  ##               : A list of destinations for the message, consisting of To:, CC:, and BCC: addresses.
  ##   Source: string
  ##         : <p>The identity's email address. If you do not provide a value for this parameter, you must specify a "From" address in the raw text of the message. (You can also specify both.)</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in<a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note> <p>If you specify the <code>Source</code> parameter and have feedback forwarding enabled, then bounces and complaints will be sent to this email address. This takes precedence over any Return-Path header that you might include in the raw text of the message.</p>
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendRawEmail</code>.
  ##   Version: string (required)
  var query_602782 = newJObject()
  add(query_602782, "FromArn", newJString(FromArn))
  add(query_602782, "RawMessage.Data", newJString(RawMessageData))
  add(query_602782, "ReturnPathArn", newJString(ReturnPathArn))
  if Tags != nil:
    query_602782.add "Tags", Tags
  add(query_602782, "SourceArn", newJString(SourceArn))
  add(query_602782, "Action", newJString(Action))
  if Destinations != nil:
    query_602782.add "Destinations", Destinations
  add(query_602782, "Source", newJString(Source))
  add(query_602782, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_602782, "Version", newJString(Version))
  result = call_602781.call(nil, query_602782, nil, nil, nil)

var getSendRawEmail* = Call_GetSendRawEmail_602760(name: "getSendRawEmail",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=SendRawEmail", validator: validate_GetSendRawEmail_602761,
    base: "/", url: url_GetSendRawEmail_602762, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSendTemplatedEmail_602835 = ref object of OpenApiRestCall_600426
proc url_PostSendTemplatedEmail_602837(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSendTemplatedEmail_602836(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Composes an email message using an email template and immediately queues it for sending.</p> <p>In order to send email using the <code>SendTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Calls to the <code>SendTemplatedEmail</code> operation may only include one <code>Destination</code> parameter. A destination is a set of recipients who will receive the same version of the email. The <code>Destination</code> parameter can include up to 50 recipients, across the To:, CC: and BCC: fields.</p> </li> <li> <p>The <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> </ul> <important> <p>If your call to the <code>SendTemplatedEmail</code> operation includes all of the required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES can't render the email because the template contains errors, it doesn't send the email. Additionally, because it already accepted the message, Amazon SES doesn't return a message stating that it was unable to send the email.</p> <p>For these reasons, we highly recommend that you set up Amazon SES to send you notifications when Rendering Failure events occur. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Sending Personalized Email Using the Amazon SES API</a> in the <i>Amazon Simple Email Service Developer Guide</i>.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602838 = query.getOrDefault("Action")
  valid_602838 = validateParameter(valid_602838, JString, required = true,
                                 default = newJString("SendTemplatedEmail"))
  if valid_602838 != nil:
    section.add "Action", valid_602838
  var valid_602839 = query.getOrDefault("Version")
  valid_602839 = validateParameter(valid_602839, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602839 != nil:
    section.add "Version", valid_602839
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602840 = header.getOrDefault("X-Amz-Date")
  valid_602840 = validateParameter(valid_602840, JString, required = false,
                                 default = nil)
  if valid_602840 != nil:
    section.add "X-Amz-Date", valid_602840
  var valid_602841 = header.getOrDefault("X-Amz-Security-Token")
  valid_602841 = validateParameter(valid_602841, JString, required = false,
                                 default = nil)
  if valid_602841 != nil:
    section.add "X-Amz-Security-Token", valid_602841
  var valid_602842 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602842 = validateParameter(valid_602842, JString, required = false,
                                 default = nil)
  if valid_602842 != nil:
    section.add "X-Amz-Content-Sha256", valid_602842
  var valid_602843 = header.getOrDefault("X-Amz-Algorithm")
  valid_602843 = validateParameter(valid_602843, JString, required = false,
                                 default = nil)
  if valid_602843 != nil:
    section.add "X-Amz-Algorithm", valid_602843
  var valid_602844 = header.getOrDefault("X-Amz-Signature")
  valid_602844 = validateParameter(valid_602844, JString, required = false,
                                 default = nil)
  if valid_602844 != nil:
    section.add "X-Amz-Signature", valid_602844
  var valid_602845 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602845 = validateParameter(valid_602845, JString, required = false,
                                 default = nil)
  if valid_602845 != nil:
    section.add "X-Amz-SignedHeaders", valid_602845
  var valid_602846 = header.getOrDefault("X-Amz-Credential")
  valid_602846 = validateParameter(valid_602846, JString, required = false,
                                 default = nil)
  if valid_602846 != nil:
    section.add "X-Amz-Credential", valid_602846
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendTemplatedEmail</code>.
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Destination.BccAddresses: JArray
  ##                           : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Template: JString (required)
  ##           : The template to use when sending this email.
  ##   TemplateData: JString (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendTemplatedEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ReturnPath: JString
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   TemplateArn: JString
  ##              : The ARN of the template to use when sending this email.
  ##   Destination.CcAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   Source: JString (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in<a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   Destination.ToAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  section = newJObject()
  var valid_602847 = formData.getOrDefault("ConfigurationSetName")
  valid_602847 = validateParameter(valid_602847, JString, required = false,
                                 default = nil)
  if valid_602847 != nil:
    section.add "ConfigurationSetName", valid_602847
  var valid_602848 = formData.getOrDefault("SourceArn")
  valid_602848 = validateParameter(valid_602848, JString, required = false,
                                 default = nil)
  if valid_602848 != nil:
    section.add "SourceArn", valid_602848
  var valid_602849 = formData.getOrDefault("Destination.BccAddresses")
  valid_602849 = validateParameter(valid_602849, JArray, required = false,
                                 default = nil)
  if valid_602849 != nil:
    section.add "Destination.BccAddresses", valid_602849
  var valid_602850 = formData.getOrDefault("ReplyToAddresses")
  valid_602850 = validateParameter(valid_602850, JArray, required = false,
                                 default = nil)
  if valid_602850 != nil:
    section.add "ReplyToAddresses", valid_602850
  assert formData != nil,
        "formData argument is necessary due to required `Template` field"
  var valid_602851 = formData.getOrDefault("Template")
  valid_602851 = validateParameter(valid_602851, JString, required = true,
                                 default = nil)
  if valid_602851 != nil:
    section.add "Template", valid_602851
  var valid_602852 = formData.getOrDefault("TemplateData")
  valid_602852 = validateParameter(valid_602852, JString, required = true,
                                 default = nil)
  if valid_602852 != nil:
    section.add "TemplateData", valid_602852
  var valid_602853 = formData.getOrDefault("Tags")
  valid_602853 = validateParameter(valid_602853, JArray, required = false,
                                 default = nil)
  if valid_602853 != nil:
    section.add "Tags", valid_602853
  var valid_602854 = formData.getOrDefault("ReturnPath")
  valid_602854 = validateParameter(valid_602854, JString, required = false,
                                 default = nil)
  if valid_602854 != nil:
    section.add "ReturnPath", valid_602854
  var valid_602855 = formData.getOrDefault("ReturnPathArn")
  valid_602855 = validateParameter(valid_602855, JString, required = false,
                                 default = nil)
  if valid_602855 != nil:
    section.add "ReturnPathArn", valid_602855
  var valid_602856 = formData.getOrDefault("TemplateArn")
  valid_602856 = validateParameter(valid_602856, JString, required = false,
                                 default = nil)
  if valid_602856 != nil:
    section.add "TemplateArn", valid_602856
  var valid_602857 = formData.getOrDefault("Destination.CcAddresses")
  valid_602857 = validateParameter(valid_602857, JArray, required = false,
                                 default = nil)
  if valid_602857 != nil:
    section.add "Destination.CcAddresses", valid_602857
  var valid_602858 = formData.getOrDefault("Source")
  valid_602858 = validateParameter(valid_602858, JString, required = true,
                                 default = nil)
  if valid_602858 != nil:
    section.add "Source", valid_602858
  var valid_602859 = formData.getOrDefault("Destination.ToAddresses")
  valid_602859 = validateParameter(valid_602859, JArray, required = false,
                                 default = nil)
  if valid_602859 != nil:
    section.add "Destination.ToAddresses", valid_602859
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602860: Call_PostSendTemplatedEmail_602835; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message using an email template and immediately queues it for sending.</p> <p>In order to send email using the <code>SendTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Calls to the <code>SendTemplatedEmail</code> operation may only include one <code>Destination</code> parameter. A destination is a set of recipients who will receive the same version of the email. The <code>Destination</code> parameter can include up to 50 recipients, across the To:, CC: and BCC: fields.</p> </li> <li> <p>The <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> </ul> <important> <p>If your call to the <code>SendTemplatedEmail</code> operation includes all of the required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES can't render the email because the template contains errors, it doesn't send the email. Additionally, because it already accepted the message, Amazon SES doesn't return a message stating that it was unable to send the email.</p> <p>For these reasons, we highly recommend that you set up Amazon SES to send you notifications when Rendering Failure events occur. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Sending Personalized Email Using the Amazon SES API</a> in the <i>Amazon Simple Email Service Developer Guide</i>.</p> </important>
  ## 
  let valid = call_602860.validator(path, query, header, formData, body)
  let scheme = call_602860.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602860.url(scheme.get, call_602860.host, call_602860.base,
                         call_602860.route, valid.getOrDefault("path"))
  result = hook(call_602860, url, valid)

proc call*(call_602861: Call_PostSendTemplatedEmail_602835; Template: string;
          TemplateData: string; Source: string; ConfigurationSetName: string = "";
          SourceArn: string = ""; DestinationBccAddresses: JsonNode = nil;
          ReplyToAddresses: JsonNode = nil; Tags: JsonNode = nil;
          ReturnPath: string = ""; ReturnPathArn: string = "";
          Action: string = "SendTemplatedEmail"; TemplateArn: string = "";
          DestinationCcAddresses: JsonNode = nil; Version: string = "2010-12-01";
          DestinationToAddresses: JsonNode = nil): Recallable =
  ## postSendTemplatedEmail
  ## <p>Composes an email message using an email template and immediately queues it for sending.</p> <p>In order to send email using the <code>SendTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Calls to the <code>SendTemplatedEmail</code> operation may only include one <code>Destination</code> parameter. A destination is a set of recipients who will receive the same version of the email. The <code>Destination</code> parameter can include up to 50 recipients, across the To:, CC: and BCC: fields.</p> </li> <li> <p>The <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> </ul> <important> <p>If your call to the <code>SendTemplatedEmail</code> operation includes all of the required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES can't render the email because the template contains errors, it doesn't send the email. Additionally, because it already accepted the message, Amazon SES doesn't return a message stating that it was unable to send the email.</p> <p>For these reasons, we highly recommend that you set up Amazon SES to send you notifications when Rendering Failure events occur. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Sending Personalized Email Using the Amazon SES API</a> in the <i>Amazon Simple Email Service Developer Guide</i>.</p> </important>
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendTemplatedEmail</code>.
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   DestinationBccAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Template: string (required)
  ##           : The template to use when sending this email.
  ##   TemplateData: string (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendTemplatedEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ReturnPath: string
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Action: string (required)
  ##   TemplateArn: string
  ##              : The ARN of the template to use when sending this email.
  ##   DestinationCcAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   Version: string (required)
  ##   Source: string (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in<a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   DestinationToAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  var query_602862 = newJObject()
  var formData_602863 = newJObject()
  add(formData_602863, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_602863, "SourceArn", newJString(SourceArn))
  if DestinationBccAddresses != nil:
    formData_602863.add "Destination.BccAddresses", DestinationBccAddresses
  if ReplyToAddresses != nil:
    formData_602863.add "ReplyToAddresses", ReplyToAddresses
  add(formData_602863, "Template", newJString(Template))
  add(formData_602863, "TemplateData", newJString(TemplateData))
  if Tags != nil:
    formData_602863.add "Tags", Tags
  add(formData_602863, "ReturnPath", newJString(ReturnPath))
  add(formData_602863, "ReturnPathArn", newJString(ReturnPathArn))
  add(query_602862, "Action", newJString(Action))
  add(formData_602863, "TemplateArn", newJString(TemplateArn))
  if DestinationCcAddresses != nil:
    formData_602863.add "Destination.CcAddresses", DestinationCcAddresses
  add(query_602862, "Version", newJString(Version))
  add(formData_602863, "Source", newJString(Source))
  if DestinationToAddresses != nil:
    formData_602863.add "Destination.ToAddresses", DestinationToAddresses
  result = call_602861.call(nil, query_602862, nil, formData_602863, nil)

var postSendTemplatedEmail* = Call_PostSendTemplatedEmail_602835(
    name: "postSendTemplatedEmail", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SendTemplatedEmail",
    validator: validate_PostSendTemplatedEmail_602836, base: "/",
    url: url_PostSendTemplatedEmail_602837, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSendTemplatedEmail_602807 = ref object of OpenApiRestCall_600426
proc url_GetSendTemplatedEmail_602809(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSendTemplatedEmail_602808(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Composes an email message using an email template and immediately queues it for sending.</p> <p>In order to send email using the <code>SendTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Calls to the <code>SendTemplatedEmail</code> operation may only include one <code>Destination</code> parameter. A destination is a set of recipients who will receive the same version of the email. The <code>Destination</code> parameter can include up to 50 recipients, across the To:, CC: and BCC: fields.</p> </li> <li> <p>The <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> </ul> <important> <p>If your call to the <code>SendTemplatedEmail</code> operation includes all of the required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES can't render the email because the template contains errors, it doesn't send the email. Additionally, because it already accepted the message, Amazon SES doesn't return a message stating that it was unable to send the email.</p> <p>For these reasons, we highly recommend that you set up Amazon SES to send you notifications when Rendering Failure events occur. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Sending Personalized Email Using the Amazon SES API</a> in the <i>Amazon Simple Email Service Developer Guide</i>.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Template: JString (required)
  ##           : The template to use when sending this email.
  ##   Destination.BccAddresses: JArray
  ##                           : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Destination.ToAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  ##   TemplateArn: JString
  ##              : The ARN of the template to use when sending this email.
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendTemplatedEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   TemplateData: JString (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   Action: JString (required)
  ##   Destination.CcAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   Source: JString (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in<a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   ReturnPath: JString
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendTemplatedEmail</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_602810 = query.getOrDefault("ReplyToAddresses")
  valid_602810 = validateParameter(valid_602810, JArray, required = false,
                                 default = nil)
  if valid_602810 != nil:
    section.add "ReplyToAddresses", valid_602810
  assert query != nil,
        "query argument is necessary due to required `Template` field"
  var valid_602811 = query.getOrDefault("Template")
  valid_602811 = validateParameter(valid_602811, JString, required = true,
                                 default = nil)
  if valid_602811 != nil:
    section.add "Template", valid_602811
  var valid_602812 = query.getOrDefault("Destination.BccAddresses")
  valid_602812 = validateParameter(valid_602812, JArray, required = false,
                                 default = nil)
  if valid_602812 != nil:
    section.add "Destination.BccAddresses", valid_602812
  var valid_602813 = query.getOrDefault("ReturnPathArn")
  valid_602813 = validateParameter(valid_602813, JString, required = false,
                                 default = nil)
  if valid_602813 != nil:
    section.add "ReturnPathArn", valid_602813
  var valid_602814 = query.getOrDefault("Destination.ToAddresses")
  valid_602814 = validateParameter(valid_602814, JArray, required = false,
                                 default = nil)
  if valid_602814 != nil:
    section.add "Destination.ToAddresses", valid_602814
  var valid_602815 = query.getOrDefault("TemplateArn")
  valid_602815 = validateParameter(valid_602815, JString, required = false,
                                 default = nil)
  if valid_602815 != nil:
    section.add "TemplateArn", valid_602815
  var valid_602816 = query.getOrDefault("Tags")
  valid_602816 = validateParameter(valid_602816, JArray, required = false,
                                 default = nil)
  if valid_602816 != nil:
    section.add "Tags", valid_602816
  var valid_602817 = query.getOrDefault("SourceArn")
  valid_602817 = validateParameter(valid_602817, JString, required = false,
                                 default = nil)
  if valid_602817 != nil:
    section.add "SourceArn", valid_602817
  var valid_602818 = query.getOrDefault("TemplateData")
  valid_602818 = validateParameter(valid_602818, JString, required = true,
                                 default = nil)
  if valid_602818 != nil:
    section.add "TemplateData", valid_602818
  var valid_602819 = query.getOrDefault("Action")
  valid_602819 = validateParameter(valid_602819, JString, required = true,
                                 default = newJString("SendTemplatedEmail"))
  if valid_602819 != nil:
    section.add "Action", valid_602819
  var valid_602820 = query.getOrDefault("Destination.CcAddresses")
  valid_602820 = validateParameter(valid_602820, JArray, required = false,
                                 default = nil)
  if valid_602820 != nil:
    section.add "Destination.CcAddresses", valid_602820
  var valid_602821 = query.getOrDefault("Source")
  valid_602821 = validateParameter(valid_602821, JString, required = true,
                                 default = nil)
  if valid_602821 != nil:
    section.add "Source", valid_602821
  var valid_602822 = query.getOrDefault("ReturnPath")
  valid_602822 = validateParameter(valid_602822, JString, required = false,
                                 default = nil)
  if valid_602822 != nil:
    section.add "ReturnPath", valid_602822
  var valid_602823 = query.getOrDefault("ConfigurationSetName")
  valid_602823 = validateParameter(valid_602823, JString, required = false,
                                 default = nil)
  if valid_602823 != nil:
    section.add "ConfigurationSetName", valid_602823
  var valid_602824 = query.getOrDefault("Version")
  valid_602824 = validateParameter(valid_602824, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602824 != nil:
    section.add "Version", valid_602824
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602825 = header.getOrDefault("X-Amz-Date")
  valid_602825 = validateParameter(valid_602825, JString, required = false,
                                 default = nil)
  if valid_602825 != nil:
    section.add "X-Amz-Date", valid_602825
  var valid_602826 = header.getOrDefault("X-Amz-Security-Token")
  valid_602826 = validateParameter(valid_602826, JString, required = false,
                                 default = nil)
  if valid_602826 != nil:
    section.add "X-Amz-Security-Token", valid_602826
  var valid_602827 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602827 = validateParameter(valid_602827, JString, required = false,
                                 default = nil)
  if valid_602827 != nil:
    section.add "X-Amz-Content-Sha256", valid_602827
  var valid_602828 = header.getOrDefault("X-Amz-Algorithm")
  valid_602828 = validateParameter(valid_602828, JString, required = false,
                                 default = nil)
  if valid_602828 != nil:
    section.add "X-Amz-Algorithm", valid_602828
  var valid_602829 = header.getOrDefault("X-Amz-Signature")
  valid_602829 = validateParameter(valid_602829, JString, required = false,
                                 default = nil)
  if valid_602829 != nil:
    section.add "X-Amz-Signature", valid_602829
  var valid_602830 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602830 = validateParameter(valid_602830, JString, required = false,
                                 default = nil)
  if valid_602830 != nil:
    section.add "X-Amz-SignedHeaders", valid_602830
  var valid_602831 = header.getOrDefault("X-Amz-Credential")
  valid_602831 = validateParameter(valid_602831, JString, required = false,
                                 default = nil)
  if valid_602831 != nil:
    section.add "X-Amz-Credential", valid_602831
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602832: Call_GetSendTemplatedEmail_602807; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message using an email template and immediately queues it for sending.</p> <p>In order to send email using the <code>SendTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Calls to the <code>SendTemplatedEmail</code> operation may only include one <code>Destination</code> parameter. A destination is a set of recipients who will receive the same version of the email. The <code>Destination</code> parameter can include up to 50 recipients, across the To:, CC: and BCC: fields.</p> </li> <li> <p>The <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> </ul> <important> <p>If your call to the <code>SendTemplatedEmail</code> operation includes all of the required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES can't render the email because the template contains errors, it doesn't send the email. Additionally, because it already accepted the message, Amazon SES doesn't return a message stating that it was unable to send the email.</p> <p>For these reasons, we highly recommend that you set up Amazon SES to send you notifications when Rendering Failure events occur. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Sending Personalized Email Using the Amazon SES API</a> in the <i>Amazon Simple Email Service Developer Guide</i>.</p> </important>
  ## 
  let valid = call_602832.validator(path, query, header, formData, body)
  let scheme = call_602832.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602832.url(scheme.get, call_602832.host, call_602832.base,
                         call_602832.route, valid.getOrDefault("path"))
  result = hook(call_602832, url, valid)

proc call*(call_602833: Call_GetSendTemplatedEmail_602807; Template: string;
          TemplateData: string; Source: string; ReplyToAddresses: JsonNode = nil;
          DestinationBccAddresses: JsonNode = nil; ReturnPathArn: string = "";
          DestinationToAddresses: JsonNode = nil; TemplateArn: string = "";
          Tags: JsonNode = nil; SourceArn: string = "";
          Action: string = "SendTemplatedEmail";
          DestinationCcAddresses: JsonNode = nil; ReturnPath: string = "";
          ConfigurationSetName: string = ""; Version: string = "2010-12-01"): Recallable =
  ## getSendTemplatedEmail
  ## <p>Composes an email message using an email template and immediately queues it for sending.</p> <p>In order to send email using the <code>SendTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Calls to the <code>SendTemplatedEmail</code> operation may only include one <code>Destination</code> parameter. A destination is a set of recipients who will receive the same version of the email. The <code>Destination</code> parameter can include up to 50 recipients, across the To:, CC: and BCC: fields.</p> </li> <li> <p>The <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> </ul> <important> <p>If your call to the <code>SendTemplatedEmail</code> operation includes all of the required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES can't render the email because the template contains errors, it doesn't send the email. Additionally, because it already accepted the message, Amazon SES doesn't return a message stating that it was unable to send the email.</p> <p>For these reasons, we highly recommend that you set up Amazon SES to send you notifications when Rendering Failure events occur. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Sending Personalized Email Using the Amazon SES API</a> in the <i>Amazon Simple Email Service Developer Guide</i>.</p> </important>
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Template: string (required)
  ##           : The template to use when sending this email.
  ##   DestinationBccAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   DestinationToAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  ##   TemplateArn: string
  ##              : The ARN of the template to use when sending this email.
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendTemplatedEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   TemplateData: string (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   Action: string (required)
  ##   DestinationCcAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   Source: string (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in<a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   ReturnPath: string
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendTemplatedEmail</code>.
  ##   Version: string (required)
  var query_602834 = newJObject()
  if ReplyToAddresses != nil:
    query_602834.add "ReplyToAddresses", ReplyToAddresses
  add(query_602834, "Template", newJString(Template))
  if DestinationBccAddresses != nil:
    query_602834.add "Destination.BccAddresses", DestinationBccAddresses
  add(query_602834, "ReturnPathArn", newJString(ReturnPathArn))
  if DestinationToAddresses != nil:
    query_602834.add "Destination.ToAddresses", DestinationToAddresses
  add(query_602834, "TemplateArn", newJString(TemplateArn))
  if Tags != nil:
    query_602834.add "Tags", Tags
  add(query_602834, "SourceArn", newJString(SourceArn))
  add(query_602834, "TemplateData", newJString(TemplateData))
  add(query_602834, "Action", newJString(Action))
  if DestinationCcAddresses != nil:
    query_602834.add "Destination.CcAddresses", DestinationCcAddresses
  add(query_602834, "Source", newJString(Source))
  add(query_602834, "ReturnPath", newJString(ReturnPath))
  add(query_602834, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_602834, "Version", newJString(Version))
  result = call_602833.call(nil, query_602834, nil, nil, nil)

var getSendTemplatedEmail* = Call_GetSendTemplatedEmail_602807(
    name: "getSendTemplatedEmail", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SendTemplatedEmail",
    validator: validate_GetSendTemplatedEmail_602808, base: "/",
    url: url_GetSendTemplatedEmail_602809, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetActiveReceiptRuleSet_602880 = ref object of OpenApiRestCall_600426
proc url_PostSetActiveReceiptRuleSet_602882(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSetActiveReceiptRuleSet_602881(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the specified receipt rule set as the active receipt rule set.</p> <note> <p>To disable your email-receiving through Amazon SES completely, you can call this API with RuleSetName set to null.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602883 = query.getOrDefault("Action")
  valid_602883 = validateParameter(valid_602883, JString, required = true, default = newJString(
      "SetActiveReceiptRuleSet"))
  if valid_602883 != nil:
    section.add "Action", valid_602883
  var valid_602884 = query.getOrDefault("Version")
  valid_602884 = validateParameter(valid_602884, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602884 != nil:
    section.add "Version", valid_602884
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602885 = header.getOrDefault("X-Amz-Date")
  valid_602885 = validateParameter(valid_602885, JString, required = false,
                                 default = nil)
  if valid_602885 != nil:
    section.add "X-Amz-Date", valid_602885
  var valid_602886 = header.getOrDefault("X-Amz-Security-Token")
  valid_602886 = validateParameter(valid_602886, JString, required = false,
                                 default = nil)
  if valid_602886 != nil:
    section.add "X-Amz-Security-Token", valid_602886
  var valid_602887 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602887 = validateParameter(valid_602887, JString, required = false,
                                 default = nil)
  if valid_602887 != nil:
    section.add "X-Amz-Content-Sha256", valid_602887
  var valid_602888 = header.getOrDefault("X-Amz-Algorithm")
  valid_602888 = validateParameter(valid_602888, JString, required = false,
                                 default = nil)
  if valid_602888 != nil:
    section.add "X-Amz-Algorithm", valid_602888
  var valid_602889 = header.getOrDefault("X-Amz-Signature")
  valid_602889 = validateParameter(valid_602889, JString, required = false,
                                 default = nil)
  if valid_602889 != nil:
    section.add "X-Amz-Signature", valid_602889
  var valid_602890 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602890 = validateParameter(valid_602890, JString, required = false,
                                 default = nil)
  if valid_602890 != nil:
    section.add "X-Amz-SignedHeaders", valid_602890
  var valid_602891 = header.getOrDefault("X-Amz-Credential")
  valid_602891 = validateParameter(valid_602891, JString, required = false,
                                 default = nil)
  if valid_602891 != nil:
    section.add "X-Amz-Credential", valid_602891
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleSetName: JString
  ##              : The name of the receipt rule set to make active. Setting this value to null disables all email receiving.
  section = newJObject()
  var valid_602892 = formData.getOrDefault("RuleSetName")
  valid_602892 = validateParameter(valid_602892, JString, required = false,
                                 default = nil)
  if valid_602892 != nil:
    section.add "RuleSetName", valid_602892
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602893: Call_PostSetActiveReceiptRuleSet_602880; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the specified receipt rule set as the active receipt rule set.</p> <note> <p>To disable your email-receiving through Amazon SES completely, you can call this API with RuleSetName set to null.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_602893.validator(path, query, header, formData, body)
  let scheme = call_602893.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602893.url(scheme.get, call_602893.host, call_602893.base,
                         call_602893.route, valid.getOrDefault("path"))
  result = hook(call_602893, url, valid)

proc call*(call_602894: Call_PostSetActiveReceiptRuleSet_602880;
          RuleSetName: string = ""; Action: string = "SetActiveReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## postSetActiveReceiptRuleSet
  ## <p>Sets the specified receipt rule set as the active receipt rule set.</p> <note> <p>To disable your email-receiving through Amazon SES completely, you can call this API with RuleSetName set to null.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string
  ##              : The name of the receipt rule set to make active. Setting this value to null disables all email receiving.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602895 = newJObject()
  var formData_602896 = newJObject()
  add(formData_602896, "RuleSetName", newJString(RuleSetName))
  add(query_602895, "Action", newJString(Action))
  add(query_602895, "Version", newJString(Version))
  result = call_602894.call(nil, query_602895, nil, formData_602896, nil)

var postSetActiveReceiptRuleSet* = Call_PostSetActiveReceiptRuleSet_602880(
    name: "postSetActiveReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SetActiveReceiptRuleSet",
    validator: validate_PostSetActiveReceiptRuleSet_602881, base: "/",
    url: url_PostSetActiveReceiptRuleSet_602882,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetActiveReceiptRuleSet_602864 = ref object of OpenApiRestCall_600426
proc url_GetSetActiveReceiptRuleSet_602866(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSetActiveReceiptRuleSet_602865(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the specified receipt rule set as the active receipt rule set.</p> <note> <p>To disable your email-receiving through Amazon SES completely, you can call this API with RuleSetName set to null.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleSetName: JString
  ##              : The name of the receipt rule set to make active. Setting this value to null disables all email receiving.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_602867 = query.getOrDefault("RuleSetName")
  valid_602867 = validateParameter(valid_602867, JString, required = false,
                                 default = nil)
  if valid_602867 != nil:
    section.add "RuleSetName", valid_602867
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602868 = query.getOrDefault("Action")
  valid_602868 = validateParameter(valid_602868, JString, required = true, default = newJString(
      "SetActiveReceiptRuleSet"))
  if valid_602868 != nil:
    section.add "Action", valid_602868
  var valid_602869 = query.getOrDefault("Version")
  valid_602869 = validateParameter(valid_602869, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602869 != nil:
    section.add "Version", valid_602869
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602870 = header.getOrDefault("X-Amz-Date")
  valid_602870 = validateParameter(valid_602870, JString, required = false,
                                 default = nil)
  if valid_602870 != nil:
    section.add "X-Amz-Date", valid_602870
  var valid_602871 = header.getOrDefault("X-Amz-Security-Token")
  valid_602871 = validateParameter(valid_602871, JString, required = false,
                                 default = nil)
  if valid_602871 != nil:
    section.add "X-Amz-Security-Token", valid_602871
  var valid_602872 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602872 = validateParameter(valid_602872, JString, required = false,
                                 default = nil)
  if valid_602872 != nil:
    section.add "X-Amz-Content-Sha256", valid_602872
  var valid_602873 = header.getOrDefault("X-Amz-Algorithm")
  valid_602873 = validateParameter(valid_602873, JString, required = false,
                                 default = nil)
  if valid_602873 != nil:
    section.add "X-Amz-Algorithm", valid_602873
  var valid_602874 = header.getOrDefault("X-Amz-Signature")
  valid_602874 = validateParameter(valid_602874, JString, required = false,
                                 default = nil)
  if valid_602874 != nil:
    section.add "X-Amz-Signature", valid_602874
  var valid_602875 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602875 = validateParameter(valid_602875, JString, required = false,
                                 default = nil)
  if valid_602875 != nil:
    section.add "X-Amz-SignedHeaders", valid_602875
  var valid_602876 = header.getOrDefault("X-Amz-Credential")
  valid_602876 = validateParameter(valid_602876, JString, required = false,
                                 default = nil)
  if valid_602876 != nil:
    section.add "X-Amz-Credential", valid_602876
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602877: Call_GetSetActiveReceiptRuleSet_602864; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the specified receipt rule set as the active receipt rule set.</p> <note> <p>To disable your email-receiving through Amazon SES completely, you can call this API with RuleSetName set to null.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_602877.validator(path, query, header, formData, body)
  let scheme = call_602877.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602877.url(scheme.get, call_602877.host, call_602877.base,
                         call_602877.route, valid.getOrDefault("path"))
  result = hook(call_602877, url, valid)

proc call*(call_602878: Call_GetSetActiveReceiptRuleSet_602864;
          RuleSetName: string = ""; Action: string = "SetActiveReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## getSetActiveReceiptRuleSet
  ## <p>Sets the specified receipt rule set as the active receipt rule set.</p> <note> <p>To disable your email-receiving through Amazon SES completely, you can call this API with RuleSetName set to null.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string
  ##              : The name of the receipt rule set to make active. Setting this value to null disables all email receiving.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602879 = newJObject()
  add(query_602879, "RuleSetName", newJString(RuleSetName))
  add(query_602879, "Action", newJString(Action))
  add(query_602879, "Version", newJString(Version))
  result = call_602878.call(nil, query_602879, nil, nil, nil)

var getSetActiveReceiptRuleSet* = Call_GetSetActiveReceiptRuleSet_602864(
    name: "getSetActiveReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SetActiveReceiptRuleSet",
    validator: validate_GetSetActiveReceiptRuleSet_602865, base: "/",
    url: url_GetSetActiveReceiptRuleSet_602866,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetIdentityDkimEnabled_602914 = ref object of OpenApiRestCall_600426
proc url_PostSetIdentityDkimEnabled_602916(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSetIdentityDkimEnabled_602915(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends from addresses on that domain. If Easy DKIM signing is enabled for an email address, then Amazon SES uses DKIM to sign all email it sends from that address.</p> <note> <p>For email addresses (for example, <code>user@example.com</code>), you can only enable DKIM signing if the corresponding domain (in this case, <code>example.com</code>) has been set up to use Easy DKIM.</p> </note> <p>You can enable DKIM signing for an identity at any time after you start the verification process for the identity, even if the verification process isn't complete. </p> <p>You can execute this operation no more than once per second.</p> <p>For more information about Easy DKIM signing, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602917 = query.getOrDefault("Action")
  valid_602917 = validateParameter(valid_602917, JString, required = true,
                                 default = newJString("SetIdentityDkimEnabled"))
  if valid_602917 != nil:
    section.add "Action", valid_602917
  var valid_602918 = query.getOrDefault("Version")
  valid_602918 = validateParameter(valid_602918, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602918 != nil:
    section.add "Version", valid_602918
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602919 = header.getOrDefault("X-Amz-Date")
  valid_602919 = validateParameter(valid_602919, JString, required = false,
                                 default = nil)
  if valid_602919 != nil:
    section.add "X-Amz-Date", valid_602919
  var valid_602920 = header.getOrDefault("X-Amz-Security-Token")
  valid_602920 = validateParameter(valid_602920, JString, required = false,
                                 default = nil)
  if valid_602920 != nil:
    section.add "X-Amz-Security-Token", valid_602920
  var valid_602921 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602921 = validateParameter(valid_602921, JString, required = false,
                                 default = nil)
  if valid_602921 != nil:
    section.add "X-Amz-Content-Sha256", valid_602921
  var valid_602922 = header.getOrDefault("X-Amz-Algorithm")
  valid_602922 = validateParameter(valid_602922, JString, required = false,
                                 default = nil)
  if valid_602922 != nil:
    section.add "X-Amz-Algorithm", valid_602922
  var valid_602923 = header.getOrDefault("X-Amz-Signature")
  valid_602923 = validateParameter(valid_602923, JString, required = false,
                                 default = nil)
  if valid_602923 != nil:
    section.add "X-Amz-Signature", valid_602923
  var valid_602924 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602924 = validateParameter(valid_602924, JString, required = false,
                                 default = nil)
  if valid_602924 != nil:
    section.add "X-Amz-SignedHeaders", valid_602924
  var valid_602925 = header.getOrDefault("X-Amz-Credential")
  valid_602925 = validateParameter(valid_602925, JString, required = false,
                                 default = nil)
  if valid_602925 != nil:
    section.add "X-Amz-Credential", valid_602925
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identity: JString (required)
  ##           : The identity for which DKIM signing should be enabled or disabled.
  ##   DkimEnabled: JBool (required)
  ##              : Sets whether DKIM signing is enabled for an identity. Set to <code>true</code> to enable DKIM signing for this identity; <code>false</code> to disable it. 
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identity` field"
  var valid_602926 = formData.getOrDefault("Identity")
  valid_602926 = validateParameter(valid_602926, JString, required = true,
                                 default = nil)
  if valid_602926 != nil:
    section.add "Identity", valid_602926
  var valid_602927 = formData.getOrDefault("DkimEnabled")
  valid_602927 = validateParameter(valid_602927, JBool, required = true, default = nil)
  if valid_602927 != nil:
    section.add "DkimEnabled", valid_602927
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602928: Call_PostSetIdentityDkimEnabled_602914; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends from addresses on that domain. If Easy DKIM signing is enabled for an email address, then Amazon SES uses DKIM to sign all email it sends from that address.</p> <note> <p>For email addresses (for example, <code>user@example.com</code>), you can only enable DKIM signing if the corresponding domain (in this case, <code>example.com</code>) has been set up to use Easy DKIM.</p> </note> <p>You can enable DKIM signing for an identity at any time after you start the verification process for the identity, even if the verification process isn't complete. </p> <p>You can execute this operation no more than once per second.</p> <p>For more information about Easy DKIM signing, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_602928.validator(path, query, header, formData, body)
  let scheme = call_602928.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602928.url(scheme.get, call_602928.host, call_602928.base,
                         call_602928.route, valid.getOrDefault("path"))
  result = hook(call_602928, url, valid)

proc call*(call_602929: Call_PostSetIdentityDkimEnabled_602914; Identity: string;
          DkimEnabled: bool; Action: string = "SetIdentityDkimEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## postSetIdentityDkimEnabled
  ## <p>Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends from addresses on that domain. If Easy DKIM signing is enabled for an email address, then Amazon SES uses DKIM to sign all email it sends from that address.</p> <note> <p>For email addresses (for example, <code>user@example.com</code>), you can only enable DKIM signing if the corresponding domain (in this case, <code>example.com</code>) has been set up to use Easy DKIM.</p> </note> <p>You can enable DKIM signing for an identity at any time after you start the verification process for the identity, even if the verification process isn't complete. </p> <p>You can execute this operation no more than once per second.</p> <p>For more information about Easy DKIM signing, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
  ##   Identity: string (required)
  ##           : The identity for which DKIM signing should be enabled or disabled.
  ##   Action: string (required)
  ##   DkimEnabled: bool (required)
  ##              : Sets whether DKIM signing is enabled for an identity. Set to <code>true</code> to enable DKIM signing for this identity; <code>false</code> to disable it. 
  ##   Version: string (required)
  var query_602930 = newJObject()
  var formData_602931 = newJObject()
  add(formData_602931, "Identity", newJString(Identity))
  add(query_602930, "Action", newJString(Action))
  add(formData_602931, "DkimEnabled", newJBool(DkimEnabled))
  add(query_602930, "Version", newJString(Version))
  result = call_602929.call(nil, query_602930, nil, formData_602931, nil)

var postSetIdentityDkimEnabled* = Call_PostSetIdentityDkimEnabled_602914(
    name: "postSetIdentityDkimEnabled", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SetIdentityDkimEnabled",
    validator: validate_PostSetIdentityDkimEnabled_602915, base: "/",
    url: url_PostSetIdentityDkimEnabled_602916,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetIdentityDkimEnabled_602897 = ref object of OpenApiRestCall_600426
proc url_GetSetIdentityDkimEnabled_602899(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSetIdentityDkimEnabled_602898(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends from addresses on that domain. If Easy DKIM signing is enabled for an email address, then Amazon SES uses DKIM to sign all email it sends from that address.</p> <note> <p>For email addresses (for example, <code>user@example.com</code>), you can only enable DKIM signing if the corresponding domain (in this case, <code>example.com</code>) has been set up to use Easy DKIM.</p> </note> <p>You can enable DKIM signing for an identity at any time after you start the verification process for the identity, even if the verification process isn't complete. </p> <p>You can execute this operation no more than once per second.</p> <p>For more information about Easy DKIM signing, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : The identity for which DKIM signing should be enabled or disabled.
  ##   DkimEnabled: JBool (required)
  ##              : Sets whether DKIM signing is enabled for an identity. Set to <code>true</code> to enable DKIM signing for this identity; <code>false</code> to disable it. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_602900 = query.getOrDefault("Identity")
  valid_602900 = validateParameter(valid_602900, JString, required = true,
                                 default = nil)
  if valid_602900 != nil:
    section.add "Identity", valid_602900
  var valid_602901 = query.getOrDefault("DkimEnabled")
  valid_602901 = validateParameter(valid_602901, JBool, required = true, default = nil)
  if valid_602901 != nil:
    section.add "DkimEnabled", valid_602901
  var valid_602902 = query.getOrDefault("Action")
  valid_602902 = validateParameter(valid_602902, JString, required = true,
                                 default = newJString("SetIdentityDkimEnabled"))
  if valid_602902 != nil:
    section.add "Action", valid_602902
  var valid_602903 = query.getOrDefault("Version")
  valid_602903 = validateParameter(valid_602903, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602903 != nil:
    section.add "Version", valid_602903
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602904 = header.getOrDefault("X-Amz-Date")
  valid_602904 = validateParameter(valid_602904, JString, required = false,
                                 default = nil)
  if valid_602904 != nil:
    section.add "X-Amz-Date", valid_602904
  var valid_602905 = header.getOrDefault("X-Amz-Security-Token")
  valid_602905 = validateParameter(valid_602905, JString, required = false,
                                 default = nil)
  if valid_602905 != nil:
    section.add "X-Amz-Security-Token", valid_602905
  var valid_602906 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602906 = validateParameter(valid_602906, JString, required = false,
                                 default = nil)
  if valid_602906 != nil:
    section.add "X-Amz-Content-Sha256", valid_602906
  var valid_602907 = header.getOrDefault("X-Amz-Algorithm")
  valid_602907 = validateParameter(valid_602907, JString, required = false,
                                 default = nil)
  if valid_602907 != nil:
    section.add "X-Amz-Algorithm", valid_602907
  var valid_602908 = header.getOrDefault("X-Amz-Signature")
  valid_602908 = validateParameter(valid_602908, JString, required = false,
                                 default = nil)
  if valid_602908 != nil:
    section.add "X-Amz-Signature", valid_602908
  var valid_602909 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602909 = validateParameter(valid_602909, JString, required = false,
                                 default = nil)
  if valid_602909 != nil:
    section.add "X-Amz-SignedHeaders", valid_602909
  var valid_602910 = header.getOrDefault("X-Amz-Credential")
  valid_602910 = validateParameter(valid_602910, JString, required = false,
                                 default = nil)
  if valid_602910 != nil:
    section.add "X-Amz-Credential", valid_602910
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602911: Call_GetSetIdentityDkimEnabled_602897; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends from addresses on that domain. If Easy DKIM signing is enabled for an email address, then Amazon SES uses DKIM to sign all email it sends from that address.</p> <note> <p>For email addresses (for example, <code>user@example.com</code>), you can only enable DKIM signing if the corresponding domain (in this case, <code>example.com</code>) has been set up to use Easy DKIM.</p> </note> <p>You can enable DKIM signing for an identity at any time after you start the verification process for the identity, even if the verification process isn't complete. </p> <p>You can execute this operation no more than once per second.</p> <p>For more information about Easy DKIM signing, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_602911.validator(path, query, header, formData, body)
  let scheme = call_602911.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602911.url(scheme.get, call_602911.host, call_602911.base,
                         call_602911.route, valid.getOrDefault("path"))
  result = hook(call_602911, url, valid)

proc call*(call_602912: Call_GetSetIdentityDkimEnabled_602897; Identity: string;
          DkimEnabled: bool; Action: string = "SetIdentityDkimEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## getSetIdentityDkimEnabled
  ## <p>Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends from addresses on that domain. If Easy DKIM signing is enabled for an email address, then Amazon SES uses DKIM to sign all email it sends from that address.</p> <note> <p>For email addresses (for example, <code>user@example.com</code>), you can only enable DKIM signing if the corresponding domain (in this case, <code>example.com</code>) has been set up to use Easy DKIM.</p> </note> <p>You can enable DKIM signing for an identity at any time after you start the verification process for the identity, even if the verification process isn't complete. </p> <p>You can execute this operation no more than once per second.</p> <p>For more information about Easy DKIM signing, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
  ##   Identity: string (required)
  ##           : The identity for which DKIM signing should be enabled or disabled.
  ##   DkimEnabled: bool (required)
  ##              : Sets whether DKIM signing is enabled for an identity. Set to <code>true</code> to enable DKIM signing for this identity; <code>false</code> to disable it. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602913 = newJObject()
  add(query_602913, "Identity", newJString(Identity))
  add(query_602913, "DkimEnabled", newJBool(DkimEnabled))
  add(query_602913, "Action", newJString(Action))
  add(query_602913, "Version", newJString(Version))
  result = call_602912.call(nil, query_602913, nil, nil, nil)

var getSetIdentityDkimEnabled* = Call_GetSetIdentityDkimEnabled_602897(
    name: "getSetIdentityDkimEnabled", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SetIdentityDkimEnabled",
    validator: validate_GetSetIdentityDkimEnabled_602898, base: "/",
    url: url_GetSetIdentityDkimEnabled_602899,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetIdentityFeedbackForwardingEnabled_602949 = ref object of OpenApiRestCall_600426
proc url_PostSetIdentityFeedbackForwardingEnabled_602951(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSetIdentityFeedbackForwardingEnabled_602950(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given an identity (an email address or a domain), enables or disables whether Amazon SES forwards bounce and complaint notifications as email. Feedback forwarding can only be disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and complaints.</p> <note> <p>Feedback forwarding does not apply to delivery notifications. Delivery notifications are only available through Amazon SNS.</p> </note> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602952 = query.getOrDefault("Action")
  valid_602952 = validateParameter(valid_602952, JString, required = true, default = newJString(
      "SetIdentityFeedbackForwardingEnabled"))
  if valid_602952 != nil:
    section.add "Action", valid_602952
  var valid_602953 = query.getOrDefault("Version")
  valid_602953 = validateParameter(valid_602953, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602953 != nil:
    section.add "Version", valid_602953
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602954 = header.getOrDefault("X-Amz-Date")
  valid_602954 = validateParameter(valid_602954, JString, required = false,
                                 default = nil)
  if valid_602954 != nil:
    section.add "X-Amz-Date", valid_602954
  var valid_602955 = header.getOrDefault("X-Amz-Security-Token")
  valid_602955 = validateParameter(valid_602955, JString, required = false,
                                 default = nil)
  if valid_602955 != nil:
    section.add "X-Amz-Security-Token", valid_602955
  var valid_602956 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602956 = validateParameter(valid_602956, JString, required = false,
                                 default = nil)
  if valid_602956 != nil:
    section.add "X-Amz-Content-Sha256", valid_602956
  var valid_602957 = header.getOrDefault("X-Amz-Algorithm")
  valid_602957 = validateParameter(valid_602957, JString, required = false,
                                 default = nil)
  if valid_602957 != nil:
    section.add "X-Amz-Algorithm", valid_602957
  var valid_602958 = header.getOrDefault("X-Amz-Signature")
  valid_602958 = validateParameter(valid_602958, JString, required = false,
                                 default = nil)
  if valid_602958 != nil:
    section.add "X-Amz-Signature", valid_602958
  var valid_602959 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602959 = validateParameter(valid_602959, JString, required = false,
                                 default = nil)
  if valid_602959 != nil:
    section.add "X-Amz-SignedHeaders", valid_602959
  var valid_602960 = header.getOrDefault("X-Amz-Credential")
  valid_602960 = validateParameter(valid_602960, JString, required = false,
                                 default = nil)
  if valid_602960 != nil:
    section.add "X-Amz-Credential", valid_602960
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identity: JString (required)
  ##           : The identity for which to set bounce and complaint notification forwarding. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   ForwardingEnabled: JBool (required)
  ##                    : Sets whether Amazon SES will forward bounce and complaint notifications as email. <code>true</code> specifies that Amazon SES will forward bounce and complaint notifications as email, in addition to any Amazon SNS topic publishing otherwise specified. <code>false</code> specifies that Amazon SES will publish bounce and complaint notifications only through Amazon SNS. This value can only be set to <code>false</code> when Amazon SNS topics are set for both <code>Bounce</code> and <code>Complaint</code> notification types.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identity` field"
  var valid_602961 = formData.getOrDefault("Identity")
  valid_602961 = validateParameter(valid_602961, JString, required = true,
                                 default = nil)
  if valid_602961 != nil:
    section.add "Identity", valid_602961
  var valid_602962 = formData.getOrDefault("ForwardingEnabled")
  valid_602962 = validateParameter(valid_602962, JBool, required = true, default = nil)
  if valid_602962 != nil:
    section.add "ForwardingEnabled", valid_602962
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602963: Call_PostSetIdentityFeedbackForwardingEnabled_602949;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given an identity (an email address or a domain), enables or disables whether Amazon SES forwards bounce and complaint notifications as email. Feedback forwarding can only be disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and complaints.</p> <note> <p>Feedback forwarding does not apply to delivery notifications. Delivery notifications are only available through Amazon SNS.</p> </note> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_602963.validator(path, query, header, formData, body)
  let scheme = call_602963.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602963.url(scheme.get, call_602963.host, call_602963.base,
                         call_602963.route, valid.getOrDefault("path"))
  result = hook(call_602963, url, valid)

proc call*(call_602964: Call_PostSetIdentityFeedbackForwardingEnabled_602949;
          Identity: string; ForwardingEnabled: bool;
          Action: string = "SetIdentityFeedbackForwardingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## postSetIdentityFeedbackForwardingEnabled
  ## <p>Given an identity (an email address or a domain), enables or disables whether Amazon SES forwards bounce and complaint notifications as email. Feedback forwarding can only be disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and complaints.</p> <note> <p>Feedback forwarding does not apply to delivery notifications. Delivery notifications are only available through Amazon SNS.</p> </note> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Identity: string (required)
  ##           : The identity for which to set bounce and complaint notification forwarding. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ForwardingEnabled: bool (required)
  ##                    : Sets whether Amazon SES will forward bounce and complaint notifications as email. <code>true</code> specifies that Amazon SES will forward bounce and complaint notifications as email, in addition to any Amazon SNS topic publishing otherwise specified. <code>false</code> specifies that Amazon SES will publish bounce and complaint notifications only through Amazon SNS. This value can only be set to <code>false</code> when Amazon SNS topics are set for both <code>Bounce</code> and <code>Complaint</code> notification types.
  var query_602965 = newJObject()
  var formData_602966 = newJObject()
  add(formData_602966, "Identity", newJString(Identity))
  add(query_602965, "Action", newJString(Action))
  add(query_602965, "Version", newJString(Version))
  add(formData_602966, "ForwardingEnabled", newJBool(ForwardingEnabled))
  result = call_602964.call(nil, query_602965, nil, formData_602966, nil)

var postSetIdentityFeedbackForwardingEnabled* = Call_PostSetIdentityFeedbackForwardingEnabled_602949(
    name: "postSetIdentityFeedbackForwardingEnabled", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=SetIdentityFeedbackForwardingEnabled",
    validator: validate_PostSetIdentityFeedbackForwardingEnabled_602950,
    base: "/", url: url_PostSetIdentityFeedbackForwardingEnabled_602951,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetIdentityFeedbackForwardingEnabled_602932 = ref object of OpenApiRestCall_600426
proc url_GetSetIdentityFeedbackForwardingEnabled_602934(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSetIdentityFeedbackForwardingEnabled_602933(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given an identity (an email address or a domain), enables or disables whether Amazon SES forwards bounce and complaint notifications as email. Feedback forwarding can only be disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and complaints.</p> <note> <p>Feedback forwarding does not apply to delivery notifications. Delivery notifications are only available through Amazon SNS.</p> </note> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : The identity for which to set bounce and complaint notification forwarding. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   ForwardingEnabled: JBool (required)
  ##                    : Sets whether Amazon SES will forward bounce and complaint notifications as email. <code>true</code> specifies that Amazon SES will forward bounce and complaint notifications as email, in addition to any Amazon SNS topic publishing otherwise specified. <code>false</code> specifies that Amazon SES will publish bounce and complaint notifications only through Amazon SNS. This value can only be set to <code>false</code> when Amazon SNS topics are set for both <code>Bounce</code> and <code>Complaint</code> notification types.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_602935 = query.getOrDefault("Identity")
  valid_602935 = validateParameter(valid_602935, JString, required = true,
                                 default = nil)
  if valid_602935 != nil:
    section.add "Identity", valid_602935
  var valid_602936 = query.getOrDefault("ForwardingEnabled")
  valid_602936 = validateParameter(valid_602936, JBool, required = true, default = nil)
  if valid_602936 != nil:
    section.add "ForwardingEnabled", valid_602936
  var valid_602937 = query.getOrDefault("Action")
  valid_602937 = validateParameter(valid_602937, JString, required = true, default = newJString(
      "SetIdentityFeedbackForwardingEnabled"))
  if valid_602937 != nil:
    section.add "Action", valid_602937
  var valid_602938 = query.getOrDefault("Version")
  valid_602938 = validateParameter(valid_602938, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602938 != nil:
    section.add "Version", valid_602938
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602939 = header.getOrDefault("X-Amz-Date")
  valid_602939 = validateParameter(valid_602939, JString, required = false,
                                 default = nil)
  if valid_602939 != nil:
    section.add "X-Amz-Date", valid_602939
  var valid_602940 = header.getOrDefault("X-Amz-Security-Token")
  valid_602940 = validateParameter(valid_602940, JString, required = false,
                                 default = nil)
  if valid_602940 != nil:
    section.add "X-Amz-Security-Token", valid_602940
  var valid_602941 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602941 = validateParameter(valid_602941, JString, required = false,
                                 default = nil)
  if valid_602941 != nil:
    section.add "X-Amz-Content-Sha256", valid_602941
  var valid_602942 = header.getOrDefault("X-Amz-Algorithm")
  valid_602942 = validateParameter(valid_602942, JString, required = false,
                                 default = nil)
  if valid_602942 != nil:
    section.add "X-Amz-Algorithm", valid_602942
  var valid_602943 = header.getOrDefault("X-Amz-Signature")
  valid_602943 = validateParameter(valid_602943, JString, required = false,
                                 default = nil)
  if valid_602943 != nil:
    section.add "X-Amz-Signature", valid_602943
  var valid_602944 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602944 = validateParameter(valid_602944, JString, required = false,
                                 default = nil)
  if valid_602944 != nil:
    section.add "X-Amz-SignedHeaders", valid_602944
  var valid_602945 = header.getOrDefault("X-Amz-Credential")
  valid_602945 = validateParameter(valid_602945, JString, required = false,
                                 default = nil)
  if valid_602945 != nil:
    section.add "X-Amz-Credential", valid_602945
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602946: Call_GetSetIdentityFeedbackForwardingEnabled_602932;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given an identity (an email address or a domain), enables or disables whether Amazon SES forwards bounce and complaint notifications as email. Feedback forwarding can only be disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and complaints.</p> <note> <p>Feedback forwarding does not apply to delivery notifications. Delivery notifications are only available through Amazon SNS.</p> </note> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_602946.validator(path, query, header, formData, body)
  let scheme = call_602946.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602946.url(scheme.get, call_602946.host, call_602946.base,
                         call_602946.route, valid.getOrDefault("path"))
  result = hook(call_602946, url, valid)

proc call*(call_602947: Call_GetSetIdentityFeedbackForwardingEnabled_602932;
          Identity: string; ForwardingEnabled: bool;
          Action: string = "SetIdentityFeedbackForwardingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## getSetIdentityFeedbackForwardingEnabled
  ## <p>Given an identity (an email address or a domain), enables or disables whether Amazon SES forwards bounce and complaint notifications as email. Feedback forwarding can only be disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and complaints.</p> <note> <p>Feedback forwarding does not apply to delivery notifications. Delivery notifications are only available through Amazon SNS.</p> </note> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Identity: string (required)
  ##           : The identity for which to set bounce and complaint notification forwarding. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   ForwardingEnabled: bool (required)
  ##                    : Sets whether Amazon SES will forward bounce and complaint notifications as email. <code>true</code> specifies that Amazon SES will forward bounce and complaint notifications as email, in addition to any Amazon SNS topic publishing otherwise specified. <code>false</code> specifies that Amazon SES will publish bounce and complaint notifications only through Amazon SNS. This value can only be set to <code>false</code> when Amazon SNS topics are set for both <code>Bounce</code> and <code>Complaint</code> notification types.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602948 = newJObject()
  add(query_602948, "Identity", newJString(Identity))
  add(query_602948, "ForwardingEnabled", newJBool(ForwardingEnabled))
  add(query_602948, "Action", newJString(Action))
  add(query_602948, "Version", newJString(Version))
  result = call_602947.call(nil, query_602948, nil, nil, nil)

var getSetIdentityFeedbackForwardingEnabled* = Call_GetSetIdentityFeedbackForwardingEnabled_602932(
    name: "getSetIdentityFeedbackForwardingEnabled", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=SetIdentityFeedbackForwardingEnabled",
    validator: validate_GetSetIdentityFeedbackForwardingEnabled_602933, base: "/",
    url: url_GetSetIdentityFeedbackForwardingEnabled_602934,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetIdentityHeadersInNotificationsEnabled_602985 = ref object of OpenApiRestCall_600426
proc url_PostSetIdentityHeadersInNotificationsEnabled_602987(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSetIdentityHeadersInNotificationsEnabled_602986(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given an identity (an email address or a domain), sets whether Amazon SES includes the original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified type.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602988 = query.getOrDefault("Action")
  valid_602988 = validateParameter(valid_602988, JString, required = true, default = newJString(
      "SetIdentityHeadersInNotificationsEnabled"))
  if valid_602988 != nil:
    section.add "Action", valid_602988
  var valid_602989 = query.getOrDefault("Version")
  valid_602989 = validateParameter(valid_602989, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602989 != nil:
    section.add "Version", valid_602989
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602990 = header.getOrDefault("X-Amz-Date")
  valid_602990 = validateParameter(valid_602990, JString, required = false,
                                 default = nil)
  if valid_602990 != nil:
    section.add "X-Amz-Date", valid_602990
  var valid_602991 = header.getOrDefault("X-Amz-Security-Token")
  valid_602991 = validateParameter(valid_602991, JString, required = false,
                                 default = nil)
  if valid_602991 != nil:
    section.add "X-Amz-Security-Token", valid_602991
  var valid_602992 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602992 = validateParameter(valid_602992, JString, required = false,
                                 default = nil)
  if valid_602992 != nil:
    section.add "X-Amz-Content-Sha256", valid_602992
  var valid_602993 = header.getOrDefault("X-Amz-Algorithm")
  valid_602993 = validateParameter(valid_602993, JString, required = false,
                                 default = nil)
  if valid_602993 != nil:
    section.add "X-Amz-Algorithm", valid_602993
  var valid_602994 = header.getOrDefault("X-Amz-Signature")
  valid_602994 = validateParameter(valid_602994, JString, required = false,
                                 default = nil)
  if valid_602994 != nil:
    section.add "X-Amz-Signature", valid_602994
  var valid_602995 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602995 = validateParameter(valid_602995, JString, required = false,
                                 default = nil)
  if valid_602995 != nil:
    section.add "X-Amz-SignedHeaders", valid_602995
  var valid_602996 = header.getOrDefault("X-Amz-Credential")
  valid_602996 = validateParameter(valid_602996, JString, required = false,
                                 default = nil)
  if valid_602996 != nil:
    section.add "X-Amz-Credential", valid_602996
  result.add "header", section
  ## parameters in `formData` object:
  ##   Enabled: JBool (required)
  ##          : <p>Sets whether Amazon SES includes the original email headers in Amazon SNS notifications of the specified notification type. A value of <code>true</code> specifies that Amazon SES will include headers in notifications, and a value of <code>false</code> specifies that Amazon SES will not include headers in notifications.</p> <p>This value can only be set when <code>NotificationType</code> is already set to use a particular Amazon SNS topic.</p>
  ##   Identity: JString (required)
  ##           : The identity for which to enable or disable headers in notifications. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   NotificationType: JString (required)
  ##                   : The notification type for which to enable or disable headers in notifications. 
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Enabled` field"
  var valid_602997 = formData.getOrDefault("Enabled")
  valid_602997 = validateParameter(valid_602997, JBool, required = true, default = nil)
  if valid_602997 != nil:
    section.add "Enabled", valid_602997
  var valid_602998 = formData.getOrDefault("Identity")
  valid_602998 = validateParameter(valid_602998, JString, required = true,
                                 default = nil)
  if valid_602998 != nil:
    section.add "Identity", valid_602998
  var valid_602999 = formData.getOrDefault("NotificationType")
  valid_602999 = validateParameter(valid_602999, JString, required = true,
                                 default = newJString("Bounce"))
  if valid_602999 != nil:
    section.add "NotificationType", valid_602999
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603000: Call_PostSetIdentityHeadersInNotificationsEnabled_602985;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given an identity (an email address or a domain), sets whether Amazon SES includes the original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified type.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_603000.validator(path, query, header, formData, body)
  let scheme = call_603000.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603000.url(scheme.get, call_603000.host, call_603000.base,
                         call_603000.route, valid.getOrDefault("path"))
  result = hook(call_603000, url, valid)

proc call*(call_603001: Call_PostSetIdentityHeadersInNotificationsEnabled_602985;
          Enabled: bool; Identity: string;
          Action: string = "SetIdentityHeadersInNotificationsEnabled";
          NotificationType: string = "Bounce"; Version: string = "2010-12-01"): Recallable =
  ## postSetIdentityHeadersInNotificationsEnabled
  ## <p>Given an identity (an email address or a domain), sets whether Amazon SES includes the original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified type.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Enabled: bool (required)
  ##          : <p>Sets whether Amazon SES includes the original email headers in Amazon SNS notifications of the specified notification type. A value of <code>true</code> specifies that Amazon SES will include headers in notifications, and a value of <code>false</code> specifies that Amazon SES will not include headers in notifications.</p> <p>This value can only be set when <code>NotificationType</code> is already set to use a particular Amazon SNS topic.</p>
  ##   Identity: string (required)
  ##           : The identity for which to enable or disable headers in notifications. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   Action: string (required)
  ##   NotificationType: string (required)
  ##                   : The notification type for which to enable or disable headers in notifications. 
  ##   Version: string (required)
  var query_603002 = newJObject()
  var formData_603003 = newJObject()
  add(formData_603003, "Enabled", newJBool(Enabled))
  add(formData_603003, "Identity", newJString(Identity))
  add(query_603002, "Action", newJString(Action))
  add(formData_603003, "NotificationType", newJString(NotificationType))
  add(query_603002, "Version", newJString(Version))
  result = call_603001.call(nil, query_603002, nil, formData_603003, nil)

var postSetIdentityHeadersInNotificationsEnabled* = Call_PostSetIdentityHeadersInNotificationsEnabled_602985(
    name: "postSetIdentityHeadersInNotificationsEnabled",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=SetIdentityHeadersInNotificationsEnabled",
    validator: validate_PostSetIdentityHeadersInNotificationsEnabled_602986,
    base: "/", url: url_PostSetIdentityHeadersInNotificationsEnabled_602987,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetIdentityHeadersInNotificationsEnabled_602967 = ref object of OpenApiRestCall_600426
proc url_GetSetIdentityHeadersInNotificationsEnabled_602969(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSetIdentityHeadersInNotificationsEnabled_602968(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given an identity (an email address or a domain), sets whether Amazon SES includes the original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified type.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : The identity for which to enable or disable headers in notifications. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   Enabled: JBool (required)
  ##          : <p>Sets whether Amazon SES includes the original email headers in Amazon SNS notifications of the specified notification type. A value of <code>true</code> specifies that Amazon SES will include headers in notifications, and a value of <code>false</code> specifies that Amazon SES will not include headers in notifications.</p> <p>This value can only be set when <code>NotificationType</code> is already set to use a particular Amazon SNS topic.</p>
  ##   Action: JString (required)
  ##   NotificationType: JString (required)
  ##                   : The notification type for which to enable or disable headers in notifications. 
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_602970 = query.getOrDefault("Identity")
  valid_602970 = validateParameter(valid_602970, JString, required = true,
                                 default = nil)
  if valid_602970 != nil:
    section.add "Identity", valid_602970
  var valid_602971 = query.getOrDefault("Enabled")
  valid_602971 = validateParameter(valid_602971, JBool, required = true, default = nil)
  if valid_602971 != nil:
    section.add "Enabled", valid_602971
  var valid_602972 = query.getOrDefault("Action")
  valid_602972 = validateParameter(valid_602972, JString, required = true, default = newJString(
      "SetIdentityHeadersInNotificationsEnabled"))
  if valid_602972 != nil:
    section.add "Action", valid_602972
  var valid_602973 = query.getOrDefault("NotificationType")
  valid_602973 = validateParameter(valid_602973, JString, required = true,
                                 default = newJString("Bounce"))
  if valid_602973 != nil:
    section.add "NotificationType", valid_602973
  var valid_602974 = query.getOrDefault("Version")
  valid_602974 = validateParameter(valid_602974, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602974 != nil:
    section.add "Version", valid_602974
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602975 = header.getOrDefault("X-Amz-Date")
  valid_602975 = validateParameter(valid_602975, JString, required = false,
                                 default = nil)
  if valid_602975 != nil:
    section.add "X-Amz-Date", valid_602975
  var valid_602976 = header.getOrDefault("X-Amz-Security-Token")
  valid_602976 = validateParameter(valid_602976, JString, required = false,
                                 default = nil)
  if valid_602976 != nil:
    section.add "X-Amz-Security-Token", valid_602976
  var valid_602977 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602977 = validateParameter(valid_602977, JString, required = false,
                                 default = nil)
  if valid_602977 != nil:
    section.add "X-Amz-Content-Sha256", valid_602977
  var valid_602978 = header.getOrDefault("X-Amz-Algorithm")
  valid_602978 = validateParameter(valid_602978, JString, required = false,
                                 default = nil)
  if valid_602978 != nil:
    section.add "X-Amz-Algorithm", valid_602978
  var valid_602979 = header.getOrDefault("X-Amz-Signature")
  valid_602979 = validateParameter(valid_602979, JString, required = false,
                                 default = nil)
  if valid_602979 != nil:
    section.add "X-Amz-Signature", valid_602979
  var valid_602980 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602980 = validateParameter(valid_602980, JString, required = false,
                                 default = nil)
  if valid_602980 != nil:
    section.add "X-Amz-SignedHeaders", valid_602980
  var valid_602981 = header.getOrDefault("X-Amz-Credential")
  valid_602981 = validateParameter(valid_602981, JString, required = false,
                                 default = nil)
  if valid_602981 != nil:
    section.add "X-Amz-Credential", valid_602981
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602982: Call_GetSetIdentityHeadersInNotificationsEnabled_602967;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given an identity (an email address or a domain), sets whether Amazon SES includes the original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified type.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_602982.validator(path, query, header, formData, body)
  let scheme = call_602982.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602982.url(scheme.get, call_602982.host, call_602982.base,
                         call_602982.route, valid.getOrDefault("path"))
  result = hook(call_602982, url, valid)

proc call*(call_602983: Call_GetSetIdentityHeadersInNotificationsEnabled_602967;
          Identity: string; Enabled: bool;
          Action: string = "SetIdentityHeadersInNotificationsEnabled";
          NotificationType: string = "Bounce"; Version: string = "2010-12-01"): Recallable =
  ## getSetIdentityHeadersInNotificationsEnabled
  ## <p>Given an identity (an email address or a domain), sets whether Amazon SES includes the original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified type.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Identity: string (required)
  ##           : The identity for which to enable or disable headers in notifications. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   Enabled: bool (required)
  ##          : <p>Sets whether Amazon SES includes the original email headers in Amazon SNS notifications of the specified notification type. A value of <code>true</code> specifies that Amazon SES will include headers in notifications, and a value of <code>false</code> specifies that Amazon SES will not include headers in notifications.</p> <p>This value can only be set when <code>NotificationType</code> is already set to use a particular Amazon SNS topic.</p>
  ##   Action: string (required)
  ##   NotificationType: string (required)
  ##                   : The notification type for which to enable or disable headers in notifications. 
  ##   Version: string (required)
  var query_602984 = newJObject()
  add(query_602984, "Identity", newJString(Identity))
  add(query_602984, "Enabled", newJBool(Enabled))
  add(query_602984, "Action", newJString(Action))
  add(query_602984, "NotificationType", newJString(NotificationType))
  add(query_602984, "Version", newJString(Version))
  result = call_602983.call(nil, query_602984, nil, nil, nil)

var getSetIdentityHeadersInNotificationsEnabled* = Call_GetSetIdentityHeadersInNotificationsEnabled_602967(
    name: "getSetIdentityHeadersInNotificationsEnabled", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=SetIdentityHeadersInNotificationsEnabled",
    validator: validate_GetSetIdentityHeadersInNotificationsEnabled_602968,
    base: "/", url: url_GetSetIdentityHeadersInNotificationsEnabled_602969,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetIdentityMailFromDomain_603022 = ref object of OpenApiRestCall_600426
proc url_PostSetIdentityMailFromDomain_603024(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSetIdentityMailFromDomain_603023(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables the custom MAIL FROM domain setup for a verified identity (an email address or a domain).</p> <important> <p>To send emails using the specified MAIL FROM domain, you must add an MX record to your MAIL FROM domain's DNS settings. If you want your emails to pass Sender Policy Framework (SPF) checks, you must also add or update an SPF record. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-set.html">Amazon SES Developer Guide</a>.</p> </important> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603025 = query.getOrDefault("Action")
  valid_603025 = validateParameter(valid_603025, JString, required = true, default = newJString(
      "SetIdentityMailFromDomain"))
  if valid_603025 != nil:
    section.add "Action", valid_603025
  var valid_603026 = query.getOrDefault("Version")
  valid_603026 = validateParameter(valid_603026, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603026 != nil:
    section.add "Version", valid_603026
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603027 = header.getOrDefault("X-Amz-Date")
  valid_603027 = validateParameter(valid_603027, JString, required = false,
                                 default = nil)
  if valid_603027 != nil:
    section.add "X-Amz-Date", valid_603027
  var valid_603028 = header.getOrDefault("X-Amz-Security-Token")
  valid_603028 = validateParameter(valid_603028, JString, required = false,
                                 default = nil)
  if valid_603028 != nil:
    section.add "X-Amz-Security-Token", valid_603028
  var valid_603029 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603029 = validateParameter(valid_603029, JString, required = false,
                                 default = nil)
  if valid_603029 != nil:
    section.add "X-Amz-Content-Sha256", valid_603029
  var valid_603030 = header.getOrDefault("X-Amz-Algorithm")
  valid_603030 = validateParameter(valid_603030, JString, required = false,
                                 default = nil)
  if valid_603030 != nil:
    section.add "X-Amz-Algorithm", valid_603030
  var valid_603031 = header.getOrDefault("X-Amz-Signature")
  valid_603031 = validateParameter(valid_603031, JString, required = false,
                                 default = nil)
  if valid_603031 != nil:
    section.add "X-Amz-Signature", valid_603031
  var valid_603032 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603032 = validateParameter(valid_603032, JString, required = false,
                                 default = nil)
  if valid_603032 != nil:
    section.add "X-Amz-SignedHeaders", valid_603032
  var valid_603033 = header.getOrDefault("X-Amz-Credential")
  valid_603033 = validateParameter(valid_603033, JString, required = false,
                                 default = nil)
  if valid_603033 != nil:
    section.add "X-Amz-Credential", valid_603033
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identity: JString (required)
  ##           : The verified identity for which you want to enable or disable the specified custom MAIL FROM domain.
  ##   MailFromDomain: JString
  ##                 : The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM domain must 1) be a subdomain of the verified identity, 2) not be used in a "From" address if the MAIL FROM domain is the destination of email feedback forwarding (for more information, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from.html">Amazon SES Developer Guide</a>), and 3) not be used to receive emails. A value of <code>null</code> disables the custom MAIL FROM setting for the identity.
  ##   BehaviorOnMXFailure: JString
  ##                      : <p>The action that you want Amazon SES to take if it cannot successfully read the required MX record when you send an email. If you choose <code>UseDefaultValue</code>, Amazon SES will use amazonses.com (or a subdomain of that) as the MAIL FROM domain. If you choose <code>RejectMessage</code>, Amazon SES will return a <code>MailFromDomainNotVerified</code> error and not send the email.</p> <p>The action specified in <code>BehaviorOnMXFailure</code> is taken when the custom MAIL FROM domain setup is in the <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code> states.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identity` field"
  var valid_603034 = formData.getOrDefault("Identity")
  valid_603034 = validateParameter(valid_603034, JString, required = true,
                                 default = nil)
  if valid_603034 != nil:
    section.add "Identity", valid_603034
  var valid_603035 = formData.getOrDefault("MailFromDomain")
  valid_603035 = validateParameter(valid_603035, JString, required = false,
                                 default = nil)
  if valid_603035 != nil:
    section.add "MailFromDomain", valid_603035
  var valid_603036 = formData.getOrDefault("BehaviorOnMXFailure")
  valid_603036 = validateParameter(valid_603036, JString, required = false,
                                 default = newJString("UseDefaultValue"))
  if valid_603036 != nil:
    section.add "BehaviorOnMXFailure", valid_603036
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603037: Call_PostSetIdentityMailFromDomain_603022; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Enables or disables the custom MAIL FROM domain setup for a verified identity (an email address or a domain).</p> <important> <p>To send emails using the specified MAIL FROM domain, you must add an MX record to your MAIL FROM domain's DNS settings. If you want your emails to pass Sender Policy Framework (SPF) checks, you must also add or update an SPF record. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-set.html">Amazon SES Developer Guide</a>.</p> </important> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603037.validator(path, query, header, formData, body)
  let scheme = call_603037.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603037.url(scheme.get, call_603037.host, call_603037.base,
                         call_603037.route, valid.getOrDefault("path"))
  result = hook(call_603037, url, valid)

proc call*(call_603038: Call_PostSetIdentityMailFromDomain_603022;
          Identity: string; MailFromDomain: string = "";
          Action: string = "SetIdentityMailFromDomain";
          BehaviorOnMXFailure: string = "UseDefaultValue";
          Version: string = "2010-12-01"): Recallable =
  ## postSetIdentityMailFromDomain
  ## <p>Enables or disables the custom MAIL FROM domain setup for a verified identity (an email address or a domain).</p> <important> <p>To send emails using the specified MAIL FROM domain, you must add an MX record to your MAIL FROM domain's DNS settings. If you want your emails to pass Sender Policy Framework (SPF) checks, you must also add or update an SPF record. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-set.html">Amazon SES Developer Guide</a>.</p> </important> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : The verified identity for which you want to enable or disable the specified custom MAIL FROM domain.
  ##   MailFromDomain: string
  ##                 : The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM domain must 1) be a subdomain of the verified identity, 2) not be used in a "From" address if the MAIL FROM domain is the destination of email feedback forwarding (for more information, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from.html">Amazon SES Developer Guide</a>), and 3) not be used to receive emails. A value of <code>null</code> disables the custom MAIL FROM setting for the identity.
  ##   Action: string (required)
  ##   BehaviorOnMXFailure: string
  ##                      : <p>The action that you want Amazon SES to take if it cannot successfully read the required MX record when you send an email. If you choose <code>UseDefaultValue</code>, Amazon SES will use amazonses.com (or a subdomain of that) as the MAIL FROM domain. If you choose <code>RejectMessage</code>, Amazon SES will return a <code>MailFromDomainNotVerified</code> error and not send the email.</p> <p>The action specified in <code>BehaviorOnMXFailure</code> is taken when the custom MAIL FROM domain setup is in the <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code> states.</p>
  ##   Version: string (required)
  var query_603039 = newJObject()
  var formData_603040 = newJObject()
  add(formData_603040, "Identity", newJString(Identity))
  add(formData_603040, "MailFromDomain", newJString(MailFromDomain))
  add(query_603039, "Action", newJString(Action))
  add(formData_603040, "BehaviorOnMXFailure", newJString(BehaviorOnMXFailure))
  add(query_603039, "Version", newJString(Version))
  result = call_603038.call(nil, query_603039, nil, formData_603040, nil)

var postSetIdentityMailFromDomain* = Call_PostSetIdentityMailFromDomain_603022(
    name: "postSetIdentityMailFromDomain", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SetIdentityMailFromDomain",
    validator: validate_PostSetIdentityMailFromDomain_603023, base: "/",
    url: url_PostSetIdentityMailFromDomain_603024,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetIdentityMailFromDomain_603004 = ref object of OpenApiRestCall_600426
proc url_GetSetIdentityMailFromDomain_603006(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSetIdentityMailFromDomain_603005(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables the custom MAIL FROM domain setup for a verified identity (an email address or a domain).</p> <important> <p>To send emails using the specified MAIL FROM domain, you must add an MX record to your MAIL FROM domain's DNS settings. If you want your emails to pass Sender Policy Framework (SPF) checks, you must also add or update an SPF record. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-set.html">Amazon SES Developer Guide</a>.</p> </important> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : The verified identity for which you want to enable or disable the specified custom MAIL FROM domain.
  ##   BehaviorOnMXFailure: JString
  ##                      : <p>The action that you want Amazon SES to take if it cannot successfully read the required MX record when you send an email. If you choose <code>UseDefaultValue</code>, Amazon SES will use amazonses.com (or a subdomain of that) as the MAIL FROM domain. If you choose <code>RejectMessage</code>, Amazon SES will return a <code>MailFromDomainNotVerified</code> error and not send the email.</p> <p>The action specified in <code>BehaviorOnMXFailure</code> is taken when the custom MAIL FROM domain setup is in the <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code> states.</p>
  ##   MailFromDomain: JString
  ##                 : The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM domain must 1) be a subdomain of the verified identity, 2) not be used in a "From" address if the MAIL FROM domain is the destination of email feedback forwarding (for more information, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from.html">Amazon SES Developer Guide</a>), and 3) not be used to receive emails. A value of <code>null</code> disables the custom MAIL FROM setting for the identity.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_603007 = query.getOrDefault("Identity")
  valid_603007 = validateParameter(valid_603007, JString, required = true,
                                 default = nil)
  if valid_603007 != nil:
    section.add "Identity", valid_603007
  var valid_603008 = query.getOrDefault("BehaviorOnMXFailure")
  valid_603008 = validateParameter(valid_603008, JString, required = false,
                                 default = newJString("UseDefaultValue"))
  if valid_603008 != nil:
    section.add "BehaviorOnMXFailure", valid_603008
  var valid_603009 = query.getOrDefault("MailFromDomain")
  valid_603009 = validateParameter(valid_603009, JString, required = false,
                                 default = nil)
  if valid_603009 != nil:
    section.add "MailFromDomain", valid_603009
  var valid_603010 = query.getOrDefault("Action")
  valid_603010 = validateParameter(valid_603010, JString, required = true, default = newJString(
      "SetIdentityMailFromDomain"))
  if valid_603010 != nil:
    section.add "Action", valid_603010
  var valid_603011 = query.getOrDefault("Version")
  valid_603011 = validateParameter(valid_603011, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603011 != nil:
    section.add "Version", valid_603011
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603012 = header.getOrDefault("X-Amz-Date")
  valid_603012 = validateParameter(valid_603012, JString, required = false,
                                 default = nil)
  if valid_603012 != nil:
    section.add "X-Amz-Date", valid_603012
  var valid_603013 = header.getOrDefault("X-Amz-Security-Token")
  valid_603013 = validateParameter(valid_603013, JString, required = false,
                                 default = nil)
  if valid_603013 != nil:
    section.add "X-Amz-Security-Token", valid_603013
  var valid_603014 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603014 = validateParameter(valid_603014, JString, required = false,
                                 default = nil)
  if valid_603014 != nil:
    section.add "X-Amz-Content-Sha256", valid_603014
  var valid_603015 = header.getOrDefault("X-Amz-Algorithm")
  valid_603015 = validateParameter(valid_603015, JString, required = false,
                                 default = nil)
  if valid_603015 != nil:
    section.add "X-Amz-Algorithm", valid_603015
  var valid_603016 = header.getOrDefault("X-Amz-Signature")
  valid_603016 = validateParameter(valid_603016, JString, required = false,
                                 default = nil)
  if valid_603016 != nil:
    section.add "X-Amz-Signature", valid_603016
  var valid_603017 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603017 = validateParameter(valid_603017, JString, required = false,
                                 default = nil)
  if valid_603017 != nil:
    section.add "X-Amz-SignedHeaders", valid_603017
  var valid_603018 = header.getOrDefault("X-Amz-Credential")
  valid_603018 = validateParameter(valid_603018, JString, required = false,
                                 default = nil)
  if valid_603018 != nil:
    section.add "X-Amz-Credential", valid_603018
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603019: Call_GetSetIdentityMailFromDomain_603004; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Enables or disables the custom MAIL FROM domain setup for a verified identity (an email address or a domain).</p> <important> <p>To send emails using the specified MAIL FROM domain, you must add an MX record to your MAIL FROM domain's DNS settings. If you want your emails to pass Sender Policy Framework (SPF) checks, you must also add or update an SPF record. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-set.html">Amazon SES Developer Guide</a>.</p> </important> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603019.validator(path, query, header, formData, body)
  let scheme = call_603019.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603019.url(scheme.get, call_603019.host, call_603019.base,
                         call_603019.route, valid.getOrDefault("path"))
  result = hook(call_603019, url, valid)

proc call*(call_603020: Call_GetSetIdentityMailFromDomain_603004; Identity: string;
          BehaviorOnMXFailure: string = "UseDefaultValue";
          MailFromDomain: string = ""; Action: string = "SetIdentityMailFromDomain";
          Version: string = "2010-12-01"): Recallable =
  ## getSetIdentityMailFromDomain
  ## <p>Enables or disables the custom MAIL FROM domain setup for a verified identity (an email address or a domain).</p> <important> <p>To send emails using the specified MAIL FROM domain, you must add an MX record to your MAIL FROM domain's DNS settings. If you want your emails to pass Sender Policy Framework (SPF) checks, you must also add or update an SPF record. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-set.html">Amazon SES Developer Guide</a>.</p> </important> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : The verified identity for which you want to enable or disable the specified custom MAIL FROM domain.
  ##   BehaviorOnMXFailure: string
  ##                      : <p>The action that you want Amazon SES to take if it cannot successfully read the required MX record when you send an email. If you choose <code>UseDefaultValue</code>, Amazon SES will use amazonses.com (or a subdomain of that) as the MAIL FROM domain. If you choose <code>RejectMessage</code>, Amazon SES will return a <code>MailFromDomainNotVerified</code> error and not send the email.</p> <p>The action specified in <code>BehaviorOnMXFailure</code> is taken when the custom MAIL FROM domain setup is in the <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code> states.</p>
  ##   MailFromDomain: string
  ##                 : The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM domain must 1) be a subdomain of the verified identity, 2) not be used in a "From" address if the MAIL FROM domain is the destination of email feedback forwarding (for more information, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from.html">Amazon SES Developer Guide</a>), and 3) not be used to receive emails. A value of <code>null</code> disables the custom MAIL FROM setting for the identity.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603021 = newJObject()
  add(query_603021, "Identity", newJString(Identity))
  add(query_603021, "BehaviorOnMXFailure", newJString(BehaviorOnMXFailure))
  add(query_603021, "MailFromDomain", newJString(MailFromDomain))
  add(query_603021, "Action", newJString(Action))
  add(query_603021, "Version", newJString(Version))
  result = call_603020.call(nil, query_603021, nil, nil, nil)

var getSetIdentityMailFromDomain* = Call_GetSetIdentityMailFromDomain_603004(
    name: "getSetIdentityMailFromDomain", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SetIdentityMailFromDomain",
    validator: validate_GetSetIdentityMailFromDomain_603005, base: "/",
    url: url_GetSetIdentityMailFromDomain_603006,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetIdentityNotificationTopic_603059 = ref object of OpenApiRestCall_600426
proc url_PostSetIdentityNotificationTopic_603061(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSetIdentityNotificationTopic_603060(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use this operation, you specify a verified identity, such as an email address or domain. When you send an email that uses the chosen identity in the Source field, Amazon SES sends notifications to the topic you specified. You can send bounce, complaint, or delivery notifications (or any combination of the three) to the Amazon SNS topic that you specify.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about feedback notification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603062 = query.getOrDefault("Action")
  valid_603062 = validateParameter(valid_603062, JString, required = true, default = newJString(
      "SetIdentityNotificationTopic"))
  if valid_603062 != nil:
    section.add "Action", valid_603062
  var valid_603063 = query.getOrDefault("Version")
  valid_603063 = validateParameter(valid_603063, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603063 != nil:
    section.add "Version", valid_603063
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603064 = header.getOrDefault("X-Amz-Date")
  valid_603064 = validateParameter(valid_603064, JString, required = false,
                                 default = nil)
  if valid_603064 != nil:
    section.add "X-Amz-Date", valid_603064
  var valid_603065 = header.getOrDefault("X-Amz-Security-Token")
  valid_603065 = validateParameter(valid_603065, JString, required = false,
                                 default = nil)
  if valid_603065 != nil:
    section.add "X-Amz-Security-Token", valid_603065
  var valid_603066 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603066 = validateParameter(valid_603066, JString, required = false,
                                 default = nil)
  if valid_603066 != nil:
    section.add "X-Amz-Content-Sha256", valid_603066
  var valid_603067 = header.getOrDefault("X-Amz-Algorithm")
  valid_603067 = validateParameter(valid_603067, JString, required = false,
                                 default = nil)
  if valid_603067 != nil:
    section.add "X-Amz-Algorithm", valid_603067
  var valid_603068 = header.getOrDefault("X-Amz-Signature")
  valid_603068 = validateParameter(valid_603068, JString, required = false,
                                 default = nil)
  if valid_603068 != nil:
    section.add "X-Amz-Signature", valid_603068
  var valid_603069 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603069 = validateParameter(valid_603069, JString, required = false,
                                 default = nil)
  if valid_603069 != nil:
    section.add "X-Amz-SignedHeaders", valid_603069
  var valid_603070 = header.getOrDefault("X-Amz-Credential")
  valid_603070 = validateParameter(valid_603070, JString, required = false,
                                 default = nil)
  if valid_603070 != nil:
    section.add "X-Amz-Credential", valid_603070
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identity: JString (required)
  ##           : <p>The identity (email address or domain) that you want to set the Amazon SNS topic for.</p> <important> <p>You can only specify a verified identity for this parameter.</p> </important> <p>You can specify an identity by using its name or by using its Amazon Resource Name (ARN). The following examples are all valid identities: <code>sender@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p>
  ##   SnsTopic: JString
  ##           : The Amazon Resource Name (ARN) of the Amazon SNS topic. If the parameter is omitted from the request or a null value is passed, <code>SnsTopic</code> is cleared and publishing is disabled.
  ##   NotificationType: JString (required)
  ##                   : The type of notifications that will be published to the specified Amazon SNS topic.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identity` field"
  var valid_603071 = formData.getOrDefault("Identity")
  valid_603071 = validateParameter(valid_603071, JString, required = true,
                                 default = nil)
  if valid_603071 != nil:
    section.add "Identity", valid_603071
  var valid_603072 = formData.getOrDefault("SnsTopic")
  valid_603072 = validateParameter(valid_603072, JString, required = false,
                                 default = nil)
  if valid_603072 != nil:
    section.add "SnsTopic", valid_603072
  var valid_603073 = formData.getOrDefault("NotificationType")
  valid_603073 = validateParameter(valid_603073, JString, required = true,
                                 default = newJString("Bounce"))
  if valid_603073 != nil:
    section.add "NotificationType", valid_603073
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603074: Call_PostSetIdentityNotificationTopic_603059;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use this operation, you specify a verified identity, such as an email address or domain. When you send an email that uses the chosen identity in the Source field, Amazon SES sends notifications to the topic you specified. You can send bounce, complaint, or delivery notifications (or any combination of the three) to the Amazon SNS topic that you specify.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about feedback notification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_603074.validator(path, query, header, formData, body)
  let scheme = call_603074.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603074.url(scheme.get, call_603074.host, call_603074.base,
                         call_603074.route, valid.getOrDefault("path"))
  result = hook(call_603074, url, valid)

proc call*(call_603075: Call_PostSetIdentityNotificationTopic_603059;
          Identity: string; SnsTopic: string = "";
          Action: string = "SetIdentityNotificationTopic";
          NotificationType: string = "Bounce"; Version: string = "2010-12-01"): Recallable =
  ## postSetIdentityNotificationTopic
  ## <p>Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use this operation, you specify a verified identity, such as an email address or domain. When you send an email that uses the chosen identity in the Source field, Amazon SES sends notifications to the topic you specified. You can send bounce, complaint, or delivery notifications (or any combination of the three) to the Amazon SNS topic that you specify.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about feedback notification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Identity: string (required)
  ##           : <p>The identity (email address or domain) that you want to set the Amazon SNS topic for.</p> <important> <p>You can only specify a verified identity for this parameter.</p> </important> <p>You can specify an identity by using its name or by using its Amazon Resource Name (ARN). The following examples are all valid identities: <code>sender@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p>
  ##   SnsTopic: string
  ##           : The Amazon Resource Name (ARN) of the Amazon SNS topic. If the parameter is omitted from the request or a null value is passed, <code>SnsTopic</code> is cleared and publishing is disabled.
  ##   Action: string (required)
  ##   NotificationType: string (required)
  ##                   : The type of notifications that will be published to the specified Amazon SNS topic.
  ##   Version: string (required)
  var query_603076 = newJObject()
  var formData_603077 = newJObject()
  add(formData_603077, "Identity", newJString(Identity))
  add(formData_603077, "SnsTopic", newJString(SnsTopic))
  add(query_603076, "Action", newJString(Action))
  add(formData_603077, "NotificationType", newJString(NotificationType))
  add(query_603076, "Version", newJString(Version))
  result = call_603075.call(nil, query_603076, nil, formData_603077, nil)

var postSetIdentityNotificationTopic* = Call_PostSetIdentityNotificationTopic_603059(
    name: "postSetIdentityNotificationTopic", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SetIdentityNotificationTopic",
    validator: validate_PostSetIdentityNotificationTopic_603060, base: "/",
    url: url_PostSetIdentityNotificationTopic_603061,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetIdentityNotificationTopic_603041 = ref object of OpenApiRestCall_600426
proc url_GetSetIdentityNotificationTopic_603043(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSetIdentityNotificationTopic_603042(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use this operation, you specify a verified identity, such as an email address or domain. When you send an email that uses the chosen identity in the Source field, Amazon SES sends notifications to the topic you specified. You can send bounce, complaint, or delivery notifications (or any combination of the three) to the Amazon SNS topic that you specify.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about feedback notification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : <p>The identity (email address or domain) that you want to set the Amazon SNS topic for.</p> <important> <p>You can only specify a verified identity for this parameter.</p> </important> <p>You can specify an identity by using its name or by using its Amazon Resource Name (ARN). The following examples are all valid identities: <code>sender@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p>
  ##   Action: JString (required)
  ##   NotificationType: JString (required)
  ##                   : The type of notifications that will be published to the specified Amazon SNS topic.
  ##   Version: JString (required)
  ##   SnsTopic: JString
  ##           : The Amazon Resource Name (ARN) of the Amazon SNS topic. If the parameter is omitted from the request or a null value is passed, <code>SnsTopic</code> is cleared and publishing is disabled.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_603044 = query.getOrDefault("Identity")
  valid_603044 = validateParameter(valid_603044, JString, required = true,
                                 default = nil)
  if valid_603044 != nil:
    section.add "Identity", valid_603044
  var valid_603045 = query.getOrDefault("Action")
  valid_603045 = validateParameter(valid_603045, JString, required = true, default = newJString(
      "SetIdentityNotificationTopic"))
  if valid_603045 != nil:
    section.add "Action", valid_603045
  var valid_603046 = query.getOrDefault("NotificationType")
  valid_603046 = validateParameter(valid_603046, JString, required = true,
                                 default = newJString("Bounce"))
  if valid_603046 != nil:
    section.add "NotificationType", valid_603046
  var valid_603047 = query.getOrDefault("Version")
  valid_603047 = validateParameter(valid_603047, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603047 != nil:
    section.add "Version", valid_603047
  var valid_603048 = query.getOrDefault("SnsTopic")
  valid_603048 = validateParameter(valid_603048, JString, required = false,
                                 default = nil)
  if valid_603048 != nil:
    section.add "SnsTopic", valid_603048
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603049 = header.getOrDefault("X-Amz-Date")
  valid_603049 = validateParameter(valid_603049, JString, required = false,
                                 default = nil)
  if valid_603049 != nil:
    section.add "X-Amz-Date", valid_603049
  var valid_603050 = header.getOrDefault("X-Amz-Security-Token")
  valid_603050 = validateParameter(valid_603050, JString, required = false,
                                 default = nil)
  if valid_603050 != nil:
    section.add "X-Amz-Security-Token", valid_603050
  var valid_603051 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603051 = validateParameter(valid_603051, JString, required = false,
                                 default = nil)
  if valid_603051 != nil:
    section.add "X-Amz-Content-Sha256", valid_603051
  var valid_603052 = header.getOrDefault("X-Amz-Algorithm")
  valid_603052 = validateParameter(valid_603052, JString, required = false,
                                 default = nil)
  if valid_603052 != nil:
    section.add "X-Amz-Algorithm", valid_603052
  var valid_603053 = header.getOrDefault("X-Amz-Signature")
  valid_603053 = validateParameter(valid_603053, JString, required = false,
                                 default = nil)
  if valid_603053 != nil:
    section.add "X-Amz-Signature", valid_603053
  var valid_603054 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603054 = validateParameter(valid_603054, JString, required = false,
                                 default = nil)
  if valid_603054 != nil:
    section.add "X-Amz-SignedHeaders", valid_603054
  var valid_603055 = header.getOrDefault("X-Amz-Credential")
  valid_603055 = validateParameter(valid_603055, JString, required = false,
                                 default = nil)
  if valid_603055 != nil:
    section.add "X-Amz-Credential", valid_603055
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603056: Call_GetSetIdentityNotificationTopic_603041;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use this operation, you specify a verified identity, such as an email address or domain. When you send an email that uses the chosen identity in the Source field, Amazon SES sends notifications to the topic you specified. You can send bounce, complaint, or delivery notifications (or any combination of the three) to the Amazon SNS topic that you specify.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about feedback notification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_603056.validator(path, query, header, formData, body)
  let scheme = call_603056.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603056.url(scheme.get, call_603056.host, call_603056.base,
                         call_603056.route, valid.getOrDefault("path"))
  result = hook(call_603056, url, valid)

proc call*(call_603057: Call_GetSetIdentityNotificationTopic_603041;
          Identity: string; Action: string = "SetIdentityNotificationTopic";
          NotificationType: string = "Bounce"; Version: string = "2010-12-01";
          SnsTopic: string = ""): Recallable =
  ## getSetIdentityNotificationTopic
  ## <p>Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use this operation, you specify a verified identity, such as an email address or domain. When you send an email that uses the chosen identity in the Source field, Amazon SES sends notifications to the topic you specified. You can send bounce, complaint, or delivery notifications (or any combination of the three) to the Amazon SNS topic that you specify.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about feedback notification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Identity: string (required)
  ##           : <p>The identity (email address or domain) that you want to set the Amazon SNS topic for.</p> <important> <p>You can only specify a verified identity for this parameter.</p> </important> <p>You can specify an identity by using its name or by using its Amazon Resource Name (ARN). The following examples are all valid identities: <code>sender@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p>
  ##   Action: string (required)
  ##   NotificationType: string (required)
  ##                   : The type of notifications that will be published to the specified Amazon SNS topic.
  ##   Version: string (required)
  ##   SnsTopic: string
  ##           : The Amazon Resource Name (ARN) of the Amazon SNS topic. If the parameter is omitted from the request or a null value is passed, <code>SnsTopic</code> is cleared and publishing is disabled.
  var query_603058 = newJObject()
  add(query_603058, "Identity", newJString(Identity))
  add(query_603058, "Action", newJString(Action))
  add(query_603058, "NotificationType", newJString(NotificationType))
  add(query_603058, "Version", newJString(Version))
  add(query_603058, "SnsTopic", newJString(SnsTopic))
  result = call_603057.call(nil, query_603058, nil, nil, nil)

var getSetIdentityNotificationTopic* = Call_GetSetIdentityNotificationTopic_603041(
    name: "getSetIdentityNotificationTopic", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SetIdentityNotificationTopic",
    validator: validate_GetSetIdentityNotificationTopic_603042, base: "/",
    url: url_GetSetIdentityNotificationTopic_603043,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetReceiptRulePosition_603096 = ref object of OpenApiRestCall_600426
proc url_PostSetReceiptRulePosition_603098(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSetReceiptRulePosition_603097(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the position of the specified receipt rule in the receipt rule set.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603099 = query.getOrDefault("Action")
  valid_603099 = validateParameter(valid_603099, JString, required = true,
                                 default = newJString("SetReceiptRulePosition"))
  if valid_603099 != nil:
    section.add "Action", valid_603099
  var valid_603100 = query.getOrDefault("Version")
  valid_603100 = validateParameter(valid_603100, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603100 != nil:
    section.add "Version", valid_603100
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603101 = header.getOrDefault("X-Amz-Date")
  valid_603101 = validateParameter(valid_603101, JString, required = false,
                                 default = nil)
  if valid_603101 != nil:
    section.add "X-Amz-Date", valid_603101
  var valid_603102 = header.getOrDefault("X-Amz-Security-Token")
  valid_603102 = validateParameter(valid_603102, JString, required = false,
                                 default = nil)
  if valid_603102 != nil:
    section.add "X-Amz-Security-Token", valid_603102
  var valid_603103 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603103 = validateParameter(valid_603103, JString, required = false,
                                 default = nil)
  if valid_603103 != nil:
    section.add "X-Amz-Content-Sha256", valid_603103
  var valid_603104 = header.getOrDefault("X-Amz-Algorithm")
  valid_603104 = validateParameter(valid_603104, JString, required = false,
                                 default = nil)
  if valid_603104 != nil:
    section.add "X-Amz-Algorithm", valid_603104
  var valid_603105 = header.getOrDefault("X-Amz-Signature")
  valid_603105 = validateParameter(valid_603105, JString, required = false,
                                 default = nil)
  if valid_603105 != nil:
    section.add "X-Amz-Signature", valid_603105
  var valid_603106 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603106 = validateParameter(valid_603106, JString, required = false,
                                 default = nil)
  if valid_603106 != nil:
    section.add "X-Amz-SignedHeaders", valid_603106
  var valid_603107 = header.getOrDefault("X-Amz-Credential")
  valid_603107 = validateParameter(valid_603107, JString, required = false,
                                 default = nil)
  if valid_603107 != nil:
    section.add "X-Amz-Credential", valid_603107
  result.add "header", section
  ## parameters in `formData` object:
  ##   After: JString
  ##        : The name of the receipt rule after which to place the specified receipt rule.
  ##   RuleName: JString (required)
  ##           : The name of the receipt rule to reposition.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that contains the receipt rule to reposition.
  section = newJObject()
  var valid_603108 = formData.getOrDefault("After")
  valid_603108 = validateParameter(valid_603108, JString, required = false,
                                 default = nil)
  if valid_603108 != nil:
    section.add "After", valid_603108
  assert formData != nil,
        "formData argument is necessary due to required `RuleName` field"
  var valid_603109 = formData.getOrDefault("RuleName")
  valid_603109 = validateParameter(valid_603109, JString, required = true,
                                 default = nil)
  if valid_603109 != nil:
    section.add "RuleName", valid_603109
  var valid_603110 = formData.getOrDefault("RuleSetName")
  valid_603110 = validateParameter(valid_603110, JString, required = true,
                                 default = nil)
  if valid_603110 != nil:
    section.add "RuleSetName", valid_603110
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603111: Call_PostSetReceiptRulePosition_603096; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the position of the specified receipt rule in the receipt rule set.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603111.validator(path, query, header, formData, body)
  let scheme = call_603111.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603111.url(scheme.get, call_603111.host, call_603111.base,
                         call_603111.route, valid.getOrDefault("path"))
  result = hook(call_603111, url, valid)

proc call*(call_603112: Call_PostSetReceiptRulePosition_603096; RuleName: string;
          RuleSetName: string; After: string = "";
          Action: string = "SetReceiptRulePosition"; Version: string = "2010-12-01"): Recallable =
  ## postSetReceiptRulePosition
  ## <p>Sets the position of the specified receipt rule in the receipt rule set.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   After: string
  ##        : The name of the receipt rule after which to place the specified receipt rule.
  ##   RuleName: string (required)
  ##           : The name of the receipt rule to reposition.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that contains the receipt rule to reposition.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603113 = newJObject()
  var formData_603114 = newJObject()
  add(formData_603114, "After", newJString(After))
  add(formData_603114, "RuleName", newJString(RuleName))
  add(formData_603114, "RuleSetName", newJString(RuleSetName))
  add(query_603113, "Action", newJString(Action))
  add(query_603113, "Version", newJString(Version))
  result = call_603112.call(nil, query_603113, nil, formData_603114, nil)

var postSetReceiptRulePosition* = Call_PostSetReceiptRulePosition_603096(
    name: "postSetReceiptRulePosition", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SetReceiptRulePosition",
    validator: validate_PostSetReceiptRulePosition_603097, base: "/",
    url: url_PostSetReceiptRulePosition_603098,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetReceiptRulePosition_603078 = ref object of OpenApiRestCall_600426
proc url_GetSetReceiptRulePosition_603080(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSetReceiptRulePosition_603079(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the position of the specified receipt rule in the receipt rule set.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleName: JString (required)
  ##           : The name of the receipt rule to reposition.
  ##   After: JString
  ##        : The name of the receipt rule after which to place the specified receipt rule.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that contains the receipt rule to reposition.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleName` field"
  var valid_603081 = query.getOrDefault("RuleName")
  valid_603081 = validateParameter(valid_603081, JString, required = true,
                                 default = nil)
  if valid_603081 != nil:
    section.add "RuleName", valid_603081
  var valid_603082 = query.getOrDefault("After")
  valid_603082 = validateParameter(valid_603082, JString, required = false,
                                 default = nil)
  if valid_603082 != nil:
    section.add "After", valid_603082
  var valid_603083 = query.getOrDefault("RuleSetName")
  valid_603083 = validateParameter(valid_603083, JString, required = true,
                                 default = nil)
  if valid_603083 != nil:
    section.add "RuleSetName", valid_603083
  var valid_603084 = query.getOrDefault("Action")
  valid_603084 = validateParameter(valid_603084, JString, required = true,
                                 default = newJString("SetReceiptRulePosition"))
  if valid_603084 != nil:
    section.add "Action", valid_603084
  var valid_603085 = query.getOrDefault("Version")
  valid_603085 = validateParameter(valid_603085, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603085 != nil:
    section.add "Version", valid_603085
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603086 = header.getOrDefault("X-Amz-Date")
  valid_603086 = validateParameter(valid_603086, JString, required = false,
                                 default = nil)
  if valid_603086 != nil:
    section.add "X-Amz-Date", valid_603086
  var valid_603087 = header.getOrDefault("X-Amz-Security-Token")
  valid_603087 = validateParameter(valid_603087, JString, required = false,
                                 default = nil)
  if valid_603087 != nil:
    section.add "X-Amz-Security-Token", valid_603087
  var valid_603088 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603088 = validateParameter(valid_603088, JString, required = false,
                                 default = nil)
  if valid_603088 != nil:
    section.add "X-Amz-Content-Sha256", valid_603088
  var valid_603089 = header.getOrDefault("X-Amz-Algorithm")
  valid_603089 = validateParameter(valid_603089, JString, required = false,
                                 default = nil)
  if valid_603089 != nil:
    section.add "X-Amz-Algorithm", valid_603089
  var valid_603090 = header.getOrDefault("X-Amz-Signature")
  valid_603090 = validateParameter(valid_603090, JString, required = false,
                                 default = nil)
  if valid_603090 != nil:
    section.add "X-Amz-Signature", valid_603090
  var valid_603091 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603091 = validateParameter(valid_603091, JString, required = false,
                                 default = nil)
  if valid_603091 != nil:
    section.add "X-Amz-SignedHeaders", valid_603091
  var valid_603092 = header.getOrDefault("X-Amz-Credential")
  valid_603092 = validateParameter(valid_603092, JString, required = false,
                                 default = nil)
  if valid_603092 != nil:
    section.add "X-Amz-Credential", valid_603092
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603093: Call_GetSetReceiptRulePosition_603078; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the position of the specified receipt rule in the receipt rule set.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603093.validator(path, query, header, formData, body)
  let scheme = call_603093.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603093.url(scheme.get, call_603093.host, call_603093.base,
                         call_603093.route, valid.getOrDefault("path"))
  result = hook(call_603093, url, valid)

proc call*(call_603094: Call_GetSetReceiptRulePosition_603078; RuleName: string;
          RuleSetName: string; After: string = "";
          Action: string = "SetReceiptRulePosition"; Version: string = "2010-12-01"): Recallable =
  ## getSetReceiptRulePosition
  ## <p>Sets the position of the specified receipt rule in the receipt rule set.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleName: string (required)
  ##           : The name of the receipt rule to reposition.
  ##   After: string
  ##        : The name of the receipt rule after which to place the specified receipt rule.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that contains the receipt rule to reposition.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603095 = newJObject()
  add(query_603095, "RuleName", newJString(RuleName))
  add(query_603095, "After", newJString(After))
  add(query_603095, "RuleSetName", newJString(RuleSetName))
  add(query_603095, "Action", newJString(Action))
  add(query_603095, "Version", newJString(Version))
  result = call_603094.call(nil, query_603095, nil, nil, nil)

var getSetReceiptRulePosition* = Call_GetSetReceiptRulePosition_603078(
    name: "getSetReceiptRulePosition", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SetReceiptRulePosition",
    validator: validate_GetSetReceiptRulePosition_603079, base: "/",
    url: url_GetSetReceiptRulePosition_603080,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostTestRenderTemplate_603132 = ref object of OpenApiRestCall_600426
proc url_PostTestRenderTemplate_603134(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostTestRenderTemplate_603133(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a preview of the MIME content of an email when provided with a template and a set of replacement data.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603135 = query.getOrDefault("Action")
  valid_603135 = validateParameter(valid_603135, JString, required = true,
                                 default = newJString("TestRenderTemplate"))
  if valid_603135 != nil:
    section.add "Action", valid_603135
  var valid_603136 = query.getOrDefault("Version")
  valid_603136 = validateParameter(valid_603136, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603136 != nil:
    section.add "Version", valid_603136
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603137 = header.getOrDefault("X-Amz-Date")
  valid_603137 = validateParameter(valid_603137, JString, required = false,
                                 default = nil)
  if valid_603137 != nil:
    section.add "X-Amz-Date", valid_603137
  var valid_603138 = header.getOrDefault("X-Amz-Security-Token")
  valid_603138 = validateParameter(valid_603138, JString, required = false,
                                 default = nil)
  if valid_603138 != nil:
    section.add "X-Amz-Security-Token", valid_603138
  var valid_603139 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603139 = validateParameter(valid_603139, JString, required = false,
                                 default = nil)
  if valid_603139 != nil:
    section.add "X-Amz-Content-Sha256", valid_603139
  var valid_603140 = header.getOrDefault("X-Amz-Algorithm")
  valid_603140 = validateParameter(valid_603140, JString, required = false,
                                 default = nil)
  if valid_603140 != nil:
    section.add "X-Amz-Algorithm", valid_603140
  var valid_603141 = header.getOrDefault("X-Amz-Signature")
  valid_603141 = validateParameter(valid_603141, JString, required = false,
                                 default = nil)
  if valid_603141 != nil:
    section.add "X-Amz-Signature", valid_603141
  var valid_603142 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603142 = validateParameter(valid_603142, JString, required = false,
                                 default = nil)
  if valid_603142 != nil:
    section.add "X-Amz-SignedHeaders", valid_603142
  var valid_603143 = header.getOrDefault("X-Amz-Credential")
  valid_603143 = validateParameter(valid_603143, JString, required = false,
                                 default = nil)
  if valid_603143 != nil:
    section.add "X-Amz-Credential", valid_603143
  result.add "header", section
  ## parameters in `formData` object:
  ##   TemplateData: JString (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   TemplateName: JString (required)
  ##               : The name of the template that you want to render.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TemplateData` field"
  var valid_603144 = formData.getOrDefault("TemplateData")
  valid_603144 = validateParameter(valid_603144, JString, required = true,
                                 default = nil)
  if valid_603144 != nil:
    section.add "TemplateData", valid_603144
  var valid_603145 = formData.getOrDefault("TemplateName")
  valid_603145 = validateParameter(valid_603145, JString, required = true,
                                 default = nil)
  if valid_603145 != nil:
    section.add "TemplateName", valid_603145
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603146: Call_PostTestRenderTemplate_603132; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a preview of the MIME content of an email when provided with a template and a set of replacement data.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603146.validator(path, query, header, formData, body)
  let scheme = call_603146.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603146.url(scheme.get, call_603146.host, call_603146.base,
                         call_603146.route, valid.getOrDefault("path"))
  result = hook(call_603146, url, valid)

proc call*(call_603147: Call_PostTestRenderTemplate_603132; TemplateData: string;
          TemplateName: string; Action: string = "TestRenderTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## postTestRenderTemplate
  ## <p>Creates a preview of the MIME content of an email when provided with a template and a set of replacement data.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateData: string (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the template that you want to render.
  ##   Version: string (required)
  var query_603148 = newJObject()
  var formData_603149 = newJObject()
  add(formData_603149, "TemplateData", newJString(TemplateData))
  add(query_603148, "Action", newJString(Action))
  add(formData_603149, "TemplateName", newJString(TemplateName))
  add(query_603148, "Version", newJString(Version))
  result = call_603147.call(nil, query_603148, nil, formData_603149, nil)

var postTestRenderTemplate* = Call_PostTestRenderTemplate_603132(
    name: "postTestRenderTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=TestRenderTemplate",
    validator: validate_PostTestRenderTemplate_603133, base: "/",
    url: url_PostTestRenderTemplate_603134, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTestRenderTemplate_603115 = ref object of OpenApiRestCall_600426
proc url_GetTestRenderTemplate_603117(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetTestRenderTemplate_603116(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a preview of the MIME content of an email when provided with a template and a set of replacement data.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TemplateData: JString (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   Action: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the template that you want to render.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `TemplateData` field"
  var valid_603118 = query.getOrDefault("TemplateData")
  valid_603118 = validateParameter(valid_603118, JString, required = true,
                                 default = nil)
  if valid_603118 != nil:
    section.add "TemplateData", valid_603118
  var valid_603119 = query.getOrDefault("Action")
  valid_603119 = validateParameter(valid_603119, JString, required = true,
                                 default = newJString("TestRenderTemplate"))
  if valid_603119 != nil:
    section.add "Action", valid_603119
  var valid_603120 = query.getOrDefault("TemplateName")
  valid_603120 = validateParameter(valid_603120, JString, required = true,
                                 default = nil)
  if valid_603120 != nil:
    section.add "TemplateName", valid_603120
  var valid_603121 = query.getOrDefault("Version")
  valid_603121 = validateParameter(valid_603121, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603121 != nil:
    section.add "Version", valid_603121
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603122 = header.getOrDefault("X-Amz-Date")
  valid_603122 = validateParameter(valid_603122, JString, required = false,
                                 default = nil)
  if valid_603122 != nil:
    section.add "X-Amz-Date", valid_603122
  var valid_603123 = header.getOrDefault("X-Amz-Security-Token")
  valid_603123 = validateParameter(valid_603123, JString, required = false,
                                 default = nil)
  if valid_603123 != nil:
    section.add "X-Amz-Security-Token", valid_603123
  var valid_603124 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603124 = validateParameter(valid_603124, JString, required = false,
                                 default = nil)
  if valid_603124 != nil:
    section.add "X-Amz-Content-Sha256", valid_603124
  var valid_603125 = header.getOrDefault("X-Amz-Algorithm")
  valid_603125 = validateParameter(valid_603125, JString, required = false,
                                 default = nil)
  if valid_603125 != nil:
    section.add "X-Amz-Algorithm", valid_603125
  var valid_603126 = header.getOrDefault("X-Amz-Signature")
  valid_603126 = validateParameter(valid_603126, JString, required = false,
                                 default = nil)
  if valid_603126 != nil:
    section.add "X-Amz-Signature", valid_603126
  var valid_603127 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603127 = validateParameter(valid_603127, JString, required = false,
                                 default = nil)
  if valid_603127 != nil:
    section.add "X-Amz-SignedHeaders", valid_603127
  var valid_603128 = header.getOrDefault("X-Amz-Credential")
  valid_603128 = validateParameter(valid_603128, JString, required = false,
                                 default = nil)
  if valid_603128 != nil:
    section.add "X-Amz-Credential", valid_603128
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603129: Call_GetTestRenderTemplate_603115; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a preview of the MIME content of an email when provided with a template and a set of replacement data.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603129.validator(path, query, header, formData, body)
  let scheme = call_603129.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603129.url(scheme.get, call_603129.host, call_603129.base,
                         call_603129.route, valid.getOrDefault("path"))
  result = hook(call_603129, url, valid)

proc call*(call_603130: Call_GetTestRenderTemplate_603115; TemplateData: string;
          TemplateName: string; Action: string = "TestRenderTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## getTestRenderTemplate
  ## <p>Creates a preview of the MIME content of an email when provided with a template and a set of replacement data.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateData: string (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the template that you want to render.
  ##   Version: string (required)
  var query_603131 = newJObject()
  add(query_603131, "TemplateData", newJString(TemplateData))
  add(query_603131, "Action", newJString(Action))
  add(query_603131, "TemplateName", newJString(TemplateName))
  add(query_603131, "Version", newJString(Version))
  result = call_603130.call(nil, query_603131, nil, nil, nil)

var getTestRenderTemplate* = Call_GetTestRenderTemplate_603115(
    name: "getTestRenderTemplate", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=TestRenderTemplate",
    validator: validate_GetTestRenderTemplate_603116, base: "/",
    url: url_GetTestRenderTemplate_603117, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateAccountSendingEnabled_603166 = ref object of OpenApiRestCall_600426
proc url_PostUpdateAccountSendingEnabled_603168(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateAccountSendingEnabled_603167(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables email sending across your entire Amazon SES account in the current AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending across your Amazon SES account in a given AWS Region when reputation metrics (such as your bounce or complaint rates) reach certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603169 = query.getOrDefault("Action")
  valid_603169 = validateParameter(valid_603169, JString, required = true, default = newJString(
      "UpdateAccountSendingEnabled"))
  if valid_603169 != nil:
    section.add "Action", valid_603169
  var valid_603170 = query.getOrDefault("Version")
  valid_603170 = validateParameter(valid_603170, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603170 != nil:
    section.add "Version", valid_603170
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603171 = header.getOrDefault("X-Amz-Date")
  valid_603171 = validateParameter(valid_603171, JString, required = false,
                                 default = nil)
  if valid_603171 != nil:
    section.add "X-Amz-Date", valid_603171
  var valid_603172 = header.getOrDefault("X-Amz-Security-Token")
  valid_603172 = validateParameter(valid_603172, JString, required = false,
                                 default = nil)
  if valid_603172 != nil:
    section.add "X-Amz-Security-Token", valid_603172
  var valid_603173 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603173 = validateParameter(valid_603173, JString, required = false,
                                 default = nil)
  if valid_603173 != nil:
    section.add "X-Amz-Content-Sha256", valid_603173
  var valid_603174 = header.getOrDefault("X-Amz-Algorithm")
  valid_603174 = validateParameter(valid_603174, JString, required = false,
                                 default = nil)
  if valid_603174 != nil:
    section.add "X-Amz-Algorithm", valid_603174
  var valid_603175 = header.getOrDefault("X-Amz-Signature")
  valid_603175 = validateParameter(valid_603175, JString, required = false,
                                 default = nil)
  if valid_603175 != nil:
    section.add "X-Amz-Signature", valid_603175
  var valid_603176 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603176 = validateParameter(valid_603176, JString, required = false,
                                 default = nil)
  if valid_603176 != nil:
    section.add "X-Amz-SignedHeaders", valid_603176
  var valid_603177 = header.getOrDefault("X-Amz-Credential")
  valid_603177 = validateParameter(valid_603177, JString, required = false,
                                 default = nil)
  if valid_603177 != nil:
    section.add "X-Amz-Credential", valid_603177
  result.add "header", section
  ## parameters in `formData` object:
  ##   Enabled: JBool
  ##          : Describes whether email sending is enabled or disabled for your Amazon SES account in the current AWS Region.
  section = newJObject()
  var valid_603178 = formData.getOrDefault("Enabled")
  valid_603178 = validateParameter(valid_603178, JBool, required = false, default = nil)
  if valid_603178 != nil:
    section.add "Enabled", valid_603178
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603179: Call_PostUpdateAccountSendingEnabled_603166;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables or disables email sending across your entire Amazon SES account in the current AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending across your Amazon SES account in a given AWS Region when reputation metrics (such as your bounce or complaint rates) reach certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603179.validator(path, query, header, formData, body)
  let scheme = call_603179.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603179.url(scheme.get, call_603179.host, call_603179.base,
                         call_603179.route, valid.getOrDefault("path"))
  result = hook(call_603179, url, valid)

proc call*(call_603180: Call_PostUpdateAccountSendingEnabled_603166;
          Enabled: bool = false; Action: string = "UpdateAccountSendingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## postUpdateAccountSendingEnabled
  ## <p>Enables or disables email sending across your entire Amazon SES account in the current AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending across your Amazon SES account in a given AWS Region when reputation metrics (such as your bounce or complaint rates) reach certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Enabled: bool
  ##          : Describes whether email sending is enabled or disabled for your Amazon SES account in the current AWS Region.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603181 = newJObject()
  var formData_603182 = newJObject()
  add(formData_603182, "Enabled", newJBool(Enabled))
  add(query_603181, "Action", newJString(Action))
  add(query_603181, "Version", newJString(Version))
  result = call_603180.call(nil, query_603181, nil, formData_603182, nil)

var postUpdateAccountSendingEnabled* = Call_PostUpdateAccountSendingEnabled_603166(
    name: "postUpdateAccountSendingEnabled", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=UpdateAccountSendingEnabled",
    validator: validate_PostUpdateAccountSendingEnabled_603167, base: "/",
    url: url_PostUpdateAccountSendingEnabled_603168,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateAccountSendingEnabled_603150 = ref object of OpenApiRestCall_600426
proc url_GetUpdateAccountSendingEnabled_603152(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateAccountSendingEnabled_603151(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables email sending across your entire Amazon SES account in the current AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending across your Amazon SES account in a given AWS Region when reputation metrics (such as your bounce or complaint rates) reach certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Enabled: JBool
  ##          : Describes whether email sending is enabled or disabled for your Amazon SES account in the current AWS Region.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_603153 = query.getOrDefault("Enabled")
  valid_603153 = validateParameter(valid_603153, JBool, required = false, default = nil)
  if valid_603153 != nil:
    section.add "Enabled", valid_603153
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603154 = query.getOrDefault("Action")
  valid_603154 = validateParameter(valid_603154, JString, required = true, default = newJString(
      "UpdateAccountSendingEnabled"))
  if valid_603154 != nil:
    section.add "Action", valid_603154
  var valid_603155 = query.getOrDefault("Version")
  valid_603155 = validateParameter(valid_603155, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603155 != nil:
    section.add "Version", valid_603155
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603156 = header.getOrDefault("X-Amz-Date")
  valid_603156 = validateParameter(valid_603156, JString, required = false,
                                 default = nil)
  if valid_603156 != nil:
    section.add "X-Amz-Date", valid_603156
  var valid_603157 = header.getOrDefault("X-Amz-Security-Token")
  valid_603157 = validateParameter(valid_603157, JString, required = false,
                                 default = nil)
  if valid_603157 != nil:
    section.add "X-Amz-Security-Token", valid_603157
  var valid_603158 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603158 = validateParameter(valid_603158, JString, required = false,
                                 default = nil)
  if valid_603158 != nil:
    section.add "X-Amz-Content-Sha256", valid_603158
  var valid_603159 = header.getOrDefault("X-Amz-Algorithm")
  valid_603159 = validateParameter(valid_603159, JString, required = false,
                                 default = nil)
  if valid_603159 != nil:
    section.add "X-Amz-Algorithm", valid_603159
  var valid_603160 = header.getOrDefault("X-Amz-Signature")
  valid_603160 = validateParameter(valid_603160, JString, required = false,
                                 default = nil)
  if valid_603160 != nil:
    section.add "X-Amz-Signature", valid_603160
  var valid_603161 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603161 = validateParameter(valid_603161, JString, required = false,
                                 default = nil)
  if valid_603161 != nil:
    section.add "X-Amz-SignedHeaders", valid_603161
  var valid_603162 = header.getOrDefault("X-Amz-Credential")
  valid_603162 = validateParameter(valid_603162, JString, required = false,
                                 default = nil)
  if valid_603162 != nil:
    section.add "X-Amz-Credential", valid_603162
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603163: Call_GetUpdateAccountSendingEnabled_603150; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Enables or disables email sending across your entire Amazon SES account in the current AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending across your Amazon SES account in a given AWS Region when reputation metrics (such as your bounce or complaint rates) reach certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603163.validator(path, query, header, formData, body)
  let scheme = call_603163.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603163.url(scheme.get, call_603163.host, call_603163.base,
                         call_603163.route, valid.getOrDefault("path"))
  result = hook(call_603163, url, valid)

proc call*(call_603164: Call_GetUpdateAccountSendingEnabled_603150;
          Enabled: bool = false; Action: string = "UpdateAccountSendingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## getUpdateAccountSendingEnabled
  ## <p>Enables or disables email sending across your entire Amazon SES account in the current AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending across your Amazon SES account in a given AWS Region when reputation metrics (such as your bounce or complaint rates) reach certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Enabled: bool
  ##          : Describes whether email sending is enabled or disabled for your Amazon SES account in the current AWS Region.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603165 = newJObject()
  add(query_603165, "Enabled", newJBool(Enabled))
  add(query_603165, "Action", newJString(Action))
  add(query_603165, "Version", newJString(Version))
  result = call_603164.call(nil, query_603165, nil, nil, nil)

var getUpdateAccountSendingEnabled* = Call_GetUpdateAccountSendingEnabled_603150(
    name: "getUpdateAccountSendingEnabled", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=UpdateAccountSendingEnabled",
    validator: validate_GetUpdateAccountSendingEnabled_603151, base: "/",
    url: url_GetUpdateAccountSendingEnabled_603152,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateConfigurationSetEventDestination_603205 = ref object of OpenApiRestCall_600426
proc url_PostUpdateConfigurationSetEventDestination_603207(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateConfigurationSetEventDestination_603206(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the event destination of a configuration set. Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603208 = query.getOrDefault("Action")
  valid_603208 = validateParameter(valid_603208, JString, required = true, default = newJString(
      "UpdateConfigurationSetEventDestination"))
  if valid_603208 != nil:
    section.add "Action", valid_603208
  var valid_603209 = query.getOrDefault("Version")
  valid_603209 = validateParameter(valid_603209, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603209 != nil:
    section.add "Version", valid_603209
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603210 = header.getOrDefault("X-Amz-Date")
  valid_603210 = validateParameter(valid_603210, JString, required = false,
                                 default = nil)
  if valid_603210 != nil:
    section.add "X-Amz-Date", valid_603210
  var valid_603211 = header.getOrDefault("X-Amz-Security-Token")
  valid_603211 = validateParameter(valid_603211, JString, required = false,
                                 default = nil)
  if valid_603211 != nil:
    section.add "X-Amz-Security-Token", valid_603211
  var valid_603212 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603212 = validateParameter(valid_603212, JString, required = false,
                                 default = nil)
  if valid_603212 != nil:
    section.add "X-Amz-Content-Sha256", valid_603212
  var valid_603213 = header.getOrDefault("X-Amz-Algorithm")
  valid_603213 = validateParameter(valid_603213, JString, required = false,
                                 default = nil)
  if valid_603213 != nil:
    section.add "X-Amz-Algorithm", valid_603213
  var valid_603214 = header.getOrDefault("X-Amz-Signature")
  valid_603214 = validateParameter(valid_603214, JString, required = false,
                                 default = nil)
  if valid_603214 != nil:
    section.add "X-Amz-Signature", valid_603214
  var valid_603215 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603215 = validateParameter(valid_603215, JString, required = false,
                                 default = nil)
  if valid_603215 != nil:
    section.add "X-Amz-SignedHeaders", valid_603215
  var valid_603216 = header.getOrDefault("X-Amz-Credential")
  valid_603216 = validateParameter(valid_603216, JString, required = false,
                                 default = nil)
  if valid_603216 != nil:
    section.add "X-Amz-Credential", valid_603216
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that contains the event destination that you want to update.
  ##   EventDestination.Name: JString
  ##                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestination.CloudWatchDestination: JString
  ##                                         : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   EventDestination.MatchingEventTypes: JArray
  ##                                      : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   EventDestination.KinesisFirehoseDestination: JString
  ##                                              : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   EventDestination.Enabled: JString
  ##                           : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestination.SNSDestination: JString
  ##                                  : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_603217 = formData.getOrDefault("ConfigurationSetName")
  valid_603217 = validateParameter(valid_603217, JString, required = true,
                                 default = nil)
  if valid_603217 != nil:
    section.add "ConfigurationSetName", valid_603217
  var valid_603218 = formData.getOrDefault("EventDestination.Name")
  valid_603218 = validateParameter(valid_603218, JString, required = false,
                                 default = nil)
  if valid_603218 != nil:
    section.add "EventDestination.Name", valid_603218
  var valid_603219 = formData.getOrDefault("EventDestination.CloudWatchDestination")
  valid_603219 = validateParameter(valid_603219, JString, required = false,
                                 default = nil)
  if valid_603219 != nil:
    section.add "EventDestination.CloudWatchDestination", valid_603219
  var valid_603220 = formData.getOrDefault("EventDestination.MatchingEventTypes")
  valid_603220 = validateParameter(valid_603220, JArray, required = false,
                                 default = nil)
  if valid_603220 != nil:
    section.add "EventDestination.MatchingEventTypes", valid_603220
  var valid_603221 = formData.getOrDefault("EventDestination.KinesisFirehoseDestination")
  valid_603221 = validateParameter(valid_603221, JString, required = false,
                                 default = nil)
  if valid_603221 != nil:
    section.add "EventDestination.KinesisFirehoseDestination", valid_603221
  var valid_603222 = formData.getOrDefault("EventDestination.Enabled")
  valid_603222 = validateParameter(valid_603222, JString, required = false,
                                 default = nil)
  if valid_603222 != nil:
    section.add "EventDestination.Enabled", valid_603222
  var valid_603223 = formData.getOrDefault("EventDestination.SNSDestination")
  valid_603223 = validateParameter(valid_603223, JString, required = false,
                                 default = nil)
  if valid_603223 != nil:
    section.add "EventDestination.SNSDestination", valid_603223
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603224: Call_PostUpdateConfigurationSetEventDestination_603205;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Updates the event destination of a configuration set. Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603224.validator(path, query, header, formData, body)
  let scheme = call_603224.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603224.url(scheme.get, call_603224.host, call_603224.base,
                         call_603224.route, valid.getOrDefault("path"))
  result = hook(call_603224, url, valid)

proc call*(call_603225: Call_PostUpdateConfigurationSetEventDestination_603205;
          ConfigurationSetName: string; EventDestinationName: string = "";
          EventDestinationCloudWatchDestination: string = "";
          Action: string = "UpdateConfigurationSetEventDestination";
          EventDestinationMatchingEventTypes: JsonNode = nil;
          EventDestinationKinesisFirehoseDestination: string = "";
          EventDestinationEnabled: string = "";
          EventDestinationSNSDestination: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## postUpdateConfigurationSetEventDestination
  ## <p>Updates the event destination of a configuration set. Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that contains the event destination that you want to update.
  ##   EventDestinationName: string
  ##                       : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestinationCloudWatchDestination: string
  ##                                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   Action: string (required)
  ##   EventDestinationMatchingEventTypes: JArray
  ##                                     : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   EventDestinationKinesisFirehoseDestination: string
  ##                                             : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   EventDestinationEnabled: string
  ##                          : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestinationSNSDestination: string
  ##                                 : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  ##   Version: string (required)
  var query_603226 = newJObject()
  var formData_603227 = newJObject()
  add(formData_603227, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_603227, "EventDestination.Name", newJString(EventDestinationName))
  add(formData_603227, "EventDestination.CloudWatchDestination",
      newJString(EventDestinationCloudWatchDestination))
  add(query_603226, "Action", newJString(Action))
  if EventDestinationMatchingEventTypes != nil:
    formData_603227.add "EventDestination.MatchingEventTypes",
                       EventDestinationMatchingEventTypes
  add(formData_603227, "EventDestination.KinesisFirehoseDestination",
      newJString(EventDestinationKinesisFirehoseDestination))
  add(formData_603227, "EventDestination.Enabled",
      newJString(EventDestinationEnabled))
  add(formData_603227, "EventDestination.SNSDestination",
      newJString(EventDestinationSNSDestination))
  add(query_603226, "Version", newJString(Version))
  result = call_603225.call(nil, query_603226, nil, formData_603227, nil)

var postUpdateConfigurationSetEventDestination* = Call_PostUpdateConfigurationSetEventDestination_603205(
    name: "postUpdateConfigurationSetEventDestination", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetEventDestination",
    validator: validate_PostUpdateConfigurationSetEventDestination_603206,
    base: "/", url: url_PostUpdateConfigurationSetEventDestination_603207,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateConfigurationSetEventDestination_603183 = ref object of OpenApiRestCall_600426
proc url_GetUpdateConfigurationSetEventDestination_603185(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateConfigurationSetEventDestination_603184(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the event destination of a configuration set. Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EventDestination.Enabled: JString
  ##                           : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestination.KinesisFirehoseDestination: JString
  ##                                              : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   Action: JString (required)
  ##   EventDestination.Name: JString
  ##                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestination.CloudWatchDestination: JString
  ##                                         : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   EventDestination.SNSDestination: JString
  ##                                  : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  ##   EventDestination.MatchingEventTypes: JArray
  ##                                      : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that contains the event destination that you want to update.
  ##   Version: JString (required)
  section = newJObject()
  var valid_603186 = query.getOrDefault("EventDestination.Enabled")
  valid_603186 = validateParameter(valid_603186, JString, required = false,
                                 default = nil)
  if valid_603186 != nil:
    section.add "EventDestination.Enabled", valid_603186
  var valid_603187 = query.getOrDefault("EventDestination.KinesisFirehoseDestination")
  valid_603187 = validateParameter(valid_603187, JString, required = false,
                                 default = nil)
  if valid_603187 != nil:
    section.add "EventDestination.KinesisFirehoseDestination", valid_603187
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603188 = query.getOrDefault("Action")
  valid_603188 = validateParameter(valid_603188, JString, required = true, default = newJString(
      "UpdateConfigurationSetEventDestination"))
  if valid_603188 != nil:
    section.add "Action", valid_603188
  var valid_603189 = query.getOrDefault("EventDestination.Name")
  valid_603189 = validateParameter(valid_603189, JString, required = false,
                                 default = nil)
  if valid_603189 != nil:
    section.add "EventDestination.Name", valid_603189
  var valid_603190 = query.getOrDefault("EventDestination.CloudWatchDestination")
  valid_603190 = validateParameter(valid_603190, JString, required = false,
                                 default = nil)
  if valid_603190 != nil:
    section.add "EventDestination.CloudWatchDestination", valid_603190
  var valid_603191 = query.getOrDefault("EventDestination.SNSDestination")
  valid_603191 = validateParameter(valid_603191, JString, required = false,
                                 default = nil)
  if valid_603191 != nil:
    section.add "EventDestination.SNSDestination", valid_603191
  var valid_603192 = query.getOrDefault("EventDestination.MatchingEventTypes")
  valid_603192 = validateParameter(valid_603192, JArray, required = false,
                                 default = nil)
  if valid_603192 != nil:
    section.add "EventDestination.MatchingEventTypes", valid_603192
  var valid_603193 = query.getOrDefault("ConfigurationSetName")
  valid_603193 = validateParameter(valid_603193, JString, required = true,
                                 default = nil)
  if valid_603193 != nil:
    section.add "ConfigurationSetName", valid_603193
  var valid_603194 = query.getOrDefault("Version")
  valid_603194 = validateParameter(valid_603194, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603194 != nil:
    section.add "Version", valid_603194
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603195 = header.getOrDefault("X-Amz-Date")
  valid_603195 = validateParameter(valid_603195, JString, required = false,
                                 default = nil)
  if valid_603195 != nil:
    section.add "X-Amz-Date", valid_603195
  var valid_603196 = header.getOrDefault("X-Amz-Security-Token")
  valid_603196 = validateParameter(valid_603196, JString, required = false,
                                 default = nil)
  if valid_603196 != nil:
    section.add "X-Amz-Security-Token", valid_603196
  var valid_603197 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603197 = validateParameter(valid_603197, JString, required = false,
                                 default = nil)
  if valid_603197 != nil:
    section.add "X-Amz-Content-Sha256", valid_603197
  var valid_603198 = header.getOrDefault("X-Amz-Algorithm")
  valid_603198 = validateParameter(valid_603198, JString, required = false,
                                 default = nil)
  if valid_603198 != nil:
    section.add "X-Amz-Algorithm", valid_603198
  var valid_603199 = header.getOrDefault("X-Amz-Signature")
  valid_603199 = validateParameter(valid_603199, JString, required = false,
                                 default = nil)
  if valid_603199 != nil:
    section.add "X-Amz-Signature", valid_603199
  var valid_603200 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603200 = validateParameter(valid_603200, JString, required = false,
                                 default = nil)
  if valid_603200 != nil:
    section.add "X-Amz-SignedHeaders", valid_603200
  var valid_603201 = header.getOrDefault("X-Amz-Credential")
  valid_603201 = validateParameter(valid_603201, JString, required = false,
                                 default = nil)
  if valid_603201 != nil:
    section.add "X-Amz-Credential", valid_603201
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603202: Call_GetUpdateConfigurationSetEventDestination_603183;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Updates the event destination of a configuration set. Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603202.validator(path, query, header, formData, body)
  let scheme = call_603202.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603202.url(scheme.get, call_603202.host, call_603202.base,
                         call_603202.route, valid.getOrDefault("path"))
  result = hook(call_603202, url, valid)

proc call*(call_603203: Call_GetUpdateConfigurationSetEventDestination_603183;
          ConfigurationSetName: string; EventDestinationEnabled: string = "";
          EventDestinationKinesisFirehoseDestination: string = "";
          Action: string = "UpdateConfigurationSetEventDestination";
          EventDestinationName: string = "";
          EventDestinationCloudWatchDestination: string = "";
          EventDestinationSNSDestination: string = "";
          EventDestinationMatchingEventTypes: JsonNode = nil;
          Version: string = "2010-12-01"): Recallable =
  ## getUpdateConfigurationSetEventDestination
  ## <p>Updates the event destination of a configuration set. Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>You can execute this operation no more than once per second.</p>
  ##   EventDestinationEnabled: string
  ##                          : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestinationKinesisFirehoseDestination: string
  ##                                             : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   Action: string (required)
  ##   EventDestinationName: string
  ##                       : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestinationCloudWatchDestination: string
  ##                                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   EventDestinationSNSDestination: string
  ##                                 : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  ##   EventDestinationMatchingEventTypes: JArray
  ##                                     : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that contains the event destination that you want to update.
  ##   Version: string (required)
  var query_603204 = newJObject()
  add(query_603204, "EventDestination.Enabled",
      newJString(EventDestinationEnabled))
  add(query_603204, "EventDestination.KinesisFirehoseDestination",
      newJString(EventDestinationKinesisFirehoseDestination))
  add(query_603204, "Action", newJString(Action))
  add(query_603204, "EventDestination.Name", newJString(EventDestinationName))
  add(query_603204, "EventDestination.CloudWatchDestination",
      newJString(EventDestinationCloudWatchDestination))
  add(query_603204, "EventDestination.SNSDestination",
      newJString(EventDestinationSNSDestination))
  if EventDestinationMatchingEventTypes != nil:
    query_603204.add "EventDestination.MatchingEventTypes",
                    EventDestinationMatchingEventTypes
  add(query_603204, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_603204, "Version", newJString(Version))
  result = call_603203.call(nil, query_603204, nil, nil, nil)

var getUpdateConfigurationSetEventDestination* = Call_GetUpdateConfigurationSetEventDestination_603183(
    name: "getUpdateConfigurationSetEventDestination", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetEventDestination",
    validator: validate_GetUpdateConfigurationSetEventDestination_603184,
    base: "/", url: url_GetUpdateConfigurationSetEventDestination_603185,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateConfigurationSetReputationMetricsEnabled_603245 = ref object of OpenApiRestCall_600426
proc url_PostUpdateConfigurationSetReputationMetricsEnabled_603247(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateConfigurationSetReputationMetricsEnabled_603246(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## <p>Enables or disables the publishing of reputation metrics for emails sent using a specific configuration set in a given AWS Region. Reputation metrics include bounce and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can create alarms when bounce or complaint rates exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603248 = query.getOrDefault("Action")
  valid_603248 = validateParameter(valid_603248, JString, required = true, default = newJString(
      "UpdateConfigurationSetReputationMetricsEnabled"))
  if valid_603248 != nil:
    section.add "Action", valid_603248
  var valid_603249 = query.getOrDefault("Version")
  valid_603249 = validateParameter(valid_603249, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603249 != nil:
    section.add "Version", valid_603249
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603250 = header.getOrDefault("X-Amz-Date")
  valid_603250 = validateParameter(valid_603250, JString, required = false,
                                 default = nil)
  if valid_603250 != nil:
    section.add "X-Amz-Date", valid_603250
  var valid_603251 = header.getOrDefault("X-Amz-Security-Token")
  valid_603251 = validateParameter(valid_603251, JString, required = false,
                                 default = nil)
  if valid_603251 != nil:
    section.add "X-Amz-Security-Token", valid_603251
  var valid_603252 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603252 = validateParameter(valid_603252, JString, required = false,
                                 default = nil)
  if valid_603252 != nil:
    section.add "X-Amz-Content-Sha256", valid_603252
  var valid_603253 = header.getOrDefault("X-Amz-Algorithm")
  valid_603253 = validateParameter(valid_603253, JString, required = false,
                                 default = nil)
  if valid_603253 != nil:
    section.add "X-Amz-Algorithm", valid_603253
  var valid_603254 = header.getOrDefault("X-Amz-Signature")
  valid_603254 = validateParameter(valid_603254, JString, required = false,
                                 default = nil)
  if valid_603254 != nil:
    section.add "X-Amz-Signature", valid_603254
  var valid_603255 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603255 = validateParameter(valid_603255, JString, required = false,
                                 default = nil)
  if valid_603255 != nil:
    section.add "X-Amz-SignedHeaders", valid_603255
  var valid_603256 = header.getOrDefault("X-Amz-Credential")
  valid_603256 = validateParameter(valid_603256, JString, required = false,
                                 default = nil)
  if valid_603256 != nil:
    section.add "X-Amz-Credential", valid_603256
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Enabled: JBool (required)
  ##          : Describes whether or not Amazon SES will publish reputation metrics for the configuration set, such as bounce and complaint rates, to Amazon CloudWatch.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_603257 = formData.getOrDefault("ConfigurationSetName")
  valid_603257 = validateParameter(valid_603257, JString, required = true,
                                 default = nil)
  if valid_603257 != nil:
    section.add "ConfigurationSetName", valid_603257
  var valid_603258 = formData.getOrDefault("Enabled")
  valid_603258 = validateParameter(valid_603258, JBool, required = true, default = nil)
  if valid_603258 != nil:
    section.add "Enabled", valid_603258
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603259: Call_PostUpdateConfigurationSetReputationMetricsEnabled_603245;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables or disables the publishing of reputation metrics for emails sent using a specific configuration set in a given AWS Region. Reputation metrics include bounce and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can create alarms when bounce or complaint rates exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603259.validator(path, query, header, formData, body)
  let scheme = call_603259.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603259.url(scheme.get, call_603259.host, call_603259.base,
                         call_603259.route, valid.getOrDefault("path"))
  result = hook(call_603259, url, valid)

proc call*(call_603260: Call_PostUpdateConfigurationSetReputationMetricsEnabled_603245;
          ConfigurationSetName: string; Enabled: bool;
          Action: string = "UpdateConfigurationSetReputationMetricsEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## postUpdateConfigurationSetReputationMetricsEnabled
  ## <p>Enables or disables the publishing of reputation metrics for emails sent using a specific configuration set in a given AWS Region. Reputation metrics include bounce and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can create alarms when bounce or complaint rates exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Enabled: bool (required)
  ##          : Describes whether or not Amazon SES will publish reputation metrics for the configuration set, such as bounce and complaint rates, to Amazon CloudWatch.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603261 = newJObject()
  var formData_603262 = newJObject()
  add(formData_603262, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_603262, "Enabled", newJBool(Enabled))
  add(query_603261, "Action", newJString(Action))
  add(query_603261, "Version", newJString(Version))
  result = call_603260.call(nil, query_603261, nil, formData_603262, nil)

var postUpdateConfigurationSetReputationMetricsEnabled* = Call_PostUpdateConfigurationSetReputationMetricsEnabled_603245(
    name: "postUpdateConfigurationSetReputationMetricsEnabled",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetReputationMetricsEnabled",
    validator: validate_PostUpdateConfigurationSetReputationMetricsEnabled_603246,
    base: "/", url: url_PostUpdateConfigurationSetReputationMetricsEnabled_603247,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateConfigurationSetReputationMetricsEnabled_603228 = ref object of OpenApiRestCall_600426
proc url_GetUpdateConfigurationSetReputationMetricsEnabled_603230(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateConfigurationSetReputationMetricsEnabled_603229(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## <p>Enables or disables the publishing of reputation metrics for emails sent using a specific configuration set in a given AWS Region. Reputation metrics include bounce and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can create alarms when bounce or complaint rates exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Enabled: JBool (required)
  ##          : Describes whether or not Amazon SES will publish reputation metrics for the configuration set, such as bounce and complaint rates, to Amazon CloudWatch.
  ##   Action: JString (required)
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Enabled` field"
  var valid_603231 = query.getOrDefault("Enabled")
  valid_603231 = validateParameter(valid_603231, JBool, required = true, default = nil)
  if valid_603231 != nil:
    section.add "Enabled", valid_603231
  var valid_603232 = query.getOrDefault("Action")
  valid_603232 = validateParameter(valid_603232, JString, required = true, default = newJString(
      "UpdateConfigurationSetReputationMetricsEnabled"))
  if valid_603232 != nil:
    section.add "Action", valid_603232
  var valid_603233 = query.getOrDefault("ConfigurationSetName")
  valid_603233 = validateParameter(valid_603233, JString, required = true,
                                 default = nil)
  if valid_603233 != nil:
    section.add "ConfigurationSetName", valid_603233
  var valid_603234 = query.getOrDefault("Version")
  valid_603234 = validateParameter(valid_603234, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603234 != nil:
    section.add "Version", valid_603234
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603235 = header.getOrDefault("X-Amz-Date")
  valid_603235 = validateParameter(valid_603235, JString, required = false,
                                 default = nil)
  if valid_603235 != nil:
    section.add "X-Amz-Date", valid_603235
  var valid_603236 = header.getOrDefault("X-Amz-Security-Token")
  valid_603236 = validateParameter(valid_603236, JString, required = false,
                                 default = nil)
  if valid_603236 != nil:
    section.add "X-Amz-Security-Token", valid_603236
  var valid_603237 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603237 = validateParameter(valid_603237, JString, required = false,
                                 default = nil)
  if valid_603237 != nil:
    section.add "X-Amz-Content-Sha256", valid_603237
  var valid_603238 = header.getOrDefault("X-Amz-Algorithm")
  valid_603238 = validateParameter(valid_603238, JString, required = false,
                                 default = nil)
  if valid_603238 != nil:
    section.add "X-Amz-Algorithm", valid_603238
  var valid_603239 = header.getOrDefault("X-Amz-Signature")
  valid_603239 = validateParameter(valid_603239, JString, required = false,
                                 default = nil)
  if valid_603239 != nil:
    section.add "X-Amz-Signature", valid_603239
  var valid_603240 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603240 = validateParameter(valid_603240, JString, required = false,
                                 default = nil)
  if valid_603240 != nil:
    section.add "X-Amz-SignedHeaders", valid_603240
  var valid_603241 = header.getOrDefault("X-Amz-Credential")
  valid_603241 = validateParameter(valid_603241, JString, required = false,
                                 default = nil)
  if valid_603241 != nil:
    section.add "X-Amz-Credential", valid_603241
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603242: Call_GetUpdateConfigurationSetReputationMetricsEnabled_603228;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables or disables the publishing of reputation metrics for emails sent using a specific configuration set in a given AWS Region. Reputation metrics include bounce and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can create alarms when bounce or complaint rates exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603242.validator(path, query, header, formData, body)
  let scheme = call_603242.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603242.url(scheme.get, call_603242.host, call_603242.base,
                         call_603242.route, valid.getOrDefault("path"))
  result = hook(call_603242, url, valid)

proc call*(call_603243: Call_GetUpdateConfigurationSetReputationMetricsEnabled_603228;
          Enabled: bool; ConfigurationSetName: string;
          Action: string = "UpdateConfigurationSetReputationMetricsEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## getUpdateConfigurationSetReputationMetricsEnabled
  ## <p>Enables or disables the publishing of reputation metrics for emails sent using a specific configuration set in a given AWS Region. Reputation metrics include bounce and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can create alarms when bounce or complaint rates exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Enabled: bool (required)
  ##          : Describes whether or not Amazon SES will publish reputation metrics for the configuration set, such as bounce and complaint rates, to Amazon CloudWatch.
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Version: string (required)
  var query_603244 = newJObject()
  add(query_603244, "Enabled", newJBool(Enabled))
  add(query_603244, "Action", newJString(Action))
  add(query_603244, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_603244, "Version", newJString(Version))
  result = call_603243.call(nil, query_603244, nil, nil, nil)

var getUpdateConfigurationSetReputationMetricsEnabled* = Call_GetUpdateConfigurationSetReputationMetricsEnabled_603228(
    name: "getUpdateConfigurationSetReputationMetricsEnabled",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetReputationMetricsEnabled",
    validator: validate_GetUpdateConfigurationSetReputationMetricsEnabled_603229,
    base: "/", url: url_GetUpdateConfigurationSetReputationMetricsEnabled_603230,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateConfigurationSetSendingEnabled_603280 = ref object of OpenApiRestCall_600426
proc url_PostUpdateConfigurationSetSendingEnabled_603282(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateConfigurationSetSendingEnabled_603281(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables email sending for messages sent using a specific configuration set in a given AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending for a configuration set when the reputation metrics for that configuration set (such as your bounce on complaint rate) exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603283 = query.getOrDefault("Action")
  valid_603283 = validateParameter(valid_603283, JString, required = true, default = newJString(
      "UpdateConfigurationSetSendingEnabled"))
  if valid_603283 != nil:
    section.add "Action", valid_603283
  var valid_603284 = query.getOrDefault("Version")
  valid_603284 = validateParameter(valid_603284, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603284 != nil:
    section.add "Version", valid_603284
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603285 = header.getOrDefault("X-Amz-Date")
  valid_603285 = validateParameter(valid_603285, JString, required = false,
                                 default = nil)
  if valid_603285 != nil:
    section.add "X-Amz-Date", valid_603285
  var valid_603286 = header.getOrDefault("X-Amz-Security-Token")
  valid_603286 = validateParameter(valid_603286, JString, required = false,
                                 default = nil)
  if valid_603286 != nil:
    section.add "X-Amz-Security-Token", valid_603286
  var valid_603287 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603287 = validateParameter(valid_603287, JString, required = false,
                                 default = nil)
  if valid_603287 != nil:
    section.add "X-Amz-Content-Sha256", valid_603287
  var valid_603288 = header.getOrDefault("X-Amz-Algorithm")
  valid_603288 = validateParameter(valid_603288, JString, required = false,
                                 default = nil)
  if valid_603288 != nil:
    section.add "X-Amz-Algorithm", valid_603288
  var valid_603289 = header.getOrDefault("X-Amz-Signature")
  valid_603289 = validateParameter(valid_603289, JString, required = false,
                                 default = nil)
  if valid_603289 != nil:
    section.add "X-Amz-Signature", valid_603289
  var valid_603290 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603290 = validateParameter(valid_603290, JString, required = false,
                                 default = nil)
  if valid_603290 != nil:
    section.add "X-Amz-SignedHeaders", valid_603290
  var valid_603291 = header.getOrDefault("X-Amz-Credential")
  valid_603291 = validateParameter(valid_603291, JString, required = false,
                                 default = nil)
  if valid_603291 != nil:
    section.add "X-Amz-Credential", valid_603291
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Enabled: JBool (required)
  ##          : Describes whether email sending is enabled or disabled for the configuration set. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_603292 = formData.getOrDefault("ConfigurationSetName")
  valid_603292 = validateParameter(valid_603292, JString, required = true,
                                 default = nil)
  if valid_603292 != nil:
    section.add "ConfigurationSetName", valid_603292
  var valid_603293 = formData.getOrDefault("Enabled")
  valid_603293 = validateParameter(valid_603293, JBool, required = true, default = nil)
  if valid_603293 != nil:
    section.add "Enabled", valid_603293
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603294: Call_PostUpdateConfigurationSetSendingEnabled_603280;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables or disables email sending for messages sent using a specific configuration set in a given AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending for a configuration set when the reputation metrics for that configuration set (such as your bounce on complaint rate) exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603294.validator(path, query, header, formData, body)
  let scheme = call_603294.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603294.url(scheme.get, call_603294.host, call_603294.base,
                         call_603294.route, valid.getOrDefault("path"))
  result = hook(call_603294, url, valid)

proc call*(call_603295: Call_PostUpdateConfigurationSetSendingEnabled_603280;
          ConfigurationSetName: string; Enabled: bool;
          Action: string = "UpdateConfigurationSetSendingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## postUpdateConfigurationSetSendingEnabled
  ## <p>Enables or disables email sending for messages sent using a specific configuration set in a given AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending for a configuration set when the reputation metrics for that configuration set (such as your bounce on complaint rate) exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Enabled: bool (required)
  ##          : Describes whether email sending is enabled or disabled for the configuration set. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603296 = newJObject()
  var formData_603297 = newJObject()
  add(formData_603297, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_603297, "Enabled", newJBool(Enabled))
  add(query_603296, "Action", newJString(Action))
  add(query_603296, "Version", newJString(Version))
  result = call_603295.call(nil, query_603296, nil, formData_603297, nil)

var postUpdateConfigurationSetSendingEnabled* = Call_PostUpdateConfigurationSetSendingEnabled_603280(
    name: "postUpdateConfigurationSetSendingEnabled", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetSendingEnabled",
    validator: validate_PostUpdateConfigurationSetSendingEnabled_603281,
    base: "/", url: url_PostUpdateConfigurationSetSendingEnabled_603282,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateConfigurationSetSendingEnabled_603263 = ref object of OpenApiRestCall_600426
proc url_GetUpdateConfigurationSetSendingEnabled_603265(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateConfigurationSetSendingEnabled_603264(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables email sending for messages sent using a specific configuration set in a given AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending for a configuration set when the reputation metrics for that configuration set (such as your bounce on complaint rate) exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Enabled: JBool (required)
  ##          : Describes whether email sending is enabled or disabled for the configuration set. 
  ##   Action: JString (required)
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Enabled` field"
  var valid_603266 = query.getOrDefault("Enabled")
  valid_603266 = validateParameter(valid_603266, JBool, required = true, default = nil)
  if valid_603266 != nil:
    section.add "Enabled", valid_603266
  var valid_603267 = query.getOrDefault("Action")
  valid_603267 = validateParameter(valid_603267, JString, required = true, default = newJString(
      "UpdateConfigurationSetSendingEnabled"))
  if valid_603267 != nil:
    section.add "Action", valid_603267
  var valid_603268 = query.getOrDefault("ConfigurationSetName")
  valid_603268 = validateParameter(valid_603268, JString, required = true,
                                 default = nil)
  if valid_603268 != nil:
    section.add "ConfigurationSetName", valid_603268
  var valid_603269 = query.getOrDefault("Version")
  valid_603269 = validateParameter(valid_603269, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603269 != nil:
    section.add "Version", valid_603269
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603270 = header.getOrDefault("X-Amz-Date")
  valid_603270 = validateParameter(valid_603270, JString, required = false,
                                 default = nil)
  if valid_603270 != nil:
    section.add "X-Amz-Date", valid_603270
  var valid_603271 = header.getOrDefault("X-Amz-Security-Token")
  valid_603271 = validateParameter(valid_603271, JString, required = false,
                                 default = nil)
  if valid_603271 != nil:
    section.add "X-Amz-Security-Token", valid_603271
  var valid_603272 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603272 = validateParameter(valid_603272, JString, required = false,
                                 default = nil)
  if valid_603272 != nil:
    section.add "X-Amz-Content-Sha256", valid_603272
  var valid_603273 = header.getOrDefault("X-Amz-Algorithm")
  valid_603273 = validateParameter(valid_603273, JString, required = false,
                                 default = nil)
  if valid_603273 != nil:
    section.add "X-Amz-Algorithm", valid_603273
  var valid_603274 = header.getOrDefault("X-Amz-Signature")
  valid_603274 = validateParameter(valid_603274, JString, required = false,
                                 default = nil)
  if valid_603274 != nil:
    section.add "X-Amz-Signature", valid_603274
  var valid_603275 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603275 = validateParameter(valid_603275, JString, required = false,
                                 default = nil)
  if valid_603275 != nil:
    section.add "X-Amz-SignedHeaders", valid_603275
  var valid_603276 = header.getOrDefault("X-Amz-Credential")
  valid_603276 = validateParameter(valid_603276, JString, required = false,
                                 default = nil)
  if valid_603276 != nil:
    section.add "X-Amz-Credential", valid_603276
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603277: Call_GetUpdateConfigurationSetSendingEnabled_603263;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables or disables email sending for messages sent using a specific configuration set in a given AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending for a configuration set when the reputation metrics for that configuration set (such as your bounce on complaint rate) exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603277.validator(path, query, header, formData, body)
  let scheme = call_603277.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603277.url(scheme.get, call_603277.host, call_603277.base,
                         call_603277.route, valid.getOrDefault("path"))
  result = hook(call_603277, url, valid)

proc call*(call_603278: Call_GetUpdateConfigurationSetSendingEnabled_603263;
          Enabled: bool; ConfigurationSetName: string;
          Action: string = "UpdateConfigurationSetSendingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## getUpdateConfigurationSetSendingEnabled
  ## <p>Enables or disables email sending for messages sent using a specific configuration set in a given AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending for a configuration set when the reputation metrics for that configuration set (such as your bounce on complaint rate) exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Enabled: bool (required)
  ##          : Describes whether email sending is enabled or disabled for the configuration set. 
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Version: string (required)
  var query_603279 = newJObject()
  add(query_603279, "Enabled", newJBool(Enabled))
  add(query_603279, "Action", newJString(Action))
  add(query_603279, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_603279, "Version", newJString(Version))
  result = call_603278.call(nil, query_603279, nil, nil, nil)

var getUpdateConfigurationSetSendingEnabled* = Call_GetUpdateConfigurationSetSendingEnabled_603263(
    name: "getUpdateConfigurationSetSendingEnabled", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetSendingEnabled",
    validator: validate_GetUpdateConfigurationSetSendingEnabled_603264, base: "/",
    url: url_GetUpdateConfigurationSetSendingEnabled_603265,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateConfigurationSetTrackingOptions_603315 = ref object of OpenApiRestCall_600426
proc url_PostUpdateConfigurationSetTrackingOptions_603317(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateConfigurationSetTrackingOptions_603316(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603318 = query.getOrDefault("Action")
  valid_603318 = validateParameter(valid_603318, JString, required = true, default = newJString(
      "UpdateConfigurationSetTrackingOptions"))
  if valid_603318 != nil:
    section.add "Action", valid_603318
  var valid_603319 = query.getOrDefault("Version")
  valid_603319 = validateParameter(valid_603319, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603319 != nil:
    section.add "Version", valid_603319
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603320 = header.getOrDefault("X-Amz-Date")
  valid_603320 = validateParameter(valid_603320, JString, required = false,
                                 default = nil)
  if valid_603320 != nil:
    section.add "X-Amz-Date", valid_603320
  var valid_603321 = header.getOrDefault("X-Amz-Security-Token")
  valid_603321 = validateParameter(valid_603321, JString, required = false,
                                 default = nil)
  if valid_603321 != nil:
    section.add "X-Amz-Security-Token", valid_603321
  var valid_603322 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603322 = validateParameter(valid_603322, JString, required = false,
                                 default = nil)
  if valid_603322 != nil:
    section.add "X-Amz-Content-Sha256", valid_603322
  var valid_603323 = header.getOrDefault("X-Amz-Algorithm")
  valid_603323 = validateParameter(valid_603323, JString, required = false,
                                 default = nil)
  if valid_603323 != nil:
    section.add "X-Amz-Algorithm", valid_603323
  var valid_603324 = header.getOrDefault("X-Amz-Signature")
  valid_603324 = validateParameter(valid_603324, JString, required = false,
                                 default = nil)
  if valid_603324 != nil:
    section.add "X-Amz-Signature", valid_603324
  var valid_603325 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603325 = validateParameter(valid_603325, JString, required = false,
                                 default = nil)
  if valid_603325 != nil:
    section.add "X-Amz-SignedHeaders", valid_603325
  var valid_603326 = header.getOrDefault("X-Amz-Credential")
  valid_603326 = validateParameter(valid_603326, JString, required = false,
                                 default = nil)
  if valid_603326 != nil:
    section.add "X-Amz-Credential", valid_603326
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set for which you want to update the custom tracking domain.
  ##   TrackingOptions.CustomRedirectDomain: JString
  ##                                       : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_603327 = formData.getOrDefault("ConfigurationSetName")
  valid_603327 = validateParameter(valid_603327, JString, required = true,
                                 default = nil)
  if valid_603327 != nil:
    section.add "ConfigurationSetName", valid_603327
  var valid_603328 = formData.getOrDefault("TrackingOptions.CustomRedirectDomain")
  valid_603328 = validateParameter(valid_603328, JString, required = false,
                                 default = nil)
  if valid_603328 != nil:
    section.add "TrackingOptions.CustomRedirectDomain", valid_603328
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603329: Call_PostUpdateConfigurationSetTrackingOptions_603315;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Modifies an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_603329.validator(path, query, header, formData, body)
  let scheme = call_603329.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603329.url(scheme.get, call_603329.host, call_603329.base,
                         call_603329.route, valid.getOrDefault("path"))
  result = hook(call_603329, url, valid)

proc call*(call_603330: Call_PostUpdateConfigurationSetTrackingOptions_603315;
          ConfigurationSetName: string;
          Action: string = "UpdateConfigurationSetTrackingOptions";
          TrackingOptionsCustomRedirectDomain: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## postUpdateConfigurationSetTrackingOptions
  ## <p>Modifies an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set for which you want to update the custom tracking domain.
  ##   Action: string (required)
  ##   TrackingOptionsCustomRedirectDomain: string
  ##                                      : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  ##   Version: string (required)
  var query_603331 = newJObject()
  var formData_603332 = newJObject()
  add(formData_603332, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_603331, "Action", newJString(Action))
  add(formData_603332, "TrackingOptions.CustomRedirectDomain",
      newJString(TrackingOptionsCustomRedirectDomain))
  add(query_603331, "Version", newJString(Version))
  result = call_603330.call(nil, query_603331, nil, formData_603332, nil)

var postUpdateConfigurationSetTrackingOptions* = Call_PostUpdateConfigurationSetTrackingOptions_603315(
    name: "postUpdateConfigurationSetTrackingOptions", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetTrackingOptions",
    validator: validate_PostUpdateConfigurationSetTrackingOptions_603316,
    base: "/", url: url_PostUpdateConfigurationSetTrackingOptions_603317,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateConfigurationSetTrackingOptions_603298 = ref object of OpenApiRestCall_600426
proc url_GetUpdateConfigurationSetTrackingOptions_603300(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateConfigurationSetTrackingOptions_603299(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TrackingOptions.CustomRedirectDomain: JString
  ##                                       : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  ##   Action: JString (required)
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set for which you want to update the custom tracking domain.
  ##   Version: JString (required)
  section = newJObject()
  var valid_603301 = query.getOrDefault("TrackingOptions.CustomRedirectDomain")
  valid_603301 = validateParameter(valid_603301, JString, required = false,
                                 default = nil)
  if valid_603301 != nil:
    section.add "TrackingOptions.CustomRedirectDomain", valid_603301
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603302 = query.getOrDefault("Action")
  valid_603302 = validateParameter(valid_603302, JString, required = true, default = newJString(
      "UpdateConfigurationSetTrackingOptions"))
  if valid_603302 != nil:
    section.add "Action", valid_603302
  var valid_603303 = query.getOrDefault("ConfigurationSetName")
  valid_603303 = validateParameter(valid_603303, JString, required = true,
                                 default = nil)
  if valid_603303 != nil:
    section.add "ConfigurationSetName", valid_603303
  var valid_603304 = query.getOrDefault("Version")
  valid_603304 = validateParameter(valid_603304, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603304 != nil:
    section.add "Version", valid_603304
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603305 = header.getOrDefault("X-Amz-Date")
  valid_603305 = validateParameter(valid_603305, JString, required = false,
                                 default = nil)
  if valid_603305 != nil:
    section.add "X-Amz-Date", valid_603305
  var valid_603306 = header.getOrDefault("X-Amz-Security-Token")
  valid_603306 = validateParameter(valid_603306, JString, required = false,
                                 default = nil)
  if valid_603306 != nil:
    section.add "X-Amz-Security-Token", valid_603306
  var valid_603307 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603307 = validateParameter(valid_603307, JString, required = false,
                                 default = nil)
  if valid_603307 != nil:
    section.add "X-Amz-Content-Sha256", valid_603307
  var valid_603308 = header.getOrDefault("X-Amz-Algorithm")
  valid_603308 = validateParameter(valid_603308, JString, required = false,
                                 default = nil)
  if valid_603308 != nil:
    section.add "X-Amz-Algorithm", valid_603308
  var valid_603309 = header.getOrDefault("X-Amz-Signature")
  valid_603309 = validateParameter(valid_603309, JString, required = false,
                                 default = nil)
  if valid_603309 != nil:
    section.add "X-Amz-Signature", valid_603309
  var valid_603310 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603310 = validateParameter(valid_603310, JString, required = false,
                                 default = nil)
  if valid_603310 != nil:
    section.add "X-Amz-SignedHeaders", valid_603310
  var valid_603311 = header.getOrDefault("X-Amz-Credential")
  valid_603311 = validateParameter(valid_603311, JString, required = false,
                                 default = nil)
  if valid_603311 != nil:
    section.add "X-Amz-Credential", valid_603311
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603312: Call_GetUpdateConfigurationSetTrackingOptions_603298;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Modifies an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_603312.validator(path, query, header, formData, body)
  let scheme = call_603312.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603312.url(scheme.get, call_603312.host, call_603312.base,
                         call_603312.route, valid.getOrDefault("path"))
  result = hook(call_603312, url, valid)

proc call*(call_603313: Call_GetUpdateConfigurationSetTrackingOptions_603298;
          ConfigurationSetName: string;
          TrackingOptionsCustomRedirectDomain: string = "";
          Action: string = "UpdateConfigurationSetTrackingOptions";
          Version: string = "2010-12-01"): Recallable =
  ## getUpdateConfigurationSetTrackingOptions
  ## <p>Modifies an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ##   TrackingOptionsCustomRedirectDomain: string
  ##                                      : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set for which you want to update the custom tracking domain.
  ##   Version: string (required)
  var query_603314 = newJObject()
  add(query_603314, "TrackingOptions.CustomRedirectDomain",
      newJString(TrackingOptionsCustomRedirectDomain))
  add(query_603314, "Action", newJString(Action))
  add(query_603314, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_603314, "Version", newJString(Version))
  result = call_603313.call(nil, query_603314, nil, nil, nil)

var getUpdateConfigurationSetTrackingOptions* = Call_GetUpdateConfigurationSetTrackingOptions_603298(
    name: "getUpdateConfigurationSetTrackingOptions", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetTrackingOptions",
    validator: validate_GetUpdateConfigurationSetTrackingOptions_603299,
    base: "/", url: url_GetUpdateConfigurationSetTrackingOptions_603300,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateCustomVerificationEmailTemplate_603354 = ref object of OpenApiRestCall_600426
proc url_PostUpdateCustomVerificationEmailTemplate_603356(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateCustomVerificationEmailTemplate_603355(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates an existing custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603357 = query.getOrDefault("Action")
  valid_603357 = validateParameter(valid_603357, JString, required = true, default = newJString(
      "UpdateCustomVerificationEmailTemplate"))
  if valid_603357 != nil:
    section.add "Action", valid_603357
  var valid_603358 = query.getOrDefault("Version")
  valid_603358 = validateParameter(valid_603358, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603358 != nil:
    section.add "Version", valid_603358
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603359 = header.getOrDefault("X-Amz-Date")
  valid_603359 = validateParameter(valid_603359, JString, required = false,
                                 default = nil)
  if valid_603359 != nil:
    section.add "X-Amz-Date", valid_603359
  var valid_603360 = header.getOrDefault("X-Amz-Security-Token")
  valid_603360 = validateParameter(valid_603360, JString, required = false,
                                 default = nil)
  if valid_603360 != nil:
    section.add "X-Amz-Security-Token", valid_603360
  var valid_603361 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603361 = validateParameter(valid_603361, JString, required = false,
                                 default = nil)
  if valid_603361 != nil:
    section.add "X-Amz-Content-Sha256", valid_603361
  var valid_603362 = header.getOrDefault("X-Amz-Algorithm")
  valid_603362 = validateParameter(valid_603362, JString, required = false,
                                 default = nil)
  if valid_603362 != nil:
    section.add "X-Amz-Algorithm", valid_603362
  var valid_603363 = header.getOrDefault("X-Amz-Signature")
  valid_603363 = validateParameter(valid_603363, JString, required = false,
                                 default = nil)
  if valid_603363 != nil:
    section.add "X-Amz-Signature", valid_603363
  var valid_603364 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603364 = validateParameter(valid_603364, JString, required = false,
                                 default = nil)
  if valid_603364 != nil:
    section.add "X-Amz-SignedHeaders", valid_603364
  var valid_603365 = header.getOrDefault("X-Amz-Credential")
  valid_603365 = validateParameter(valid_603365, JString, required = false,
                                 default = nil)
  if valid_603365 != nil:
    section.add "X-Amz-Credential", valid_603365
  result.add "header", section
  ## parameters in `formData` object:
  ##   SuccessRedirectionURL: JString
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   FailureRedirectionURL: JString
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   FromEmailAddress: JString
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateContent: JString
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template that you want to update.
  ##   TemplateSubject: JString
  ##                  : The subject line of the custom verification email.
  section = newJObject()
  var valid_603366 = formData.getOrDefault("SuccessRedirectionURL")
  valid_603366 = validateParameter(valid_603366, JString, required = false,
                                 default = nil)
  if valid_603366 != nil:
    section.add "SuccessRedirectionURL", valid_603366
  var valid_603367 = formData.getOrDefault("FailureRedirectionURL")
  valid_603367 = validateParameter(valid_603367, JString, required = false,
                                 default = nil)
  if valid_603367 != nil:
    section.add "FailureRedirectionURL", valid_603367
  var valid_603368 = formData.getOrDefault("FromEmailAddress")
  valid_603368 = validateParameter(valid_603368, JString, required = false,
                                 default = nil)
  if valid_603368 != nil:
    section.add "FromEmailAddress", valid_603368
  var valid_603369 = formData.getOrDefault("TemplateContent")
  valid_603369 = validateParameter(valid_603369, JString, required = false,
                                 default = nil)
  if valid_603369 != nil:
    section.add "TemplateContent", valid_603369
  assert formData != nil,
        "formData argument is necessary due to required `TemplateName` field"
  var valid_603370 = formData.getOrDefault("TemplateName")
  valid_603370 = validateParameter(valid_603370, JString, required = true,
                                 default = nil)
  if valid_603370 != nil:
    section.add "TemplateName", valid_603370
  var valid_603371 = formData.getOrDefault("TemplateSubject")
  valid_603371 = validateParameter(valid_603371, JString, required = false,
                                 default = nil)
  if valid_603371 != nil:
    section.add "TemplateSubject", valid_603371
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603372: Call_PostUpdateCustomVerificationEmailTemplate_603354;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Updates an existing custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603372.validator(path, query, header, formData, body)
  let scheme = call_603372.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603372.url(scheme.get, call_603372.host, call_603372.base,
                         call_603372.route, valid.getOrDefault("path"))
  result = hook(call_603372, url, valid)

proc call*(call_603373: Call_PostUpdateCustomVerificationEmailTemplate_603354;
          TemplateName: string; SuccessRedirectionURL: string = "";
          FailureRedirectionURL: string = ""; FromEmailAddress: string = "";
          Action: string = "UpdateCustomVerificationEmailTemplate";
          TemplateContent: string = ""; TemplateSubject: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## postUpdateCustomVerificationEmailTemplate
  ## <p>Updates an existing custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   SuccessRedirectionURL: string
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   FailureRedirectionURL: string
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   FromEmailAddress: string
  ##                   : The email address that the custom verification email is sent from.
  ##   Action: string (required)
  ##   TemplateContent: string
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template that you want to update.
  ##   TemplateSubject: string
  ##                  : The subject line of the custom verification email.
  ##   Version: string (required)
  var query_603374 = newJObject()
  var formData_603375 = newJObject()
  add(formData_603375, "SuccessRedirectionURL", newJString(SuccessRedirectionURL))
  add(formData_603375, "FailureRedirectionURL", newJString(FailureRedirectionURL))
  add(formData_603375, "FromEmailAddress", newJString(FromEmailAddress))
  add(query_603374, "Action", newJString(Action))
  add(formData_603375, "TemplateContent", newJString(TemplateContent))
  add(formData_603375, "TemplateName", newJString(TemplateName))
  add(formData_603375, "TemplateSubject", newJString(TemplateSubject))
  add(query_603374, "Version", newJString(Version))
  result = call_603373.call(nil, query_603374, nil, formData_603375, nil)

var postUpdateCustomVerificationEmailTemplate* = Call_PostUpdateCustomVerificationEmailTemplate_603354(
    name: "postUpdateCustomVerificationEmailTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateCustomVerificationEmailTemplate",
    validator: validate_PostUpdateCustomVerificationEmailTemplate_603355,
    base: "/", url: url_PostUpdateCustomVerificationEmailTemplate_603356,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateCustomVerificationEmailTemplate_603333 = ref object of OpenApiRestCall_600426
proc url_GetUpdateCustomVerificationEmailTemplate_603335(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateCustomVerificationEmailTemplate_603334(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates an existing custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TemplateSubject: JString
  ##                  : The subject line of the custom verification email.
  ##   FromEmailAddress: JString
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateContent: JString
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   Action: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template that you want to update.
  ##   SuccessRedirectionURL: JString
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   FailureRedirectionURL: JString
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   Version: JString (required)
  section = newJObject()
  var valid_603336 = query.getOrDefault("TemplateSubject")
  valid_603336 = validateParameter(valid_603336, JString, required = false,
                                 default = nil)
  if valid_603336 != nil:
    section.add "TemplateSubject", valid_603336
  var valid_603337 = query.getOrDefault("FromEmailAddress")
  valid_603337 = validateParameter(valid_603337, JString, required = false,
                                 default = nil)
  if valid_603337 != nil:
    section.add "FromEmailAddress", valid_603337
  var valid_603338 = query.getOrDefault("TemplateContent")
  valid_603338 = validateParameter(valid_603338, JString, required = false,
                                 default = nil)
  if valid_603338 != nil:
    section.add "TemplateContent", valid_603338
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603339 = query.getOrDefault("Action")
  valid_603339 = validateParameter(valid_603339, JString, required = true, default = newJString(
      "UpdateCustomVerificationEmailTemplate"))
  if valid_603339 != nil:
    section.add "Action", valid_603339
  var valid_603340 = query.getOrDefault("TemplateName")
  valid_603340 = validateParameter(valid_603340, JString, required = true,
                                 default = nil)
  if valid_603340 != nil:
    section.add "TemplateName", valid_603340
  var valid_603341 = query.getOrDefault("SuccessRedirectionURL")
  valid_603341 = validateParameter(valid_603341, JString, required = false,
                                 default = nil)
  if valid_603341 != nil:
    section.add "SuccessRedirectionURL", valid_603341
  var valid_603342 = query.getOrDefault("FailureRedirectionURL")
  valid_603342 = validateParameter(valid_603342, JString, required = false,
                                 default = nil)
  if valid_603342 != nil:
    section.add "FailureRedirectionURL", valid_603342
  var valid_603343 = query.getOrDefault("Version")
  valid_603343 = validateParameter(valid_603343, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603343 != nil:
    section.add "Version", valid_603343
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603344 = header.getOrDefault("X-Amz-Date")
  valid_603344 = validateParameter(valid_603344, JString, required = false,
                                 default = nil)
  if valid_603344 != nil:
    section.add "X-Amz-Date", valid_603344
  var valid_603345 = header.getOrDefault("X-Amz-Security-Token")
  valid_603345 = validateParameter(valid_603345, JString, required = false,
                                 default = nil)
  if valid_603345 != nil:
    section.add "X-Amz-Security-Token", valid_603345
  var valid_603346 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603346 = validateParameter(valid_603346, JString, required = false,
                                 default = nil)
  if valid_603346 != nil:
    section.add "X-Amz-Content-Sha256", valid_603346
  var valid_603347 = header.getOrDefault("X-Amz-Algorithm")
  valid_603347 = validateParameter(valid_603347, JString, required = false,
                                 default = nil)
  if valid_603347 != nil:
    section.add "X-Amz-Algorithm", valid_603347
  var valid_603348 = header.getOrDefault("X-Amz-Signature")
  valid_603348 = validateParameter(valid_603348, JString, required = false,
                                 default = nil)
  if valid_603348 != nil:
    section.add "X-Amz-Signature", valid_603348
  var valid_603349 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603349 = validateParameter(valid_603349, JString, required = false,
                                 default = nil)
  if valid_603349 != nil:
    section.add "X-Amz-SignedHeaders", valid_603349
  var valid_603350 = header.getOrDefault("X-Amz-Credential")
  valid_603350 = validateParameter(valid_603350, JString, required = false,
                                 default = nil)
  if valid_603350 != nil:
    section.add "X-Amz-Credential", valid_603350
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603351: Call_GetUpdateCustomVerificationEmailTemplate_603333;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Updates an existing custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603351.validator(path, query, header, formData, body)
  let scheme = call_603351.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603351.url(scheme.get, call_603351.host, call_603351.base,
                         call_603351.route, valid.getOrDefault("path"))
  result = hook(call_603351, url, valid)

proc call*(call_603352: Call_GetUpdateCustomVerificationEmailTemplate_603333;
          TemplateName: string; TemplateSubject: string = "";
          FromEmailAddress: string = ""; TemplateContent: string = "";
          Action: string = "UpdateCustomVerificationEmailTemplate";
          SuccessRedirectionURL: string = ""; FailureRedirectionURL: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## getUpdateCustomVerificationEmailTemplate
  ## <p>Updates an existing custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateSubject: string
  ##                  : The subject line of the custom verification email.
  ##   FromEmailAddress: string
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateContent: string
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template that you want to update.
  ##   SuccessRedirectionURL: string
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   FailureRedirectionURL: string
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   Version: string (required)
  var query_603353 = newJObject()
  add(query_603353, "TemplateSubject", newJString(TemplateSubject))
  add(query_603353, "FromEmailAddress", newJString(FromEmailAddress))
  add(query_603353, "TemplateContent", newJString(TemplateContent))
  add(query_603353, "Action", newJString(Action))
  add(query_603353, "TemplateName", newJString(TemplateName))
  add(query_603353, "SuccessRedirectionURL", newJString(SuccessRedirectionURL))
  add(query_603353, "FailureRedirectionURL", newJString(FailureRedirectionURL))
  add(query_603353, "Version", newJString(Version))
  result = call_603352.call(nil, query_603353, nil, nil, nil)

var getUpdateCustomVerificationEmailTemplate* = Call_GetUpdateCustomVerificationEmailTemplate_603333(
    name: "getUpdateCustomVerificationEmailTemplate", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateCustomVerificationEmailTemplate",
    validator: validate_GetUpdateCustomVerificationEmailTemplate_603334,
    base: "/", url: url_GetUpdateCustomVerificationEmailTemplate_603335,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateReceiptRule_603398 = ref object of OpenApiRestCall_600426
proc url_PostUpdateReceiptRule_603400(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateReceiptRule_603399(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates a receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603401 = query.getOrDefault("Action")
  valid_603401 = validateParameter(valid_603401, JString, required = true,
                                 default = newJString("UpdateReceiptRule"))
  if valid_603401 != nil:
    section.add "Action", valid_603401
  var valid_603402 = query.getOrDefault("Version")
  valid_603402 = validateParameter(valid_603402, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603402 != nil:
    section.add "Version", valid_603402
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603403 = header.getOrDefault("X-Amz-Date")
  valid_603403 = validateParameter(valid_603403, JString, required = false,
                                 default = nil)
  if valid_603403 != nil:
    section.add "X-Amz-Date", valid_603403
  var valid_603404 = header.getOrDefault("X-Amz-Security-Token")
  valid_603404 = validateParameter(valid_603404, JString, required = false,
                                 default = nil)
  if valid_603404 != nil:
    section.add "X-Amz-Security-Token", valid_603404
  var valid_603405 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603405 = validateParameter(valid_603405, JString, required = false,
                                 default = nil)
  if valid_603405 != nil:
    section.add "X-Amz-Content-Sha256", valid_603405
  var valid_603406 = header.getOrDefault("X-Amz-Algorithm")
  valid_603406 = validateParameter(valid_603406, JString, required = false,
                                 default = nil)
  if valid_603406 != nil:
    section.add "X-Amz-Algorithm", valid_603406
  var valid_603407 = header.getOrDefault("X-Amz-Signature")
  valid_603407 = validateParameter(valid_603407, JString, required = false,
                                 default = nil)
  if valid_603407 != nil:
    section.add "X-Amz-Signature", valid_603407
  var valid_603408 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603408 = validateParameter(valid_603408, JString, required = false,
                                 default = nil)
  if valid_603408 != nil:
    section.add "X-Amz-SignedHeaders", valid_603408
  var valid_603409 = header.getOrDefault("X-Amz-Credential")
  valid_603409 = validateParameter(valid_603409, JString, required = false,
                                 default = nil)
  if valid_603409 != nil:
    section.add "X-Amz-Credential", valid_603409
  result.add "header", section
  ## parameters in `formData` object:
  ##   Rule.Recipients: JArray
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   Rule.Enabled: JString
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   Rule.Actions: JArray
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   Rule.Name: JString
  ##            : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Rule.ScanEnabled: JString
  ##                   : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   Rule.TlsPolicy: JString
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  section = newJObject()
  var valid_603410 = formData.getOrDefault("Rule.Recipients")
  valid_603410 = validateParameter(valid_603410, JArray, required = false,
                                 default = nil)
  if valid_603410 != nil:
    section.add "Rule.Recipients", valid_603410
  var valid_603411 = formData.getOrDefault("Rule.Enabled")
  valid_603411 = validateParameter(valid_603411, JString, required = false,
                                 default = nil)
  if valid_603411 != nil:
    section.add "Rule.Enabled", valid_603411
  assert formData != nil,
        "formData argument is necessary due to required `RuleSetName` field"
  var valid_603412 = formData.getOrDefault("RuleSetName")
  valid_603412 = validateParameter(valid_603412, JString, required = true,
                                 default = nil)
  if valid_603412 != nil:
    section.add "RuleSetName", valid_603412
  var valid_603413 = formData.getOrDefault("Rule.Actions")
  valid_603413 = validateParameter(valid_603413, JArray, required = false,
                                 default = nil)
  if valid_603413 != nil:
    section.add "Rule.Actions", valid_603413
  var valid_603414 = formData.getOrDefault("Rule.Name")
  valid_603414 = validateParameter(valid_603414, JString, required = false,
                                 default = nil)
  if valid_603414 != nil:
    section.add "Rule.Name", valid_603414
  var valid_603415 = formData.getOrDefault("Rule.ScanEnabled")
  valid_603415 = validateParameter(valid_603415, JString, required = false,
                                 default = nil)
  if valid_603415 != nil:
    section.add "Rule.ScanEnabled", valid_603415
  var valid_603416 = formData.getOrDefault("Rule.TlsPolicy")
  valid_603416 = validateParameter(valid_603416, JString, required = false,
                                 default = nil)
  if valid_603416 != nil:
    section.add "Rule.TlsPolicy", valid_603416
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603417: Call_PostUpdateReceiptRule_603398; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates a receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603417.validator(path, query, header, formData, body)
  let scheme = call_603417.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603417.url(scheme.get, call_603417.host, call_603417.base,
                         call_603417.route, valid.getOrDefault("path"))
  result = hook(call_603417, url, valid)

proc call*(call_603418: Call_PostUpdateReceiptRule_603398; RuleSetName: string;
          RuleRecipients: JsonNode = nil; RuleEnabled: string = "";
          Action: string = "UpdateReceiptRule"; RuleActions: JsonNode = nil;
          RuleName: string = ""; RuleScanEnabled: string = "";
          RuleTlsPolicy: string = ""; Version: string = "2010-12-01"): Recallable =
  ## postUpdateReceiptRule
  ## <p>Updates a receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleRecipients: JArray
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   RuleEnabled: string
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   Action: string (required)
  ##   RuleActions: JArray
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   RuleName: string
  ##           : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   RuleScanEnabled: string
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   RuleTlsPolicy: string
  ##                : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   Version: string (required)
  var query_603419 = newJObject()
  var formData_603420 = newJObject()
  if RuleRecipients != nil:
    formData_603420.add "Rule.Recipients", RuleRecipients
  add(formData_603420, "Rule.Enabled", newJString(RuleEnabled))
  add(formData_603420, "RuleSetName", newJString(RuleSetName))
  add(query_603419, "Action", newJString(Action))
  if RuleActions != nil:
    formData_603420.add "Rule.Actions", RuleActions
  add(formData_603420, "Rule.Name", newJString(RuleName))
  add(formData_603420, "Rule.ScanEnabled", newJString(RuleScanEnabled))
  add(formData_603420, "Rule.TlsPolicy", newJString(RuleTlsPolicy))
  add(query_603419, "Version", newJString(Version))
  result = call_603418.call(nil, query_603419, nil, formData_603420, nil)

var postUpdateReceiptRule* = Call_PostUpdateReceiptRule_603398(
    name: "postUpdateReceiptRule", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=UpdateReceiptRule",
    validator: validate_PostUpdateReceiptRule_603399, base: "/",
    url: url_PostUpdateReceiptRule_603400, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateReceiptRule_603376 = ref object of OpenApiRestCall_600426
proc url_GetUpdateReceiptRule_603378(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateReceiptRule_603377(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates a receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Rule.ScanEnabled: JString
  ##                   : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   Rule.Name: JString
  ##            : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Rule.Enabled: JString
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   Rule.TlsPolicy: JString
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   Action: JString (required)
  ##   Rule.Actions: JArray
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   Rule.Recipients: JArray
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   Version: JString (required)
  section = newJObject()
  var valid_603379 = query.getOrDefault("Rule.ScanEnabled")
  valid_603379 = validateParameter(valid_603379, JString, required = false,
                                 default = nil)
  if valid_603379 != nil:
    section.add "Rule.ScanEnabled", valid_603379
  var valid_603380 = query.getOrDefault("Rule.Name")
  valid_603380 = validateParameter(valid_603380, JString, required = false,
                                 default = nil)
  if valid_603380 != nil:
    section.add "Rule.Name", valid_603380
  var valid_603381 = query.getOrDefault("Rule.Enabled")
  valid_603381 = validateParameter(valid_603381, JString, required = false,
                                 default = nil)
  if valid_603381 != nil:
    section.add "Rule.Enabled", valid_603381
  var valid_603382 = query.getOrDefault("Rule.TlsPolicy")
  valid_603382 = validateParameter(valid_603382, JString, required = false,
                                 default = nil)
  if valid_603382 != nil:
    section.add "Rule.TlsPolicy", valid_603382
  assert query != nil,
        "query argument is necessary due to required `RuleSetName` field"
  var valid_603383 = query.getOrDefault("RuleSetName")
  valid_603383 = validateParameter(valid_603383, JString, required = true,
                                 default = nil)
  if valid_603383 != nil:
    section.add "RuleSetName", valid_603383
  var valid_603384 = query.getOrDefault("Action")
  valid_603384 = validateParameter(valid_603384, JString, required = true,
                                 default = newJString("UpdateReceiptRule"))
  if valid_603384 != nil:
    section.add "Action", valid_603384
  var valid_603385 = query.getOrDefault("Rule.Actions")
  valid_603385 = validateParameter(valid_603385, JArray, required = false,
                                 default = nil)
  if valid_603385 != nil:
    section.add "Rule.Actions", valid_603385
  var valid_603386 = query.getOrDefault("Rule.Recipients")
  valid_603386 = validateParameter(valid_603386, JArray, required = false,
                                 default = nil)
  if valid_603386 != nil:
    section.add "Rule.Recipients", valid_603386
  var valid_603387 = query.getOrDefault("Version")
  valid_603387 = validateParameter(valid_603387, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603387 != nil:
    section.add "Version", valid_603387
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603388 = header.getOrDefault("X-Amz-Date")
  valid_603388 = validateParameter(valid_603388, JString, required = false,
                                 default = nil)
  if valid_603388 != nil:
    section.add "X-Amz-Date", valid_603388
  var valid_603389 = header.getOrDefault("X-Amz-Security-Token")
  valid_603389 = validateParameter(valid_603389, JString, required = false,
                                 default = nil)
  if valid_603389 != nil:
    section.add "X-Amz-Security-Token", valid_603389
  var valid_603390 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603390 = validateParameter(valid_603390, JString, required = false,
                                 default = nil)
  if valid_603390 != nil:
    section.add "X-Amz-Content-Sha256", valid_603390
  var valid_603391 = header.getOrDefault("X-Amz-Algorithm")
  valid_603391 = validateParameter(valid_603391, JString, required = false,
                                 default = nil)
  if valid_603391 != nil:
    section.add "X-Amz-Algorithm", valid_603391
  var valid_603392 = header.getOrDefault("X-Amz-Signature")
  valid_603392 = validateParameter(valid_603392, JString, required = false,
                                 default = nil)
  if valid_603392 != nil:
    section.add "X-Amz-Signature", valid_603392
  var valid_603393 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603393 = validateParameter(valid_603393, JString, required = false,
                                 default = nil)
  if valid_603393 != nil:
    section.add "X-Amz-SignedHeaders", valid_603393
  var valid_603394 = header.getOrDefault("X-Amz-Credential")
  valid_603394 = validateParameter(valid_603394, JString, required = false,
                                 default = nil)
  if valid_603394 != nil:
    section.add "X-Amz-Credential", valid_603394
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603395: Call_GetUpdateReceiptRule_603376; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates a receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603395.validator(path, query, header, formData, body)
  let scheme = call_603395.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603395.url(scheme.get, call_603395.host, call_603395.base,
                         call_603395.route, valid.getOrDefault("path"))
  result = hook(call_603395, url, valid)

proc call*(call_603396: Call_GetUpdateReceiptRule_603376; RuleSetName: string;
          RuleScanEnabled: string = ""; RuleName: string = ""; RuleEnabled: string = "";
          RuleTlsPolicy: string = ""; Action: string = "UpdateReceiptRule";
          RuleActions: JsonNode = nil; RuleRecipients: JsonNode = nil;
          Version: string = "2010-12-01"): Recallable =
  ## getUpdateReceiptRule
  ## <p>Updates a receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleScanEnabled: string
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   RuleName: string
  ##           : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   RuleEnabled: string
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   RuleTlsPolicy: string
  ##                : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   Action: string (required)
  ##   RuleActions: JArray
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   RuleRecipients: JArray
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   Version: string (required)
  var query_603397 = newJObject()
  add(query_603397, "Rule.ScanEnabled", newJString(RuleScanEnabled))
  add(query_603397, "Rule.Name", newJString(RuleName))
  add(query_603397, "Rule.Enabled", newJString(RuleEnabled))
  add(query_603397, "Rule.TlsPolicy", newJString(RuleTlsPolicy))
  add(query_603397, "RuleSetName", newJString(RuleSetName))
  add(query_603397, "Action", newJString(Action))
  if RuleActions != nil:
    query_603397.add "Rule.Actions", RuleActions
  if RuleRecipients != nil:
    query_603397.add "Rule.Recipients", RuleRecipients
  add(query_603397, "Version", newJString(Version))
  result = call_603396.call(nil, query_603397, nil, nil, nil)

var getUpdateReceiptRule* = Call_GetUpdateReceiptRule_603376(
    name: "getUpdateReceiptRule", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=UpdateReceiptRule",
    validator: validate_GetUpdateReceiptRule_603377, base: "/",
    url: url_GetUpdateReceiptRule_603378, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateTemplate_603440 = ref object of OpenApiRestCall_600426
proc url_PostUpdateTemplate_603442(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateTemplate_603441(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603443 = query.getOrDefault("Action")
  valid_603443 = validateParameter(valid_603443, JString, required = true,
                                 default = newJString("UpdateTemplate"))
  if valid_603443 != nil:
    section.add "Action", valid_603443
  var valid_603444 = query.getOrDefault("Version")
  valid_603444 = validateParameter(valid_603444, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603444 != nil:
    section.add "Version", valid_603444
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603445 = header.getOrDefault("X-Amz-Date")
  valid_603445 = validateParameter(valid_603445, JString, required = false,
                                 default = nil)
  if valid_603445 != nil:
    section.add "X-Amz-Date", valid_603445
  var valid_603446 = header.getOrDefault("X-Amz-Security-Token")
  valid_603446 = validateParameter(valid_603446, JString, required = false,
                                 default = nil)
  if valid_603446 != nil:
    section.add "X-Amz-Security-Token", valid_603446
  var valid_603447 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603447 = validateParameter(valid_603447, JString, required = false,
                                 default = nil)
  if valid_603447 != nil:
    section.add "X-Amz-Content-Sha256", valid_603447
  var valid_603448 = header.getOrDefault("X-Amz-Algorithm")
  valid_603448 = validateParameter(valid_603448, JString, required = false,
                                 default = nil)
  if valid_603448 != nil:
    section.add "X-Amz-Algorithm", valid_603448
  var valid_603449 = header.getOrDefault("X-Amz-Signature")
  valid_603449 = validateParameter(valid_603449, JString, required = false,
                                 default = nil)
  if valid_603449 != nil:
    section.add "X-Amz-Signature", valid_603449
  var valid_603450 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603450 = validateParameter(valid_603450, JString, required = false,
                                 default = nil)
  if valid_603450 != nil:
    section.add "X-Amz-SignedHeaders", valid_603450
  var valid_603451 = header.getOrDefault("X-Amz-Credential")
  valid_603451 = validateParameter(valid_603451, JString, required = false,
                                 default = nil)
  if valid_603451 != nil:
    section.add "X-Amz-Credential", valid_603451
  result.add "header", section
  ## parameters in `formData` object:
  ##   Template.HtmlPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   Template.TemplateName: JString
  ##                        : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   Template.TextPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Template.SubjectPart: JString
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  section = newJObject()
  var valid_603452 = formData.getOrDefault("Template.HtmlPart")
  valid_603452 = validateParameter(valid_603452, JString, required = false,
                                 default = nil)
  if valid_603452 != nil:
    section.add "Template.HtmlPart", valid_603452
  var valid_603453 = formData.getOrDefault("Template.TemplateName")
  valid_603453 = validateParameter(valid_603453, JString, required = false,
                                 default = nil)
  if valid_603453 != nil:
    section.add "Template.TemplateName", valid_603453
  var valid_603454 = formData.getOrDefault("Template.TextPart")
  valid_603454 = validateParameter(valid_603454, JString, required = false,
                                 default = nil)
  if valid_603454 != nil:
    section.add "Template.TextPart", valid_603454
  var valid_603455 = formData.getOrDefault("Template.SubjectPart")
  valid_603455 = validateParameter(valid_603455, JString, required = false,
                                 default = nil)
  if valid_603455 != nil:
    section.add "Template.SubjectPart", valid_603455
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603456: Call_PostUpdateTemplate_603440; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603456.validator(path, query, header, formData, body)
  let scheme = call_603456.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603456.url(scheme.get, call_603456.host, call_603456.base,
                         call_603456.route, valid.getOrDefault("path"))
  result = hook(call_603456, url, valid)

proc call*(call_603457: Call_PostUpdateTemplate_603440;
          Action: string = "UpdateTemplate"; TemplateHtmlPart: string = "";
          TemplateTemplateName: string = ""; TemplateTextPart: string = "";
          Version: string = "2010-12-01"; TemplateSubjectPart: string = ""): Recallable =
  ## postUpdateTemplate
  ## <p>Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateHtmlPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   TemplateTemplateName: string
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   TemplateTextPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Version: string (required)
  ##   TemplateSubjectPart: string
  ##                      : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  var query_603458 = newJObject()
  var formData_603459 = newJObject()
  add(query_603458, "Action", newJString(Action))
  add(formData_603459, "Template.HtmlPart", newJString(TemplateHtmlPart))
  add(formData_603459, "Template.TemplateName", newJString(TemplateTemplateName))
  add(formData_603459, "Template.TextPart", newJString(TemplateTextPart))
  add(query_603458, "Version", newJString(Version))
  add(formData_603459, "Template.SubjectPart", newJString(TemplateSubjectPart))
  result = call_603457.call(nil, query_603458, nil, formData_603459, nil)

var postUpdateTemplate* = Call_PostUpdateTemplate_603440(
    name: "postUpdateTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=UpdateTemplate",
    validator: validate_PostUpdateTemplate_603441, base: "/",
    url: url_PostUpdateTemplate_603442, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateTemplate_603421 = ref object of OpenApiRestCall_600426
proc url_GetUpdateTemplate_603423(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateTemplate_603422(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Template.TemplateName: JString
  ##                        : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   Action: JString (required)
  ##   Template.SubjectPart: JString
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  ##   Template.HtmlPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   Template.TextPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Version: JString (required)
  section = newJObject()
  var valid_603424 = query.getOrDefault("Template.TemplateName")
  valid_603424 = validateParameter(valid_603424, JString, required = false,
                                 default = nil)
  if valid_603424 != nil:
    section.add "Template.TemplateName", valid_603424
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603425 = query.getOrDefault("Action")
  valid_603425 = validateParameter(valid_603425, JString, required = true,
                                 default = newJString("UpdateTemplate"))
  if valid_603425 != nil:
    section.add "Action", valid_603425
  var valid_603426 = query.getOrDefault("Template.SubjectPart")
  valid_603426 = validateParameter(valid_603426, JString, required = false,
                                 default = nil)
  if valid_603426 != nil:
    section.add "Template.SubjectPart", valid_603426
  var valid_603427 = query.getOrDefault("Template.HtmlPart")
  valid_603427 = validateParameter(valid_603427, JString, required = false,
                                 default = nil)
  if valid_603427 != nil:
    section.add "Template.HtmlPart", valid_603427
  var valid_603428 = query.getOrDefault("Template.TextPart")
  valid_603428 = validateParameter(valid_603428, JString, required = false,
                                 default = nil)
  if valid_603428 != nil:
    section.add "Template.TextPart", valid_603428
  var valid_603429 = query.getOrDefault("Version")
  valid_603429 = validateParameter(valid_603429, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603429 != nil:
    section.add "Version", valid_603429
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603430 = header.getOrDefault("X-Amz-Date")
  valid_603430 = validateParameter(valid_603430, JString, required = false,
                                 default = nil)
  if valid_603430 != nil:
    section.add "X-Amz-Date", valid_603430
  var valid_603431 = header.getOrDefault("X-Amz-Security-Token")
  valid_603431 = validateParameter(valid_603431, JString, required = false,
                                 default = nil)
  if valid_603431 != nil:
    section.add "X-Amz-Security-Token", valid_603431
  var valid_603432 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603432 = validateParameter(valid_603432, JString, required = false,
                                 default = nil)
  if valid_603432 != nil:
    section.add "X-Amz-Content-Sha256", valid_603432
  var valid_603433 = header.getOrDefault("X-Amz-Algorithm")
  valid_603433 = validateParameter(valid_603433, JString, required = false,
                                 default = nil)
  if valid_603433 != nil:
    section.add "X-Amz-Algorithm", valid_603433
  var valid_603434 = header.getOrDefault("X-Amz-Signature")
  valid_603434 = validateParameter(valid_603434, JString, required = false,
                                 default = nil)
  if valid_603434 != nil:
    section.add "X-Amz-Signature", valid_603434
  var valid_603435 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603435 = validateParameter(valid_603435, JString, required = false,
                                 default = nil)
  if valid_603435 != nil:
    section.add "X-Amz-SignedHeaders", valid_603435
  var valid_603436 = header.getOrDefault("X-Amz-Credential")
  valid_603436 = validateParameter(valid_603436, JString, required = false,
                                 default = nil)
  if valid_603436 != nil:
    section.add "X-Amz-Credential", valid_603436
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603437: Call_GetUpdateTemplate_603421; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603437.validator(path, query, header, formData, body)
  let scheme = call_603437.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603437.url(scheme.get, call_603437.host, call_603437.base,
                         call_603437.route, valid.getOrDefault("path"))
  result = hook(call_603437, url, valid)

proc call*(call_603438: Call_GetUpdateTemplate_603421;
          TemplateTemplateName: string = ""; Action: string = "UpdateTemplate";
          TemplateSubjectPart: string = ""; TemplateHtmlPart: string = "";
          TemplateTextPart: string = ""; Version: string = "2010-12-01"): Recallable =
  ## getUpdateTemplate
  ## <p>Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateTemplateName: string
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   Action: string (required)
  ##   TemplateSubjectPart: string
  ##                      : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  ##   TemplateHtmlPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   TemplateTextPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Version: string (required)
  var query_603439 = newJObject()
  add(query_603439, "Template.TemplateName", newJString(TemplateTemplateName))
  add(query_603439, "Action", newJString(Action))
  add(query_603439, "Template.SubjectPart", newJString(TemplateSubjectPart))
  add(query_603439, "Template.HtmlPart", newJString(TemplateHtmlPart))
  add(query_603439, "Template.TextPart", newJString(TemplateTextPart))
  add(query_603439, "Version", newJString(Version))
  result = call_603438.call(nil, query_603439, nil, nil, nil)

var getUpdateTemplate* = Call_GetUpdateTemplate_603421(name: "getUpdateTemplate",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=UpdateTemplate", validator: validate_GetUpdateTemplate_603422,
    base: "/", url: url_GetUpdateTemplate_603423,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostVerifyDomainDkim_603476 = ref object of OpenApiRestCall_600426
proc url_PostVerifyDomainDkim_603478(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostVerifyDomainDkim_603477(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a set of DKIM tokens for a domain identity.</p> <important> <p>When you execute the <code>VerifyDomainDkim</code> operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the <code>VerifyDomainIdentity</code> operation. However, you can't send email from the domain until you either successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">verify it</a> or you successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">set up DKIM for it</a>.</p> </important> <p>You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM.</p> <p>To create the CNAME records for DKIM authentication, use the following values:</p> <ul> <li> <p> <b>Name</b>: <i>token</i>._domainkey.<i>example.com</i> </p> </li> <li> <p> <b>Type</b>: CNAME</p> </li> <li> <p> <b>Value</b>: <i>token</i>.dkim.amazonses.com</p> </li> </ul> <p>In the preceding example, replace <i>token</i> with one of the tokens that are generated when you execute this operation. Replace <i>example.com</i> with your domain. Repeat this process for each token that's generated by this operation.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603479 = query.getOrDefault("Action")
  valid_603479 = validateParameter(valid_603479, JString, required = true,
                                 default = newJString("VerifyDomainDkim"))
  if valid_603479 != nil:
    section.add "Action", valid_603479
  var valid_603480 = query.getOrDefault("Version")
  valid_603480 = validateParameter(valid_603480, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603480 != nil:
    section.add "Version", valid_603480
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603481 = header.getOrDefault("X-Amz-Date")
  valid_603481 = validateParameter(valid_603481, JString, required = false,
                                 default = nil)
  if valid_603481 != nil:
    section.add "X-Amz-Date", valid_603481
  var valid_603482 = header.getOrDefault("X-Amz-Security-Token")
  valid_603482 = validateParameter(valid_603482, JString, required = false,
                                 default = nil)
  if valid_603482 != nil:
    section.add "X-Amz-Security-Token", valid_603482
  var valid_603483 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603483 = validateParameter(valid_603483, JString, required = false,
                                 default = nil)
  if valid_603483 != nil:
    section.add "X-Amz-Content-Sha256", valid_603483
  var valid_603484 = header.getOrDefault("X-Amz-Algorithm")
  valid_603484 = validateParameter(valid_603484, JString, required = false,
                                 default = nil)
  if valid_603484 != nil:
    section.add "X-Amz-Algorithm", valid_603484
  var valid_603485 = header.getOrDefault("X-Amz-Signature")
  valid_603485 = validateParameter(valid_603485, JString, required = false,
                                 default = nil)
  if valid_603485 != nil:
    section.add "X-Amz-Signature", valid_603485
  var valid_603486 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603486 = validateParameter(valid_603486, JString, required = false,
                                 default = nil)
  if valid_603486 != nil:
    section.add "X-Amz-SignedHeaders", valid_603486
  var valid_603487 = header.getOrDefault("X-Amz-Credential")
  valid_603487 = validateParameter(valid_603487, JString, required = false,
                                 default = nil)
  if valid_603487 != nil:
    section.add "X-Amz-Credential", valid_603487
  result.add "header", section
  ## parameters in `formData` object:
  ##   Domain: JString (required)
  ##         : The name of the domain to be verified for Easy DKIM signing.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Domain` field"
  var valid_603488 = formData.getOrDefault("Domain")
  valid_603488 = validateParameter(valid_603488, JString, required = true,
                                 default = nil)
  if valid_603488 != nil:
    section.add "Domain", valid_603488
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603489: Call_PostVerifyDomainDkim_603476; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a set of DKIM tokens for a domain identity.</p> <important> <p>When you execute the <code>VerifyDomainDkim</code> operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the <code>VerifyDomainIdentity</code> operation. However, you can't send email from the domain until you either successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">verify it</a> or you successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">set up DKIM for it</a>.</p> </important> <p>You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM.</p> <p>To create the CNAME records for DKIM authentication, use the following values:</p> <ul> <li> <p> <b>Name</b>: <i>token</i>._domainkey.<i>example.com</i> </p> </li> <li> <p> <b>Type</b>: CNAME</p> </li> <li> <p> <b>Value</b>: <i>token</i>.dkim.amazonses.com</p> </li> </ul> <p>In the preceding example, replace <i>token</i> with one of the tokens that are generated when you execute this operation. Replace <i>example.com</i> with your domain. Repeat this process for each token that's generated by this operation.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603489.validator(path, query, header, formData, body)
  let scheme = call_603489.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603489.url(scheme.get, call_603489.host, call_603489.base,
                         call_603489.route, valid.getOrDefault("path"))
  result = hook(call_603489, url, valid)

proc call*(call_603490: Call_PostVerifyDomainDkim_603476; Domain: string;
          Action: string = "VerifyDomainDkim"; Version: string = "2010-12-01"): Recallable =
  ## postVerifyDomainDkim
  ## <p>Returns a set of DKIM tokens for a domain identity.</p> <important> <p>When you execute the <code>VerifyDomainDkim</code> operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the <code>VerifyDomainIdentity</code> operation. However, you can't send email from the domain until you either successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">verify it</a> or you successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">set up DKIM for it</a>.</p> </important> <p>You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM.</p> <p>To create the CNAME records for DKIM authentication, use the following values:</p> <ul> <li> <p> <b>Name</b>: <i>token</i>._domainkey.<i>example.com</i> </p> </li> <li> <p> <b>Type</b>: CNAME</p> </li> <li> <p> <b>Value</b>: <i>token</i>.dkim.amazonses.com</p> </li> </ul> <p>In the preceding example, replace <i>token</i> with one of the tokens that are generated when you execute this operation. Replace <i>example.com</i> with your domain. Repeat this process for each token that's generated by this operation.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Domain: string (required)
  ##         : The name of the domain to be verified for Easy DKIM signing.
  ##   Version: string (required)
  var query_603491 = newJObject()
  var formData_603492 = newJObject()
  add(query_603491, "Action", newJString(Action))
  add(formData_603492, "Domain", newJString(Domain))
  add(query_603491, "Version", newJString(Version))
  result = call_603490.call(nil, query_603491, nil, formData_603492, nil)

var postVerifyDomainDkim* = Call_PostVerifyDomainDkim_603476(
    name: "postVerifyDomainDkim", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=VerifyDomainDkim",
    validator: validate_PostVerifyDomainDkim_603477, base: "/",
    url: url_PostVerifyDomainDkim_603478, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetVerifyDomainDkim_603460 = ref object of OpenApiRestCall_600426
proc url_GetVerifyDomainDkim_603462(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetVerifyDomainDkim_603461(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Returns a set of DKIM tokens for a domain identity.</p> <important> <p>When you execute the <code>VerifyDomainDkim</code> operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the <code>VerifyDomainIdentity</code> operation. However, you can't send email from the domain until you either successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">verify it</a> or you successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">set up DKIM for it</a>.</p> </important> <p>You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM.</p> <p>To create the CNAME records for DKIM authentication, use the following values:</p> <ul> <li> <p> <b>Name</b>: <i>token</i>._domainkey.<i>example.com</i> </p> </li> <li> <p> <b>Type</b>: CNAME</p> </li> <li> <p> <b>Value</b>: <i>token</i>.dkim.amazonses.com</p> </li> </ul> <p>In the preceding example, replace <i>token</i> with one of the tokens that are generated when you execute this operation. Replace <i>example.com</i> with your domain. Repeat this process for each token that's generated by this operation.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Domain: JString (required)
  ##         : The name of the domain to be verified for Easy DKIM signing.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603463 = query.getOrDefault("Action")
  valid_603463 = validateParameter(valid_603463, JString, required = true,
                                 default = newJString("VerifyDomainDkim"))
  if valid_603463 != nil:
    section.add "Action", valid_603463
  var valid_603464 = query.getOrDefault("Domain")
  valid_603464 = validateParameter(valid_603464, JString, required = true,
                                 default = nil)
  if valid_603464 != nil:
    section.add "Domain", valid_603464
  var valid_603465 = query.getOrDefault("Version")
  valid_603465 = validateParameter(valid_603465, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603465 != nil:
    section.add "Version", valid_603465
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603466 = header.getOrDefault("X-Amz-Date")
  valid_603466 = validateParameter(valid_603466, JString, required = false,
                                 default = nil)
  if valid_603466 != nil:
    section.add "X-Amz-Date", valid_603466
  var valid_603467 = header.getOrDefault("X-Amz-Security-Token")
  valid_603467 = validateParameter(valid_603467, JString, required = false,
                                 default = nil)
  if valid_603467 != nil:
    section.add "X-Amz-Security-Token", valid_603467
  var valid_603468 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603468 = validateParameter(valid_603468, JString, required = false,
                                 default = nil)
  if valid_603468 != nil:
    section.add "X-Amz-Content-Sha256", valid_603468
  var valid_603469 = header.getOrDefault("X-Amz-Algorithm")
  valid_603469 = validateParameter(valid_603469, JString, required = false,
                                 default = nil)
  if valid_603469 != nil:
    section.add "X-Amz-Algorithm", valid_603469
  var valid_603470 = header.getOrDefault("X-Amz-Signature")
  valid_603470 = validateParameter(valid_603470, JString, required = false,
                                 default = nil)
  if valid_603470 != nil:
    section.add "X-Amz-Signature", valid_603470
  var valid_603471 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603471 = validateParameter(valid_603471, JString, required = false,
                                 default = nil)
  if valid_603471 != nil:
    section.add "X-Amz-SignedHeaders", valid_603471
  var valid_603472 = header.getOrDefault("X-Amz-Credential")
  valid_603472 = validateParameter(valid_603472, JString, required = false,
                                 default = nil)
  if valid_603472 != nil:
    section.add "X-Amz-Credential", valid_603472
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603473: Call_GetVerifyDomainDkim_603460; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a set of DKIM tokens for a domain identity.</p> <important> <p>When you execute the <code>VerifyDomainDkim</code> operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the <code>VerifyDomainIdentity</code> operation. However, you can't send email from the domain until you either successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">verify it</a> or you successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">set up DKIM for it</a>.</p> </important> <p>You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM.</p> <p>To create the CNAME records for DKIM authentication, use the following values:</p> <ul> <li> <p> <b>Name</b>: <i>token</i>._domainkey.<i>example.com</i> </p> </li> <li> <p> <b>Type</b>: CNAME</p> </li> <li> <p> <b>Value</b>: <i>token</i>.dkim.amazonses.com</p> </li> </ul> <p>In the preceding example, replace <i>token</i> with one of the tokens that are generated when you execute this operation. Replace <i>example.com</i> with your domain. Repeat this process for each token that's generated by this operation.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603473.validator(path, query, header, formData, body)
  let scheme = call_603473.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603473.url(scheme.get, call_603473.host, call_603473.base,
                         call_603473.route, valid.getOrDefault("path"))
  result = hook(call_603473, url, valid)

proc call*(call_603474: Call_GetVerifyDomainDkim_603460; Domain: string;
          Action: string = "VerifyDomainDkim"; Version: string = "2010-12-01"): Recallable =
  ## getVerifyDomainDkim
  ## <p>Returns a set of DKIM tokens for a domain identity.</p> <important> <p>When you execute the <code>VerifyDomainDkim</code> operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the <code>VerifyDomainIdentity</code> operation. However, you can't send email from the domain until you either successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">verify it</a> or you successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">set up DKIM for it</a>.</p> </important> <p>You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM.</p> <p>To create the CNAME records for DKIM authentication, use the following values:</p> <ul> <li> <p> <b>Name</b>: <i>token</i>._domainkey.<i>example.com</i> </p> </li> <li> <p> <b>Type</b>: CNAME</p> </li> <li> <p> <b>Value</b>: <i>token</i>.dkim.amazonses.com</p> </li> </ul> <p>In the preceding example, replace <i>token</i> with one of the tokens that are generated when you execute this operation. Replace <i>example.com</i> with your domain. Repeat this process for each token that's generated by this operation.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Domain: string (required)
  ##         : The name of the domain to be verified for Easy DKIM signing.
  ##   Version: string (required)
  var query_603475 = newJObject()
  add(query_603475, "Action", newJString(Action))
  add(query_603475, "Domain", newJString(Domain))
  add(query_603475, "Version", newJString(Version))
  result = call_603474.call(nil, query_603475, nil, nil, nil)

var getVerifyDomainDkim* = Call_GetVerifyDomainDkim_603460(
    name: "getVerifyDomainDkim", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=VerifyDomainDkim",
    validator: validate_GetVerifyDomainDkim_603461, base: "/",
    url: url_GetVerifyDomainDkim_603462, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostVerifyDomainIdentity_603509 = ref object of OpenApiRestCall_600426
proc url_PostVerifyDomainIdentity_603511(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostVerifyDomainIdentity_603510(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds a domain to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. For more information about verifying domains, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603512 = query.getOrDefault("Action")
  valid_603512 = validateParameter(valid_603512, JString, required = true,
                                 default = newJString("VerifyDomainIdentity"))
  if valid_603512 != nil:
    section.add "Action", valid_603512
  var valid_603513 = query.getOrDefault("Version")
  valid_603513 = validateParameter(valid_603513, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603513 != nil:
    section.add "Version", valid_603513
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603514 = header.getOrDefault("X-Amz-Date")
  valid_603514 = validateParameter(valid_603514, JString, required = false,
                                 default = nil)
  if valid_603514 != nil:
    section.add "X-Amz-Date", valid_603514
  var valid_603515 = header.getOrDefault("X-Amz-Security-Token")
  valid_603515 = validateParameter(valid_603515, JString, required = false,
                                 default = nil)
  if valid_603515 != nil:
    section.add "X-Amz-Security-Token", valid_603515
  var valid_603516 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603516 = validateParameter(valid_603516, JString, required = false,
                                 default = nil)
  if valid_603516 != nil:
    section.add "X-Amz-Content-Sha256", valid_603516
  var valid_603517 = header.getOrDefault("X-Amz-Algorithm")
  valid_603517 = validateParameter(valid_603517, JString, required = false,
                                 default = nil)
  if valid_603517 != nil:
    section.add "X-Amz-Algorithm", valid_603517
  var valid_603518 = header.getOrDefault("X-Amz-Signature")
  valid_603518 = validateParameter(valid_603518, JString, required = false,
                                 default = nil)
  if valid_603518 != nil:
    section.add "X-Amz-Signature", valid_603518
  var valid_603519 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603519 = validateParameter(valid_603519, JString, required = false,
                                 default = nil)
  if valid_603519 != nil:
    section.add "X-Amz-SignedHeaders", valid_603519
  var valid_603520 = header.getOrDefault("X-Amz-Credential")
  valid_603520 = validateParameter(valid_603520, JString, required = false,
                                 default = nil)
  if valid_603520 != nil:
    section.add "X-Amz-Credential", valid_603520
  result.add "header", section
  ## parameters in `formData` object:
  ##   Domain: JString (required)
  ##         : The domain to be verified.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Domain` field"
  var valid_603521 = formData.getOrDefault("Domain")
  valid_603521 = validateParameter(valid_603521, JString, required = true,
                                 default = nil)
  if valid_603521 != nil:
    section.add "Domain", valid_603521
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603522: Call_PostVerifyDomainIdentity_603509; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds a domain to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. For more information about verifying domains, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603522.validator(path, query, header, formData, body)
  let scheme = call_603522.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603522.url(scheme.get, call_603522.host, call_603522.base,
                         call_603522.route, valid.getOrDefault("path"))
  result = hook(call_603522, url, valid)

proc call*(call_603523: Call_PostVerifyDomainIdentity_603509; Domain: string;
          Action: string = "VerifyDomainIdentity"; Version: string = "2010-12-01"): Recallable =
  ## postVerifyDomainIdentity
  ## <p>Adds a domain to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. For more information about verifying domains, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Domain: string (required)
  ##         : The domain to be verified.
  ##   Version: string (required)
  var query_603524 = newJObject()
  var formData_603525 = newJObject()
  add(query_603524, "Action", newJString(Action))
  add(formData_603525, "Domain", newJString(Domain))
  add(query_603524, "Version", newJString(Version))
  result = call_603523.call(nil, query_603524, nil, formData_603525, nil)

var postVerifyDomainIdentity* = Call_PostVerifyDomainIdentity_603509(
    name: "postVerifyDomainIdentity", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=VerifyDomainIdentity",
    validator: validate_PostVerifyDomainIdentity_603510, base: "/",
    url: url_PostVerifyDomainIdentity_603511, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetVerifyDomainIdentity_603493 = ref object of OpenApiRestCall_600426
proc url_GetVerifyDomainIdentity_603495(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetVerifyDomainIdentity_603494(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds a domain to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. For more information about verifying domains, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Domain: JString (required)
  ##         : The domain to be verified.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603496 = query.getOrDefault("Action")
  valid_603496 = validateParameter(valid_603496, JString, required = true,
                                 default = newJString("VerifyDomainIdentity"))
  if valid_603496 != nil:
    section.add "Action", valid_603496
  var valid_603497 = query.getOrDefault("Domain")
  valid_603497 = validateParameter(valid_603497, JString, required = true,
                                 default = nil)
  if valid_603497 != nil:
    section.add "Domain", valid_603497
  var valid_603498 = query.getOrDefault("Version")
  valid_603498 = validateParameter(valid_603498, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603498 != nil:
    section.add "Version", valid_603498
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603499 = header.getOrDefault("X-Amz-Date")
  valid_603499 = validateParameter(valid_603499, JString, required = false,
                                 default = nil)
  if valid_603499 != nil:
    section.add "X-Amz-Date", valid_603499
  var valid_603500 = header.getOrDefault("X-Amz-Security-Token")
  valid_603500 = validateParameter(valid_603500, JString, required = false,
                                 default = nil)
  if valid_603500 != nil:
    section.add "X-Amz-Security-Token", valid_603500
  var valid_603501 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603501 = validateParameter(valid_603501, JString, required = false,
                                 default = nil)
  if valid_603501 != nil:
    section.add "X-Amz-Content-Sha256", valid_603501
  var valid_603502 = header.getOrDefault("X-Amz-Algorithm")
  valid_603502 = validateParameter(valid_603502, JString, required = false,
                                 default = nil)
  if valid_603502 != nil:
    section.add "X-Amz-Algorithm", valid_603502
  var valid_603503 = header.getOrDefault("X-Amz-Signature")
  valid_603503 = validateParameter(valid_603503, JString, required = false,
                                 default = nil)
  if valid_603503 != nil:
    section.add "X-Amz-Signature", valid_603503
  var valid_603504 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603504 = validateParameter(valid_603504, JString, required = false,
                                 default = nil)
  if valid_603504 != nil:
    section.add "X-Amz-SignedHeaders", valid_603504
  var valid_603505 = header.getOrDefault("X-Amz-Credential")
  valid_603505 = validateParameter(valid_603505, JString, required = false,
                                 default = nil)
  if valid_603505 != nil:
    section.add "X-Amz-Credential", valid_603505
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603506: Call_GetVerifyDomainIdentity_603493; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds a domain to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. For more information about verifying domains, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603506.validator(path, query, header, formData, body)
  let scheme = call_603506.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603506.url(scheme.get, call_603506.host, call_603506.base,
                         call_603506.route, valid.getOrDefault("path"))
  result = hook(call_603506, url, valid)

proc call*(call_603507: Call_GetVerifyDomainIdentity_603493; Domain: string;
          Action: string = "VerifyDomainIdentity"; Version: string = "2010-12-01"): Recallable =
  ## getVerifyDomainIdentity
  ## <p>Adds a domain to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. For more information about verifying domains, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Domain: string (required)
  ##         : The domain to be verified.
  ##   Version: string (required)
  var query_603508 = newJObject()
  add(query_603508, "Action", newJString(Action))
  add(query_603508, "Domain", newJString(Domain))
  add(query_603508, "Version", newJString(Version))
  result = call_603507.call(nil, query_603508, nil, nil, nil)

var getVerifyDomainIdentity* = Call_GetVerifyDomainIdentity_603493(
    name: "getVerifyDomainIdentity", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=VerifyDomainIdentity",
    validator: validate_GetVerifyDomainIdentity_603494, base: "/",
    url: url_GetVerifyDomainIdentity_603495, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostVerifyEmailAddress_603542 = ref object of OpenApiRestCall_600426
proc url_PostVerifyEmailAddress_603544(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostVerifyEmailAddress_603543(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deprecated. Use the <code>VerifyEmailIdentity</code> operation to verify a new email address.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603545 = query.getOrDefault("Action")
  valid_603545 = validateParameter(valid_603545, JString, required = true,
                                 default = newJString("VerifyEmailAddress"))
  if valid_603545 != nil:
    section.add "Action", valid_603545
  var valid_603546 = query.getOrDefault("Version")
  valid_603546 = validateParameter(valid_603546, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603546 != nil:
    section.add "Version", valid_603546
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603547 = header.getOrDefault("X-Amz-Date")
  valid_603547 = validateParameter(valid_603547, JString, required = false,
                                 default = nil)
  if valid_603547 != nil:
    section.add "X-Amz-Date", valid_603547
  var valid_603548 = header.getOrDefault("X-Amz-Security-Token")
  valid_603548 = validateParameter(valid_603548, JString, required = false,
                                 default = nil)
  if valid_603548 != nil:
    section.add "X-Amz-Security-Token", valid_603548
  var valid_603549 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603549 = validateParameter(valid_603549, JString, required = false,
                                 default = nil)
  if valid_603549 != nil:
    section.add "X-Amz-Content-Sha256", valid_603549
  var valid_603550 = header.getOrDefault("X-Amz-Algorithm")
  valid_603550 = validateParameter(valid_603550, JString, required = false,
                                 default = nil)
  if valid_603550 != nil:
    section.add "X-Amz-Algorithm", valid_603550
  var valid_603551 = header.getOrDefault("X-Amz-Signature")
  valid_603551 = validateParameter(valid_603551, JString, required = false,
                                 default = nil)
  if valid_603551 != nil:
    section.add "X-Amz-Signature", valid_603551
  var valid_603552 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603552 = validateParameter(valid_603552, JString, required = false,
                                 default = nil)
  if valid_603552 != nil:
    section.add "X-Amz-SignedHeaders", valid_603552
  var valid_603553 = header.getOrDefault("X-Amz-Credential")
  valid_603553 = validateParameter(valid_603553, JString, required = false,
                                 default = nil)
  if valid_603553 != nil:
    section.add "X-Amz-Credential", valid_603553
  result.add "header", section
  ## parameters in `formData` object:
  ##   EmailAddress: JString (required)
  ##               : The email address to be verified.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `EmailAddress` field"
  var valid_603554 = formData.getOrDefault("EmailAddress")
  valid_603554 = validateParameter(valid_603554, JString, required = true,
                                 default = nil)
  if valid_603554 != nil:
    section.add "EmailAddress", valid_603554
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603555: Call_PostVerifyEmailAddress_603542; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deprecated. Use the <code>VerifyEmailIdentity</code> operation to verify a new email address.
  ## 
  let valid = call_603555.validator(path, query, header, formData, body)
  let scheme = call_603555.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603555.url(scheme.get, call_603555.host, call_603555.base,
                         call_603555.route, valid.getOrDefault("path"))
  result = hook(call_603555, url, valid)

proc call*(call_603556: Call_PostVerifyEmailAddress_603542; EmailAddress: string;
          Action: string = "VerifyEmailAddress"; Version: string = "2010-12-01"): Recallable =
  ## postVerifyEmailAddress
  ## Deprecated. Use the <code>VerifyEmailIdentity</code> operation to verify a new email address.
  ##   EmailAddress: string (required)
  ##               : The email address to be verified.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603557 = newJObject()
  var formData_603558 = newJObject()
  add(formData_603558, "EmailAddress", newJString(EmailAddress))
  add(query_603557, "Action", newJString(Action))
  add(query_603557, "Version", newJString(Version))
  result = call_603556.call(nil, query_603557, nil, formData_603558, nil)

var postVerifyEmailAddress* = Call_PostVerifyEmailAddress_603542(
    name: "postVerifyEmailAddress", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=VerifyEmailAddress",
    validator: validate_PostVerifyEmailAddress_603543, base: "/",
    url: url_PostVerifyEmailAddress_603544, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetVerifyEmailAddress_603526 = ref object of OpenApiRestCall_600426
proc url_GetVerifyEmailAddress_603528(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetVerifyEmailAddress_603527(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deprecated. Use the <code>VerifyEmailIdentity</code> operation to verify a new email address.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   EmailAddress: JString (required)
  ##               : The email address to be verified.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603529 = query.getOrDefault("Action")
  valid_603529 = validateParameter(valid_603529, JString, required = true,
                                 default = newJString("VerifyEmailAddress"))
  if valid_603529 != nil:
    section.add "Action", valid_603529
  var valid_603530 = query.getOrDefault("EmailAddress")
  valid_603530 = validateParameter(valid_603530, JString, required = true,
                                 default = nil)
  if valid_603530 != nil:
    section.add "EmailAddress", valid_603530
  var valid_603531 = query.getOrDefault("Version")
  valid_603531 = validateParameter(valid_603531, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603531 != nil:
    section.add "Version", valid_603531
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603532 = header.getOrDefault("X-Amz-Date")
  valid_603532 = validateParameter(valid_603532, JString, required = false,
                                 default = nil)
  if valid_603532 != nil:
    section.add "X-Amz-Date", valid_603532
  var valid_603533 = header.getOrDefault("X-Amz-Security-Token")
  valid_603533 = validateParameter(valid_603533, JString, required = false,
                                 default = nil)
  if valid_603533 != nil:
    section.add "X-Amz-Security-Token", valid_603533
  var valid_603534 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603534 = validateParameter(valid_603534, JString, required = false,
                                 default = nil)
  if valid_603534 != nil:
    section.add "X-Amz-Content-Sha256", valid_603534
  var valid_603535 = header.getOrDefault("X-Amz-Algorithm")
  valid_603535 = validateParameter(valid_603535, JString, required = false,
                                 default = nil)
  if valid_603535 != nil:
    section.add "X-Amz-Algorithm", valid_603535
  var valid_603536 = header.getOrDefault("X-Amz-Signature")
  valid_603536 = validateParameter(valid_603536, JString, required = false,
                                 default = nil)
  if valid_603536 != nil:
    section.add "X-Amz-Signature", valid_603536
  var valid_603537 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603537 = validateParameter(valid_603537, JString, required = false,
                                 default = nil)
  if valid_603537 != nil:
    section.add "X-Amz-SignedHeaders", valid_603537
  var valid_603538 = header.getOrDefault("X-Amz-Credential")
  valid_603538 = validateParameter(valid_603538, JString, required = false,
                                 default = nil)
  if valid_603538 != nil:
    section.add "X-Amz-Credential", valid_603538
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603539: Call_GetVerifyEmailAddress_603526; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deprecated. Use the <code>VerifyEmailIdentity</code> operation to verify a new email address.
  ## 
  let valid = call_603539.validator(path, query, header, formData, body)
  let scheme = call_603539.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603539.url(scheme.get, call_603539.host, call_603539.base,
                         call_603539.route, valid.getOrDefault("path"))
  result = hook(call_603539, url, valid)

proc call*(call_603540: Call_GetVerifyEmailAddress_603526; EmailAddress: string;
          Action: string = "VerifyEmailAddress"; Version: string = "2010-12-01"): Recallable =
  ## getVerifyEmailAddress
  ## Deprecated. Use the <code>VerifyEmailIdentity</code> operation to verify a new email address.
  ##   Action: string (required)
  ##   EmailAddress: string (required)
  ##               : The email address to be verified.
  ##   Version: string (required)
  var query_603541 = newJObject()
  add(query_603541, "Action", newJString(Action))
  add(query_603541, "EmailAddress", newJString(EmailAddress))
  add(query_603541, "Version", newJString(Version))
  result = call_603540.call(nil, query_603541, nil, nil, nil)

var getVerifyEmailAddress* = Call_GetVerifyEmailAddress_603526(
    name: "getVerifyEmailAddress", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=VerifyEmailAddress",
    validator: validate_GetVerifyEmailAddress_603527, base: "/",
    url: url_GetVerifyEmailAddress_603528, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostVerifyEmailIdentity_603575 = ref object of OpenApiRestCall_600426
proc url_PostVerifyEmailIdentity_603577(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostVerifyEmailIdentity_603576(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS region and attempts to verify it. As a result of executing this operation, a verification email is sent to the specified address.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603578 = query.getOrDefault("Action")
  valid_603578 = validateParameter(valid_603578, JString, required = true,
                                 default = newJString("VerifyEmailIdentity"))
  if valid_603578 != nil:
    section.add "Action", valid_603578
  var valid_603579 = query.getOrDefault("Version")
  valid_603579 = validateParameter(valid_603579, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603579 != nil:
    section.add "Version", valid_603579
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603580 = header.getOrDefault("X-Amz-Date")
  valid_603580 = validateParameter(valid_603580, JString, required = false,
                                 default = nil)
  if valid_603580 != nil:
    section.add "X-Amz-Date", valid_603580
  var valid_603581 = header.getOrDefault("X-Amz-Security-Token")
  valid_603581 = validateParameter(valid_603581, JString, required = false,
                                 default = nil)
  if valid_603581 != nil:
    section.add "X-Amz-Security-Token", valid_603581
  var valid_603582 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603582 = validateParameter(valid_603582, JString, required = false,
                                 default = nil)
  if valid_603582 != nil:
    section.add "X-Amz-Content-Sha256", valid_603582
  var valid_603583 = header.getOrDefault("X-Amz-Algorithm")
  valid_603583 = validateParameter(valid_603583, JString, required = false,
                                 default = nil)
  if valid_603583 != nil:
    section.add "X-Amz-Algorithm", valid_603583
  var valid_603584 = header.getOrDefault("X-Amz-Signature")
  valid_603584 = validateParameter(valid_603584, JString, required = false,
                                 default = nil)
  if valid_603584 != nil:
    section.add "X-Amz-Signature", valid_603584
  var valid_603585 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603585 = validateParameter(valid_603585, JString, required = false,
                                 default = nil)
  if valid_603585 != nil:
    section.add "X-Amz-SignedHeaders", valid_603585
  var valid_603586 = header.getOrDefault("X-Amz-Credential")
  valid_603586 = validateParameter(valid_603586, JString, required = false,
                                 default = nil)
  if valid_603586 != nil:
    section.add "X-Amz-Credential", valid_603586
  result.add "header", section
  ## parameters in `formData` object:
  ##   EmailAddress: JString (required)
  ##               : The email address to be verified.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `EmailAddress` field"
  var valid_603587 = formData.getOrDefault("EmailAddress")
  valid_603587 = validateParameter(valid_603587, JString, required = true,
                                 default = nil)
  if valid_603587 != nil:
    section.add "EmailAddress", valid_603587
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603588: Call_PostVerifyEmailIdentity_603575; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS region and attempts to verify it. As a result of executing this operation, a verification email is sent to the specified address.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603588.validator(path, query, header, formData, body)
  let scheme = call_603588.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603588.url(scheme.get, call_603588.host, call_603588.base,
                         call_603588.route, valid.getOrDefault("path"))
  result = hook(call_603588, url, valid)

proc call*(call_603589: Call_PostVerifyEmailIdentity_603575; EmailAddress: string;
          Action: string = "VerifyEmailIdentity"; Version: string = "2010-12-01"): Recallable =
  ## postVerifyEmailIdentity
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS region and attempts to verify it. As a result of executing this operation, a verification email is sent to the specified address.</p> <p>You can execute this operation no more than once per second.</p>
  ##   EmailAddress: string (required)
  ##               : The email address to be verified.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603590 = newJObject()
  var formData_603591 = newJObject()
  add(formData_603591, "EmailAddress", newJString(EmailAddress))
  add(query_603590, "Action", newJString(Action))
  add(query_603590, "Version", newJString(Version))
  result = call_603589.call(nil, query_603590, nil, formData_603591, nil)

var postVerifyEmailIdentity* = Call_PostVerifyEmailIdentity_603575(
    name: "postVerifyEmailIdentity", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=VerifyEmailIdentity",
    validator: validate_PostVerifyEmailIdentity_603576, base: "/",
    url: url_PostVerifyEmailIdentity_603577, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetVerifyEmailIdentity_603559 = ref object of OpenApiRestCall_600426
proc url_GetVerifyEmailIdentity_603561(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetVerifyEmailIdentity_603560(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS region and attempts to verify it. As a result of executing this operation, a verification email is sent to the specified address.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   EmailAddress: JString (required)
  ##               : The email address to be verified.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603562 = query.getOrDefault("Action")
  valid_603562 = validateParameter(valid_603562, JString, required = true,
                                 default = newJString("VerifyEmailIdentity"))
  if valid_603562 != nil:
    section.add "Action", valid_603562
  var valid_603563 = query.getOrDefault("EmailAddress")
  valid_603563 = validateParameter(valid_603563, JString, required = true,
                                 default = nil)
  if valid_603563 != nil:
    section.add "EmailAddress", valid_603563
  var valid_603564 = query.getOrDefault("Version")
  valid_603564 = validateParameter(valid_603564, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603564 != nil:
    section.add "Version", valid_603564
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603565 = header.getOrDefault("X-Amz-Date")
  valid_603565 = validateParameter(valid_603565, JString, required = false,
                                 default = nil)
  if valid_603565 != nil:
    section.add "X-Amz-Date", valid_603565
  var valid_603566 = header.getOrDefault("X-Amz-Security-Token")
  valid_603566 = validateParameter(valid_603566, JString, required = false,
                                 default = nil)
  if valid_603566 != nil:
    section.add "X-Amz-Security-Token", valid_603566
  var valid_603567 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603567 = validateParameter(valid_603567, JString, required = false,
                                 default = nil)
  if valid_603567 != nil:
    section.add "X-Amz-Content-Sha256", valid_603567
  var valid_603568 = header.getOrDefault("X-Amz-Algorithm")
  valid_603568 = validateParameter(valid_603568, JString, required = false,
                                 default = nil)
  if valid_603568 != nil:
    section.add "X-Amz-Algorithm", valid_603568
  var valid_603569 = header.getOrDefault("X-Amz-Signature")
  valid_603569 = validateParameter(valid_603569, JString, required = false,
                                 default = nil)
  if valid_603569 != nil:
    section.add "X-Amz-Signature", valid_603569
  var valid_603570 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603570 = validateParameter(valid_603570, JString, required = false,
                                 default = nil)
  if valid_603570 != nil:
    section.add "X-Amz-SignedHeaders", valid_603570
  var valid_603571 = header.getOrDefault("X-Amz-Credential")
  valid_603571 = validateParameter(valid_603571, JString, required = false,
                                 default = nil)
  if valid_603571 != nil:
    section.add "X-Amz-Credential", valid_603571
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603572: Call_GetVerifyEmailIdentity_603559; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS region and attempts to verify it. As a result of executing this operation, a verification email is sent to the specified address.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603572.validator(path, query, header, formData, body)
  let scheme = call_603572.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603572.url(scheme.get, call_603572.host, call_603572.base,
                         call_603572.route, valid.getOrDefault("path"))
  result = hook(call_603572, url, valid)

proc call*(call_603573: Call_GetVerifyEmailIdentity_603559; EmailAddress: string;
          Action: string = "VerifyEmailIdentity"; Version: string = "2010-12-01"): Recallable =
  ## getVerifyEmailIdentity
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS region and attempts to verify it. As a result of executing this operation, a verification email is sent to the specified address.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   EmailAddress: string (required)
  ##               : The email address to be verified.
  ##   Version: string (required)
  var query_603574 = newJObject()
  add(query_603574, "Action", newJString(Action))
  add(query_603574, "EmailAddress", newJString(EmailAddress))
  add(query_603574, "Version", newJString(Version))
  result = call_603573.call(nil, query_603574, nil, nil, nil)

var getVerifyEmailIdentity* = Call_GetVerifyEmailIdentity_603559(
    name: "getVerifyEmailIdentity", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=VerifyEmailIdentity",
    validator: validate_GetVerifyEmailIdentity_603560, base: "/",
    url: url_GetVerifyEmailIdentity_603561, schemes: {Scheme.Https, Scheme.Http})
export
  rest

proc sign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", "")
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", "")
    region = os.getEnv("AWS_REGION", "")
  assert secret != "", "need secret key in env"
  assert access != "", "need access key in env"
  assert region != "", "need region in env"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  let
    algo = SHA256
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  echo recall.headers
  recall.headers.del "Host"
  recall.url = $url

method hook(call: OpenApiRestCall; url: string; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, "")
  result.sign(input.getOrDefault("query"), SHA256)
