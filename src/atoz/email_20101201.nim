
import
  json, options, hashes, tables, openapi/rest, os, uri, strutils, httpcore, sigv4

## auto-generated via openapi macro
## title: Amazon Simple Email Service
## version: 2010-12-01
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>Amazon Simple Email Service</fullname> <p> This document contains reference information for the <a href="https://aws.amazon.com/ses/">Amazon Simple Email Service</a> (Amazon SES) API, version 2010-12-01. This document is best used in conjunction with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html">Amazon SES Developer Guide</a>. </p> <note> <p> For a list of Amazon SES endpoints to use in service requests, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/regions.html">Regions and Amazon SES</a> in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html">Amazon SES Developer Guide</a>.</p> </note>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/email/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode): string

  OpenApiRestCall_602433 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_602433](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_602433): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    if js.kind notin {JString, JInt, JFloat, JNull, JBool}:
      return
    head = $js
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  awsServers = {Scheme.Http: {"ap-northeast-1": "email.ap-northeast-1.amazonaws.com", "ap-southeast-1": "email.ap-southeast-1.amazonaws.com",
                           "us-west-2": "email.us-west-2.amazonaws.com",
                           "eu-west-2": "email.eu-west-2.amazonaws.com", "ap-northeast-3": "email.ap-northeast-3.amazonaws.com",
                           "eu-central-1": "email.eu-central-1.amazonaws.com",
                           "us-east-2": "email.us-east-2.amazonaws.com",
                           "us-east-1": "email.us-east-1.amazonaws.com", "cn-northwest-1": "email.cn-northwest-1.amazonaws.com.cn",
                           "ap-south-1": "email.ap-south-1.amazonaws.com",
                           "eu-north-1": "email.eu-north-1.amazonaws.com", "ap-northeast-2": "email.ap-northeast-2.amazonaws.com",
                           "us-west-1": "email.us-west-1.amazonaws.com", "us-gov-east-1": "email.us-gov-east-1.amazonaws.com",
                           "eu-west-3": "email.eu-west-3.amazonaws.com",
                           "cn-north-1": "email.cn-north-1.amazonaws.com.cn",
                           "sa-east-1": "email.sa-east-1.amazonaws.com",
                           "eu-west-1": "email.eu-west-1.amazonaws.com", "us-gov-west-1": "email.us-gov-west-1.amazonaws.com", "ap-southeast-2": "email.ap-southeast-2.amazonaws.com",
                           "ca-central-1": "email.ca-central-1.amazonaws.com"}.toTable, Scheme.Https: {
      "ap-northeast-1": "email.ap-northeast-1.amazonaws.com",
      "ap-southeast-1": "email.ap-southeast-1.amazonaws.com",
      "us-west-2": "email.us-west-2.amazonaws.com",
      "eu-west-2": "email.eu-west-2.amazonaws.com",
      "ap-northeast-3": "email.ap-northeast-3.amazonaws.com",
      "eu-central-1": "email.eu-central-1.amazonaws.com",
      "us-east-2": "email.us-east-2.amazonaws.com",
      "us-east-1": "email.us-east-1.amazonaws.com",
      "cn-northwest-1": "email.cn-northwest-1.amazonaws.com.cn",
      "ap-south-1": "email.ap-south-1.amazonaws.com",
      "eu-north-1": "email.eu-north-1.amazonaws.com",
      "ap-northeast-2": "email.ap-northeast-2.amazonaws.com",
      "us-west-1": "email.us-west-1.amazonaws.com",
      "us-gov-east-1": "email.us-gov-east-1.amazonaws.com",
      "eu-west-3": "email.eu-west-3.amazonaws.com",
      "cn-north-1": "email.cn-north-1.amazonaws.com.cn",
      "sa-east-1": "email.sa-east-1.amazonaws.com",
      "eu-west-1": "email.eu-west-1.amazonaws.com",
      "us-gov-west-1": "email.us-gov-west-1.amazonaws.com",
      "ap-southeast-2": "email.ap-southeast-2.amazonaws.com",
      "ca-central-1": "email.ca-central-1.amazonaws.com"}.toTable}.toTable
const
  awsServiceName = "email"
method hook(call: OpenApiRestCall; url: string; input: JsonNode): Recallable {.base.}
type
  Call_PostCloneReceiptRuleSet_603042 = ref object of OpenApiRestCall_602433
proc url_PostCloneReceiptRuleSet_603044(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCloneReceiptRuleSet_603043(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a receipt rule set by cloning an existing one. All receipt rules and configurations are copied to the new receipt rule set and are completely independent of the source rule set.</p> <p>For information about setting up rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603045 = query.getOrDefault("Action")
  valid_603045 = validateParameter(valid_603045, JString, required = true,
                                 default = newJString("CloneReceiptRuleSet"))
  if valid_603045 != nil:
    section.add "Action", valid_603045
  var valid_603046 = query.getOrDefault("Version")
  valid_603046 = validateParameter(valid_603046, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603046 != nil:
    section.add "Version", valid_603046
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603047 = header.getOrDefault("X-Amz-Date")
  valid_603047 = validateParameter(valid_603047, JString, required = false,
                                 default = nil)
  if valid_603047 != nil:
    section.add "X-Amz-Date", valid_603047
  var valid_603048 = header.getOrDefault("X-Amz-Security-Token")
  valid_603048 = validateParameter(valid_603048, JString, required = false,
                                 default = nil)
  if valid_603048 != nil:
    section.add "X-Amz-Security-Token", valid_603048
  var valid_603049 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603049 = validateParameter(valid_603049, JString, required = false,
                                 default = nil)
  if valid_603049 != nil:
    section.add "X-Amz-Content-Sha256", valid_603049
  var valid_603050 = header.getOrDefault("X-Amz-Algorithm")
  valid_603050 = validateParameter(valid_603050, JString, required = false,
                                 default = nil)
  if valid_603050 != nil:
    section.add "X-Amz-Algorithm", valid_603050
  var valid_603051 = header.getOrDefault("X-Amz-Signature")
  valid_603051 = validateParameter(valid_603051, JString, required = false,
                                 default = nil)
  if valid_603051 != nil:
    section.add "X-Amz-Signature", valid_603051
  var valid_603052 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603052 = validateParameter(valid_603052, JString, required = false,
                                 default = nil)
  if valid_603052 != nil:
    section.add "X-Amz-SignedHeaders", valid_603052
  var valid_603053 = header.getOrDefault("X-Amz-Credential")
  valid_603053 = validateParameter(valid_603053, JString, required = false,
                                 default = nil)
  if valid_603053 != nil:
    section.add "X-Amz-Credential", valid_603053
  result.add "header", section
  ## parameters in `formData` object:
  ##   OriginalRuleSetName: JString (required)
  ##                      : The name of the rule set to clone.
  ##   RuleSetName: JString (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OriginalRuleSetName` field"
  var valid_603054 = formData.getOrDefault("OriginalRuleSetName")
  valid_603054 = validateParameter(valid_603054, JString, required = true,
                                 default = nil)
  if valid_603054 != nil:
    section.add "OriginalRuleSetName", valid_603054
  var valid_603055 = formData.getOrDefault("RuleSetName")
  valid_603055 = validateParameter(valid_603055, JString, required = true,
                                 default = nil)
  if valid_603055 != nil:
    section.add "RuleSetName", valid_603055
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603056: Call_PostCloneReceiptRuleSet_603042; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a receipt rule set by cloning an existing one. All receipt rules and configurations are copied to the new receipt rule set and are completely independent of the source rule set.</p> <p>For information about setting up rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603056.validator(path, query, header, formData, body)
  let scheme = call_603056.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603056.url(scheme.get, call_603056.host, call_603056.base,
                         call_603056.route, valid.getOrDefault("path"))
  result = hook(call_603056, url, valid)

proc call*(call_603057: Call_PostCloneReceiptRuleSet_603042;
          OriginalRuleSetName: string; RuleSetName: string;
          Action: string = "CloneReceiptRuleSet"; Version: string = "2010-12-01"): Recallable =
  ## postCloneReceiptRuleSet
  ## <p>Creates a receipt rule set by cloning an existing one. All receipt rules and configurations are copied to the new receipt rule set and are completely independent of the source rule set.</p> <p>For information about setting up rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   OriginalRuleSetName: string (required)
  ##                      : The name of the rule set to clone.
  ##   RuleSetName: string (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603058 = newJObject()
  var formData_603059 = newJObject()
  add(formData_603059, "OriginalRuleSetName", newJString(OriginalRuleSetName))
  add(formData_603059, "RuleSetName", newJString(RuleSetName))
  add(query_603058, "Action", newJString(Action))
  add(query_603058, "Version", newJString(Version))
  result = call_603057.call(nil, query_603058, nil, formData_603059, nil)

var postCloneReceiptRuleSet* = Call_PostCloneReceiptRuleSet_603042(
    name: "postCloneReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=CloneReceiptRuleSet",
    validator: validate_PostCloneReceiptRuleSet_603043, base: "/",
    url: url_PostCloneReceiptRuleSet_603044, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCloneReceiptRuleSet_602770 = ref object of OpenApiRestCall_602433
proc url_GetCloneReceiptRuleSet_602772(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCloneReceiptRuleSet_602771(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a receipt rule set by cloning an existing one. All receipt rules and configurations are copied to the new receipt rule set and are completely independent of the source rule set.</p> <p>For information about setting up rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleSetName: JString (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Action: JString (required)
  ##   OriginalRuleSetName: JString (required)
  ##                      : The name of the rule set to clone.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleSetName` field"
  var valid_602884 = query.getOrDefault("RuleSetName")
  valid_602884 = validateParameter(valid_602884, JString, required = true,
                                 default = nil)
  if valid_602884 != nil:
    section.add "RuleSetName", valid_602884
  var valid_602898 = query.getOrDefault("Action")
  valid_602898 = validateParameter(valid_602898, JString, required = true,
                                 default = newJString("CloneReceiptRuleSet"))
  if valid_602898 != nil:
    section.add "Action", valid_602898
  var valid_602899 = query.getOrDefault("OriginalRuleSetName")
  valid_602899 = validateParameter(valid_602899, JString, required = true,
                                 default = nil)
  if valid_602899 != nil:
    section.add "OriginalRuleSetName", valid_602899
  var valid_602900 = query.getOrDefault("Version")
  valid_602900 = validateParameter(valid_602900, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_602900 != nil:
    section.add "Version", valid_602900
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602901 = header.getOrDefault("X-Amz-Date")
  valid_602901 = validateParameter(valid_602901, JString, required = false,
                                 default = nil)
  if valid_602901 != nil:
    section.add "X-Amz-Date", valid_602901
  var valid_602902 = header.getOrDefault("X-Amz-Security-Token")
  valid_602902 = validateParameter(valid_602902, JString, required = false,
                                 default = nil)
  if valid_602902 != nil:
    section.add "X-Amz-Security-Token", valid_602902
  var valid_602903 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602903 = validateParameter(valid_602903, JString, required = false,
                                 default = nil)
  if valid_602903 != nil:
    section.add "X-Amz-Content-Sha256", valid_602903
  var valid_602904 = header.getOrDefault("X-Amz-Algorithm")
  valid_602904 = validateParameter(valid_602904, JString, required = false,
                                 default = nil)
  if valid_602904 != nil:
    section.add "X-Amz-Algorithm", valid_602904
  var valid_602905 = header.getOrDefault("X-Amz-Signature")
  valid_602905 = validateParameter(valid_602905, JString, required = false,
                                 default = nil)
  if valid_602905 != nil:
    section.add "X-Amz-Signature", valid_602905
  var valid_602906 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602906 = validateParameter(valid_602906, JString, required = false,
                                 default = nil)
  if valid_602906 != nil:
    section.add "X-Amz-SignedHeaders", valid_602906
  var valid_602907 = header.getOrDefault("X-Amz-Credential")
  valid_602907 = validateParameter(valid_602907, JString, required = false,
                                 default = nil)
  if valid_602907 != nil:
    section.add "X-Amz-Credential", valid_602907
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602930: Call_GetCloneReceiptRuleSet_602770; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a receipt rule set by cloning an existing one. All receipt rules and configurations are copied to the new receipt rule set and are completely independent of the source rule set.</p> <p>For information about setting up rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_602930.validator(path, query, header, formData, body)
  let scheme = call_602930.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602930.url(scheme.get, call_602930.host, call_602930.base,
                         call_602930.route, valid.getOrDefault("path"))
  result = hook(call_602930, url, valid)

proc call*(call_603001: Call_GetCloneReceiptRuleSet_602770; RuleSetName: string;
          OriginalRuleSetName: string; Action: string = "CloneReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## getCloneReceiptRuleSet
  ## <p>Creates a receipt rule set by cloning an existing one. All receipt rules and configurations are copied to the new receipt rule set and are completely independent of the source rule set.</p> <p>For information about setting up rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Action: string (required)
  ##   OriginalRuleSetName: string (required)
  ##                      : The name of the rule set to clone.
  ##   Version: string (required)
  var query_603002 = newJObject()
  add(query_603002, "RuleSetName", newJString(RuleSetName))
  add(query_603002, "Action", newJString(Action))
  add(query_603002, "OriginalRuleSetName", newJString(OriginalRuleSetName))
  add(query_603002, "Version", newJString(Version))
  result = call_603001.call(nil, query_603002, nil, nil, nil)

var getCloneReceiptRuleSet* = Call_GetCloneReceiptRuleSet_602770(
    name: "getCloneReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=CloneReceiptRuleSet",
    validator: validate_GetCloneReceiptRuleSet_602771, base: "/",
    url: url_GetCloneReceiptRuleSet_602772, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateConfigurationSet_603076 = ref object of OpenApiRestCall_602433
proc url_PostCreateConfigurationSet_603078(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateConfigurationSet_603077(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a configuration set.</p> <p>Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603079 = query.getOrDefault("Action")
  valid_603079 = validateParameter(valid_603079, JString, required = true,
                                 default = newJString("CreateConfigurationSet"))
  if valid_603079 != nil:
    section.add "Action", valid_603079
  var valid_603080 = query.getOrDefault("Version")
  valid_603080 = validateParameter(valid_603080, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603080 != nil:
    section.add "Version", valid_603080
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603081 = header.getOrDefault("X-Amz-Date")
  valid_603081 = validateParameter(valid_603081, JString, required = false,
                                 default = nil)
  if valid_603081 != nil:
    section.add "X-Amz-Date", valid_603081
  var valid_603082 = header.getOrDefault("X-Amz-Security-Token")
  valid_603082 = validateParameter(valid_603082, JString, required = false,
                                 default = nil)
  if valid_603082 != nil:
    section.add "X-Amz-Security-Token", valid_603082
  var valid_603083 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603083 = validateParameter(valid_603083, JString, required = false,
                                 default = nil)
  if valid_603083 != nil:
    section.add "X-Amz-Content-Sha256", valid_603083
  var valid_603084 = header.getOrDefault("X-Amz-Algorithm")
  valid_603084 = validateParameter(valid_603084, JString, required = false,
                                 default = nil)
  if valid_603084 != nil:
    section.add "X-Amz-Algorithm", valid_603084
  var valid_603085 = header.getOrDefault("X-Amz-Signature")
  valid_603085 = validateParameter(valid_603085, JString, required = false,
                                 default = nil)
  if valid_603085 != nil:
    section.add "X-Amz-Signature", valid_603085
  var valid_603086 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603086 = validateParameter(valid_603086, JString, required = false,
                                 default = nil)
  if valid_603086 != nil:
    section.add "X-Amz-SignedHeaders", valid_603086
  var valid_603087 = header.getOrDefault("X-Amz-Credential")
  valid_603087 = validateParameter(valid_603087, JString, required = false,
                                 default = nil)
  if valid_603087 != nil:
    section.add "X-Amz-Credential", valid_603087
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSet.Name: JString
  ##                        : <p>The name of the configuration set.</p> <p>Configuration sets let you create groups of rules that you can apply to the emails you send using Amazon SES. For more information about using configuration sets, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/using-configuration-sets.html">Using Amazon SES Configuration Sets</a> in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the configuration set. The name must meet the following requirements:</p> <ul> <li> <p>Contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain 64 characters or fewer.</p> </li> </ul>
  section = newJObject()
  var valid_603088 = formData.getOrDefault("ConfigurationSet.Name")
  valid_603088 = validateParameter(valid_603088, JString, required = false,
                                 default = nil)
  if valid_603088 != nil:
    section.add "ConfigurationSet.Name", valid_603088
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603089: Call_PostCreateConfigurationSet_603076; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a configuration set.</p> <p>Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603089.validator(path, query, header, formData, body)
  let scheme = call_603089.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603089.url(scheme.get, call_603089.host, call_603089.base,
                         call_603089.route, valid.getOrDefault("path"))
  result = hook(call_603089, url, valid)

proc call*(call_603090: Call_PostCreateConfigurationSet_603076;
          ConfigurationSetName: string = "";
          Action: string = "CreateConfigurationSet"; Version: string = "2010-12-01"): Recallable =
  ## postCreateConfigurationSet
  ## <p>Creates a configuration set.</p> <p>Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string
  ##                       : <p>The name of the configuration set.</p> <p>Configuration sets let you create groups of rules that you can apply to the emails you send using Amazon SES. For more information about using configuration sets, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/using-configuration-sets.html">Using Amazon SES Configuration Sets</a> in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the configuration set. The name must meet the following requirements:</p> <ul> <li> <p>Contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain 64 characters or fewer.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603091 = newJObject()
  var formData_603092 = newJObject()
  add(formData_603092, "ConfigurationSet.Name", newJString(ConfigurationSetName))
  add(query_603091, "Action", newJString(Action))
  add(query_603091, "Version", newJString(Version))
  result = call_603090.call(nil, query_603091, nil, formData_603092, nil)

var postCreateConfigurationSet* = Call_PostCreateConfigurationSet_603076(
    name: "postCreateConfigurationSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=CreateConfigurationSet",
    validator: validate_PostCreateConfigurationSet_603077, base: "/",
    url: url_PostCreateConfigurationSet_603078,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateConfigurationSet_603060 = ref object of OpenApiRestCall_602433
proc url_GetCreateConfigurationSet_603062(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateConfigurationSet_603061(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a configuration set.</p> <p>Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ConfigurationSet.Name: JString
  ##                        : <p>The name of the configuration set.</p> <p>Configuration sets let you create groups of rules that you can apply to the emails you send using Amazon SES. For more information about using configuration sets, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/using-configuration-sets.html">Using Amazon SES Configuration Sets</a> in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the configuration set. The name must meet the following requirements:</p> <ul> <li> <p>Contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain 64 characters or fewer.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_603063 = query.getOrDefault("ConfigurationSet.Name")
  valid_603063 = validateParameter(valid_603063, JString, required = false,
                                 default = nil)
  if valid_603063 != nil:
    section.add "ConfigurationSet.Name", valid_603063
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603064 = query.getOrDefault("Action")
  valid_603064 = validateParameter(valid_603064, JString, required = true,
                                 default = newJString("CreateConfigurationSet"))
  if valid_603064 != nil:
    section.add "Action", valid_603064
  var valid_603065 = query.getOrDefault("Version")
  valid_603065 = validateParameter(valid_603065, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603065 != nil:
    section.add "Version", valid_603065
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603066 = header.getOrDefault("X-Amz-Date")
  valid_603066 = validateParameter(valid_603066, JString, required = false,
                                 default = nil)
  if valid_603066 != nil:
    section.add "X-Amz-Date", valid_603066
  var valid_603067 = header.getOrDefault("X-Amz-Security-Token")
  valid_603067 = validateParameter(valid_603067, JString, required = false,
                                 default = nil)
  if valid_603067 != nil:
    section.add "X-Amz-Security-Token", valid_603067
  var valid_603068 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603068 = validateParameter(valid_603068, JString, required = false,
                                 default = nil)
  if valid_603068 != nil:
    section.add "X-Amz-Content-Sha256", valid_603068
  var valid_603069 = header.getOrDefault("X-Amz-Algorithm")
  valid_603069 = validateParameter(valid_603069, JString, required = false,
                                 default = nil)
  if valid_603069 != nil:
    section.add "X-Amz-Algorithm", valid_603069
  var valid_603070 = header.getOrDefault("X-Amz-Signature")
  valid_603070 = validateParameter(valid_603070, JString, required = false,
                                 default = nil)
  if valid_603070 != nil:
    section.add "X-Amz-Signature", valid_603070
  var valid_603071 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603071 = validateParameter(valid_603071, JString, required = false,
                                 default = nil)
  if valid_603071 != nil:
    section.add "X-Amz-SignedHeaders", valid_603071
  var valid_603072 = header.getOrDefault("X-Amz-Credential")
  valid_603072 = validateParameter(valid_603072, JString, required = false,
                                 default = nil)
  if valid_603072 != nil:
    section.add "X-Amz-Credential", valid_603072
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603073: Call_GetCreateConfigurationSet_603060; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a configuration set.</p> <p>Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603073.validator(path, query, header, formData, body)
  let scheme = call_603073.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603073.url(scheme.get, call_603073.host, call_603073.base,
                         call_603073.route, valid.getOrDefault("path"))
  result = hook(call_603073, url, valid)

proc call*(call_603074: Call_GetCreateConfigurationSet_603060;
          ConfigurationSetName: string = "";
          Action: string = "CreateConfigurationSet"; Version: string = "2010-12-01"): Recallable =
  ## getCreateConfigurationSet
  ## <p>Creates a configuration set.</p> <p>Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string
  ##                       : <p>The name of the configuration set.</p> <p>Configuration sets let you create groups of rules that you can apply to the emails you send using Amazon SES. For more information about using configuration sets, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/using-configuration-sets.html">Using Amazon SES Configuration Sets</a> in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the configuration set. The name must meet the following requirements:</p> <ul> <li> <p>Contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain 64 characters or fewer.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603075 = newJObject()
  add(query_603075, "ConfigurationSet.Name", newJString(ConfigurationSetName))
  add(query_603075, "Action", newJString(Action))
  add(query_603075, "Version", newJString(Version))
  result = call_603074.call(nil, query_603075, nil, nil, nil)

var getCreateConfigurationSet* = Call_GetCreateConfigurationSet_603060(
    name: "getCreateConfigurationSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=CreateConfigurationSet",
    validator: validate_GetCreateConfigurationSet_603061, base: "/",
    url: url_GetCreateConfigurationSet_603062,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateConfigurationSetEventDestination_603115 = ref object of OpenApiRestCall_602433
proc url_PostCreateConfigurationSetEventDestination_603117(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateConfigurationSetEventDestination_603116(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a configuration set event destination.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>An event destination is the AWS service to which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603118 = query.getOrDefault("Action")
  valid_603118 = validateParameter(valid_603118, JString, required = true, default = newJString(
      "CreateConfigurationSetEventDestination"))
  if valid_603118 != nil:
    section.add "Action", valid_603118
  var valid_603119 = query.getOrDefault("Version")
  valid_603119 = validateParameter(valid_603119, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603119 != nil:
    section.add "Version", valid_603119
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603120 = header.getOrDefault("X-Amz-Date")
  valid_603120 = validateParameter(valid_603120, JString, required = false,
                                 default = nil)
  if valid_603120 != nil:
    section.add "X-Amz-Date", valid_603120
  var valid_603121 = header.getOrDefault("X-Amz-Security-Token")
  valid_603121 = validateParameter(valid_603121, JString, required = false,
                                 default = nil)
  if valid_603121 != nil:
    section.add "X-Amz-Security-Token", valid_603121
  var valid_603122 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603122 = validateParameter(valid_603122, JString, required = false,
                                 default = nil)
  if valid_603122 != nil:
    section.add "X-Amz-Content-Sha256", valid_603122
  var valid_603123 = header.getOrDefault("X-Amz-Algorithm")
  valid_603123 = validateParameter(valid_603123, JString, required = false,
                                 default = nil)
  if valid_603123 != nil:
    section.add "X-Amz-Algorithm", valid_603123
  var valid_603124 = header.getOrDefault("X-Amz-Signature")
  valid_603124 = validateParameter(valid_603124, JString, required = false,
                                 default = nil)
  if valid_603124 != nil:
    section.add "X-Amz-Signature", valid_603124
  var valid_603125 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603125 = validateParameter(valid_603125, JString, required = false,
                                 default = nil)
  if valid_603125 != nil:
    section.add "X-Amz-SignedHeaders", valid_603125
  var valid_603126 = header.getOrDefault("X-Amz-Credential")
  valid_603126 = validateParameter(valid_603126, JString, required = false,
                                 default = nil)
  if valid_603126 != nil:
    section.add "X-Amz-Credential", valid_603126
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that the event destination should be associated with.
  ##   EventDestination.Name: JString
  ##                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestination.CloudWatchDestination: JString
  ##                                         : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   EventDestination.MatchingEventTypes: JArray
  ##                                      : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   EventDestination.KinesisFirehoseDestination: JString
  ##                                              : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   EventDestination.Enabled: JString
  ##                           : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestination.SNSDestination: JString
  ##                                  : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_603127 = formData.getOrDefault("ConfigurationSetName")
  valid_603127 = validateParameter(valid_603127, JString, required = true,
                                 default = nil)
  if valid_603127 != nil:
    section.add "ConfigurationSetName", valid_603127
  var valid_603128 = formData.getOrDefault("EventDestination.Name")
  valid_603128 = validateParameter(valid_603128, JString, required = false,
                                 default = nil)
  if valid_603128 != nil:
    section.add "EventDestination.Name", valid_603128
  var valid_603129 = formData.getOrDefault("EventDestination.CloudWatchDestination")
  valid_603129 = validateParameter(valid_603129, JString, required = false,
                                 default = nil)
  if valid_603129 != nil:
    section.add "EventDestination.CloudWatchDestination", valid_603129
  var valid_603130 = formData.getOrDefault("EventDestination.MatchingEventTypes")
  valid_603130 = validateParameter(valid_603130, JArray, required = false,
                                 default = nil)
  if valid_603130 != nil:
    section.add "EventDestination.MatchingEventTypes", valid_603130
  var valid_603131 = formData.getOrDefault("EventDestination.KinesisFirehoseDestination")
  valid_603131 = validateParameter(valid_603131, JString, required = false,
                                 default = nil)
  if valid_603131 != nil:
    section.add "EventDestination.KinesisFirehoseDestination", valid_603131
  var valid_603132 = formData.getOrDefault("EventDestination.Enabled")
  valid_603132 = validateParameter(valid_603132, JString, required = false,
                                 default = nil)
  if valid_603132 != nil:
    section.add "EventDestination.Enabled", valid_603132
  var valid_603133 = formData.getOrDefault("EventDestination.SNSDestination")
  valid_603133 = validateParameter(valid_603133, JString, required = false,
                                 default = nil)
  if valid_603133 != nil:
    section.add "EventDestination.SNSDestination", valid_603133
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603134: Call_PostCreateConfigurationSetEventDestination_603115;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a configuration set event destination.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>An event destination is the AWS service to which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603134.validator(path, query, header, formData, body)
  let scheme = call_603134.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603134.url(scheme.get, call_603134.host, call_603134.base,
                         call_603134.route, valid.getOrDefault("path"))
  result = hook(call_603134, url, valid)

proc call*(call_603135: Call_PostCreateConfigurationSetEventDestination_603115;
          ConfigurationSetName: string; EventDestinationName: string = "";
          EventDestinationCloudWatchDestination: string = "";
          Action: string = "CreateConfigurationSetEventDestination";
          EventDestinationMatchingEventTypes: JsonNode = nil;
          EventDestinationKinesisFirehoseDestination: string = "";
          EventDestinationEnabled: string = "";
          EventDestinationSNSDestination: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## postCreateConfigurationSetEventDestination
  ## <p>Creates a configuration set event destination.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>An event destination is the AWS service to which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that the event destination should be associated with.
  ##   EventDestinationName: string
  ##                       : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestinationCloudWatchDestination: string
  ##                                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   Action: string (required)
  ##   EventDestinationMatchingEventTypes: JArray
  ##                                     : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   EventDestinationKinesisFirehoseDestination: string
  ##                                             : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   EventDestinationEnabled: string
  ##                          : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestinationSNSDestination: string
  ##                                 : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  ##   Version: string (required)
  var query_603136 = newJObject()
  var formData_603137 = newJObject()
  add(formData_603137, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_603137, "EventDestination.Name", newJString(EventDestinationName))
  add(formData_603137, "EventDestination.CloudWatchDestination",
      newJString(EventDestinationCloudWatchDestination))
  add(query_603136, "Action", newJString(Action))
  if EventDestinationMatchingEventTypes != nil:
    formData_603137.add "EventDestination.MatchingEventTypes",
                       EventDestinationMatchingEventTypes
  add(formData_603137, "EventDestination.KinesisFirehoseDestination",
      newJString(EventDestinationKinesisFirehoseDestination))
  add(formData_603137, "EventDestination.Enabled",
      newJString(EventDestinationEnabled))
  add(formData_603137, "EventDestination.SNSDestination",
      newJString(EventDestinationSNSDestination))
  add(query_603136, "Version", newJString(Version))
  result = call_603135.call(nil, query_603136, nil, formData_603137, nil)

var postCreateConfigurationSetEventDestination* = Call_PostCreateConfigurationSetEventDestination_603115(
    name: "postCreateConfigurationSetEventDestination", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=CreateConfigurationSetEventDestination",
    validator: validate_PostCreateConfigurationSetEventDestination_603116,
    base: "/", url: url_PostCreateConfigurationSetEventDestination_603117,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateConfigurationSetEventDestination_603093 = ref object of OpenApiRestCall_602433
proc url_GetCreateConfigurationSetEventDestination_603095(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateConfigurationSetEventDestination_603094(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a configuration set event destination.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>An event destination is the AWS service to which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EventDestination.Enabled: JString
  ##                           : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestination.KinesisFirehoseDestination: JString
  ##                                              : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   Action: JString (required)
  ##   EventDestination.Name: JString
  ##                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestination.CloudWatchDestination: JString
  ##                                         : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   EventDestination.SNSDestination: JString
  ##                                  : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  ##   EventDestination.MatchingEventTypes: JArray
  ##                                      : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that the event destination should be associated with.
  ##   Version: JString (required)
  section = newJObject()
  var valid_603096 = query.getOrDefault("EventDestination.Enabled")
  valid_603096 = validateParameter(valid_603096, JString, required = false,
                                 default = nil)
  if valid_603096 != nil:
    section.add "EventDestination.Enabled", valid_603096
  var valid_603097 = query.getOrDefault("EventDestination.KinesisFirehoseDestination")
  valid_603097 = validateParameter(valid_603097, JString, required = false,
                                 default = nil)
  if valid_603097 != nil:
    section.add "EventDestination.KinesisFirehoseDestination", valid_603097
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603098 = query.getOrDefault("Action")
  valid_603098 = validateParameter(valid_603098, JString, required = true, default = newJString(
      "CreateConfigurationSetEventDestination"))
  if valid_603098 != nil:
    section.add "Action", valid_603098
  var valid_603099 = query.getOrDefault("EventDestination.Name")
  valid_603099 = validateParameter(valid_603099, JString, required = false,
                                 default = nil)
  if valid_603099 != nil:
    section.add "EventDestination.Name", valid_603099
  var valid_603100 = query.getOrDefault("EventDestination.CloudWatchDestination")
  valid_603100 = validateParameter(valid_603100, JString, required = false,
                                 default = nil)
  if valid_603100 != nil:
    section.add "EventDestination.CloudWatchDestination", valid_603100
  var valid_603101 = query.getOrDefault("EventDestination.SNSDestination")
  valid_603101 = validateParameter(valid_603101, JString, required = false,
                                 default = nil)
  if valid_603101 != nil:
    section.add "EventDestination.SNSDestination", valid_603101
  var valid_603102 = query.getOrDefault("EventDestination.MatchingEventTypes")
  valid_603102 = validateParameter(valid_603102, JArray, required = false,
                                 default = nil)
  if valid_603102 != nil:
    section.add "EventDestination.MatchingEventTypes", valid_603102
  var valid_603103 = query.getOrDefault("ConfigurationSetName")
  valid_603103 = validateParameter(valid_603103, JString, required = true,
                                 default = nil)
  if valid_603103 != nil:
    section.add "ConfigurationSetName", valid_603103
  var valid_603104 = query.getOrDefault("Version")
  valid_603104 = validateParameter(valid_603104, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603104 != nil:
    section.add "Version", valid_603104
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603105 = header.getOrDefault("X-Amz-Date")
  valid_603105 = validateParameter(valid_603105, JString, required = false,
                                 default = nil)
  if valid_603105 != nil:
    section.add "X-Amz-Date", valid_603105
  var valid_603106 = header.getOrDefault("X-Amz-Security-Token")
  valid_603106 = validateParameter(valid_603106, JString, required = false,
                                 default = nil)
  if valid_603106 != nil:
    section.add "X-Amz-Security-Token", valid_603106
  var valid_603107 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603107 = validateParameter(valid_603107, JString, required = false,
                                 default = nil)
  if valid_603107 != nil:
    section.add "X-Amz-Content-Sha256", valid_603107
  var valid_603108 = header.getOrDefault("X-Amz-Algorithm")
  valid_603108 = validateParameter(valid_603108, JString, required = false,
                                 default = nil)
  if valid_603108 != nil:
    section.add "X-Amz-Algorithm", valid_603108
  var valid_603109 = header.getOrDefault("X-Amz-Signature")
  valid_603109 = validateParameter(valid_603109, JString, required = false,
                                 default = nil)
  if valid_603109 != nil:
    section.add "X-Amz-Signature", valid_603109
  var valid_603110 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603110 = validateParameter(valid_603110, JString, required = false,
                                 default = nil)
  if valid_603110 != nil:
    section.add "X-Amz-SignedHeaders", valid_603110
  var valid_603111 = header.getOrDefault("X-Amz-Credential")
  valid_603111 = validateParameter(valid_603111, JString, required = false,
                                 default = nil)
  if valid_603111 != nil:
    section.add "X-Amz-Credential", valid_603111
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603112: Call_GetCreateConfigurationSetEventDestination_603093;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a configuration set event destination.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>An event destination is the AWS service to which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603112.validator(path, query, header, formData, body)
  let scheme = call_603112.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603112.url(scheme.get, call_603112.host, call_603112.base,
                         call_603112.route, valid.getOrDefault("path"))
  result = hook(call_603112, url, valid)

proc call*(call_603113: Call_GetCreateConfigurationSetEventDestination_603093;
          ConfigurationSetName: string; EventDestinationEnabled: string = "";
          EventDestinationKinesisFirehoseDestination: string = "";
          Action: string = "CreateConfigurationSetEventDestination";
          EventDestinationName: string = "";
          EventDestinationCloudWatchDestination: string = "";
          EventDestinationSNSDestination: string = "";
          EventDestinationMatchingEventTypes: JsonNode = nil;
          Version: string = "2010-12-01"): Recallable =
  ## getCreateConfigurationSetEventDestination
  ## <p>Creates a configuration set event destination.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>An event destination is the AWS service to which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   EventDestinationEnabled: string
  ##                          : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestinationKinesisFirehoseDestination: string
  ##                                             : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   Action: string (required)
  ##   EventDestinationName: string
  ##                       : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestinationCloudWatchDestination: string
  ##                                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   EventDestinationSNSDestination: string
  ##                                 : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  ##   EventDestinationMatchingEventTypes: JArray
  ##                                     : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that the event destination should be associated with.
  ##   Version: string (required)
  var query_603114 = newJObject()
  add(query_603114, "EventDestination.Enabled",
      newJString(EventDestinationEnabled))
  add(query_603114, "EventDestination.KinesisFirehoseDestination",
      newJString(EventDestinationKinesisFirehoseDestination))
  add(query_603114, "Action", newJString(Action))
  add(query_603114, "EventDestination.Name", newJString(EventDestinationName))
  add(query_603114, "EventDestination.CloudWatchDestination",
      newJString(EventDestinationCloudWatchDestination))
  add(query_603114, "EventDestination.SNSDestination",
      newJString(EventDestinationSNSDestination))
  if EventDestinationMatchingEventTypes != nil:
    query_603114.add "EventDestination.MatchingEventTypes",
                    EventDestinationMatchingEventTypes
  add(query_603114, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_603114, "Version", newJString(Version))
  result = call_603113.call(nil, query_603114, nil, nil, nil)

var getCreateConfigurationSetEventDestination* = Call_GetCreateConfigurationSetEventDestination_603093(
    name: "getCreateConfigurationSetEventDestination", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=CreateConfigurationSetEventDestination",
    validator: validate_GetCreateConfigurationSetEventDestination_603094,
    base: "/", url: url_GetCreateConfigurationSetEventDestination_603095,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateConfigurationSetTrackingOptions_603155 = ref object of OpenApiRestCall_602433
proc url_PostCreateConfigurationSetTrackingOptions_603157(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateConfigurationSetTrackingOptions_603156(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603158 = query.getOrDefault("Action")
  valid_603158 = validateParameter(valid_603158, JString, required = true, default = newJString(
      "CreateConfigurationSetTrackingOptions"))
  if valid_603158 != nil:
    section.add "Action", valid_603158
  var valid_603159 = query.getOrDefault("Version")
  valid_603159 = validateParameter(valid_603159, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603159 != nil:
    section.add "Version", valid_603159
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603160 = header.getOrDefault("X-Amz-Date")
  valid_603160 = validateParameter(valid_603160, JString, required = false,
                                 default = nil)
  if valid_603160 != nil:
    section.add "X-Amz-Date", valid_603160
  var valid_603161 = header.getOrDefault("X-Amz-Security-Token")
  valid_603161 = validateParameter(valid_603161, JString, required = false,
                                 default = nil)
  if valid_603161 != nil:
    section.add "X-Amz-Security-Token", valid_603161
  var valid_603162 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603162 = validateParameter(valid_603162, JString, required = false,
                                 default = nil)
  if valid_603162 != nil:
    section.add "X-Amz-Content-Sha256", valid_603162
  var valid_603163 = header.getOrDefault("X-Amz-Algorithm")
  valid_603163 = validateParameter(valid_603163, JString, required = false,
                                 default = nil)
  if valid_603163 != nil:
    section.add "X-Amz-Algorithm", valid_603163
  var valid_603164 = header.getOrDefault("X-Amz-Signature")
  valid_603164 = validateParameter(valid_603164, JString, required = false,
                                 default = nil)
  if valid_603164 != nil:
    section.add "X-Amz-Signature", valid_603164
  var valid_603165 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603165 = validateParameter(valid_603165, JString, required = false,
                                 default = nil)
  if valid_603165 != nil:
    section.add "X-Amz-SignedHeaders", valid_603165
  var valid_603166 = header.getOrDefault("X-Amz-Credential")
  valid_603166 = validateParameter(valid_603166, JString, required = false,
                                 default = nil)
  if valid_603166 != nil:
    section.add "X-Amz-Credential", valid_603166
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that the tracking options should be associated with.
  ##   TrackingOptions.CustomRedirectDomain: JString
  ##                                       : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_603167 = formData.getOrDefault("ConfigurationSetName")
  valid_603167 = validateParameter(valid_603167, JString, required = true,
                                 default = nil)
  if valid_603167 != nil:
    section.add "ConfigurationSetName", valid_603167
  var valid_603168 = formData.getOrDefault("TrackingOptions.CustomRedirectDomain")
  valid_603168 = validateParameter(valid_603168, JString, required = false,
                                 default = nil)
  if valid_603168 != nil:
    section.add "TrackingOptions.CustomRedirectDomain", valid_603168
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603169: Call_PostCreateConfigurationSetTrackingOptions_603155;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_603169.validator(path, query, header, formData, body)
  let scheme = call_603169.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603169.url(scheme.get, call_603169.host, call_603169.base,
                         call_603169.route, valid.getOrDefault("path"))
  result = hook(call_603169, url, valid)

proc call*(call_603170: Call_PostCreateConfigurationSetTrackingOptions_603155;
          ConfigurationSetName: string;
          Action: string = "CreateConfigurationSetTrackingOptions";
          TrackingOptionsCustomRedirectDomain: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## postCreateConfigurationSetTrackingOptions
  ## <p>Creates an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that the tracking options should be associated with.
  ##   Action: string (required)
  ##   TrackingOptionsCustomRedirectDomain: string
  ##                                      : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  ##   Version: string (required)
  var query_603171 = newJObject()
  var formData_603172 = newJObject()
  add(formData_603172, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_603171, "Action", newJString(Action))
  add(formData_603172, "TrackingOptions.CustomRedirectDomain",
      newJString(TrackingOptionsCustomRedirectDomain))
  add(query_603171, "Version", newJString(Version))
  result = call_603170.call(nil, query_603171, nil, formData_603172, nil)

var postCreateConfigurationSetTrackingOptions* = Call_PostCreateConfigurationSetTrackingOptions_603155(
    name: "postCreateConfigurationSetTrackingOptions", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=CreateConfigurationSetTrackingOptions",
    validator: validate_PostCreateConfigurationSetTrackingOptions_603156,
    base: "/", url: url_PostCreateConfigurationSetTrackingOptions_603157,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateConfigurationSetTrackingOptions_603138 = ref object of OpenApiRestCall_602433
proc url_GetCreateConfigurationSetTrackingOptions_603140(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateConfigurationSetTrackingOptions_603139(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TrackingOptions.CustomRedirectDomain: JString
  ##                                       : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  ##   Action: JString (required)
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that the tracking options should be associated with.
  ##   Version: JString (required)
  section = newJObject()
  var valid_603141 = query.getOrDefault("TrackingOptions.CustomRedirectDomain")
  valid_603141 = validateParameter(valid_603141, JString, required = false,
                                 default = nil)
  if valid_603141 != nil:
    section.add "TrackingOptions.CustomRedirectDomain", valid_603141
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603142 = query.getOrDefault("Action")
  valid_603142 = validateParameter(valid_603142, JString, required = true, default = newJString(
      "CreateConfigurationSetTrackingOptions"))
  if valid_603142 != nil:
    section.add "Action", valid_603142
  var valid_603143 = query.getOrDefault("ConfigurationSetName")
  valid_603143 = validateParameter(valid_603143, JString, required = true,
                                 default = nil)
  if valid_603143 != nil:
    section.add "ConfigurationSetName", valid_603143
  var valid_603144 = query.getOrDefault("Version")
  valid_603144 = validateParameter(valid_603144, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603144 != nil:
    section.add "Version", valid_603144
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603145 = header.getOrDefault("X-Amz-Date")
  valid_603145 = validateParameter(valid_603145, JString, required = false,
                                 default = nil)
  if valid_603145 != nil:
    section.add "X-Amz-Date", valid_603145
  var valid_603146 = header.getOrDefault("X-Amz-Security-Token")
  valid_603146 = validateParameter(valid_603146, JString, required = false,
                                 default = nil)
  if valid_603146 != nil:
    section.add "X-Amz-Security-Token", valid_603146
  var valid_603147 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603147 = validateParameter(valid_603147, JString, required = false,
                                 default = nil)
  if valid_603147 != nil:
    section.add "X-Amz-Content-Sha256", valid_603147
  var valid_603148 = header.getOrDefault("X-Amz-Algorithm")
  valid_603148 = validateParameter(valid_603148, JString, required = false,
                                 default = nil)
  if valid_603148 != nil:
    section.add "X-Amz-Algorithm", valid_603148
  var valid_603149 = header.getOrDefault("X-Amz-Signature")
  valid_603149 = validateParameter(valid_603149, JString, required = false,
                                 default = nil)
  if valid_603149 != nil:
    section.add "X-Amz-Signature", valid_603149
  var valid_603150 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603150 = validateParameter(valid_603150, JString, required = false,
                                 default = nil)
  if valid_603150 != nil:
    section.add "X-Amz-SignedHeaders", valid_603150
  var valid_603151 = header.getOrDefault("X-Amz-Credential")
  valid_603151 = validateParameter(valid_603151, JString, required = false,
                                 default = nil)
  if valid_603151 != nil:
    section.add "X-Amz-Credential", valid_603151
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603152: Call_GetCreateConfigurationSetTrackingOptions_603138;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_603152.validator(path, query, header, formData, body)
  let scheme = call_603152.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603152.url(scheme.get, call_603152.host, call_603152.base,
                         call_603152.route, valid.getOrDefault("path"))
  result = hook(call_603152, url, valid)

proc call*(call_603153: Call_GetCreateConfigurationSetTrackingOptions_603138;
          ConfigurationSetName: string;
          TrackingOptionsCustomRedirectDomain: string = "";
          Action: string = "CreateConfigurationSetTrackingOptions";
          Version: string = "2010-12-01"): Recallable =
  ## getCreateConfigurationSetTrackingOptions
  ## <p>Creates an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ##   TrackingOptionsCustomRedirectDomain: string
  ##                                      : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that the tracking options should be associated with.
  ##   Version: string (required)
  var query_603154 = newJObject()
  add(query_603154, "TrackingOptions.CustomRedirectDomain",
      newJString(TrackingOptionsCustomRedirectDomain))
  add(query_603154, "Action", newJString(Action))
  add(query_603154, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_603154, "Version", newJString(Version))
  result = call_603153.call(nil, query_603154, nil, nil, nil)

var getCreateConfigurationSetTrackingOptions* = Call_GetCreateConfigurationSetTrackingOptions_603138(
    name: "getCreateConfigurationSetTrackingOptions", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=CreateConfigurationSetTrackingOptions",
    validator: validate_GetCreateConfigurationSetTrackingOptions_603139,
    base: "/", url: url_GetCreateConfigurationSetTrackingOptions_603140,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCustomVerificationEmailTemplate_603194 = ref object of OpenApiRestCall_602433
proc url_PostCreateCustomVerificationEmailTemplate_603196(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateCustomVerificationEmailTemplate_603195(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603197 = query.getOrDefault("Action")
  valid_603197 = validateParameter(valid_603197, JString, required = true, default = newJString(
      "CreateCustomVerificationEmailTemplate"))
  if valid_603197 != nil:
    section.add "Action", valid_603197
  var valid_603198 = query.getOrDefault("Version")
  valid_603198 = validateParameter(valid_603198, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603198 != nil:
    section.add "Version", valid_603198
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603199 = header.getOrDefault("X-Amz-Date")
  valid_603199 = validateParameter(valid_603199, JString, required = false,
                                 default = nil)
  if valid_603199 != nil:
    section.add "X-Amz-Date", valid_603199
  var valid_603200 = header.getOrDefault("X-Amz-Security-Token")
  valid_603200 = validateParameter(valid_603200, JString, required = false,
                                 default = nil)
  if valid_603200 != nil:
    section.add "X-Amz-Security-Token", valid_603200
  var valid_603201 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603201 = validateParameter(valid_603201, JString, required = false,
                                 default = nil)
  if valid_603201 != nil:
    section.add "X-Amz-Content-Sha256", valid_603201
  var valid_603202 = header.getOrDefault("X-Amz-Algorithm")
  valid_603202 = validateParameter(valid_603202, JString, required = false,
                                 default = nil)
  if valid_603202 != nil:
    section.add "X-Amz-Algorithm", valid_603202
  var valid_603203 = header.getOrDefault("X-Amz-Signature")
  valid_603203 = validateParameter(valid_603203, JString, required = false,
                                 default = nil)
  if valid_603203 != nil:
    section.add "X-Amz-Signature", valid_603203
  var valid_603204 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603204 = validateParameter(valid_603204, JString, required = false,
                                 default = nil)
  if valid_603204 != nil:
    section.add "X-Amz-SignedHeaders", valid_603204
  var valid_603205 = header.getOrDefault("X-Amz-Credential")
  valid_603205 = validateParameter(valid_603205, JString, required = false,
                                 default = nil)
  if valid_603205 != nil:
    section.add "X-Amz-Credential", valid_603205
  result.add "header", section
  ## parameters in `formData` object:
  ##   SuccessRedirectionURL: JString (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   FailureRedirectionURL: JString (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   FromEmailAddress: JString (required)
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateContent: JString (required)
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template.
  ##   TemplateSubject: JString (required)
  ##                  : The subject line of the custom verification email.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SuccessRedirectionURL` field"
  var valid_603206 = formData.getOrDefault("SuccessRedirectionURL")
  valid_603206 = validateParameter(valid_603206, JString, required = true,
                                 default = nil)
  if valid_603206 != nil:
    section.add "SuccessRedirectionURL", valid_603206
  var valid_603207 = formData.getOrDefault("FailureRedirectionURL")
  valid_603207 = validateParameter(valid_603207, JString, required = true,
                                 default = nil)
  if valid_603207 != nil:
    section.add "FailureRedirectionURL", valid_603207
  var valid_603208 = formData.getOrDefault("FromEmailAddress")
  valid_603208 = validateParameter(valid_603208, JString, required = true,
                                 default = nil)
  if valid_603208 != nil:
    section.add "FromEmailAddress", valid_603208
  var valid_603209 = formData.getOrDefault("TemplateContent")
  valid_603209 = validateParameter(valid_603209, JString, required = true,
                                 default = nil)
  if valid_603209 != nil:
    section.add "TemplateContent", valid_603209
  var valid_603210 = formData.getOrDefault("TemplateName")
  valid_603210 = validateParameter(valid_603210, JString, required = true,
                                 default = nil)
  if valid_603210 != nil:
    section.add "TemplateName", valid_603210
  var valid_603211 = formData.getOrDefault("TemplateSubject")
  valid_603211 = validateParameter(valid_603211, JString, required = true,
                                 default = nil)
  if valid_603211 != nil:
    section.add "TemplateSubject", valid_603211
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603212: Call_PostCreateCustomVerificationEmailTemplate_603194;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603212.validator(path, query, header, formData, body)
  let scheme = call_603212.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603212.url(scheme.get, call_603212.host, call_603212.base,
                         call_603212.route, valid.getOrDefault("path"))
  result = hook(call_603212, url, valid)

proc call*(call_603213: Call_PostCreateCustomVerificationEmailTemplate_603194;
          SuccessRedirectionURL: string; FailureRedirectionURL: string;
          FromEmailAddress: string; TemplateContent: string; TemplateName: string;
          TemplateSubject: string;
          Action: string = "CreateCustomVerificationEmailTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## postCreateCustomVerificationEmailTemplate
  ## <p>Creates a new custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   SuccessRedirectionURL: string (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   FailureRedirectionURL: string (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   FromEmailAddress: string (required)
  ##                   : The email address that the custom verification email is sent from.
  ##   Action: string (required)
  ##   TemplateContent: string (required)
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template.
  ##   TemplateSubject: string (required)
  ##                  : The subject line of the custom verification email.
  ##   Version: string (required)
  var query_603214 = newJObject()
  var formData_603215 = newJObject()
  add(formData_603215, "SuccessRedirectionURL", newJString(SuccessRedirectionURL))
  add(formData_603215, "FailureRedirectionURL", newJString(FailureRedirectionURL))
  add(formData_603215, "FromEmailAddress", newJString(FromEmailAddress))
  add(query_603214, "Action", newJString(Action))
  add(formData_603215, "TemplateContent", newJString(TemplateContent))
  add(formData_603215, "TemplateName", newJString(TemplateName))
  add(formData_603215, "TemplateSubject", newJString(TemplateSubject))
  add(query_603214, "Version", newJString(Version))
  result = call_603213.call(nil, query_603214, nil, formData_603215, nil)

var postCreateCustomVerificationEmailTemplate* = Call_PostCreateCustomVerificationEmailTemplate_603194(
    name: "postCreateCustomVerificationEmailTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=CreateCustomVerificationEmailTemplate",
    validator: validate_PostCreateCustomVerificationEmailTemplate_603195,
    base: "/", url: url_PostCreateCustomVerificationEmailTemplate_603196,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCustomVerificationEmailTemplate_603173 = ref object of OpenApiRestCall_602433
proc url_GetCreateCustomVerificationEmailTemplate_603175(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateCustomVerificationEmailTemplate_603174(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TemplateSubject: JString (required)
  ##                  : The subject line of the custom verification email.
  ##   FromEmailAddress: JString (required)
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateContent: JString (required)
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   Action: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template.
  ##   SuccessRedirectionURL: JString (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   FailureRedirectionURL: JString (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `TemplateSubject` field"
  var valid_603176 = query.getOrDefault("TemplateSubject")
  valid_603176 = validateParameter(valid_603176, JString, required = true,
                                 default = nil)
  if valid_603176 != nil:
    section.add "TemplateSubject", valid_603176
  var valid_603177 = query.getOrDefault("FromEmailAddress")
  valid_603177 = validateParameter(valid_603177, JString, required = true,
                                 default = nil)
  if valid_603177 != nil:
    section.add "FromEmailAddress", valid_603177
  var valid_603178 = query.getOrDefault("TemplateContent")
  valid_603178 = validateParameter(valid_603178, JString, required = true,
                                 default = nil)
  if valid_603178 != nil:
    section.add "TemplateContent", valid_603178
  var valid_603179 = query.getOrDefault("Action")
  valid_603179 = validateParameter(valid_603179, JString, required = true, default = newJString(
      "CreateCustomVerificationEmailTemplate"))
  if valid_603179 != nil:
    section.add "Action", valid_603179
  var valid_603180 = query.getOrDefault("TemplateName")
  valid_603180 = validateParameter(valid_603180, JString, required = true,
                                 default = nil)
  if valid_603180 != nil:
    section.add "TemplateName", valid_603180
  var valid_603181 = query.getOrDefault("SuccessRedirectionURL")
  valid_603181 = validateParameter(valid_603181, JString, required = true,
                                 default = nil)
  if valid_603181 != nil:
    section.add "SuccessRedirectionURL", valid_603181
  var valid_603182 = query.getOrDefault("FailureRedirectionURL")
  valid_603182 = validateParameter(valid_603182, JString, required = true,
                                 default = nil)
  if valid_603182 != nil:
    section.add "FailureRedirectionURL", valid_603182
  var valid_603183 = query.getOrDefault("Version")
  valid_603183 = validateParameter(valid_603183, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603183 != nil:
    section.add "Version", valid_603183
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603184 = header.getOrDefault("X-Amz-Date")
  valid_603184 = validateParameter(valid_603184, JString, required = false,
                                 default = nil)
  if valid_603184 != nil:
    section.add "X-Amz-Date", valid_603184
  var valid_603185 = header.getOrDefault("X-Amz-Security-Token")
  valid_603185 = validateParameter(valid_603185, JString, required = false,
                                 default = nil)
  if valid_603185 != nil:
    section.add "X-Amz-Security-Token", valid_603185
  var valid_603186 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603186 = validateParameter(valid_603186, JString, required = false,
                                 default = nil)
  if valid_603186 != nil:
    section.add "X-Amz-Content-Sha256", valid_603186
  var valid_603187 = header.getOrDefault("X-Amz-Algorithm")
  valid_603187 = validateParameter(valid_603187, JString, required = false,
                                 default = nil)
  if valid_603187 != nil:
    section.add "X-Amz-Algorithm", valid_603187
  var valid_603188 = header.getOrDefault("X-Amz-Signature")
  valid_603188 = validateParameter(valid_603188, JString, required = false,
                                 default = nil)
  if valid_603188 != nil:
    section.add "X-Amz-Signature", valid_603188
  var valid_603189 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603189 = validateParameter(valid_603189, JString, required = false,
                                 default = nil)
  if valid_603189 != nil:
    section.add "X-Amz-SignedHeaders", valid_603189
  var valid_603190 = header.getOrDefault("X-Amz-Credential")
  valid_603190 = validateParameter(valid_603190, JString, required = false,
                                 default = nil)
  if valid_603190 != nil:
    section.add "X-Amz-Credential", valid_603190
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603191: Call_GetCreateCustomVerificationEmailTemplate_603173;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603191.validator(path, query, header, formData, body)
  let scheme = call_603191.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603191.url(scheme.get, call_603191.host, call_603191.base,
                         call_603191.route, valid.getOrDefault("path"))
  result = hook(call_603191, url, valid)

proc call*(call_603192: Call_GetCreateCustomVerificationEmailTemplate_603173;
          TemplateSubject: string; FromEmailAddress: string;
          TemplateContent: string; TemplateName: string;
          SuccessRedirectionURL: string; FailureRedirectionURL: string;
          Action: string = "CreateCustomVerificationEmailTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## getCreateCustomVerificationEmailTemplate
  ## <p>Creates a new custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateSubject: string (required)
  ##                  : The subject line of the custom verification email.
  ##   FromEmailAddress: string (required)
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateContent: string (required)
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template.
  ##   SuccessRedirectionURL: string (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   FailureRedirectionURL: string (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   Version: string (required)
  var query_603193 = newJObject()
  add(query_603193, "TemplateSubject", newJString(TemplateSubject))
  add(query_603193, "FromEmailAddress", newJString(FromEmailAddress))
  add(query_603193, "TemplateContent", newJString(TemplateContent))
  add(query_603193, "Action", newJString(Action))
  add(query_603193, "TemplateName", newJString(TemplateName))
  add(query_603193, "SuccessRedirectionURL", newJString(SuccessRedirectionURL))
  add(query_603193, "FailureRedirectionURL", newJString(FailureRedirectionURL))
  add(query_603193, "Version", newJString(Version))
  result = call_603192.call(nil, query_603193, nil, nil, nil)

var getCreateCustomVerificationEmailTemplate* = Call_GetCreateCustomVerificationEmailTemplate_603173(
    name: "getCreateCustomVerificationEmailTemplate", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=CreateCustomVerificationEmailTemplate",
    validator: validate_GetCreateCustomVerificationEmailTemplate_603174,
    base: "/", url: url_GetCreateCustomVerificationEmailTemplate_603175,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateReceiptFilter_603233 = ref object of OpenApiRestCall_602433
proc url_PostCreateReceiptFilter_603235(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateReceiptFilter_603234(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new IP address filter.</p> <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603236 = query.getOrDefault("Action")
  valid_603236 = validateParameter(valid_603236, JString, required = true,
                                 default = newJString("CreateReceiptFilter"))
  if valid_603236 != nil:
    section.add "Action", valid_603236
  var valid_603237 = query.getOrDefault("Version")
  valid_603237 = validateParameter(valid_603237, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603237 != nil:
    section.add "Version", valid_603237
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603238 = header.getOrDefault("X-Amz-Date")
  valid_603238 = validateParameter(valid_603238, JString, required = false,
                                 default = nil)
  if valid_603238 != nil:
    section.add "X-Amz-Date", valid_603238
  var valid_603239 = header.getOrDefault("X-Amz-Security-Token")
  valid_603239 = validateParameter(valid_603239, JString, required = false,
                                 default = nil)
  if valid_603239 != nil:
    section.add "X-Amz-Security-Token", valid_603239
  var valid_603240 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603240 = validateParameter(valid_603240, JString, required = false,
                                 default = nil)
  if valid_603240 != nil:
    section.add "X-Amz-Content-Sha256", valid_603240
  var valid_603241 = header.getOrDefault("X-Amz-Algorithm")
  valid_603241 = validateParameter(valid_603241, JString, required = false,
                                 default = nil)
  if valid_603241 != nil:
    section.add "X-Amz-Algorithm", valid_603241
  var valid_603242 = header.getOrDefault("X-Amz-Signature")
  valid_603242 = validateParameter(valid_603242, JString, required = false,
                                 default = nil)
  if valid_603242 != nil:
    section.add "X-Amz-Signature", valid_603242
  var valid_603243 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603243 = validateParameter(valid_603243, JString, required = false,
                                 default = nil)
  if valid_603243 != nil:
    section.add "X-Amz-SignedHeaders", valid_603243
  var valid_603244 = header.getOrDefault("X-Amz-Credential")
  valid_603244 = validateParameter(valid_603244, JString, required = false,
                                 default = nil)
  if valid_603244 != nil:
    section.add "X-Amz-Credential", valid_603244
  result.add "header", section
  ## parameters in `formData` object:
  ##   Filter.IpFilter: JString
  ##                  : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## A structure that provides the IP addresses to block or allow, and whether to block or allow incoming mail from them.
  ##   Filter.Name: JString
  ##              : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the IP address filter. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  section = newJObject()
  var valid_603245 = formData.getOrDefault("Filter.IpFilter")
  valid_603245 = validateParameter(valid_603245, JString, required = false,
                                 default = nil)
  if valid_603245 != nil:
    section.add "Filter.IpFilter", valid_603245
  var valid_603246 = formData.getOrDefault("Filter.Name")
  valid_603246 = validateParameter(valid_603246, JString, required = false,
                                 default = nil)
  if valid_603246 != nil:
    section.add "Filter.Name", valid_603246
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603247: Call_PostCreateReceiptFilter_603233; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new IP address filter.</p> <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603247.validator(path, query, header, formData, body)
  let scheme = call_603247.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603247.url(scheme.get, call_603247.host, call_603247.base,
                         call_603247.route, valid.getOrDefault("path"))
  result = hook(call_603247, url, valid)

proc call*(call_603248: Call_PostCreateReceiptFilter_603233;
          Action: string = "CreateReceiptFilter"; FilterIpFilter: string = "";
          FilterName: string = ""; Version: string = "2010-12-01"): Recallable =
  ## postCreateReceiptFilter
  ## <p>Creates a new IP address filter.</p> <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   FilterIpFilter: string
  ##                 : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## A structure that provides the IP addresses to block or allow, and whether to block or allow incoming mail from them.
  ##   FilterName: string
  ##             : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the IP address filter. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Version: string (required)
  var query_603249 = newJObject()
  var formData_603250 = newJObject()
  add(query_603249, "Action", newJString(Action))
  add(formData_603250, "Filter.IpFilter", newJString(FilterIpFilter))
  add(formData_603250, "Filter.Name", newJString(FilterName))
  add(query_603249, "Version", newJString(Version))
  result = call_603248.call(nil, query_603249, nil, formData_603250, nil)

var postCreateReceiptFilter* = Call_PostCreateReceiptFilter_603233(
    name: "postCreateReceiptFilter", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=CreateReceiptFilter",
    validator: validate_PostCreateReceiptFilter_603234, base: "/",
    url: url_PostCreateReceiptFilter_603235, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateReceiptFilter_603216 = ref object of OpenApiRestCall_602433
proc url_GetCreateReceiptFilter_603218(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateReceiptFilter_603217(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new IP address filter.</p> <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Filter.IpFilter: JString
  ##                  : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## A structure that provides the IP addresses to block or allow, and whether to block or allow incoming mail from them.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filter.Name: JString
  ##              : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the IP address filter. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  section = newJObject()
  var valid_603219 = query.getOrDefault("Filter.IpFilter")
  valid_603219 = validateParameter(valid_603219, JString, required = false,
                                 default = nil)
  if valid_603219 != nil:
    section.add "Filter.IpFilter", valid_603219
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603220 = query.getOrDefault("Action")
  valid_603220 = validateParameter(valid_603220, JString, required = true,
                                 default = newJString("CreateReceiptFilter"))
  if valid_603220 != nil:
    section.add "Action", valid_603220
  var valid_603221 = query.getOrDefault("Version")
  valid_603221 = validateParameter(valid_603221, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603221 != nil:
    section.add "Version", valid_603221
  var valid_603222 = query.getOrDefault("Filter.Name")
  valid_603222 = validateParameter(valid_603222, JString, required = false,
                                 default = nil)
  if valid_603222 != nil:
    section.add "Filter.Name", valid_603222
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603223 = header.getOrDefault("X-Amz-Date")
  valid_603223 = validateParameter(valid_603223, JString, required = false,
                                 default = nil)
  if valid_603223 != nil:
    section.add "X-Amz-Date", valid_603223
  var valid_603224 = header.getOrDefault("X-Amz-Security-Token")
  valid_603224 = validateParameter(valid_603224, JString, required = false,
                                 default = nil)
  if valid_603224 != nil:
    section.add "X-Amz-Security-Token", valid_603224
  var valid_603225 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603225 = validateParameter(valid_603225, JString, required = false,
                                 default = nil)
  if valid_603225 != nil:
    section.add "X-Amz-Content-Sha256", valid_603225
  var valid_603226 = header.getOrDefault("X-Amz-Algorithm")
  valid_603226 = validateParameter(valid_603226, JString, required = false,
                                 default = nil)
  if valid_603226 != nil:
    section.add "X-Amz-Algorithm", valid_603226
  var valid_603227 = header.getOrDefault("X-Amz-Signature")
  valid_603227 = validateParameter(valid_603227, JString, required = false,
                                 default = nil)
  if valid_603227 != nil:
    section.add "X-Amz-Signature", valid_603227
  var valid_603228 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603228 = validateParameter(valid_603228, JString, required = false,
                                 default = nil)
  if valid_603228 != nil:
    section.add "X-Amz-SignedHeaders", valid_603228
  var valid_603229 = header.getOrDefault("X-Amz-Credential")
  valid_603229 = validateParameter(valid_603229, JString, required = false,
                                 default = nil)
  if valid_603229 != nil:
    section.add "X-Amz-Credential", valid_603229
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603230: Call_GetCreateReceiptFilter_603216; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new IP address filter.</p> <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603230.validator(path, query, header, formData, body)
  let scheme = call_603230.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603230.url(scheme.get, call_603230.host, call_603230.base,
                         call_603230.route, valid.getOrDefault("path"))
  result = hook(call_603230, url, valid)

proc call*(call_603231: Call_GetCreateReceiptFilter_603216;
          FilterIpFilter: string = ""; Action: string = "CreateReceiptFilter";
          Version: string = "2010-12-01"; FilterName: string = ""): Recallable =
  ## getCreateReceiptFilter
  ## <p>Creates a new IP address filter.</p> <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   FilterIpFilter: string
  ##                 : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## A structure that provides the IP addresses to block or allow, and whether to block or allow incoming mail from them.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   FilterName: string
  ##             : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the IP address filter. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  var query_603232 = newJObject()
  add(query_603232, "Filter.IpFilter", newJString(FilterIpFilter))
  add(query_603232, "Action", newJString(Action))
  add(query_603232, "Version", newJString(Version))
  add(query_603232, "Filter.Name", newJString(FilterName))
  result = call_603231.call(nil, query_603232, nil, nil, nil)

var getCreateReceiptFilter* = Call_GetCreateReceiptFilter_603216(
    name: "getCreateReceiptFilter", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=CreateReceiptFilter",
    validator: validate_GetCreateReceiptFilter_603217, base: "/",
    url: url_GetCreateReceiptFilter_603218, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateReceiptRule_603274 = ref object of OpenApiRestCall_602433
proc url_PostCreateReceiptRule_603276(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateReceiptRule_603275(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603277 = query.getOrDefault("Action")
  valid_603277 = validateParameter(valid_603277, JString, required = true,
                                 default = newJString("CreateReceiptRule"))
  if valid_603277 != nil:
    section.add "Action", valid_603277
  var valid_603278 = query.getOrDefault("Version")
  valid_603278 = validateParameter(valid_603278, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603278 != nil:
    section.add "Version", valid_603278
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603279 = header.getOrDefault("X-Amz-Date")
  valid_603279 = validateParameter(valid_603279, JString, required = false,
                                 default = nil)
  if valid_603279 != nil:
    section.add "X-Amz-Date", valid_603279
  var valid_603280 = header.getOrDefault("X-Amz-Security-Token")
  valid_603280 = validateParameter(valid_603280, JString, required = false,
                                 default = nil)
  if valid_603280 != nil:
    section.add "X-Amz-Security-Token", valid_603280
  var valid_603281 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603281 = validateParameter(valid_603281, JString, required = false,
                                 default = nil)
  if valid_603281 != nil:
    section.add "X-Amz-Content-Sha256", valid_603281
  var valid_603282 = header.getOrDefault("X-Amz-Algorithm")
  valid_603282 = validateParameter(valid_603282, JString, required = false,
                                 default = nil)
  if valid_603282 != nil:
    section.add "X-Amz-Algorithm", valid_603282
  var valid_603283 = header.getOrDefault("X-Amz-Signature")
  valid_603283 = validateParameter(valid_603283, JString, required = false,
                                 default = nil)
  if valid_603283 != nil:
    section.add "X-Amz-Signature", valid_603283
  var valid_603284 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603284 = validateParameter(valid_603284, JString, required = false,
                                 default = nil)
  if valid_603284 != nil:
    section.add "X-Amz-SignedHeaders", valid_603284
  var valid_603285 = header.getOrDefault("X-Amz-Credential")
  valid_603285 = validateParameter(valid_603285, JString, required = false,
                                 default = nil)
  if valid_603285 != nil:
    section.add "X-Amz-Credential", valid_603285
  result.add "header", section
  ## parameters in `formData` object:
  ##   Rule.Recipients: JArray
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   After: JString
  ##        : The name of an existing rule after which the new rule will be placed. If this parameter is null, the new rule will be inserted at the beginning of the rule list.
  ##   Rule.Enabled: JString
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   RuleSetName: JString (required)
  ##              : The name of the rule set that the receipt rule will be added to.
  ##   Rule.Actions: JArray
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   Rule.Name: JString
  ##            : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Rule.ScanEnabled: JString
  ##                   : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   Rule.TlsPolicy: JString
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  section = newJObject()
  var valid_603286 = formData.getOrDefault("Rule.Recipients")
  valid_603286 = validateParameter(valid_603286, JArray, required = false,
                                 default = nil)
  if valid_603286 != nil:
    section.add "Rule.Recipients", valid_603286
  var valid_603287 = formData.getOrDefault("After")
  valid_603287 = validateParameter(valid_603287, JString, required = false,
                                 default = nil)
  if valid_603287 != nil:
    section.add "After", valid_603287
  var valid_603288 = formData.getOrDefault("Rule.Enabled")
  valid_603288 = validateParameter(valid_603288, JString, required = false,
                                 default = nil)
  if valid_603288 != nil:
    section.add "Rule.Enabled", valid_603288
  assert formData != nil,
        "formData argument is necessary due to required `RuleSetName` field"
  var valid_603289 = formData.getOrDefault("RuleSetName")
  valid_603289 = validateParameter(valid_603289, JString, required = true,
                                 default = nil)
  if valid_603289 != nil:
    section.add "RuleSetName", valid_603289
  var valid_603290 = formData.getOrDefault("Rule.Actions")
  valid_603290 = validateParameter(valid_603290, JArray, required = false,
                                 default = nil)
  if valid_603290 != nil:
    section.add "Rule.Actions", valid_603290
  var valid_603291 = formData.getOrDefault("Rule.Name")
  valid_603291 = validateParameter(valid_603291, JString, required = false,
                                 default = nil)
  if valid_603291 != nil:
    section.add "Rule.Name", valid_603291
  var valid_603292 = formData.getOrDefault("Rule.ScanEnabled")
  valid_603292 = validateParameter(valid_603292, JString, required = false,
                                 default = nil)
  if valid_603292 != nil:
    section.add "Rule.ScanEnabled", valid_603292
  var valid_603293 = formData.getOrDefault("Rule.TlsPolicy")
  valid_603293 = validateParameter(valid_603293, JString, required = false,
                                 default = nil)
  if valid_603293 != nil:
    section.add "Rule.TlsPolicy", valid_603293
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603294: Call_PostCreateReceiptRule_603274; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603294.validator(path, query, header, formData, body)
  let scheme = call_603294.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603294.url(scheme.get, call_603294.host, call_603294.base,
                         call_603294.route, valid.getOrDefault("path"))
  result = hook(call_603294, url, valid)

proc call*(call_603295: Call_PostCreateReceiptRule_603274; RuleSetName: string;
          RuleRecipients: JsonNode = nil; After: string = ""; RuleEnabled: string = "";
          Action: string = "CreateReceiptRule"; RuleActions: JsonNode = nil;
          RuleName: string = ""; RuleScanEnabled: string = "";
          RuleTlsPolicy: string = ""; Version: string = "2010-12-01"): Recallable =
  ## postCreateReceiptRule
  ## <p>Creates a receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleRecipients: JArray
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   After: string
  ##        : The name of an existing rule after which the new rule will be placed. If this parameter is null, the new rule will be inserted at the beginning of the rule list.
  ##   RuleEnabled: string
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   RuleSetName: string (required)
  ##              : The name of the rule set that the receipt rule will be added to.
  ##   Action: string (required)
  ##   RuleActions: JArray
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   RuleName: string
  ##           : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   RuleScanEnabled: string
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   RuleTlsPolicy: string
  ##                : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   Version: string (required)
  var query_603296 = newJObject()
  var formData_603297 = newJObject()
  if RuleRecipients != nil:
    formData_603297.add "Rule.Recipients", RuleRecipients
  add(formData_603297, "After", newJString(After))
  add(formData_603297, "Rule.Enabled", newJString(RuleEnabled))
  add(formData_603297, "RuleSetName", newJString(RuleSetName))
  add(query_603296, "Action", newJString(Action))
  if RuleActions != nil:
    formData_603297.add "Rule.Actions", RuleActions
  add(formData_603297, "Rule.Name", newJString(RuleName))
  add(formData_603297, "Rule.ScanEnabled", newJString(RuleScanEnabled))
  add(formData_603297, "Rule.TlsPolicy", newJString(RuleTlsPolicy))
  add(query_603296, "Version", newJString(Version))
  result = call_603295.call(nil, query_603296, nil, formData_603297, nil)

var postCreateReceiptRule* = Call_PostCreateReceiptRule_603274(
    name: "postCreateReceiptRule", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=CreateReceiptRule",
    validator: validate_PostCreateReceiptRule_603275, base: "/",
    url: url_PostCreateReceiptRule_603276, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateReceiptRule_603251 = ref object of OpenApiRestCall_602433
proc url_GetCreateReceiptRule_603253(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateReceiptRule_603252(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Rule.ScanEnabled: JString
  ##                   : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   Rule.Name: JString
  ##            : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Rule.Enabled: JString
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   After: JString
  ##        : The name of an existing rule after which the new rule will be placed. If this parameter is null, the new rule will be inserted at the beginning of the rule list.
  ##   Rule.TlsPolicy: JString
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   RuleSetName: JString (required)
  ##              : The name of the rule set that the receipt rule will be added to.
  ##   Action: JString (required)
  ##   Rule.Actions: JArray
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   Rule.Recipients: JArray
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   Version: JString (required)
  section = newJObject()
  var valid_603254 = query.getOrDefault("Rule.ScanEnabled")
  valid_603254 = validateParameter(valid_603254, JString, required = false,
                                 default = nil)
  if valid_603254 != nil:
    section.add "Rule.ScanEnabled", valid_603254
  var valid_603255 = query.getOrDefault("Rule.Name")
  valid_603255 = validateParameter(valid_603255, JString, required = false,
                                 default = nil)
  if valid_603255 != nil:
    section.add "Rule.Name", valid_603255
  var valid_603256 = query.getOrDefault("Rule.Enabled")
  valid_603256 = validateParameter(valid_603256, JString, required = false,
                                 default = nil)
  if valid_603256 != nil:
    section.add "Rule.Enabled", valid_603256
  var valid_603257 = query.getOrDefault("After")
  valid_603257 = validateParameter(valid_603257, JString, required = false,
                                 default = nil)
  if valid_603257 != nil:
    section.add "After", valid_603257
  var valid_603258 = query.getOrDefault("Rule.TlsPolicy")
  valid_603258 = validateParameter(valid_603258, JString, required = false,
                                 default = nil)
  if valid_603258 != nil:
    section.add "Rule.TlsPolicy", valid_603258
  assert query != nil,
        "query argument is necessary due to required `RuleSetName` field"
  var valid_603259 = query.getOrDefault("RuleSetName")
  valid_603259 = validateParameter(valid_603259, JString, required = true,
                                 default = nil)
  if valid_603259 != nil:
    section.add "RuleSetName", valid_603259
  var valid_603260 = query.getOrDefault("Action")
  valid_603260 = validateParameter(valid_603260, JString, required = true,
                                 default = newJString("CreateReceiptRule"))
  if valid_603260 != nil:
    section.add "Action", valid_603260
  var valid_603261 = query.getOrDefault("Rule.Actions")
  valid_603261 = validateParameter(valid_603261, JArray, required = false,
                                 default = nil)
  if valid_603261 != nil:
    section.add "Rule.Actions", valid_603261
  var valid_603262 = query.getOrDefault("Rule.Recipients")
  valid_603262 = validateParameter(valid_603262, JArray, required = false,
                                 default = nil)
  if valid_603262 != nil:
    section.add "Rule.Recipients", valid_603262
  var valid_603263 = query.getOrDefault("Version")
  valid_603263 = validateParameter(valid_603263, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603263 != nil:
    section.add "Version", valid_603263
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603264 = header.getOrDefault("X-Amz-Date")
  valid_603264 = validateParameter(valid_603264, JString, required = false,
                                 default = nil)
  if valid_603264 != nil:
    section.add "X-Amz-Date", valid_603264
  var valid_603265 = header.getOrDefault("X-Amz-Security-Token")
  valid_603265 = validateParameter(valid_603265, JString, required = false,
                                 default = nil)
  if valid_603265 != nil:
    section.add "X-Amz-Security-Token", valid_603265
  var valid_603266 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603266 = validateParameter(valid_603266, JString, required = false,
                                 default = nil)
  if valid_603266 != nil:
    section.add "X-Amz-Content-Sha256", valid_603266
  var valid_603267 = header.getOrDefault("X-Amz-Algorithm")
  valid_603267 = validateParameter(valid_603267, JString, required = false,
                                 default = nil)
  if valid_603267 != nil:
    section.add "X-Amz-Algorithm", valid_603267
  var valid_603268 = header.getOrDefault("X-Amz-Signature")
  valid_603268 = validateParameter(valid_603268, JString, required = false,
                                 default = nil)
  if valid_603268 != nil:
    section.add "X-Amz-Signature", valid_603268
  var valid_603269 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603269 = validateParameter(valid_603269, JString, required = false,
                                 default = nil)
  if valid_603269 != nil:
    section.add "X-Amz-SignedHeaders", valid_603269
  var valid_603270 = header.getOrDefault("X-Amz-Credential")
  valid_603270 = validateParameter(valid_603270, JString, required = false,
                                 default = nil)
  if valid_603270 != nil:
    section.add "X-Amz-Credential", valid_603270
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603271: Call_GetCreateReceiptRule_603251; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603271.validator(path, query, header, formData, body)
  let scheme = call_603271.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603271.url(scheme.get, call_603271.host, call_603271.base,
                         call_603271.route, valid.getOrDefault("path"))
  result = hook(call_603271, url, valid)

proc call*(call_603272: Call_GetCreateReceiptRule_603251; RuleSetName: string;
          RuleScanEnabled: string = ""; RuleName: string = ""; RuleEnabled: string = "";
          After: string = ""; RuleTlsPolicy: string = "";
          Action: string = "CreateReceiptRule"; RuleActions: JsonNode = nil;
          RuleRecipients: JsonNode = nil; Version: string = "2010-12-01"): Recallable =
  ## getCreateReceiptRule
  ## <p>Creates a receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleScanEnabled: string
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   RuleName: string
  ##           : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   RuleEnabled: string
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   After: string
  ##        : The name of an existing rule after which the new rule will be placed. If this parameter is null, the new rule will be inserted at the beginning of the rule list.
  ##   RuleTlsPolicy: string
  ##                : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   RuleSetName: string (required)
  ##              : The name of the rule set that the receipt rule will be added to.
  ##   Action: string (required)
  ##   RuleActions: JArray
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   RuleRecipients: JArray
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   Version: string (required)
  var query_603273 = newJObject()
  add(query_603273, "Rule.ScanEnabled", newJString(RuleScanEnabled))
  add(query_603273, "Rule.Name", newJString(RuleName))
  add(query_603273, "Rule.Enabled", newJString(RuleEnabled))
  add(query_603273, "After", newJString(After))
  add(query_603273, "Rule.TlsPolicy", newJString(RuleTlsPolicy))
  add(query_603273, "RuleSetName", newJString(RuleSetName))
  add(query_603273, "Action", newJString(Action))
  if RuleActions != nil:
    query_603273.add "Rule.Actions", RuleActions
  if RuleRecipients != nil:
    query_603273.add "Rule.Recipients", RuleRecipients
  add(query_603273, "Version", newJString(Version))
  result = call_603272.call(nil, query_603273, nil, nil, nil)

var getCreateReceiptRule* = Call_GetCreateReceiptRule_603251(
    name: "getCreateReceiptRule", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=CreateReceiptRule",
    validator: validate_GetCreateReceiptRule_603252, base: "/",
    url: url_GetCreateReceiptRule_603253, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateReceiptRuleSet_603314 = ref object of OpenApiRestCall_602433
proc url_PostCreateReceiptRuleSet_603316(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateReceiptRuleSet_603315(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an empty receipt rule set.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603317 = query.getOrDefault("Action")
  valid_603317 = validateParameter(valid_603317, JString, required = true,
                                 default = newJString("CreateReceiptRuleSet"))
  if valid_603317 != nil:
    section.add "Action", valid_603317
  var valid_603318 = query.getOrDefault("Version")
  valid_603318 = validateParameter(valid_603318, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603318 != nil:
    section.add "Version", valid_603318
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603319 = header.getOrDefault("X-Amz-Date")
  valid_603319 = validateParameter(valid_603319, JString, required = false,
                                 default = nil)
  if valid_603319 != nil:
    section.add "X-Amz-Date", valid_603319
  var valid_603320 = header.getOrDefault("X-Amz-Security-Token")
  valid_603320 = validateParameter(valid_603320, JString, required = false,
                                 default = nil)
  if valid_603320 != nil:
    section.add "X-Amz-Security-Token", valid_603320
  var valid_603321 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603321 = validateParameter(valid_603321, JString, required = false,
                                 default = nil)
  if valid_603321 != nil:
    section.add "X-Amz-Content-Sha256", valid_603321
  var valid_603322 = header.getOrDefault("X-Amz-Algorithm")
  valid_603322 = validateParameter(valid_603322, JString, required = false,
                                 default = nil)
  if valid_603322 != nil:
    section.add "X-Amz-Algorithm", valid_603322
  var valid_603323 = header.getOrDefault("X-Amz-Signature")
  valid_603323 = validateParameter(valid_603323, JString, required = false,
                                 default = nil)
  if valid_603323 != nil:
    section.add "X-Amz-Signature", valid_603323
  var valid_603324 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603324 = validateParameter(valid_603324, JString, required = false,
                                 default = nil)
  if valid_603324 != nil:
    section.add "X-Amz-SignedHeaders", valid_603324
  var valid_603325 = header.getOrDefault("X-Amz-Credential")
  valid_603325 = validateParameter(valid_603325, JString, required = false,
                                 default = nil)
  if valid_603325 != nil:
    section.add "X-Amz-Credential", valid_603325
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleSetName: JString (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleSetName` field"
  var valid_603326 = formData.getOrDefault("RuleSetName")
  valid_603326 = validateParameter(valid_603326, JString, required = true,
                                 default = nil)
  if valid_603326 != nil:
    section.add "RuleSetName", valid_603326
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603327: Call_PostCreateReceiptRuleSet_603314; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an empty receipt rule set.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603327.validator(path, query, header, formData, body)
  let scheme = call_603327.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603327.url(scheme.get, call_603327.host, call_603327.base,
                         call_603327.route, valid.getOrDefault("path"))
  result = hook(call_603327, url, valid)

proc call*(call_603328: Call_PostCreateReceiptRuleSet_603314; RuleSetName: string;
          Action: string = "CreateReceiptRuleSet"; Version: string = "2010-12-01"): Recallable =
  ## postCreateReceiptRuleSet
  ## <p>Creates an empty receipt rule set.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603329 = newJObject()
  var formData_603330 = newJObject()
  add(formData_603330, "RuleSetName", newJString(RuleSetName))
  add(query_603329, "Action", newJString(Action))
  add(query_603329, "Version", newJString(Version))
  result = call_603328.call(nil, query_603329, nil, formData_603330, nil)

var postCreateReceiptRuleSet* = Call_PostCreateReceiptRuleSet_603314(
    name: "postCreateReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=CreateReceiptRuleSet",
    validator: validate_PostCreateReceiptRuleSet_603315, base: "/",
    url: url_PostCreateReceiptRuleSet_603316, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateReceiptRuleSet_603298 = ref object of OpenApiRestCall_602433
proc url_GetCreateReceiptRuleSet_603300(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateReceiptRuleSet_603299(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an empty receipt rule set.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleSetName: JString (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleSetName` field"
  var valid_603301 = query.getOrDefault("RuleSetName")
  valid_603301 = validateParameter(valid_603301, JString, required = true,
                                 default = nil)
  if valid_603301 != nil:
    section.add "RuleSetName", valid_603301
  var valid_603302 = query.getOrDefault("Action")
  valid_603302 = validateParameter(valid_603302, JString, required = true,
                                 default = newJString("CreateReceiptRuleSet"))
  if valid_603302 != nil:
    section.add "Action", valid_603302
  var valid_603303 = query.getOrDefault("Version")
  valid_603303 = validateParameter(valid_603303, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603303 != nil:
    section.add "Version", valid_603303
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603304 = header.getOrDefault("X-Amz-Date")
  valid_603304 = validateParameter(valid_603304, JString, required = false,
                                 default = nil)
  if valid_603304 != nil:
    section.add "X-Amz-Date", valid_603304
  var valid_603305 = header.getOrDefault("X-Amz-Security-Token")
  valid_603305 = validateParameter(valid_603305, JString, required = false,
                                 default = nil)
  if valid_603305 != nil:
    section.add "X-Amz-Security-Token", valid_603305
  var valid_603306 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603306 = validateParameter(valid_603306, JString, required = false,
                                 default = nil)
  if valid_603306 != nil:
    section.add "X-Amz-Content-Sha256", valid_603306
  var valid_603307 = header.getOrDefault("X-Amz-Algorithm")
  valid_603307 = validateParameter(valid_603307, JString, required = false,
                                 default = nil)
  if valid_603307 != nil:
    section.add "X-Amz-Algorithm", valid_603307
  var valid_603308 = header.getOrDefault("X-Amz-Signature")
  valid_603308 = validateParameter(valid_603308, JString, required = false,
                                 default = nil)
  if valid_603308 != nil:
    section.add "X-Amz-Signature", valid_603308
  var valid_603309 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603309 = validateParameter(valid_603309, JString, required = false,
                                 default = nil)
  if valid_603309 != nil:
    section.add "X-Amz-SignedHeaders", valid_603309
  var valid_603310 = header.getOrDefault("X-Amz-Credential")
  valid_603310 = validateParameter(valid_603310, JString, required = false,
                                 default = nil)
  if valid_603310 != nil:
    section.add "X-Amz-Credential", valid_603310
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603311: Call_GetCreateReceiptRuleSet_603298; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an empty receipt rule set.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603311.validator(path, query, header, formData, body)
  let scheme = call_603311.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603311.url(scheme.get, call_603311.host, call_603311.base,
                         call_603311.route, valid.getOrDefault("path"))
  result = hook(call_603311, url, valid)

proc call*(call_603312: Call_GetCreateReceiptRuleSet_603298; RuleSetName: string;
          Action: string = "CreateReceiptRuleSet"; Version: string = "2010-12-01"): Recallable =
  ## getCreateReceiptRuleSet
  ## <p>Creates an empty receipt rule set.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603313 = newJObject()
  add(query_603313, "RuleSetName", newJString(RuleSetName))
  add(query_603313, "Action", newJString(Action))
  add(query_603313, "Version", newJString(Version))
  result = call_603312.call(nil, query_603313, nil, nil, nil)

var getCreateReceiptRuleSet* = Call_GetCreateReceiptRuleSet_603298(
    name: "getCreateReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=CreateReceiptRuleSet",
    validator: validate_GetCreateReceiptRuleSet_603299, base: "/",
    url: url_GetCreateReceiptRuleSet_603300, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateTemplate_603350 = ref object of OpenApiRestCall_602433
proc url_PostCreateTemplate_603352(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateTemplate_603351(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603353 = query.getOrDefault("Action")
  valid_603353 = validateParameter(valid_603353, JString, required = true,
                                 default = newJString("CreateTemplate"))
  if valid_603353 != nil:
    section.add "Action", valid_603353
  var valid_603354 = query.getOrDefault("Version")
  valid_603354 = validateParameter(valid_603354, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603354 != nil:
    section.add "Version", valid_603354
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603355 = header.getOrDefault("X-Amz-Date")
  valid_603355 = validateParameter(valid_603355, JString, required = false,
                                 default = nil)
  if valid_603355 != nil:
    section.add "X-Amz-Date", valid_603355
  var valid_603356 = header.getOrDefault("X-Amz-Security-Token")
  valid_603356 = validateParameter(valid_603356, JString, required = false,
                                 default = nil)
  if valid_603356 != nil:
    section.add "X-Amz-Security-Token", valid_603356
  var valid_603357 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603357 = validateParameter(valid_603357, JString, required = false,
                                 default = nil)
  if valid_603357 != nil:
    section.add "X-Amz-Content-Sha256", valid_603357
  var valid_603358 = header.getOrDefault("X-Amz-Algorithm")
  valid_603358 = validateParameter(valid_603358, JString, required = false,
                                 default = nil)
  if valid_603358 != nil:
    section.add "X-Amz-Algorithm", valid_603358
  var valid_603359 = header.getOrDefault("X-Amz-Signature")
  valid_603359 = validateParameter(valid_603359, JString, required = false,
                                 default = nil)
  if valid_603359 != nil:
    section.add "X-Amz-Signature", valid_603359
  var valid_603360 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603360 = validateParameter(valid_603360, JString, required = false,
                                 default = nil)
  if valid_603360 != nil:
    section.add "X-Amz-SignedHeaders", valid_603360
  var valid_603361 = header.getOrDefault("X-Amz-Credential")
  valid_603361 = validateParameter(valid_603361, JString, required = false,
                                 default = nil)
  if valid_603361 != nil:
    section.add "X-Amz-Credential", valid_603361
  result.add "header", section
  ## parameters in `formData` object:
  ##   Template.HtmlPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   Template.TemplateName: JString
  ##                        : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   Template.TextPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Template.SubjectPart: JString
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  section = newJObject()
  var valid_603362 = formData.getOrDefault("Template.HtmlPart")
  valid_603362 = validateParameter(valid_603362, JString, required = false,
                                 default = nil)
  if valid_603362 != nil:
    section.add "Template.HtmlPart", valid_603362
  var valid_603363 = formData.getOrDefault("Template.TemplateName")
  valid_603363 = validateParameter(valid_603363, JString, required = false,
                                 default = nil)
  if valid_603363 != nil:
    section.add "Template.TemplateName", valid_603363
  var valid_603364 = formData.getOrDefault("Template.TextPart")
  valid_603364 = validateParameter(valid_603364, JString, required = false,
                                 default = nil)
  if valid_603364 != nil:
    section.add "Template.TextPart", valid_603364
  var valid_603365 = formData.getOrDefault("Template.SubjectPart")
  valid_603365 = validateParameter(valid_603365, JString, required = false,
                                 default = nil)
  if valid_603365 != nil:
    section.add "Template.SubjectPart", valid_603365
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603366: Call_PostCreateTemplate_603350; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603366.validator(path, query, header, formData, body)
  let scheme = call_603366.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603366.url(scheme.get, call_603366.host, call_603366.base,
                         call_603366.route, valid.getOrDefault("path"))
  result = hook(call_603366, url, valid)

proc call*(call_603367: Call_PostCreateTemplate_603350;
          Action: string = "CreateTemplate"; TemplateHtmlPart: string = "";
          TemplateTemplateName: string = ""; TemplateTextPart: string = "";
          Version: string = "2010-12-01"; TemplateSubjectPart: string = ""): Recallable =
  ## postCreateTemplate
  ## <p>Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateHtmlPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   TemplateTemplateName: string
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   TemplateTextPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Version: string (required)
  ##   TemplateSubjectPart: string
  ##                      : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  var query_603368 = newJObject()
  var formData_603369 = newJObject()
  add(query_603368, "Action", newJString(Action))
  add(formData_603369, "Template.HtmlPart", newJString(TemplateHtmlPart))
  add(formData_603369, "Template.TemplateName", newJString(TemplateTemplateName))
  add(formData_603369, "Template.TextPart", newJString(TemplateTextPart))
  add(query_603368, "Version", newJString(Version))
  add(formData_603369, "Template.SubjectPart", newJString(TemplateSubjectPart))
  result = call_603367.call(nil, query_603368, nil, formData_603369, nil)

var postCreateTemplate* = Call_PostCreateTemplate_603350(
    name: "postCreateTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=CreateTemplate",
    validator: validate_PostCreateTemplate_603351, base: "/",
    url: url_PostCreateTemplate_603352, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateTemplate_603331 = ref object of OpenApiRestCall_602433
proc url_GetCreateTemplate_603333(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateTemplate_603332(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Template.TemplateName: JString
  ##                        : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   Action: JString (required)
  ##   Template.SubjectPart: JString
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  ##   Template.HtmlPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   Template.TextPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Version: JString (required)
  section = newJObject()
  var valid_603334 = query.getOrDefault("Template.TemplateName")
  valid_603334 = validateParameter(valid_603334, JString, required = false,
                                 default = nil)
  if valid_603334 != nil:
    section.add "Template.TemplateName", valid_603334
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603335 = query.getOrDefault("Action")
  valid_603335 = validateParameter(valid_603335, JString, required = true,
                                 default = newJString("CreateTemplate"))
  if valid_603335 != nil:
    section.add "Action", valid_603335
  var valid_603336 = query.getOrDefault("Template.SubjectPart")
  valid_603336 = validateParameter(valid_603336, JString, required = false,
                                 default = nil)
  if valid_603336 != nil:
    section.add "Template.SubjectPart", valid_603336
  var valid_603337 = query.getOrDefault("Template.HtmlPart")
  valid_603337 = validateParameter(valid_603337, JString, required = false,
                                 default = nil)
  if valid_603337 != nil:
    section.add "Template.HtmlPart", valid_603337
  var valid_603338 = query.getOrDefault("Template.TextPart")
  valid_603338 = validateParameter(valid_603338, JString, required = false,
                                 default = nil)
  if valid_603338 != nil:
    section.add "Template.TextPart", valid_603338
  var valid_603339 = query.getOrDefault("Version")
  valid_603339 = validateParameter(valid_603339, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603339 != nil:
    section.add "Version", valid_603339
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603340 = header.getOrDefault("X-Amz-Date")
  valid_603340 = validateParameter(valid_603340, JString, required = false,
                                 default = nil)
  if valid_603340 != nil:
    section.add "X-Amz-Date", valid_603340
  var valid_603341 = header.getOrDefault("X-Amz-Security-Token")
  valid_603341 = validateParameter(valid_603341, JString, required = false,
                                 default = nil)
  if valid_603341 != nil:
    section.add "X-Amz-Security-Token", valid_603341
  var valid_603342 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603342 = validateParameter(valid_603342, JString, required = false,
                                 default = nil)
  if valid_603342 != nil:
    section.add "X-Amz-Content-Sha256", valid_603342
  var valid_603343 = header.getOrDefault("X-Amz-Algorithm")
  valid_603343 = validateParameter(valid_603343, JString, required = false,
                                 default = nil)
  if valid_603343 != nil:
    section.add "X-Amz-Algorithm", valid_603343
  var valid_603344 = header.getOrDefault("X-Amz-Signature")
  valid_603344 = validateParameter(valid_603344, JString, required = false,
                                 default = nil)
  if valid_603344 != nil:
    section.add "X-Amz-Signature", valid_603344
  var valid_603345 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603345 = validateParameter(valid_603345, JString, required = false,
                                 default = nil)
  if valid_603345 != nil:
    section.add "X-Amz-SignedHeaders", valid_603345
  var valid_603346 = header.getOrDefault("X-Amz-Credential")
  valid_603346 = validateParameter(valid_603346, JString, required = false,
                                 default = nil)
  if valid_603346 != nil:
    section.add "X-Amz-Credential", valid_603346
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603347: Call_GetCreateTemplate_603331; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603347.validator(path, query, header, formData, body)
  let scheme = call_603347.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603347.url(scheme.get, call_603347.host, call_603347.base,
                         call_603347.route, valid.getOrDefault("path"))
  result = hook(call_603347, url, valid)

proc call*(call_603348: Call_GetCreateTemplate_603331;
          TemplateTemplateName: string = ""; Action: string = "CreateTemplate";
          TemplateSubjectPart: string = ""; TemplateHtmlPart: string = "";
          TemplateTextPart: string = ""; Version: string = "2010-12-01"): Recallable =
  ## getCreateTemplate
  ## <p>Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateTemplateName: string
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   Action: string (required)
  ##   TemplateSubjectPart: string
  ##                      : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  ##   TemplateHtmlPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   TemplateTextPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Version: string (required)
  var query_603349 = newJObject()
  add(query_603349, "Template.TemplateName", newJString(TemplateTemplateName))
  add(query_603349, "Action", newJString(Action))
  add(query_603349, "Template.SubjectPart", newJString(TemplateSubjectPart))
  add(query_603349, "Template.HtmlPart", newJString(TemplateHtmlPart))
  add(query_603349, "Template.TextPart", newJString(TemplateTextPart))
  add(query_603349, "Version", newJString(Version))
  result = call_603348.call(nil, query_603349, nil, nil, nil)

var getCreateTemplate* = Call_GetCreateTemplate_603331(name: "getCreateTemplate",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=CreateTemplate", validator: validate_GetCreateTemplate_603332,
    base: "/", url: url_GetCreateTemplate_603333,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteConfigurationSet_603386 = ref object of OpenApiRestCall_602433
proc url_PostDeleteConfigurationSet_603388(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteConfigurationSet_603387(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603389 = query.getOrDefault("Action")
  valid_603389 = validateParameter(valid_603389, JString, required = true,
                                 default = newJString("DeleteConfigurationSet"))
  if valid_603389 != nil:
    section.add "Action", valid_603389
  var valid_603390 = query.getOrDefault("Version")
  valid_603390 = validateParameter(valid_603390, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603390 != nil:
    section.add "Version", valid_603390
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603391 = header.getOrDefault("X-Amz-Date")
  valid_603391 = validateParameter(valid_603391, JString, required = false,
                                 default = nil)
  if valid_603391 != nil:
    section.add "X-Amz-Date", valid_603391
  var valid_603392 = header.getOrDefault("X-Amz-Security-Token")
  valid_603392 = validateParameter(valid_603392, JString, required = false,
                                 default = nil)
  if valid_603392 != nil:
    section.add "X-Amz-Security-Token", valid_603392
  var valid_603393 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603393 = validateParameter(valid_603393, JString, required = false,
                                 default = nil)
  if valid_603393 != nil:
    section.add "X-Amz-Content-Sha256", valid_603393
  var valid_603394 = header.getOrDefault("X-Amz-Algorithm")
  valid_603394 = validateParameter(valid_603394, JString, required = false,
                                 default = nil)
  if valid_603394 != nil:
    section.add "X-Amz-Algorithm", valid_603394
  var valid_603395 = header.getOrDefault("X-Amz-Signature")
  valid_603395 = validateParameter(valid_603395, JString, required = false,
                                 default = nil)
  if valid_603395 != nil:
    section.add "X-Amz-Signature", valid_603395
  var valid_603396 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603396 = validateParameter(valid_603396, JString, required = false,
                                 default = nil)
  if valid_603396 != nil:
    section.add "X-Amz-SignedHeaders", valid_603396
  var valid_603397 = header.getOrDefault("X-Amz-Credential")
  valid_603397 = validateParameter(valid_603397, JString, required = false,
                                 default = nil)
  if valid_603397 != nil:
    section.add "X-Amz-Credential", valid_603397
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set to delete.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_603398 = formData.getOrDefault("ConfigurationSetName")
  valid_603398 = validateParameter(valid_603398, JString, required = true,
                                 default = nil)
  if valid_603398 != nil:
    section.add "ConfigurationSetName", valid_603398
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603399: Call_PostDeleteConfigurationSet_603386; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603399.validator(path, query, header, formData, body)
  let scheme = call_603399.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603399.url(scheme.get, call_603399.host, call_603399.base,
                         call_603399.route, valid.getOrDefault("path"))
  result = hook(call_603399, url, valid)

proc call*(call_603400: Call_PostDeleteConfigurationSet_603386;
          ConfigurationSetName: string; Action: string = "DeleteConfigurationSet";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteConfigurationSet
  ## <p>Deletes a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603401 = newJObject()
  var formData_603402 = newJObject()
  add(formData_603402, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_603401, "Action", newJString(Action))
  add(query_603401, "Version", newJString(Version))
  result = call_603400.call(nil, query_603401, nil, formData_603402, nil)

var postDeleteConfigurationSet* = Call_PostDeleteConfigurationSet_603386(
    name: "postDeleteConfigurationSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteConfigurationSet",
    validator: validate_PostDeleteConfigurationSet_603387, base: "/",
    url: url_PostDeleteConfigurationSet_603388,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteConfigurationSet_603370 = ref object of OpenApiRestCall_602433
proc url_GetDeleteConfigurationSet_603372(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteConfigurationSet_603371(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set to delete.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603373 = query.getOrDefault("Action")
  valid_603373 = validateParameter(valid_603373, JString, required = true,
                                 default = newJString("DeleteConfigurationSet"))
  if valid_603373 != nil:
    section.add "Action", valid_603373
  var valid_603374 = query.getOrDefault("ConfigurationSetName")
  valid_603374 = validateParameter(valid_603374, JString, required = true,
                                 default = nil)
  if valid_603374 != nil:
    section.add "ConfigurationSetName", valid_603374
  var valid_603375 = query.getOrDefault("Version")
  valid_603375 = validateParameter(valid_603375, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603375 != nil:
    section.add "Version", valid_603375
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603376 = header.getOrDefault("X-Amz-Date")
  valid_603376 = validateParameter(valid_603376, JString, required = false,
                                 default = nil)
  if valid_603376 != nil:
    section.add "X-Amz-Date", valid_603376
  var valid_603377 = header.getOrDefault("X-Amz-Security-Token")
  valid_603377 = validateParameter(valid_603377, JString, required = false,
                                 default = nil)
  if valid_603377 != nil:
    section.add "X-Amz-Security-Token", valid_603377
  var valid_603378 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603378 = validateParameter(valid_603378, JString, required = false,
                                 default = nil)
  if valid_603378 != nil:
    section.add "X-Amz-Content-Sha256", valid_603378
  var valid_603379 = header.getOrDefault("X-Amz-Algorithm")
  valid_603379 = validateParameter(valid_603379, JString, required = false,
                                 default = nil)
  if valid_603379 != nil:
    section.add "X-Amz-Algorithm", valid_603379
  var valid_603380 = header.getOrDefault("X-Amz-Signature")
  valid_603380 = validateParameter(valid_603380, JString, required = false,
                                 default = nil)
  if valid_603380 != nil:
    section.add "X-Amz-Signature", valid_603380
  var valid_603381 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603381 = validateParameter(valid_603381, JString, required = false,
                                 default = nil)
  if valid_603381 != nil:
    section.add "X-Amz-SignedHeaders", valid_603381
  var valid_603382 = header.getOrDefault("X-Amz-Credential")
  valid_603382 = validateParameter(valid_603382, JString, required = false,
                                 default = nil)
  if valid_603382 != nil:
    section.add "X-Amz-Credential", valid_603382
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603383: Call_GetDeleteConfigurationSet_603370; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603383.validator(path, query, header, formData, body)
  let scheme = call_603383.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603383.url(scheme.get, call_603383.host, call_603383.base,
                         call_603383.route, valid.getOrDefault("path"))
  result = hook(call_603383, url, valid)

proc call*(call_603384: Call_GetDeleteConfigurationSet_603370;
          ConfigurationSetName: string; Action: string = "DeleteConfigurationSet";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteConfigurationSet
  ## <p>Deletes a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set to delete.
  ##   Version: string (required)
  var query_603385 = newJObject()
  add(query_603385, "Action", newJString(Action))
  add(query_603385, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_603385, "Version", newJString(Version))
  result = call_603384.call(nil, query_603385, nil, nil, nil)

var getDeleteConfigurationSet* = Call_GetDeleteConfigurationSet_603370(
    name: "getDeleteConfigurationSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DeleteConfigurationSet",
    validator: validate_GetDeleteConfigurationSet_603371, base: "/",
    url: url_GetDeleteConfigurationSet_603372,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteConfigurationSetEventDestination_603420 = ref object of OpenApiRestCall_602433
proc url_PostDeleteConfigurationSetEventDestination_603422(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteConfigurationSetEventDestination_603421(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603423 = query.getOrDefault("Action")
  valid_603423 = validateParameter(valid_603423, JString, required = true, default = newJString(
      "DeleteConfigurationSetEventDestination"))
  if valid_603423 != nil:
    section.add "Action", valid_603423
  var valid_603424 = query.getOrDefault("Version")
  valid_603424 = validateParameter(valid_603424, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603424 != nil:
    section.add "Version", valid_603424
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603425 = header.getOrDefault("X-Amz-Date")
  valid_603425 = validateParameter(valid_603425, JString, required = false,
                                 default = nil)
  if valid_603425 != nil:
    section.add "X-Amz-Date", valid_603425
  var valid_603426 = header.getOrDefault("X-Amz-Security-Token")
  valid_603426 = validateParameter(valid_603426, JString, required = false,
                                 default = nil)
  if valid_603426 != nil:
    section.add "X-Amz-Security-Token", valid_603426
  var valid_603427 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603427 = validateParameter(valid_603427, JString, required = false,
                                 default = nil)
  if valid_603427 != nil:
    section.add "X-Amz-Content-Sha256", valid_603427
  var valid_603428 = header.getOrDefault("X-Amz-Algorithm")
  valid_603428 = validateParameter(valid_603428, JString, required = false,
                                 default = nil)
  if valid_603428 != nil:
    section.add "X-Amz-Algorithm", valid_603428
  var valid_603429 = header.getOrDefault("X-Amz-Signature")
  valid_603429 = validateParameter(valid_603429, JString, required = false,
                                 default = nil)
  if valid_603429 != nil:
    section.add "X-Amz-Signature", valid_603429
  var valid_603430 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603430 = validateParameter(valid_603430, JString, required = false,
                                 default = nil)
  if valid_603430 != nil:
    section.add "X-Amz-SignedHeaders", valid_603430
  var valid_603431 = header.getOrDefault("X-Amz-Credential")
  valid_603431 = validateParameter(valid_603431, JString, required = false,
                                 default = nil)
  if valid_603431 != nil:
    section.add "X-Amz-Credential", valid_603431
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set from which to delete the event destination.
  ##   EventDestinationName: JString (required)
  ##                       : The name of the event destination to delete.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_603432 = formData.getOrDefault("ConfigurationSetName")
  valid_603432 = validateParameter(valid_603432, JString, required = true,
                                 default = nil)
  if valid_603432 != nil:
    section.add "ConfigurationSetName", valid_603432
  var valid_603433 = formData.getOrDefault("EventDestinationName")
  valid_603433 = validateParameter(valid_603433, JString, required = true,
                                 default = nil)
  if valid_603433 != nil:
    section.add "EventDestinationName", valid_603433
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603434: Call_PostDeleteConfigurationSetEventDestination_603420;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603434.validator(path, query, header, formData, body)
  let scheme = call_603434.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603434.url(scheme.get, call_603434.host, call_603434.base,
                         call_603434.route, valid.getOrDefault("path"))
  result = hook(call_603434, url, valid)

proc call*(call_603435: Call_PostDeleteConfigurationSetEventDestination_603420;
          ConfigurationSetName: string; EventDestinationName: string;
          Action: string = "DeleteConfigurationSetEventDestination";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteConfigurationSetEventDestination
  ## <p>Deletes a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set from which to delete the event destination.
  ##   EventDestinationName: string (required)
  ##                       : The name of the event destination to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603436 = newJObject()
  var formData_603437 = newJObject()
  add(formData_603437, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_603437, "EventDestinationName", newJString(EventDestinationName))
  add(query_603436, "Action", newJString(Action))
  add(query_603436, "Version", newJString(Version))
  result = call_603435.call(nil, query_603436, nil, formData_603437, nil)

var postDeleteConfigurationSetEventDestination* = Call_PostDeleteConfigurationSetEventDestination_603420(
    name: "postDeleteConfigurationSetEventDestination", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=DeleteConfigurationSetEventDestination",
    validator: validate_PostDeleteConfigurationSetEventDestination_603421,
    base: "/", url: url_PostDeleteConfigurationSetEventDestination_603422,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteConfigurationSetEventDestination_603403 = ref object of OpenApiRestCall_602433
proc url_GetDeleteConfigurationSetEventDestination_603405(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteConfigurationSetEventDestination_603404(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   EventDestinationName: JString (required)
  ##                       : The name of the event destination to delete.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set from which to delete the event destination.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603406 = query.getOrDefault("Action")
  valid_603406 = validateParameter(valid_603406, JString, required = true, default = newJString(
      "DeleteConfigurationSetEventDestination"))
  if valid_603406 != nil:
    section.add "Action", valid_603406
  var valid_603407 = query.getOrDefault("EventDestinationName")
  valid_603407 = validateParameter(valid_603407, JString, required = true,
                                 default = nil)
  if valid_603407 != nil:
    section.add "EventDestinationName", valid_603407
  var valid_603408 = query.getOrDefault("ConfigurationSetName")
  valid_603408 = validateParameter(valid_603408, JString, required = true,
                                 default = nil)
  if valid_603408 != nil:
    section.add "ConfigurationSetName", valid_603408
  var valid_603409 = query.getOrDefault("Version")
  valid_603409 = validateParameter(valid_603409, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603409 != nil:
    section.add "Version", valid_603409
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603410 = header.getOrDefault("X-Amz-Date")
  valid_603410 = validateParameter(valid_603410, JString, required = false,
                                 default = nil)
  if valid_603410 != nil:
    section.add "X-Amz-Date", valid_603410
  var valid_603411 = header.getOrDefault("X-Amz-Security-Token")
  valid_603411 = validateParameter(valid_603411, JString, required = false,
                                 default = nil)
  if valid_603411 != nil:
    section.add "X-Amz-Security-Token", valid_603411
  var valid_603412 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603412 = validateParameter(valid_603412, JString, required = false,
                                 default = nil)
  if valid_603412 != nil:
    section.add "X-Amz-Content-Sha256", valid_603412
  var valid_603413 = header.getOrDefault("X-Amz-Algorithm")
  valid_603413 = validateParameter(valid_603413, JString, required = false,
                                 default = nil)
  if valid_603413 != nil:
    section.add "X-Amz-Algorithm", valid_603413
  var valid_603414 = header.getOrDefault("X-Amz-Signature")
  valid_603414 = validateParameter(valid_603414, JString, required = false,
                                 default = nil)
  if valid_603414 != nil:
    section.add "X-Amz-Signature", valid_603414
  var valid_603415 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603415 = validateParameter(valid_603415, JString, required = false,
                                 default = nil)
  if valid_603415 != nil:
    section.add "X-Amz-SignedHeaders", valid_603415
  var valid_603416 = header.getOrDefault("X-Amz-Credential")
  valid_603416 = validateParameter(valid_603416, JString, required = false,
                                 default = nil)
  if valid_603416 != nil:
    section.add "X-Amz-Credential", valid_603416
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603417: Call_GetDeleteConfigurationSetEventDestination_603403;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603417.validator(path, query, header, formData, body)
  let scheme = call_603417.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603417.url(scheme.get, call_603417.host, call_603417.base,
                         call_603417.route, valid.getOrDefault("path"))
  result = hook(call_603417, url, valid)

proc call*(call_603418: Call_GetDeleteConfigurationSetEventDestination_603403;
          EventDestinationName: string; ConfigurationSetName: string;
          Action: string = "DeleteConfigurationSetEventDestination";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteConfigurationSetEventDestination
  ## <p>Deletes a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   EventDestinationName: string (required)
  ##                       : The name of the event destination to delete.
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set from which to delete the event destination.
  ##   Version: string (required)
  var query_603419 = newJObject()
  add(query_603419, "Action", newJString(Action))
  add(query_603419, "EventDestinationName", newJString(EventDestinationName))
  add(query_603419, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_603419, "Version", newJString(Version))
  result = call_603418.call(nil, query_603419, nil, nil, nil)

var getDeleteConfigurationSetEventDestination* = Call_GetDeleteConfigurationSetEventDestination_603403(
    name: "getDeleteConfigurationSetEventDestination", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=DeleteConfigurationSetEventDestination",
    validator: validate_GetDeleteConfigurationSetEventDestination_603404,
    base: "/", url: url_GetDeleteConfigurationSetEventDestination_603405,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteConfigurationSetTrackingOptions_603454 = ref object of OpenApiRestCall_602433
proc url_PostDeleteConfigurationSetTrackingOptions_603456(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteConfigurationSetTrackingOptions_603455(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an association between a configuration set and a custom domain for open and click event tracking.</p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p> <note> <p>Deleting this kind of association will result in emails sent using the specified configuration set to capture open and click events using the standard, Amazon SES-operated domains.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603457 = query.getOrDefault("Action")
  valid_603457 = validateParameter(valid_603457, JString, required = true, default = newJString(
      "DeleteConfigurationSetTrackingOptions"))
  if valid_603457 != nil:
    section.add "Action", valid_603457
  var valid_603458 = query.getOrDefault("Version")
  valid_603458 = validateParameter(valid_603458, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603458 != nil:
    section.add "Version", valid_603458
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603459 = header.getOrDefault("X-Amz-Date")
  valid_603459 = validateParameter(valid_603459, JString, required = false,
                                 default = nil)
  if valid_603459 != nil:
    section.add "X-Amz-Date", valid_603459
  var valid_603460 = header.getOrDefault("X-Amz-Security-Token")
  valid_603460 = validateParameter(valid_603460, JString, required = false,
                                 default = nil)
  if valid_603460 != nil:
    section.add "X-Amz-Security-Token", valid_603460
  var valid_603461 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603461 = validateParameter(valid_603461, JString, required = false,
                                 default = nil)
  if valid_603461 != nil:
    section.add "X-Amz-Content-Sha256", valid_603461
  var valid_603462 = header.getOrDefault("X-Amz-Algorithm")
  valid_603462 = validateParameter(valid_603462, JString, required = false,
                                 default = nil)
  if valid_603462 != nil:
    section.add "X-Amz-Algorithm", valid_603462
  var valid_603463 = header.getOrDefault("X-Amz-Signature")
  valid_603463 = validateParameter(valid_603463, JString, required = false,
                                 default = nil)
  if valid_603463 != nil:
    section.add "X-Amz-Signature", valid_603463
  var valid_603464 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603464 = validateParameter(valid_603464, JString, required = false,
                                 default = nil)
  if valid_603464 != nil:
    section.add "X-Amz-SignedHeaders", valid_603464
  var valid_603465 = header.getOrDefault("X-Amz-Credential")
  valid_603465 = validateParameter(valid_603465, JString, required = false,
                                 default = nil)
  if valid_603465 != nil:
    section.add "X-Amz-Credential", valid_603465
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set from which you want to delete the tracking options.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_603466 = formData.getOrDefault("ConfigurationSetName")
  valid_603466 = validateParameter(valid_603466, JString, required = true,
                                 default = nil)
  if valid_603466 != nil:
    section.add "ConfigurationSetName", valid_603466
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603467: Call_PostDeleteConfigurationSetTrackingOptions_603454;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes an association between a configuration set and a custom domain for open and click event tracking.</p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p> <note> <p>Deleting this kind of association will result in emails sent using the specified configuration set to capture open and click events using the standard, Amazon SES-operated domains.</p> </note>
  ## 
  let valid = call_603467.validator(path, query, header, formData, body)
  let scheme = call_603467.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603467.url(scheme.get, call_603467.host, call_603467.base,
                         call_603467.route, valid.getOrDefault("path"))
  result = hook(call_603467, url, valid)

proc call*(call_603468: Call_PostDeleteConfigurationSetTrackingOptions_603454;
          ConfigurationSetName: string;
          Action: string = "DeleteConfigurationSetTrackingOptions";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteConfigurationSetTrackingOptions
  ## <p>Deletes an association between a configuration set and a custom domain for open and click event tracking.</p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p> <note> <p>Deleting this kind of association will result in emails sent using the specified configuration set to capture open and click events using the standard, Amazon SES-operated domains.</p> </note>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set from which you want to delete the tracking options.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603469 = newJObject()
  var formData_603470 = newJObject()
  add(formData_603470, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_603469, "Action", newJString(Action))
  add(query_603469, "Version", newJString(Version))
  result = call_603468.call(nil, query_603469, nil, formData_603470, nil)

var postDeleteConfigurationSetTrackingOptions* = Call_PostDeleteConfigurationSetTrackingOptions_603454(
    name: "postDeleteConfigurationSetTrackingOptions", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=DeleteConfigurationSetTrackingOptions",
    validator: validate_PostDeleteConfigurationSetTrackingOptions_603455,
    base: "/", url: url_PostDeleteConfigurationSetTrackingOptions_603456,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteConfigurationSetTrackingOptions_603438 = ref object of OpenApiRestCall_602433
proc url_GetDeleteConfigurationSetTrackingOptions_603440(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteConfigurationSetTrackingOptions_603439(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an association between a configuration set and a custom domain for open and click event tracking.</p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p> <note> <p>Deleting this kind of association will result in emails sent using the specified configuration set to capture open and click events using the standard, Amazon SES-operated domains.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set from which you want to delete the tracking options.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603441 = query.getOrDefault("Action")
  valid_603441 = validateParameter(valid_603441, JString, required = true, default = newJString(
      "DeleteConfigurationSetTrackingOptions"))
  if valid_603441 != nil:
    section.add "Action", valid_603441
  var valid_603442 = query.getOrDefault("ConfigurationSetName")
  valid_603442 = validateParameter(valid_603442, JString, required = true,
                                 default = nil)
  if valid_603442 != nil:
    section.add "ConfigurationSetName", valid_603442
  var valid_603443 = query.getOrDefault("Version")
  valid_603443 = validateParameter(valid_603443, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603443 != nil:
    section.add "Version", valid_603443
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603444 = header.getOrDefault("X-Amz-Date")
  valid_603444 = validateParameter(valid_603444, JString, required = false,
                                 default = nil)
  if valid_603444 != nil:
    section.add "X-Amz-Date", valid_603444
  var valid_603445 = header.getOrDefault("X-Amz-Security-Token")
  valid_603445 = validateParameter(valid_603445, JString, required = false,
                                 default = nil)
  if valid_603445 != nil:
    section.add "X-Amz-Security-Token", valid_603445
  var valid_603446 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603446 = validateParameter(valid_603446, JString, required = false,
                                 default = nil)
  if valid_603446 != nil:
    section.add "X-Amz-Content-Sha256", valid_603446
  var valid_603447 = header.getOrDefault("X-Amz-Algorithm")
  valid_603447 = validateParameter(valid_603447, JString, required = false,
                                 default = nil)
  if valid_603447 != nil:
    section.add "X-Amz-Algorithm", valid_603447
  var valid_603448 = header.getOrDefault("X-Amz-Signature")
  valid_603448 = validateParameter(valid_603448, JString, required = false,
                                 default = nil)
  if valid_603448 != nil:
    section.add "X-Amz-Signature", valid_603448
  var valid_603449 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603449 = validateParameter(valid_603449, JString, required = false,
                                 default = nil)
  if valid_603449 != nil:
    section.add "X-Amz-SignedHeaders", valid_603449
  var valid_603450 = header.getOrDefault("X-Amz-Credential")
  valid_603450 = validateParameter(valid_603450, JString, required = false,
                                 default = nil)
  if valid_603450 != nil:
    section.add "X-Amz-Credential", valid_603450
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603451: Call_GetDeleteConfigurationSetTrackingOptions_603438;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes an association between a configuration set and a custom domain for open and click event tracking.</p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p> <note> <p>Deleting this kind of association will result in emails sent using the specified configuration set to capture open and click events using the standard, Amazon SES-operated domains.</p> </note>
  ## 
  let valid = call_603451.validator(path, query, header, formData, body)
  let scheme = call_603451.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603451.url(scheme.get, call_603451.host, call_603451.base,
                         call_603451.route, valid.getOrDefault("path"))
  result = hook(call_603451, url, valid)

proc call*(call_603452: Call_GetDeleteConfigurationSetTrackingOptions_603438;
          ConfigurationSetName: string;
          Action: string = "DeleteConfigurationSetTrackingOptions";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteConfigurationSetTrackingOptions
  ## <p>Deletes an association between a configuration set and a custom domain for open and click event tracking.</p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p> <note> <p>Deleting this kind of association will result in emails sent using the specified configuration set to capture open and click events using the standard, Amazon SES-operated domains.</p> </note>
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set from which you want to delete the tracking options.
  ##   Version: string (required)
  var query_603453 = newJObject()
  add(query_603453, "Action", newJString(Action))
  add(query_603453, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_603453, "Version", newJString(Version))
  result = call_603452.call(nil, query_603453, nil, nil, nil)

var getDeleteConfigurationSetTrackingOptions* = Call_GetDeleteConfigurationSetTrackingOptions_603438(
    name: "getDeleteConfigurationSetTrackingOptions", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=DeleteConfigurationSetTrackingOptions",
    validator: validate_GetDeleteConfigurationSetTrackingOptions_603439,
    base: "/", url: url_GetDeleteConfigurationSetTrackingOptions_603440,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCustomVerificationEmailTemplate_603487 = ref object of OpenApiRestCall_602433
proc url_PostDeleteCustomVerificationEmailTemplate_603489(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteCustomVerificationEmailTemplate_603488(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an existing custom verification email template. </p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603490 = query.getOrDefault("Action")
  valid_603490 = validateParameter(valid_603490, JString, required = true, default = newJString(
      "DeleteCustomVerificationEmailTemplate"))
  if valid_603490 != nil:
    section.add "Action", valid_603490
  var valid_603491 = query.getOrDefault("Version")
  valid_603491 = validateParameter(valid_603491, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603491 != nil:
    section.add "Version", valid_603491
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603492 = header.getOrDefault("X-Amz-Date")
  valid_603492 = validateParameter(valid_603492, JString, required = false,
                                 default = nil)
  if valid_603492 != nil:
    section.add "X-Amz-Date", valid_603492
  var valid_603493 = header.getOrDefault("X-Amz-Security-Token")
  valid_603493 = validateParameter(valid_603493, JString, required = false,
                                 default = nil)
  if valid_603493 != nil:
    section.add "X-Amz-Security-Token", valid_603493
  var valid_603494 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603494 = validateParameter(valid_603494, JString, required = false,
                                 default = nil)
  if valid_603494 != nil:
    section.add "X-Amz-Content-Sha256", valid_603494
  var valid_603495 = header.getOrDefault("X-Amz-Algorithm")
  valid_603495 = validateParameter(valid_603495, JString, required = false,
                                 default = nil)
  if valid_603495 != nil:
    section.add "X-Amz-Algorithm", valid_603495
  var valid_603496 = header.getOrDefault("X-Amz-Signature")
  valid_603496 = validateParameter(valid_603496, JString, required = false,
                                 default = nil)
  if valid_603496 != nil:
    section.add "X-Amz-Signature", valid_603496
  var valid_603497 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603497 = validateParameter(valid_603497, JString, required = false,
                                 default = nil)
  if valid_603497 != nil:
    section.add "X-Amz-SignedHeaders", valid_603497
  var valid_603498 = header.getOrDefault("X-Amz-Credential")
  valid_603498 = validateParameter(valid_603498, JString, required = false,
                                 default = nil)
  if valid_603498 != nil:
    section.add "X-Amz-Credential", valid_603498
  result.add "header", section
  ## parameters in `formData` object:
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template that you want to delete.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TemplateName` field"
  var valid_603499 = formData.getOrDefault("TemplateName")
  valid_603499 = validateParameter(valid_603499, JString, required = true,
                                 default = nil)
  if valid_603499 != nil:
    section.add "TemplateName", valid_603499
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603500: Call_PostDeleteCustomVerificationEmailTemplate_603487;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes an existing custom verification email template. </p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603500.validator(path, query, header, formData, body)
  let scheme = call_603500.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603500.url(scheme.get, call_603500.host, call_603500.base,
                         call_603500.route, valid.getOrDefault("path"))
  result = hook(call_603500, url, valid)

proc call*(call_603501: Call_PostDeleteCustomVerificationEmailTemplate_603487;
          TemplateName: string;
          Action: string = "DeleteCustomVerificationEmailTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteCustomVerificationEmailTemplate
  ## <p>Deletes an existing custom verification email template. </p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template that you want to delete.
  ##   Version: string (required)
  var query_603502 = newJObject()
  var formData_603503 = newJObject()
  add(query_603502, "Action", newJString(Action))
  add(formData_603503, "TemplateName", newJString(TemplateName))
  add(query_603502, "Version", newJString(Version))
  result = call_603501.call(nil, query_603502, nil, formData_603503, nil)

var postDeleteCustomVerificationEmailTemplate* = Call_PostDeleteCustomVerificationEmailTemplate_603487(
    name: "postDeleteCustomVerificationEmailTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=DeleteCustomVerificationEmailTemplate",
    validator: validate_PostDeleteCustomVerificationEmailTemplate_603488,
    base: "/", url: url_PostDeleteCustomVerificationEmailTemplate_603489,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCustomVerificationEmailTemplate_603471 = ref object of OpenApiRestCall_602433
proc url_GetDeleteCustomVerificationEmailTemplate_603473(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteCustomVerificationEmailTemplate_603472(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an existing custom verification email template. </p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template that you want to delete.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603474 = query.getOrDefault("Action")
  valid_603474 = validateParameter(valid_603474, JString, required = true, default = newJString(
      "DeleteCustomVerificationEmailTemplate"))
  if valid_603474 != nil:
    section.add "Action", valid_603474
  var valid_603475 = query.getOrDefault("TemplateName")
  valid_603475 = validateParameter(valid_603475, JString, required = true,
                                 default = nil)
  if valid_603475 != nil:
    section.add "TemplateName", valid_603475
  var valid_603476 = query.getOrDefault("Version")
  valid_603476 = validateParameter(valid_603476, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603476 != nil:
    section.add "Version", valid_603476
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603477 = header.getOrDefault("X-Amz-Date")
  valid_603477 = validateParameter(valid_603477, JString, required = false,
                                 default = nil)
  if valid_603477 != nil:
    section.add "X-Amz-Date", valid_603477
  var valid_603478 = header.getOrDefault("X-Amz-Security-Token")
  valid_603478 = validateParameter(valid_603478, JString, required = false,
                                 default = nil)
  if valid_603478 != nil:
    section.add "X-Amz-Security-Token", valid_603478
  var valid_603479 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603479 = validateParameter(valid_603479, JString, required = false,
                                 default = nil)
  if valid_603479 != nil:
    section.add "X-Amz-Content-Sha256", valid_603479
  var valid_603480 = header.getOrDefault("X-Amz-Algorithm")
  valid_603480 = validateParameter(valid_603480, JString, required = false,
                                 default = nil)
  if valid_603480 != nil:
    section.add "X-Amz-Algorithm", valid_603480
  var valid_603481 = header.getOrDefault("X-Amz-Signature")
  valid_603481 = validateParameter(valid_603481, JString, required = false,
                                 default = nil)
  if valid_603481 != nil:
    section.add "X-Amz-Signature", valid_603481
  var valid_603482 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603482 = validateParameter(valid_603482, JString, required = false,
                                 default = nil)
  if valid_603482 != nil:
    section.add "X-Amz-SignedHeaders", valid_603482
  var valid_603483 = header.getOrDefault("X-Amz-Credential")
  valid_603483 = validateParameter(valid_603483, JString, required = false,
                                 default = nil)
  if valid_603483 != nil:
    section.add "X-Amz-Credential", valid_603483
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603484: Call_GetDeleteCustomVerificationEmailTemplate_603471;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes an existing custom verification email template. </p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603484.validator(path, query, header, formData, body)
  let scheme = call_603484.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603484.url(scheme.get, call_603484.host, call_603484.base,
                         call_603484.route, valid.getOrDefault("path"))
  result = hook(call_603484, url, valid)

proc call*(call_603485: Call_GetDeleteCustomVerificationEmailTemplate_603471;
          TemplateName: string;
          Action: string = "DeleteCustomVerificationEmailTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteCustomVerificationEmailTemplate
  ## <p>Deletes an existing custom verification email template. </p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template that you want to delete.
  ##   Version: string (required)
  var query_603486 = newJObject()
  add(query_603486, "Action", newJString(Action))
  add(query_603486, "TemplateName", newJString(TemplateName))
  add(query_603486, "Version", newJString(Version))
  result = call_603485.call(nil, query_603486, nil, nil, nil)

var getDeleteCustomVerificationEmailTemplate* = Call_GetDeleteCustomVerificationEmailTemplate_603471(
    name: "getDeleteCustomVerificationEmailTemplate", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=DeleteCustomVerificationEmailTemplate",
    validator: validate_GetDeleteCustomVerificationEmailTemplate_603472,
    base: "/", url: url_GetDeleteCustomVerificationEmailTemplate_603473,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteIdentity_603520 = ref object of OpenApiRestCall_602433
proc url_PostDeleteIdentity_603522(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteIdentity_603521(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Deletes the specified identity (an email address or a domain) from the list of verified identities.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603523 = query.getOrDefault("Action")
  valid_603523 = validateParameter(valid_603523, JString, required = true,
                                 default = newJString("DeleteIdentity"))
  if valid_603523 != nil:
    section.add "Action", valid_603523
  var valid_603524 = query.getOrDefault("Version")
  valid_603524 = validateParameter(valid_603524, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603524 != nil:
    section.add "Version", valid_603524
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603525 = header.getOrDefault("X-Amz-Date")
  valid_603525 = validateParameter(valid_603525, JString, required = false,
                                 default = nil)
  if valid_603525 != nil:
    section.add "X-Amz-Date", valid_603525
  var valid_603526 = header.getOrDefault("X-Amz-Security-Token")
  valid_603526 = validateParameter(valid_603526, JString, required = false,
                                 default = nil)
  if valid_603526 != nil:
    section.add "X-Amz-Security-Token", valid_603526
  var valid_603527 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603527 = validateParameter(valid_603527, JString, required = false,
                                 default = nil)
  if valid_603527 != nil:
    section.add "X-Amz-Content-Sha256", valid_603527
  var valid_603528 = header.getOrDefault("X-Amz-Algorithm")
  valid_603528 = validateParameter(valid_603528, JString, required = false,
                                 default = nil)
  if valid_603528 != nil:
    section.add "X-Amz-Algorithm", valid_603528
  var valid_603529 = header.getOrDefault("X-Amz-Signature")
  valid_603529 = validateParameter(valid_603529, JString, required = false,
                                 default = nil)
  if valid_603529 != nil:
    section.add "X-Amz-Signature", valid_603529
  var valid_603530 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603530 = validateParameter(valid_603530, JString, required = false,
                                 default = nil)
  if valid_603530 != nil:
    section.add "X-Amz-SignedHeaders", valid_603530
  var valid_603531 = header.getOrDefault("X-Amz-Credential")
  valid_603531 = validateParameter(valid_603531, JString, required = false,
                                 default = nil)
  if valid_603531 != nil:
    section.add "X-Amz-Credential", valid_603531
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identity: JString (required)
  ##           : The identity to be removed from the list of identities for the AWS Account.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identity` field"
  var valid_603532 = formData.getOrDefault("Identity")
  valid_603532 = validateParameter(valid_603532, JString, required = true,
                                 default = nil)
  if valid_603532 != nil:
    section.add "Identity", valid_603532
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603533: Call_PostDeleteIdentity_603520; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified identity (an email address or a domain) from the list of verified identities.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603533.validator(path, query, header, formData, body)
  let scheme = call_603533.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603533.url(scheme.get, call_603533.host, call_603533.base,
                         call_603533.route, valid.getOrDefault("path"))
  result = hook(call_603533, url, valid)

proc call*(call_603534: Call_PostDeleteIdentity_603520; Identity: string;
          Action: string = "DeleteIdentity"; Version: string = "2010-12-01"): Recallable =
  ## postDeleteIdentity
  ## <p>Deletes the specified identity (an email address or a domain) from the list of verified identities.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : The identity to be removed from the list of identities for the AWS Account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603535 = newJObject()
  var formData_603536 = newJObject()
  add(formData_603536, "Identity", newJString(Identity))
  add(query_603535, "Action", newJString(Action))
  add(query_603535, "Version", newJString(Version))
  result = call_603534.call(nil, query_603535, nil, formData_603536, nil)

var postDeleteIdentity* = Call_PostDeleteIdentity_603520(
    name: "postDeleteIdentity", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteIdentity",
    validator: validate_PostDeleteIdentity_603521, base: "/",
    url: url_PostDeleteIdentity_603522, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteIdentity_603504 = ref object of OpenApiRestCall_602433
proc url_GetDeleteIdentity_603506(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteIdentity_603505(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Deletes the specified identity (an email address or a domain) from the list of verified identities.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : The identity to be removed from the list of identities for the AWS Account.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_603507 = query.getOrDefault("Identity")
  valid_603507 = validateParameter(valid_603507, JString, required = true,
                                 default = nil)
  if valid_603507 != nil:
    section.add "Identity", valid_603507
  var valid_603508 = query.getOrDefault("Action")
  valid_603508 = validateParameter(valid_603508, JString, required = true,
                                 default = newJString("DeleteIdentity"))
  if valid_603508 != nil:
    section.add "Action", valid_603508
  var valid_603509 = query.getOrDefault("Version")
  valid_603509 = validateParameter(valid_603509, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603509 != nil:
    section.add "Version", valid_603509
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603510 = header.getOrDefault("X-Amz-Date")
  valid_603510 = validateParameter(valid_603510, JString, required = false,
                                 default = nil)
  if valid_603510 != nil:
    section.add "X-Amz-Date", valid_603510
  var valid_603511 = header.getOrDefault("X-Amz-Security-Token")
  valid_603511 = validateParameter(valid_603511, JString, required = false,
                                 default = nil)
  if valid_603511 != nil:
    section.add "X-Amz-Security-Token", valid_603511
  var valid_603512 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603512 = validateParameter(valid_603512, JString, required = false,
                                 default = nil)
  if valid_603512 != nil:
    section.add "X-Amz-Content-Sha256", valid_603512
  var valid_603513 = header.getOrDefault("X-Amz-Algorithm")
  valid_603513 = validateParameter(valid_603513, JString, required = false,
                                 default = nil)
  if valid_603513 != nil:
    section.add "X-Amz-Algorithm", valid_603513
  var valid_603514 = header.getOrDefault("X-Amz-Signature")
  valid_603514 = validateParameter(valid_603514, JString, required = false,
                                 default = nil)
  if valid_603514 != nil:
    section.add "X-Amz-Signature", valid_603514
  var valid_603515 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603515 = validateParameter(valid_603515, JString, required = false,
                                 default = nil)
  if valid_603515 != nil:
    section.add "X-Amz-SignedHeaders", valid_603515
  var valid_603516 = header.getOrDefault("X-Amz-Credential")
  valid_603516 = validateParameter(valid_603516, JString, required = false,
                                 default = nil)
  if valid_603516 != nil:
    section.add "X-Amz-Credential", valid_603516
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603517: Call_GetDeleteIdentity_603504; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified identity (an email address or a domain) from the list of verified identities.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603517.validator(path, query, header, formData, body)
  let scheme = call_603517.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603517.url(scheme.get, call_603517.host, call_603517.base,
                         call_603517.route, valid.getOrDefault("path"))
  result = hook(call_603517, url, valid)

proc call*(call_603518: Call_GetDeleteIdentity_603504; Identity: string;
          Action: string = "DeleteIdentity"; Version: string = "2010-12-01"): Recallable =
  ## getDeleteIdentity
  ## <p>Deletes the specified identity (an email address or a domain) from the list of verified identities.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : The identity to be removed from the list of identities for the AWS Account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603519 = newJObject()
  add(query_603519, "Identity", newJString(Identity))
  add(query_603519, "Action", newJString(Action))
  add(query_603519, "Version", newJString(Version))
  result = call_603518.call(nil, query_603519, nil, nil, nil)

var getDeleteIdentity* = Call_GetDeleteIdentity_603504(name: "getDeleteIdentity",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=DeleteIdentity", validator: validate_GetDeleteIdentity_603505,
    base: "/", url: url_GetDeleteIdentity_603506,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteIdentityPolicy_603554 = ref object of OpenApiRestCall_602433
proc url_PostDeleteIdentityPolicy_603556(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteIdentityPolicy_603555(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603557 = query.getOrDefault("Action")
  valid_603557 = validateParameter(valid_603557, JString, required = true,
                                 default = newJString("DeleteIdentityPolicy"))
  if valid_603557 != nil:
    section.add "Action", valid_603557
  var valid_603558 = query.getOrDefault("Version")
  valid_603558 = validateParameter(valid_603558, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603558 != nil:
    section.add "Version", valid_603558
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603559 = header.getOrDefault("X-Amz-Date")
  valid_603559 = validateParameter(valid_603559, JString, required = false,
                                 default = nil)
  if valid_603559 != nil:
    section.add "X-Amz-Date", valid_603559
  var valid_603560 = header.getOrDefault("X-Amz-Security-Token")
  valid_603560 = validateParameter(valid_603560, JString, required = false,
                                 default = nil)
  if valid_603560 != nil:
    section.add "X-Amz-Security-Token", valid_603560
  var valid_603561 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603561 = validateParameter(valid_603561, JString, required = false,
                                 default = nil)
  if valid_603561 != nil:
    section.add "X-Amz-Content-Sha256", valid_603561
  var valid_603562 = header.getOrDefault("X-Amz-Algorithm")
  valid_603562 = validateParameter(valid_603562, JString, required = false,
                                 default = nil)
  if valid_603562 != nil:
    section.add "X-Amz-Algorithm", valid_603562
  var valid_603563 = header.getOrDefault("X-Amz-Signature")
  valid_603563 = validateParameter(valid_603563, JString, required = false,
                                 default = nil)
  if valid_603563 != nil:
    section.add "X-Amz-Signature", valid_603563
  var valid_603564 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603564 = validateParameter(valid_603564, JString, required = false,
                                 default = nil)
  if valid_603564 != nil:
    section.add "X-Amz-SignedHeaders", valid_603564
  var valid_603565 = header.getOrDefault("X-Amz-Credential")
  valid_603565 = validateParameter(valid_603565, JString, required = false,
                                 default = nil)
  if valid_603565 != nil:
    section.add "X-Amz-Credential", valid_603565
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : The name of the policy to be deleted.
  ##   Identity: JString (required)
  ##           : <p>The identity that is associated with the policy that you want to delete. You can specify the identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_603566 = formData.getOrDefault("PolicyName")
  valid_603566 = validateParameter(valid_603566, JString, required = true,
                                 default = nil)
  if valid_603566 != nil:
    section.add "PolicyName", valid_603566
  var valid_603567 = formData.getOrDefault("Identity")
  valid_603567 = validateParameter(valid_603567, JString, required = true,
                                 default = nil)
  if valid_603567 != nil:
    section.add "Identity", valid_603567
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603568: Call_PostDeleteIdentityPolicy_603554; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603568.validator(path, query, header, formData, body)
  let scheme = call_603568.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603568.url(scheme.get, call_603568.host, call_603568.base,
                         call_603568.route, valid.getOrDefault("path"))
  result = hook(call_603568, url, valid)

proc call*(call_603569: Call_PostDeleteIdentityPolicy_603554; PolicyName: string;
          Identity: string; Action: string = "DeleteIdentityPolicy";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteIdentityPolicy
  ## <p>Deletes the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   PolicyName: string (required)
  ##             : The name of the policy to be deleted.
  ##   Identity: string (required)
  ##           : <p>The identity that is associated with the policy that you want to delete. You can specify the identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603570 = newJObject()
  var formData_603571 = newJObject()
  add(formData_603571, "PolicyName", newJString(PolicyName))
  add(formData_603571, "Identity", newJString(Identity))
  add(query_603570, "Action", newJString(Action))
  add(query_603570, "Version", newJString(Version))
  result = call_603569.call(nil, query_603570, nil, formData_603571, nil)

var postDeleteIdentityPolicy* = Call_PostDeleteIdentityPolicy_603554(
    name: "postDeleteIdentityPolicy", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteIdentityPolicy",
    validator: validate_PostDeleteIdentityPolicy_603555, base: "/",
    url: url_PostDeleteIdentityPolicy_603556, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteIdentityPolicy_603537 = ref object of OpenApiRestCall_602433
proc url_GetDeleteIdentityPolicy_603539(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteIdentityPolicy_603538(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : <p>The identity that is associated with the policy that you want to delete. You can specify the identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : The name of the policy to be deleted.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_603540 = query.getOrDefault("Identity")
  valid_603540 = validateParameter(valid_603540, JString, required = true,
                                 default = nil)
  if valid_603540 != nil:
    section.add "Identity", valid_603540
  var valid_603541 = query.getOrDefault("Action")
  valid_603541 = validateParameter(valid_603541, JString, required = true,
                                 default = newJString("DeleteIdentityPolicy"))
  if valid_603541 != nil:
    section.add "Action", valid_603541
  var valid_603542 = query.getOrDefault("Version")
  valid_603542 = validateParameter(valid_603542, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603542 != nil:
    section.add "Version", valid_603542
  var valid_603543 = query.getOrDefault("PolicyName")
  valid_603543 = validateParameter(valid_603543, JString, required = true,
                                 default = nil)
  if valid_603543 != nil:
    section.add "PolicyName", valid_603543
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603544 = header.getOrDefault("X-Amz-Date")
  valid_603544 = validateParameter(valid_603544, JString, required = false,
                                 default = nil)
  if valid_603544 != nil:
    section.add "X-Amz-Date", valid_603544
  var valid_603545 = header.getOrDefault("X-Amz-Security-Token")
  valid_603545 = validateParameter(valid_603545, JString, required = false,
                                 default = nil)
  if valid_603545 != nil:
    section.add "X-Amz-Security-Token", valid_603545
  var valid_603546 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603546 = validateParameter(valid_603546, JString, required = false,
                                 default = nil)
  if valid_603546 != nil:
    section.add "X-Amz-Content-Sha256", valid_603546
  var valid_603547 = header.getOrDefault("X-Amz-Algorithm")
  valid_603547 = validateParameter(valid_603547, JString, required = false,
                                 default = nil)
  if valid_603547 != nil:
    section.add "X-Amz-Algorithm", valid_603547
  var valid_603548 = header.getOrDefault("X-Amz-Signature")
  valid_603548 = validateParameter(valid_603548, JString, required = false,
                                 default = nil)
  if valid_603548 != nil:
    section.add "X-Amz-Signature", valid_603548
  var valid_603549 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603549 = validateParameter(valid_603549, JString, required = false,
                                 default = nil)
  if valid_603549 != nil:
    section.add "X-Amz-SignedHeaders", valid_603549
  var valid_603550 = header.getOrDefault("X-Amz-Credential")
  valid_603550 = validateParameter(valid_603550, JString, required = false,
                                 default = nil)
  if valid_603550 != nil:
    section.add "X-Amz-Credential", valid_603550
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603551: Call_GetDeleteIdentityPolicy_603537; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603551.validator(path, query, header, formData, body)
  let scheme = call_603551.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603551.url(scheme.get, call_603551.host, call_603551.base,
                         call_603551.route, valid.getOrDefault("path"))
  result = hook(call_603551, url, valid)

proc call*(call_603552: Call_GetDeleteIdentityPolicy_603537; Identity: string;
          PolicyName: string; Action: string = "DeleteIdentityPolicy";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteIdentityPolicy
  ## <p>Deletes the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : <p>The identity that is associated with the policy that you want to delete. You can specify the identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : The name of the policy to be deleted.
  var query_603553 = newJObject()
  add(query_603553, "Identity", newJString(Identity))
  add(query_603553, "Action", newJString(Action))
  add(query_603553, "Version", newJString(Version))
  add(query_603553, "PolicyName", newJString(PolicyName))
  result = call_603552.call(nil, query_603553, nil, nil, nil)

var getDeleteIdentityPolicy* = Call_GetDeleteIdentityPolicy_603537(
    name: "getDeleteIdentityPolicy", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DeleteIdentityPolicy",
    validator: validate_GetDeleteIdentityPolicy_603538, base: "/",
    url: url_GetDeleteIdentityPolicy_603539, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteReceiptFilter_603588 = ref object of OpenApiRestCall_602433
proc url_PostDeleteReceiptFilter_603590(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteReceiptFilter_603589(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified IP address filter.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603591 = query.getOrDefault("Action")
  valid_603591 = validateParameter(valid_603591, JString, required = true,
                                 default = newJString("DeleteReceiptFilter"))
  if valid_603591 != nil:
    section.add "Action", valid_603591
  var valid_603592 = query.getOrDefault("Version")
  valid_603592 = validateParameter(valid_603592, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603592 != nil:
    section.add "Version", valid_603592
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603593 = header.getOrDefault("X-Amz-Date")
  valid_603593 = validateParameter(valid_603593, JString, required = false,
                                 default = nil)
  if valid_603593 != nil:
    section.add "X-Amz-Date", valid_603593
  var valid_603594 = header.getOrDefault("X-Amz-Security-Token")
  valid_603594 = validateParameter(valid_603594, JString, required = false,
                                 default = nil)
  if valid_603594 != nil:
    section.add "X-Amz-Security-Token", valid_603594
  var valid_603595 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603595 = validateParameter(valid_603595, JString, required = false,
                                 default = nil)
  if valid_603595 != nil:
    section.add "X-Amz-Content-Sha256", valid_603595
  var valid_603596 = header.getOrDefault("X-Amz-Algorithm")
  valid_603596 = validateParameter(valid_603596, JString, required = false,
                                 default = nil)
  if valid_603596 != nil:
    section.add "X-Amz-Algorithm", valid_603596
  var valid_603597 = header.getOrDefault("X-Amz-Signature")
  valid_603597 = validateParameter(valid_603597, JString, required = false,
                                 default = nil)
  if valid_603597 != nil:
    section.add "X-Amz-Signature", valid_603597
  var valid_603598 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603598 = validateParameter(valid_603598, JString, required = false,
                                 default = nil)
  if valid_603598 != nil:
    section.add "X-Amz-SignedHeaders", valid_603598
  var valid_603599 = header.getOrDefault("X-Amz-Credential")
  valid_603599 = validateParameter(valid_603599, JString, required = false,
                                 default = nil)
  if valid_603599 != nil:
    section.add "X-Amz-Credential", valid_603599
  result.add "header", section
  ## parameters in `formData` object:
  ##   FilterName: JString (required)
  ##             : The name of the IP address filter to delete.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `FilterName` field"
  var valid_603600 = formData.getOrDefault("FilterName")
  valid_603600 = validateParameter(valid_603600, JString, required = true,
                                 default = nil)
  if valid_603600 != nil:
    section.add "FilterName", valid_603600
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603601: Call_PostDeleteReceiptFilter_603588; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified IP address filter.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603601.validator(path, query, header, formData, body)
  let scheme = call_603601.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603601.url(scheme.get, call_603601.host, call_603601.base,
                         call_603601.route, valid.getOrDefault("path"))
  result = hook(call_603601, url, valid)

proc call*(call_603602: Call_PostDeleteReceiptFilter_603588; FilterName: string;
          Action: string = "DeleteReceiptFilter"; Version: string = "2010-12-01"): Recallable =
  ## postDeleteReceiptFilter
  ## <p>Deletes the specified IP address filter.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   FilterName: string (required)
  ##             : The name of the IP address filter to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603603 = newJObject()
  var formData_603604 = newJObject()
  add(formData_603604, "FilterName", newJString(FilterName))
  add(query_603603, "Action", newJString(Action))
  add(query_603603, "Version", newJString(Version))
  result = call_603602.call(nil, query_603603, nil, formData_603604, nil)

var postDeleteReceiptFilter* = Call_PostDeleteReceiptFilter_603588(
    name: "postDeleteReceiptFilter", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteReceiptFilter",
    validator: validate_PostDeleteReceiptFilter_603589, base: "/",
    url: url_PostDeleteReceiptFilter_603590, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteReceiptFilter_603572 = ref object of OpenApiRestCall_602433
proc url_GetDeleteReceiptFilter_603574(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteReceiptFilter_603573(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified IP address filter.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   FilterName: JString (required)
  ##             : The name of the IP address filter to delete.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603575 = query.getOrDefault("Action")
  valid_603575 = validateParameter(valid_603575, JString, required = true,
                                 default = newJString("DeleteReceiptFilter"))
  if valid_603575 != nil:
    section.add "Action", valid_603575
  var valid_603576 = query.getOrDefault("Version")
  valid_603576 = validateParameter(valid_603576, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603576 != nil:
    section.add "Version", valid_603576
  var valid_603577 = query.getOrDefault("FilterName")
  valid_603577 = validateParameter(valid_603577, JString, required = true,
                                 default = nil)
  if valid_603577 != nil:
    section.add "FilterName", valid_603577
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603578 = header.getOrDefault("X-Amz-Date")
  valid_603578 = validateParameter(valid_603578, JString, required = false,
                                 default = nil)
  if valid_603578 != nil:
    section.add "X-Amz-Date", valid_603578
  var valid_603579 = header.getOrDefault("X-Amz-Security-Token")
  valid_603579 = validateParameter(valid_603579, JString, required = false,
                                 default = nil)
  if valid_603579 != nil:
    section.add "X-Amz-Security-Token", valid_603579
  var valid_603580 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603580 = validateParameter(valid_603580, JString, required = false,
                                 default = nil)
  if valid_603580 != nil:
    section.add "X-Amz-Content-Sha256", valid_603580
  var valid_603581 = header.getOrDefault("X-Amz-Algorithm")
  valid_603581 = validateParameter(valid_603581, JString, required = false,
                                 default = nil)
  if valid_603581 != nil:
    section.add "X-Amz-Algorithm", valid_603581
  var valid_603582 = header.getOrDefault("X-Amz-Signature")
  valid_603582 = validateParameter(valid_603582, JString, required = false,
                                 default = nil)
  if valid_603582 != nil:
    section.add "X-Amz-Signature", valid_603582
  var valid_603583 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603583 = validateParameter(valid_603583, JString, required = false,
                                 default = nil)
  if valid_603583 != nil:
    section.add "X-Amz-SignedHeaders", valid_603583
  var valid_603584 = header.getOrDefault("X-Amz-Credential")
  valid_603584 = validateParameter(valid_603584, JString, required = false,
                                 default = nil)
  if valid_603584 != nil:
    section.add "X-Amz-Credential", valid_603584
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603585: Call_GetDeleteReceiptFilter_603572; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified IP address filter.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603585.validator(path, query, header, formData, body)
  let scheme = call_603585.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603585.url(scheme.get, call_603585.host, call_603585.base,
                         call_603585.route, valid.getOrDefault("path"))
  result = hook(call_603585, url, valid)

proc call*(call_603586: Call_GetDeleteReceiptFilter_603572; FilterName: string;
          Action: string = "DeleteReceiptFilter"; Version: string = "2010-12-01"): Recallable =
  ## getDeleteReceiptFilter
  ## <p>Deletes the specified IP address filter.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   FilterName: string (required)
  ##             : The name of the IP address filter to delete.
  var query_603587 = newJObject()
  add(query_603587, "Action", newJString(Action))
  add(query_603587, "Version", newJString(Version))
  add(query_603587, "FilterName", newJString(FilterName))
  result = call_603586.call(nil, query_603587, nil, nil, nil)

var getDeleteReceiptFilter* = Call_GetDeleteReceiptFilter_603572(
    name: "getDeleteReceiptFilter", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DeleteReceiptFilter",
    validator: validate_GetDeleteReceiptFilter_603573, base: "/",
    url: url_GetDeleteReceiptFilter_603574, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteReceiptRule_603622 = ref object of OpenApiRestCall_602433
proc url_PostDeleteReceiptRule_603624(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteReceiptRule_603623(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603625 = query.getOrDefault("Action")
  valid_603625 = validateParameter(valid_603625, JString, required = true,
                                 default = newJString("DeleteReceiptRule"))
  if valid_603625 != nil:
    section.add "Action", valid_603625
  var valid_603626 = query.getOrDefault("Version")
  valid_603626 = validateParameter(valid_603626, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603626 != nil:
    section.add "Version", valid_603626
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603627 = header.getOrDefault("X-Amz-Date")
  valid_603627 = validateParameter(valid_603627, JString, required = false,
                                 default = nil)
  if valid_603627 != nil:
    section.add "X-Amz-Date", valid_603627
  var valid_603628 = header.getOrDefault("X-Amz-Security-Token")
  valid_603628 = validateParameter(valid_603628, JString, required = false,
                                 default = nil)
  if valid_603628 != nil:
    section.add "X-Amz-Security-Token", valid_603628
  var valid_603629 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603629 = validateParameter(valid_603629, JString, required = false,
                                 default = nil)
  if valid_603629 != nil:
    section.add "X-Amz-Content-Sha256", valid_603629
  var valid_603630 = header.getOrDefault("X-Amz-Algorithm")
  valid_603630 = validateParameter(valid_603630, JString, required = false,
                                 default = nil)
  if valid_603630 != nil:
    section.add "X-Amz-Algorithm", valid_603630
  var valid_603631 = header.getOrDefault("X-Amz-Signature")
  valid_603631 = validateParameter(valid_603631, JString, required = false,
                                 default = nil)
  if valid_603631 != nil:
    section.add "X-Amz-Signature", valid_603631
  var valid_603632 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603632 = validateParameter(valid_603632, JString, required = false,
                                 default = nil)
  if valid_603632 != nil:
    section.add "X-Amz-SignedHeaders", valid_603632
  var valid_603633 = header.getOrDefault("X-Amz-Credential")
  valid_603633 = validateParameter(valid_603633, JString, required = false,
                                 default = nil)
  if valid_603633 != nil:
    section.add "X-Amz-Credential", valid_603633
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleName: JString (required)
  ##           : The name of the receipt rule to delete.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that contains the receipt rule to delete.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleName` field"
  var valid_603634 = formData.getOrDefault("RuleName")
  valid_603634 = validateParameter(valid_603634, JString, required = true,
                                 default = nil)
  if valid_603634 != nil:
    section.add "RuleName", valid_603634
  var valid_603635 = formData.getOrDefault("RuleSetName")
  valid_603635 = validateParameter(valid_603635, JString, required = true,
                                 default = nil)
  if valid_603635 != nil:
    section.add "RuleSetName", valid_603635
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603636: Call_PostDeleteReceiptRule_603622; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603636.validator(path, query, header, formData, body)
  let scheme = call_603636.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603636.url(scheme.get, call_603636.host, call_603636.base,
                         call_603636.route, valid.getOrDefault("path"))
  result = hook(call_603636, url, valid)

proc call*(call_603637: Call_PostDeleteReceiptRule_603622; RuleName: string;
          RuleSetName: string; Action: string = "DeleteReceiptRule";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteReceiptRule
  ## <p>Deletes the specified receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleName: string (required)
  ##           : The name of the receipt rule to delete.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that contains the receipt rule to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603638 = newJObject()
  var formData_603639 = newJObject()
  add(formData_603639, "RuleName", newJString(RuleName))
  add(formData_603639, "RuleSetName", newJString(RuleSetName))
  add(query_603638, "Action", newJString(Action))
  add(query_603638, "Version", newJString(Version))
  result = call_603637.call(nil, query_603638, nil, formData_603639, nil)

var postDeleteReceiptRule* = Call_PostDeleteReceiptRule_603622(
    name: "postDeleteReceiptRule", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteReceiptRule",
    validator: validate_PostDeleteReceiptRule_603623, base: "/",
    url: url_PostDeleteReceiptRule_603624, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteReceiptRule_603605 = ref object of OpenApiRestCall_602433
proc url_GetDeleteReceiptRule_603607(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteReceiptRule_603606(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleName: JString (required)
  ##           : The name of the receipt rule to delete.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that contains the receipt rule to delete.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleName` field"
  var valid_603608 = query.getOrDefault("RuleName")
  valid_603608 = validateParameter(valid_603608, JString, required = true,
                                 default = nil)
  if valid_603608 != nil:
    section.add "RuleName", valid_603608
  var valid_603609 = query.getOrDefault("RuleSetName")
  valid_603609 = validateParameter(valid_603609, JString, required = true,
                                 default = nil)
  if valid_603609 != nil:
    section.add "RuleSetName", valid_603609
  var valid_603610 = query.getOrDefault("Action")
  valid_603610 = validateParameter(valid_603610, JString, required = true,
                                 default = newJString("DeleteReceiptRule"))
  if valid_603610 != nil:
    section.add "Action", valid_603610
  var valid_603611 = query.getOrDefault("Version")
  valid_603611 = validateParameter(valid_603611, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603611 != nil:
    section.add "Version", valid_603611
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603612 = header.getOrDefault("X-Amz-Date")
  valid_603612 = validateParameter(valid_603612, JString, required = false,
                                 default = nil)
  if valid_603612 != nil:
    section.add "X-Amz-Date", valid_603612
  var valid_603613 = header.getOrDefault("X-Amz-Security-Token")
  valid_603613 = validateParameter(valid_603613, JString, required = false,
                                 default = nil)
  if valid_603613 != nil:
    section.add "X-Amz-Security-Token", valid_603613
  var valid_603614 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603614 = validateParameter(valid_603614, JString, required = false,
                                 default = nil)
  if valid_603614 != nil:
    section.add "X-Amz-Content-Sha256", valid_603614
  var valid_603615 = header.getOrDefault("X-Amz-Algorithm")
  valid_603615 = validateParameter(valid_603615, JString, required = false,
                                 default = nil)
  if valid_603615 != nil:
    section.add "X-Amz-Algorithm", valid_603615
  var valid_603616 = header.getOrDefault("X-Amz-Signature")
  valid_603616 = validateParameter(valid_603616, JString, required = false,
                                 default = nil)
  if valid_603616 != nil:
    section.add "X-Amz-Signature", valid_603616
  var valid_603617 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603617 = validateParameter(valid_603617, JString, required = false,
                                 default = nil)
  if valid_603617 != nil:
    section.add "X-Amz-SignedHeaders", valid_603617
  var valid_603618 = header.getOrDefault("X-Amz-Credential")
  valid_603618 = validateParameter(valid_603618, JString, required = false,
                                 default = nil)
  if valid_603618 != nil:
    section.add "X-Amz-Credential", valid_603618
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603619: Call_GetDeleteReceiptRule_603605; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603619.validator(path, query, header, formData, body)
  let scheme = call_603619.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603619.url(scheme.get, call_603619.host, call_603619.base,
                         call_603619.route, valid.getOrDefault("path"))
  result = hook(call_603619, url, valid)

proc call*(call_603620: Call_GetDeleteReceiptRule_603605; RuleName: string;
          RuleSetName: string; Action: string = "DeleteReceiptRule";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteReceiptRule
  ## <p>Deletes the specified receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleName: string (required)
  ##           : The name of the receipt rule to delete.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that contains the receipt rule to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603621 = newJObject()
  add(query_603621, "RuleName", newJString(RuleName))
  add(query_603621, "RuleSetName", newJString(RuleSetName))
  add(query_603621, "Action", newJString(Action))
  add(query_603621, "Version", newJString(Version))
  result = call_603620.call(nil, query_603621, nil, nil, nil)

var getDeleteReceiptRule* = Call_GetDeleteReceiptRule_603605(
    name: "getDeleteReceiptRule", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DeleteReceiptRule",
    validator: validate_GetDeleteReceiptRule_603606, base: "/",
    url: url_GetDeleteReceiptRule_603607, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteReceiptRuleSet_603656 = ref object of OpenApiRestCall_602433
proc url_PostDeleteReceiptRuleSet_603658(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteReceiptRuleSet_603657(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified receipt rule set and all of the receipt rules it contains.</p> <note> <p>The currently active rule set cannot be deleted.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603659 = query.getOrDefault("Action")
  valid_603659 = validateParameter(valid_603659, JString, required = true,
                                 default = newJString("DeleteReceiptRuleSet"))
  if valid_603659 != nil:
    section.add "Action", valid_603659
  var valid_603660 = query.getOrDefault("Version")
  valid_603660 = validateParameter(valid_603660, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603660 != nil:
    section.add "Version", valid_603660
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603661 = header.getOrDefault("X-Amz-Date")
  valid_603661 = validateParameter(valid_603661, JString, required = false,
                                 default = nil)
  if valid_603661 != nil:
    section.add "X-Amz-Date", valid_603661
  var valid_603662 = header.getOrDefault("X-Amz-Security-Token")
  valid_603662 = validateParameter(valid_603662, JString, required = false,
                                 default = nil)
  if valid_603662 != nil:
    section.add "X-Amz-Security-Token", valid_603662
  var valid_603663 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603663 = validateParameter(valid_603663, JString, required = false,
                                 default = nil)
  if valid_603663 != nil:
    section.add "X-Amz-Content-Sha256", valid_603663
  var valid_603664 = header.getOrDefault("X-Amz-Algorithm")
  valid_603664 = validateParameter(valid_603664, JString, required = false,
                                 default = nil)
  if valid_603664 != nil:
    section.add "X-Amz-Algorithm", valid_603664
  var valid_603665 = header.getOrDefault("X-Amz-Signature")
  valid_603665 = validateParameter(valid_603665, JString, required = false,
                                 default = nil)
  if valid_603665 != nil:
    section.add "X-Amz-Signature", valid_603665
  var valid_603666 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603666 = validateParameter(valid_603666, JString, required = false,
                                 default = nil)
  if valid_603666 != nil:
    section.add "X-Amz-SignedHeaders", valid_603666
  var valid_603667 = header.getOrDefault("X-Amz-Credential")
  valid_603667 = validateParameter(valid_603667, JString, required = false,
                                 default = nil)
  if valid_603667 != nil:
    section.add "X-Amz-Credential", valid_603667
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set to delete.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleSetName` field"
  var valid_603668 = formData.getOrDefault("RuleSetName")
  valid_603668 = validateParameter(valid_603668, JString, required = true,
                                 default = nil)
  if valid_603668 != nil:
    section.add "RuleSetName", valid_603668
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603669: Call_PostDeleteReceiptRuleSet_603656; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified receipt rule set and all of the receipt rules it contains.</p> <note> <p>The currently active rule set cannot be deleted.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603669.validator(path, query, header, formData, body)
  let scheme = call_603669.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603669.url(scheme.get, call_603669.host, call_603669.base,
                         call_603669.route, valid.getOrDefault("path"))
  result = hook(call_603669, url, valid)

proc call*(call_603670: Call_PostDeleteReceiptRuleSet_603656; RuleSetName: string;
          Action: string = "DeleteReceiptRuleSet"; Version: string = "2010-12-01"): Recallable =
  ## postDeleteReceiptRuleSet
  ## <p>Deletes the specified receipt rule set and all of the receipt rules it contains.</p> <note> <p>The currently active rule set cannot be deleted.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603671 = newJObject()
  var formData_603672 = newJObject()
  add(formData_603672, "RuleSetName", newJString(RuleSetName))
  add(query_603671, "Action", newJString(Action))
  add(query_603671, "Version", newJString(Version))
  result = call_603670.call(nil, query_603671, nil, formData_603672, nil)

var postDeleteReceiptRuleSet* = Call_PostDeleteReceiptRuleSet_603656(
    name: "postDeleteReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteReceiptRuleSet",
    validator: validate_PostDeleteReceiptRuleSet_603657, base: "/",
    url: url_PostDeleteReceiptRuleSet_603658, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteReceiptRuleSet_603640 = ref object of OpenApiRestCall_602433
proc url_GetDeleteReceiptRuleSet_603642(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteReceiptRuleSet_603641(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified receipt rule set and all of the receipt rules it contains.</p> <note> <p>The currently active rule set cannot be deleted.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set to delete.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleSetName` field"
  var valid_603643 = query.getOrDefault("RuleSetName")
  valid_603643 = validateParameter(valid_603643, JString, required = true,
                                 default = nil)
  if valid_603643 != nil:
    section.add "RuleSetName", valid_603643
  var valid_603644 = query.getOrDefault("Action")
  valid_603644 = validateParameter(valid_603644, JString, required = true,
                                 default = newJString("DeleteReceiptRuleSet"))
  if valid_603644 != nil:
    section.add "Action", valid_603644
  var valid_603645 = query.getOrDefault("Version")
  valid_603645 = validateParameter(valid_603645, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603645 != nil:
    section.add "Version", valid_603645
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603646 = header.getOrDefault("X-Amz-Date")
  valid_603646 = validateParameter(valid_603646, JString, required = false,
                                 default = nil)
  if valid_603646 != nil:
    section.add "X-Amz-Date", valid_603646
  var valid_603647 = header.getOrDefault("X-Amz-Security-Token")
  valid_603647 = validateParameter(valid_603647, JString, required = false,
                                 default = nil)
  if valid_603647 != nil:
    section.add "X-Amz-Security-Token", valid_603647
  var valid_603648 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603648 = validateParameter(valid_603648, JString, required = false,
                                 default = nil)
  if valid_603648 != nil:
    section.add "X-Amz-Content-Sha256", valid_603648
  var valid_603649 = header.getOrDefault("X-Amz-Algorithm")
  valid_603649 = validateParameter(valid_603649, JString, required = false,
                                 default = nil)
  if valid_603649 != nil:
    section.add "X-Amz-Algorithm", valid_603649
  var valid_603650 = header.getOrDefault("X-Amz-Signature")
  valid_603650 = validateParameter(valid_603650, JString, required = false,
                                 default = nil)
  if valid_603650 != nil:
    section.add "X-Amz-Signature", valid_603650
  var valid_603651 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603651 = validateParameter(valid_603651, JString, required = false,
                                 default = nil)
  if valid_603651 != nil:
    section.add "X-Amz-SignedHeaders", valid_603651
  var valid_603652 = header.getOrDefault("X-Amz-Credential")
  valid_603652 = validateParameter(valid_603652, JString, required = false,
                                 default = nil)
  if valid_603652 != nil:
    section.add "X-Amz-Credential", valid_603652
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603653: Call_GetDeleteReceiptRuleSet_603640; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified receipt rule set and all of the receipt rules it contains.</p> <note> <p>The currently active rule set cannot be deleted.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603653.validator(path, query, header, formData, body)
  let scheme = call_603653.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603653.url(scheme.get, call_603653.host, call_603653.base,
                         call_603653.route, valid.getOrDefault("path"))
  result = hook(call_603653, url, valid)

proc call*(call_603654: Call_GetDeleteReceiptRuleSet_603640; RuleSetName: string;
          Action: string = "DeleteReceiptRuleSet"; Version: string = "2010-12-01"): Recallable =
  ## getDeleteReceiptRuleSet
  ## <p>Deletes the specified receipt rule set and all of the receipt rules it contains.</p> <note> <p>The currently active rule set cannot be deleted.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603655 = newJObject()
  add(query_603655, "RuleSetName", newJString(RuleSetName))
  add(query_603655, "Action", newJString(Action))
  add(query_603655, "Version", newJString(Version))
  result = call_603654.call(nil, query_603655, nil, nil, nil)

var getDeleteReceiptRuleSet* = Call_GetDeleteReceiptRuleSet_603640(
    name: "getDeleteReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DeleteReceiptRuleSet",
    validator: validate_GetDeleteReceiptRuleSet_603641, base: "/",
    url: url_GetDeleteReceiptRuleSet_603642, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteTemplate_603689 = ref object of OpenApiRestCall_602433
proc url_PostDeleteTemplate_603691(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteTemplate_603690(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Deletes an email template.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603692 = query.getOrDefault("Action")
  valid_603692 = validateParameter(valid_603692, JString, required = true,
                                 default = newJString("DeleteTemplate"))
  if valid_603692 != nil:
    section.add "Action", valid_603692
  var valid_603693 = query.getOrDefault("Version")
  valid_603693 = validateParameter(valid_603693, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603693 != nil:
    section.add "Version", valid_603693
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603694 = header.getOrDefault("X-Amz-Date")
  valid_603694 = validateParameter(valid_603694, JString, required = false,
                                 default = nil)
  if valid_603694 != nil:
    section.add "X-Amz-Date", valid_603694
  var valid_603695 = header.getOrDefault("X-Amz-Security-Token")
  valid_603695 = validateParameter(valid_603695, JString, required = false,
                                 default = nil)
  if valid_603695 != nil:
    section.add "X-Amz-Security-Token", valid_603695
  var valid_603696 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603696 = validateParameter(valid_603696, JString, required = false,
                                 default = nil)
  if valid_603696 != nil:
    section.add "X-Amz-Content-Sha256", valid_603696
  var valid_603697 = header.getOrDefault("X-Amz-Algorithm")
  valid_603697 = validateParameter(valid_603697, JString, required = false,
                                 default = nil)
  if valid_603697 != nil:
    section.add "X-Amz-Algorithm", valid_603697
  var valid_603698 = header.getOrDefault("X-Amz-Signature")
  valid_603698 = validateParameter(valid_603698, JString, required = false,
                                 default = nil)
  if valid_603698 != nil:
    section.add "X-Amz-Signature", valid_603698
  var valid_603699 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603699 = validateParameter(valid_603699, JString, required = false,
                                 default = nil)
  if valid_603699 != nil:
    section.add "X-Amz-SignedHeaders", valid_603699
  var valid_603700 = header.getOrDefault("X-Amz-Credential")
  valid_603700 = validateParameter(valid_603700, JString, required = false,
                                 default = nil)
  if valid_603700 != nil:
    section.add "X-Amz-Credential", valid_603700
  result.add "header", section
  ## parameters in `formData` object:
  ##   TemplateName: JString (required)
  ##               : The name of the template to be deleted.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TemplateName` field"
  var valid_603701 = formData.getOrDefault("TemplateName")
  valid_603701 = validateParameter(valid_603701, JString, required = true,
                                 default = nil)
  if valid_603701 != nil:
    section.add "TemplateName", valid_603701
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603702: Call_PostDeleteTemplate_603689; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an email template.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603702.validator(path, query, header, formData, body)
  let scheme = call_603702.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603702.url(scheme.get, call_603702.host, call_603702.base,
                         call_603702.route, valid.getOrDefault("path"))
  result = hook(call_603702, url, valid)

proc call*(call_603703: Call_PostDeleteTemplate_603689; TemplateName: string;
          Action: string = "DeleteTemplate"; Version: string = "2010-12-01"): Recallable =
  ## postDeleteTemplate
  ## <p>Deletes an email template.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the template to be deleted.
  ##   Version: string (required)
  var query_603704 = newJObject()
  var formData_603705 = newJObject()
  add(query_603704, "Action", newJString(Action))
  add(formData_603705, "TemplateName", newJString(TemplateName))
  add(query_603704, "Version", newJString(Version))
  result = call_603703.call(nil, query_603704, nil, formData_603705, nil)

var postDeleteTemplate* = Call_PostDeleteTemplate_603689(
    name: "postDeleteTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteTemplate",
    validator: validate_PostDeleteTemplate_603690, base: "/",
    url: url_PostDeleteTemplate_603691, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteTemplate_603673 = ref object of OpenApiRestCall_602433
proc url_GetDeleteTemplate_603675(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteTemplate_603674(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Deletes an email template.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the template to be deleted.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603676 = query.getOrDefault("Action")
  valid_603676 = validateParameter(valid_603676, JString, required = true,
                                 default = newJString("DeleteTemplate"))
  if valid_603676 != nil:
    section.add "Action", valid_603676
  var valid_603677 = query.getOrDefault("TemplateName")
  valid_603677 = validateParameter(valid_603677, JString, required = true,
                                 default = nil)
  if valid_603677 != nil:
    section.add "TemplateName", valid_603677
  var valid_603678 = query.getOrDefault("Version")
  valid_603678 = validateParameter(valid_603678, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603678 != nil:
    section.add "Version", valid_603678
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603679 = header.getOrDefault("X-Amz-Date")
  valid_603679 = validateParameter(valid_603679, JString, required = false,
                                 default = nil)
  if valid_603679 != nil:
    section.add "X-Amz-Date", valid_603679
  var valid_603680 = header.getOrDefault("X-Amz-Security-Token")
  valid_603680 = validateParameter(valid_603680, JString, required = false,
                                 default = nil)
  if valid_603680 != nil:
    section.add "X-Amz-Security-Token", valid_603680
  var valid_603681 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603681 = validateParameter(valid_603681, JString, required = false,
                                 default = nil)
  if valid_603681 != nil:
    section.add "X-Amz-Content-Sha256", valid_603681
  var valid_603682 = header.getOrDefault("X-Amz-Algorithm")
  valid_603682 = validateParameter(valid_603682, JString, required = false,
                                 default = nil)
  if valid_603682 != nil:
    section.add "X-Amz-Algorithm", valid_603682
  var valid_603683 = header.getOrDefault("X-Amz-Signature")
  valid_603683 = validateParameter(valid_603683, JString, required = false,
                                 default = nil)
  if valid_603683 != nil:
    section.add "X-Amz-Signature", valid_603683
  var valid_603684 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603684 = validateParameter(valid_603684, JString, required = false,
                                 default = nil)
  if valid_603684 != nil:
    section.add "X-Amz-SignedHeaders", valid_603684
  var valid_603685 = header.getOrDefault("X-Amz-Credential")
  valid_603685 = validateParameter(valid_603685, JString, required = false,
                                 default = nil)
  if valid_603685 != nil:
    section.add "X-Amz-Credential", valid_603685
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603686: Call_GetDeleteTemplate_603673; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an email template.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603686.validator(path, query, header, formData, body)
  let scheme = call_603686.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603686.url(scheme.get, call_603686.host, call_603686.base,
                         call_603686.route, valid.getOrDefault("path"))
  result = hook(call_603686, url, valid)

proc call*(call_603687: Call_GetDeleteTemplate_603673; TemplateName: string;
          Action: string = "DeleteTemplate"; Version: string = "2010-12-01"): Recallable =
  ## getDeleteTemplate
  ## <p>Deletes an email template.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the template to be deleted.
  ##   Version: string (required)
  var query_603688 = newJObject()
  add(query_603688, "Action", newJString(Action))
  add(query_603688, "TemplateName", newJString(TemplateName))
  add(query_603688, "Version", newJString(Version))
  result = call_603687.call(nil, query_603688, nil, nil, nil)

var getDeleteTemplate* = Call_GetDeleteTemplate_603673(name: "getDeleteTemplate",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=DeleteTemplate", validator: validate_GetDeleteTemplate_603674,
    base: "/", url: url_GetDeleteTemplate_603675,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteVerifiedEmailAddress_603722 = ref object of OpenApiRestCall_602433
proc url_PostDeleteVerifiedEmailAddress_603724(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteVerifiedEmailAddress_603723(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deprecated. Use the <code>DeleteIdentity</code> operation to delete email addresses and domains.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603725 = query.getOrDefault("Action")
  valid_603725 = validateParameter(valid_603725, JString, required = true, default = newJString(
      "DeleteVerifiedEmailAddress"))
  if valid_603725 != nil:
    section.add "Action", valid_603725
  var valid_603726 = query.getOrDefault("Version")
  valid_603726 = validateParameter(valid_603726, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603726 != nil:
    section.add "Version", valid_603726
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603727 = header.getOrDefault("X-Amz-Date")
  valid_603727 = validateParameter(valid_603727, JString, required = false,
                                 default = nil)
  if valid_603727 != nil:
    section.add "X-Amz-Date", valid_603727
  var valid_603728 = header.getOrDefault("X-Amz-Security-Token")
  valid_603728 = validateParameter(valid_603728, JString, required = false,
                                 default = nil)
  if valid_603728 != nil:
    section.add "X-Amz-Security-Token", valid_603728
  var valid_603729 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603729 = validateParameter(valid_603729, JString, required = false,
                                 default = nil)
  if valid_603729 != nil:
    section.add "X-Amz-Content-Sha256", valid_603729
  var valid_603730 = header.getOrDefault("X-Amz-Algorithm")
  valid_603730 = validateParameter(valid_603730, JString, required = false,
                                 default = nil)
  if valid_603730 != nil:
    section.add "X-Amz-Algorithm", valid_603730
  var valid_603731 = header.getOrDefault("X-Amz-Signature")
  valid_603731 = validateParameter(valid_603731, JString, required = false,
                                 default = nil)
  if valid_603731 != nil:
    section.add "X-Amz-Signature", valid_603731
  var valid_603732 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603732 = validateParameter(valid_603732, JString, required = false,
                                 default = nil)
  if valid_603732 != nil:
    section.add "X-Amz-SignedHeaders", valid_603732
  var valid_603733 = header.getOrDefault("X-Amz-Credential")
  valid_603733 = validateParameter(valid_603733, JString, required = false,
                                 default = nil)
  if valid_603733 != nil:
    section.add "X-Amz-Credential", valid_603733
  result.add "header", section
  ## parameters in `formData` object:
  ##   EmailAddress: JString (required)
  ##               : An email address to be removed from the list of verified addresses.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `EmailAddress` field"
  var valid_603734 = formData.getOrDefault("EmailAddress")
  valid_603734 = validateParameter(valid_603734, JString, required = true,
                                 default = nil)
  if valid_603734 != nil:
    section.add "EmailAddress", valid_603734
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603735: Call_PostDeleteVerifiedEmailAddress_603722; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deprecated. Use the <code>DeleteIdentity</code> operation to delete email addresses and domains.
  ## 
  let valid = call_603735.validator(path, query, header, formData, body)
  let scheme = call_603735.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603735.url(scheme.get, call_603735.host, call_603735.base,
                         call_603735.route, valid.getOrDefault("path"))
  result = hook(call_603735, url, valid)

proc call*(call_603736: Call_PostDeleteVerifiedEmailAddress_603722;
          EmailAddress: string; Action: string = "DeleteVerifiedEmailAddress";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteVerifiedEmailAddress
  ## Deprecated. Use the <code>DeleteIdentity</code> operation to delete email addresses and domains.
  ##   EmailAddress: string (required)
  ##               : An email address to be removed from the list of verified addresses.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603737 = newJObject()
  var formData_603738 = newJObject()
  add(formData_603738, "EmailAddress", newJString(EmailAddress))
  add(query_603737, "Action", newJString(Action))
  add(query_603737, "Version", newJString(Version))
  result = call_603736.call(nil, query_603737, nil, formData_603738, nil)

var postDeleteVerifiedEmailAddress* = Call_PostDeleteVerifiedEmailAddress_603722(
    name: "postDeleteVerifiedEmailAddress", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteVerifiedEmailAddress",
    validator: validate_PostDeleteVerifiedEmailAddress_603723, base: "/",
    url: url_PostDeleteVerifiedEmailAddress_603724,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteVerifiedEmailAddress_603706 = ref object of OpenApiRestCall_602433
proc url_GetDeleteVerifiedEmailAddress_603708(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteVerifiedEmailAddress_603707(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deprecated. Use the <code>DeleteIdentity</code> operation to delete email addresses and domains.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   EmailAddress: JString (required)
  ##               : An email address to be removed from the list of verified addresses.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603709 = query.getOrDefault("Action")
  valid_603709 = validateParameter(valid_603709, JString, required = true, default = newJString(
      "DeleteVerifiedEmailAddress"))
  if valid_603709 != nil:
    section.add "Action", valid_603709
  var valid_603710 = query.getOrDefault("EmailAddress")
  valid_603710 = validateParameter(valid_603710, JString, required = true,
                                 default = nil)
  if valid_603710 != nil:
    section.add "EmailAddress", valid_603710
  var valid_603711 = query.getOrDefault("Version")
  valid_603711 = validateParameter(valid_603711, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603711 != nil:
    section.add "Version", valid_603711
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603712 = header.getOrDefault("X-Amz-Date")
  valid_603712 = validateParameter(valid_603712, JString, required = false,
                                 default = nil)
  if valid_603712 != nil:
    section.add "X-Amz-Date", valid_603712
  var valid_603713 = header.getOrDefault("X-Amz-Security-Token")
  valid_603713 = validateParameter(valid_603713, JString, required = false,
                                 default = nil)
  if valid_603713 != nil:
    section.add "X-Amz-Security-Token", valid_603713
  var valid_603714 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603714 = validateParameter(valid_603714, JString, required = false,
                                 default = nil)
  if valid_603714 != nil:
    section.add "X-Amz-Content-Sha256", valid_603714
  var valid_603715 = header.getOrDefault("X-Amz-Algorithm")
  valid_603715 = validateParameter(valid_603715, JString, required = false,
                                 default = nil)
  if valid_603715 != nil:
    section.add "X-Amz-Algorithm", valid_603715
  var valid_603716 = header.getOrDefault("X-Amz-Signature")
  valid_603716 = validateParameter(valid_603716, JString, required = false,
                                 default = nil)
  if valid_603716 != nil:
    section.add "X-Amz-Signature", valid_603716
  var valid_603717 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603717 = validateParameter(valid_603717, JString, required = false,
                                 default = nil)
  if valid_603717 != nil:
    section.add "X-Amz-SignedHeaders", valid_603717
  var valid_603718 = header.getOrDefault("X-Amz-Credential")
  valid_603718 = validateParameter(valid_603718, JString, required = false,
                                 default = nil)
  if valid_603718 != nil:
    section.add "X-Amz-Credential", valid_603718
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603719: Call_GetDeleteVerifiedEmailAddress_603706; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deprecated. Use the <code>DeleteIdentity</code> operation to delete email addresses and domains.
  ## 
  let valid = call_603719.validator(path, query, header, formData, body)
  let scheme = call_603719.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603719.url(scheme.get, call_603719.host, call_603719.base,
                         call_603719.route, valid.getOrDefault("path"))
  result = hook(call_603719, url, valid)

proc call*(call_603720: Call_GetDeleteVerifiedEmailAddress_603706;
          EmailAddress: string; Action: string = "DeleteVerifiedEmailAddress";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteVerifiedEmailAddress
  ## Deprecated. Use the <code>DeleteIdentity</code> operation to delete email addresses and domains.
  ##   Action: string (required)
  ##   EmailAddress: string (required)
  ##               : An email address to be removed from the list of verified addresses.
  ##   Version: string (required)
  var query_603721 = newJObject()
  add(query_603721, "Action", newJString(Action))
  add(query_603721, "EmailAddress", newJString(EmailAddress))
  add(query_603721, "Version", newJString(Version))
  result = call_603720.call(nil, query_603721, nil, nil, nil)

var getDeleteVerifiedEmailAddress* = Call_GetDeleteVerifiedEmailAddress_603706(
    name: "getDeleteVerifiedEmailAddress", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DeleteVerifiedEmailAddress",
    validator: validate_GetDeleteVerifiedEmailAddress_603707, base: "/",
    url: url_GetDeleteVerifiedEmailAddress_603708,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeActiveReceiptRuleSet_603754 = ref object of OpenApiRestCall_602433
proc url_PostDescribeActiveReceiptRuleSet_603756(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeActiveReceiptRuleSet_603755(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the metadata and receipt rules for the receipt rule set that is currently active.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603757 = query.getOrDefault("Action")
  valid_603757 = validateParameter(valid_603757, JString, required = true, default = newJString(
      "DescribeActiveReceiptRuleSet"))
  if valid_603757 != nil:
    section.add "Action", valid_603757
  var valid_603758 = query.getOrDefault("Version")
  valid_603758 = validateParameter(valid_603758, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603758 != nil:
    section.add "Version", valid_603758
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603759 = header.getOrDefault("X-Amz-Date")
  valid_603759 = validateParameter(valid_603759, JString, required = false,
                                 default = nil)
  if valid_603759 != nil:
    section.add "X-Amz-Date", valid_603759
  var valid_603760 = header.getOrDefault("X-Amz-Security-Token")
  valid_603760 = validateParameter(valid_603760, JString, required = false,
                                 default = nil)
  if valid_603760 != nil:
    section.add "X-Amz-Security-Token", valid_603760
  var valid_603761 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603761 = validateParameter(valid_603761, JString, required = false,
                                 default = nil)
  if valid_603761 != nil:
    section.add "X-Amz-Content-Sha256", valid_603761
  var valid_603762 = header.getOrDefault("X-Amz-Algorithm")
  valid_603762 = validateParameter(valid_603762, JString, required = false,
                                 default = nil)
  if valid_603762 != nil:
    section.add "X-Amz-Algorithm", valid_603762
  var valid_603763 = header.getOrDefault("X-Amz-Signature")
  valid_603763 = validateParameter(valid_603763, JString, required = false,
                                 default = nil)
  if valid_603763 != nil:
    section.add "X-Amz-Signature", valid_603763
  var valid_603764 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603764 = validateParameter(valid_603764, JString, required = false,
                                 default = nil)
  if valid_603764 != nil:
    section.add "X-Amz-SignedHeaders", valid_603764
  var valid_603765 = header.getOrDefault("X-Amz-Credential")
  valid_603765 = validateParameter(valid_603765, JString, required = false,
                                 default = nil)
  if valid_603765 != nil:
    section.add "X-Amz-Credential", valid_603765
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603766: Call_PostDescribeActiveReceiptRuleSet_603754;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the metadata and receipt rules for the receipt rule set that is currently active.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603766.validator(path, query, header, formData, body)
  let scheme = call_603766.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603766.url(scheme.get, call_603766.host, call_603766.base,
                         call_603766.route, valid.getOrDefault("path"))
  result = hook(call_603766, url, valid)

proc call*(call_603767: Call_PostDescribeActiveReceiptRuleSet_603754;
          Action: string = "DescribeActiveReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## postDescribeActiveReceiptRuleSet
  ## <p>Returns the metadata and receipt rules for the receipt rule set that is currently active.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603768 = newJObject()
  add(query_603768, "Action", newJString(Action))
  add(query_603768, "Version", newJString(Version))
  result = call_603767.call(nil, query_603768, nil, nil, nil)

var postDescribeActiveReceiptRuleSet* = Call_PostDescribeActiveReceiptRuleSet_603754(
    name: "postDescribeActiveReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DescribeActiveReceiptRuleSet",
    validator: validate_PostDescribeActiveReceiptRuleSet_603755, base: "/",
    url: url_PostDescribeActiveReceiptRuleSet_603756,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeActiveReceiptRuleSet_603739 = ref object of OpenApiRestCall_602433
proc url_GetDescribeActiveReceiptRuleSet_603741(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeActiveReceiptRuleSet_603740(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the metadata and receipt rules for the receipt rule set that is currently active.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603742 = query.getOrDefault("Action")
  valid_603742 = validateParameter(valid_603742, JString, required = true, default = newJString(
      "DescribeActiveReceiptRuleSet"))
  if valid_603742 != nil:
    section.add "Action", valid_603742
  var valid_603743 = query.getOrDefault("Version")
  valid_603743 = validateParameter(valid_603743, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603743 != nil:
    section.add "Version", valid_603743
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603744 = header.getOrDefault("X-Amz-Date")
  valid_603744 = validateParameter(valid_603744, JString, required = false,
                                 default = nil)
  if valid_603744 != nil:
    section.add "X-Amz-Date", valid_603744
  var valid_603745 = header.getOrDefault("X-Amz-Security-Token")
  valid_603745 = validateParameter(valid_603745, JString, required = false,
                                 default = nil)
  if valid_603745 != nil:
    section.add "X-Amz-Security-Token", valid_603745
  var valid_603746 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603746 = validateParameter(valid_603746, JString, required = false,
                                 default = nil)
  if valid_603746 != nil:
    section.add "X-Amz-Content-Sha256", valid_603746
  var valid_603747 = header.getOrDefault("X-Amz-Algorithm")
  valid_603747 = validateParameter(valid_603747, JString, required = false,
                                 default = nil)
  if valid_603747 != nil:
    section.add "X-Amz-Algorithm", valid_603747
  var valid_603748 = header.getOrDefault("X-Amz-Signature")
  valid_603748 = validateParameter(valid_603748, JString, required = false,
                                 default = nil)
  if valid_603748 != nil:
    section.add "X-Amz-Signature", valid_603748
  var valid_603749 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603749 = validateParameter(valid_603749, JString, required = false,
                                 default = nil)
  if valid_603749 != nil:
    section.add "X-Amz-SignedHeaders", valid_603749
  var valid_603750 = header.getOrDefault("X-Amz-Credential")
  valid_603750 = validateParameter(valid_603750, JString, required = false,
                                 default = nil)
  if valid_603750 != nil:
    section.add "X-Amz-Credential", valid_603750
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603751: Call_GetDescribeActiveReceiptRuleSet_603739;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the metadata and receipt rules for the receipt rule set that is currently active.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603751.validator(path, query, header, formData, body)
  let scheme = call_603751.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603751.url(scheme.get, call_603751.host, call_603751.base,
                         call_603751.route, valid.getOrDefault("path"))
  result = hook(call_603751, url, valid)

proc call*(call_603752: Call_GetDescribeActiveReceiptRuleSet_603739;
          Action: string = "DescribeActiveReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## getDescribeActiveReceiptRuleSet
  ## <p>Returns the metadata and receipt rules for the receipt rule set that is currently active.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603753 = newJObject()
  add(query_603753, "Action", newJString(Action))
  add(query_603753, "Version", newJString(Version))
  result = call_603752.call(nil, query_603753, nil, nil, nil)

var getDescribeActiveReceiptRuleSet* = Call_GetDescribeActiveReceiptRuleSet_603739(
    name: "getDescribeActiveReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DescribeActiveReceiptRuleSet",
    validator: validate_GetDescribeActiveReceiptRuleSet_603740, base: "/",
    url: url_GetDescribeActiveReceiptRuleSet_603741,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeConfigurationSet_603786 = ref object of OpenApiRestCall_602433
proc url_PostDescribeConfigurationSet_603788(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeConfigurationSet_603787(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the details of the specified configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603789 = query.getOrDefault("Action")
  valid_603789 = validateParameter(valid_603789, JString, required = true, default = newJString(
      "DescribeConfigurationSet"))
  if valid_603789 != nil:
    section.add "Action", valid_603789
  var valid_603790 = query.getOrDefault("Version")
  valid_603790 = validateParameter(valid_603790, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603790 != nil:
    section.add "Version", valid_603790
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603791 = header.getOrDefault("X-Amz-Date")
  valid_603791 = validateParameter(valid_603791, JString, required = false,
                                 default = nil)
  if valid_603791 != nil:
    section.add "X-Amz-Date", valid_603791
  var valid_603792 = header.getOrDefault("X-Amz-Security-Token")
  valid_603792 = validateParameter(valid_603792, JString, required = false,
                                 default = nil)
  if valid_603792 != nil:
    section.add "X-Amz-Security-Token", valid_603792
  var valid_603793 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603793 = validateParameter(valid_603793, JString, required = false,
                                 default = nil)
  if valid_603793 != nil:
    section.add "X-Amz-Content-Sha256", valid_603793
  var valid_603794 = header.getOrDefault("X-Amz-Algorithm")
  valid_603794 = validateParameter(valid_603794, JString, required = false,
                                 default = nil)
  if valid_603794 != nil:
    section.add "X-Amz-Algorithm", valid_603794
  var valid_603795 = header.getOrDefault("X-Amz-Signature")
  valid_603795 = validateParameter(valid_603795, JString, required = false,
                                 default = nil)
  if valid_603795 != nil:
    section.add "X-Amz-Signature", valid_603795
  var valid_603796 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603796 = validateParameter(valid_603796, JString, required = false,
                                 default = nil)
  if valid_603796 != nil:
    section.add "X-Amz-SignedHeaders", valid_603796
  var valid_603797 = header.getOrDefault("X-Amz-Credential")
  valid_603797 = validateParameter(valid_603797, JString, required = false,
                                 default = nil)
  if valid_603797 != nil:
    section.add "X-Amz-Credential", valid_603797
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetAttributeNames: JArray
  ##                                 : A list of configuration set attributes to return.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set to describe.
  section = newJObject()
  var valid_603798 = formData.getOrDefault("ConfigurationSetAttributeNames")
  valid_603798 = validateParameter(valid_603798, JArray, required = false,
                                 default = nil)
  if valid_603798 != nil:
    section.add "ConfigurationSetAttributeNames", valid_603798
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_603799 = formData.getOrDefault("ConfigurationSetName")
  valid_603799 = validateParameter(valid_603799, JString, required = true,
                                 default = nil)
  if valid_603799 != nil:
    section.add "ConfigurationSetName", valid_603799
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603800: Call_PostDescribeConfigurationSet_603786; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the details of the specified configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603800.validator(path, query, header, formData, body)
  let scheme = call_603800.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603800.url(scheme.get, call_603800.host, call_603800.base,
                         call_603800.route, valid.getOrDefault("path"))
  result = hook(call_603800, url, valid)

proc call*(call_603801: Call_PostDescribeConfigurationSet_603786;
          ConfigurationSetName: string;
          ConfigurationSetAttributeNames: JsonNode = nil;
          Action: string = "DescribeConfigurationSet";
          Version: string = "2010-12-01"): Recallable =
  ## postDescribeConfigurationSet
  ## <p>Returns the details of the specified configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetAttributeNames: JArray
  ##                                 : A list of configuration set attributes to return.
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set to describe.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603802 = newJObject()
  var formData_603803 = newJObject()
  if ConfigurationSetAttributeNames != nil:
    formData_603803.add "ConfigurationSetAttributeNames",
                       ConfigurationSetAttributeNames
  add(formData_603803, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_603802, "Action", newJString(Action))
  add(query_603802, "Version", newJString(Version))
  result = call_603801.call(nil, query_603802, nil, formData_603803, nil)

var postDescribeConfigurationSet* = Call_PostDescribeConfigurationSet_603786(
    name: "postDescribeConfigurationSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DescribeConfigurationSet",
    validator: validate_PostDescribeConfigurationSet_603787, base: "/",
    url: url_PostDescribeConfigurationSet_603788,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeConfigurationSet_603769 = ref object of OpenApiRestCall_602433
proc url_GetDescribeConfigurationSet_603771(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeConfigurationSet_603770(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the details of the specified configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ConfigurationSetAttributeNames: JArray
  ##                                 : A list of configuration set attributes to return.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set to describe.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603772 = query.getOrDefault("Action")
  valid_603772 = validateParameter(valid_603772, JString, required = true, default = newJString(
      "DescribeConfigurationSet"))
  if valid_603772 != nil:
    section.add "Action", valid_603772
  var valid_603773 = query.getOrDefault("ConfigurationSetAttributeNames")
  valid_603773 = validateParameter(valid_603773, JArray, required = false,
                                 default = nil)
  if valid_603773 != nil:
    section.add "ConfigurationSetAttributeNames", valid_603773
  var valid_603774 = query.getOrDefault("ConfigurationSetName")
  valid_603774 = validateParameter(valid_603774, JString, required = true,
                                 default = nil)
  if valid_603774 != nil:
    section.add "ConfigurationSetName", valid_603774
  var valid_603775 = query.getOrDefault("Version")
  valid_603775 = validateParameter(valid_603775, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603775 != nil:
    section.add "Version", valid_603775
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603776 = header.getOrDefault("X-Amz-Date")
  valid_603776 = validateParameter(valid_603776, JString, required = false,
                                 default = nil)
  if valid_603776 != nil:
    section.add "X-Amz-Date", valid_603776
  var valid_603777 = header.getOrDefault("X-Amz-Security-Token")
  valid_603777 = validateParameter(valid_603777, JString, required = false,
                                 default = nil)
  if valid_603777 != nil:
    section.add "X-Amz-Security-Token", valid_603777
  var valid_603778 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603778 = validateParameter(valid_603778, JString, required = false,
                                 default = nil)
  if valid_603778 != nil:
    section.add "X-Amz-Content-Sha256", valid_603778
  var valid_603779 = header.getOrDefault("X-Amz-Algorithm")
  valid_603779 = validateParameter(valid_603779, JString, required = false,
                                 default = nil)
  if valid_603779 != nil:
    section.add "X-Amz-Algorithm", valid_603779
  var valid_603780 = header.getOrDefault("X-Amz-Signature")
  valid_603780 = validateParameter(valid_603780, JString, required = false,
                                 default = nil)
  if valid_603780 != nil:
    section.add "X-Amz-Signature", valid_603780
  var valid_603781 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603781 = validateParameter(valid_603781, JString, required = false,
                                 default = nil)
  if valid_603781 != nil:
    section.add "X-Amz-SignedHeaders", valid_603781
  var valid_603782 = header.getOrDefault("X-Amz-Credential")
  valid_603782 = validateParameter(valid_603782, JString, required = false,
                                 default = nil)
  if valid_603782 != nil:
    section.add "X-Amz-Credential", valid_603782
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603783: Call_GetDescribeConfigurationSet_603769; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the details of the specified configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603783.validator(path, query, header, formData, body)
  let scheme = call_603783.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603783.url(scheme.get, call_603783.host, call_603783.base,
                         call_603783.route, valid.getOrDefault("path"))
  result = hook(call_603783, url, valid)

proc call*(call_603784: Call_GetDescribeConfigurationSet_603769;
          ConfigurationSetName: string;
          Action: string = "DescribeConfigurationSet";
          ConfigurationSetAttributeNames: JsonNode = nil;
          Version: string = "2010-12-01"): Recallable =
  ## getDescribeConfigurationSet
  ## <p>Returns the details of the specified configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   ConfigurationSetAttributeNames: JArray
  ##                                 : A list of configuration set attributes to return.
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set to describe.
  ##   Version: string (required)
  var query_603785 = newJObject()
  add(query_603785, "Action", newJString(Action))
  if ConfigurationSetAttributeNames != nil:
    query_603785.add "ConfigurationSetAttributeNames",
                    ConfigurationSetAttributeNames
  add(query_603785, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_603785, "Version", newJString(Version))
  result = call_603784.call(nil, query_603785, nil, nil, nil)

var getDescribeConfigurationSet* = Call_GetDescribeConfigurationSet_603769(
    name: "getDescribeConfigurationSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DescribeConfigurationSet",
    validator: validate_GetDescribeConfigurationSet_603770, base: "/",
    url: url_GetDescribeConfigurationSet_603771,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReceiptRule_603821 = ref object of OpenApiRestCall_602433
proc url_PostDescribeReceiptRule_603823(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeReceiptRule_603822(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the details of the specified receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603824 = query.getOrDefault("Action")
  valid_603824 = validateParameter(valid_603824, JString, required = true,
                                 default = newJString("DescribeReceiptRule"))
  if valid_603824 != nil:
    section.add "Action", valid_603824
  var valid_603825 = query.getOrDefault("Version")
  valid_603825 = validateParameter(valid_603825, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603825 != nil:
    section.add "Version", valid_603825
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603826 = header.getOrDefault("X-Amz-Date")
  valid_603826 = validateParameter(valid_603826, JString, required = false,
                                 default = nil)
  if valid_603826 != nil:
    section.add "X-Amz-Date", valid_603826
  var valid_603827 = header.getOrDefault("X-Amz-Security-Token")
  valid_603827 = validateParameter(valid_603827, JString, required = false,
                                 default = nil)
  if valid_603827 != nil:
    section.add "X-Amz-Security-Token", valid_603827
  var valid_603828 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603828 = validateParameter(valid_603828, JString, required = false,
                                 default = nil)
  if valid_603828 != nil:
    section.add "X-Amz-Content-Sha256", valid_603828
  var valid_603829 = header.getOrDefault("X-Amz-Algorithm")
  valid_603829 = validateParameter(valid_603829, JString, required = false,
                                 default = nil)
  if valid_603829 != nil:
    section.add "X-Amz-Algorithm", valid_603829
  var valid_603830 = header.getOrDefault("X-Amz-Signature")
  valid_603830 = validateParameter(valid_603830, JString, required = false,
                                 default = nil)
  if valid_603830 != nil:
    section.add "X-Amz-Signature", valid_603830
  var valid_603831 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603831 = validateParameter(valid_603831, JString, required = false,
                                 default = nil)
  if valid_603831 != nil:
    section.add "X-Amz-SignedHeaders", valid_603831
  var valid_603832 = header.getOrDefault("X-Amz-Credential")
  valid_603832 = validateParameter(valid_603832, JString, required = false,
                                 default = nil)
  if valid_603832 != nil:
    section.add "X-Amz-Credential", valid_603832
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleName: JString (required)
  ##           : The name of the receipt rule.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleName` field"
  var valid_603833 = formData.getOrDefault("RuleName")
  valid_603833 = validateParameter(valid_603833, JString, required = true,
                                 default = nil)
  if valid_603833 != nil:
    section.add "RuleName", valid_603833
  var valid_603834 = formData.getOrDefault("RuleSetName")
  valid_603834 = validateParameter(valid_603834, JString, required = true,
                                 default = nil)
  if valid_603834 != nil:
    section.add "RuleSetName", valid_603834
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603835: Call_PostDescribeReceiptRule_603821; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the details of the specified receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603835.validator(path, query, header, formData, body)
  let scheme = call_603835.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603835.url(scheme.get, call_603835.host, call_603835.base,
                         call_603835.route, valid.getOrDefault("path"))
  result = hook(call_603835, url, valid)

proc call*(call_603836: Call_PostDescribeReceiptRule_603821; RuleName: string;
          RuleSetName: string; Action: string = "DescribeReceiptRule";
          Version: string = "2010-12-01"): Recallable =
  ## postDescribeReceiptRule
  ## <p>Returns the details of the specified receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleName: string (required)
  ##           : The name of the receipt rule.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603837 = newJObject()
  var formData_603838 = newJObject()
  add(formData_603838, "RuleName", newJString(RuleName))
  add(formData_603838, "RuleSetName", newJString(RuleSetName))
  add(query_603837, "Action", newJString(Action))
  add(query_603837, "Version", newJString(Version))
  result = call_603836.call(nil, query_603837, nil, formData_603838, nil)

var postDescribeReceiptRule* = Call_PostDescribeReceiptRule_603821(
    name: "postDescribeReceiptRule", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DescribeReceiptRule",
    validator: validate_PostDescribeReceiptRule_603822, base: "/",
    url: url_PostDescribeReceiptRule_603823, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReceiptRule_603804 = ref object of OpenApiRestCall_602433
proc url_GetDescribeReceiptRule_603806(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeReceiptRule_603805(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the details of the specified receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleName: JString (required)
  ##           : The name of the receipt rule.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleName` field"
  var valid_603807 = query.getOrDefault("RuleName")
  valid_603807 = validateParameter(valid_603807, JString, required = true,
                                 default = nil)
  if valid_603807 != nil:
    section.add "RuleName", valid_603807
  var valid_603808 = query.getOrDefault("RuleSetName")
  valid_603808 = validateParameter(valid_603808, JString, required = true,
                                 default = nil)
  if valid_603808 != nil:
    section.add "RuleSetName", valid_603808
  var valid_603809 = query.getOrDefault("Action")
  valid_603809 = validateParameter(valid_603809, JString, required = true,
                                 default = newJString("DescribeReceiptRule"))
  if valid_603809 != nil:
    section.add "Action", valid_603809
  var valid_603810 = query.getOrDefault("Version")
  valid_603810 = validateParameter(valid_603810, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603810 != nil:
    section.add "Version", valid_603810
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603811 = header.getOrDefault("X-Amz-Date")
  valid_603811 = validateParameter(valid_603811, JString, required = false,
                                 default = nil)
  if valid_603811 != nil:
    section.add "X-Amz-Date", valid_603811
  var valid_603812 = header.getOrDefault("X-Amz-Security-Token")
  valid_603812 = validateParameter(valid_603812, JString, required = false,
                                 default = nil)
  if valid_603812 != nil:
    section.add "X-Amz-Security-Token", valid_603812
  var valid_603813 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603813 = validateParameter(valid_603813, JString, required = false,
                                 default = nil)
  if valid_603813 != nil:
    section.add "X-Amz-Content-Sha256", valid_603813
  var valid_603814 = header.getOrDefault("X-Amz-Algorithm")
  valid_603814 = validateParameter(valid_603814, JString, required = false,
                                 default = nil)
  if valid_603814 != nil:
    section.add "X-Amz-Algorithm", valid_603814
  var valid_603815 = header.getOrDefault("X-Amz-Signature")
  valid_603815 = validateParameter(valid_603815, JString, required = false,
                                 default = nil)
  if valid_603815 != nil:
    section.add "X-Amz-Signature", valid_603815
  var valid_603816 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603816 = validateParameter(valid_603816, JString, required = false,
                                 default = nil)
  if valid_603816 != nil:
    section.add "X-Amz-SignedHeaders", valid_603816
  var valid_603817 = header.getOrDefault("X-Amz-Credential")
  valid_603817 = validateParameter(valid_603817, JString, required = false,
                                 default = nil)
  if valid_603817 != nil:
    section.add "X-Amz-Credential", valid_603817
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603818: Call_GetDescribeReceiptRule_603804; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the details of the specified receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603818.validator(path, query, header, formData, body)
  let scheme = call_603818.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603818.url(scheme.get, call_603818.host, call_603818.base,
                         call_603818.route, valid.getOrDefault("path"))
  result = hook(call_603818, url, valid)

proc call*(call_603819: Call_GetDescribeReceiptRule_603804; RuleName: string;
          RuleSetName: string; Action: string = "DescribeReceiptRule";
          Version: string = "2010-12-01"): Recallable =
  ## getDescribeReceiptRule
  ## <p>Returns the details of the specified receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleName: string (required)
  ##           : The name of the receipt rule.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603820 = newJObject()
  add(query_603820, "RuleName", newJString(RuleName))
  add(query_603820, "RuleSetName", newJString(RuleSetName))
  add(query_603820, "Action", newJString(Action))
  add(query_603820, "Version", newJString(Version))
  result = call_603819.call(nil, query_603820, nil, nil, nil)

var getDescribeReceiptRule* = Call_GetDescribeReceiptRule_603804(
    name: "getDescribeReceiptRule", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DescribeReceiptRule",
    validator: validate_GetDescribeReceiptRule_603805, base: "/",
    url: url_GetDescribeReceiptRule_603806, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReceiptRuleSet_603855 = ref object of OpenApiRestCall_602433
proc url_PostDescribeReceiptRuleSet_603857(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeReceiptRuleSet_603856(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the details of the specified receipt rule set.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603858 = query.getOrDefault("Action")
  valid_603858 = validateParameter(valid_603858, JString, required = true,
                                 default = newJString("DescribeReceiptRuleSet"))
  if valid_603858 != nil:
    section.add "Action", valid_603858
  var valid_603859 = query.getOrDefault("Version")
  valid_603859 = validateParameter(valid_603859, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603859 != nil:
    section.add "Version", valid_603859
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603860 = header.getOrDefault("X-Amz-Date")
  valid_603860 = validateParameter(valid_603860, JString, required = false,
                                 default = nil)
  if valid_603860 != nil:
    section.add "X-Amz-Date", valid_603860
  var valid_603861 = header.getOrDefault("X-Amz-Security-Token")
  valid_603861 = validateParameter(valid_603861, JString, required = false,
                                 default = nil)
  if valid_603861 != nil:
    section.add "X-Amz-Security-Token", valid_603861
  var valid_603862 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603862 = validateParameter(valid_603862, JString, required = false,
                                 default = nil)
  if valid_603862 != nil:
    section.add "X-Amz-Content-Sha256", valid_603862
  var valid_603863 = header.getOrDefault("X-Amz-Algorithm")
  valid_603863 = validateParameter(valid_603863, JString, required = false,
                                 default = nil)
  if valid_603863 != nil:
    section.add "X-Amz-Algorithm", valid_603863
  var valid_603864 = header.getOrDefault("X-Amz-Signature")
  valid_603864 = validateParameter(valid_603864, JString, required = false,
                                 default = nil)
  if valid_603864 != nil:
    section.add "X-Amz-Signature", valid_603864
  var valid_603865 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603865 = validateParameter(valid_603865, JString, required = false,
                                 default = nil)
  if valid_603865 != nil:
    section.add "X-Amz-SignedHeaders", valid_603865
  var valid_603866 = header.getOrDefault("X-Amz-Credential")
  valid_603866 = validateParameter(valid_603866, JString, required = false,
                                 default = nil)
  if valid_603866 != nil:
    section.add "X-Amz-Credential", valid_603866
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set to describe.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleSetName` field"
  var valid_603867 = formData.getOrDefault("RuleSetName")
  valid_603867 = validateParameter(valid_603867, JString, required = true,
                                 default = nil)
  if valid_603867 != nil:
    section.add "RuleSetName", valid_603867
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603868: Call_PostDescribeReceiptRuleSet_603855; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the details of the specified receipt rule set.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603868.validator(path, query, header, formData, body)
  let scheme = call_603868.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603868.url(scheme.get, call_603868.host, call_603868.base,
                         call_603868.route, valid.getOrDefault("path"))
  result = hook(call_603868, url, valid)

proc call*(call_603869: Call_PostDescribeReceiptRuleSet_603855;
          RuleSetName: string; Action: string = "DescribeReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## postDescribeReceiptRuleSet
  ## <p>Returns the details of the specified receipt rule set.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set to describe.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603870 = newJObject()
  var formData_603871 = newJObject()
  add(formData_603871, "RuleSetName", newJString(RuleSetName))
  add(query_603870, "Action", newJString(Action))
  add(query_603870, "Version", newJString(Version))
  result = call_603869.call(nil, query_603870, nil, formData_603871, nil)

var postDescribeReceiptRuleSet* = Call_PostDescribeReceiptRuleSet_603855(
    name: "postDescribeReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DescribeReceiptRuleSet",
    validator: validate_PostDescribeReceiptRuleSet_603856, base: "/",
    url: url_PostDescribeReceiptRuleSet_603857,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReceiptRuleSet_603839 = ref object of OpenApiRestCall_602433
proc url_GetDescribeReceiptRuleSet_603841(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeReceiptRuleSet_603840(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the details of the specified receipt rule set.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set to describe.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleSetName` field"
  var valid_603842 = query.getOrDefault("RuleSetName")
  valid_603842 = validateParameter(valid_603842, JString, required = true,
                                 default = nil)
  if valid_603842 != nil:
    section.add "RuleSetName", valid_603842
  var valid_603843 = query.getOrDefault("Action")
  valid_603843 = validateParameter(valid_603843, JString, required = true,
                                 default = newJString("DescribeReceiptRuleSet"))
  if valid_603843 != nil:
    section.add "Action", valid_603843
  var valid_603844 = query.getOrDefault("Version")
  valid_603844 = validateParameter(valid_603844, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603844 != nil:
    section.add "Version", valid_603844
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603845 = header.getOrDefault("X-Amz-Date")
  valid_603845 = validateParameter(valid_603845, JString, required = false,
                                 default = nil)
  if valid_603845 != nil:
    section.add "X-Amz-Date", valid_603845
  var valid_603846 = header.getOrDefault("X-Amz-Security-Token")
  valid_603846 = validateParameter(valid_603846, JString, required = false,
                                 default = nil)
  if valid_603846 != nil:
    section.add "X-Amz-Security-Token", valid_603846
  var valid_603847 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603847 = validateParameter(valid_603847, JString, required = false,
                                 default = nil)
  if valid_603847 != nil:
    section.add "X-Amz-Content-Sha256", valid_603847
  var valid_603848 = header.getOrDefault("X-Amz-Algorithm")
  valid_603848 = validateParameter(valid_603848, JString, required = false,
                                 default = nil)
  if valid_603848 != nil:
    section.add "X-Amz-Algorithm", valid_603848
  var valid_603849 = header.getOrDefault("X-Amz-Signature")
  valid_603849 = validateParameter(valid_603849, JString, required = false,
                                 default = nil)
  if valid_603849 != nil:
    section.add "X-Amz-Signature", valid_603849
  var valid_603850 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603850 = validateParameter(valid_603850, JString, required = false,
                                 default = nil)
  if valid_603850 != nil:
    section.add "X-Amz-SignedHeaders", valid_603850
  var valid_603851 = header.getOrDefault("X-Amz-Credential")
  valid_603851 = validateParameter(valid_603851, JString, required = false,
                                 default = nil)
  if valid_603851 != nil:
    section.add "X-Amz-Credential", valid_603851
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603852: Call_GetDescribeReceiptRuleSet_603839; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the details of the specified receipt rule set.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603852.validator(path, query, header, formData, body)
  let scheme = call_603852.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603852.url(scheme.get, call_603852.host, call_603852.base,
                         call_603852.route, valid.getOrDefault("path"))
  result = hook(call_603852, url, valid)

proc call*(call_603853: Call_GetDescribeReceiptRuleSet_603839; RuleSetName: string;
          Action: string = "DescribeReceiptRuleSet"; Version: string = "2010-12-01"): Recallable =
  ## getDescribeReceiptRuleSet
  ## <p>Returns the details of the specified receipt rule set.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set to describe.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603854 = newJObject()
  add(query_603854, "RuleSetName", newJString(RuleSetName))
  add(query_603854, "Action", newJString(Action))
  add(query_603854, "Version", newJString(Version))
  result = call_603853.call(nil, query_603854, nil, nil, nil)

var getDescribeReceiptRuleSet* = Call_GetDescribeReceiptRuleSet_603839(
    name: "getDescribeReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DescribeReceiptRuleSet",
    validator: validate_GetDescribeReceiptRuleSet_603840, base: "/",
    url: url_GetDescribeReceiptRuleSet_603841,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetAccountSendingEnabled_603887 = ref object of OpenApiRestCall_602433
proc url_PostGetAccountSendingEnabled_603889(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetAccountSendingEnabled_603888(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the email sending status of the Amazon SES account for the current region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603890 = query.getOrDefault("Action")
  valid_603890 = validateParameter(valid_603890, JString, required = true, default = newJString(
      "GetAccountSendingEnabled"))
  if valid_603890 != nil:
    section.add "Action", valid_603890
  var valid_603891 = query.getOrDefault("Version")
  valid_603891 = validateParameter(valid_603891, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603891 != nil:
    section.add "Version", valid_603891
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603892 = header.getOrDefault("X-Amz-Date")
  valid_603892 = validateParameter(valid_603892, JString, required = false,
                                 default = nil)
  if valid_603892 != nil:
    section.add "X-Amz-Date", valid_603892
  var valid_603893 = header.getOrDefault("X-Amz-Security-Token")
  valid_603893 = validateParameter(valid_603893, JString, required = false,
                                 default = nil)
  if valid_603893 != nil:
    section.add "X-Amz-Security-Token", valid_603893
  var valid_603894 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603894 = validateParameter(valid_603894, JString, required = false,
                                 default = nil)
  if valid_603894 != nil:
    section.add "X-Amz-Content-Sha256", valid_603894
  var valid_603895 = header.getOrDefault("X-Amz-Algorithm")
  valid_603895 = validateParameter(valid_603895, JString, required = false,
                                 default = nil)
  if valid_603895 != nil:
    section.add "X-Amz-Algorithm", valid_603895
  var valid_603896 = header.getOrDefault("X-Amz-Signature")
  valid_603896 = validateParameter(valid_603896, JString, required = false,
                                 default = nil)
  if valid_603896 != nil:
    section.add "X-Amz-Signature", valid_603896
  var valid_603897 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603897 = validateParameter(valid_603897, JString, required = false,
                                 default = nil)
  if valid_603897 != nil:
    section.add "X-Amz-SignedHeaders", valid_603897
  var valid_603898 = header.getOrDefault("X-Amz-Credential")
  valid_603898 = validateParameter(valid_603898, JString, required = false,
                                 default = nil)
  if valid_603898 != nil:
    section.add "X-Amz-Credential", valid_603898
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603899: Call_PostGetAccountSendingEnabled_603887; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the email sending status of the Amazon SES account for the current region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603899.validator(path, query, header, formData, body)
  let scheme = call_603899.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603899.url(scheme.get, call_603899.host, call_603899.base,
                         call_603899.route, valid.getOrDefault("path"))
  result = hook(call_603899, url, valid)

proc call*(call_603900: Call_PostGetAccountSendingEnabled_603887;
          Action: string = "GetAccountSendingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## postGetAccountSendingEnabled
  ## <p>Returns the email sending status of the Amazon SES account for the current region.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603901 = newJObject()
  add(query_603901, "Action", newJString(Action))
  add(query_603901, "Version", newJString(Version))
  result = call_603900.call(nil, query_603901, nil, nil, nil)

var postGetAccountSendingEnabled* = Call_PostGetAccountSendingEnabled_603887(
    name: "postGetAccountSendingEnabled", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=GetAccountSendingEnabled",
    validator: validate_PostGetAccountSendingEnabled_603888, base: "/",
    url: url_PostGetAccountSendingEnabled_603889,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetAccountSendingEnabled_603872 = ref object of OpenApiRestCall_602433
proc url_GetGetAccountSendingEnabled_603874(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetAccountSendingEnabled_603873(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the email sending status of the Amazon SES account for the current region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603875 = query.getOrDefault("Action")
  valid_603875 = validateParameter(valid_603875, JString, required = true, default = newJString(
      "GetAccountSendingEnabled"))
  if valid_603875 != nil:
    section.add "Action", valid_603875
  var valid_603876 = query.getOrDefault("Version")
  valid_603876 = validateParameter(valid_603876, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603876 != nil:
    section.add "Version", valid_603876
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603877 = header.getOrDefault("X-Amz-Date")
  valid_603877 = validateParameter(valid_603877, JString, required = false,
                                 default = nil)
  if valid_603877 != nil:
    section.add "X-Amz-Date", valid_603877
  var valid_603878 = header.getOrDefault("X-Amz-Security-Token")
  valid_603878 = validateParameter(valid_603878, JString, required = false,
                                 default = nil)
  if valid_603878 != nil:
    section.add "X-Amz-Security-Token", valid_603878
  var valid_603879 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603879 = validateParameter(valid_603879, JString, required = false,
                                 default = nil)
  if valid_603879 != nil:
    section.add "X-Amz-Content-Sha256", valid_603879
  var valid_603880 = header.getOrDefault("X-Amz-Algorithm")
  valid_603880 = validateParameter(valid_603880, JString, required = false,
                                 default = nil)
  if valid_603880 != nil:
    section.add "X-Amz-Algorithm", valid_603880
  var valid_603881 = header.getOrDefault("X-Amz-Signature")
  valid_603881 = validateParameter(valid_603881, JString, required = false,
                                 default = nil)
  if valid_603881 != nil:
    section.add "X-Amz-Signature", valid_603881
  var valid_603882 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603882 = validateParameter(valid_603882, JString, required = false,
                                 default = nil)
  if valid_603882 != nil:
    section.add "X-Amz-SignedHeaders", valid_603882
  var valid_603883 = header.getOrDefault("X-Amz-Credential")
  valid_603883 = validateParameter(valid_603883, JString, required = false,
                                 default = nil)
  if valid_603883 != nil:
    section.add "X-Amz-Credential", valid_603883
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603884: Call_GetGetAccountSendingEnabled_603872; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the email sending status of the Amazon SES account for the current region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603884.validator(path, query, header, formData, body)
  let scheme = call_603884.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603884.url(scheme.get, call_603884.host, call_603884.base,
                         call_603884.route, valid.getOrDefault("path"))
  result = hook(call_603884, url, valid)

proc call*(call_603885: Call_GetGetAccountSendingEnabled_603872;
          Action: string = "GetAccountSendingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## getGetAccountSendingEnabled
  ## <p>Returns the email sending status of the Amazon SES account for the current region.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603886 = newJObject()
  add(query_603886, "Action", newJString(Action))
  add(query_603886, "Version", newJString(Version))
  result = call_603885.call(nil, query_603886, nil, nil, nil)

var getGetAccountSendingEnabled* = Call_GetGetAccountSendingEnabled_603872(
    name: "getGetAccountSendingEnabled", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=GetAccountSendingEnabled",
    validator: validate_GetGetAccountSendingEnabled_603873, base: "/",
    url: url_GetGetAccountSendingEnabled_603874,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetCustomVerificationEmailTemplate_603918 = ref object of OpenApiRestCall_602433
proc url_PostGetCustomVerificationEmailTemplate_603920(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetCustomVerificationEmailTemplate_603919(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the custom email verification template for the template name you specify.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603921 = query.getOrDefault("Action")
  valid_603921 = validateParameter(valid_603921, JString, required = true, default = newJString(
      "GetCustomVerificationEmailTemplate"))
  if valid_603921 != nil:
    section.add "Action", valid_603921
  var valid_603922 = query.getOrDefault("Version")
  valid_603922 = validateParameter(valid_603922, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603922 != nil:
    section.add "Version", valid_603922
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603923 = header.getOrDefault("X-Amz-Date")
  valid_603923 = validateParameter(valid_603923, JString, required = false,
                                 default = nil)
  if valid_603923 != nil:
    section.add "X-Amz-Date", valid_603923
  var valid_603924 = header.getOrDefault("X-Amz-Security-Token")
  valid_603924 = validateParameter(valid_603924, JString, required = false,
                                 default = nil)
  if valid_603924 != nil:
    section.add "X-Amz-Security-Token", valid_603924
  var valid_603925 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603925 = validateParameter(valid_603925, JString, required = false,
                                 default = nil)
  if valid_603925 != nil:
    section.add "X-Amz-Content-Sha256", valid_603925
  var valid_603926 = header.getOrDefault("X-Amz-Algorithm")
  valid_603926 = validateParameter(valid_603926, JString, required = false,
                                 default = nil)
  if valid_603926 != nil:
    section.add "X-Amz-Algorithm", valid_603926
  var valid_603927 = header.getOrDefault("X-Amz-Signature")
  valid_603927 = validateParameter(valid_603927, JString, required = false,
                                 default = nil)
  if valid_603927 != nil:
    section.add "X-Amz-Signature", valid_603927
  var valid_603928 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603928 = validateParameter(valid_603928, JString, required = false,
                                 default = nil)
  if valid_603928 != nil:
    section.add "X-Amz-SignedHeaders", valid_603928
  var valid_603929 = header.getOrDefault("X-Amz-Credential")
  valid_603929 = validateParameter(valid_603929, JString, required = false,
                                 default = nil)
  if valid_603929 != nil:
    section.add "X-Amz-Credential", valid_603929
  result.add "header", section
  ## parameters in `formData` object:
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template that you want to retrieve.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TemplateName` field"
  var valid_603930 = formData.getOrDefault("TemplateName")
  valid_603930 = validateParameter(valid_603930, JString, required = true,
                                 default = nil)
  if valid_603930 != nil:
    section.add "TemplateName", valid_603930
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603931: Call_PostGetCustomVerificationEmailTemplate_603918;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the custom email verification template for the template name you specify.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603931.validator(path, query, header, formData, body)
  let scheme = call_603931.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603931.url(scheme.get, call_603931.host, call_603931.base,
                         call_603931.route, valid.getOrDefault("path"))
  result = hook(call_603931, url, valid)

proc call*(call_603932: Call_PostGetCustomVerificationEmailTemplate_603918;
          TemplateName: string;
          Action: string = "GetCustomVerificationEmailTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## postGetCustomVerificationEmailTemplate
  ## <p>Returns the custom email verification template for the template name you specify.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template that you want to retrieve.
  ##   Version: string (required)
  var query_603933 = newJObject()
  var formData_603934 = newJObject()
  add(query_603933, "Action", newJString(Action))
  add(formData_603934, "TemplateName", newJString(TemplateName))
  add(query_603933, "Version", newJString(Version))
  result = call_603932.call(nil, query_603933, nil, formData_603934, nil)

var postGetCustomVerificationEmailTemplate* = Call_PostGetCustomVerificationEmailTemplate_603918(
    name: "postGetCustomVerificationEmailTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=GetCustomVerificationEmailTemplate",
    validator: validate_PostGetCustomVerificationEmailTemplate_603919, base: "/",
    url: url_PostGetCustomVerificationEmailTemplate_603920,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetCustomVerificationEmailTemplate_603902 = ref object of OpenApiRestCall_602433
proc url_GetGetCustomVerificationEmailTemplate_603904(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetCustomVerificationEmailTemplate_603903(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the custom email verification template for the template name you specify.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template that you want to retrieve.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603905 = query.getOrDefault("Action")
  valid_603905 = validateParameter(valid_603905, JString, required = true, default = newJString(
      "GetCustomVerificationEmailTemplate"))
  if valid_603905 != nil:
    section.add "Action", valid_603905
  var valid_603906 = query.getOrDefault("TemplateName")
  valid_603906 = validateParameter(valid_603906, JString, required = true,
                                 default = nil)
  if valid_603906 != nil:
    section.add "TemplateName", valid_603906
  var valid_603907 = query.getOrDefault("Version")
  valid_603907 = validateParameter(valid_603907, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603907 != nil:
    section.add "Version", valid_603907
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603908 = header.getOrDefault("X-Amz-Date")
  valid_603908 = validateParameter(valid_603908, JString, required = false,
                                 default = nil)
  if valid_603908 != nil:
    section.add "X-Amz-Date", valid_603908
  var valid_603909 = header.getOrDefault("X-Amz-Security-Token")
  valid_603909 = validateParameter(valid_603909, JString, required = false,
                                 default = nil)
  if valid_603909 != nil:
    section.add "X-Amz-Security-Token", valid_603909
  var valid_603910 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603910 = validateParameter(valid_603910, JString, required = false,
                                 default = nil)
  if valid_603910 != nil:
    section.add "X-Amz-Content-Sha256", valid_603910
  var valid_603911 = header.getOrDefault("X-Amz-Algorithm")
  valid_603911 = validateParameter(valid_603911, JString, required = false,
                                 default = nil)
  if valid_603911 != nil:
    section.add "X-Amz-Algorithm", valid_603911
  var valid_603912 = header.getOrDefault("X-Amz-Signature")
  valid_603912 = validateParameter(valid_603912, JString, required = false,
                                 default = nil)
  if valid_603912 != nil:
    section.add "X-Amz-Signature", valid_603912
  var valid_603913 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603913 = validateParameter(valid_603913, JString, required = false,
                                 default = nil)
  if valid_603913 != nil:
    section.add "X-Amz-SignedHeaders", valid_603913
  var valid_603914 = header.getOrDefault("X-Amz-Credential")
  valid_603914 = validateParameter(valid_603914, JString, required = false,
                                 default = nil)
  if valid_603914 != nil:
    section.add "X-Amz-Credential", valid_603914
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603915: Call_GetGetCustomVerificationEmailTemplate_603902;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the custom email verification template for the template name you specify.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_603915.validator(path, query, header, formData, body)
  let scheme = call_603915.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603915.url(scheme.get, call_603915.host, call_603915.base,
                         call_603915.route, valid.getOrDefault("path"))
  result = hook(call_603915, url, valid)

proc call*(call_603916: Call_GetGetCustomVerificationEmailTemplate_603902;
          TemplateName: string;
          Action: string = "GetCustomVerificationEmailTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## getGetCustomVerificationEmailTemplate
  ## <p>Returns the custom email verification template for the template name you specify.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template that you want to retrieve.
  ##   Version: string (required)
  var query_603917 = newJObject()
  add(query_603917, "Action", newJString(Action))
  add(query_603917, "TemplateName", newJString(TemplateName))
  add(query_603917, "Version", newJString(Version))
  result = call_603916.call(nil, query_603917, nil, nil, nil)

var getGetCustomVerificationEmailTemplate* = Call_GetGetCustomVerificationEmailTemplate_603902(
    name: "getGetCustomVerificationEmailTemplate", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=GetCustomVerificationEmailTemplate",
    validator: validate_GetGetCustomVerificationEmailTemplate_603903, base: "/",
    url: url_GetGetCustomVerificationEmailTemplate_603904,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetIdentityDkimAttributes_603951 = ref object of OpenApiRestCall_602433
proc url_PostGetIdentityDkimAttributes_603953(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetIdentityDkimAttributes_603952(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the current status of Easy DKIM signing for an entity. For domain name identities, this operation also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES has successfully verified that these tokens have been published.</p> <p>This operation takes a list of identities as input and returns the following information for each:</p> <ul> <li> <p>Whether Easy DKIM signing is enabled or disabled.</p> </li> <li> <p>A set of DKIM tokens that represent the identity. If the identity is an email address, the tokens represent the domain of that address.</p> </li> <li> <p>Whether Amazon SES has successfully verified the DKIM tokens published in the domain's DNS. This information is only returned for domain name identities, not for email addresses.</p> </li> </ul> <p>This operation is throttled at one request per second and can only get DKIM attributes for up to 100 identities at a time.</p> <p>For more information about creating DNS records using DKIM tokens, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603954 = query.getOrDefault("Action")
  valid_603954 = validateParameter(valid_603954, JString, required = true, default = newJString(
      "GetIdentityDkimAttributes"))
  if valid_603954 != nil:
    section.add "Action", valid_603954
  var valid_603955 = query.getOrDefault("Version")
  valid_603955 = validateParameter(valid_603955, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603955 != nil:
    section.add "Version", valid_603955
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603956 = header.getOrDefault("X-Amz-Date")
  valid_603956 = validateParameter(valid_603956, JString, required = false,
                                 default = nil)
  if valid_603956 != nil:
    section.add "X-Amz-Date", valid_603956
  var valid_603957 = header.getOrDefault("X-Amz-Security-Token")
  valid_603957 = validateParameter(valid_603957, JString, required = false,
                                 default = nil)
  if valid_603957 != nil:
    section.add "X-Amz-Security-Token", valid_603957
  var valid_603958 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603958 = validateParameter(valid_603958, JString, required = false,
                                 default = nil)
  if valid_603958 != nil:
    section.add "X-Amz-Content-Sha256", valid_603958
  var valid_603959 = header.getOrDefault("X-Amz-Algorithm")
  valid_603959 = validateParameter(valid_603959, JString, required = false,
                                 default = nil)
  if valid_603959 != nil:
    section.add "X-Amz-Algorithm", valid_603959
  var valid_603960 = header.getOrDefault("X-Amz-Signature")
  valid_603960 = validateParameter(valid_603960, JString, required = false,
                                 default = nil)
  if valid_603960 != nil:
    section.add "X-Amz-Signature", valid_603960
  var valid_603961 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603961 = validateParameter(valid_603961, JString, required = false,
                                 default = nil)
  if valid_603961 != nil:
    section.add "X-Amz-SignedHeaders", valid_603961
  var valid_603962 = header.getOrDefault("X-Amz-Credential")
  valid_603962 = validateParameter(valid_603962, JString, required = false,
                                 default = nil)
  if valid_603962 != nil:
    section.add "X-Amz-Credential", valid_603962
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identities: JArray (required)
  ##             : A list of one or more verified identities - email addresses, domains, or both.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identities` field"
  var valid_603963 = formData.getOrDefault("Identities")
  valid_603963 = validateParameter(valid_603963, JArray, required = true, default = nil)
  if valid_603963 != nil:
    section.add "Identities", valid_603963
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603964: Call_PostGetIdentityDkimAttributes_603951; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the current status of Easy DKIM signing for an entity. For domain name identities, this operation also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES has successfully verified that these tokens have been published.</p> <p>This operation takes a list of identities as input and returns the following information for each:</p> <ul> <li> <p>Whether Easy DKIM signing is enabled or disabled.</p> </li> <li> <p>A set of DKIM tokens that represent the identity. If the identity is an email address, the tokens represent the domain of that address.</p> </li> <li> <p>Whether Amazon SES has successfully verified the DKIM tokens published in the domain's DNS. This information is only returned for domain name identities, not for email addresses.</p> </li> </ul> <p>This operation is throttled at one request per second and can only get DKIM attributes for up to 100 identities at a time.</p> <p>For more information about creating DNS records using DKIM tokens, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_603964.validator(path, query, header, formData, body)
  let scheme = call_603964.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603964.url(scheme.get, call_603964.host, call_603964.base,
                         call_603964.route, valid.getOrDefault("path"))
  result = hook(call_603964, url, valid)

proc call*(call_603965: Call_PostGetIdentityDkimAttributes_603951;
          Identities: JsonNode; Action: string = "GetIdentityDkimAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## postGetIdentityDkimAttributes
  ## <p>Returns the current status of Easy DKIM signing for an entity. For domain name identities, this operation also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES has successfully verified that these tokens have been published.</p> <p>This operation takes a list of identities as input and returns the following information for each:</p> <ul> <li> <p>Whether Easy DKIM signing is enabled or disabled.</p> </li> <li> <p>A set of DKIM tokens that represent the identity. If the identity is an email address, the tokens represent the domain of that address.</p> </li> <li> <p>Whether Amazon SES has successfully verified the DKIM tokens published in the domain's DNS. This information is only returned for domain name identities, not for email addresses.</p> </li> </ul> <p>This operation is throttled at one request per second and can only get DKIM attributes for up to 100 identities at a time.</p> <p>For more information about creating DNS records using DKIM tokens, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html">Amazon SES Developer Guide</a>.</p>
  ##   Identities: JArray (required)
  ##             : A list of one or more verified identities - email addresses, domains, or both.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603966 = newJObject()
  var formData_603967 = newJObject()
  if Identities != nil:
    formData_603967.add "Identities", Identities
  add(query_603966, "Action", newJString(Action))
  add(query_603966, "Version", newJString(Version))
  result = call_603965.call(nil, query_603966, nil, formData_603967, nil)

var postGetIdentityDkimAttributes* = Call_PostGetIdentityDkimAttributes_603951(
    name: "postGetIdentityDkimAttributes", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=GetIdentityDkimAttributes",
    validator: validate_PostGetIdentityDkimAttributes_603952, base: "/",
    url: url_PostGetIdentityDkimAttributes_603953,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetIdentityDkimAttributes_603935 = ref object of OpenApiRestCall_602433
proc url_GetGetIdentityDkimAttributes_603937(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetIdentityDkimAttributes_603936(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the current status of Easy DKIM signing for an entity. For domain name identities, this operation also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES has successfully verified that these tokens have been published.</p> <p>This operation takes a list of identities as input and returns the following information for each:</p> <ul> <li> <p>Whether Easy DKIM signing is enabled or disabled.</p> </li> <li> <p>A set of DKIM tokens that represent the identity. If the identity is an email address, the tokens represent the domain of that address.</p> </li> <li> <p>Whether Amazon SES has successfully verified the DKIM tokens published in the domain's DNS. This information is only returned for domain name identities, not for email addresses.</p> </li> </ul> <p>This operation is throttled at one request per second and can only get DKIM attributes for up to 100 identities at a time.</p> <p>For more information about creating DNS records using DKIM tokens, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identities: JArray (required)
  ##             : A list of one or more verified identities - email addresses, domains, or both.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identities` field"
  var valid_603938 = query.getOrDefault("Identities")
  valid_603938 = validateParameter(valid_603938, JArray, required = true, default = nil)
  if valid_603938 != nil:
    section.add "Identities", valid_603938
  var valid_603939 = query.getOrDefault("Action")
  valid_603939 = validateParameter(valid_603939, JString, required = true, default = newJString(
      "GetIdentityDkimAttributes"))
  if valid_603939 != nil:
    section.add "Action", valid_603939
  var valid_603940 = query.getOrDefault("Version")
  valid_603940 = validateParameter(valid_603940, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603940 != nil:
    section.add "Version", valid_603940
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603941 = header.getOrDefault("X-Amz-Date")
  valid_603941 = validateParameter(valid_603941, JString, required = false,
                                 default = nil)
  if valid_603941 != nil:
    section.add "X-Amz-Date", valid_603941
  var valid_603942 = header.getOrDefault("X-Amz-Security-Token")
  valid_603942 = validateParameter(valid_603942, JString, required = false,
                                 default = nil)
  if valid_603942 != nil:
    section.add "X-Amz-Security-Token", valid_603942
  var valid_603943 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603943 = validateParameter(valid_603943, JString, required = false,
                                 default = nil)
  if valid_603943 != nil:
    section.add "X-Amz-Content-Sha256", valid_603943
  var valid_603944 = header.getOrDefault("X-Amz-Algorithm")
  valid_603944 = validateParameter(valid_603944, JString, required = false,
                                 default = nil)
  if valid_603944 != nil:
    section.add "X-Amz-Algorithm", valid_603944
  var valid_603945 = header.getOrDefault("X-Amz-Signature")
  valid_603945 = validateParameter(valid_603945, JString, required = false,
                                 default = nil)
  if valid_603945 != nil:
    section.add "X-Amz-Signature", valid_603945
  var valid_603946 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603946 = validateParameter(valid_603946, JString, required = false,
                                 default = nil)
  if valid_603946 != nil:
    section.add "X-Amz-SignedHeaders", valid_603946
  var valid_603947 = header.getOrDefault("X-Amz-Credential")
  valid_603947 = validateParameter(valid_603947, JString, required = false,
                                 default = nil)
  if valid_603947 != nil:
    section.add "X-Amz-Credential", valid_603947
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603948: Call_GetGetIdentityDkimAttributes_603935; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the current status of Easy DKIM signing for an entity. For domain name identities, this operation also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES has successfully verified that these tokens have been published.</p> <p>This operation takes a list of identities as input and returns the following information for each:</p> <ul> <li> <p>Whether Easy DKIM signing is enabled or disabled.</p> </li> <li> <p>A set of DKIM tokens that represent the identity. If the identity is an email address, the tokens represent the domain of that address.</p> </li> <li> <p>Whether Amazon SES has successfully verified the DKIM tokens published in the domain's DNS. This information is only returned for domain name identities, not for email addresses.</p> </li> </ul> <p>This operation is throttled at one request per second and can only get DKIM attributes for up to 100 identities at a time.</p> <p>For more information about creating DNS records using DKIM tokens, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_603948.validator(path, query, header, formData, body)
  let scheme = call_603948.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603948.url(scheme.get, call_603948.host, call_603948.base,
                         call_603948.route, valid.getOrDefault("path"))
  result = hook(call_603948, url, valid)

proc call*(call_603949: Call_GetGetIdentityDkimAttributes_603935;
          Identities: JsonNode; Action: string = "GetIdentityDkimAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## getGetIdentityDkimAttributes
  ## <p>Returns the current status of Easy DKIM signing for an entity. For domain name identities, this operation also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES has successfully verified that these tokens have been published.</p> <p>This operation takes a list of identities as input and returns the following information for each:</p> <ul> <li> <p>Whether Easy DKIM signing is enabled or disabled.</p> </li> <li> <p>A set of DKIM tokens that represent the identity. If the identity is an email address, the tokens represent the domain of that address.</p> </li> <li> <p>Whether Amazon SES has successfully verified the DKIM tokens published in the domain's DNS. This information is only returned for domain name identities, not for email addresses.</p> </li> </ul> <p>This operation is throttled at one request per second and can only get DKIM attributes for up to 100 identities at a time.</p> <p>For more information about creating DNS records using DKIM tokens, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html">Amazon SES Developer Guide</a>.</p>
  ##   Identities: JArray (required)
  ##             : A list of one or more verified identities - email addresses, domains, or both.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603950 = newJObject()
  if Identities != nil:
    query_603950.add "Identities", Identities
  add(query_603950, "Action", newJString(Action))
  add(query_603950, "Version", newJString(Version))
  result = call_603949.call(nil, query_603950, nil, nil, nil)

var getGetIdentityDkimAttributes* = Call_GetGetIdentityDkimAttributes_603935(
    name: "getGetIdentityDkimAttributes", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=GetIdentityDkimAttributes",
    validator: validate_GetGetIdentityDkimAttributes_603936, base: "/",
    url: url_GetGetIdentityDkimAttributes_603937,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetIdentityMailFromDomainAttributes_603984 = ref object of OpenApiRestCall_602433
proc url_PostGetIdentityMailFromDomainAttributes_603986(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetIdentityMailFromDomainAttributes_603985(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the custom MAIL FROM attributes for a list of identities (email addresses : domains).</p> <p>This operation is throttled at one request per second and can only get custom MAIL FROM attributes for up to 100 identities at a time.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603987 = query.getOrDefault("Action")
  valid_603987 = validateParameter(valid_603987, JString, required = true, default = newJString(
      "GetIdentityMailFromDomainAttributes"))
  if valid_603987 != nil:
    section.add "Action", valid_603987
  var valid_603988 = query.getOrDefault("Version")
  valid_603988 = validateParameter(valid_603988, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603988 != nil:
    section.add "Version", valid_603988
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603989 = header.getOrDefault("X-Amz-Date")
  valid_603989 = validateParameter(valid_603989, JString, required = false,
                                 default = nil)
  if valid_603989 != nil:
    section.add "X-Amz-Date", valid_603989
  var valid_603990 = header.getOrDefault("X-Amz-Security-Token")
  valid_603990 = validateParameter(valid_603990, JString, required = false,
                                 default = nil)
  if valid_603990 != nil:
    section.add "X-Amz-Security-Token", valid_603990
  var valid_603991 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603991 = validateParameter(valid_603991, JString, required = false,
                                 default = nil)
  if valid_603991 != nil:
    section.add "X-Amz-Content-Sha256", valid_603991
  var valid_603992 = header.getOrDefault("X-Amz-Algorithm")
  valid_603992 = validateParameter(valid_603992, JString, required = false,
                                 default = nil)
  if valid_603992 != nil:
    section.add "X-Amz-Algorithm", valid_603992
  var valid_603993 = header.getOrDefault("X-Amz-Signature")
  valid_603993 = validateParameter(valid_603993, JString, required = false,
                                 default = nil)
  if valid_603993 != nil:
    section.add "X-Amz-Signature", valid_603993
  var valid_603994 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603994 = validateParameter(valid_603994, JString, required = false,
                                 default = nil)
  if valid_603994 != nil:
    section.add "X-Amz-SignedHeaders", valid_603994
  var valid_603995 = header.getOrDefault("X-Amz-Credential")
  valid_603995 = validateParameter(valid_603995, JString, required = false,
                                 default = nil)
  if valid_603995 != nil:
    section.add "X-Amz-Credential", valid_603995
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identities: JArray (required)
  ##             : A list of one or more identities.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identities` field"
  var valid_603996 = formData.getOrDefault("Identities")
  valid_603996 = validateParameter(valid_603996, JArray, required = true, default = nil)
  if valid_603996 != nil:
    section.add "Identities", valid_603996
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603997: Call_PostGetIdentityMailFromDomainAttributes_603984;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the custom MAIL FROM attributes for a list of identities (email addresses : domains).</p> <p>This operation is throttled at one request per second and can only get custom MAIL FROM attributes for up to 100 identities at a time.</p>
  ## 
  let valid = call_603997.validator(path, query, header, formData, body)
  let scheme = call_603997.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603997.url(scheme.get, call_603997.host, call_603997.base,
                         call_603997.route, valid.getOrDefault("path"))
  result = hook(call_603997, url, valid)

proc call*(call_603998: Call_PostGetIdentityMailFromDomainAttributes_603984;
          Identities: JsonNode;
          Action: string = "GetIdentityMailFromDomainAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## postGetIdentityMailFromDomainAttributes
  ## <p>Returns the custom MAIL FROM attributes for a list of identities (email addresses : domains).</p> <p>This operation is throttled at one request per second and can only get custom MAIL FROM attributes for up to 100 identities at a time.</p>
  ##   Identities: JArray (required)
  ##             : A list of one or more identities.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603999 = newJObject()
  var formData_604000 = newJObject()
  if Identities != nil:
    formData_604000.add "Identities", Identities
  add(query_603999, "Action", newJString(Action))
  add(query_603999, "Version", newJString(Version))
  result = call_603998.call(nil, query_603999, nil, formData_604000, nil)

var postGetIdentityMailFromDomainAttributes* = Call_PostGetIdentityMailFromDomainAttributes_603984(
    name: "postGetIdentityMailFromDomainAttributes", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=GetIdentityMailFromDomainAttributes",
    validator: validate_PostGetIdentityMailFromDomainAttributes_603985, base: "/",
    url: url_PostGetIdentityMailFromDomainAttributes_603986,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetIdentityMailFromDomainAttributes_603968 = ref object of OpenApiRestCall_602433
proc url_GetGetIdentityMailFromDomainAttributes_603970(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetIdentityMailFromDomainAttributes_603969(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the custom MAIL FROM attributes for a list of identities (email addresses : domains).</p> <p>This operation is throttled at one request per second and can only get custom MAIL FROM attributes for up to 100 identities at a time.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identities: JArray (required)
  ##             : A list of one or more identities.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identities` field"
  var valid_603971 = query.getOrDefault("Identities")
  valid_603971 = validateParameter(valid_603971, JArray, required = true, default = nil)
  if valid_603971 != nil:
    section.add "Identities", valid_603971
  var valid_603972 = query.getOrDefault("Action")
  valid_603972 = validateParameter(valid_603972, JString, required = true, default = newJString(
      "GetIdentityMailFromDomainAttributes"))
  if valid_603972 != nil:
    section.add "Action", valid_603972
  var valid_603973 = query.getOrDefault("Version")
  valid_603973 = validateParameter(valid_603973, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_603973 != nil:
    section.add "Version", valid_603973
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603974 = header.getOrDefault("X-Amz-Date")
  valid_603974 = validateParameter(valid_603974, JString, required = false,
                                 default = nil)
  if valid_603974 != nil:
    section.add "X-Amz-Date", valid_603974
  var valid_603975 = header.getOrDefault("X-Amz-Security-Token")
  valid_603975 = validateParameter(valid_603975, JString, required = false,
                                 default = nil)
  if valid_603975 != nil:
    section.add "X-Amz-Security-Token", valid_603975
  var valid_603976 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603976 = validateParameter(valid_603976, JString, required = false,
                                 default = nil)
  if valid_603976 != nil:
    section.add "X-Amz-Content-Sha256", valid_603976
  var valid_603977 = header.getOrDefault("X-Amz-Algorithm")
  valid_603977 = validateParameter(valid_603977, JString, required = false,
                                 default = nil)
  if valid_603977 != nil:
    section.add "X-Amz-Algorithm", valid_603977
  var valid_603978 = header.getOrDefault("X-Amz-Signature")
  valid_603978 = validateParameter(valid_603978, JString, required = false,
                                 default = nil)
  if valid_603978 != nil:
    section.add "X-Amz-Signature", valid_603978
  var valid_603979 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603979 = validateParameter(valid_603979, JString, required = false,
                                 default = nil)
  if valid_603979 != nil:
    section.add "X-Amz-SignedHeaders", valid_603979
  var valid_603980 = header.getOrDefault("X-Amz-Credential")
  valid_603980 = validateParameter(valid_603980, JString, required = false,
                                 default = nil)
  if valid_603980 != nil:
    section.add "X-Amz-Credential", valid_603980
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603981: Call_GetGetIdentityMailFromDomainAttributes_603968;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the custom MAIL FROM attributes for a list of identities (email addresses : domains).</p> <p>This operation is throttled at one request per second and can only get custom MAIL FROM attributes for up to 100 identities at a time.</p>
  ## 
  let valid = call_603981.validator(path, query, header, formData, body)
  let scheme = call_603981.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603981.url(scheme.get, call_603981.host, call_603981.base,
                         call_603981.route, valid.getOrDefault("path"))
  result = hook(call_603981, url, valid)

proc call*(call_603982: Call_GetGetIdentityMailFromDomainAttributes_603968;
          Identities: JsonNode;
          Action: string = "GetIdentityMailFromDomainAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## getGetIdentityMailFromDomainAttributes
  ## <p>Returns the custom MAIL FROM attributes for a list of identities (email addresses : domains).</p> <p>This operation is throttled at one request per second and can only get custom MAIL FROM attributes for up to 100 identities at a time.</p>
  ##   Identities: JArray (required)
  ##             : A list of one or more identities.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603983 = newJObject()
  if Identities != nil:
    query_603983.add "Identities", Identities
  add(query_603983, "Action", newJString(Action))
  add(query_603983, "Version", newJString(Version))
  result = call_603982.call(nil, query_603983, nil, nil, nil)

var getGetIdentityMailFromDomainAttributes* = Call_GetGetIdentityMailFromDomainAttributes_603968(
    name: "getGetIdentityMailFromDomainAttributes", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=GetIdentityMailFromDomainAttributes",
    validator: validate_GetGetIdentityMailFromDomainAttributes_603969, base: "/",
    url: url_GetGetIdentityMailFromDomainAttributes_603970,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetIdentityNotificationAttributes_604017 = ref object of OpenApiRestCall_602433
proc url_PostGetIdentityNotificationAttributes_604019(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetIdentityNotificationAttributes_604018(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given a list of verified identities (email addresses and/or domains), returns a structure describing identity notification attributes.</p> <p>This operation is throttled at one request per second and can only get notification attributes for up to 100 identities at a time.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604020 = query.getOrDefault("Action")
  valid_604020 = validateParameter(valid_604020, JString, required = true, default = newJString(
      "GetIdentityNotificationAttributes"))
  if valid_604020 != nil:
    section.add "Action", valid_604020
  var valid_604021 = query.getOrDefault("Version")
  valid_604021 = validateParameter(valid_604021, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604021 != nil:
    section.add "Version", valid_604021
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604022 = header.getOrDefault("X-Amz-Date")
  valid_604022 = validateParameter(valid_604022, JString, required = false,
                                 default = nil)
  if valid_604022 != nil:
    section.add "X-Amz-Date", valid_604022
  var valid_604023 = header.getOrDefault("X-Amz-Security-Token")
  valid_604023 = validateParameter(valid_604023, JString, required = false,
                                 default = nil)
  if valid_604023 != nil:
    section.add "X-Amz-Security-Token", valid_604023
  var valid_604024 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604024 = validateParameter(valid_604024, JString, required = false,
                                 default = nil)
  if valid_604024 != nil:
    section.add "X-Amz-Content-Sha256", valid_604024
  var valid_604025 = header.getOrDefault("X-Amz-Algorithm")
  valid_604025 = validateParameter(valid_604025, JString, required = false,
                                 default = nil)
  if valid_604025 != nil:
    section.add "X-Amz-Algorithm", valid_604025
  var valid_604026 = header.getOrDefault("X-Amz-Signature")
  valid_604026 = validateParameter(valid_604026, JString, required = false,
                                 default = nil)
  if valid_604026 != nil:
    section.add "X-Amz-Signature", valid_604026
  var valid_604027 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604027 = validateParameter(valid_604027, JString, required = false,
                                 default = nil)
  if valid_604027 != nil:
    section.add "X-Amz-SignedHeaders", valid_604027
  var valid_604028 = header.getOrDefault("X-Amz-Credential")
  valid_604028 = validateParameter(valid_604028, JString, required = false,
                                 default = nil)
  if valid_604028 != nil:
    section.add "X-Amz-Credential", valid_604028
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identities: JArray (required)
  ##             : A list of one or more identities. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identities` field"
  var valid_604029 = formData.getOrDefault("Identities")
  valid_604029 = validateParameter(valid_604029, JArray, required = true, default = nil)
  if valid_604029 != nil:
    section.add "Identities", valid_604029
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604030: Call_PostGetIdentityNotificationAttributes_604017;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given a list of verified identities (email addresses and/or domains), returns a structure describing identity notification attributes.</p> <p>This operation is throttled at one request per second and can only get notification attributes for up to 100 identities at a time.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_604030.validator(path, query, header, formData, body)
  let scheme = call_604030.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604030.url(scheme.get, call_604030.host, call_604030.base,
                         call_604030.route, valid.getOrDefault("path"))
  result = hook(call_604030, url, valid)

proc call*(call_604031: Call_PostGetIdentityNotificationAttributes_604017;
          Identities: JsonNode;
          Action: string = "GetIdentityNotificationAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## postGetIdentityNotificationAttributes
  ## <p>Given a list of verified identities (email addresses and/or domains), returns a structure describing identity notification attributes.</p> <p>This operation is throttled at one request per second and can only get notification attributes for up to 100 identities at a time.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Identities: JArray (required)
  ##             : A list of one or more identities. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604032 = newJObject()
  var formData_604033 = newJObject()
  if Identities != nil:
    formData_604033.add "Identities", Identities
  add(query_604032, "Action", newJString(Action))
  add(query_604032, "Version", newJString(Version))
  result = call_604031.call(nil, query_604032, nil, formData_604033, nil)

var postGetIdentityNotificationAttributes* = Call_PostGetIdentityNotificationAttributes_604017(
    name: "postGetIdentityNotificationAttributes", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=GetIdentityNotificationAttributes",
    validator: validate_PostGetIdentityNotificationAttributes_604018, base: "/",
    url: url_PostGetIdentityNotificationAttributes_604019,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetIdentityNotificationAttributes_604001 = ref object of OpenApiRestCall_602433
proc url_GetGetIdentityNotificationAttributes_604003(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetIdentityNotificationAttributes_604002(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given a list of verified identities (email addresses and/or domains), returns a structure describing identity notification attributes.</p> <p>This operation is throttled at one request per second and can only get notification attributes for up to 100 identities at a time.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identities: JArray (required)
  ##             : A list of one or more identities. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identities` field"
  var valid_604004 = query.getOrDefault("Identities")
  valid_604004 = validateParameter(valid_604004, JArray, required = true, default = nil)
  if valid_604004 != nil:
    section.add "Identities", valid_604004
  var valid_604005 = query.getOrDefault("Action")
  valid_604005 = validateParameter(valid_604005, JString, required = true, default = newJString(
      "GetIdentityNotificationAttributes"))
  if valid_604005 != nil:
    section.add "Action", valid_604005
  var valid_604006 = query.getOrDefault("Version")
  valid_604006 = validateParameter(valid_604006, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604006 != nil:
    section.add "Version", valid_604006
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604007 = header.getOrDefault("X-Amz-Date")
  valid_604007 = validateParameter(valid_604007, JString, required = false,
                                 default = nil)
  if valid_604007 != nil:
    section.add "X-Amz-Date", valid_604007
  var valid_604008 = header.getOrDefault("X-Amz-Security-Token")
  valid_604008 = validateParameter(valid_604008, JString, required = false,
                                 default = nil)
  if valid_604008 != nil:
    section.add "X-Amz-Security-Token", valid_604008
  var valid_604009 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604009 = validateParameter(valid_604009, JString, required = false,
                                 default = nil)
  if valid_604009 != nil:
    section.add "X-Amz-Content-Sha256", valid_604009
  var valid_604010 = header.getOrDefault("X-Amz-Algorithm")
  valid_604010 = validateParameter(valid_604010, JString, required = false,
                                 default = nil)
  if valid_604010 != nil:
    section.add "X-Amz-Algorithm", valid_604010
  var valid_604011 = header.getOrDefault("X-Amz-Signature")
  valid_604011 = validateParameter(valid_604011, JString, required = false,
                                 default = nil)
  if valid_604011 != nil:
    section.add "X-Amz-Signature", valid_604011
  var valid_604012 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604012 = validateParameter(valid_604012, JString, required = false,
                                 default = nil)
  if valid_604012 != nil:
    section.add "X-Amz-SignedHeaders", valid_604012
  var valid_604013 = header.getOrDefault("X-Amz-Credential")
  valid_604013 = validateParameter(valid_604013, JString, required = false,
                                 default = nil)
  if valid_604013 != nil:
    section.add "X-Amz-Credential", valid_604013
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604014: Call_GetGetIdentityNotificationAttributes_604001;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given a list of verified identities (email addresses and/or domains), returns a structure describing identity notification attributes.</p> <p>This operation is throttled at one request per second and can only get notification attributes for up to 100 identities at a time.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_604014.validator(path, query, header, formData, body)
  let scheme = call_604014.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604014.url(scheme.get, call_604014.host, call_604014.base,
                         call_604014.route, valid.getOrDefault("path"))
  result = hook(call_604014, url, valid)

proc call*(call_604015: Call_GetGetIdentityNotificationAttributes_604001;
          Identities: JsonNode;
          Action: string = "GetIdentityNotificationAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## getGetIdentityNotificationAttributes
  ## <p>Given a list of verified identities (email addresses and/or domains), returns a structure describing identity notification attributes.</p> <p>This operation is throttled at one request per second and can only get notification attributes for up to 100 identities at a time.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Identities: JArray (required)
  ##             : A list of one or more identities. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604016 = newJObject()
  if Identities != nil:
    query_604016.add "Identities", Identities
  add(query_604016, "Action", newJString(Action))
  add(query_604016, "Version", newJString(Version))
  result = call_604015.call(nil, query_604016, nil, nil, nil)

var getGetIdentityNotificationAttributes* = Call_GetGetIdentityNotificationAttributes_604001(
    name: "getGetIdentityNotificationAttributes", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=GetIdentityNotificationAttributes",
    validator: validate_GetGetIdentityNotificationAttributes_604002, base: "/",
    url: url_GetGetIdentityNotificationAttributes_604003,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetIdentityPolicies_604051 = ref object of OpenApiRestCall_602433
proc url_PostGetIdentityPolicies_604053(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetIdentityPolicies_604052(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604054 = query.getOrDefault("Action")
  valid_604054 = validateParameter(valid_604054, JString, required = true,
                                 default = newJString("GetIdentityPolicies"))
  if valid_604054 != nil:
    section.add "Action", valid_604054
  var valid_604055 = query.getOrDefault("Version")
  valid_604055 = validateParameter(valid_604055, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604055 != nil:
    section.add "Version", valid_604055
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604056 = header.getOrDefault("X-Amz-Date")
  valid_604056 = validateParameter(valid_604056, JString, required = false,
                                 default = nil)
  if valid_604056 != nil:
    section.add "X-Amz-Date", valid_604056
  var valid_604057 = header.getOrDefault("X-Amz-Security-Token")
  valid_604057 = validateParameter(valid_604057, JString, required = false,
                                 default = nil)
  if valid_604057 != nil:
    section.add "X-Amz-Security-Token", valid_604057
  var valid_604058 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604058 = validateParameter(valid_604058, JString, required = false,
                                 default = nil)
  if valid_604058 != nil:
    section.add "X-Amz-Content-Sha256", valid_604058
  var valid_604059 = header.getOrDefault("X-Amz-Algorithm")
  valid_604059 = validateParameter(valid_604059, JString, required = false,
                                 default = nil)
  if valid_604059 != nil:
    section.add "X-Amz-Algorithm", valid_604059
  var valid_604060 = header.getOrDefault("X-Amz-Signature")
  valid_604060 = validateParameter(valid_604060, JString, required = false,
                                 default = nil)
  if valid_604060 != nil:
    section.add "X-Amz-Signature", valid_604060
  var valid_604061 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604061 = validateParameter(valid_604061, JString, required = false,
                                 default = nil)
  if valid_604061 != nil:
    section.add "X-Amz-SignedHeaders", valid_604061
  var valid_604062 = header.getOrDefault("X-Amz-Credential")
  valid_604062 = validateParameter(valid_604062, JString, required = false,
                                 default = nil)
  if valid_604062 != nil:
    section.add "X-Amz-Credential", valid_604062
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyNames: JArray (required)
  ##              : A list of the names of policies to be retrieved. You can retrieve a maximum of 20 policies at a time. If you do not know the names of the policies that are attached to the identity, you can use <code>ListIdentityPolicies</code>.
  ##   Identity: JString (required)
  ##           : <p>The identity for which the policies will be retrieved. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyNames` field"
  var valid_604063 = formData.getOrDefault("PolicyNames")
  valid_604063 = validateParameter(valid_604063, JArray, required = true, default = nil)
  if valid_604063 != nil:
    section.add "PolicyNames", valid_604063
  var valid_604064 = formData.getOrDefault("Identity")
  valid_604064 = validateParameter(valid_604064, JString, required = true,
                                 default = nil)
  if valid_604064 != nil:
    section.add "Identity", valid_604064
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604065: Call_PostGetIdentityPolicies_604051; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604065.validator(path, query, header, formData, body)
  let scheme = call_604065.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604065.url(scheme.get, call_604065.host, call_604065.base,
                         call_604065.route, valid.getOrDefault("path"))
  result = hook(call_604065, url, valid)

proc call*(call_604066: Call_PostGetIdentityPolicies_604051; PolicyNames: JsonNode;
          Identity: string; Action: string = "GetIdentityPolicies";
          Version: string = "2010-12-01"): Recallable =
  ## postGetIdentityPolicies
  ## <p>Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   PolicyNames: JArray (required)
  ##              : A list of the names of policies to be retrieved. You can retrieve a maximum of 20 policies at a time. If you do not know the names of the policies that are attached to the identity, you can use <code>ListIdentityPolicies</code>.
  ##   Identity: string (required)
  ##           : <p>The identity for which the policies will be retrieved. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604067 = newJObject()
  var formData_604068 = newJObject()
  if PolicyNames != nil:
    formData_604068.add "PolicyNames", PolicyNames
  add(formData_604068, "Identity", newJString(Identity))
  add(query_604067, "Action", newJString(Action))
  add(query_604067, "Version", newJString(Version))
  result = call_604066.call(nil, query_604067, nil, formData_604068, nil)

var postGetIdentityPolicies* = Call_PostGetIdentityPolicies_604051(
    name: "postGetIdentityPolicies", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=GetIdentityPolicies",
    validator: validate_PostGetIdentityPolicies_604052, base: "/",
    url: url_PostGetIdentityPolicies_604053, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetIdentityPolicies_604034 = ref object of OpenApiRestCall_602433
proc url_GetGetIdentityPolicies_604036(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetIdentityPolicies_604035(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : <p>The identity for which the policies will be retrieved. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: JString (required)
  ##   PolicyNames: JArray (required)
  ##              : A list of the names of policies to be retrieved. You can retrieve a maximum of 20 policies at a time. If you do not know the names of the policies that are attached to the identity, you can use <code>ListIdentityPolicies</code>.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_604037 = query.getOrDefault("Identity")
  valid_604037 = validateParameter(valid_604037, JString, required = true,
                                 default = nil)
  if valid_604037 != nil:
    section.add "Identity", valid_604037
  var valid_604038 = query.getOrDefault("Action")
  valid_604038 = validateParameter(valid_604038, JString, required = true,
                                 default = newJString("GetIdentityPolicies"))
  if valid_604038 != nil:
    section.add "Action", valid_604038
  var valid_604039 = query.getOrDefault("PolicyNames")
  valid_604039 = validateParameter(valid_604039, JArray, required = true, default = nil)
  if valid_604039 != nil:
    section.add "PolicyNames", valid_604039
  var valid_604040 = query.getOrDefault("Version")
  valid_604040 = validateParameter(valid_604040, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604040 != nil:
    section.add "Version", valid_604040
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604041 = header.getOrDefault("X-Amz-Date")
  valid_604041 = validateParameter(valid_604041, JString, required = false,
                                 default = nil)
  if valid_604041 != nil:
    section.add "X-Amz-Date", valid_604041
  var valid_604042 = header.getOrDefault("X-Amz-Security-Token")
  valid_604042 = validateParameter(valid_604042, JString, required = false,
                                 default = nil)
  if valid_604042 != nil:
    section.add "X-Amz-Security-Token", valid_604042
  var valid_604043 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604043 = validateParameter(valid_604043, JString, required = false,
                                 default = nil)
  if valid_604043 != nil:
    section.add "X-Amz-Content-Sha256", valid_604043
  var valid_604044 = header.getOrDefault("X-Amz-Algorithm")
  valid_604044 = validateParameter(valid_604044, JString, required = false,
                                 default = nil)
  if valid_604044 != nil:
    section.add "X-Amz-Algorithm", valid_604044
  var valid_604045 = header.getOrDefault("X-Amz-Signature")
  valid_604045 = validateParameter(valid_604045, JString, required = false,
                                 default = nil)
  if valid_604045 != nil:
    section.add "X-Amz-Signature", valid_604045
  var valid_604046 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604046 = validateParameter(valid_604046, JString, required = false,
                                 default = nil)
  if valid_604046 != nil:
    section.add "X-Amz-SignedHeaders", valid_604046
  var valid_604047 = header.getOrDefault("X-Amz-Credential")
  valid_604047 = validateParameter(valid_604047, JString, required = false,
                                 default = nil)
  if valid_604047 != nil:
    section.add "X-Amz-Credential", valid_604047
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604048: Call_GetGetIdentityPolicies_604034; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604048.validator(path, query, header, formData, body)
  let scheme = call_604048.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604048.url(scheme.get, call_604048.host, call_604048.base,
                         call_604048.route, valid.getOrDefault("path"))
  result = hook(call_604048, url, valid)

proc call*(call_604049: Call_GetGetIdentityPolicies_604034; Identity: string;
          PolicyNames: JsonNode; Action: string = "GetIdentityPolicies";
          Version: string = "2010-12-01"): Recallable =
  ## getGetIdentityPolicies
  ## <p>Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : <p>The identity for which the policies will be retrieved. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   PolicyNames: JArray (required)
  ##              : A list of the names of policies to be retrieved. You can retrieve a maximum of 20 policies at a time. If you do not know the names of the policies that are attached to the identity, you can use <code>ListIdentityPolicies</code>.
  ##   Version: string (required)
  var query_604050 = newJObject()
  add(query_604050, "Identity", newJString(Identity))
  add(query_604050, "Action", newJString(Action))
  if PolicyNames != nil:
    query_604050.add "PolicyNames", PolicyNames
  add(query_604050, "Version", newJString(Version))
  result = call_604049.call(nil, query_604050, nil, nil, nil)

var getGetIdentityPolicies* = Call_GetGetIdentityPolicies_604034(
    name: "getGetIdentityPolicies", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=GetIdentityPolicies",
    validator: validate_GetGetIdentityPolicies_604035, base: "/",
    url: url_GetGetIdentityPolicies_604036, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetIdentityVerificationAttributes_604085 = ref object of OpenApiRestCall_602433
proc url_PostGetIdentityVerificationAttributes_604087(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetIdentityVerificationAttributes_604086(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given a list of identities (email addresses and/or domains), returns the verification status and (for domain identities) the verification token for each identity.</p> <p>The verification status of an email address is "Pending" until the email address owner clicks the link within the verification email that Amazon SES sent to that address. If the email address owner clicks the link within 24 hours, the verification status of the email address changes to "Success". If the link is not clicked within 24 hours, the verification status changes to "Failed." In that case, if you still want to verify the email address, you must restart the verification process from the beginning.</p> <p>For domain identities, the domain's verification status is "Pending" as Amazon SES searches for the required TXT record in the DNS settings of the domain. When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p> <p>This operation is throttled at one request per second and can only get verification attributes for up to 100 identities at a time.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604088 = query.getOrDefault("Action")
  valid_604088 = validateParameter(valid_604088, JString, required = true, default = newJString(
      "GetIdentityVerificationAttributes"))
  if valid_604088 != nil:
    section.add "Action", valid_604088
  var valid_604089 = query.getOrDefault("Version")
  valid_604089 = validateParameter(valid_604089, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604089 != nil:
    section.add "Version", valid_604089
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604090 = header.getOrDefault("X-Amz-Date")
  valid_604090 = validateParameter(valid_604090, JString, required = false,
                                 default = nil)
  if valid_604090 != nil:
    section.add "X-Amz-Date", valid_604090
  var valid_604091 = header.getOrDefault("X-Amz-Security-Token")
  valid_604091 = validateParameter(valid_604091, JString, required = false,
                                 default = nil)
  if valid_604091 != nil:
    section.add "X-Amz-Security-Token", valid_604091
  var valid_604092 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604092 = validateParameter(valid_604092, JString, required = false,
                                 default = nil)
  if valid_604092 != nil:
    section.add "X-Amz-Content-Sha256", valid_604092
  var valid_604093 = header.getOrDefault("X-Amz-Algorithm")
  valid_604093 = validateParameter(valid_604093, JString, required = false,
                                 default = nil)
  if valid_604093 != nil:
    section.add "X-Amz-Algorithm", valid_604093
  var valid_604094 = header.getOrDefault("X-Amz-Signature")
  valid_604094 = validateParameter(valid_604094, JString, required = false,
                                 default = nil)
  if valid_604094 != nil:
    section.add "X-Amz-Signature", valid_604094
  var valid_604095 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604095 = validateParameter(valid_604095, JString, required = false,
                                 default = nil)
  if valid_604095 != nil:
    section.add "X-Amz-SignedHeaders", valid_604095
  var valid_604096 = header.getOrDefault("X-Amz-Credential")
  valid_604096 = validateParameter(valid_604096, JString, required = false,
                                 default = nil)
  if valid_604096 != nil:
    section.add "X-Amz-Credential", valid_604096
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identities: JArray (required)
  ##             : A list of identities.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identities` field"
  var valid_604097 = formData.getOrDefault("Identities")
  valid_604097 = validateParameter(valid_604097, JArray, required = true, default = nil)
  if valid_604097 != nil:
    section.add "Identities", valid_604097
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604098: Call_PostGetIdentityVerificationAttributes_604085;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given a list of identities (email addresses and/or domains), returns the verification status and (for domain identities) the verification token for each identity.</p> <p>The verification status of an email address is "Pending" until the email address owner clicks the link within the verification email that Amazon SES sent to that address. If the email address owner clicks the link within 24 hours, the verification status of the email address changes to "Success". If the link is not clicked within 24 hours, the verification status changes to "Failed." In that case, if you still want to verify the email address, you must restart the verification process from the beginning.</p> <p>For domain identities, the domain's verification status is "Pending" as Amazon SES searches for the required TXT record in the DNS settings of the domain. When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p> <p>This operation is throttled at one request per second and can only get verification attributes for up to 100 identities at a time.</p>
  ## 
  let valid = call_604098.validator(path, query, header, formData, body)
  let scheme = call_604098.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604098.url(scheme.get, call_604098.host, call_604098.base,
                         call_604098.route, valid.getOrDefault("path"))
  result = hook(call_604098, url, valid)

proc call*(call_604099: Call_PostGetIdentityVerificationAttributes_604085;
          Identities: JsonNode;
          Action: string = "GetIdentityVerificationAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## postGetIdentityVerificationAttributes
  ## <p>Given a list of identities (email addresses and/or domains), returns the verification status and (for domain identities) the verification token for each identity.</p> <p>The verification status of an email address is "Pending" until the email address owner clicks the link within the verification email that Amazon SES sent to that address. If the email address owner clicks the link within 24 hours, the verification status of the email address changes to "Success". If the link is not clicked within 24 hours, the verification status changes to "Failed." In that case, if you still want to verify the email address, you must restart the verification process from the beginning.</p> <p>For domain identities, the domain's verification status is "Pending" as Amazon SES searches for the required TXT record in the DNS settings of the domain. When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p> <p>This operation is throttled at one request per second and can only get verification attributes for up to 100 identities at a time.</p>
  ##   Identities: JArray (required)
  ##             : A list of identities.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604100 = newJObject()
  var formData_604101 = newJObject()
  if Identities != nil:
    formData_604101.add "Identities", Identities
  add(query_604100, "Action", newJString(Action))
  add(query_604100, "Version", newJString(Version))
  result = call_604099.call(nil, query_604100, nil, formData_604101, nil)

var postGetIdentityVerificationAttributes* = Call_PostGetIdentityVerificationAttributes_604085(
    name: "postGetIdentityVerificationAttributes", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=GetIdentityVerificationAttributes",
    validator: validate_PostGetIdentityVerificationAttributes_604086, base: "/",
    url: url_PostGetIdentityVerificationAttributes_604087,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetIdentityVerificationAttributes_604069 = ref object of OpenApiRestCall_602433
proc url_GetGetIdentityVerificationAttributes_604071(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetIdentityVerificationAttributes_604070(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given a list of identities (email addresses and/or domains), returns the verification status and (for domain identities) the verification token for each identity.</p> <p>The verification status of an email address is "Pending" until the email address owner clicks the link within the verification email that Amazon SES sent to that address. If the email address owner clicks the link within 24 hours, the verification status of the email address changes to "Success". If the link is not clicked within 24 hours, the verification status changes to "Failed." In that case, if you still want to verify the email address, you must restart the verification process from the beginning.</p> <p>For domain identities, the domain's verification status is "Pending" as Amazon SES searches for the required TXT record in the DNS settings of the domain. When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p> <p>This operation is throttled at one request per second and can only get verification attributes for up to 100 identities at a time.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identities: JArray (required)
  ##             : A list of identities.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identities` field"
  var valid_604072 = query.getOrDefault("Identities")
  valid_604072 = validateParameter(valid_604072, JArray, required = true, default = nil)
  if valid_604072 != nil:
    section.add "Identities", valid_604072
  var valid_604073 = query.getOrDefault("Action")
  valid_604073 = validateParameter(valid_604073, JString, required = true, default = newJString(
      "GetIdentityVerificationAttributes"))
  if valid_604073 != nil:
    section.add "Action", valid_604073
  var valid_604074 = query.getOrDefault("Version")
  valid_604074 = validateParameter(valid_604074, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604074 != nil:
    section.add "Version", valid_604074
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604075 = header.getOrDefault("X-Amz-Date")
  valid_604075 = validateParameter(valid_604075, JString, required = false,
                                 default = nil)
  if valid_604075 != nil:
    section.add "X-Amz-Date", valid_604075
  var valid_604076 = header.getOrDefault("X-Amz-Security-Token")
  valid_604076 = validateParameter(valid_604076, JString, required = false,
                                 default = nil)
  if valid_604076 != nil:
    section.add "X-Amz-Security-Token", valid_604076
  var valid_604077 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604077 = validateParameter(valid_604077, JString, required = false,
                                 default = nil)
  if valid_604077 != nil:
    section.add "X-Amz-Content-Sha256", valid_604077
  var valid_604078 = header.getOrDefault("X-Amz-Algorithm")
  valid_604078 = validateParameter(valid_604078, JString, required = false,
                                 default = nil)
  if valid_604078 != nil:
    section.add "X-Amz-Algorithm", valid_604078
  var valid_604079 = header.getOrDefault("X-Amz-Signature")
  valid_604079 = validateParameter(valid_604079, JString, required = false,
                                 default = nil)
  if valid_604079 != nil:
    section.add "X-Amz-Signature", valid_604079
  var valid_604080 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604080 = validateParameter(valid_604080, JString, required = false,
                                 default = nil)
  if valid_604080 != nil:
    section.add "X-Amz-SignedHeaders", valid_604080
  var valid_604081 = header.getOrDefault("X-Amz-Credential")
  valid_604081 = validateParameter(valid_604081, JString, required = false,
                                 default = nil)
  if valid_604081 != nil:
    section.add "X-Amz-Credential", valid_604081
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604082: Call_GetGetIdentityVerificationAttributes_604069;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given a list of identities (email addresses and/or domains), returns the verification status and (for domain identities) the verification token for each identity.</p> <p>The verification status of an email address is "Pending" until the email address owner clicks the link within the verification email that Amazon SES sent to that address. If the email address owner clicks the link within 24 hours, the verification status of the email address changes to "Success". If the link is not clicked within 24 hours, the verification status changes to "Failed." In that case, if you still want to verify the email address, you must restart the verification process from the beginning.</p> <p>For domain identities, the domain's verification status is "Pending" as Amazon SES searches for the required TXT record in the DNS settings of the domain. When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p> <p>This operation is throttled at one request per second and can only get verification attributes for up to 100 identities at a time.</p>
  ## 
  let valid = call_604082.validator(path, query, header, formData, body)
  let scheme = call_604082.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604082.url(scheme.get, call_604082.host, call_604082.base,
                         call_604082.route, valid.getOrDefault("path"))
  result = hook(call_604082, url, valid)

proc call*(call_604083: Call_GetGetIdentityVerificationAttributes_604069;
          Identities: JsonNode;
          Action: string = "GetIdentityVerificationAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## getGetIdentityVerificationAttributes
  ## <p>Given a list of identities (email addresses and/or domains), returns the verification status and (for domain identities) the verification token for each identity.</p> <p>The verification status of an email address is "Pending" until the email address owner clicks the link within the verification email that Amazon SES sent to that address. If the email address owner clicks the link within 24 hours, the verification status of the email address changes to "Success". If the link is not clicked within 24 hours, the verification status changes to "Failed." In that case, if you still want to verify the email address, you must restart the verification process from the beginning.</p> <p>For domain identities, the domain's verification status is "Pending" as Amazon SES searches for the required TXT record in the DNS settings of the domain. When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p> <p>This operation is throttled at one request per second and can only get verification attributes for up to 100 identities at a time.</p>
  ##   Identities: JArray (required)
  ##             : A list of identities.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604084 = newJObject()
  if Identities != nil:
    query_604084.add "Identities", Identities
  add(query_604084, "Action", newJString(Action))
  add(query_604084, "Version", newJString(Version))
  result = call_604083.call(nil, query_604084, nil, nil, nil)

var getGetIdentityVerificationAttributes* = Call_GetGetIdentityVerificationAttributes_604069(
    name: "getGetIdentityVerificationAttributes", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=GetIdentityVerificationAttributes",
    validator: validate_GetGetIdentityVerificationAttributes_604070, base: "/",
    url: url_GetGetIdentityVerificationAttributes_604071,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetSendQuota_604117 = ref object of OpenApiRestCall_602433
proc url_PostGetSendQuota_604119(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetSendQuota_604118(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Provides the sending limits for the Amazon SES account. </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604120 = query.getOrDefault("Action")
  valid_604120 = validateParameter(valid_604120, JString, required = true,
                                 default = newJString("GetSendQuota"))
  if valid_604120 != nil:
    section.add "Action", valid_604120
  var valid_604121 = query.getOrDefault("Version")
  valid_604121 = validateParameter(valid_604121, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604121 != nil:
    section.add "Version", valid_604121
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604122 = header.getOrDefault("X-Amz-Date")
  valid_604122 = validateParameter(valid_604122, JString, required = false,
                                 default = nil)
  if valid_604122 != nil:
    section.add "X-Amz-Date", valid_604122
  var valid_604123 = header.getOrDefault("X-Amz-Security-Token")
  valid_604123 = validateParameter(valid_604123, JString, required = false,
                                 default = nil)
  if valid_604123 != nil:
    section.add "X-Amz-Security-Token", valid_604123
  var valid_604124 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604124 = validateParameter(valid_604124, JString, required = false,
                                 default = nil)
  if valid_604124 != nil:
    section.add "X-Amz-Content-Sha256", valid_604124
  var valid_604125 = header.getOrDefault("X-Amz-Algorithm")
  valid_604125 = validateParameter(valid_604125, JString, required = false,
                                 default = nil)
  if valid_604125 != nil:
    section.add "X-Amz-Algorithm", valid_604125
  var valid_604126 = header.getOrDefault("X-Amz-Signature")
  valid_604126 = validateParameter(valid_604126, JString, required = false,
                                 default = nil)
  if valid_604126 != nil:
    section.add "X-Amz-Signature", valid_604126
  var valid_604127 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604127 = validateParameter(valid_604127, JString, required = false,
                                 default = nil)
  if valid_604127 != nil:
    section.add "X-Amz-SignedHeaders", valid_604127
  var valid_604128 = header.getOrDefault("X-Amz-Credential")
  valid_604128 = validateParameter(valid_604128, JString, required = false,
                                 default = nil)
  if valid_604128 != nil:
    section.add "X-Amz-Credential", valid_604128
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604129: Call_PostGetSendQuota_604117; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Provides the sending limits for the Amazon SES account. </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604129.validator(path, query, header, formData, body)
  let scheme = call_604129.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604129.url(scheme.get, call_604129.host, call_604129.base,
                         call_604129.route, valid.getOrDefault("path"))
  result = hook(call_604129, url, valid)

proc call*(call_604130: Call_PostGetSendQuota_604117;
          Action: string = "GetSendQuota"; Version: string = "2010-12-01"): Recallable =
  ## postGetSendQuota
  ## <p>Provides the sending limits for the Amazon SES account. </p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604131 = newJObject()
  add(query_604131, "Action", newJString(Action))
  add(query_604131, "Version", newJString(Version))
  result = call_604130.call(nil, query_604131, nil, nil, nil)

var postGetSendQuota* = Call_PostGetSendQuota_604117(name: "postGetSendQuota",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=GetSendQuota", validator: validate_PostGetSendQuota_604118,
    base: "/", url: url_PostGetSendQuota_604119,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetSendQuota_604102 = ref object of OpenApiRestCall_602433
proc url_GetGetSendQuota_604104(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetSendQuota_604103(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Provides the sending limits for the Amazon SES account. </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604105 = query.getOrDefault("Action")
  valid_604105 = validateParameter(valid_604105, JString, required = true,
                                 default = newJString("GetSendQuota"))
  if valid_604105 != nil:
    section.add "Action", valid_604105
  var valid_604106 = query.getOrDefault("Version")
  valid_604106 = validateParameter(valid_604106, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604106 != nil:
    section.add "Version", valid_604106
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604107 = header.getOrDefault("X-Amz-Date")
  valid_604107 = validateParameter(valid_604107, JString, required = false,
                                 default = nil)
  if valid_604107 != nil:
    section.add "X-Amz-Date", valid_604107
  var valid_604108 = header.getOrDefault("X-Amz-Security-Token")
  valid_604108 = validateParameter(valid_604108, JString, required = false,
                                 default = nil)
  if valid_604108 != nil:
    section.add "X-Amz-Security-Token", valid_604108
  var valid_604109 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604109 = validateParameter(valid_604109, JString, required = false,
                                 default = nil)
  if valid_604109 != nil:
    section.add "X-Amz-Content-Sha256", valid_604109
  var valid_604110 = header.getOrDefault("X-Amz-Algorithm")
  valid_604110 = validateParameter(valid_604110, JString, required = false,
                                 default = nil)
  if valid_604110 != nil:
    section.add "X-Amz-Algorithm", valid_604110
  var valid_604111 = header.getOrDefault("X-Amz-Signature")
  valid_604111 = validateParameter(valid_604111, JString, required = false,
                                 default = nil)
  if valid_604111 != nil:
    section.add "X-Amz-Signature", valid_604111
  var valid_604112 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604112 = validateParameter(valid_604112, JString, required = false,
                                 default = nil)
  if valid_604112 != nil:
    section.add "X-Amz-SignedHeaders", valid_604112
  var valid_604113 = header.getOrDefault("X-Amz-Credential")
  valid_604113 = validateParameter(valid_604113, JString, required = false,
                                 default = nil)
  if valid_604113 != nil:
    section.add "X-Amz-Credential", valid_604113
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604114: Call_GetGetSendQuota_604102; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Provides the sending limits for the Amazon SES account. </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604114.validator(path, query, header, formData, body)
  let scheme = call_604114.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604114.url(scheme.get, call_604114.host, call_604114.base,
                         call_604114.route, valid.getOrDefault("path"))
  result = hook(call_604114, url, valid)

proc call*(call_604115: Call_GetGetSendQuota_604102;
          Action: string = "GetSendQuota"; Version: string = "2010-12-01"): Recallable =
  ## getGetSendQuota
  ## <p>Provides the sending limits for the Amazon SES account. </p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604116 = newJObject()
  add(query_604116, "Action", newJString(Action))
  add(query_604116, "Version", newJString(Version))
  result = call_604115.call(nil, query_604116, nil, nil, nil)

var getGetSendQuota* = Call_GetGetSendQuota_604102(name: "getGetSendQuota",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=GetSendQuota", validator: validate_GetGetSendQuota_604103,
    base: "/", url: url_GetGetSendQuota_604104, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetSendStatistics_604147 = ref object of OpenApiRestCall_602433
proc url_PostGetSendStatistics_604149(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetSendStatistics_604148(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Provides sending statistics for the current AWS Region. The result is a list of data points, representing the last two weeks of sending activity. Each data point in the list contains statistics for a 15-minute period of time.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604150 = query.getOrDefault("Action")
  valid_604150 = validateParameter(valid_604150, JString, required = true,
                                 default = newJString("GetSendStatistics"))
  if valid_604150 != nil:
    section.add "Action", valid_604150
  var valid_604151 = query.getOrDefault("Version")
  valid_604151 = validateParameter(valid_604151, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604151 != nil:
    section.add "Version", valid_604151
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604152 = header.getOrDefault("X-Amz-Date")
  valid_604152 = validateParameter(valid_604152, JString, required = false,
                                 default = nil)
  if valid_604152 != nil:
    section.add "X-Amz-Date", valid_604152
  var valid_604153 = header.getOrDefault("X-Amz-Security-Token")
  valid_604153 = validateParameter(valid_604153, JString, required = false,
                                 default = nil)
  if valid_604153 != nil:
    section.add "X-Amz-Security-Token", valid_604153
  var valid_604154 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604154 = validateParameter(valid_604154, JString, required = false,
                                 default = nil)
  if valid_604154 != nil:
    section.add "X-Amz-Content-Sha256", valid_604154
  var valid_604155 = header.getOrDefault("X-Amz-Algorithm")
  valid_604155 = validateParameter(valid_604155, JString, required = false,
                                 default = nil)
  if valid_604155 != nil:
    section.add "X-Amz-Algorithm", valid_604155
  var valid_604156 = header.getOrDefault("X-Amz-Signature")
  valid_604156 = validateParameter(valid_604156, JString, required = false,
                                 default = nil)
  if valid_604156 != nil:
    section.add "X-Amz-Signature", valid_604156
  var valid_604157 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604157 = validateParameter(valid_604157, JString, required = false,
                                 default = nil)
  if valid_604157 != nil:
    section.add "X-Amz-SignedHeaders", valid_604157
  var valid_604158 = header.getOrDefault("X-Amz-Credential")
  valid_604158 = validateParameter(valid_604158, JString, required = false,
                                 default = nil)
  if valid_604158 != nil:
    section.add "X-Amz-Credential", valid_604158
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604159: Call_PostGetSendStatistics_604147; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Provides sending statistics for the current AWS Region. The result is a list of data points, representing the last two weeks of sending activity. Each data point in the list contains statistics for a 15-minute period of time.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604159.validator(path, query, header, formData, body)
  let scheme = call_604159.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604159.url(scheme.get, call_604159.host, call_604159.base,
                         call_604159.route, valid.getOrDefault("path"))
  result = hook(call_604159, url, valid)

proc call*(call_604160: Call_PostGetSendStatistics_604147;
          Action: string = "GetSendStatistics"; Version: string = "2010-12-01"): Recallable =
  ## postGetSendStatistics
  ## <p>Provides sending statistics for the current AWS Region. The result is a list of data points, representing the last two weeks of sending activity. Each data point in the list contains statistics for a 15-minute period of time.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604161 = newJObject()
  add(query_604161, "Action", newJString(Action))
  add(query_604161, "Version", newJString(Version))
  result = call_604160.call(nil, query_604161, nil, nil, nil)

var postGetSendStatistics* = Call_PostGetSendStatistics_604147(
    name: "postGetSendStatistics", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=GetSendStatistics",
    validator: validate_PostGetSendStatistics_604148, base: "/",
    url: url_PostGetSendStatistics_604149, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetSendStatistics_604132 = ref object of OpenApiRestCall_602433
proc url_GetGetSendStatistics_604134(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetSendStatistics_604133(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Provides sending statistics for the current AWS Region. The result is a list of data points, representing the last two weeks of sending activity. Each data point in the list contains statistics for a 15-minute period of time.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604135 = query.getOrDefault("Action")
  valid_604135 = validateParameter(valid_604135, JString, required = true,
                                 default = newJString("GetSendStatistics"))
  if valid_604135 != nil:
    section.add "Action", valid_604135
  var valid_604136 = query.getOrDefault("Version")
  valid_604136 = validateParameter(valid_604136, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604136 != nil:
    section.add "Version", valid_604136
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604137 = header.getOrDefault("X-Amz-Date")
  valid_604137 = validateParameter(valid_604137, JString, required = false,
                                 default = nil)
  if valid_604137 != nil:
    section.add "X-Amz-Date", valid_604137
  var valid_604138 = header.getOrDefault("X-Amz-Security-Token")
  valid_604138 = validateParameter(valid_604138, JString, required = false,
                                 default = nil)
  if valid_604138 != nil:
    section.add "X-Amz-Security-Token", valid_604138
  var valid_604139 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604139 = validateParameter(valid_604139, JString, required = false,
                                 default = nil)
  if valid_604139 != nil:
    section.add "X-Amz-Content-Sha256", valid_604139
  var valid_604140 = header.getOrDefault("X-Amz-Algorithm")
  valid_604140 = validateParameter(valid_604140, JString, required = false,
                                 default = nil)
  if valid_604140 != nil:
    section.add "X-Amz-Algorithm", valid_604140
  var valid_604141 = header.getOrDefault("X-Amz-Signature")
  valid_604141 = validateParameter(valid_604141, JString, required = false,
                                 default = nil)
  if valid_604141 != nil:
    section.add "X-Amz-Signature", valid_604141
  var valid_604142 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604142 = validateParameter(valid_604142, JString, required = false,
                                 default = nil)
  if valid_604142 != nil:
    section.add "X-Amz-SignedHeaders", valid_604142
  var valid_604143 = header.getOrDefault("X-Amz-Credential")
  valid_604143 = validateParameter(valid_604143, JString, required = false,
                                 default = nil)
  if valid_604143 != nil:
    section.add "X-Amz-Credential", valid_604143
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604144: Call_GetGetSendStatistics_604132; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Provides sending statistics for the current AWS Region. The result is a list of data points, representing the last two weeks of sending activity. Each data point in the list contains statistics for a 15-minute period of time.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604144.validator(path, query, header, formData, body)
  let scheme = call_604144.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604144.url(scheme.get, call_604144.host, call_604144.base,
                         call_604144.route, valid.getOrDefault("path"))
  result = hook(call_604144, url, valid)

proc call*(call_604145: Call_GetGetSendStatistics_604132;
          Action: string = "GetSendStatistics"; Version: string = "2010-12-01"): Recallable =
  ## getGetSendStatistics
  ## <p>Provides sending statistics for the current AWS Region. The result is a list of data points, representing the last two weeks of sending activity. Each data point in the list contains statistics for a 15-minute period of time.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604146 = newJObject()
  add(query_604146, "Action", newJString(Action))
  add(query_604146, "Version", newJString(Version))
  result = call_604145.call(nil, query_604146, nil, nil, nil)

var getGetSendStatistics* = Call_GetGetSendStatistics_604132(
    name: "getGetSendStatistics", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=GetSendStatistics",
    validator: validate_GetGetSendStatistics_604133, base: "/",
    url: url_GetGetSendStatistics_604134, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetTemplate_604178 = ref object of OpenApiRestCall_602433
proc url_PostGetTemplate_604180(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetTemplate_604179(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Displays the template object (which includes the Subject line, HTML part and text part) for the template you specify.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604181 = query.getOrDefault("Action")
  valid_604181 = validateParameter(valid_604181, JString, required = true,
                                 default = newJString("GetTemplate"))
  if valid_604181 != nil:
    section.add "Action", valid_604181
  var valid_604182 = query.getOrDefault("Version")
  valid_604182 = validateParameter(valid_604182, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604182 != nil:
    section.add "Version", valid_604182
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604183 = header.getOrDefault("X-Amz-Date")
  valid_604183 = validateParameter(valid_604183, JString, required = false,
                                 default = nil)
  if valid_604183 != nil:
    section.add "X-Amz-Date", valid_604183
  var valid_604184 = header.getOrDefault("X-Amz-Security-Token")
  valid_604184 = validateParameter(valid_604184, JString, required = false,
                                 default = nil)
  if valid_604184 != nil:
    section.add "X-Amz-Security-Token", valid_604184
  var valid_604185 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604185 = validateParameter(valid_604185, JString, required = false,
                                 default = nil)
  if valid_604185 != nil:
    section.add "X-Amz-Content-Sha256", valid_604185
  var valid_604186 = header.getOrDefault("X-Amz-Algorithm")
  valid_604186 = validateParameter(valid_604186, JString, required = false,
                                 default = nil)
  if valid_604186 != nil:
    section.add "X-Amz-Algorithm", valid_604186
  var valid_604187 = header.getOrDefault("X-Amz-Signature")
  valid_604187 = validateParameter(valid_604187, JString, required = false,
                                 default = nil)
  if valid_604187 != nil:
    section.add "X-Amz-Signature", valid_604187
  var valid_604188 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604188 = validateParameter(valid_604188, JString, required = false,
                                 default = nil)
  if valid_604188 != nil:
    section.add "X-Amz-SignedHeaders", valid_604188
  var valid_604189 = header.getOrDefault("X-Amz-Credential")
  valid_604189 = validateParameter(valid_604189, JString, required = false,
                                 default = nil)
  if valid_604189 != nil:
    section.add "X-Amz-Credential", valid_604189
  result.add "header", section
  ## parameters in `formData` object:
  ##   TemplateName: JString (required)
  ##               : The name of the template you want to retrieve.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TemplateName` field"
  var valid_604190 = formData.getOrDefault("TemplateName")
  valid_604190 = validateParameter(valid_604190, JString, required = true,
                                 default = nil)
  if valid_604190 != nil:
    section.add "TemplateName", valid_604190
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604191: Call_PostGetTemplate_604178; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Displays the template object (which includes the Subject line, HTML part and text part) for the template you specify.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604191.validator(path, query, header, formData, body)
  let scheme = call_604191.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604191.url(scheme.get, call_604191.host, call_604191.base,
                         call_604191.route, valid.getOrDefault("path"))
  result = hook(call_604191, url, valid)

proc call*(call_604192: Call_PostGetTemplate_604178; TemplateName: string;
          Action: string = "GetTemplate"; Version: string = "2010-12-01"): Recallable =
  ## postGetTemplate
  ## <p>Displays the template object (which includes the Subject line, HTML part and text part) for the template you specify.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the template you want to retrieve.
  ##   Version: string (required)
  var query_604193 = newJObject()
  var formData_604194 = newJObject()
  add(query_604193, "Action", newJString(Action))
  add(formData_604194, "TemplateName", newJString(TemplateName))
  add(query_604193, "Version", newJString(Version))
  result = call_604192.call(nil, query_604193, nil, formData_604194, nil)

var postGetTemplate* = Call_PostGetTemplate_604178(name: "postGetTemplate",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=GetTemplate", validator: validate_PostGetTemplate_604179,
    base: "/", url: url_PostGetTemplate_604180, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetTemplate_604162 = ref object of OpenApiRestCall_602433
proc url_GetGetTemplate_604164(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetTemplate_604163(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Displays the template object (which includes the Subject line, HTML part and text part) for the template you specify.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the template you want to retrieve.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604165 = query.getOrDefault("Action")
  valid_604165 = validateParameter(valid_604165, JString, required = true,
                                 default = newJString("GetTemplate"))
  if valid_604165 != nil:
    section.add "Action", valid_604165
  var valid_604166 = query.getOrDefault("TemplateName")
  valid_604166 = validateParameter(valid_604166, JString, required = true,
                                 default = nil)
  if valid_604166 != nil:
    section.add "TemplateName", valid_604166
  var valid_604167 = query.getOrDefault("Version")
  valid_604167 = validateParameter(valid_604167, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604167 != nil:
    section.add "Version", valid_604167
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604168 = header.getOrDefault("X-Amz-Date")
  valid_604168 = validateParameter(valid_604168, JString, required = false,
                                 default = nil)
  if valid_604168 != nil:
    section.add "X-Amz-Date", valid_604168
  var valid_604169 = header.getOrDefault("X-Amz-Security-Token")
  valid_604169 = validateParameter(valid_604169, JString, required = false,
                                 default = nil)
  if valid_604169 != nil:
    section.add "X-Amz-Security-Token", valid_604169
  var valid_604170 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604170 = validateParameter(valid_604170, JString, required = false,
                                 default = nil)
  if valid_604170 != nil:
    section.add "X-Amz-Content-Sha256", valid_604170
  var valid_604171 = header.getOrDefault("X-Amz-Algorithm")
  valid_604171 = validateParameter(valid_604171, JString, required = false,
                                 default = nil)
  if valid_604171 != nil:
    section.add "X-Amz-Algorithm", valid_604171
  var valid_604172 = header.getOrDefault("X-Amz-Signature")
  valid_604172 = validateParameter(valid_604172, JString, required = false,
                                 default = nil)
  if valid_604172 != nil:
    section.add "X-Amz-Signature", valid_604172
  var valid_604173 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604173 = validateParameter(valid_604173, JString, required = false,
                                 default = nil)
  if valid_604173 != nil:
    section.add "X-Amz-SignedHeaders", valid_604173
  var valid_604174 = header.getOrDefault("X-Amz-Credential")
  valid_604174 = validateParameter(valid_604174, JString, required = false,
                                 default = nil)
  if valid_604174 != nil:
    section.add "X-Amz-Credential", valid_604174
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604175: Call_GetGetTemplate_604162; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Displays the template object (which includes the Subject line, HTML part and text part) for the template you specify.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604175.validator(path, query, header, formData, body)
  let scheme = call_604175.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604175.url(scheme.get, call_604175.host, call_604175.base,
                         call_604175.route, valid.getOrDefault("path"))
  result = hook(call_604175, url, valid)

proc call*(call_604176: Call_GetGetTemplate_604162; TemplateName: string;
          Action: string = "GetTemplate"; Version: string = "2010-12-01"): Recallable =
  ## getGetTemplate
  ## <p>Displays the template object (which includes the Subject line, HTML part and text part) for the template you specify.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the template you want to retrieve.
  ##   Version: string (required)
  var query_604177 = newJObject()
  add(query_604177, "Action", newJString(Action))
  add(query_604177, "TemplateName", newJString(TemplateName))
  add(query_604177, "Version", newJString(Version))
  result = call_604176.call(nil, query_604177, nil, nil, nil)

var getGetTemplate* = Call_GetGetTemplate_604162(name: "getGetTemplate",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=GetTemplate", validator: validate_GetGetTemplate_604163,
    base: "/", url: url_GetGetTemplate_604164, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListConfigurationSets_604212 = ref object of OpenApiRestCall_602433
proc url_PostListConfigurationSets_604214(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListConfigurationSets_604213(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Provides a list of the configuration sets associated with your Amazon SES account in the current AWS Region. For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second. This operation will return up to 1,000 configuration sets each time it is run. If your Amazon SES account has more than 1,000 configuration sets, this operation will also return a NextToken element. You can then execute the <code>ListConfigurationSets</code> operation again, passing the <code>NextToken</code> parameter and the value of the NextToken element to retrieve additional results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604215 = query.getOrDefault("Action")
  valid_604215 = validateParameter(valid_604215, JString, required = true,
                                 default = newJString("ListConfigurationSets"))
  if valid_604215 != nil:
    section.add "Action", valid_604215
  var valid_604216 = query.getOrDefault("Version")
  valid_604216 = validateParameter(valid_604216, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604216 != nil:
    section.add "Version", valid_604216
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604217 = header.getOrDefault("X-Amz-Date")
  valid_604217 = validateParameter(valid_604217, JString, required = false,
                                 default = nil)
  if valid_604217 != nil:
    section.add "X-Amz-Date", valid_604217
  var valid_604218 = header.getOrDefault("X-Amz-Security-Token")
  valid_604218 = validateParameter(valid_604218, JString, required = false,
                                 default = nil)
  if valid_604218 != nil:
    section.add "X-Amz-Security-Token", valid_604218
  var valid_604219 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604219 = validateParameter(valid_604219, JString, required = false,
                                 default = nil)
  if valid_604219 != nil:
    section.add "X-Amz-Content-Sha256", valid_604219
  var valid_604220 = header.getOrDefault("X-Amz-Algorithm")
  valid_604220 = validateParameter(valid_604220, JString, required = false,
                                 default = nil)
  if valid_604220 != nil:
    section.add "X-Amz-Algorithm", valid_604220
  var valid_604221 = header.getOrDefault("X-Amz-Signature")
  valid_604221 = validateParameter(valid_604221, JString, required = false,
                                 default = nil)
  if valid_604221 != nil:
    section.add "X-Amz-Signature", valid_604221
  var valid_604222 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604222 = validateParameter(valid_604222, JString, required = false,
                                 default = nil)
  if valid_604222 != nil:
    section.add "X-Amz-SignedHeaders", valid_604222
  var valid_604223 = header.getOrDefault("X-Amz-Credential")
  valid_604223 = validateParameter(valid_604223, JString, required = false,
                                 default = nil)
  if valid_604223 != nil:
    section.add "X-Amz-Credential", valid_604223
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : A token returned from a previous call to <code>ListConfigurationSets</code> to indicate the position of the configuration set in the configuration set list.
  ##   MaxItems: JInt
  ##           : The number of configuration sets to return.
  section = newJObject()
  var valid_604224 = formData.getOrDefault("NextToken")
  valid_604224 = validateParameter(valid_604224, JString, required = false,
                                 default = nil)
  if valid_604224 != nil:
    section.add "NextToken", valid_604224
  var valid_604225 = formData.getOrDefault("MaxItems")
  valid_604225 = validateParameter(valid_604225, JInt, required = false, default = nil)
  if valid_604225 != nil:
    section.add "MaxItems", valid_604225
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604226: Call_PostListConfigurationSets_604212; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Provides a list of the configuration sets associated with your Amazon SES account in the current AWS Region. For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second. This operation will return up to 1,000 configuration sets each time it is run. If your Amazon SES account has more than 1,000 configuration sets, this operation will also return a NextToken element. You can then execute the <code>ListConfigurationSets</code> operation again, passing the <code>NextToken</code> parameter and the value of the NextToken element to retrieve additional results.</p>
  ## 
  let valid = call_604226.validator(path, query, header, formData, body)
  let scheme = call_604226.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604226.url(scheme.get, call_604226.host, call_604226.base,
                         call_604226.route, valid.getOrDefault("path"))
  result = hook(call_604226, url, valid)

proc call*(call_604227: Call_PostListConfigurationSets_604212;
          NextToken: string = ""; Action: string = "ListConfigurationSets";
          MaxItems: int = 0; Version: string = "2010-12-01"): Recallable =
  ## postListConfigurationSets
  ## <p>Provides a list of the configuration sets associated with your Amazon SES account in the current AWS Region. For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second. This operation will return up to 1,000 configuration sets each time it is run. If your Amazon SES account has more than 1,000 configuration sets, this operation will also return a NextToken element. You can then execute the <code>ListConfigurationSets</code> operation again, passing the <code>NextToken</code> parameter and the value of the NextToken element to retrieve additional results.</p>
  ##   NextToken: string
  ##            : A token returned from a previous call to <code>ListConfigurationSets</code> to indicate the position of the configuration set in the configuration set list.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : The number of configuration sets to return.
  ##   Version: string (required)
  var query_604228 = newJObject()
  var formData_604229 = newJObject()
  add(formData_604229, "NextToken", newJString(NextToken))
  add(query_604228, "Action", newJString(Action))
  add(formData_604229, "MaxItems", newJInt(MaxItems))
  add(query_604228, "Version", newJString(Version))
  result = call_604227.call(nil, query_604228, nil, formData_604229, nil)

var postListConfigurationSets* = Call_PostListConfigurationSets_604212(
    name: "postListConfigurationSets", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ListConfigurationSets",
    validator: validate_PostListConfigurationSets_604213, base: "/",
    url: url_PostListConfigurationSets_604214,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListConfigurationSets_604195 = ref object of OpenApiRestCall_602433
proc url_GetListConfigurationSets_604197(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListConfigurationSets_604196(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Provides a list of the configuration sets associated with your Amazon SES account in the current AWS Region. For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second. This operation will return up to 1,000 configuration sets each time it is run. If your Amazon SES account has more than 1,000 configuration sets, this operation will also return a NextToken element. You can then execute the <code>ListConfigurationSets</code> operation again, passing the <code>NextToken</code> parameter and the value of the NextToken element to retrieve additional results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : A token returned from a previous call to <code>ListConfigurationSets</code> to indicate the position of the configuration set in the configuration set list.
  ##   Action: JString (required)
  ##   MaxItems: JInt
  ##           : The number of configuration sets to return.
  ##   Version: JString (required)
  section = newJObject()
  var valid_604198 = query.getOrDefault("NextToken")
  valid_604198 = validateParameter(valid_604198, JString, required = false,
                                 default = nil)
  if valid_604198 != nil:
    section.add "NextToken", valid_604198
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604199 = query.getOrDefault("Action")
  valid_604199 = validateParameter(valid_604199, JString, required = true,
                                 default = newJString("ListConfigurationSets"))
  if valid_604199 != nil:
    section.add "Action", valid_604199
  var valid_604200 = query.getOrDefault("MaxItems")
  valid_604200 = validateParameter(valid_604200, JInt, required = false, default = nil)
  if valid_604200 != nil:
    section.add "MaxItems", valid_604200
  var valid_604201 = query.getOrDefault("Version")
  valid_604201 = validateParameter(valid_604201, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604201 != nil:
    section.add "Version", valid_604201
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604202 = header.getOrDefault("X-Amz-Date")
  valid_604202 = validateParameter(valid_604202, JString, required = false,
                                 default = nil)
  if valid_604202 != nil:
    section.add "X-Amz-Date", valid_604202
  var valid_604203 = header.getOrDefault("X-Amz-Security-Token")
  valid_604203 = validateParameter(valid_604203, JString, required = false,
                                 default = nil)
  if valid_604203 != nil:
    section.add "X-Amz-Security-Token", valid_604203
  var valid_604204 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604204 = validateParameter(valid_604204, JString, required = false,
                                 default = nil)
  if valid_604204 != nil:
    section.add "X-Amz-Content-Sha256", valid_604204
  var valid_604205 = header.getOrDefault("X-Amz-Algorithm")
  valid_604205 = validateParameter(valid_604205, JString, required = false,
                                 default = nil)
  if valid_604205 != nil:
    section.add "X-Amz-Algorithm", valid_604205
  var valid_604206 = header.getOrDefault("X-Amz-Signature")
  valid_604206 = validateParameter(valid_604206, JString, required = false,
                                 default = nil)
  if valid_604206 != nil:
    section.add "X-Amz-Signature", valid_604206
  var valid_604207 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604207 = validateParameter(valid_604207, JString, required = false,
                                 default = nil)
  if valid_604207 != nil:
    section.add "X-Amz-SignedHeaders", valid_604207
  var valid_604208 = header.getOrDefault("X-Amz-Credential")
  valid_604208 = validateParameter(valid_604208, JString, required = false,
                                 default = nil)
  if valid_604208 != nil:
    section.add "X-Amz-Credential", valid_604208
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604209: Call_GetListConfigurationSets_604195; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Provides a list of the configuration sets associated with your Amazon SES account in the current AWS Region. For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second. This operation will return up to 1,000 configuration sets each time it is run. If your Amazon SES account has more than 1,000 configuration sets, this operation will also return a NextToken element. You can then execute the <code>ListConfigurationSets</code> operation again, passing the <code>NextToken</code> parameter and the value of the NextToken element to retrieve additional results.</p>
  ## 
  let valid = call_604209.validator(path, query, header, formData, body)
  let scheme = call_604209.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604209.url(scheme.get, call_604209.host, call_604209.base,
                         call_604209.route, valid.getOrDefault("path"))
  result = hook(call_604209, url, valid)

proc call*(call_604210: Call_GetListConfigurationSets_604195;
          NextToken: string = ""; Action: string = "ListConfigurationSets";
          MaxItems: int = 0; Version: string = "2010-12-01"): Recallable =
  ## getListConfigurationSets
  ## <p>Provides a list of the configuration sets associated with your Amazon SES account in the current AWS Region. For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second. This operation will return up to 1,000 configuration sets each time it is run. If your Amazon SES account has more than 1,000 configuration sets, this operation will also return a NextToken element. You can then execute the <code>ListConfigurationSets</code> operation again, passing the <code>NextToken</code> parameter and the value of the NextToken element to retrieve additional results.</p>
  ##   NextToken: string
  ##            : A token returned from a previous call to <code>ListConfigurationSets</code> to indicate the position of the configuration set in the configuration set list.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : The number of configuration sets to return.
  ##   Version: string (required)
  var query_604211 = newJObject()
  add(query_604211, "NextToken", newJString(NextToken))
  add(query_604211, "Action", newJString(Action))
  add(query_604211, "MaxItems", newJInt(MaxItems))
  add(query_604211, "Version", newJString(Version))
  result = call_604210.call(nil, query_604211, nil, nil, nil)

var getListConfigurationSets* = Call_GetListConfigurationSets_604195(
    name: "getListConfigurationSets", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=ListConfigurationSets",
    validator: validate_GetListConfigurationSets_604196, base: "/",
    url: url_GetListConfigurationSets_604197, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListCustomVerificationEmailTemplates_604247 = ref object of OpenApiRestCall_602433
proc url_PostListCustomVerificationEmailTemplates_604249(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListCustomVerificationEmailTemplates_604248(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the existing custom verification email templates for your account in the current AWS Region.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604250 = query.getOrDefault("Action")
  valid_604250 = validateParameter(valid_604250, JString, required = true, default = newJString(
      "ListCustomVerificationEmailTemplates"))
  if valid_604250 != nil:
    section.add "Action", valid_604250
  var valid_604251 = query.getOrDefault("Version")
  valid_604251 = validateParameter(valid_604251, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604251 != nil:
    section.add "Version", valid_604251
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604252 = header.getOrDefault("X-Amz-Date")
  valid_604252 = validateParameter(valid_604252, JString, required = false,
                                 default = nil)
  if valid_604252 != nil:
    section.add "X-Amz-Date", valid_604252
  var valid_604253 = header.getOrDefault("X-Amz-Security-Token")
  valid_604253 = validateParameter(valid_604253, JString, required = false,
                                 default = nil)
  if valid_604253 != nil:
    section.add "X-Amz-Security-Token", valid_604253
  var valid_604254 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604254 = validateParameter(valid_604254, JString, required = false,
                                 default = nil)
  if valid_604254 != nil:
    section.add "X-Amz-Content-Sha256", valid_604254
  var valid_604255 = header.getOrDefault("X-Amz-Algorithm")
  valid_604255 = validateParameter(valid_604255, JString, required = false,
                                 default = nil)
  if valid_604255 != nil:
    section.add "X-Amz-Algorithm", valid_604255
  var valid_604256 = header.getOrDefault("X-Amz-Signature")
  valid_604256 = validateParameter(valid_604256, JString, required = false,
                                 default = nil)
  if valid_604256 != nil:
    section.add "X-Amz-Signature", valid_604256
  var valid_604257 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604257 = validateParameter(valid_604257, JString, required = false,
                                 default = nil)
  if valid_604257 != nil:
    section.add "X-Amz-SignedHeaders", valid_604257
  var valid_604258 = header.getOrDefault("X-Amz-Credential")
  valid_604258 = validateParameter(valid_604258, JString, required = false,
                                 default = nil)
  if valid_604258 != nil:
    section.add "X-Amz-Credential", valid_604258
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : An array the contains the name and creation time stamp for each template in your Amazon SES account.
  ##   MaxResults: JInt
  ##             : The maximum number of custom verification email templates to return. This value must be at least 1 and less than or equal to 50. If you do not specify a value, or if you specify a value less than 1 or greater than 50, the operation will return up to 50 results.
  section = newJObject()
  var valid_604259 = formData.getOrDefault("NextToken")
  valid_604259 = validateParameter(valid_604259, JString, required = false,
                                 default = nil)
  if valid_604259 != nil:
    section.add "NextToken", valid_604259
  var valid_604260 = formData.getOrDefault("MaxResults")
  valid_604260 = validateParameter(valid_604260, JInt, required = false, default = nil)
  if valid_604260 != nil:
    section.add "MaxResults", valid_604260
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604261: Call_PostListCustomVerificationEmailTemplates_604247;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Lists the existing custom verification email templates for your account in the current AWS Region.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604261.validator(path, query, header, formData, body)
  let scheme = call_604261.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604261.url(scheme.get, call_604261.host, call_604261.base,
                         call_604261.route, valid.getOrDefault("path"))
  result = hook(call_604261, url, valid)

proc call*(call_604262: Call_PostListCustomVerificationEmailTemplates_604247;
          NextToken: string = ""; MaxResults: int = 0;
          Action: string = "ListCustomVerificationEmailTemplates";
          Version: string = "2010-12-01"): Recallable =
  ## postListCustomVerificationEmailTemplates
  ## <p>Lists the existing custom verification email templates for your account in the current AWS Region.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : An array the contains the name and creation time stamp for each template in your Amazon SES account.
  ##   MaxResults: int
  ##             : The maximum number of custom verification email templates to return. This value must be at least 1 and less than or equal to 50. If you do not specify a value, or if you specify a value less than 1 or greater than 50, the operation will return up to 50 results.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604263 = newJObject()
  var formData_604264 = newJObject()
  add(formData_604264, "NextToken", newJString(NextToken))
  add(formData_604264, "MaxResults", newJInt(MaxResults))
  add(query_604263, "Action", newJString(Action))
  add(query_604263, "Version", newJString(Version))
  result = call_604262.call(nil, query_604263, nil, formData_604264, nil)

var postListCustomVerificationEmailTemplates* = Call_PostListCustomVerificationEmailTemplates_604247(
    name: "postListCustomVerificationEmailTemplates", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=ListCustomVerificationEmailTemplates",
    validator: validate_PostListCustomVerificationEmailTemplates_604248,
    base: "/", url: url_PostListCustomVerificationEmailTemplates_604249,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListCustomVerificationEmailTemplates_604230 = ref object of OpenApiRestCall_602433
proc url_GetListCustomVerificationEmailTemplates_604232(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListCustomVerificationEmailTemplates_604231(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the existing custom verification email templates for your account in the current AWS Region.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : An array the contains the name and creation time stamp for each template in your Amazon SES account.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxResults: JInt
  ##             : The maximum number of custom verification email templates to return. This value must be at least 1 and less than or equal to 50. If you do not specify a value, or if you specify a value less than 1 or greater than 50, the operation will return up to 50 results.
  section = newJObject()
  var valid_604233 = query.getOrDefault("NextToken")
  valid_604233 = validateParameter(valid_604233, JString, required = false,
                                 default = nil)
  if valid_604233 != nil:
    section.add "NextToken", valid_604233
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604234 = query.getOrDefault("Action")
  valid_604234 = validateParameter(valid_604234, JString, required = true, default = newJString(
      "ListCustomVerificationEmailTemplates"))
  if valid_604234 != nil:
    section.add "Action", valid_604234
  var valid_604235 = query.getOrDefault("Version")
  valid_604235 = validateParameter(valid_604235, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604235 != nil:
    section.add "Version", valid_604235
  var valid_604236 = query.getOrDefault("MaxResults")
  valid_604236 = validateParameter(valid_604236, JInt, required = false, default = nil)
  if valid_604236 != nil:
    section.add "MaxResults", valid_604236
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604237 = header.getOrDefault("X-Amz-Date")
  valid_604237 = validateParameter(valid_604237, JString, required = false,
                                 default = nil)
  if valid_604237 != nil:
    section.add "X-Amz-Date", valid_604237
  var valid_604238 = header.getOrDefault("X-Amz-Security-Token")
  valid_604238 = validateParameter(valid_604238, JString, required = false,
                                 default = nil)
  if valid_604238 != nil:
    section.add "X-Amz-Security-Token", valid_604238
  var valid_604239 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604239 = validateParameter(valid_604239, JString, required = false,
                                 default = nil)
  if valid_604239 != nil:
    section.add "X-Amz-Content-Sha256", valid_604239
  var valid_604240 = header.getOrDefault("X-Amz-Algorithm")
  valid_604240 = validateParameter(valid_604240, JString, required = false,
                                 default = nil)
  if valid_604240 != nil:
    section.add "X-Amz-Algorithm", valid_604240
  var valid_604241 = header.getOrDefault("X-Amz-Signature")
  valid_604241 = validateParameter(valid_604241, JString, required = false,
                                 default = nil)
  if valid_604241 != nil:
    section.add "X-Amz-Signature", valid_604241
  var valid_604242 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604242 = validateParameter(valid_604242, JString, required = false,
                                 default = nil)
  if valid_604242 != nil:
    section.add "X-Amz-SignedHeaders", valid_604242
  var valid_604243 = header.getOrDefault("X-Amz-Credential")
  valid_604243 = validateParameter(valid_604243, JString, required = false,
                                 default = nil)
  if valid_604243 != nil:
    section.add "X-Amz-Credential", valid_604243
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604244: Call_GetListCustomVerificationEmailTemplates_604230;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Lists the existing custom verification email templates for your account in the current AWS Region.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604244.validator(path, query, header, formData, body)
  let scheme = call_604244.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604244.url(scheme.get, call_604244.host, call_604244.base,
                         call_604244.route, valid.getOrDefault("path"))
  result = hook(call_604244, url, valid)

proc call*(call_604245: Call_GetListCustomVerificationEmailTemplates_604230;
          NextToken: string = "";
          Action: string = "ListCustomVerificationEmailTemplates";
          Version: string = "2010-12-01"; MaxResults: int = 0): Recallable =
  ## getListCustomVerificationEmailTemplates
  ## <p>Lists the existing custom verification email templates for your account in the current AWS Region.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : An array the contains the name and creation time stamp for each template in your Amazon SES account.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxResults: int
  ##             : The maximum number of custom verification email templates to return. This value must be at least 1 and less than or equal to 50. If you do not specify a value, or if you specify a value less than 1 or greater than 50, the operation will return up to 50 results.
  var query_604246 = newJObject()
  add(query_604246, "NextToken", newJString(NextToken))
  add(query_604246, "Action", newJString(Action))
  add(query_604246, "Version", newJString(Version))
  add(query_604246, "MaxResults", newJInt(MaxResults))
  result = call_604245.call(nil, query_604246, nil, nil, nil)

var getListCustomVerificationEmailTemplates* = Call_GetListCustomVerificationEmailTemplates_604230(
    name: "getListCustomVerificationEmailTemplates", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=ListCustomVerificationEmailTemplates",
    validator: validate_GetListCustomVerificationEmailTemplates_604231, base: "/",
    url: url_GetListCustomVerificationEmailTemplates_604232,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListIdentities_604283 = ref object of OpenApiRestCall_602433
proc url_PostListIdentities_604285(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListIdentities_604284(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Returns a list containing all of the identities (email addresses and domains) for your AWS account in the current AWS Region, regardless of verification status.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604286 = query.getOrDefault("Action")
  valid_604286 = validateParameter(valid_604286, JString, required = true,
                                 default = newJString("ListIdentities"))
  if valid_604286 != nil:
    section.add "Action", valid_604286
  var valid_604287 = query.getOrDefault("Version")
  valid_604287 = validateParameter(valid_604287, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604287 != nil:
    section.add "Version", valid_604287
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604288 = header.getOrDefault("X-Amz-Date")
  valid_604288 = validateParameter(valid_604288, JString, required = false,
                                 default = nil)
  if valid_604288 != nil:
    section.add "X-Amz-Date", valid_604288
  var valid_604289 = header.getOrDefault("X-Amz-Security-Token")
  valid_604289 = validateParameter(valid_604289, JString, required = false,
                                 default = nil)
  if valid_604289 != nil:
    section.add "X-Amz-Security-Token", valid_604289
  var valid_604290 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604290 = validateParameter(valid_604290, JString, required = false,
                                 default = nil)
  if valid_604290 != nil:
    section.add "X-Amz-Content-Sha256", valid_604290
  var valid_604291 = header.getOrDefault("X-Amz-Algorithm")
  valid_604291 = validateParameter(valid_604291, JString, required = false,
                                 default = nil)
  if valid_604291 != nil:
    section.add "X-Amz-Algorithm", valid_604291
  var valid_604292 = header.getOrDefault("X-Amz-Signature")
  valid_604292 = validateParameter(valid_604292, JString, required = false,
                                 default = nil)
  if valid_604292 != nil:
    section.add "X-Amz-Signature", valid_604292
  var valid_604293 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604293 = validateParameter(valid_604293, JString, required = false,
                                 default = nil)
  if valid_604293 != nil:
    section.add "X-Amz-SignedHeaders", valid_604293
  var valid_604294 = header.getOrDefault("X-Amz-Credential")
  valid_604294 = validateParameter(valid_604294, JString, required = false,
                                 default = nil)
  if valid_604294 != nil:
    section.add "X-Amz-Credential", valid_604294
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : The token to use for pagination.
  ##   IdentityType: JString
  ##               : The type of the identities to list. Possible values are "EmailAddress" and "Domain". If this parameter is omitted, then all identities will be listed.
  ##   MaxItems: JInt
  ##           : The maximum number of identities per page. Possible values are 1-1000 inclusive.
  section = newJObject()
  var valid_604295 = formData.getOrDefault("NextToken")
  valid_604295 = validateParameter(valid_604295, JString, required = false,
                                 default = nil)
  if valid_604295 != nil:
    section.add "NextToken", valid_604295
  var valid_604296 = formData.getOrDefault("IdentityType")
  valid_604296 = validateParameter(valid_604296, JString, required = false,
                                 default = newJString("EmailAddress"))
  if valid_604296 != nil:
    section.add "IdentityType", valid_604296
  var valid_604297 = formData.getOrDefault("MaxItems")
  valid_604297 = validateParameter(valid_604297, JInt, required = false, default = nil)
  if valid_604297 != nil:
    section.add "MaxItems", valid_604297
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604298: Call_PostListIdentities_604283; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list containing all of the identities (email addresses and domains) for your AWS account in the current AWS Region, regardless of verification status.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604298.validator(path, query, header, formData, body)
  let scheme = call_604298.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604298.url(scheme.get, call_604298.host, call_604298.base,
                         call_604298.route, valid.getOrDefault("path"))
  result = hook(call_604298, url, valid)

proc call*(call_604299: Call_PostListIdentities_604283; NextToken: string = "";
          IdentityType: string = "EmailAddress"; Action: string = "ListIdentities";
          MaxItems: int = 0; Version: string = "2010-12-01"): Recallable =
  ## postListIdentities
  ## <p>Returns a list containing all of the identities (email addresses and domains) for your AWS account in the current AWS Region, regardless of verification status.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : The token to use for pagination.
  ##   IdentityType: string
  ##               : The type of the identities to list. Possible values are "EmailAddress" and "Domain". If this parameter is omitted, then all identities will be listed.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : The maximum number of identities per page. Possible values are 1-1000 inclusive.
  ##   Version: string (required)
  var query_604300 = newJObject()
  var formData_604301 = newJObject()
  add(formData_604301, "NextToken", newJString(NextToken))
  add(formData_604301, "IdentityType", newJString(IdentityType))
  add(query_604300, "Action", newJString(Action))
  add(formData_604301, "MaxItems", newJInt(MaxItems))
  add(query_604300, "Version", newJString(Version))
  result = call_604299.call(nil, query_604300, nil, formData_604301, nil)

var postListIdentities* = Call_PostListIdentities_604283(
    name: "postListIdentities", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ListIdentities",
    validator: validate_PostListIdentities_604284, base: "/",
    url: url_PostListIdentities_604285, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListIdentities_604265 = ref object of OpenApiRestCall_602433
proc url_GetListIdentities_604267(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListIdentities_604266(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Returns a list containing all of the identities (email addresses and domains) for your AWS account in the current AWS Region, regardless of verification status.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : The token to use for pagination.
  ##   Action: JString (required)
  ##   IdentityType: JString
  ##               : The type of the identities to list. Possible values are "EmailAddress" and "Domain". If this parameter is omitted, then all identities will be listed.
  ##   MaxItems: JInt
  ##           : The maximum number of identities per page. Possible values are 1-1000 inclusive.
  ##   Version: JString (required)
  section = newJObject()
  var valid_604268 = query.getOrDefault("NextToken")
  valid_604268 = validateParameter(valid_604268, JString, required = false,
                                 default = nil)
  if valid_604268 != nil:
    section.add "NextToken", valid_604268
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604269 = query.getOrDefault("Action")
  valid_604269 = validateParameter(valid_604269, JString, required = true,
                                 default = newJString("ListIdentities"))
  if valid_604269 != nil:
    section.add "Action", valid_604269
  var valid_604270 = query.getOrDefault("IdentityType")
  valid_604270 = validateParameter(valid_604270, JString, required = false,
                                 default = newJString("EmailAddress"))
  if valid_604270 != nil:
    section.add "IdentityType", valid_604270
  var valid_604271 = query.getOrDefault("MaxItems")
  valid_604271 = validateParameter(valid_604271, JInt, required = false, default = nil)
  if valid_604271 != nil:
    section.add "MaxItems", valid_604271
  var valid_604272 = query.getOrDefault("Version")
  valid_604272 = validateParameter(valid_604272, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604272 != nil:
    section.add "Version", valid_604272
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604273 = header.getOrDefault("X-Amz-Date")
  valid_604273 = validateParameter(valid_604273, JString, required = false,
                                 default = nil)
  if valid_604273 != nil:
    section.add "X-Amz-Date", valid_604273
  var valid_604274 = header.getOrDefault("X-Amz-Security-Token")
  valid_604274 = validateParameter(valid_604274, JString, required = false,
                                 default = nil)
  if valid_604274 != nil:
    section.add "X-Amz-Security-Token", valid_604274
  var valid_604275 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604275 = validateParameter(valid_604275, JString, required = false,
                                 default = nil)
  if valid_604275 != nil:
    section.add "X-Amz-Content-Sha256", valid_604275
  var valid_604276 = header.getOrDefault("X-Amz-Algorithm")
  valid_604276 = validateParameter(valid_604276, JString, required = false,
                                 default = nil)
  if valid_604276 != nil:
    section.add "X-Amz-Algorithm", valid_604276
  var valid_604277 = header.getOrDefault("X-Amz-Signature")
  valid_604277 = validateParameter(valid_604277, JString, required = false,
                                 default = nil)
  if valid_604277 != nil:
    section.add "X-Amz-Signature", valid_604277
  var valid_604278 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604278 = validateParameter(valid_604278, JString, required = false,
                                 default = nil)
  if valid_604278 != nil:
    section.add "X-Amz-SignedHeaders", valid_604278
  var valid_604279 = header.getOrDefault("X-Amz-Credential")
  valid_604279 = validateParameter(valid_604279, JString, required = false,
                                 default = nil)
  if valid_604279 != nil:
    section.add "X-Amz-Credential", valid_604279
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604280: Call_GetListIdentities_604265; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list containing all of the identities (email addresses and domains) for your AWS account in the current AWS Region, regardless of verification status.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604280.validator(path, query, header, formData, body)
  let scheme = call_604280.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604280.url(scheme.get, call_604280.host, call_604280.base,
                         call_604280.route, valid.getOrDefault("path"))
  result = hook(call_604280, url, valid)

proc call*(call_604281: Call_GetListIdentities_604265; NextToken: string = "";
          Action: string = "ListIdentities"; IdentityType: string = "EmailAddress";
          MaxItems: int = 0; Version: string = "2010-12-01"): Recallable =
  ## getListIdentities
  ## <p>Returns a list containing all of the identities (email addresses and domains) for your AWS account in the current AWS Region, regardless of verification status.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : The token to use for pagination.
  ##   Action: string (required)
  ##   IdentityType: string
  ##               : The type of the identities to list. Possible values are "EmailAddress" and "Domain". If this parameter is omitted, then all identities will be listed.
  ##   MaxItems: int
  ##           : The maximum number of identities per page. Possible values are 1-1000 inclusive.
  ##   Version: string (required)
  var query_604282 = newJObject()
  add(query_604282, "NextToken", newJString(NextToken))
  add(query_604282, "Action", newJString(Action))
  add(query_604282, "IdentityType", newJString(IdentityType))
  add(query_604282, "MaxItems", newJInt(MaxItems))
  add(query_604282, "Version", newJString(Version))
  result = call_604281.call(nil, query_604282, nil, nil, nil)

var getListIdentities* = Call_GetListIdentities_604265(name: "getListIdentities",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=ListIdentities", validator: validate_GetListIdentities_604266,
    base: "/", url: url_GetListIdentities_604267,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListIdentityPolicies_604318 = ref object of OpenApiRestCall_602433
proc url_PostListIdentityPolicies_604320(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListIdentityPolicies_604319(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of sending authorization policies that are attached to the given identity (an email address or a domain). This API returns only a list. If you want the actual policy content, you can use <code>GetIdentityPolicies</code>.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604321 = query.getOrDefault("Action")
  valid_604321 = validateParameter(valid_604321, JString, required = true,
                                 default = newJString("ListIdentityPolicies"))
  if valid_604321 != nil:
    section.add "Action", valid_604321
  var valid_604322 = query.getOrDefault("Version")
  valid_604322 = validateParameter(valid_604322, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604322 != nil:
    section.add "Version", valid_604322
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604323 = header.getOrDefault("X-Amz-Date")
  valid_604323 = validateParameter(valid_604323, JString, required = false,
                                 default = nil)
  if valid_604323 != nil:
    section.add "X-Amz-Date", valid_604323
  var valid_604324 = header.getOrDefault("X-Amz-Security-Token")
  valid_604324 = validateParameter(valid_604324, JString, required = false,
                                 default = nil)
  if valid_604324 != nil:
    section.add "X-Amz-Security-Token", valid_604324
  var valid_604325 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604325 = validateParameter(valid_604325, JString, required = false,
                                 default = nil)
  if valid_604325 != nil:
    section.add "X-Amz-Content-Sha256", valid_604325
  var valid_604326 = header.getOrDefault("X-Amz-Algorithm")
  valid_604326 = validateParameter(valid_604326, JString, required = false,
                                 default = nil)
  if valid_604326 != nil:
    section.add "X-Amz-Algorithm", valid_604326
  var valid_604327 = header.getOrDefault("X-Amz-Signature")
  valid_604327 = validateParameter(valid_604327, JString, required = false,
                                 default = nil)
  if valid_604327 != nil:
    section.add "X-Amz-Signature", valid_604327
  var valid_604328 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604328 = validateParameter(valid_604328, JString, required = false,
                                 default = nil)
  if valid_604328 != nil:
    section.add "X-Amz-SignedHeaders", valid_604328
  var valid_604329 = header.getOrDefault("X-Amz-Credential")
  valid_604329 = validateParameter(valid_604329, JString, required = false,
                                 default = nil)
  if valid_604329 != nil:
    section.add "X-Amz-Credential", valid_604329
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identity: JString (required)
  ##           : <p>The identity that is associated with the policy for which the policies will be listed. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identity` field"
  var valid_604330 = formData.getOrDefault("Identity")
  valid_604330 = validateParameter(valid_604330, JString, required = true,
                                 default = nil)
  if valid_604330 != nil:
    section.add "Identity", valid_604330
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604331: Call_PostListIdentityPolicies_604318; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list of sending authorization policies that are attached to the given identity (an email address or a domain). This API returns only a list. If you want the actual policy content, you can use <code>GetIdentityPolicies</code>.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604331.validator(path, query, header, formData, body)
  let scheme = call_604331.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604331.url(scheme.get, call_604331.host, call_604331.base,
                         call_604331.route, valid.getOrDefault("path"))
  result = hook(call_604331, url, valid)

proc call*(call_604332: Call_PostListIdentityPolicies_604318; Identity: string;
          Action: string = "ListIdentityPolicies"; Version: string = "2010-12-01"): Recallable =
  ## postListIdentityPolicies
  ## <p>Returns a list of sending authorization policies that are attached to the given identity (an email address or a domain). This API returns only a list. If you want the actual policy content, you can use <code>GetIdentityPolicies</code>.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : <p>The identity that is associated with the policy for which the policies will be listed. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604333 = newJObject()
  var formData_604334 = newJObject()
  add(formData_604334, "Identity", newJString(Identity))
  add(query_604333, "Action", newJString(Action))
  add(query_604333, "Version", newJString(Version))
  result = call_604332.call(nil, query_604333, nil, formData_604334, nil)

var postListIdentityPolicies* = Call_PostListIdentityPolicies_604318(
    name: "postListIdentityPolicies", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ListIdentityPolicies",
    validator: validate_PostListIdentityPolicies_604319, base: "/",
    url: url_PostListIdentityPolicies_604320, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListIdentityPolicies_604302 = ref object of OpenApiRestCall_602433
proc url_GetListIdentityPolicies_604304(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListIdentityPolicies_604303(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of sending authorization policies that are attached to the given identity (an email address or a domain). This API returns only a list. If you want the actual policy content, you can use <code>GetIdentityPolicies</code>.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : <p>The identity that is associated with the policy for which the policies will be listed. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_604305 = query.getOrDefault("Identity")
  valid_604305 = validateParameter(valid_604305, JString, required = true,
                                 default = nil)
  if valid_604305 != nil:
    section.add "Identity", valid_604305
  var valid_604306 = query.getOrDefault("Action")
  valid_604306 = validateParameter(valid_604306, JString, required = true,
                                 default = newJString("ListIdentityPolicies"))
  if valid_604306 != nil:
    section.add "Action", valid_604306
  var valid_604307 = query.getOrDefault("Version")
  valid_604307 = validateParameter(valid_604307, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604307 != nil:
    section.add "Version", valid_604307
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604308 = header.getOrDefault("X-Amz-Date")
  valid_604308 = validateParameter(valid_604308, JString, required = false,
                                 default = nil)
  if valid_604308 != nil:
    section.add "X-Amz-Date", valid_604308
  var valid_604309 = header.getOrDefault("X-Amz-Security-Token")
  valid_604309 = validateParameter(valid_604309, JString, required = false,
                                 default = nil)
  if valid_604309 != nil:
    section.add "X-Amz-Security-Token", valid_604309
  var valid_604310 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604310 = validateParameter(valid_604310, JString, required = false,
                                 default = nil)
  if valid_604310 != nil:
    section.add "X-Amz-Content-Sha256", valid_604310
  var valid_604311 = header.getOrDefault("X-Amz-Algorithm")
  valid_604311 = validateParameter(valid_604311, JString, required = false,
                                 default = nil)
  if valid_604311 != nil:
    section.add "X-Amz-Algorithm", valid_604311
  var valid_604312 = header.getOrDefault("X-Amz-Signature")
  valid_604312 = validateParameter(valid_604312, JString, required = false,
                                 default = nil)
  if valid_604312 != nil:
    section.add "X-Amz-Signature", valid_604312
  var valid_604313 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604313 = validateParameter(valid_604313, JString, required = false,
                                 default = nil)
  if valid_604313 != nil:
    section.add "X-Amz-SignedHeaders", valid_604313
  var valid_604314 = header.getOrDefault("X-Amz-Credential")
  valid_604314 = validateParameter(valid_604314, JString, required = false,
                                 default = nil)
  if valid_604314 != nil:
    section.add "X-Amz-Credential", valid_604314
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604315: Call_GetListIdentityPolicies_604302; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list of sending authorization policies that are attached to the given identity (an email address or a domain). This API returns only a list. If you want the actual policy content, you can use <code>GetIdentityPolicies</code>.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604315.validator(path, query, header, formData, body)
  let scheme = call_604315.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604315.url(scheme.get, call_604315.host, call_604315.base,
                         call_604315.route, valid.getOrDefault("path"))
  result = hook(call_604315, url, valid)

proc call*(call_604316: Call_GetListIdentityPolicies_604302; Identity: string;
          Action: string = "ListIdentityPolicies"; Version: string = "2010-12-01"): Recallable =
  ## getListIdentityPolicies
  ## <p>Returns a list of sending authorization policies that are attached to the given identity (an email address or a domain). This API returns only a list. If you want the actual policy content, you can use <code>GetIdentityPolicies</code>.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : <p>The identity that is associated with the policy for which the policies will be listed. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604317 = newJObject()
  add(query_604317, "Identity", newJString(Identity))
  add(query_604317, "Action", newJString(Action))
  add(query_604317, "Version", newJString(Version))
  result = call_604316.call(nil, query_604317, nil, nil, nil)

var getListIdentityPolicies* = Call_GetListIdentityPolicies_604302(
    name: "getListIdentityPolicies", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=ListIdentityPolicies",
    validator: validate_GetListIdentityPolicies_604303, base: "/",
    url: url_GetListIdentityPolicies_604304, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListReceiptFilters_604350 = ref object of OpenApiRestCall_602433
proc url_PostListReceiptFilters_604352(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListReceiptFilters_604351(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IP address filters associated with your AWS account in the current AWS Region.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604353 = query.getOrDefault("Action")
  valid_604353 = validateParameter(valid_604353, JString, required = true,
                                 default = newJString("ListReceiptFilters"))
  if valid_604353 != nil:
    section.add "Action", valid_604353
  var valid_604354 = query.getOrDefault("Version")
  valid_604354 = validateParameter(valid_604354, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604354 != nil:
    section.add "Version", valid_604354
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604355 = header.getOrDefault("X-Amz-Date")
  valid_604355 = validateParameter(valid_604355, JString, required = false,
                                 default = nil)
  if valid_604355 != nil:
    section.add "X-Amz-Date", valid_604355
  var valid_604356 = header.getOrDefault("X-Amz-Security-Token")
  valid_604356 = validateParameter(valid_604356, JString, required = false,
                                 default = nil)
  if valid_604356 != nil:
    section.add "X-Amz-Security-Token", valid_604356
  var valid_604357 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604357 = validateParameter(valid_604357, JString, required = false,
                                 default = nil)
  if valid_604357 != nil:
    section.add "X-Amz-Content-Sha256", valid_604357
  var valid_604358 = header.getOrDefault("X-Amz-Algorithm")
  valid_604358 = validateParameter(valid_604358, JString, required = false,
                                 default = nil)
  if valid_604358 != nil:
    section.add "X-Amz-Algorithm", valid_604358
  var valid_604359 = header.getOrDefault("X-Amz-Signature")
  valid_604359 = validateParameter(valid_604359, JString, required = false,
                                 default = nil)
  if valid_604359 != nil:
    section.add "X-Amz-Signature", valid_604359
  var valid_604360 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604360 = validateParameter(valid_604360, JString, required = false,
                                 default = nil)
  if valid_604360 != nil:
    section.add "X-Amz-SignedHeaders", valid_604360
  var valid_604361 = header.getOrDefault("X-Amz-Credential")
  valid_604361 = validateParameter(valid_604361, JString, required = false,
                                 default = nil)
  if valid_604361 != nil:
    section.add "X-Amz-Credential", valid_604361
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604362: Call_PostListReceiptFilters_604350; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IP address filters associated with your AWS account in the current AWS Region.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604362.validator(path, query, header, formData, body)
  let scheme = call_604362.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604362.url(scheme.get, call_604362.host, call_604362.base,
                         call_604362.route, valid.getOrDefault("path"))
  result = hook(call_604362, url, valid)

proc call*(call_604363: Call_PostListReceiptFilters_604350;
          Action: string = "ListReceiptFilters"; Version: string = "2010-12-01"): Recallable =
  ## postListReceiptFilters
  ## <p>Lists the IP address filters associated with your AWS account in the current AWS Region.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604364 = newJObject()
  add(query_604364, "Action", newJString(Action))
  add(query_604364, "Version", newJString(Version))
  result = call_604363.call(nil, query_604364, nil, nil, nil)

var postListReceiptFilters* = Call_PostListReceiptFilters_604350(
    name: "postListReceiptFilters", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ListReceiptFilters",
    validator: validate_PostListReceiptFilters_604351, base: "/",
    url: url_PostListReceiptFilters_604352, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListReceiptFilters_604335 = ref object of OpenApiRestCall_602433
proc url_GetListReceiptFilters_604337(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListReceiptFilters_604336(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IP address filters associated with your AWS account in the current AWS Region.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604338 = query.getOrDefault("Action")
  valid_604338 = validateParameter(valid_604338, JString, required = true,
                                 default = newJString("ListReceiptFilters"))
  if valid_604338 != nil:
    section.add "Action", valid_604338
  var valid_604339 = query.getOrDefault("Version")
  valid_604339 = validateParameter(valid_604339, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604339 != nil:
    section.add "Version", valid_604339
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604340 = header.getOrDefault("X-Amz-Date")
  valid_604340 = validateParameter(valid_604340, JString, required = false,
                                 default = nil)
  if valid_604340 != nil:
    section.add "X-Amz-Date", valid_604340
  var valid_604341 = header.getOrDefault("X-Amz-Security-Token")
  valid_604341 = validateParameter(valid_604341, JString, required = false,
                                 default = nil)
  if valid_604341 != nil:
    section.add "X-Amz-Security-Token", valid_604341
  var valid_604342 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604342 = validateParameter(valid_604342, JString, required = false,
                                 default = nil)
  if valid_604342 != nil:
    section.add "X-Amz-Content-Sha256", valid_604342
  var valid_604343 = header.getOrDefault("X-Amz-Algorithm")
  valid_604343 = validateParameter(valid_604343, JString, required = false,
                                 default = nil)
  if valid_604343 != nil:
    section.add "X-Amz-Algorithm", valid_604343
  var valid_604344 = header.getOrDefault("X-Amz-Signature")
  valid_604344 = validateParameter(valid_604344, JString, required = false,
                                 default = nil)
  if valid_604344 != nil:
    section.add "X-Amz-Signature", valid_604344
  var valid_604345 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604345 = validateParameter(valid_604345, JString, required = false,
                                 default = nil)
  if valid_604345 != nil:
    section.add "X-Amz-SignedHeaders", valid_604345
  var valid_604346 = header.getOrDefault("X-Amz-Credential")
  valid_604346 = validateParameter(valid_604346, JString, required = false,
                                 default = nil)
  if valid_604346 != nil:
    section.add "X-Amz-Credential", valid_604346
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604347: Call_GetListReceiptFilters_604335; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IP address filters associated with your AWS account in the current AWS Region.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604347.validator(path, query, header, formData, body)
  let scheme = call_604347.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604347.url(scheme.get, call_604347.host, call_604347.base,
                         call_604347.route, valid.getOrDefault("path"))
  result = hook(call_604347, url, valid)

proc call*(call_604348: Call_GetListReceiptFilters_604335;
          Action: string = "ListReceiptFilters"; Version: string = "2010-12-01"): Recallable =
  ## getListReceiptFilters
  ## <p>Lists the IP address filters associated with your AWS account in the current AWS Region.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604349 = newJObject()
  add(query_604349, "Action", newJString(Action))
  add(query_604349, "Version", newJString(Version))
  result = call_604348.call(nil, query_604349, nil, nil, nil)

var getListReceiptFilters* = Call_GetListReceiptFilters_604335(
    name: "getListReceiptFilters", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=ListReceiptFilters",
    validator: validate_GetListReceiptFilters_604336, base: "/",
    url: url_GetListReceiptFilters_604337, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListReceiptRuleSets_604381 = ref object of OpenApiRestCall_602433
proc url_PostListReceiptRuleSets_604383(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListReceiptRuleSets_604382(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the receipt rule sets that exist under your AWS account in the current AWS Region. If there are additional receipt rule sets to be retrieved, you will receive a <code>NextToken</code> that you can provide to the next call to <code>ListReceiptRuleSets</code> to retrieve the additional entries.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604384 = query.getOrDefault("Action")
  valid_604384 = validateParameter(valid_604384, JString, required = true,
                                 default = newJString("ListReceiptRuleSets"))
  if valid_604384 != nil:
    section.add "Action", valid_604384
  var valid_604385 = query.getOrDefault("Version")
  valid_604385 = validateParameter(valid_604385, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604385 != nil:
    section.add "Version", valid_604385
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604386 = header.getOrDefault("X-Amz-Date")
  valid_604386 = validateParameter(valid_604386, JString, required = false,
                                 default = nil)
  if valid_604386 != nil:
    section.add "X-Amz-Date", valid_604386
  var valid_604387 = header.getOrDefault("X-Amz-Security-Token")
  valid_604387 = validateParameter(valid_604387, JString, required = false,
                                 default = nil)
  if valid_604387 != nil:
    section.add "X-Amz-Security-Token", valid_604387
  var valid_604388 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604388 = validateParameter(valid_604388, JString, required = false,
                                 default = nil)
  if valid_604388 != nil:
    section.add "X-Amz-Content-Sha256", valid_604388
  var valid_604389 = header.getOrDefault("X-Amz-Algorithm")
  valid_604389 = validateParameter(valid_604389, JString, required = false,
                                 default = nil)
  if valid_604389 != nil:
    section.add "X-Amz-Algorithm", valid_604389
  var valid_604390 = header.getOrDefault("X-Amz-Signature")
  valid_604390 = validateParameter(valid_604390, JString, required = false,
                                 default = nil)
  if valid_604390 != nil:
    section.add "X-Amz-Signature", valid_604390
  var valid_604391 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604391 = validateParameter(valid_604391, JString, required = false,
                                 default = nil)
  if valid_604391 != nil:
    section.add "X-Amz-SignedHeaders", valid_604391
  var valid_604392 = header.getOrDefault("X-Amz-Credential")
  valid_604392 = validateParameter(valid_604392, JString, required = false,
                                 default = nil)
  if valid_604392 != nil:
    section.add "X-Amz-Credential", valid_604392
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : A token returned from a previous call to <code>ListReceiptRuleSets</code> to indicate the position in the receipt rule set list.
  section = newJObject()
  var valid_604393 = formData.getOrDefault("NextToken")
  valid_604393 = validateParameter(valid_604393, JString, required = false,
                                 default = nil)
  if valid_604393 != nil:
    section.add "NextToken", valid_604393
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604394: Call_PostListReceiptRuleSets_604381; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the receipt rule sets that exist under your AWS account in the current AWS Region. If there are additional receipt rule sets to be retrieved, you will receive a <code>NextToken</code> that you can provide to the next call to <code>ListReceiptRuleSets</code> to retrieve the additional entries.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604394.validator(path, query, header, formData, body)
  let scheme = call_604394.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604394.url(scheme.get, call_604394.host, call_604394.base,
                         call_604394.route, valid.getOrDefault("path"))
  result = hook(call_604394, url, valid)

proc call*(call_604395: Call_PostListReceiptRuleSets_604381;
          NextToken: string = ""; Action: string = "ListReceiptRuleSets";
          Version: string = "2010-12-01"): Recallable =
  ## postListReceiptRuleSets
  ## <p>Lists the receipt rule sets that exist under your AWS account in the current AWS Region. If there are additional receipt rule sets to be retrieved, you will receive a <code>NextToken</code> that you can provide to the next call to <code>ListReceiptRuleSets</code> to retrieve the additional entries.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : A token returned from a previous call to <code>ListReceiptRuleSets</code> to indicate the position in the receipt rule set list.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604396 = newJObject()
  var formData_604397 = newJObject()
  add(formData_604397, "NextToken", newJString(NextToken))
  add(query_604396, "Action", newJString(Action))
  add(query_604396, "Version", newJString(Version))
  result = call_604395.call(nil, query_604396, nil, formData_604397, nil)

var postListReceiptRuleSets* = Call_PostListReceiptRuleSets_604381(
    name: "postListReceiptRuleSets", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ListReceiptRuleSets",
    validator: validate_PostListReceiptRuleSets_604382, base: "/",
    url: url_PostListReceiptRuleSets_604383, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListReceiptRuleSets_604365 = ref object of OpenApiRestCall_602433
proc url_GetListReceiptRuleSets_604367(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListReceiptRuleSets_604366(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the receipt rule sets that exist under your AWS account in the current AWS Region. If there are additional receipt rule sets to be retrieved, you will receive a <code>NextToken</code> that you can provide to the next call to <code>ListReceiptRuleSets</code> to retrieve the additional entries.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : A token returned from a previous call to <code>ListReceiptRuleSets</code> to indicate the position in the receipt rule set list.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_604368 = query.getOrDefault("NextToken")
  valid_604368 = validateParameter(valid_604368, JString, required = false,
                                 default = nil)
  if valid_604368 != nil:
    section.add "NextToken", valid_604368
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604369 = query.getOrDefault("Action")
  valid_604369 = validateParameter(valid_604369, JString, required = true,
                                 default = newJString("ListReceiptRuleSets"))
  if valid_604369 != nil:
    section.add "Action", valid_604369
  var valid_604370 = query.getOrDefault("Version")
  valid_604370 = validateParameter(valid_604370, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604370 != nil:
    section.add "Version", valid_604370
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604371 = header.getOrDefault("X-Amz-Date")
  valid_604371 = validateParameter(valid_604371, JString, required = false,
                                 default = nil)
  if valid_604371 != nil:
    section.add "X-Amz-Date", valid_604371
  var valid_604372 = header.getOrDefault("X-Amz-Security-Token")
  valid_604372 = validateParameter(valid_604372, JString, required = false,
                                 default = nil)
  if valid_604372 != nil:
    section.add "X-Amz-Security-Token", valid_604372
  var valid_604373 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604373 = validateParameter(valid_604373, JString, required = false,
                                 default = nil)
  if valid_604373 != nil:
    section.add "X-Amz-Content-Sha256", valid_604373
  var valid_604374 = header.getOrDefault("X-Amz-Algorithm")
  valid_604374 = validateParameter(valid_604374, JString, required = false,
                                 default = nil)
  if valid_604374 != nil:
    section.add "X-Amz-Algorithm", valid_604374
  var valid_604375 = header.getOrDefault("X-Amz-Signature")
  valid_604375 = validateParameter(valid_604375, JString, required = false,
                                 default = nil)
  if valid_604375 != nil:
    section.add "X-Amz-Signature", valid_604375
  var valid_604376 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604376 = validateParameter(valid_604376, JString, required = false,
                                 default = nil)
  if valid_604376 != nil:
    section.add "X-Amz-SignedHeaders", valid_604376
  var valid_604377 = header.getOrDefault("X-Amz-Credential")
  valid_604377 = validateParameter(valid_604377, JString, required = false,
                                 default = nil)
  if valid_604377 != nil:
    section.add "X-Amz-Credential", valid_604377
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604378: Call_GetListReceiptRuleSets_604365; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the receipt rule sets that exist under your AWS account in the current AWS Region. If there are additional receipt rule sets to be retrieved, you will receive a <code>NextToken</code> that you can provide to the next call to <code>ListReceiptRuleSets</code> to retrieve the additional entries.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604378.validator(path, query, header, formData, body)
  let scheme = call_604378.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604378.url(scheme.get, call_604378.host, call_604378.base,
                         call_604378.route, valid.getOrDefault("path"))
  result = hook(call_604378, url, valid)

proc call*(call_604379: Call_GetListReceiptRuleSets_604365; NextToken: string = "";
          Action: string = "ListReceiptRuleSets"; Version: string = "2010-12-01"): Recallable =
  ## getListReceiptRuleSets
  ## <p>Lists the receipt rule sets that exist under your AWS account in the current AWS Region. If there are additional receipt rule sets to be retrieved, you will receive a <code>NextToken</code> that you can provide to the next call to <code>ListReceiptRuleSets</code> to retrieve the additional entries.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : A token returned from a previous call to <code>ListReceiptRuleSets</code> to indicate the position in the receipt rule set list.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604380 = newJObject()
  add(query_604380, "NextToken", newJString(NextToken))
  add(query_604380, "Action", newJString(Action))
  add(query_604380, "Version", newJString(Version))
  result = call_604379.call(nil, query_604380, nil, nil, nil)

var getListReceiptRuleSets* = Call_GetListReceiptRuleSets_604365(
    name: "getListReceiptRuleSets", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=ListReceiptRuleSets",
    validator: validate_GetListReceiptRuleSets_604366, base: "/",
    url: url_GetListReceiptRuleSets_604367, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListTemplates_604415 = ref object of OpenApiRestCall_602433
proc url_PostListTemplates_604417(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListTemplates_604416(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Lists the email templates present in your Amazon SES account in the current AWS Region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604418 = query.getOrDefault("Action")
  valid_604418 = validateParameter(valid_604418, JString, required = true,
                                 default = newJString("ListTemplates"))
  if valid_604418 != nil:
    section.add "Action", valid_604418
  var valid_604419 = query.getOrDefault("Version")
  valid_604419 = validateParameter(valid_604419, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604419 != nil:
    section.add "Version", valid_604419
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604420 = header.getOrDefault("X-Amz-Date")
  valid_604420 = validateParameter(valid_604420, JString, required = false,
                                 default = nil)
  if valid_604420 != nil:
    section.add "X-Amz-Date", valid_604420
  var valid_604421 = header.getOrDefault("X-Amz-Security-Token")
  valid_604421 = validateParameter(valid_604421, JString, required = false,
                                 default = nil)
  if valid_604421 != nil:
    section.add "X-Amz-Security-Token", valid_604421
  var valid_604422 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604422 = validateParameter(valid_604422, JString, required = false,
                                 default = nil)
  if valid_604422 != nil:
    section.add "X-Amz-Content-Sha256", valid_604422
  var valid_604423 = header.getOrDefault("X-Amz-Algorithm")
  valid_604423 = validateParameter(valid_604423, JString, required = false,
                                 default = nil)
  if valid_604423 != nil:
    section.add "X-Amz-Algorithm", valid_604423
  var valid_604424 = header.getOrDefault("X-Amz-Signature")
  valid_604424 = validateParameter(valid_604424, JString, required = false,
                                 default = nil)
  if valid_604424 != nil:
    section.add "X-Amz-Signature", valid_604424
  var valid_604425 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604425 = validateParameter(valid_604425, JString, required = false,
                                 default = nil)
  if valid_604425 != nil:
    section.add "X-Amz-SignedHeaders", valid_604425
  var valid_604426 = header.getOrDefault("X-Amz-Credential")
  valid_604426 = validateParameter(valid_604426, JString, required = false,
                                 default = nil)
  if valid_604426 != nil:
    section.add "X-Amz-Credential", valid_604426
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : A token returned from a previous call to <code>ListTemplates</code> to indicate the position in the list of email templates.
  ##   MaxItems: JInt
  ##           : The maximum number of templates to return. This value must be at least 1 and less than or equal to 10. If you do not specify a value, or if you specify a value less than 1 or greater than 10, the operation will return up to 10 results.
  section = newJObject()
  var valid_604427 = formData.getOrDefault("NextToken")
  valid_604427 = validateParameter(valid_604427, JString, required = false,
                                 default = nil)
  if valid_604427 != nil:
    section.add "NextToken", valid_604427
  var valid_604428 = formData.getOrDefault("MaxItems")
  valid_604428 = validateParameter(valid_604428, JInt, required = false, default = nil)
  if valid_604428 != nil:
    section.add "MaxItems", valid_604428
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604429: Call_PostListTemplates_604415; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the email templates present in your Amazon SES account in the current AWS Region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604429.validator(path, query, header, formData, body)
  let scheme = call_604429.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604429.url(scheme.get, call_604429.host, call_604429.base,
                         call_604429.route, valid.getOrDefault("path"))
  result = hook(call_604429, url, valid)

proc call*(call_604430: Call_PostListTemplates_604415; NextToken: string = "";
          Action: string = "ListTemplates"; MaxItems: int = 0;
          Version: string = "2010-12-01"): Recallable =
  ## postListTemplates
  ## <p>Lists the email templates present in your Amazon SES account in the current AWS Region.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : A token returned from a previous call to <code>ListTemplates</code> to indicate the position in the list of email templates.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : The maximum number of templates to return. This value must be at least 1 and less than or equal to 10. If you do not specify a value, or if you specify a value less than 1 or greater than 10, the operation will return up to 10 results.
  ##   Version: string (required)
  var query_604431 = newJObject()
  var formData_604432 = newJObject()
  add(formData_604432, "NextToken", newJString(NextToken))
  add(query_604431, "Action", newJString(Action))
  add(formData_604432, "MaxItems", newJInt(MaxItems))
  add(query_604431, "Version", newJString(Version))
  result = call_604430.call(nil, query_604431, nil, formData_604432, nil)

var postListTemplates* = Call_PostListTemplates_604415(name: "postListTemplates",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=ListTemplates", validator: validate_PostListTemplates_604416,
    base: "/", url: url_PostListTemplates_604417,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListTemplates_604398 = ref object of OpenApiRestCall_602433
proc url_GetListTemplates_604400(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListTemplates_604399(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Lists the email templates present in your Amazon SES account in the current AWS Region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : A token returned from a previous call to <code>ListTemplates</code> to indicate the position in the list of email templates.
  ##   Action: JString (required)
  ##   MaxItems: JInt
  ##           : The maximum number of templates to return. This value must be at least 1 and less than or equal to 10. If you do not specify a value, or if you specify a value less than 1 or greater than 10, the operation will return up to 10 results.
  ##   Version: JString (required)
  section = newJObject()
  var valid_604401 = query.getOrDefault("NextToken")
  valid_604401 = validateParameter(valid_604401, JString, required = false,
                                 default = nil)
  if valid_604401 != nil:
    section.add "NextToken", valid_604401
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604402 = query.getOrDefault("Action")
  valid_604402 = validateParameter(valid_604402, JString, required = true,
                                 default = newJString("ListTemplates"))
  if valid_604402 != nil:
    section.add "Action", valid_604402
  var valid_604403 = query.getOrDefault("MaxItems")
  valid_604403 = validateParameter(valid_604403, JInt, required = false, default = nil)
  if valid_604403 != nil:
    section.add "MaxItems", valid_604403
  var valid_604404 = query.getOrDefault("Version")
  valid_604404 = validateParameter(valid_604404, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604404 != nil:
    section.add "Version", valid_604404
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604405 = header.getOrDefault("X-Amz-Date")
  valid_604405 = validateParameter(valid_604405, JString, required = false,
                                 default = nil)
  if valid_604405 != nil:
    section.add "X-Amz-Date", valid_604405
  var valid_604406 = header.getOrDefault("X-Amz-Security-Token")
  valid_604406 = validateParameter(valid_604406, JString, required = false,
                                 default = nil)
  if valid_604406 != nil:
    section.add "X-Amz-Security-Token", valid_604406
  var valid_604407 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604407 = validateParameter(valid_604407, JString, required = false,
                                 default = nil)
  if valid_604407 != nil:
    section.add "X-Amz-Content-Sha256", valid_604407
  var valid_604408 = header.getOrDefault("X-Amz-Algorithm")
  valid_604408 = validateParameter(valid_604408, JString, required = false,
                                 default = nil)
  if valid_604408 != nil:
    section.add "X-Amz-Algorithm", valid_604408
  var valid_604409 = header.getOrDefault("X-Amz-Signature")
  valid_604409 = validateParameter(valid_604409, JString, required = false,
                                 default = nil)
  if valid_604409 != nil:
    section.add "X-Amz-Signature", valid_604409
  var valid_604410 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604410 = validateParameter(valid_604410, JString, required = false,
                                 default = nil)
  if valid_604410 != nil:
    section.add "X-Amz-SignedHeaders", valid_604410
  var valid_604411 = header.getOrDefault("X-Amz-Credential")
  valid_604411 = validateParameter(valid_604411, JString, required = false,
                                 default = nil)
  if valid_604411 != nil:
    section.add "X-Amz-Credential", valid_604411
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604412: Call_GetListTemplates_604398; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the email templates present in your Amazon SES account in the current AWS Region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604412.validator(path, query, header, formData, body)
  let scheme = call_604412.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604412.url(scheme.get, call_604412.host, call_604412.base,
                         call_604412.route, valid.getOrDefault("path"))
  result = hook(call_604412, url, valid)

proc call*(call_604413: Call_GetListTemplates_604398; NextToken: string = "";
          Action: string = "ListTemplates"; MaxItems: int = 0;
          Version: string = "2010-12-01"): Recallable =
  ## getListTemplates
  ## <p>Lists the email templates present in your Amazon SES account in the current AWS Region.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : A token returned from a previous call to <code>ListTemplates</code> to indicate the position in the list of email templates.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : The maximum number of templates to return. This value must be at least 1 and less than or equal to 10. If you do not specify a value, or if you specify a value less than 1 or greater than 10, the operation will return up to 10 results.
  ##   Version: string (required)
  var query_604414 = newJObject()
  add(query_604414, "NextToken", newJString(NextToken))
  add(query_604414, "Action", newJString(Action))
  add(query_604414, "MaxItems", newJInt(MaxItems))
  add(query_604414, "Version", newJString(Version))
  result = call_604413.call(nil, query_604414, nil, nil, nil)

var getListTemplates* = Call_GetListTemplates_604398(name: "getListTemplates",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=ListTemplates", validator: validate_GetListTemplates_604399,
    base: "/", url: url_GetListTemplates_604400,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListVerifiedEmailAddresses_604448 = ref object of OpenApiRestCall_602433
proc url_PostListVerifiedEmailAddresses_604450(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListVerifiedEmailAddresses_604449(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deprecated. Use the <code>ListIdentities</code> operation to list the email addresses and domains associated with your account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604451 = query.getOrDefault("Action")
  valid_604451 = validateParameter(valid_604451, JString, required = true, default = newJString(
      "ListVerifiedEmailAddresses"))
  if valid_604451 != nil:
    section.add "Action", valid_604451
  var valid_604452 = query.getOrDefault("Version")
  valid_604452 = validateParameter(valid_604452, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604452 != nil:
    section.add "Version", valid_604452
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604453 = header.getOrDefault("X-Amz-Date")
  valid_604453 = validateParameter(valid_604453, JString, required = false,
                                 default = nil)
  if valid_604453 != nil:
    section.add "X-Amz-Date", valid_604453
  var valid_604454 = header.getOrDefault("X-Amz-Security-Token")
  valid_604454 = validateParameter(valid_604454, JString, required = false,
                                 default = nil)
  if valid_604454 != nil:
    section.add "X-Amz-Security-Token", valid_604454
  var valid_604455 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604455 = validateParameter(valid_604455, JString, required = false,
                                 default = nil)
  if valid_604455 != nil:
    section.add "X-Amz-Content-Sha256", valid_604455
  var valid_604456 = header.getOrDefault("X-Amz-Algorithm")
  valid_604456 = validateParameter(valid_604456, JString, required = false,
                                 default = nil)
  if valid_604456 != nil:
    section.add "X-Amz-Algorithm", valid_604456
  var valid_604457 = header.getOrDefault("X-Amz-Signature")
  valid_604457 = validateParameter(valid_604457, JString, required = false,
                                 default = nil)
  if valid_604457 != nil:
    section.add "X-Amz-Signature", valid_604457
  var valid_604458 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604458 = validateParameter(valid_604458, JString, required = false,
                                 default = nil)
  if valid_604458 != nil:
    section.add "X-Amz-SignedHeaders", valid_604458
  var valid_604459 = header.getOrDefault("X-Amz-Credential")
  valid_604459 = validateParameter(valid_604459, JString, required = false,
                                 default = nil)
  if valid_604459 != nil:
    section.add "X-Amz-Credential", valid_604459
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604460: Call_PostListVerifiedEmailAddresses_604448; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deprecated. Use the <code>ListIdentities</code> operation to list the email addresses and domains associated with your account.
  ## 
  let valid = call_604460.validator(path, query, header, formData, body)
  let scheme = call_604460.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604460.url(scheme.get, call_604460.host, call_604460.base,
                         call_604460.route, valid.getOrDefault("path"))
  result = hook(call_604460, url, valid)

proc call*(call_604461: Call_PostListVerifiedEmailAddresses_604448;
          Action: string = "ListVerifiedEmailAddresses";
          Version: string = "2010-12-01"): Recallable =
  ## postListVerifiedEmailAddresses
  ## Deprecated. Use the <code>ListIdentities</code> operation to list the email addresses and domains associated with your account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604462 = newJObject()
  add(query_604462, "Action", newJString(Action))
  add(query_604462, "Version", newJString(Version))
  result = call_604461.call(nil, query_604462, nil, nil, nil)

var postListVerifiedEmailAddresses* = Call_PostListVerifiedEmailAddresses_604448(
    name: "postListVerifiedEmailAddresses", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ListVerifiedEmailAddresses",
    validator: validate_PostListVerifiedEmailAddresses_604449, base: "/",
    url: url_PostListVerifiedEmailAddresses_604450,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListVerifiedEmailAddresses_604433 = ref object of OpenApiRestCall_602433
proc url_GetListVerifiedEmailAddresses_604435(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListVerifiedEmailAddresses_604434(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deprecated. Use the <code>ListIdentities</code> operation to list the email addresses and domains associated with your account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604436 = query.getOrDefault("Action")
  valid_604436 = validateParameter(valid_604436, JString, required = true, default = newJString(
      "ListVerifiedEmailAddresses"))
  if valid_604436 != nil:
    section.add "Action", valid_604436
  var valid_604437 = query.getOrDefault("Version")
  valid_604437 = validateParameter(valid_604437, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604437 != nil:
    section.add "Version", valid_604437
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604438 = header.getOrDefault("X-Amz-Date")
  valid_604438 = validateParameter(valid_604438, JString, required = false,
                                 default = nil)
  if valid_604438 != nil:
    section.add "X-Amz-Date", valid_604438
  var valid_604439 = header.getOrDefault("X-Amz-Security-Token")
  valid_604439 = validateParameter(valid_604439, JString, required = false,
                                 default = nil)
  if valid_604439 != nil:
    section.add "X-Amz-Security-Token", valid_604439
  var valid_604440 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604440 = validateParameter(valid_604440, JString, required = false,
                                 default = nil)
  if valid_604440 != nil:
    section.add "X-Amz-Content-Sha256", valid_604440
  var valid_604441 = header.getOrDefault("X-Amz-Algorithm")
  valid_604441 = validateParameter(valid_604441, JString, required = false,
                                 default = nil)
  if valid_604441 != nil:
    section.add "X-Amz-Algorithm", valid_604441
  var valid_604442 = header.getOrDefault("X-Amz-Signature")
  valid_604442 = validateParameter(valid_604442, JString, required = false,
                                 default = nil)
  if valid_604442 != nil:
    section.add "X-Amz-Signature", valid_604442
  var valid_604443 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604443 = validateParameter(valid_604443, JString, required = false,
                                 default = nil)
  if valid_604443 != nil:
    section.add "X-Amz-SignedHeaders", valid_604443
  var valid_604444 = header.getOrDefault("X-Amz-Credential")
  valid_604444 = validateParameter(valid_604444, JString, required = false,
                                 default = nil)
  if valid_604444 != nil:
    section.add "X-Amz-Credential", valid_604444
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604445: Call_GetListVerifiedEmailAddresses_604433; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deprecated. Use the <code>ListIdentities</code> operation to list the email addresses and domains associated with your account.
  ## 
  let valid = call_604445.validator(path, query, header, formData, body)
  let scheme = call_604445.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604445.url(scheme.get, call_604445.host, call_604445.base,
                         call_604445.route, valid.getOrDefault("path"))
  result = hook(call_604445, url, valid)

proc call*(call_604446: Call_GetListVerifiedEmailAddresses_604433;
          Action: string = "ListVerifiedEmailAddresses";
          Version: string = "2010-12-01"): Recallable =
  ## getListVerifiedEmailAddresses
  ## Deprecated. Use the <code>ListIdentities</code> operation to list the email addresses and domains associated with your account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604447 = newJObject()
  add(query_604447, "Action", newJString(Action))
  add(query_604447, "Version", newJString(Version))
  result = call_604446.call(nil, query_604447, nil, nil, nil)

var getListVerifiedEmailAddresses* = Call_GetListVerifiedEmailAddresses_604433(
    name: "getListVerifiedEmailAddresses", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=ListVerifiedEmailAddresses",
    validator: validate_GetListVerifiedEmailAddresses_604434, base: "/",
    url: url_GetListVerifiedEmailAddresses_604435,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutConfigurationSetDeliveryOptions_604480 = ref object of OpenApiRestCall_602433
proc url_PostPutConfigurationSetDeliveryOptions_604482(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostPutConfigurationSetDeliveryOptions_604481(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds or updates the delivery options for a configuration set.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604483 = query.getOrDefault("Action")
  valid_604483 = validateParameter(valid_604483, JString, required = true, default = newJString(
      "PutConfigurationSetDeliveryOptions"))
  if valid_604483 != nil:
    section.add "Action", valid_604483
  var valid_604484 = query.getOrDefault("Version")
  valid_604484 = validateParameter(valid_604484, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604484 != nil:
    section.add "Version", valid_604484
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604485 = header.getOrDefault("X-Amz-Date")
  valid_604485 = validateParameter(valid_604485, JString, required = false,
                                 default = nil)
  if valid_604485 != nil:
    section.add "X-Amz-Date", valid_604485
  var valid_604486 = header.getOrDefault("X-Amz-Security-Token")
  valid_604486 = validateParameter(valid_604486, JString, required = false,
                                 default = nil)
  if valid_604486 != nil:
    section.add "X-Amz-Security-Token", valid_604486
  var valid_604487 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604487 = validateParameter(valid_604487, JString, required = false,
                                 default = nil)
  if valid_604487 != nil:
    section.add "X-Amz-Content-Sha256", valid_604487
  var valid_604488 = header.getOrDefault("X-Amz-Algorithm")
  valid_604488 = validateParameter(valid_604488, JString, required = false,
                                 default = nil)
  if valid_604488 != nil:
    section.add "X-Amz-Algorithm", valid_604488
  var valid_604489 = header.getOrDefault("X-Amz-Signature")
  valid_604489 = validateParameter(valid_604489, JString, required = false,
                                 default = nil)
  if valid_604489 != nil:
    section.add "X-Amz-Signature", valid_604489
  var valid_604490 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604490 = validateParameter(valid_604490, JString, required = false,
                                 default = nil)
  if valid_604490 != nil:
    section.add "X-Amz-SignedHeaders", valid_604490
  var valid_604491 = header.getOrDefault("X-Amz-Credential")
  valid_604491 = validateParameter(valid_604491, JString, required = false,
                                 default = nil)
  if valid_604491 != nil:
    section.add "X-Amz-Credential", valid_604491
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that you want to specify the delivery options for.
  ##   DeliveryOptions.TlsPolicy: JString
  ##                            : Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS).
  ## Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only delivered if a TLS connection can be established. If the value is <code>Optional</code>, messages can be delivered in plain text if a TLS connection can't be established.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_604492 = formData.getOrDefault("ConfigurationSetName")
  valid_604492 = validateParameter(valid_604492, JString, required = true,
                                 default = nil)
  if valid_604492 != nil:
    section.add "ConfigurationSetName", valid_604492
  var valid_604493 = formData.getOrDefault("DeliveryOptions.TlsPolicy")
  valid_604493 = validateParameter(valid_604493, JString, required = false,
                                 default = nil)
  if valid_604493 != nil:
    section.add "DeliveryOptions.TlsPolicy", valid_604493
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604494: Call_PostPutConfigurationSetDeliveryOptions_604480;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds or updates the delivery options for a configuration set.
  ## 
  let valid = call_604494.validator(path, query, header, formData, body)
  let scheme = call_604494.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604494.url(scheme.get, call_604494.host, call_604494.base,
                         call_604494.route, valid.getOrDefault("path"))
  result = hook(call_604494, url, valid)

proc call*(call_604495: Call_PostPutConfigurationSetDeliveryOptions_604480;
          ConfigurationSetName: string;
          Action: string = "PutConfigurationSetDeliveryOptions";
          DeliveryOptionsTlsPolicy: string = ""; Version: string = "2010-12-01"): Recallable =
  ## postPutConfigurationSetDeliveryOptions
  ## Adds or updates the delivery options for a configuration set.
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that you want to specify the delivery options for.
  ##   Action: string (required)
  ##   DeliveryOptionsTlsPolicy: string
  ##                           : Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS).
  ## Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only delivered if a TLS connection can be established. If the value is <code>Optional</code>, messages can be delivered in plain text if a TLS connection can't be established.
  ##   Version: string (required)
  var query_604496 = newJObject()
  var formData_604497 = newJObject()
  add(formData_604497, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_604496, "Action", newJString(Action))
  add(formData_604497, "DeliveryOptions.TlsPolicy",
      newJString(DeliveryOptionsTlsPolicy))
  add(query_604496, "Version", newJString(Version))
  result = call_604495.call(nil, query_604496, nil, formData_604497, nil)

var postPutConfigurationSetDeliveryOptions* = Call_PostPutConfigurationSetDeliveryOptions_604480(
    name: "postPutConfigurationSetDeliveryOptions", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=PutConfigurationSetDeliveryOptions",
    validator: validate_PostPutConfigurationSetDeliveryOptions_604481, base: "/",
    url: url_PostPutConfigurationSetDeliveryOptions_604482,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutConfigurationSetDeliveryOptions_604463 = ref object of OpenApiRestCall_602433
proc url_GetPutConfigurationSetDeliveryOptions_604465(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetPutConfigurationSetDeliveryOptions_604464(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds or updates the delivery options for a configuration set.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DeliveryOptions.TlsPolicy: JString
  ##                            : Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS).
  ## Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only delivered if a TLS connection can be established. If the value is <code>Optional</code>, messages can be delivered in plain text if a TLS connection can't be established.
  ##   Action: JString (required)
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that you want to specify the delivery options for.
  ##   Version: JString (required)
  section = newJObject()
  var valid_604466 = query.getOrDefault("DeliveryOptions.TlsPolicy")
  valid_604466 = validateParameter(valid_604466, JString, required = false,
                                 default = nil)
  if valid_604466 != nil:
    section.add "DeliveryOptions.TlsPolicy", valid_604466
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604467 = query.getOrDefault("Action")
  valid_604467 = validateParameter(valid_604467, JString, required = true, default = newJString(
      "PutConfigurationSetDeliveryOptions"))
  if valid_604467 != nil:
    section.add "Action", valid_604467
  var valid_604468 = query.getOrDefault("ConfigurationSetName")
  valid_604468 = validateParameter(valid_604468, JString, required = true,
                                 default = nil)
  if valid_604468 != nil:
    section.add "ConfigurationSetName", valid_604468
  var valid_604469 = query.getOrDefault("Version")
  valid_604469 = validateParameter(valid_604469, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604469 != nil:
    section.add "Version", valid_604469
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604470 = header.getOrDefault("X-Amz-Date")
  valid_604470 = validateParameter(valid_604470, JString, required = false,
                                 default = nil)
  if valid_604470 != nil:
    section.add "X-Amz-Date", valid_604470
  var valid_604471 = header.getOrDefault("X-Amz-Security-Token")
  valid_604471 = validateParameter(valid_604471, JString, required = false,
                                 default = nil)
  if valid_604471 != nil:
    section.add "X-Amz-Security-Token", valid_604471
  var valid_604472 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604472 = validateParameter(valid_604472, JString, required = false,
                                 default = nil)
  if valid_604472 != nil:
    section.add "X-Amz-Content-Sha256", valid_604472
  var valid_604473 = header.getOrDefault("X-Amz-Algorithm")
  valid_604473 = validateParameter(valid_604473, JString, required = false,
                                 default = nil)
  if valid_604473 != nil:
    section.add "X-Amz-Algorithm", valid_604473
  var valid_604474 = header.getOrDefault("X-Amz-Signature")
  valid_604474 = validateParameter(valid_604474, JString, required = false,
                                 default = nil)
  if valid_604474 != nil:
    section.add "X-Amz-Signature", valid_604474
  var valid_604475 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604475 = validateParameter(valid_604475, JString, required = false,
                                 default = nil)
  if valid_604475 != nil:
    section.add "X-Amz-SignedHeaders", valid_604475
  var valid_604476 = header.getOrDefault("X-Amz-Credential")
  valid_604476 = validateParameter(valid_604476, JString, required = false,
                                 default = nil)
  if valid_604476 != nil:
    section.add "X-Amz-Credential", valid_604476
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604477: Call_GetPutConfigurationSetDeliveryOptions_604463;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds or updates the delivery options for a configuration set.
  ## 
  let valid = call_604477.validator(path, query, header, formData, body)
  let scheme = call_604477.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604477.url(scheme.get, call_604477.host, call_604477.base,
                         call_604477.route, valid.getOrDefault("path"))
  result = hook(call_604477, url, valid)

proc call*(call_604478: Call_GetPutConfigurationSetDeliveryOptions_604463;
          ConfigurationSetName: string; DeliveryOptionsTlsPolicy: string = "";
          Action: string = "PutConfigurationSetDeliveryOptions";
          Version: string = "2010-12-01"): Recallable =
  ## getPutConfigurationSetDeliveryOptions
  ## Adds or updates the delivery options for a configuration set.
  ##   DeliveryOptionsTlsPolicy: string
  ##                           : Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS).
  ## Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only delivered if a TLS connection can be established. If the value is <code>Optional</code>, messages can be delivered in plain text if a TLS connection can't be established.
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that you want to specify the delivery options for.
  ##   Version: string (required)
  var query_604479 = newJObject()
  add(query_604479, "DeliveryOptions.TlsPolicy",
      newJString(DeliveryOptionsTlsPolicy))
  add(query_604479, "Action", newJString(Action))
  add(query_604479, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_604479, "Version", newJString(Version))
  result = call_604478.call(nil, query_604479, nil, nil, nil)

var getPutConfigurationSetDeliveryOptions* = Call_GetPutConfigurationSetDeliveryOptions_604463(
    name: "getPutConfigurationSetDeliveryOptions", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=PutConfigurationSetDeliveryOptions",
    validator: validate_GetPutConfigurationSetDeliveryOptions_604464, base: "/",
    url: url_GetPutConfigurationSetDeliveryOptions_604465,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutIdentityPolicy_604516 = ref object of OpenApiRestCall_602433
proc url_PostPutIdentityPolicy_604518(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostPutIdentityPolicy_604517(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds or updates a sending authorization policy for the specified identity (an email address or a domain).</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604519 = query.getOrDefault("Action")
  valid_604519 = validateParameter(valid_604519, JString, required = true,
                                 default = newJString("PutIdentityPolicy"))
  if valid_604519 != nil:
    section.add "Action", valid_604519
  var valid_604520 = query.getOrDefault("Version")
  valid_604520 = validateParameter(valid_604520, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604520 != nil:
    section.add "Version", valid_604520
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604521 = header.getOrDefault("X-Amz-Date")
  valid_604521 = validateParameter(valid_604521, JString, required = false,
                                 default = nil)
  if valid_604521 != nil:
    section.add "X-Amz-Date", valid_604521
  var valid_604522 = header.getOrDefault("X-Amz-Security-Token")
  valid_604522 = validateParameter(valid_604522, JString, required = false,
                                 default = nil)
  if valid_604522 != nil:
    section.add "X-Amz-Security-Token", valid_604522
  var valid_604523 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604523 = validateParameter(valid_604523, JString, required = false,
                                 default = nil)
  if valid_604523 != nil:
    section.add "X-Amz-Content-Sha256", valid_604523
  var valid_604524 = header.getOrDefault("X-Amz-Algorithm")
  valid_604524 = validateParameter(valid_604524, JString, required = false,
                                 default = nil)
  if valid_604524 != nil:
    section.add "X-Amz-Algorithm", valid_604524
  var valid_604525 = header.getOrDefault("X-Amz-Signature")
  valid_604525 = validateParameter(valid_604525, JString, required = false,
                                 default = nil)
  if valid_604525 != nil:
    section.add "X-Amz-Signature", valid_604525
  var valid_604526 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604526 = validateParameter(valid_604526, JString, required = false,
                                 default = nil)
  if valid_604526 != nil:
    section.add "X-Amz-SignedHeaders", valid_604526
  var valid_604527 = header.getOrDefault("X-Amz-Credential")
  valid_604527 = validateParameter(valid_604527, JString, required = false,
                                 default = nil)
  if valid_604527 != nil:
    section.add "X-Amz-Credential", valid_604527
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy.</p> <p>The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.</p>
  ##   Identity: JString (required)
  ##           : <p>The identity that the policy will apply to. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Policy: JString (required)
  ##         : <p>The text of the policy in JSON format. The policy cannot exceed 4 KB.</p> <p>For information about the syntax of sending authorization policies, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-policies.html">Amazon SES Developer Guide</a>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_604528 = formData.getOrDefault("PolicyName")
  valid_604528 = validateParameter(valid_604528, JString, required = true,
                                 default = nil)
  if valid_604528 != nil:
    section.add "PolicyName", valid_604528
  var valid_604529 = formData.getOrDefault("Identity")
  valid_604529 = validateParameter(valid_604529, JString, required = true,
                                 default = nil)
  if valid_604529 != nil:
    section.add "Identity", valid_604529
  var valid_604530 = formData.getOrDefault("Policy")
  valid_604530 = validateParameter(valid_604530, JString, required = true,
                                 default = nil)
  if valid_604530 != nil:
    section.add "Policy", valid_604530
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604531: Call_PostPutIdentityPolicy_604516; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates a sending authorization policy for the specified identity (an email address or a domain).</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604531.validator(path, query, header, formData, body)
  let scheme = call_604531.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604531.url(scheme.get, call_604531.host, call_604531.base,
                         call_604531.route, valid.getOrDefault("path"))
  result = hook(call_604531, url, valid)

proc call*(call_604532: Call_PostPutIdentityPolicy_604516; PolicyName: string;
          Identity: string; Policy: string; Action: string = "PutIdentityPolicy";
          Version: string = "2010-12-01"): Recallable =
  ## postPutIdentityPolicy
  ## <p>Adds or updates a sending authorization policy for the specified identity (an email address or a domain).</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy.</p> <p>The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.</p>
  ##   Identity: string (required)
  ##           : <p>The identity that the policy will apply to. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Policy: string (required)
  ##         : <p>The text of the policy in JSON format. The policy cannot exceed 4 KB.</p> <p>For information about the syntax of sending authorization policies, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-policies.html">Amazon SES Developer Guide</a>. </p>
  ##   Version: string (required)
  var query_604533 = newJObject()
  var formData_604534 = newJObject()
  add(formData_604534, "PolicyName", newJString(PolicyName))
  add(formData_604534, "Identity", newJString(Identity))
  add(query_604533, "Action", newJString(Action))
  add(formData_604534, "Policy", newJString(Policy))
  add(query_604533, "Version", newJString(Version))
  result = call_604532.call(nil, query_604533, nil, formData_604534, nil)

var postPutIdentityPolicy* = Call_PostPutIdentityPolicy_604516(
    name: "postPutIdentityPolicy", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=PutIdentityPolicy",
    validator: validate_PostPutIdentityPolicy_604517, base: "/",
    url: url_PostPutIdentityPolicy_604518, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutIdentityPolicy_604498 = ref object of OpenApiRestCall_602433
proc url_GetPutIdentityPolicy_604500(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetPutIdentityPolicy_604499(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds or updates a sending authorization policy for the specified identity (an email address or a domain).</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : <p>The identity that the policy will apply to. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: JString (required)
  ##   Policy: JString (required)
  ##         : <p>The text of the policy in JSON format. The policy cannot exceed 4 KB.</p> <p>For information about the syntax of sending authorization policies, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-policies.html">Amazon SES Developer Guide</a>. </p>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy.</p> <p>The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.</p>
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_604501 = query.getOrDefault("Identity")
  valid_604501 = validateParameter(valid_604501, JString, required = true,
                                 default = nil)
  if valid_604501 != nil:
    section.add "Identity", valid_604501
  var valid_604502 = query.getOrDefault("Action")
  valid_604502 = validateParameter(valid_604502, JString, required = true,
                                 default = newJString("PutIdentityPolicy"))
  if valid_604502 != nil:
    section.add "Action", valid_604502
  var valid_604503 = query.getOrDefault("Policy")
  valid_604503 = validateParameter(valid_604503, JString, required = true,
                                 default = nil)
  if valid_604503 != nil:
    section.add "Policy", valid_604503
  var valid_604504 = query.getOrDefault("Version")
  valid_604504 = validateParameter(valid_604504, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604504 != nil:
    section.add "Version", valid_604504
  var valid_604505 = query.getOrDefault("PolicyName")
  valid_604505 = validateParameter(valid_604505, JString, required = true,
                                 default = nil)
  if valid_604505 != nil:
    section.add "PolicyName", valid_604505
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604506 = header.getOrDefault("X-Amz-Date")
  valid_604506 = validateParameter(valid_604506, JString, required = false,
                                 default = nil)
  if valid_604506 != nil:
    section.add "X-Amz-Date", valid_604506
  var valid_604507 = header.getOrDefault("X-Amz-Security-Token")
  valid_604507 = validateParameter(valid_604507, JString, required = false,
                                 default = nil)
  if valid_604507 != nil:
    section.add "X-Amz-Security-Token", valid_604507
  var valid_604508 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604508 = validateParameter(valid_604508, JString, required = false,
                                 default = nil)
  if valid_604508 != nil:
    section.add "X-Amz-Content-Sha256", valid_604508
  var valid_604509 = header.getOrDefault("X-Amz-Algorithm")
  valid_604509 = validateParameter(valid_604509, JString, required = false,
                                 default = nil)
  if valid_604509 != nil:
    section.add "X-Amz-Algorithm", valid_604509
  var valid_604510 = header.getOrDefault("X-Amz-Signature")
  valid_604510 = validateParameter(valid_604510, JString, required = false,
                                 default = nil)
  if valid_604510 != nil:
    section.add "X-Amz-Signature", valid_604510
  var valid_604511 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604511 = validateParameter(valid_604511, JString, required = false,
                                 default = nil)
  if valid_604511 != nil:
    section.add "X-Amz-SignedHeaders", valid_604511
  var valid_604512 = header.getOrDefault("X-Amz-Credential")
  valid_604512 = validateParameter(valid_604512, JString, required = false,
                                 default = nil)
  if valid_604512 != nil:
    section.add "X-Amz-Credential", valid_604512
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604513: Call_GetPutIdentityPolicy_604498; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates a sending authorization policy for the specified identity (an email address or a domain).</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604513.validator(path, query, header, formData, body)
  let scheme = call_604513.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604513.url(scheme.get, call_604513.host, call_604513.base,
                         call_604513.route, valid.getOrDefault("path"))
  result = hook(call_604513, url, valid)

proc call*(call_604514: Call_GetPutIdentityPolicy_604498; Identity: string;
          Policy: string; PolicyName: string; Action: string = "PutIdentityPolicy";
          Version: string = "2010-12-01"): Recallable =
  ## getPutIdentityPolicy
  ## <p>Adds or updates a sending authorization policy for the specified identity (an email address or a domain).</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : <p>The identity that the policy will apply to. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Policy: string (required)
  ##         : <p>The text of the policy in JSON format. The policy cannot exceed 4 KB.</p> <p>For information about the syntax of sending authorization policies, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-policies.html">Amazon SES Developer Guide</a>. </p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy.</p> <p>The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.</p>
  var query_604515 = newJObject()
  add(query_604515, "Identity", newJString(Identity))
  add(query_604515, "Action", newJString(Action))
  add(query_604515, "Policy", newJString(Policy))
  add(query_604515, "Version", newJString(Version))
  add(query_604515, "PolicyName", newJString(PolicyName))
  result = call_604514.call(nil, query_604515, nil, nil, nil)

var getPutIdentityPolicy* = Call_GetPutIdentityPolicy_604498(
    name: "getPutIdentityPolicy", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=PutIdentityPolicy",
    validator: validate_GetPutIdentityPolicy_604499, base: "/",
    url: url_GetPutIdentityPolicy_604500, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostReorderReceiptRuleSet_604552 = ref object of OpenApiRestCall_602433
proc url_PostReorderReceiptRuleSet_604554(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostReorderReceiptRuleSet_604553(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Reorders the receipt rules within a receipt rule set.</p> <note> <p>All of the rules in the rule set must be represented in this request. That is, this API will return an error if the reorder request doesn't explicitly position all of the rules.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604555 = query.getOrDefault("Action")
  valid_604555 = validateParameter(valid_604555, JString, required = true,
                                 default = newJString("ReorderReceiptRuleSet"))
  if valid_604555 != nil:
    section.add "Action", valid_604555
  var valid_604556 = query.getOrDefault("Version")
  valid_604556 = validateParameter(valid_604556, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604556 != nil:
    section.add "Version", valid_604556
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604557 = header.getOrDefault("X-Amz-Date")
  valid_604557 = validateParameter(valid_604557, JString, required = false,
                                 default = nil)
  if valid_604557 != nil:
    section.add "X-Amz-Date", valid_604557
  var valid_604558 = header.getOrDefault("X-Amz-Security-Token")
  valid_604558 = validateParameter(valid_604558, JString, required = false,
                                 default = nil)
  if valid_604558 != nil:
    section.add "X-Amz-Security-Token", valid_604558
  var valid_604559 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604559 = validateParameter(valid_604559, JString, required = false,
                                 default = nil)
  if valid_604559 != nil:
    section.add "X-Amz-Content-Sha256", valid_604559
  var valid_604560 = header.getOrDefault("X-Amz-Algorithm")
  valid_604560 = validateParameter(valid_604560, JString, required = false,
                                 default = nil)
  if valid_604560 != nil:
    section.add "X-Amz-Algorithm", valid_604560
  var valid_604561 = header.getOrDefault("X-Amz-Signature")
  valid_604561 = validateParameter(valid_604561, JString, required = false,
                                 default = nil)
  if valid_604561 != nil:
    section.add "X-Amz-Signature", valid_604561
  var valid_604562 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604562 = validateParameter(valid_604562, JString, required = false,
                                 default = nil)
  if valid_604562 != nil:
    section.add "X-Amz-SignedHeaders", valid_604562
  var valid_604563 = header.getOrDefault("X-Amz-Credential")
  valid_604563 = validateParameter(valid_604563, JString, required = false,
                                 default = nil)
  if valid_604563 != nil:
    section.add "X-Amz-Credential", valid_604563
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleNames: JArray (required)
  ##            : A list of the specified receipt rule set's receipt rules in the order that you want to put them.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set to reorder.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleNames` field"
  var valid_604564 = formData.getOrDefault("RuleNames")
  valid_604564 = validateParameter(valid_604564, JArray, required = true, default = nil)
  if valid_604564 != nil:
    section.add "RuleNames", valid_604564
  var valid_604565 = formData.getOrDefault("RuleSetName")
  valid_604565 = validateParameter(valid_604565, JString, required = true,
                                 default = nil)
  if valid_604565 != nil:
    section.add "RuleSetName", valid_604565
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604566: Call_PostReorderReceiptRuleSet_604552; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Reorders the receipt rules within a receipt rule set.</p> <note> <p>All of the rules in the rule set must be represented in this request. That is, this API will return an error if the reorder request doesn't explicitly position all of the rules.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604566.validator(path, query, header, formData, body)
  let scheme = call_604566.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604566.url(scheme.get, call_604566.host, call_604566.base,
                         call_604566.route, valid.getOrDefault("path"))
  result = hook(call_604566, url, valid)

proc call*(call_604567: Call_PostReorderReceiptRuleSet_604552; RuleNames: JsonNode;
          RuleSetName: string; Action: string = "ReorderReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## postReorderReceiptRuleSet
  ## <p>Reorders the receipt rules within a receipt rule set.</p> <note> <p>All of the rules in the rule set must be represented in this request. That is, this API will return an error if the reorder request doesn't explicitly position all of the rules.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleNames: JArray (required)
  ##            : A list of the specified receipt rule set's receipt rules in the order that you want to put them.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set to reorder.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604568 = newJObject()
  var formData_604569 = newJObject()
  if RuleNames != nil:
    formData_604569.add "RuleNames", RuleNames
  add(formData_604569, "RuleSetName", newJString(RuleSetName))
  add(query_604568, "Action", newJString(Action))
  add(query_604568, "Version", newJString(Version))
  result = call_604567.call(nil, query_604568, nil, formData_604569, nil)

var postReorderReceiptRuleSet* = Call_PostReorderReceiptRuleSet_604552(
    name: "postReorderReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ReorderReceiptRuleSet",
    validator: validate_PostReorderReceiptRuleSet_604553, base: "/",
    url: url_PostReorderReceiptRuleSet_604554,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetReorderReceiptRuleSet_604535 = ref object of OpenApiRestCall_602433
proc url_GetReorderReceiptRuleSet_604537(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetReorderReceiptRuleSet_604536(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Reorders the receipt rules within a receipt rule set.</p> <note> <p>All of the rules in the rule set must be represented in this request. That is, this API will return an error if the reorder request doesn't explicitly position all of the rules.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set to reorder.
  ##   Action: JString (required)
  ##   RuleNames: JArray (required)
  ##            : A list of the specified receipt rule set's receipt rules in the order that you want to put them.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleSetName` field"
  var valid_604538 = query.getOrDefault("RuleSetName")
  valid_604538 = validateParameter(valid_604538, JString, required = true,
                                 default = nil)
  if valid_604538 != nil:
    section.add "RuleSetName", valid_604538
  var valid_604539 = query.getOrDefault("Action")
  valid_604539 = validateParameter(valid_604539, JString, required = true,
                                 default = newJString("ReorderReceiptRuleSet"))
  if valid_604539 != nil:
    section.add "Action", valid_604539
  var valid_604540 = query.getOrDefault("RuleNames")
  valid_604540 = validateParameter(valid_604540, JArray, required = true, default = nil)
  if valid_604540 != nil:
    section.add "RuleNames", valid_604540
  var valid_604541 = query.getOrDefault("Version")
  valid_604541 = validateParameter(valid_604541, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604541 != nil:
    section.add "Version", valid_604541
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604542 = header.getOrDefault("X-Amz-Date")
  valid_604542 = validateParameter(valid_604542, JString, required = false,
                                 default = nil)
  if valid_604542 != nil:
    section.add "X-Amz-Date", valid_604542
  var valid_604543 = header.getOrDefault("X-Amz-Security-Token")
  valid_604543 = validateParameter(valid_604543, JString, required = false,
                                 default = nil)
  if valid_604543 != nil:
    section.add "X-Amz-Security-Token", valid_604543
  var valid_604544 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604544 = validateParameter(valid_604544, JString, required = false,
                                 default = nil)
  if valid_604544 != nil:
    section.add "X-Amz-Content-Sha256", valid_604544
  var valid_604545 = header.getOrDefault("X-Amz-Algorithm")
  valid_604545 = validateParameter(valid_604545, JString, required = false,
                                 default = nil)
  if valid_604545 != nil:
    section.add "X-Amz-Algorithm", valid_604545
  var valid_604546 = header.getOrDefault("X-Amz-Signature")
  valid_604546 = validateParameter(valid_604546, JString, required = false,
                                 default = nil)
  if valid_604546 != nil:
    section.add "X-Amz-Signature", valid_604546
  var valid_604547 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604547 = validateParameter(valid_604547, JString, required = false,
                                 default = nil)
  if valid_604547 != nil:
    section.add "X-Amz-SignedHeaders", valid_604547
  var valid_604548 = header.getOrDefault("X-Amz-Credential")
  valid_604548 = validateParameter(valid_604548, JString, required = false,
                                 default = nil)
  if valid_604548 != nil:
    section.add "X-Amz-Credential", valid_604548
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604549: Call_GetReorderReceiptRuleSet_604535; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Reorders the receipt rules within a receipt rule set.</p> <note> <p>All of the rules in the rule set must be represented in this request. That is, this API will return an error if the reorder request doesn't explicitly position all of the rules.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604549.validator(path, query, header, formData, body)
  let scheme = call_604549.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604549.url(scheme.get, call_604549.host, call_604549.base,
                         call_604549.route, valid.getOrDefault("path"))
  result = hook(call_604549, url, valid)

proc call*(call_604550: Call_GetReorderReceiptRuleSet_604535; RuleSetName: string;
          RuleNames: JsonNode; Action: string = "ReorderReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## getReorderReceiptRuleSet
  ## <p>Reorders the receipt rules within a receipt rule set.</p> <note> <p>All of the rules in the rule set must be represented in this request. That is, this API will return an error if the reorder request doesn't explicitly position all of the rules.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set to reorder.
  ##   Action: string (required)
  ##   RuleNames: JArray (required)
  ##            : A list of the specified receipt rule set's receipt rules in the order that you want to put them.
  ##   Version: string (required)
  var query_604551 = newJObject()
  add(query_604551, "RuleSetName", newJString(RuleSetName))
  add(query_604551, "Action", newJString(Action))
  if RuleNames != nil:
    query_604551.add "RuleNames", RuleNames
  add(query_604551, "Version", newJString(Version))
  result = call_604550.call(nil, query_604551, nil, nil, nil)

var getReorderReceiptRuleSet* = Call_GetReorderReceiptRuleSet_604535(
    name: "getReorderReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=ReorderReceiptRuleSet",
    validator: validate_GetReorderReceiptRuleSet_604536, base: "/",
    url: url_GetReorderReceiptRuleSet_604537, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSendBounce_604593 = ref object of OpenApiRestCall_602433
proc url_PostSendBounce_604595(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSendBounce_604594(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Generates and sends a bounce message to the sender of an email you received through Amazon SES. You can only use this API on an email up to 24 hours after you receive it.</p> <note> <p>You cannot use this API to send generic bounces for mail that was not received by Amazon SES.</p> </note> <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604596 = query.getOrDefault("Action")
  valid_604596 = validateParameter(valid_604596, JString, required = true,
                                 default = newJString("SendBounce"))
  if valid_604596 != nil:
    section.add "Action", valid_604596
  var valid_604597 = query.getOrDefault("Version")
  valid_604597 = validateParameter(valid_604597, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604597 != nil:
    section.add "Version", valid_604597
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604598 = header.getOrDefault("X-Amz-Date")
  valid_604598 = validateParameter(valid_604598, JString, required = false,
                                 default = nil)
  if valid_604598 != nil:
    section.add "X-Amz-Date", valid_604598
  var valid_604599 = header.getOrDefault("X-Amz-Security-Token")
  valid_604599 = validateParameter(valid_604599, JString, required = false,
                                 default = nil)
  if valid_604599 != nil:
    section.add "X-Amz-Security-Token", valid_604599
  var valid_604600 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604600 = validateParameter(valid_604600, JString, required = false,
                                 default = nil)
  if valid_604600 != nil:
    section.add "X-Amz-Content-Sha256", valid_604600
  var valid_604601 = header.getOrDefault("X-Amz-Algorithm")
  valid_604601 = validateParameter(valid_604601, JString, required = false,
                                 default = nil)
  if valid_604601 != nil:
    section.add "X-Amz-Algorithm", valid_604601
  var valid_604602 = header.getOrDefault("X-Amz-Signature")
  valid_604602 = validateParameter(valid_604602, JString, required = false,
                                 default = nil)
  if valid_604602 != nil:
    section.add "X-Amz-Signature", valid_604602
  var valid_604603 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604603 = validateParameter(valid_604603, JString, required = false,
                                 default = nil)
  if valid_604603 != nil:
    section.add "X-Amz-SignedHeaders", valid_604603
  var valid_604604 = header.getOrDefault("X-Amz-Credential")
  valid_604604 = validateParameter(valid_604604, JString, required = false,
                                 default = nil)
  if valid_604604 != nil:
    section.add "X-Amz-Credential", valid_604604
  result.add "header", section
  ## parameters in `formData` object:
  ##   OriginalMessageId: JString (required)
  ##                    : The message ID of the message to be bounced.
  ##   BounceSenderArn: JString
  ##                  : This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the address in the "From" header of the bounce. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.
  ##   MessageDsn.ReportingMta: JString
  ##                          : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## The reporting MTA that attempted to deliver the message, formatted as specified in <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a> (<code>mta-name-type; mta-name</code>). The default value is <code>dns; inbound-smtp.[region].amazonaws.com</code>.
  ##   MessageDsn.ExtensionFields: JArray
  ##                             : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## Additional X-headers to include in the DSN.
  ##   BounceSender: JString (required)
  ##               : The address to use in the "From" header of the bounce message. This must be an identity that you have verified with Amazon SES.
  ##   Explanation: JString
  ##              : Human-readable text for the bounce message to explain the failure. If not specified, the text will be auto-generated based on the bounced recipient information.
  ##   MessageDsn.ArrivalDate: JString
  ##                         : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## When the message was received by the reporting mail transfer agent (MTA), in <a href="https://www.ietf.org/rfc/rfc0822.txt">RFC 822</a> date-time format.
  ##   BouncedRecipientInfoList: JArray (required)
  ##                           : A list of recipients of the bounced message, including the information required to create the Delivery Status Notifications (DSNs) for the recipients. You must specify at least one <code>BouncedRecipientInfo</code> in the list.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OriginalMessageId` field"
  var valid_604605 = formData.getOrDefault("OriginalMessageId")
  valid_604605 = validateParameter(valid_604605, JString, required = true,
                                 default = nil)
  if valid_604605 != nil:
    section.add "OriginalMessageId", valid_604605
  var valid_604606 = formData.getOrDefault("BounceSenderArn")
  valid_604606 = validateParameter(valid_604606, JString, required = false,
                                 default = nil)
  if valid_604606 != nil:
    section.add "BounceSenderArn", valid_604606
  var valid_604607 = formData.getOrDefault("MessageDsn.ReportingMta")
  valid_604607 = validateParameter(valid_604607, JString, required = false,
                                 default = nil)
  if valid_604607 != nil:
    section.add "MessageDsn.ReportingMta", valid_604607
  var valid_604608 = formData.getOrDefault("MessageDsn.ExtensionFields")
  valid_604608 = validateParameter(valid_604608, JArray, required = false,
                                 default = nil)
  if valid_604608 != nil:
    section.add "MessageDsn.ExtensionFields", valid_604608
  var valid_604609 = formData.getOrDefault("BounceSender")
  valid_604609 = validateParameter(valid_604609, JString, required = true,
                                 default = nil)
  if valid_604609 != nil:
    section.add "BounceSender", valid_604609
  var valid_604610 = formData.getOrDefault("Explanation")
  valid_604610 = validateParameter(valid_604610, JString, required = false,
                                 default = nil)
  if valid_604610 != nil:
    section.add "Explanation", valid_604610
  var valid_604611 = formData.getOrDefault("MessageDsn.ArrivalDate")
  valid_604611 = validateParameter(valid_604611, JString, required = false,
                                 default = nil)
  if valid_604611 != nil:
    section.add "MessageDsn.ArrivalDate", valid_604611
  var valid_604612 = formData.getOrDefault("BouncedRecipientInfoList")
  valid_604612 = validateParameter(valid_604612, JArray, required = true, default = nil)
  if valid_604612 != nil:
    section.add "BouncedRecipientInfoList", valid_604612
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604613: Call_PostSendBounce_604593; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Generates and sends a bounce message to the sender of an email you received through Amazon SES. You can only use this API on an email up to 24 hours after you receive it.</p> <note> <p>You cannot use this API to send generic bounces for mail that was not received by Amazon SES.</p> </note> <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604613.validator(path, query, header, formData, body)
  let scheme = call_604613.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604613.url(scheme.get, call_604613.host, call_604613.base,
                         call_604613.route, valid.getOrDefault("path"))
  result = hook(call_604613, url, valid)

proc call*(call_604614: Call_PostSendBounce_604593; OriginalMessageId: string;
          BounceSender: string; BouncedRecipientInfoList: JsonNode;
          BounceSenderArn: string = ""; MessageDsnReportingMta: string = "";
          MessageDsnExtensionFields: JsonNode = nil; Explanation: string = "";
          Action: string = "SendBounce"; MessageDsnArrivalDate: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## postSendBounce
  ## <p>Generates and sends a bounce message to the sender of an email you received through Amazon SES. You can only use this API on an email up to 24 hours after you receive it.</p> <note> <p>You cannot use this API to send generic bounces for mail that was not received by Amazon SES.</p> </note> <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   OriginalMessageId: string (required)
  ##                    : The message ID of the message to be bounced.
  ##   BounceSenderArn: string
  ##                  : This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the address in the "From" header of the bounce. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.
  ##   MessageDsnReportingMta: string
  ##                         : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## The reporting MTA that attempted to deliver the message, formatted as specified in <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a> (<code>mta-name-type; mta-name</code>). The default value is <code>dns; inbound-smtp.[region].amazonaws.com</code>.
  ##   MessageDsnExtensionFields: JArray
  ##                            : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## Additional X-headers to include in the DSN.
  ##   BounceSender: string (required)
  ##               : The address to use in the "From" header of the bounce message. This must be an identity that you have verified with Amazon SES.
  ##   Explanation: string
  ##              : Human-readable text for the bounce message to explain the failure. If not specified, the text will be auto-generated based on the bounced recipient information.
  ##   Action: string (required)
  ##   MessageDsnArrivalDate: string
  ##                        : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## When the message was received by the reporting mail transfer agent (MTA), in <a href="https://www.ietf.org/rfc/rfc0822.txt">RFC 822</a> date-time format.
  ##   BouncedRecipientInfoList: JArray (required)
  ##                           : A list of recipients of the bounced message, including the information required to create the Delivery Status Notifications (DSNs) for the recipients. You must specify at least one <code>BouncedRecipientInfo</code> in the list.
  ##   Version: string (required)
  var query_604615 = newJObject()
  var formData_604616 = newJObject()
  add(formData_604616, "OriginalMessageId", newJString(OriginalMessageId))
  add(formData_604616, "BounceSenderArn", newJString(BounceSenderArn))
  add(formData_604616, "MessageDsn.ReportingMta",
      newJString(MessageDsnReportingMta))
  if MessageDsnExtensionFields != nil:
    formData_604616.add "MessageDsn.ExtensionFields", MessageDsnExtensionFields
  add(formData_604616, "BounceSender", newJString(BounceSender))
  add(formData_604616, "Explanation", newJString(Explanation))
  add(query_604615, "Action", newJString(Action))
  add(formData_604616, "MessageDsn.ArrivalDate", newJString(MessageDsnArrivalDate))
  if BouncedRecipientInfoList != nil:
    formData_604616.add "BouncedRecipientInfoList", BouncedRecipientInfoList
  add(query_604615, "Version", newJString(Version))
  result = call_604614.call(nil, query_604615, nil, formData_604616, nil)

var postSendBounce* = Call_PostSendBounce_604593(name: "postSendBounce",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=SendBounce", validator: validate_PostSendBounce_604594,
    base: "/", url: url_PostSendBounce_604595, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSendBounce_604570 = ref object of OpenApiRestCall_602433
proc url_GetSendBounce_604572(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSendBounce_604571(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates and sends a bounce message to the sender of an email you received through Amazon SES. You can only use this API on an email up to 24 hours after you receive it.</p> <note> <p>You cannot use this API to send generic bounces for mail that was not received by Amazon SES.</p> </note> <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Explanation: JString
  ##              : Human-readable text for the bounce message to explain the failure. If not specified, the text will be auto-generated based on the bounced recipient information.
  ##   BounceSender: JString (required)
  ##               : The address to use in the "From" header of the bounce message. This must be an identity that you have verified with Amazon SES.
  ##   OriginalMessageId: JString (required)
  ##                    : The message ID of the message to be bounced.
  ##   BouncedRecipientInfoList: JArray (required)
  ##                           : A list of recipients of the bounced message, including the information required to create the Delivery Status Notifications (DSNs) for the recipients. You must specify at least one <code>BouncedRecipientInfo</code> in the list.
  ##   Action: JString (required)
  ##   BounceSenderArn: JString
  ##                  : This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the address in the "From" header of the bounce. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.
  ##   MessageDsn.ArrivalDate: JString
  ##                         : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## When the message was received by the reporting mail transfer agent (MTA), in <a href="https://www.ietf.org/rfc/rfc0822.txt">RFC 822</a> date-time format.
  ##   MessageDsn.ReportingMta: JString
  ##                          : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## The reporting MTA that attempted to deliver the message, formatted as specified in <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a> (<code>mta-name-type; mta-name</code>). The default value is <code>dns; inbound-smtp.[region].amazonaws.com</code>.
  ##   Version: JString (required)
  ##   MessageDsn.ExtensionFields: JArray
  ##                             : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## Additional X-headers to include in the DSN.
  section = newJObject()
  var valid_604573 = query.getOrDefault("Explanation")
  valid_604573 = validateParameter(valid_604573, JString, required = false,
                                 default = nil)
  if valid_604573 != nil:
    section.add "Explanation", valid_604573
  assert query != nil,
        "query argument is necessary due to required `BounceSender` field"
  var valid_604574 = query.getOrDefault("BounceSender")
  valid_604574 = validateParameter(valid_604574, JString, required = true,
                                 default = nil)
  if valid_604574 != nil:
    section.add "BounceSender", valid_604574
  var valid_604575 = query.getOrDefault("OriginalMessageId")
  valid_604575 = validateParameter(valid_604575, JString, required = true,
                                 default = nil)
  if valid_604575 != nil:
    section.add "OriginalMessageId", valid_604575
  var valid_604576 = query.getOrDefault("BouncedRecipientInfoList")
  valid_604576 = validateParameter(valid_604576, JArray, required = true, default = nil)
  if valid_604576 != nil:
    section.add "BouncedRecipientInfoList", valid_604576
  var valid_604577 = query.getOrDefault("Action")
  valid_604577 = validateParameter(valid_604577, JString, required = true,
                                 default = newJString("SendBounce"))
  if valid_604577 != nil:
    section.add "Action", valid_604577
  var valid_604578 = query.getOrDefault("BounceSenderArn")
  valid_604578 = validateParameter(valid_604578, JString, required = false,
                                 default = nil)
  if valid_604578 != nil:
    section.add "BounceSenderArn", valid_604578
  var valid_604579 = query.getOrDefault("MessageDsn.ArrivalDate")
  valid_604579 = validateParameter(valid_604579, JString, required = false,
                                 default = nil)
  if valid_604579 != nil:
    section.add "MessageDsn.ArrivalDate", valid_604579
  var valid_604580 = query.getOrDefault("MessageDsn.ReportingMta")
  valid_604580 = validateParameter(valid_604580, JString, required = false,
                                 default = nil)
  if valid_604580 != nil:
    section.add "MessageDsn.ReportingMta", valid_604580
  var valid_604581 = query.getOrDefault("Version")
  valid_604581 = validateParameter(valid_604581, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604581 != nil:
    section.add "Version", valid_604581
  var valid_604582 = query.getOrDefault("MessageDsn.ExtensionFields")
  valid_604582 = validateParameter(valid_604582, JArray, required = false,
                                 default = nil)
  if valid_604582 != nil:
    section.add "MessageDsn.ExtensionFields", valid_604582
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604583 = header.getOrDefault("X-Amz-Date")
  valid_604583 = validateParameter(valid_604583, JString, required = false,
                                 default = nil)
  if valid_604583 != nil:
    section.add "X-Amz-Date", valid_604583
  var valid_604584 = header.getOrDefault("X-Amz-Security-Token")
  valid_604584 = validateParameter(valid_604584, JString, required = false,
                                 default = nil)
  if valid_604584 != nil:
    section.add "X-Amz-Security-Token", valid_604584
  var valid_604585 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604585 = validateParameter(valid_604585, JString, required = false,
                                 default = nil)
  if valid_604585 != nil:
    section.add "X-Amz-Content-Sha256", valid_604585
  var valid_604586 = header.getOrDefault("X-Amz-Algorithm")
  valid_604586 = validateParameter(valid_604586, JString, required = false,
                                 default = nil)
  if valid_604586 != nil:
    section.add "X-Amz-Algorithm", valid_604586
  var valid_604587 = header.getOrDefault("X-Amz-Signature")
  valid_604587 = validateParameter(valid_604587, JString, required = false,
                                 default = nil)
  if valid_604587 != nil:
    section.add "X-Amz-Signature", valid_604587
  var valid_604588 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604588 = validateParameter(valid_604588, JString, required = false,
                                 default = nil)
  if valid_604588 != nil:
    section.add "X-Amz-SignedHeaders", valid_604588
  var valid_604589 = header.getOrDefault("X-Amz-Credential")
  valid_604589 = validateParameter(valid_604589, JString, required = false,
                                 default = nil)
  if valid_604589 != nil:
    section.add "X-Amz-Credential", valid_604589
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604590: Call_GetSendBounce_604570; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Generates and sends a bounce message to the sender of an email you received through Amazon SES. You can only use this API on an email up to 24 hours after you receive it.</p> <note> <p>You cannot use this API to send generic bounces for mail that was not received by Amazon SES.</p> </note> <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604590.validator(path, query, header, formData, body)
  let scheme = call_604590.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604590.url(scheme.get, call_604590.host, call_604590.base,
                         call_604590.route, valid.getOrDefault("path"))
  result = hook(call_604590, url, valid)

proc call*(call_604591: Call_GetSendBounce_604570; BounceSender: string;
          OriginalMessageId: string; BouncedRecipientInfoList: JsonNode;
          Explanation: string = ""; Action: string = "SendBounce";
          BounceSenderArn: string = ""; MessageDsnArrivalDate: string = "";
          MessageDsnReportingMta: string = ""; Version: string = "2010-12-01";
          MessageDsnExtensionFields: JsonNode = nil): Recallable =
  ## getSendBounce
  ## <p>Generates and sends a bounce message to the sender of an email you received through Amazon SES. You can only use this API on an email up to 24 hours after you receive it.</p> <note> <p>You cannot use this API to send generic bounces for mail that was not received by Amazon SES.</p> </note> <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Explanation: string
  ##              : Human-readable text for the bounce message to explain the failure. If not specified, the text will be auto-generated based on the bounced recipient information.
  ##   BounceSender: string (required)
  ##               : The address to use in the "From" header of the bounce message. This must be an identity that you have verified with Amazon SES.
  ##   OriginalMessageId: string (required)
  ##                    : The message ID of the message to be bounced.
  ##   BouncedRecipientInfoList: JArray (required)
  ##                           : A list of recipients of the bounced message, including the information required to create the Delivery Status Notifications (DSNs) for the recipients. You must specify at least one <code>BouncedRecipientInfo</code> in the list.
  ##   Action: string (required)
  ##   BounceSenderArn: string
  ##                  : This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the address in the "From" header of the bounce. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.
  ##   MessageDsnArrivalDate: string
  ##                        : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## When the message was received by the reporting mail transfer agent (MTA), in <a href="https://www.ietf.org/rfc/rfc0822.txt">RFC 822</a> date-time format.
  ##   MessageDsnReportingMta: string
  ##                         : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## The reporting MTA that attempted to deliver the message, formatted as specified in <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a> (<code>mta-name-type; mta-name</code>). The default value is <code>dns; inbound-smtp.[region].amazonaws.com</code>.
  ##   Version: string (required)
  ##   MessageDsnExtensionFields: JArray
  ##                            : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## Additional X-headers to include in the DSN.
  var query_604592 = newJObject()
  add(query_604592, "Explanation", newJString(Explanation))
  add(query_604592, "BounceSender", newJString(BounceSender))
  add(query_604592, "OriginalMessageId", newJString(OriginalMessageId))
  if BouncedRecipientInfoList != nil:
    query_604592.add "BouncedRecipientInfoList", BouncedRecipientInfoList
  add(query_604592, "Action", newJString(Action))
  add(query_604592, "BounceSenderArn", newJString(BounceSenderArn))
  add(query_604592, "MessageDsn.ArrivalDate", newJString(MessageDsnArrivalDate))
  add(query_604592, "MessageDsn.ReportingMta", newJString(MessageDsnReportingMta))
  add(query_604592, "Version", newJString(Version))
  if MessageDsnExtensionFields != nil:
    query_604592.add "MessageDsn.ExtensionFields", MessageDsnExtensionFields
  result = call_604591.call(nil, query_604592, nil, nil, nil)

var getSendBounce* = Call_GetSendBounce_604570(name: "getSendBounce",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=SendBounce", validator: validate_GetSendBounce_604571,
    base: "/", url: url_GetSendBounce_604572, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSendBulkTemplatedEmail_604643 = ref object of OpenApiRestCall_602433
proc url_PostSendBulkTemplatedEmail_604645(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSendBulkTemplatedEmail_604644(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Composes an email message to multiple destinations. The message body is created using an email template.</p> <p>In order to send email using the <code>SendBulkTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Each <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendBulkTemplatedEmail</code> operation several times to send the message to each group.</p> </li> <li> <p>The number of destinations you can contact in a single call to the API may be limited by your account's maximum sending rate.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604646 = query.getOrDefault("Action")
  valid_604646 = validateParameter(valid_604646, JString, required = true,
                                 default = newJString("SendBulkTemplatedEmail"))
  if valid_604646 != nil:
    section.add "Action", valid_604646
  var valid_604647 = query.getOrDefault("Version")
  valid_604647 = validateParameter(valid_604647, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604647 != nil:
    section.add "Version", valid_604647
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604648 = header.getOrDefault("X-Amz-Date")
  valid_604648 = validateParameter(valid_604648, JString, required = false,
                                 default = nil)
  if valid_604648 != nil:
    section.add "X-Amz-Date", valid_604648
  var valid_604649 = header.getOrDefault("X-Amz-Security-Token")
  valid_604649 = validateParameter(valid_604649, JString, required = false,
                                 default = nil)
  if valid_604649 != nil:
    section.add "X-Amz-Security-Token", valid_604649
  var valid_604650 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604650 = validateParameter(valid_604650, JString, required = false,
                                 default = nil)
  if valid_604650 != nil:
    section.add "X-Amz-Content-Sha256", valid_604650
  var valid_604651 = header.getOrDefault("X-Amz-Algorithm")
  valid_604651 = validateParameter(valid_604651, JString, required = false,
                                 default = nil)
  if valid_604651 != nil:
    section.add "X-Amz-Algorithm", valid_604651
  var valid_604652 = header.getOrDefault("X-Amz-Signature")
  valid_604652 = validateParameter(valid_604652, JString, required = false,
                                 default = nil)
  if valid_604652 != nil:
    section.add "X-Amz-Signature", valid_604652
  var valid_604653 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604653 = validateParameter(valid_604653, JString, required = false,
                                 default = nil)
  if valid_604653 != nil:
    section.add "X-Amz-SignedHeaders", valid_604653
  var valid_604654 = header.getOrDefault("X-Amz-Credential")
  valid_604654 = validateParameter(valid_604654, JString, required = false,
                                 default = nil)
  if valid_604654 != nil:
    section.add "X-Amz-Credential", valid_604654
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendBulkTemplatedEmail</code>.
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Destinations: JArray (required)
  ##               : One or more <code>Destination</code> objects. All of the recipients in a <code>Destination</code> will receive the same version of the email. You can specify up to 50 <code>Destination</code> objects within a <code>Destinations</code> array.
  ##   DefaultTags: JArray
  ##              : A list of tags, in the form of name/value pairs, to apply to an email that you send to a destination using <code>SendBulkTemplatedEmail</code>.
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Template: JString (required)
  ##           : The template to use when sending this email.
  ##   ReturnPath: JString
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   DefaultTemplateData: JString
  ##                      : <p>A list of replacement values to apply to the template when replacement data is not specified in a Destination object. These values act as a default or fallback option when no other data is available.</p> <p>The template data is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.</p>
  ##   TemplateArn: JString
  ##              : The ARN of the template to use when sending this email.
  ##   Source: JString (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  section = newJObject()
  var valid_604655 = formData.getOrDefault("ConfigurationSetName")
  valid_604655 = validateParameter(valid_604655, JString, required = false,
                                 default = nil)
  if valid_604655 != nil:
    section.add "ConfigurationSetName", valid_604655
  var valid_604656 = formData.getOrDefault("SourceArn")
  valid_604656 = validateParameter(valid_604656, JString, required = false,
                                 default = nil)
  if valid_604656 != nil:
    section.add "SourceArn", valid_604656
  assert formData != nil,
        "formData argument is necessary due to required `Destinations` field"
  var valid_604657 = formData.getOrDefault("Destinations")
  valid_604657 = validateParameter(valid_604657, JArray, required = true, default = nil)
  if valid_604657 != nil:
    section.add "Destinations", valid_604657
  var valid_604658 = formData.getOrDefault("DefaultTags")
  valid_604658 = validateParameter(valid_604658, JArray, required = false,
                                 default = nil)
  if valid_604658 != nil:
    section.add "DefaultTags", valid_604658
  var valid_604659 = formData.getOrDefault("ReplyToAddresses")
  valid_604659 = validateParameter(valid_604659, JArray, required = false,
                                 default = nil)
  if valid_604659 != nil:
    section.add "ReplyToAddresses", valid_604659
  var valid_604660 = formData.getOrDefault("Template")
  valid_604660 = validateParameter(valid_604660, JString, required = true,
                                 default = nil)
  if valid_604660 != nil:
    section.add "Template", valid_604660
  var valid_604661 = formData.getOrDefault("ReturnPath")
  valid_604661 = validateParameter(valid_604661, JString, required = false,
                                 default = nil)
  if valid_604661 != nil:
    section.add "ReturnPath", valid_604661
  var valid_604662 = formData.getOrDefault("ReturnPathArn")
  valid_604662 = validateParameter(valid_604662, JString, required = false,
                                 default = nil)
  if valid_604662 != nil:
    section.add "ReturnPathArn", valid_604662
  var valid_604663 = formData.getOrDefault("DefaultTemplateData")
  valid_604663 = validateParameter(valid_604663, JString, required = false,
                                 default = nil)
  if valid_604663 != nil:
    section.add "DefaultTemplateData", valid_604663
  var valid_604664 = formData.getOrDefault("TemplateArn")
  valid_604664 = validateParameter(valid_604664, JString, required = false,
                                 default = nil)
  if valid_604664 != nil:
    section.add "TemplateArn", valid_604664
  var valid_604665 = formData.getOrDefault("Source")
  valid_604665 = validateParameter(valid_604665, JString, required = true,
                                 default = nil)
  if valid_604665 != nil:
    section.add "Source", valid_604665
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604666: Call_PostSendBulkTemplatedEmail_604643; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message to multiple destinations. The message body is created using an email template.</p> <p>In order to send email using the <code>SendBulkTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Each <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendBulkTemplatedEmail</code> operation several times to send the message to each group.</p> </li> <li> <p>The number of destinations you can contact in a single call to the API may be limited by your account's maximum sending rate.</p> </li> </ul>
  ## 
  let valid = call_604666.validator(path, query, header, formData, body)
  let scheme = call_604666.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604666.url(scheme.get, call_604666.host, call_604666.base,
                         call_604666.route, valid.getOrDefault("path"))
  result = hook(call_604666, url, valid)

proc call*(call_604667: Call_PostSendBulkTemplatedEmail_604643;
          Destinations: JsonNode; Template: string; Source: string;
          ConfigurationSetName: string = ""; SourceArn: string = "";
          DefaultTags: JsonNode = nil; ReplyToAddresses: JsonNode = nil;
          ReturnPath: string = ""; ReturnPathArn: string = "";
          Action: string = "SendBulkTemplatedEmail";
          DefaultTemplateData: string = ""; TemplateArn: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## postSendBulkTemplatedEmail
  ## <p>Composes an email message to multiple destinations. The message body is created using an email template.</p> <p>In order to send email using the <code>SendBulkTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Each <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendBulkTemplatedEmail</code> operation several times to send the message to each group.</p> </li> <li> <p>The number of destinations you can contact in a single call to the API may be limited by your account's maximum sending rate.</p> </li> </ul>
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendBulkTemplatedEmail</code>.
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Destinations: JArray (required)
  ##               : One or more <code>Destination</code> objects. All of the recipients in a <code>Destination</code> will receive the same version of the email. You can specify up to 50 <code>Destination</code> objects within a <code>Destinations</code> array.
  ##   DefaultTags: JArray
  ##              : A list of tags, in the form of name/value pairs, to apply to an email that you send to a destination using <code>SendBulkTemplatedEmail</code>.
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Template: string (required)
  ##           : The template to use when sending this email.
  ##   ReturnPath: string
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Action: string (required)
  ##   DefaultTemplateData: string
  ##                      : <p>A list of replacement values to apply to the template when replacement data is not specified in a Destination object. These values act as a default or fallback option when no other data is available.</p> <p>The template data is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.</p>
  ##   TemplateArn: string
  ##              : The ARN of the template to use when sending this email.
  ##   Version: string (required)
  ##   Source: string (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  var query_604668 = newJObject()
  var formData_604669 = newJObject()
  add(formData_604669, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_604669, "SourceArn", newJString(SourceArn))
  if Destinations != nil:
    formData_604669.add "Destinations", Destinations
  if DefaultTags != nil:
    formData_604669.add "DefaultTags", DefaultTags
  if ReplyToAddresses != nil:
    formData_604669.add "ReplyToAddresses", ReplyToAddresses
  add(formData_604669, "Template", newJString(Template))
  add(formData_604669, "ReturnPath", newJString(ReturnPath))
  add(formData_604669, "ReturnPathArn", newJString(ReturnPathArn))
  add(query_604668, "Action", newJString(Action))
  add(formData_604669, "DefaultTemplateData", newJString(DefaultTemplateData))
  add(formData_604669, "TemplateArn", newJString(TemplateArn))
  add(query_604668, "Version", newJString(Version))
  add(formData_604669, "Source", newJString(Source))
  result = call_604667.call(nil, query_604668, nil, formData_604669, nil)

var postSendBulkTemplatedEmail* = Call_PostSendBulkTemplatedEmail_604643(
    name: "postSendBulkTemplatedEmail", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SendBulkTemplatedEmail",
    validator: validate_PostSendBulkTemplatedEmail_604644, base: "/",
    url: url_PostSendBulkTemplatedEmail_604645,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSendBulkTemplatedEmail_604617 = ref object of OpenApiRestCall_602433
proc url_GetSendBulkTemplatedEmail_604619(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSendBulkTemplatedEmail_604618(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Composes an email message to multiple destinations. The message body is created using an email template.</p> <p>In order to send email using the <code>SendBulkTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Each <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendBulkTemplatedEmail</code> operation several times to send the message to each group.</p> </li> <li> <p>The number of destinations you can contact in a single call to the API may be limited by your account's maximum sending rate.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Template: JString (required)
  ##           : The template to use when sending this email.
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   TemplateArn: JString
  ##              : The ARN of the template to use when sending this email.
  ##   DefaultTemplateData: JString
  ##                      : <p>A list of replacement values to apply to the template when replacement data is not specified in a Destination object. These values act as a default or fallback option when no other data is available.</p> <p>The template data is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.</p>
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   DefaultTags: JArray
  ##              : A list of tags, in the form of name/value pairs, to apply to an email that you send to a destination using <code>SendBulkTemplatedEmail</code>.
  ##   Action: JString (required)
  ##   Destinations: JArray (required)
  ##               : One or more <code>Destination</code> objects. All of the recipients in a <code>Destination</code> will receive the same version of the email. You can specify up to 50 <code>Destination</code> objects within a <code>Destinations</code> array.
  ##   Source: JString (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   ReturnPath: JString
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendBulkTemplatedEmail</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_604620 = query.getOrDefault("ReplyToAddresses")
  valid_604620 = validateParameter(valid_604620, JArray, required = false,
                                 default = nil)
  if valid_604620 != nil:
    section.add "ReplyToAddresses", valid_604620
  assert query != nil,
        "query argument is necessary due to required `Template` field"
  var valid_604621 = query.getOrDefault("Template")
  valid_604621 = validateParameter(valid_604621, JString, required = true,
                                 default = nil)
  if valid_604621 != nil:
    section.add "Template", valid_604621
  var valid_604622 = query.getOrDefault("ReturnPathArn")
  valid_604622 = validateParameter(valid_604622, JString, required = false,
                                 default = nil)
  if valid_604622 != nil:
    section.add "ReturnPathArn", valid_604622
  var valid_604623 = query.getOrDefault("TemplateArn")
  valid_604623 = validateParameter(valid_604623, JString, required = false,
                                 default = nil)
  if valid_604623 != nil:
    section.add "TemplateArn", valid_604623
  var valid_604624 = query.getOrDefault("DefaultTemplateData")
  valid_604624 = validateParameter(valid_604624, JString, required = false,
                                 default = nil)
  if valid_604624 != nil:
    section.add "DefaultTemplateData", valid_604624
  var valid_604625 = query.getOrDefault("SourceArn")
  valid_604625 = validateParameter(valid_604625, JString, required = false,
                                 default = nil)
  if valid_604625 != nil:
    section.add "SourceArn", valid_604625
  var valid_604626 = query.getOrDefault("DefaultTags")
  valid_604626 = validateParameter(valid_604626, JArray, required = false,
                                 default = nil)
  if valid_604626 != nil:
    section.add "DefaultTags", valid_604626
  var valid_604627 = query.getOrDefault("Action")
  valid_604627 = validateParameter(valid_604627, JString, required = true,
                                 default = newJString("SendBulkTemplatedEmail"))
  if valid_604627 != nil:
    section.add "Action", valid_604627
  var valid_604628 = query.getOrDefault("Destinations")
  valid_604628 = validateParameter(valid_604628, JArray, required = true, default = nil)
  if valid_604628 != nil:
    section.add "Destinations", valid_604628
  var valid_604629 = query.getOrDefault("Source")
  valid_604629 = validateParameter(valid_604629, JString, required = true,
                                 default = nil)
  if valid_604629 != nil:
    section.add "Source", valid_604629
  var valid_604630 = query.getOrDefault("ReturnPath")
  valid_604630 = validateParameter(valid_604630, JString, required = false,
                                 default = nil)
  if valid_604630 != nil:
    section.add "ReturnPath", valid_604630
  var valid_604631 = query.getOrDefault("ConfigurationSetName")
  valid_604631 = validateParameter(valid_604631, JString, required = false,
                                 default = nil)
  if valid_604631 != nil:
    section.add "ConfigurationSetName", valid_604631
  var valid_604632 = query.getOrDefault("Version")
  valid_604632 = validateParameter(valid_604632, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604632 != nil:
    section.add "Version", valid_604632
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604633 = header.getOrDefault("X-Amz-Date")
  valid_604633 = validateParameter(valid_604633, JString, required = false,
                                 default = nil)
  if valid_604633 != nil:
    section.add "X-Amz-Date", valid_604633
  var valid_604634 = header.getOrDefault("X-Amz-Security-Token")
  valid_604634 = validateParameter(valid_604634, JString, required = false,
                                 default = nil)
  if valid_604634 != nil:
    section.add "X-Amz-Security-Token", valid_604634
  var valid_604635 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604635 = validateParameter(valid_604635, JString, required = false,
                                 default = nil)
  if valid_604635 != nil:
    section.add "X-Amz-Content-Sha256", valid_604635
  var valid_604636 = header.getOrDefault("X-Amz-Algorithm")
  valid_604636 = validateParameter(valid_604636, JString, required = false,
                                 default = nil)
  if valid_604636 != nil:
    section.add "X-Amz-Algorithm", valid_604636
  var valid_604637 = header.getOrDefault("X-Amz-Signature")
  valid_604637 = validateParameter(valid_604637, JString, required = false,
                                 default = nil)
  if valid_604637 != nil:
    section.add "X-Amz-Signature", valid_604637
  var valid_604638 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604638 = validateParameter(valid_604638, JString, required = false,
                                 default = nil)
  if valid_604638 != nil:
    section.add "X-Amz-SignedHeaders", valid_604638
  var valid_604639 = header.getOrDefault("X-Amz-Credential")
  valid_604639 = validateParameter(valid_604639, JString, required = false,
                                 default = nil)
  if valid_604639 != nil:
    section.add "X-Amz-Credential", valid_604639
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604640: Call_GetSendBulkTemplatedEmail_604617; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message to multiple destinations. The message body is created using an email template.</p> <p>In order to send email using the <code>SendBulkTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Each <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendBulkTemplatedEmail</code> operation several times to send the message to each group.</p> </li> <li> <p>The number of destinations you can contact in a single call to the API may be limited by your account's maximum sending rate.</p> </li> </ul>
  ## 
  let valid = call_604640.validator(path, query, header, formData, body)
  let scheme = call_604640.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604640.url(scheme.get, call_604640.host, call_604640.base,
                         call_604640.route, valid.getOrDefault("path"))
  result = hook(call_604640, url, valid)

proc call*(call_604641: Call_GetSendBulkTemplatedEmail_604617; Template: string;
          Destinations: JsonNode; Source: string; ReplyToAddresses: JsonNode = nil;
          ReturnPathArn: string = ""; TemplateArn: string = "";
          DefaultTemplateData: string = ""; SourceArn: string = "";
          DefaultTags: JsonNode = nil; Action: string = "SendBulkTemplatedEmail";
          ReturnPath: string = ""; ConfigurationSetName: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## getSendBulkTemplatedEmail
  ## <p>Composes an email message to multiple destinations. The message body is created using an email template.</p> <p>In order to send email using the <code>SendBulkTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Each <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendBulkTemplatedEmail</code> operation several times to send the message to each group.</p> </li> <li> <p>The number of destinations you can contact in a single call to the API may be limited by your account's maximum sending rate.</p> </li> </ul>
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Template: string (required)
  ##           : The template to use when sending this email.
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   TemplateArn: string
  ##              : The ARN of the template to use when sending this email.
  ##   DefaultTemplateData: string
  ##                      : <p>A list of replacement values to apply to the template when replacement data is not specified in a Destination object. These values act as a default or fallback option when no other data is available.</p> <p>The template data is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.</p>
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   DefaultTags: JArray
  ##              : A list of tags, in the form of name/value pairs, to apply to an email that you send to a destination using <code>SendBulkTemplatedEmail</code>.
  ##   Action: string (required)
  ##   Destinations: JArray (required)
  ##               : One or more <code>Destination</code> objects. All of the recipients in a <code>Destination</code> will receive the same version of the email. You can specify up to 50 <code>Destination</code> objects within a <code>Destinations</code> array.
  ##   Source: string (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   ReturnPath: string
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendBulkTemplatedEmail</code>.
  ##   Version: string (required)
  var query_604642 = newJObject()
  if ReplyToAddresses != nil:
    query_604642.add "ReplyToAddresses", ReplyToAddresses
  add(query_604642, "Template", newJString(Template))
  add(query_604642, "ReturnPathArn", newJString(ReturnPathArn))
  add(query_604642, "TemplateArn", newJString(TemplateArn))
  add(query_604642, "DefaultTemplateData", newJString(DefaultTemplateData))
  add(query_604642, "SourceArn", newJString(SourceArn))
  if DefaultTags != nil:
    query_604642.add "DefaultTags", DefaultTags
  add(query_604642, "Action", newJString(Action))
  if Destinations != nil:
    query_604642.add "Destinations", Destinations
  add(query_604642, "Source", newJString(Source))
  add(query_604642, "ReturnPath", newJString(ReturnPath))
  add(query_604642, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_604642, "Version", newJString(Version))
  result = call_604641.call(nil, query_604642, nil, nil, nil)

var getSendBulkTemplatedEmail* = Call_GetSendBulkTemplatedEmail_604617(
    name: "getSendBulkTemplatedEmail", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SendBulkTemplatedEmail",
    validator: validate_GetSendBulkTemplatedEmail_604618, base: "/",
    url: url_GetSendBulkTemplatedEmail_604619,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSendCustomVerificationEmail_604688 = ref object of OpenApiRestCall_602433
proc url_PostSendCustomVerificationEmail_604690(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSendCustomVerificationEmail_604689(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address.</p> <p>To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604691 = query.getOrDefault("Action")
  valid_604691 = validateParameter(valid_604691, JString, required = true, default = newJString(
      "SendCustomVerificationEmail"))
  if valid_604691 != nil:
    section.add "Action", valid_604691
  var valid_604692 = query.getOrDefault("Version")
  valid_604692 = validateParameter(valid_604692, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604692 != nil:
    section.add "Version", valid_604692
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604693 = header.getOrDefault("X-Amz-Date")
  valid_604693 = validateParameter(valid_604693, JString, required = false,
                                 default = nil)
  if valid_604693 != nil:
    section.add "X-Amz-Date", valid_604693
  var valid_604694 = header.getOrDefault("X-Amz-Security-Token")
  valid_604694 = validateParameter(valid_604694, JString, required = false,
                                 default = nil)
  if valid_604694 != nil:
    section.add "X-Amz-Security-Token", valid_604694
  var valid_604695 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604695 = validateParameter(valid_604695, JString, required = false,
                                 default = nil)
  if valid_604695 != nil:
    section.add "X-Amz-Content-Sha256", valid_604695
  var valid_604696 = header.getOrDefault("X-Amz-Algorithm")
  valid_604696 = validateParameter(valid_604696, JString, required = false,
                                 default = nil)
  if valid_604696 != nil:
    section.add "X-Amz-Algorithm", valid_604696
  var valid_604697 = header.getOrDefault("X-Amz-Signature")
  valid_604697 = validateParameter(valid_604697, JString, required = false,
                                 default = nil)
  if valid_604697 != nil:
    section.add "X-Amz-Signature", valid_604697
  var valid_604698 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604698 = validateParameter(valid_604698, JString, required = false,
                                 default = nil)
  if valid_604698 != nil:
    section.add "X-Amz-SignedHeaders", valid_604698
  var valid_604699 = header.getOrDefault("X-Amz-Credential")
  valid_604699 = validateParameter(valid_604699, JString, required = false,
                                 default = nil)
  if valid_604699 != nil:
    section.add "X-Amz-Credential", valid_604699
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString
  ##                       : Name of a configuration set to use when sending the verification email.
  ##   EmailAddress: JString (required)
  ##               : The email address to verify.
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template to use when sending the verification email.
  section = newJObject()
  var valid_604700 = formData.getOrDefault("ConfigurationSetName")
  valid_604700 = validateParameter(valid_604700, JString, required = false,
                                 default = nil)
  if valid_604700 != nil:
    section.add "ConfigurationSetName", valid_604700
  assert formData != nil,
        "formData argument is necessary due to required `EmailAddress` field"
  var valid_604701 = formData.getOrDefault("EmailAddress")
  valid_604701 = validateParameter(valid_604701, JString, required = true,
                                 default = nil)
  if valid_604701 != nil:
    section.add "EmailAddress", valid_604701
  var valid_604702 = formData.getOrDefault("TemplateName")
  valid_604702 = validateParameter(valid_604702, JString, required = true,
                                 default = nil)
  if valid_604702 != nil:
    section.add "TemplateName", valid_604702
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604703: Call_PostSendCustomVerificationEmail_604688;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address.</p> <p>To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604703.validator(path, query, header, formData, body)
  let scheme = call_604703.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604703.url(scheme.get, call_604703.host, call_604703.base,
                         call_604703.route, valid.getOrDefault("path"))
  result = hook(call_604703, url, valid)

proc call*(call_604704: Call_PostSendCustomVerificationEmail_604688;
          EmailAddress: string; TemplateName: string;
          ConfigurationSetName: string = "";
          Action: string = "SendCustomVerificationEmail";
          Version: string = "2010-12-01"): Recallable =
  ## postSendCustomVerificationEmail
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address.</p> <p>To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string
  ##                       : Name of a configuration set to use when sending the verification email.
  ##   EmailAddress: string (required)
  ##               : The email address to verify.
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template to use when sending the verification email.
  ##   Version: string (required)
  var query_604705 = newJObject()
  var formData_604706 = newJObject()
  add(formData_604706, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_604706, "EmailAddress", newJString(EmailAddress))
  add(query_604705, "Action", newJString(Action))
  add(formData_604706, "TemplateName", newJString(TemplateName))
  add(query_604705, "Version", newJString(Version))
  result = call_604704.call(nil, query_604705, nil, formData_604706, nil)

var postSendCustomVerificationEmail* = Call_PostSendCustomVerificationEmail_604688(
    name: "postSendCustomVerificationEmail", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SendCustomVerificationEmail",
    validator: validate_PostSendCustomVerificationEmail_604689, base: "/",
    url: url_PostSendCustomVerificationEmail_604690,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSendCustomVerificationEmail_604670 = ref object of OpenApiRestCall_602433
proc url_GetSendCustomVerificationEmail_604672(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSendCustomVerificationEmail_604671(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address.</p> <p>To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template to use when sending the verification email.
  ##   EmailAddress: JString (required)
  ##               : The email address to verify.
  ##   ConfigurationSetName: JString
  ##                       : Name of a configuration set to use when sending the verification email.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604673 = query.getOrDefault("Action")
  valid_604673 = validateParameter(valid_604673, JString, required = true, default = newJString(
      "SendCustomVerificationEmail"))
  if valid_604673 != nil:
    section.add "Action", valid_604673
  var valid_604674 = query.getOrDefault("TemplateName")
  valid_604674 = validateParameter(valid_604674, JString, required = true,
                                 default = nil)
  if valid_604674 != nil:
    section.add "TemplateName", valid_604674
  var valid_604675 = query.getOrDefault("EmailAddress")
  valid_604675 = validateParameter(valid_604675, JString, required = true,
                                 default = nil)
  if valid_604675 != nil:
    section.add "EmailAddress", valid_604675
  var valid_604676 = query.getOrDefault("ConfigurationSetName")
  valid_604676 = validateParameter(valid_604676, JString, required = false,
                                 default = nil)
  if valid_604676 != nil:
    section.add "ConfigurationSetName", valid_604676
  var valid_604677 = query.getOrDefault("Version")
  valid_604677 = validateParameter(valid_604677, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604677 != nil:
    section.add "Version", valid_604677
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604678 = header.getOrDefault("X-Amz-Date")
  valid_604678 = validateParameter(valid_604678, JString, required = false,
                                 default = nil)
  if valid_604678 != nil:
    section.add "X-Amz-Date", valid_604678
  var valid_604679 = header.getOrDefault("X-Amz-Security-Token")
  valid_604679 = validateParameter(valid_604679, JString, required = false,
                                 default = nil)
  if valid_604679 != nil:
    section.add "X-Amz-Security-Token", valid_604679
  var valid_604680 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604680 = validateParameter(valid_604680, JString, required = false,
                                 default = nil)
  if valid_604680 != nil:
    section.add "X-Amz-Content-Sha256", valid_604680
  var valid_604681 = header.getOrDefault("X-Amz-Algorithm")
  valid_604681 = validateParameter(valid_604681, JString, required = false,
                                 default = nil)
  if valid_604681 != nil:
    section.add "X-Amz-Algorithm", valid_604681
  var valid_604682 = header.getOrDefault("X-Amz-Signature")
  valid_604682 = validateParameter(valid_604682, JString, required = false,
                                 default = nil)
  if valid_604682 != nil:
    section.add "X-Amz-Signature", valid_604682
  var valid_604683 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604683 = validateParameter(valid_604683, JString, required = false,
                                 default = nil)
  if valid_604683 != nil:
    section.add "X-Amz-SignedHeaders", valid_604683
  var valid_604684 = header.getOrDefault("X-Amz-Credential")
  valid_604684 = validateParameter(valid_604684, JString, required = false,
                                 default = nil)
  if valid_604684 != nil:
    section.add "X-Amz-Credential", valid_604684
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604685: Call_GetSendCustomVerificationEmail_604670; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address.</p> <p>To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604685.validator(path, query, header, formData, body)
  let scheme = call_604685.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604685.url(scheme.get, call_604685.host, call_604685.base,
                         call_604685.route, valid.getOrDefault("path"))
  result = hook(call_604685, url, valid)

proc call*(call_604686: Call_GetSendCustomVerificationEmail_604670;
          TemplateName: string; EmailAddress: string;
          Action: string = "SendCustomVerificationEmail";
          ConfigurationSetName: string = ""; Version: string = "2010-12-01"): Recallable =
  ## getSendCustomVerificationEmail
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address.</p> <p>To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template to use when sending the verification email.
  ##   EmailAddress: string (required)
  ##               : The email address to verify.
  ##   ConfigurationSetName: string
  ##                       : Name of a configuration set to use when sending the verification email.
  ##   Version: string (required)
  var query_604687 = newJObject()
  add(query_604687, "Action", newJString(Action))
  add(query_604687, "TemplateName", newJString(TemplateName))
  add(query_604687, "EmailAddress", newJString(EmailAddress))
  add(query_604687, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_604687, "Version", newJString(Version))
  result = call_604686.call(nil, query_604687, nil, nil, nil)

var getSendCustomVerificationEmail* = Call_GetSendCustomVerificationEmail_604670(
    name: "getSendCustomVerificationEmail", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SendCustomVerificationEmail",
    validator: validate_GetSendCustomVerificationEmail_604671, base: "/",
    url: url_GetSendCustomVerificationEmail_604672,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSendEmail_604734 = ref object of OpenApiRestCall_602433
proc url_PostSendEmail_604736(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSendEmail_604735(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Composes an email message and immediately queues it for sending. In order to send email using the <code>SendEmail</code> operation, your message must meet the following requirements:</p> <ul> <li> <p>The message must be sent from a verified email address or domain. If you attempt to send email using a non-verified address or domain, the operation will result in an "Email address not verified" error. </p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>The message must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendEmail</code> operation several times to send the message to each group.</p> </li> </ul> <important> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604737 = query.getOrDefault("Action")
  valid_604737 = validateParameter(valid_604737, JString, required = true,
                                 default = newJString("SendEmail"))
  if valid_604737 != nil:
    section.add "Action", valid_604737
  var valid_604738 = query.getOrDefault("Version")
  valid_604738 = validateParameter(valid_604738, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604738 != nil:
    section.add "Version", valid_604738
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604739 = header.getOrDefault("X-Amz-Date")
  valid_604739 = validateParameter(valid_604739, JString, required = false,
                                 default = nil)
  if valid_604739 != nil:
    section.add "X-Amz-Date", valid_604739
  var valid_604740 = header.getOrDefault("X-Amz-Security-Token")
  valid_604740 = validateParameter(valid_604740, JString, required = false,
                                 default = nil)
  if valid_604740 != nil:
    section.add "X-Amz-Security-Token", valid_604740
  var valid_604741 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604741 = validateParameter(valid_604741, JString, required = false,
                                 default = nil)
  if valid_604741 != nil:
    section.add "X-Amz-Content-Sha256", valid_604741
  var valid_604742 = header.getOrDefault("X-Amz-Algorithm")
  valid_604742 = validateParameter(valid_604742, JString, required = false,
                                 default = nil)
  if valid_604742 != nil:
    section.add "X-Amz-Algorithm", valid_604742
  var valid_604743 = header.getOrDefault("X-Amz-Signature")
  valid_604743 = validateParameter(valid_604743, JString, required = false,
                                 default = nil)
  if valid_604743 != nil:
    section.add "X-Amz-Signature", valid_604743
  var valid_604744 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604744 = validateParameter(valid_604744, JString, required = false,
                                 default = nil)
  if valid_604744 != nil:
    section.add "X-Amz-SignedHeaders", valid_604744
  var valid_604745 = header.getOrDefault("X-Amz-Credential")
  valid_604745 = validateParameter(valid_604745, JString, required = false,
                                 default = nil)
  if valid_604745 != nil:
    section.add "X-Amz-Credential", valid_604745
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendEmail</code>.
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Destination.BccAddresses: JArray
  ##                           : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Message.Body: JString
  ##               : Represents the message to be sent, composed of a subject and a body.
  ## The message body.
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ReturnPath: JString
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Destination.CcAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   Message.Subject: JString
  ##                  : Represents the message to be sent, composed of a subject and a body.
  ## The subject of the message: A short summary of the content, which will appear in the recipient's inbox.
  ##   Source: JString (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   Destination.ToAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  section = newJObject()
  var valid_604746 = formData.getOrDefault("ConfigurationSetName")
  valid_604746 = validateParameter(valid_604746, JString, required = false,
                                 default = nil)
  if valid_604746 != nil:
    section.add "ConfigurationSetName", valid_604746
  var valid_604747 = formData.getOrDefault("SourceArn")
  valid_604747 = validateParameter(valid_604747, JString, required = false,
                                 default = nil)
  if valid_604747 != nil:
    section.add "SourceArn", valid_604747
  var valid_604748 = formData.getOrDefault("Destination.BccAddresses")
  valid_604748 = validateParameter(valid_604748, JArray, required = false,
                                 default = nil)
  if valid_604748 != nil:
    section.add "Destination.BccAddresses", valid_604748
  var valid_604749 = formData.getOrDefault("ReplyToAddresses")
  valid_604749 = validateParameter(valid_604749, JArray, required = false,
                                 default = nil)
  if valid_604749 != nil:
    section.add "ReplyToAddresses", valid_604749
  var valid_604750 = formData.getOrDefault("Message.Body")
  valid_604750 = validateParameter(valid_604750, JString, required = false,
                                 default = nil)
  if valid_604750 != nil:
    section.add "Message.Body", valid_604750
  var valid_604751 = formData.getOrDefault("Tags")
  valid_604751 = validateParameter(valid_604751, JArray, required = false,
                                 default = nil)
  if valid_604751 != nil:
    section.add "Tags", valid_604751
  var valid_604752 = formData.getOrDefault("ReturnPath")
  valid_604752 = validateParameter(valid_604752, JString, required = false,
                                 default = nil)
  if valid_604752 != nil:
    section.add "ReturnPath", valid_604752
  var valid_604753 = formData.getOrDefault("ReturnPathArn")
  valid_604753 = validateParameter(valid_604753, JString, required = false,
                                 default = nil)
  if valid_604753 != nil:
    section.add "ReturnPathArn", valid_604753
  var valid_604754 = formData.getOrDefault("Destination.CcAddresses")
  valid_604754 = validateParameter(valid_604754, JArray, required = false,
                                 default = nil)
  if valid_604754 != nil:
    section.add "Destination.CcAddresses", valid_604754
  var valid_604755 = formData.getOrDefault("Message.Subject")
  valid_604755 = validateParameter(valid_604755, JString, required = false,
                                 default = nil)
  if valid_604755 != nil:
    section.add "Message.Subject", valid_604755
  assert formData != nil,
        "formData argument is necessary due to required `Source` field"
  var valid_604756 = formData.getOrDefault("Source")
  valid_604756 = validateParameter(valid_604756, JString, required = true,
                                 default = nil)
  if valid_604756 != nil:
    section.add "Source", valid_604756
  var valid_604757 = formData.getOrDefault("Destination.ToAddresses")
  valid_604757 = validateParameter(valid_604757, JArray, required = false,
                                 default = nil)
  if valid_604757 != nil:
    section.add "Destination.ToAddresses", valid_604757
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604758: Call_PostSendEmail_604734; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message and immediately queues it for sending. In order to send email using the <code>SendEmail</code> operation, your message must meet the following requirements:</p> <ul> <li> <p>The message must be sent from a verified email address or domain. If you attempt to send email using a non-verified address or domain, the operation will result in an "Email address not verified" error. </p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>The message must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendEmail</code> operation several times to send the message to each group.</p> </li> </ul> <important> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </important>
  ## 
  let valid = call_604758.validator(path, query, header, formData, body)
  let scheme = call_604758.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604758.url(scheme.get, call_604758.host, call_604758.base,
                         call_604758.route, valid.getOrDefault("path"))
  result = hook(call_604758, url, valid)

proc call*(call_604759: Call_PostSendEmail_604734; Source: string;
          ConfigurationSetName: string = ""; SourceArn: string = "";
          DestinationBccAddresses: JsonNode = nil; ReplyToAddresses: JsonNode = nil;
          MessageBody: string = ""; Tags: JsonNode = nil; ReturnPath: string = "";
          ReturnPathArn: string = ""; Action: string = "SendEmail";
          DestinationCcAddresses: JsonNode = nil; MessageSubject: string = "";
          Version: string = "2010-12-01"; DestinationToAddresses: JsonNode = nil): Recallable =
  ## postSendEmail
  ## <p>Composes an email message and immediately queues it for sending. In order to send email using the <code>SendEmail</code> operation, your message must meet the following requirements:</p> <ul> <li> <p>The message must be sent from a verified email address or domain. If you attempt to send email using a non-verified address or domain, the operation will result in an "Email address not verified" error. </p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>The message must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendEmail</code> operation several times to send the message to each group.</p> </li> </ul> <important> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </important>
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendEmail</code>.
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   DestinationBccAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   MessageBody: string
  ##              : Represents the message to be sent, composed of a subject and a body.
  ## The message body.
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ReturnPath: string
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Action: string (required)
  ##   DestinationCcAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   MessageSubject: string
  ##                 : Represents the message to be sent, composed of a subject and a body.
  ## The subject of the message: A short summary of the content, which will appear in the recipient's inbox.
  ##   Version: string (required)
  ##   Source: string (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   DestinationToAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  var query_604760 = newJObject()
  var formData_604761 = newJObject()
  add(formData_604761, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_604761, "SourceArn", newJString(SourceArn))
  if DestinationBccAddresses != nil:
    formData_604761.add "Destination.BccAddresses", DestinationBccAddresses
  if ReplyToAddresses != nil:
    formData_604761.add "ReplyToAddresses", ReplyToAddresses
  add(formData_604761, "Message.Body", newJString(MessageBody))
  if Tags != nil:
    formData_604761.add "Tags", Tags
  add(formData_604761, "ReturnPath", newJString(ReturnPath))
  add(formData_604761, "ReturnPathArn", newJString(ReturnPathArn))
  add(query_604760, "Action", newJString(Action))
  if DestinationCcAddresses != nil:
    formData_604761.add "Destination.CcAddresses", DestinationCcAddresses
  add(formData_604761, "Message.Subject", newJString(MessageSubject))
  add(query_604760, "Version", newJString(Version))
  add(formData_604761, "Source", newJString(Source))
  if DestinationToAddresses != nil:
    formData_604761.add "Destination.ToAddresses", DestinationToAddresses
  result = call_604759.call(nil, query_604760, nil, formData_604761, nil)

var postSendEmail* = Call_PostSendEmail_604734(name: "postSendEmail",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=SendEmail", validator: validate_PostSendEmail_604735,
    base: "/", url: url_PostSendEmail_604736, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSendEmail_604707 = ref object of OpenApiRestCall_602433
proc url_GetSendEmail_604709(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSendEmail_604708(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Composes an email message and immediately queues it for sending. In order to send email using the <code>SendEmail</code> operation, your message must meet the following requirements:</p> <ul> <li> <p>The message must be sent from a verified email address or domain. If you attempt to send email using a non-verified address or domain, the operation will result in an "Email address not verified" error. </p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>The message must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendEmail</code> operation several times to send the message to each group.</p> </li> </ul> <important> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Destination.BccAddresses: JArray
  ##                           : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Destination.ToAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Action: JString (required)
  ##   Destination.CcAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   Message.Subject: JString
  ##                  : Represents the message to be sent, composed of a subject and a body.
  ## The subject of the message: A short summary of the content, which will appear in the recipient's inbox.
  ##   Source: JString (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   ReturnPath: JString
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   Message.Body: JString
  ##               : Represents the message to be sent, composed of a subject and a body.
  ## The message body.
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendEmail</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_604710 = query.getOrDefault("ReplyToAddresses")
  valid_604710 = validateParameter(valid_604710, JArray, required = false,
                                 default = nil)
  if valid_604710 != nil:
    section.add "ReplyToAddresses", valid_604710
  var valid_604711 = query.getOrDefault("Destination.BccAddresses")
  valid_604711 = validateParameter(valid_604711, JArray, required = false,
                                 default = nil)
  if valid_604711 != nil:
    section.add "Destination.BccAddresses", valid_604711
  var valid_604712 = query.getOrDefault("ReturnPathArn")
  valid_604712 = validateParameter(valid_604712, JString, required = false,
                                 default = nil)
  if valid_604712 != nil:
    section.add "ReturnPathArn", valid_604712
  var valid_604713 = query.getOrDefault("Destination.ToAddresses")
  valid_604713 = validateParameter(valid_604713, JArray, required = false,
                                 default = nil)
  if valid_604713 != nil:
    section.add "Destination.ToAddresses", valid_604713
  var valid_604714 = query.getOrDefault("Tags")
  valid_604714 = validateParameter(valid_604714, JArray, required = false,
                                 default = nil)
  if valid_604714 != nil:
    section.add "Tags", valid_604714
  var valid_604715 = query.getOrDefault("SourceArn")
  valid_604715 = validateParameter(valid_604715, JString, required = false,
                                 default = nil)
  if valid_604715 != nil:
    section.add "SourceArn", valid_604715
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604716 = query.getOrDefault("Action")
  valid_604716 = validateParameter(valid_604716, JString, required = true,
                                 default = newJString("SendEmail"))
  if valid_604716 != nil:
    section.add "Action", valid_604716
  var valid_604717 = query.getOrDefault("Destination.CcAddresses")
  valid_604717 = validateParameter(valid_604717, JArray, required = false,
                                 default = nil)
  if valid_604717 != nil:
    section.add "Destination.CcAddresses", valid_604717
  var valid_604718 = query.getOrDefault("Message.Subject")
  valid_604718 = validateParameter(valid_604718, JString, required = false,
                                 default = nil)
  if valid_604718 != nil:
    section.add "Message.Subject", valid_604718
  var valid_604719 = query.getOrDefault("Source")
  valid_604719 = validateParameter(valid_604719, JString, required = true,
                                 default = nil)
  if valid_604719 != nil:
    section.add "Source", valid_604719
  var valid_604720 = query.getOrDefault("ReturnPath")
  valid_604720 = validateParameter(valid_604720, JString, required = false,
                                 default = nil)
  if valid_604720 != nil:
    section.add "ReturnPath", valid_604720
  var valid_604721 = query.getOrDefault("Message.Body")
  valid_604721 = validateParameter(valid_604721, JString, required = false,
                                 default = nil)
  if valid_604721 != nil:
    section.add "Message.Body", valid_604721
  var valid_604722 = query.getOrDefault("ConfigurationSetName")
  valid_604722 = validateParameter(valid_604722, JString, required = false,
                                 default = nil)
  if valid_604722 != nil:
    section.add "ConfigurationSetName", valid_604722
  var valid_604723 = query.getOrDefault("Version")
  valid_604723 = validateParameter(valid_604723, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604723 != nil:
    section.add "Version", valid_604723
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604724 = header.getOrDefault("X-Amz-Date")
  valid_604724 = validateParameter(valid_604724, JString, required = false,
                                 default = nil)
  if valid_604724 != nil:
    section.add "X-Amz-Date", valid_604724
  var valid_604725 = header.getOrDefault("X-Amz-Security-Token")
  valid_604725 = validateParameter(valid_604725, JString, required = false,
                                 default = nil)
  if valid_604725 != nil:
    section.add "X-Amz-Security-Token", valid_604725
  var valid_604726 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604726 = validateParameter(valid_604726, JString, required = false,
                                 default = nil)
  if valid_604726 != nil:
    section.add "X-Amz-Content-Sha256", valid_604726
  var valid_604727 = header.getOrDefault("X-Amz-Algorithm")
  valid_604727 = validateParameter(valid_604727, JString, required = false,
                                 default = nil)
  if valid_604727 != nil:
    section.add "X-Amz-Algorithm", valid_604727
  var valid_604728 = header.getOrDefault("X-Amz-Signature")
  valid_604728 = validateParameter(valid_604728, JString, required = false,
                                 default = nil)
  if valid_604728 != nil:
    section.add "X-Amz-Signature", valid_604728
  var valid_604729 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604729 = validateParameter(valid_604729, JString, required = false,
                                 default = nil)
  if valid_604729 != nil:
    section.add "X-Amz-SignedHeaders", valid_604729
  var valid_604730 = header.getOrDefault("X-Amz-Credential")
  valid_604730 = validateParameter(valid_604730, JString, required = false,
                                 default = nil)
  if valid_604730 != nil:
    section.add "X-Amz-Credential", valid_604730
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604731: Call_GetSendEmail_604707; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message and immediately queues it for sending. In order to send email using the <code>SendEmail</code> operation, your message must meet the following requirements:</p> <ul> <li> <p>The message must be sent from a verified email address or domain. If you attempt to send email using a non-verified address or domain, the operation will result in an "Email address not verified" error. </p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>The message must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendEmail</code> operation several times to send the message to each group.</p> </li> </ul> <important> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </important>
  ## 
  let valid = call_604731.validator(path, query, header, formData, body)
  let scheme = call_604731.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604731.url(scheme.get, call_604731.host, call_604731.base,
                         call_604731.route, valid.getOrDefault("path"))
  result = hook(call_604731, url, valid)

proc call*(call_604732: Call_GetSendEmail_604707; Source: string;
          ReplyToAddresses: JsonNode = nil; DestinationBccAddresses: JsonNode = nil;
          ReturnPathArn: string = ""; DestinationToAddresses: JsonNode = nil;
          Tags: JsonNode = nil; SourceArn: string = ""; Action: string = "SendEmail";
          DestinationCcAddresses: JsonNode = nil; MessageSubject: string = "";
          ReturnPath: string = ""; MessageBody: string = "";
          ConfigurationSetName: string = ""; Version: string = "2010-12-01"): Recallable =
  ## getSendEmail
  ## <p>Composes an email message and immediately queues it for sending. In order to send email using the <code>SendEmail</code> operation, your message must meet the following requirements:</p> <ul> <li> <p>The message must be sent from a verified email address or domain. If you attempt to send email using a non-verified address or domain, the operation will result in an "Email address not verified" error. </p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>The message must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendEmail</code> operation several times to send the message to each group.</p> </li> </ul> <important> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </important>
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   DestinationBccAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   DestinationToAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Action: string (required)
  ##   DestinationCcAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   MessageSubject: string
  ##                 : Represents the message to be sent, composed of a subject and a body.
  ## The subject of the message: A short summary of the content, which will appear in the recipient's inbox.
  ##   Source: string (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   ReturnPath: string
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   MessageBody: string
  ##              : Represents the message to be sent, composed of a subject and a body.
  ## The message body.
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendEmail</code>.
  ##   Version: string (required)
  var query_604733 = newJObject()
  if ReplyToAddresses != nil:
    query_604733.add "ReplyToAddresses", ReplyToAddresses
  if DestinationBccAddresses != nil:
    query_604733.add "Destination.BccAddresses", DestinationBccAddresses
  add(query_604733, "ReturnPathArn", newJString(ReturnPathArn))
  if DestinationToAddresses != nil:
    query_604733.add "Destination.ToAddresses", DestinationToAddresses
  if Tags != nil:
    query_604733.add "Tags", Tags
  add(query_604733, "SourceArn", newJString(SourceArn))
  add(query_604733, "Action", newJString(Action))
  if DestinationCcAddresses != nil:
    query_604733.add "Destination.CcAddresses", DestinationCcAddresses
  add(query_604733, "Message.Subject", newJString(MessageSubject))
  add(query_604733, "Source", newJString(Source))
  add(query_604733, "ReturnPath", newJString(ReturnPath))
  add(query_604733, "Message.Body", newJString(MessageBody))
  add(query_604733, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_604733, "Version", newJString(Version))
  result = call_604732.call(nil, query_604733, nil, nil, nil)

var getSendEmail* = Call_GetSendEmail_604707(name: "getSendEmail",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=SendEmail", validator: validate_GetSendEmail_604708, base: "/",
    url: url_GetSendEmail_604709, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSendRawEmail_604785 = ref object of OpenApiRestCall_602433
proc url_PostSendRawEmail_604787(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSendRawEmail_604786(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Composes an email message and immediately queues it for sending.</p> <p>This operation is more flexible than the <code>SendEmail</code> API operation. When you use the <code>SendRawEmail</code> operation, you can specify the headers of the message as well as its content. This flexibility is useful, for example, when you want to send a multipart MIME email (such a message that contains both a text and an HTML version). You can also use this operation to send messages that include attachments.</p> <p>The <code>SendRawEmail</code> operation has the following requirements:</p> <ul> <li> <p>You can only send email from <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified email addresses or domains</a>. If you try to send email from an address that isn't verified, the operation results in an "Email address not verified" error.</p> </li> <li> <p>If your account is still in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon SES sandbox</a>, you can only send email to other verified addresses in your account, or to addresses that are associated with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon SES mailbox simulator</a>.</p> </li> <li> <p>The maximum message size, including attachments, is 10 MB.</p> </li> <li> <p>Each message has to include at least one recipient address. A recipient address includes any address on the To:, CC:, or BCC: lines.</p> </li> <li> <p>If you send a single message to more than one recipient address, and one of the recipient addresses isn't in a valid format (that is, it's not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), Amazon SES rejects the entire message, even if the other addresses are valid.</p> </li> <li> <p>Each message can include up to 50 recipient addresses across the To:, CC:, or BCC: lines. If you need to send a single message to more than 50 recipients, you have to split the list of recipient addresses into groups of less than 50 recipients, and send separate messages to each group.</p> </li> <li> <p>Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message parts. However, if Amazon SES has to modify the contents of your message (for example, if you use open and click tracking), 8-bit content isn't preserved. For this reason, we highly recommend that you encode all content that isn't 7-bit ASCII. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME Encoding</a> in the <i>Amazon SES Developer Guide</i>.</p> </li> </ul> <p>Additionally, keep the following considerations in mind when using the <code>SendRawEmail</code> operation:</p> <ul> <li> <p>Although you can customize the message headers when using the <code>SendRawEmail</code> operation, Amazon SES will automatically apply its own <code>Message-ID</code> and <code>Date</code> headers; if you passed these headers when creating the message, they will be overwritten by the values that Amazon SES provides.</p> </li> <li> <p>If you are using sending authorization to send on behalf of another user, <code>SendRawEmail</code> enables you to specify the cross-account identity for the email's Source, From, and Return-Path parameters in one of two ways: you can pass optional parameters <code>SourceArn</code>, <code>FromArn</code>, and/or <code>ReturnPathArn</code> to the API, or you can include the following X-headers in the header of your raw email:</p> <ul> <li> <p> <code>X-SES-SOURCE-ARN</code> </p> </li> <li> <p> <code>X-SES-FROM-ARN</code> </p> </li> <li> <p> <code>X-SES-RETURN-PATH-ARN</code> </p> </li> </ul> <important> <p>Don't include these X-headers in the DKIM signature. Amazon SES removes these before it sends the email.</p> </important> <p>If you only specify the <code>SourceIdentityArn</code> parameter, Amazon SES sets the From and Return-Path addresses to the same identity that you specified.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using Sending Authorization with Amazon SES</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604788 = query.getOrDefault("Action")
  valid_604788 = validateParameter(valid_604788, JString, required = true,
                                 default = newJString("SendRawEmail"))
  if valid_604788 != nil:
    section.add "Action", valid_604788
  var valid_604789 = query.getOrDefault("Version")
  valid_604789 = validateParameter(valid_604789, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604789 != nil:
    section.add "Version", valid_604789
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604790 = header.getOrDefault("X-Amz-Date")
  valid_604790 = validateParameter(valid_604790, JString, required = false,
                                 default = nil)
  if valid_604790 != nil:
    section.add "X-Amz-Date", valid_604790
  var valid_604791 = header.getOrDefault("X-Amz-Security-Token")
  valid_604791 = validateParameter(valid_604791, JString, required = false,
                                 default = nil)
  if valid_604791 != nil:
    section.add "X-Amz-Security-Token", valid_604791
  var valid_604792 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604792 = validateParameter(valid_604792, JString, required = false,
                                 default = nil)
  if valid_604792 != nil:
    section.add "X-Amz-Content-Sha256", valid_604792
  var valid_604793 = header.getOrDefault("X-Amz-Algorithm")
  valid_604793 = validateParameter(valid_604793, JString, required = false,
                                 default = nil)
  if valid_604793 != nil:
    section.add "X-Amz-Algorithm", valid_604793
  var valid_604794 = header.getOrDefault("X-Amz-Signature")
  valid_604794 = validateParameter(valid_604794, JString, required = false,
                                 default = nil)
  if valid_604794 != nil:
    section.add "X-Amz-Signature", valid_604794
  var valid_604795 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604795 = validateParameter(valid_604795, JString, required = false,
                                 default = nil)
  if valid_604795 != nil:
    section.add "X-Amz-SignedHeaders", valid_604795
  var valid_604796 = header.getOrDefault("X-Amz-Credential")
  valid_604796 = validateParameter(valid_604796, JString, required = false,
                                 default = nil)
  if valid_604796 != nil:
    section.add "X-Amz-Credential", valid_604796
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendRawEmail</code>.
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-SOURCE-ARN</code> in the raw message of the email. If you use both the <code>SourceArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>SourceArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Destinations: JArray
  ##               : A list of destinations for the message, consisting of To:, CC:, and BCC: addresses.
  ##   FromArn: JString
  ##          : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to specify a particular "From" address in the header of the raw email.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-FROM-ARN</code> in the raw message of the email. If you use both the <code>FromArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>FromArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendRawEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-RETURN-PATH-ARN</code> in the raw message of the email. If you use both the <code>ReturnPathArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>ReturnPathArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Source: JString
  ##         : <p>The identity's email address. If you do not provide a value for this parameter, you must specify a "From" address in the raw text of the message. (You can also specify both.)</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in<a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note> <p>If you specify the <code>Source</code> parameter and have feedback forwarding enabled, then bounces and complaints will be sent to this email address. This takes precedence over any Return-Path header that you might include in the raw text of the message.</p>
  ##   RawMessage.Data: JString
  ##                  : Represents the raw data of the message.
  ## <p>The raw data of the message. This data needs to base64-encoded if you are accessing Amazon SES directly through the HTTPS interface. If you are accessing Amazon SES using an AWS SDK, the SDK takes care of the base 64-encoding for you. In all cases, the client must ensure that the message format complies with Internet email standards regarding email header fields, MIME types, and MIME encoding.</p> <p>The To:, CC:, and BCC: headers in the raw message can contain a group list.</p> <p>If you are using <code>SendRawEmail</code> with sending authorization, you can include X-headers in the raw message to specify the "Source," "From," and "Return-Path" addresses. For more information, see the documentation for <code>SendRawEmail</code>. </p> <important> <p>Do not include these X-headers in the DKIM signature, because they are removed by Amazon SES before sending the email.</p> </important> <p>For more information, go to the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html">Amazon SES Developer Guide</a>.</p>
  section = newJObject()
  var valid_604797 = formData.getOrDefault("ConfigurationSetName")
  valid_604797 = validateParameter(valid_604797, JString, required = false,
                                 default = nil)
  if valid_604797 != nil:
    section.add "ConfigurationSetName", valid_604797
  var valid_604798 = formData.getOrDefault("SourceArn")
  valid_604798 = validateParameter(valid_604798, JString, required = false,
                                 default = nil)
  if valid_604798 != nil:
    section.add "SourceArn", valid_604798
  var valid_604799 = formData.getOrDefault("Destinations")
  valid_604799 = validateParameter(valid_604799, JArray, required = false,
                                 default = nil)
  if valid_604799 != nil:
    section.add "Destinations", valid_604799
  var valid_604800 = formData.getOrDefault("FromArn")
  valid_604800 = validateParameter(valid_604800, JString, required = false,
                                 default = nil)
  if valid_604800 != nil:
    section.add "FromArn", valid_604800
  var valid_604801 = formData.getOrDefault("Tags")
  valid_604801 = validateParameter(valid_604801, JArray, required = false,
                                 default = nil)
  if valid_604801 != nil:
    section.add "Tags", valid_604801
  var valid_604802 = formData.getOrDefault("ReturnPathArn")
  valid_604802 = validateParameter(valid_604802, JString, required = false,
                                 default = nil)
  if valid_604802 != nil:
    section.add "ReturnPathArn", valid_604802
  var valid_604803 = formData.getOrDefault("Source")
  valid_604803 = validateParameter(valid_604803, JString, required = false,
                                 default = nil)
  if valid_604803 != nil:
    section.add "Source", valid_604803
  var valid_604804 = formData.getOrDefault("RawMessage.Data")
  valid_604804 = validateParameter(valid_604804, JString, required = false,
                                 default = nil)
  if valid_604804 != nil:
    section.add "RawMessage.Data", valid_604804
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604805: Call_PostSendRawEmail_604785; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message and immediately queues it for sending.</p> <p>This operation is more flexible than the <code>SendEmail</code> API operation. When you use the <code>SendRawEmail</code> operation, you can specify the headers of the message as well as its content. This flexibility is useful, for example, when you want to send a multipart MIME email (such a message that contains both a text and an HTML version). You can also use this operation to send messages that include attachments.</p> <p>The <code>SendRawEmail</code> operation has the following requirements:</p> <ul> <li> <p>You can only send email from <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified email addresses or domains</a>. If you try to send email from an address that isn't verified, the operation results in an "Email address not verified" error.</p> </li> <li> <p>If your account is still in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon SES sandbox</a>, you can only send email to other verified addresses in your account, or to addresses that are associated with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon SES mailbox simulator</a>.</p> </li> <li> <p>The maximum message size, including attachments, is 10 MB.</p> </li> <li> <p>Each message has to include at least one recipient address. A recipient address includes any address on the To:, CC:, or BCC: lines.</p> </li> <li> <p>If you send a single message to more than one recipient address, and one of the recipient addresses isn't in a valid format (that is, it's not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), Amazon SES rejects the entire message, even if the other addresses are valid.</p> </li> <li> <p>Each message can include up to 50 recipient addresses across the To:, CC:, or BCC: lines. If you need to send a single message to more than 50 recipients, you have to split the list of recipient addresses into groups of less than 50 recipients, and send separate messages to each group.</p> </li> <li> <p>Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message parts. However, if Amazon SES has to modify the contents of your message (for example, if you use open and click tracking), 8-bit content isn't preserved. For this reason, we highly recommend that you encode all content that isn't 7-bit ASCII. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME Encoding</a> in the <i>Amazon SES Developer Guide</i>.</p> </li> </ul> <p>Additionally, keep the following considerations in mind when using the <code>SendRawEmail</code> operation:</p> <ul> <li> <p>Although you can customize the message headers when using the <code>SendRawEmail</code> operation, Amazon SES will automatically apply its own <code>Message-ID</code> and <code>Date</code> headers; if you passed these headers when creating the message, they will be overwritten by the values that Amazon SES provides.</p> </li> <li> <p>If you are using sending authorization to send on behalf of another user, <code>SendRawEmail</code> enables you to specify the cross-account identity for the email's Source, From, and Return-Path parameters in one of two ways: you can pass optional parameters <code>SourceArn</code>, <code>FromArn</code>, and/or <code>ReturnPathArn</code> to the API, or you can include the following X-headers in the header of your raw email:</p> <ul> <li> <p> <code>X-SES-SOURCE-ARN</code> </p> </li> <li> <p> <code>X-SES-FROM-ARN</code> </p> </li> <li> <p> <code>X-SES-RETURN-PATH-ARN</code> </p> </li> </ul> <important> <p>Don't include these X-headers in the DKIM signature. Amazon SES removes these before it sends the email.</p> </important> <p>If you only specify the <code>SourceIdentityArn</code> parameter, Amazon SES sets the From and Return-Path addresses to the same identity that you specified.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using Sending Authorization with Amazon SES</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> </ul>
  ## 
  let valid = call_604805.validator(path, query, header, formData, body)
  let scheme = call_604805.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604805.url(scheme.get, call_604805.host, call_604805.base,
                         call_604805.route, valid.getOrDefault("path"))
  result = hook(call_604805, url, valid)

proc call*(call_604806: Call_PostSendRawEmail_604785;
          ConfigurationSetName: string = ""; SourceArn: string = "";
          Destinations: JsonNode = nil; FromArn: string = ""; Tags: JsonNode = nil;
          ReturnPathArn: string = ""; Action: string = "SendRawEmail";
          Version: string = "2010-12-01"; Source: string = "";
          RawMessageData: string = ""): Recallable =
  ## postSendRawEmail
  ## <p>Composes an email message and immediately queues it for sending.</p> <p>This operation is more flexible than the <code>SendEmail</code> API operation. When you use the <code>SendRawEmail</code> operation, you can specify the headers of the message as well as its content. This flexibility is useful, for example, when you want to send a multipart MIME email (such a message that contains both a text and an HTML version). You can also use this operation to send messages that include attachments.</p> <p>The <code>SendRawEmail</code> operation has the following requirements:</p> <ul> <li> <p>You can only send email from <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified email addresses or domains</a>. If you try to send email from an address that isn't verified, the operation results in an "Email address not verified" error.</p> </li> <li> <p>If your account is still in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon SES sandbox</a>, you can only send email to other verified addresses in your account, or to addresses that are associated with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon SES mailbox simulator</a>.</p> </li> <li> <p>The maximum message size, including attachments, is 10 MB.</p> </li> <li> <p>Each message has to include at least one recipient address. A recipient address includes any address on the To:, CC:, or BCC: lines.</p> </li> <li> <p>If you send a single message to more than one recipient address, and one of the recipient addresses isn't in a valid format (that is, it's not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), Amazon SES rejects the entire message, even if the other addresses are valid.</p> </li> <li> <p>Each message can include up to 50 recipient addresses across the To:, CC:, or BCC: lines. If you need to send a single message to more than 50 recipients, you have to split the list of recipient addresses into groups of less than 50 recipients, and send separate messages to each group.</p> </li> <li> <p>Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message parts. However, if Amazon SES has to modify the contents of your message (for example, if you use open and click tracking), 8-bit content isn't preserved. For this reason, we highly recommend that you encode all content that isn't 7-bit ASCII. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME Encoding</a> in the <i>Amazon SES Developer Guide</i>.</p> </li> </ul> <p>Additionally, keep the following considerations in mind when using the <code>SendRawEmail</code> operation:</p> <ul> <li> <p>Although you can customize the message headers when using the <code>SendRawEmail</code> operation, Amazon SES will automatically apply its own <code>Message-ID</code> and <code>Date</code> headers; if you passed these headers when creating the message, they will be overwritten by the values that Amazon SES provides.</p> </li> <li> <p>If you are using sending authorization to send on behalf of another user, <code>SendRawEmail</code> enables you to specify the cross-account identity for the email's Source, From, and Return-Path parameters in one of two ways: you can pass optional parameters <code>SourceArn</code>, <code>FromArn</code>, and/or <code>ReturnPathArn</code> to the API, or you can include the following X-headers in the header of your raw email:</p> <ul> <li> <p> <code>X-SES-SOURCE-ARN</code> </p> </li> <li> <p> <code>X-SES-FROM-ARN</code> </p> </li> <li> <p> <code>X-SES-RETURN-PATH-ARN</code> </p> </li> </ul> <important> <p>Don't include these X-headers in the DKIM signature. Amazon SES removes these before it sends the email.</p> </important> <p>If you only specify the <code>SourceIdentityArn</code> parameter, Amazon SES sets the From and Return-Path addresses to the same identity that you specified.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using Sending Authorization with Amazon SES</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> </ul>
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendRawEmail</code>.
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-SOURCE-ARN</code> in the raw message of the email. If you use both the <code>SourceArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>SourceArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Destinations: JArray
  ##               : A list of destinations for the message, consisting of To:, CC:, and BCC: addresses.
  ##   FromArn: string
  ##          : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to specify a particular "From" address in the header of the raw email.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-FROM-ARN</code> in the raw message of the email. If you use both the <code>FromArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>FromArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendRawEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-RETURN-PATH-ARN</code> in the raw message of the email. If you use both the <code>ReturnPathArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>ReturnPathArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Source: string
  ##         : <p>The identity's email address. If you do not provide a value for this parameter, you must specify a "From" address in the raw text of the message. (You can also specify both.)</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in<a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note> <p>If you specify the <code>Source</code> parameter and have feedback forwarding enabled, then bounces and complaints will be sent to this email address. This takes precedence over any Return-Path header that you might include in the raw text of the message.</p>
  ##   RawMessageData: string
  ##                 : Represents the raw data of the message.
  ## <p>The raw data of the message. This data needs to base64-encoded if you are accessing Amazon SES directly through the HTTPS interface. If you are accessing Amazon SES using an AWS SDK, the SDK takes care of the base 64-encoding for you. In all cases, the client must ensure that the message format complies with Internet email standards regarding email header fields, MIME types, and MIME encoding.</p> <p>The To:, CC:, and BCC: headers in the raw message can contain a group list.</p> <p>If you are using <code>SendRawEmail</code> with sending authorization, you can include X-headers in the raw message to specify the "Source," "From," and "Return-Path" addresses. For more information, see the documentation for <code>SendRawEmail</code>. </p> <important> <p>Do not include these X-headers in the DKIM signature, because they are removed by Amazon SES before sending the email.</p> </important> <p>For more information, go to the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html">Amazon SES Developer Guide</a>.</p>
  var query_604807 = newJObject()
  var formData_604808 = newJObject()
  add(formData_604808, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_604808, "SourceArn", newJString(SourceArn))
  if Destinations != nil:
    formData_604808.add "Destinations", Destinations
  add(formData_604808, "FromArn", newJString(FromArn))
  if Tags != nil:
    formData_604808.add "Tags", Tags
  add(formData_604808, "ReturnPathArn", newJString(ReturnPathArn))
  add(query_604807, "Action", newJString(Action))
  add(query_604807, "Version", newJString(Version))
  add(formData_604808, "Source", newJString(Source))
  add(formData_604808, "RawMessage.Data", newJString(RawMessageData))
  result = call_604806.call(nil, query_604807, nil, formData_604808, nil)

var postSendRawEmail* = Call_PostSendRawEmail_604785(name: "postSendRawEmail",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=SendRawEmail", validator: validate_PostSendRawEmail_604786,
    base: "/", url: url_PostSendRawEmail_604787,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSendRawEmail_604762 = ref object of OpenApiRestCall_602433
proc url_GetSendRawEmail_604764(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSendRawEmail_604763(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Composes an email message and immediately queues it for sending.</p> <p>This operation is more flexible than the <code>SendEmail</code> API operation. When you use the <code>SendRawEmail</code> operation, you can specify the headers of the message as well as its content. This flexibility is useful, for example, when you want to send a multipart MIME email (such a message that contains both a text and an HTML version). You can also use this operation to send messages that include attachments.</p> <p>The <code>SendRawEmail</code> operation has the following requirements:</p> <ul> <li> <p>You can only send email from <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified email addresses or domains</a>. If you try to send email from an address that isn't verified, the operation results in an "Email address not verified" error.</p> </li> <li> <p>If your account is still in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon SES sandbox</a>, you can only send email to other verified addresses in your account, or to addresses that are associated with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon SES mailbox simulator</a>.</p> </li> <li> <p>The maximum message size, including attachments, is 10 MB.</p> </li> <li> <p>Each message has to include at least one recipient address. A recipient address includes any address on the To:, CC:, or BCC: lines.</p> </li> <li> <p>If you send a single message to more than one recipient address, and one of the recipient addresses isn't in a valid format (that is, it's not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), Amazon SES rejects the entire message, even if the other addresses are valid.</p> </li> <li> <p>Each message can include up to 50 recipient addresses across the To:, CC:, or BCC: lines. If you need to send a single message to more than 50 recipients, you have to split the list of recipient addresses into groups of less than 50 recipients, and send separate messages to each group.</p> </li> <li> <p>Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message parts. However, if Amazon SES has to modify the contents of your message (for example, if you use open and click tracking), 8-bit content isn't preserved. For this reason, we highly recommend that you encode all content that isn't 7-bit ASCII. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME Encoding</a> in the <i>Amazon SES Developer Guide</i>.</p> </li> </ul> <p>Additionally, keep the following considerations in mind when using the <code>SendRawEmail</code> operation:</p> <ul> <li> <p>Although you can customize the message headers when using the <code>SendRawEmail</code> operation, Amazon SES will automatically apply its own <code>Message-ID</code> and <code>Date</code> headers; if you passed these headers when creating the message, they will be overwritten by the values that Amazon SES provides.</p> </li> <li> <p>If you are using sending authorization to send on behalf of another user, <code>SendRawEmail</code> enables you to specify the cross-account identity for the email's Source, From, and Return-Path parameters in one of two ways: you can pass optional parameters <code>SourceArn</code>, <code>FromArn</code>, and/or <code>ReturnPathArn</code> to the API, or you can include the following X-headers in the header of your raw email:</p> <ul> <li> <p> <code>X-SES-SOURCE-ARN</code> </p> </li> <li> <p> <code>X-SES-FROM-ARN</code> </p> </li> <li> <p> <code>X-SES-RETURN-PATH-ARN</code> </p> </li> </ul> <important> <p>Don't include these X-headers in the DKIM signature. Amazon SES removes these before it sends the email.</p> </important> <p>If you only specify the <code>SourceIdentityArn</code> parameter, Amazon SES sets the From and Return-Path addresses to the same identity that you specified.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using Sending Authorization with Amazon SES</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   FromArn: JString
  ##          : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to specify a particular "From" address in the header of the raw email.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-FROM-ARN</code> in the raw message of the email. If you use both the <code>FromArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>FromArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   RawMessage.Data: JString
  ##                  : Represents the raw data of the message.
  ## <p>The raw data of the message. This data needs to base64-encoded if you are accessing Amazon SES directly through the HTTPS interface. If you are accessing Amazon SES using an AWS SDK, the SDK takes care of the base 64-encoding for you. In all cases, the client must ensure that the message format complies with Internet email standards regarding email header fields, MIME types, and MIME encoding.</p> <p>The To:, CC:, and BCC: headers in the raw message can contain a group list.</p> <p>If you are using <code>SendRawEmail</code> with sending authorization, you can include X-headers in the raw message to specify the "Source," "From," and "Return-Path" addresses. For more information, see the documentation for <code>SendRawEmail</code>. </p> <important> <p>Do not include these X-headers in the DKIM signature, because they are removed by Amazon SES before sending the email.</p> </important> <p>For more information, go to the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html">Amazon SES Developer Guide</a>.</p>
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-RETURN-PATH-ARN</code> in the raw message of the email. If you use both the <code>ReturnPathArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>ReturnPathArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendRawEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-SOURCE-ARN</code> in the raw message of the email. If you use both the <code>SourceArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>SourceArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Action: JString (required)
  ##   Destinations: JArray
  ##               : A list of destinations for the message, consisting of To:, CC:, and BCC: addresses.
  ##   Source: JString
  ##         : <p>The identity's email address. If you do not provide a value for this parameter, you must specify a "From" address in the raw text of the message. (You can also specify both.)</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in<a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note> <p>If you specify the <code>Source</code> parameter and have feedback forwarding enabled, then bounces and complaints will be sent to this email address. This takes precedence over any Return-Path header that you might include in the raw text of the message.</p>
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendRawEmail</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_604765 = query.getOrDefault("FromArn")
  valid_604765 = validateParameter(valid_604765, JString, required = false,
                                 default = nil)
  if valid_604765 != nil:
    section.add "FromArn", valid_604765
  var valid_604766 = query.getOrDefault("RawMessage.Data")
  valid_604766 = validateParameter(valid_604766, JString, required = false,
                                 default = nil)
  if valid_604766 != nil:
    section.add "RawMessage.Data", valid_604766
  var valid_604767 = query.getOrDefault("ReturnPathArn")
  valid_604767 = validateParameter(valid_604767, JString, required = false,
                                 default = nil)
  if valid_604767 != nil:
    section.add "ReturnPathArn", valid_604767
  var valid_604768 = query.getOrDefault("Tags")
  valid_604768 = validateParameter(valid_604768, JArray, required = false,
                                 default = nil)
  if valid_604768 != nil:
    section.add "Tags", valid_604768
  var valid_604769 = query.getOrDefault("SourceArn")
  valid_604769 = validateParameter(valid_604769, JString, required = false,
                                 default = nil)
  if valid_604769 != nil:
    section.add "SourceArn", valid_604769
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604770 = query.getOrDefault("Action")
  valid_604770 = validateParameter(valid_604770, JString, required = true,
                                 default = newJString("SendRawEmail"))
  if valid_604770 != nil:
    section.add "Action", valid_604770
  var valid_604771 = query.getOrDefault("Destinations")
  valid_604771 = validateParameter(valid_604771, JArray, required = false,
                                 default = nil)
  if valid_604771 != nil:
    section.add "Destinations", valid_604771
  var valid_604772 = query.getOrDefault("Source")
  valid_604772 = validateParameter(valid_604772, JString, required = false,
                                 default = nil)
  if valid_604772 != nil:
    section.add "Source", valid_604772
  var valid_604773 = query.getOrDefault("ConfigurationSetName")
  valid_604773 = validateParameter(valid_604773, JString, required = false,
                                 default = nil)
  if valid_604773 != nil:
    section.add "ConfigurationSetName", valid_604773
  var valid_604774 = query.getOrDefault("Version")
  valid_604774 = validateParameter(valid_604774, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604774 != nil:
    section.add "Version", valid_604774
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604775 = header.getOrDefault("X-Amz-Date")
  valid_604775 = validateParameter(valid_604775, JString, required = false,
                                 default = nil)
  if valid_604775 != nil:
    section.add "X-Amz-Date", valid_604775
  var valid_604776 = header.getOrDefault("X-Amz-Security-Token")
  valid_604776 = validateParameter(valid_604776, JString, required = false,
                                 default = nil)
  if valid_604776 != nil:
    section.add "X-Amz-Security-Token", valid_604776
  var valid_604777 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604777 = validateParameter(valid_604777, JString, required = false,
                                 default = nil)
  if valid_604777 != nil:
    section.add "X-Amz-Content-Sha256", valid_604777
  var valid_604778 = header.getOrDefault("X-Amz-Algorithm")
  valid_604778 = validateParameter(valid_604778, JString, required = false,
                                 default = nil)
  if valid_604778 != nil:
    section.add "X-Amz-Algorithm", valid_604778
  var valid_604779 = header.getOrDefault("X-Amz-Signature")
  valid_604779 = validateParameter(valid_604779, JString, required = false,
                                 default = nil)
  if valid_604779 != nil:
    section.add "X-Amz-Signature", valid_604779
  var valid_604780 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604780 = validateParameter(valid_604780, JString, required = false,
                                 default = nil)
  if valid_604780 != nil:
    section.add "X-Amz-SignedHeaders", valid_604780
  var valid_604781 = header.getOrDefault("X-Amz-Credential")
  valid_604781 = validateParameter(valid_604781, JString, required = false,
                                 default = nil)
  if valid_604781 != nil:
    section.add "X-Amz-Credential", valid_604781
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604782: Call_GetSendRawEmail_604762; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message and immediately queues it for sending.</p> <p>This operation is more flexible than the <code>SendEmail</code> API operation. When you use the <code>SendRawEmail</code> operation, you can specify the headers of the message as well as its content. This flexibility is useful, for example, when you want to send a multipart MIME email (such a message that contains both a text and an HTML version). You can also use this operation to send messages that include attachments.</p> <p>The <code>SendRawEmail</code> operation has the following requirements:</p> <ul> <li> <p>You can only send email from <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified email addresses or domains</a>. If you try to send email from an address that isn't verified, the operation results in an "Email address not verified" error.</p> </li> <li> <p>If your account is still in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon SES sandbox</a>, you can only send email to other verified addresses in your account, or to addresses that are associated with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon SES mailbox simulator</a>.</p> </li> <li> <p>The maximum message size, including attachments, is 10 MB.</p> </li> <li> <p>Each message has to include at least one recipient address. A recipient address includes any address on the To:, CC:, or BCC: lines.</p> </li> <li> <p>If you send a single message to more than one recipient address, and one of the recipient addresses isn't in a valid format (that is, it's not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), Amazon SES rejects the entire message, even if the other addresses are valid.</p> </li> <li> <p>Each message can include up to 50 recipient addresses across the To:, CC:, or BCC: lines. If you need to send a single message to more than 50 recipients, you have to split the list of recipient addresses into groups of less than 50 recipients, and send separate messages to each group.</p> </li> <li> <p>Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message parts. However, if Amazon SES has to modify the contents of your message (for example, if you use open and click tracking), 8-bit content isn't preserved. For this reason, we highly recommend that you encode all content that isn't 7-bit ASCII. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME Encoding</a> in the <i>Amazon SES Developer Guide</i>.</p> </li> </ul> <p>Additionally, keep the following considerations in mind when using the <code>SendRawEmail</code> operation:</p> <ul> <li> <p>Although you can customize the message headers when using the <code>SendRawEmail</code> operation, Amazon SES will automatically apply its own <code>Message-ID</code> and <code>Date</code> headers; if you passed these headers when creating the message, they will be overwritten by the values that Amazon SES provides.</p> </li> <li> <p>If you are using sending authorization to send on behalf of another user, <code>SendRawEmail</code> enables you to specify the cross-account identity for the email's Source, From, and Return-Path parameters in one of two ways: you can pass optional parameters <code>SourceArn</code>, <code>FromArn</code>, and/or <code>ReturnPathArn</code> to the API, or you can include the following X-headers in the header of your raw email:</p> <ul> <li> <p> <code>X-SES-SOURCE-ARN</code> </p> </li> <li> <p> <code>X-SES-FROM-ARN</code> </p> </li> <li> <p> <code>X-SES-RETURN-PATH-ARN</code> </p> </li> </ul> <important> <p>Don't include these X-headers in the DKIM signature. Amazon SES removes these before it sends the email.</p> </important> <p>If you only specify the <code>SourceIdentityArn</code> parameter, Amazon SES sets the From and Return-Path addresses to the same identity that you specified.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using Sending Authorization with Amazon SES</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> </ul>
  ## 
  let valid = call_604782.validator(path, query, header, formData, body)
  let scheme = call_604782.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604782.url(scheme.get, call_604782.host, call_604782.base,
                         call_604782.route, valid.getOrDefault("path"))
  result = hook(call_604782, url, valid)

proc call*(call_604783: Call_GetSendRawEmail_604762; FromArn: string = "";
          RawMessageData: string = ""; ReturnPathArn: string = ""; Tags: JsonNode = nil;
          SourceArn: string = ""; Action: string = "SendRawEmail";
          Destinations: JsonNode = nil; Source: string = "";
          ConfigurationSetName: string = ""; Version: string = "2010-12-01"): Recallable =
  ## getSendRawEmail
  ## <p>Composes an email message and immediately queues it for sending.</p> <p>This operation is more flexible than the <code>SendEmail</code> API operation. When you use the <code>SendRawEmail</code> operation, you can specify the headers of the message as well as its content. This flexibility is useful, for example, when you want to send a multipart MIME email (such a message that contains both a text and an HTML version). You can also use this operation to send messages that include attachments.</p> <p>The <code>SendRawEmail</code> operation has the following requirements:</p> <ul> <li> <p>You can only send email from <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified email addresses or domains</a>. If you try to send email from an address that isn't verified, the operation results in an "Email address not verified" error.</p> </li> <li> <p>If your account is still in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon SES sandbox</a>, you can only send email to other verified addresses in your account, or to addresses that are associated with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon SES mailbox simulator</a>.</p> </li> <li> <p>The maximum message size, including attachments, is 10 MB.</p> </li> <li> <p>Each message has to include at least one recipient address. A recipient address includes any address on the To:, CC:, or BCC: lines.</p> </li> <li> <p>If you send a single message to more than one recipient address, and one of the recipient addresses isn't in a valid format (that is, it's not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), Amazon SES rejects the entire message, even if the other addresses are valid.</p> </li> <li> <p>Each message can include up to 50 recipient addresses across the To:, CC:, or BCC: lines. If you need to send a single message to more than 50 recipients, you have to split the list of recipient addresses into groups of less than 50 recipients, and send separate messages to each group.</p> </li> <li> <p>Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message parts. However, if Amazon SES has to modify the contents of your message (for example, if you use open and click tracking), 8-bit content isn't preserved. For this reason, we highly recommend that you encode all content that isn't 7-bit ASCII. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME Encoding</a> in the <i>Amazon SES Developer Guide</i>.</p> </li> </ul> <p>Additionally, keep the following considerations in mind when using the <code>SendRawEmail</code> operation:</p> <ul> <li> <p>Although you can customize the message headers when using the <code>SendRawEmail</code> operation, Amazon SES will automatically apply its own <code>Message-ID</code> and <code>Date</code> headers; if you passed these headers when creating the message, they will be overwritten by the values that Amazon SES provides.</p> </li> <li> <p>If you are using sending authorization to send on behalf of another user, <code>SendRawEmail</code> enables you to specify the cross-account identity for the email's Source, From, and Return-Path parameters in one of two ways: you can pass optional parameters <code>SourceArn</code>, <code>FromArn</code>, and/or <code>ReturnPathArn</code> to the API, or you can include the following X-headers in the header of your raw email:</p> <ul> <li> <p> <code>X-SES-SOURCE-ARN</code> </p> </li> <li> <p> <code>X-SES-FROM-ARN</code> </p> </li> <li> <p> <code>X-SES-RETURN-PATH-ARN</code> </p> </li> </ul> <important> <p>Don't include these X-headers in the DKIM signature. Amazon SES removes these before it sends the email.</p> </important> <p>If you only specify the <code>SourceIdentityArn</code> parameter, Amazon SES sets the From and Return-Path addresses to the same identity that you specified.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using Sending Authorization with Amazon SES</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> </ul>
  ##   FromArn: string
  ##          : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to specify a particular "From" address in the header of the raw email.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-FROM-ARN</code> in the raw message of the email. If you use both the <code>FromArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>FromArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   RawMessageData: string
  ##                 : Represents the raw data of the message.
  ## <p>The raw data of the message. This data needs to base64-encoded if you are accessing Amazon SES directly through the HTTPS interface. If you are accessing Amazon SES using an AWS SDK, the SDK takes care of the base 64-encoding for you. In all cases, the client must ensure that the message format complies with Internet email standards regarding email header fields, MIME types, and MIME encoding.</p> <p>The To:, CC:, and BCC: headers in the raw message can contain a group list.</p> <p>If you are using <code>SendRawEmail</code> with sending authorization, you can include X-headers in the raw message to specify the "Source," "From," and "Return-Path" addresses. For more information, see the documentation for <code>SendRawEmail</code>. </p> <important> <p>Do not include these X-headers in the DKIM signature, because they are removed by Amazon SES before sending the email.</p> </important> <p>For more information, go to the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html">Amazon SES Developer Guide</a>.</p>
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-RETURN-PATH-ARN</code> in the raw message of the email. If you use both the <code>ReturnPathArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>ReturnPathArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendRawEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-SOURCE-ARN</code> in the raw message of the email. If you use both the <code>SourceArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>SourceArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Action: string (required)
  ##   Destinations: JArray
  ##               : A list of destinations for the message, consisting of To:, CC:, and BCC: addresses.
  ##   Source: string
  ##         : <p>The identity's email address. If you do not provide a value for this parameter, you must specify a "From" address in the raw text of the message. (You can also specify both.)</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in<a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note> <p>If you specify the <code>Source</code> parameter and have feedback forwarding enabled, then bounces and complaints will be sent to this email address. This takes precedence over any Return-Path header that you might include in the raw text of the message.</p>
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendRawEmail</code>.
  ##   Version: string (required)
  var query_604784 = newJObject()
  add(query_604784, "FromArn", newJString(FromArn))
  add(query_604784, "RawMessage.Data", newJString(RawMessageData))
  add(query_604784, "ReturnPathArn", newJString(ReturnPathArn))
  if Tags != nil:
    query_604784.add "Tags", Tags
  add(query_604784, "SourceArn", newJString(SourceArn))
  add(query_604784, "Action", newJString(Action))
  if Destinations != nil:
    query_604784.add "Destinations", Destinations
  add(query_604784, "Source", newJString(Source))
  add(query_604784, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_604784, "Version", newJString(Version))
  result = call_604783.call(nil, query_604784, nil, nil, nil)

var getSendRawEmail* = Call_GetSendRawEmail_604762(name: "getSendRawEmail",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=SendRawEmail", validator: validate_GetSendRawEmail_604763,
    base: "/", url: url_GetSendRawEmail_604764, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSendTemplatedEmail_604837 = ref object of OpenApiRestCall_602433
proc url_PostSendTemplatedEmail_604839(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSendTemplatedEmail_604838(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Composes an email message using an email template and immediately queues it for sending.</p> <p>In order to send email using the <code>SendTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Calls to the <code>SendTemplatedEmail</code> operation may only include one <code>Destination</code> parameter. A destination is a set of recipients who will receive the same version of the email. The <code>Destination</code> parameter can include up to 50 recipients, across the To:, CC: and BCC: fields.</p> </li> <li> <p>The <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> </ul> <important> <p>If your call to the <code>SendTemplatedEmail</code> operation includes all of the required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES can't render the email because the template contains errors, it doesn't send the email. Additionally, because it already accepted the message, Amazon SES doesn't return a message stating that it was unable to send the email.</p> <p>For these reasons, we highly recommend that you set up Amazon SES to send you notifications when Rendering Failure events occur. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Sending Personalized Email Using the Amazon SES API</a> in the <i>Amazon Simple Email Service Developer Guide</i>.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604840 = query.getOrDefault("Action")
  valid_604840 = validateParameter(valid_604840, JString, required = true,
                                 default = newJString("SendTemplatedEmail"))
  if valid_604840 != nil:
    section.add "Action", valid_604840
  var valid_604841 = query.getOrDefault("Version")
  valid_604841 = validateParameter(valid_604841, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604841 != nil:
    section.add "Version", valid_604841
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604842 = header.getOrDefault("X-Amz-Date")
  valid_604842 = validateParameter(valid_604842, JString, required = false,
                                 default = nil)
  if valid_604842 != nil:
    section.add "X-Amz-Date", valid_604842
  var valid_604843 = header.getOrDefault("X-Amz-Security-Token")
  valid_604843 = validateParameter(valid_604843, JString, required = false,
                                 default = nil)
  if valid_604843 != nil:
    section.add "X-Amz-Security-Token", valid_604843
  var valid_604844 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604844 = validateParameter(valid_604844, JString, required = false,
                                 default = nil)
  if valid_604844 != nil:
    section.add "X-Amz-Content-Sha256", valid_604844
  var valid_604845 = header.getOrDefault("X-Amz-Algorithm")
  valid_604845 = validateParameter(valid_604845, JString, required = false,
                                 default = nil)
  if valid_604845 != nil:
    section.add "X-Amz-Algorithm", valid_604845
  var valid_604846 = header.getOrDefault("X-Amz-Signature")
  valid_604846 = validateParameter(valid_604846, JString, required = false,
                                 default = nil)
  if valid_604846 != nil:
    section.add "X-Amz-Signature", valid_604846
  var valid_604847 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604847 = validateParameter(valid_604847, JString, required = false,
                                 default = nil)
  if valid_604847 != nil:
    section.add "X-Amz-SignedHeaders", valid_604847
  var valid_604848 = header.getOrDefault("X-Amz-Credential")
  valid_604848 = validateParameter(valid_604848, JString, required = false,
                                 default = nil)
  if valid_604848 != nil:
    section.add "X-Amz-Credential", valid_604848
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendTemplatedEmail</code>.
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Destination.BccAddresses: JArray
  ##                           : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Template: JString (required)
  ##           : The template to use when sending this email.
  ##   TemplateData: JString (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendTemplatedEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ReturnPath: JString
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   TemplateArn: JString
  ##              : The ARN of the template to use when sending this email.
  ##   Destination.CcAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   Source: JString (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in<a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   Destination.ToAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  section = newJObject()
  var valid_604849 = formData.getOrDefault("ConfigurationSetName")
  valid_604849 = validateParameter(valid_604849, JString, required = false,
                                 default = nil)
  if valid_604849 != nil:
    section.add "ConfigurationSetName", valid_604849
  var valid_604850 = formData.getOrDefault("SourceArn")
  valid_604850 = validateParameter(valid_604850, JString, required = false,
                                 default = nil)
  if valid_604850 != nil:
    section.add "SourceArn", valid_604850
  var valid_604851 = formData.getOrDefault("Destination.BccAddresses")
  valid_604851 = validateParameter(valid_604851, JArray, required = false,
                                 default = nil)
  if valid_604851 != nil:
    section.add "Destination.BccAddresses", valid_604851
  var valid_604852 = formData.getOrDefault("ReplyToAddresses")
  valid_604852 = validateParameter(valid_604852, JArray, required = false,
                                 default = nil)
  if valid_604852 != nil:
    section.add "ReplyToAddresses", valid_604852
  assert formData != nil,
        "formData argument is necessary due to required `Template` field"
  var valid_604853 = formData.getOrDefault("Template")
  valid_604853 = validateParameter(valid_604853, JString, required = true,
                                 default = nil)
  if valid_604853 != nil:
    section.add "Template", valid_604853
  var valid_604854 = formData.getOrDefault("TemplateData")
  valid_604854 = validateParameter(valid_604854, JString, required = true,
                                 default = nil)
  if valid_604854 != nil:
    section.add "TemplateData", valid_604854
  var valid_604855 = formData.getOrDefault("Tags")
  valid_604855 = validateParameter(valid_604855, JArray, required = false,
                                 default = nil)
  if valid_604855 != nil:
    section.add "Tags", valid_604855
  var valid_604856 = formData.getOrDefault("ReturnPath")
  valid_604856 = validateParameter(valid_604856, JString, required = false,
                                 default = nil)
  if valid_604856 != nil:
    section.add "ReturnPath", valid_604856
  var valid_604857 = formData.getOrDefault("ReturnPathArn")
  valid_604857 = validateParameter(valid_604857, JString, required = false,
                                 default = nil)
  if valid_604857 != nil:
    section.add "ReturnPathArn", valid_604857
  var valid_604858 = formData.getOrDefault("TemplateArn")
  valid_604858 = validateParameter(valid_604858, JString, required = false,
                                 default = nil)
  if valid_604858 != nil:
    section.add "TemplateArn", valid_604858
  var valid_604859 = formData.getOrDefault("Destination.CcAddresses")
  valid_604859 = validateParameter(valid_604859, JArray, required = false,
                                 default = nil)
  if valid_604859 != nil:
    section.add "Destination.CcAddresses", valid_604859
  var valid_604860 = formData.getOrDefault("Source")
  valid_604860 = validateParameter(valid_604860, JString, required = true,
                                 default = nil)
  if valid_604860 != nil:
    section.add "Source", valid_604860
  var valid_604861 = formData.getOrDefault("Destination.ToAddresses")
  valid_604861 = validateParameter(valid_604861, JArray, required = false,
                                 default = nil)
  if valid_604861 != nil:
    section.add "Destination.ToAddresses", valid_604861
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604862: Call_PostSendTemplatedEmail_604837; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message using an email template and immediately queues it for sending.</p> <p>In order to send email using the <code>SendTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Calls to the <code>SendTemplatedEmail</code> operation may only include one <code>Destination</code> parameter. A destination is a set of recipients who will receive the same version of the email. The <code>Destination</code> parameter can include up to 50 recipients, across the To:, CC: and BCC: fields.</p> </li> <li> <p>The <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> </ul> <important> <p>If your call to the <code>SendTemplatedEmail</code> operation includes all of the required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES can't render the email because the template contains errors, it doesn't send the email. Additionally, because it already accepted the message, Amazon SES doesn't return a message stating that it was unable to send the email.</p> <p>For these reasons, we highly recommend that you set up Amazon SES to send you notifications when Rendering Failure events occur. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Sending Personalized Email Using the Amazon SES API</a> in the <i>Amazon Simple Email Service Developer Guide</i>.</p> </important>
  ## 
  let valid = call_604862.validator(path, query, header, formData, body)
  let scheme = call_604862.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604862.url(scheme.get, call_604862.host, call_604862.base,
                         call_604862.route, valid.getOrDefault("path"))
  result = hook(call_604862, url, valid)

proc call*(call_604863: Call_PostSendTemplatedEmail_604837; Template: string;
          TemplateData: string; Source: string; ConfigurationSetName: string = "";
          SourceArn: string = ""; DestinationBccAddresses: JsonNode = nil;
          ReplyToAddresses: JsonNode = nil; Tags: JsonNode = nil;
          ReturnPath: string = ""; ReturnPathArn: string = "";
          Action: string = "SendTemplatedEmail"; TemplateArn: string = "";
          DestinationCcAddresses: JsonNode = nil; Version: string = "2010-12-01";
          DestinationToAddresses: JsonNode = nil): Recallable =
  ## postSendTemplatedEmail
  ## <p>Composes an email message using an email template and immediately queues it for sending.</p> <p>In order to send email using the <code>SendTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Calls to the <code>SendTemplatedEmail</code> operation may only include one <code>Destination</code> parameter. A destination is a set of recipients who will receive the same version of the email. The <code>Destination</code> parameter can include up to 50 recipients, across the To:, CC: and BCC: fields.</p> </li> <li> <p>The <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> </ul> <important> <p>If your call to the <code>SendTemplatedEmail</code> operation includes all of the required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES can't render the email because the template contains errors, it doesn't send the email. Additionally, because it already accepted the message, Amazon SES doesn't return a message stating that it was unable to send the email.</p> <p>For these reasons, we highly recommend that you set up Amazon SES to send you notifications when Rendering Failure events occur. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Sending Personalized Email Using the Amazon SES API</a> in the <i>Amazon Simple Email Service Developer Guide</i>.</p> </important>
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendTemplatedEmail</code>.
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   DestinationBccAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Template: string (required)
  ##           : The template to use when sending this email.
  ##   TemplateData: string (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendTemplatedEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ReturnPath: string
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Action: string (required)
  ##   TemplateArn: string
  ##              : The ARN of the template to use when sending this email.
  ##   DestinationCcAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   Version: string (required)
  ##   Source: string (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in<a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   DestinationToAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  var query_604864 = newJObject()
  var formData_604865 = newJObject()
  add(formData_604865, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_604865, "SourceArn", newJString(SourceArn))
  if DestinationBccAddresses != nil:
    formData_604865.add "Destination.BccAddresses", DestinationBccAddresses
  if ReplyToAddresses != nil:
    formData_604865.add "ReplyToAddresses", ReplyToAddresses
  add(formData_604865, "Template", newJString(Template))
  add(formData_604865, "TemplateData", newJString(TemplateData))
  if Tags != nil:
    formData_604865.add "Tags", Tags
  add(formData_604865, "ReturnPath", newJString(ReturnPath))
  add(formData_604865, "ReturnPathArn", newJString(ReturnPathArn))
  add(query_604864, "Action", newJString(Action))
  add(formData_604865, "TemplateArn", newJString(TemplateArn))
  if DestinationCcAddresses != nil:
    formData_604865.add "Destination.CcAddresses", DestinationCcAddresses
  add(query_604864, "Version", newJString(Version))
  add(formData_604865, "Source", newJString(Source))
  if DestinationToAddresses != nil:
    formData_604865.add "Destination.ToAddresses", DestinationToAddresses
  result = call_604863.call(nil, query_604864, nil, formData_604865, nil)

var postSendTemplatedEmail* = Call_PostSendTemplatedEmail_604837(
    name: "postSendTemplatedEmail", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SendTemplatedEmail",
    validator: validate_PostSendTemplatedEmail_604838, base: "/",
    url: url_PostSendTemplatedEmail_604839, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSendTemplatedEmail_604809 = ref object of OpenApiRestCall_602433
proc url_GetSendTemplatedEmail_604811(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSendTemplatedEmail_604810(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Composes an email message using an email template and immediately queues it for sending.</p> <p>In order to send email using the <code>SendTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Calls to the <code>SendTemplatedEmail</code> operation may only include one <code>Destination</code> parameter. A destination is a set of recipients who will receive the same version of the email. The <code>Destination</code> parameter can include up to 50 recipients, across the To:, CC: and BCC: fields.</p> </li> <li> <p>The <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> </ul> <important> <p>If your call to the <code>SendTemplatedEmail</code> operation includes all of the required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES can't render the email because the template contains errors, it doesn't send the email. Additionally, because it already accepted the message, Amazon SES doesn't return a message stating that it was unable to send the email.</p> <p>For these reasons, we highly recommend that you set up Amazon SES to send you notifications when Rendering Failure events occur. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Sending Personalized Email Using the Amazon SES API</a> in the <i>Amazon Simple Email Service Developer Guide</i>.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Template: JString (required)
  ##           : The template to use when sending this email.
  ##   Destination.BccAddresses: JArray
  ##                           : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Destination.ToAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  ##   TemplateArn: JString
  ##              : The ARN of the template to use when sending this email.
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendTemplatedEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   TemplateData: JString (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   Action: JString (required)
  ##   Destination.CcAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   Source: JString (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in<a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   ReturnPath: JString
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendTemplatedEmail</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_604812 = query.getOrDefault("ReplyToAddresses")
  valid_604812 = validateParameter(valid_604812, JArray, required = false,
                                 default = nil)
  if valid_604812 != nil:
    section.add "ReplyToAddresses", valid_604812
  assert query != nil,
        "query argument is necessary due to required `Template` field"
  var valid_604813 = query.getOrDefault("Template")
  valid_604813 = validateParameter(valid_604813, JString, required = true,
                                 default = nil)
  if valid_604813 != nil:
    section.add "Template", valid_604813
  var valid_604814 = query.getOrDefault("Destination.BccAddresses")
  valid_604814 = validateParameter(valid_604814, JArray, required = false,
                                 default = nil)
  if valid_604814 != nil:
    section.add "Destination.BccAddresses", valid_604814
  var valid_604815 = query.getOrDefault("ReturnPathArn")
  valid_604815 = validateParameter(valid_604815, JString, required = false,
                                 default = nil)
  if valid_604815 != nil:
    section.add "ReturnPathArn", valid_604815
  var valid_604816 = query.getOrDefault("Destination.ToAddresses")
  valid_604816 = validateParameter(valid_604816, JArray, required = false,
                                 default = nil)
  if valid_604816 != nil:
    section.add "Destination.ToAddresses", valid_604816
  var valid_604817 = query.getOrDefault("TemplateArn")
  valid_604817 = validateParameter(valid_604817, JString, required = false,
                                 default = nil)
  if valid_604817 != nil:
    section.add "TemplateArn", valid_604817
  var valid_604818 = query.getOrDefault("Tags")
  valid_604818 = validateParameter(valid_604818, JArray, required = false,
                                 default = nil)
  if valid_604818 != nil:
    section.add "Tags", valid_604818
  var valid_604819 = query.getOrDefault("SourceArn")
  valid_604819 = validateParameter(valid_604819, JString, required = false,
                                 default = nil)
  if valid_604819 != nil:
    section.add "SourceArn", valid_604819
  var valid_604820 = query.getOrDefault("TemplateData")
  valid_604820 = validateParameter(valid_604820, JString, required = true,
                                 default = nil)
  if valid_604820 != nil:
    section.add "TemplateData", valid_604820
  var valid_604821 = query.getOrDefault("Action")
  valid_604821 = validateParameter(valid_604821, JString, required = true,
                                 default = newJString("SendTemplatedEmail"))
  if valid_604821 != nil:
    section.add "Action", valid_604821
  var valid_604822 = query.getOrDefault("Destination.CcAddresses")
  valid_604822 = validateParameter(valid_604822, JArray, required = false,
                                 default = nil)
  if valid_604822 != nil:
    section.add "Destination.CcAddresses", valid_604822
  var valid_604823 = query.getOrDefault("Source")
  valid_604823 = validateParameter(valid_604823, JString, required = true,
                                 default = nil)
  if valid_604823 != nil:
    section.add "Source", valid_604823
  var valid_604824 = query.getOrDefault("ReturnPath")
  valid_604824 = validateParameter(valid_604824, JString, required = false,
                                 default = nil)
  if valid_604824 != nil:
    section.add "ReturnPath", valid_604824
  var valid_604825 = query.getOrDefault("ConfigurationSetName")
  valid_604825 = validateParameter(valid_604825, JString, required = false,
                                 default = nil)
  if valid_604825 != nil:
    section.add "ConfigurationSetName", valid_604825
  var valid_604826 = query.getOrDefault("Version")
  valid_604826 = validateParameter(valid_604826, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604826 != nil:
    section.add "Version", valid_604826
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604827 = header.getOrDefault("X-Amz-Date")
  valid_604827 = validateParameter(valid_604827, JString, required = false,
                                 default = nil)
  if valid_604827 != nil:
    section.add "X-Amz-Date", valid_604827
  var valid_604828 = header.getOrDefault("X-Amz-Security-Token")
  valid_604828 = validateParameter(valid_604828, JString, required = false,
                                 default = nil)
  if valid_604828 != nil:
    section.add "X-Amz-Security-Token", valid_604828
  var valid_604829 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604829 = validateParameter(valid_604829, JString, required = false,
                                 default = nil)
  if valid_604829 != nil:
    section.add "X-Amz-Content-Sha256", valid_604829
  var valid_604830 = header.getOrDefault("X-Amz-Algorithm")
  valid_604830 = validateParameter(valid_604830, JString, required = false,
                                 default = nil)
  if valid_604830 != nil:
    section.add "X-Amz-Algorithm", valid_604830
  var valid_604831 = header.getOrDefault("X-Amz-Signature")
  valid_604831 = validateParameter(valid_604831, JString, required = false,
                                 default = nil)
  if valid_604831 != nil:
    section.add "X-Amz-Signature", valid_604831
  var valid_604832 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604832 = validateParameter(valid_604832, JString, required = false,
                                 default = nil)
  if valid_604832 != nil:
    section.add "X-Amz-SignedHeaders", valid_604832
  var valid_604833 = header.getOrDefault("X-Amz-Credential")
  valid_604833 = validateParameter(valid_604833, JString, required = false,
                                 default = nil)
  if valid_604833 != nil:
    section.add "X-Amz-Credential", valid_604833
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604834: Call_GetSendTemplatedEmail_604809; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message using an email template and immediately queues it for sending.</p> <p>In order to send email using the <code>SendTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Calls to the <code>SendTemplatedEmail</code> operation may only include one <code>Destination</code> parameter. A destination is a set of recipients who will receive the same version of the email. The <code>Destination</code> parameter can include up to 50 recipients, across the To:, CC: and BCC: fields.</p> </li> <li> <p>The <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> </ul> <important> <p>If your call to the <code>SendTemplatedEmail</code> operation includes all of the required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES can't render the email because the template contains errors, it doesn't send the email. Additionally, because it already accepted the message, Amazon SES doesn't return a message stating that it was unable to send the email.</p> <p>For these reasons, we highly recommend that you set up Amazon SES to send you notifications when Rendering Failure events occur. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Sending Personalized Email Using the Amazon SES API</a> in the <i>Amazon Simple Email Service Developer Guide</i>.</p> </important>
  ## 
  let valid = call_604834.validator(path, query, header, formData, body)
  let scheme = call_604834.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604834.url(scheme.get, call_604834.host, call_604834.base,
                         call_604834.route, valid.getOrDefault("path"))
  result = hook(call_604834, url, valid)

proc call*(call_604835: Call_GetSendTemplatedEmail_604809; Template: string;
          TemplateData: string; Source: string; ReplyToAddresses: JsonNode = nil;
          DestinationBccAddresses: JsonNode = nil; ReturnPathArn: string = "";
          DestinationToAddresses: JsonNode = nil; TemplateArn: string = "";
          Tags: JsonNode = nil; SourceArn: string = "";
          Action: string = "SendTemplatedEmail";
          DestinationCcAddresses: JsonNode = nil; ReturnPath: string = "";
          ConfigurationSetName: string = ""; Version: string = "2010-12-01"): Recallable =
  ## getSendTemplatedEmail
  ## <p>Composes an email message using an email template and immediately queues it for sending.</p> <p>In order to send email using the <code>SendTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Calls to the <code>SendTemplatedEmail</code> operation may only include one <code>Destination</code> parameter. A destination is a set of recipients who will receive the same version of the email. The <code>Destination</code> parameter can include up to 50 recipients, across the To:, CC: and BCC: fields.</p> </li> <li> <p>The <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> </ul> <important> <p>If your call to the <code>SendTemplatedEmail</code> operation includes all of the required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES can't render the email because the template contains errors, it doesn't send the email. Additionally, because it already accepted the message, Amazon SES doesn't return a message stating that it was unable to send the email.</p> <p>For these reasons, we highly recommend that you set up Amazon SES to send you notifications when Rendering Failure events occur. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Sending Personalized Email Using the Amazon SES API</a> in the <i>Amazon Simple Email Service Developer Guide</i>.</p> </important>
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Template: string (required)
  ##           : The template to use when sending this email.
  ##   DestinationBccAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   DestinationToAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  ##   TemplateArn: string
  ##              : The ARN of the template to use when sending this email.
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendTemplatedEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   TemplateData: string (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   Action: string (required)
  ##   DestinationCcAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   Source: string (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in<a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   ReturnPath: string
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendTemplatedEmail</code>.
  ##   Version: string (required)
  var query_604836 = newJObject()
  if ReplyToAddresses != nil:
    query_604836.add "ReplyToAddresses", ReplyToAddresses
  add(query_604836, "Template", newJString(Template))
  if DestinationBccAddresses != nil:
    query_604836.add "Destination.BccAddresses", DestinationBccAddresses
  add(query_604836, "ReturnPathArn", newJString(ReturnPathArn))
  if DestinationToAddresses != nil:
    query_604836.add "Destination.ToAddresses", DestinationToAddresses
  add(query_604836, "TemplateArn", newJString(TemplateArn))
  if Tags != nil:
    query_604836.add "Tags", Tags
  add(query_604836, "SourceArn", newJString(SourceArn))
  add(query_604836, "TemplateData", newJString(TemplateData))
  add(query_604836, "Action", newJString(Action))
  if DestinationCcAddresses != nil:
    query_604836.add "Destination.CcAddresses", DestinationCcAddresses
  add(query_604836, "Source", newJString(Source))
  add(query_604836, "ReturnPath", newJString(ReturnPath))
  add(query_604836, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_604836, "Version", newJString(Version))
  result = call_604835.call(nil, query_604836, nil, nil, nil)

var getSendTemplatedEmail* = Call_GetSendTemplatedEmail_604809(
    name: "getSendTemplatedEmail", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SendTemplatedEmail",
    validator: validate_GetSendTemplatedEmail_604810, base: "/",
    url: url_GetSendTemplatedEmail_604811, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetActiveReceiptRuleSet_604882 = ref object of OpenApiRestCall_602433
proc url_PostSetActiveReceiptRuleSet_604884(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSetActiveReceiptRuleSet_604883(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the specified receipt rule set as the active receipt rule set.</p> <note> <p>To disable your email-receiving through Amazon SES completely, you can call this API with RuleSetName set to null.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604885 = query.getOrDefault("Action")
  valid_604885 = validateParameter(valid_604885, JString, required = true, default = newJString(
      "SetActiveReceiptRuleSet"))
  if valid_604885 != nil:
    section.add "Action", valid_604885
  var valid_604886 = query.getOrDefault("Version")
  valid_604886 = validateParameter(valid_604886, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604886 != nil:
    section.add "Version", valid_604886
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604887 = header.getOrDefault("X-Amz-Date")
  valid_604887 = validateParameter(valid_604887, JString, required = false,
                                 default = nil)
  if valid_604887 != nil:
    section.add "X-Amz-Date", valid_604887
  var valid_604888 = header.getOrDefault("X-Amz-Security-Token")
  valid_604888 = validateParameter(valid_604888, JString, required = false,
                                 default = nil)
  if valid_604888 != nil:
    section.add "X-Amz-Security-Token", valid_604888
  var valid_604889 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604889 = validateParameter(valid_604889, JString, required = false,
                                 default = nil)
  if valid_604889 != nil:
    section.add "X-Amz-Content-Sha256", valid_604889
  var valid_604890 = header.getOrDefault("X-Amz-Algorithm")
  valid_604890 = validateParameter(valid_604890, JString, required = false,
                                 default = nil)
  if valid_604890 != nil:
    section.add "X-Amz-Algorithm", valid_604890
  var valid_604891 = header.getOrDefault("X-Amz-Signature")
  valid_604891 = validateParameter(valid_604891, JString, required = false,
                                 default = nil)
  if valid_604891 != nil:
    section.add "X-Amz-Signature", valid_604891
  var valid_604892 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604892 = validateParameter(valid_604892, JString, required = false,
                                 default = nil)
  if valid_604892 != nil:
    section.add "X-Amz-SignedHeaders", valid_604892
  var valid_604893 = header.getOrDefault("X-Amz-Credential")
  valid_604893 = validateParameter(valid_604893, JString, required = false,
                                 default = nil)
  if valid_604893 != nil:
    section.add "X-Amz-Credential", valid_604893
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleSetName: JString
  ##              : The name of the receipt rule set to make active. Setting this value to null disables all email receiving.
  section = newJObject()
  var valid_604894 = formData.getOrDefault("RuleSetName")
  valid_604894 = validateParameter(valid_604894, JString, required = false,
                                 default = nil)
  if valid_604894 != nil:
    section.add "RuleSetName", valid_604894
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604895: Call_PostSetActiveReceiptRuleSet_604882; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the specified receipt rule set as the active receipt rule set.</p> <note> <p>To disable your email-receiving through Amazon SES completely, you can call this API with RuleSetName set to null.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604895.validator(path, query, header, formData, body)
  let scheme = call_604895.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604895.url(scheme.get, call_604895.host, call_604895.base,
                         call_604895.route, valid.getOrDefault("path"))
  result = hook(call_604895, url, valid)

proc call*(call_604896: Call_PostSetActiveReceiptRuleSet_604882;
          RuleSetName: string = ""; Action: string = "SetActiveReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## postSetActiveReceiptRuleSet
  ## <p>Sets the specified receipt rule set as the active receipt rule set.</p> <note> <p>To disable your email-receiving through Amazon SES completely, you can call this API with RuleSetName set to null.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string
  ##              : The name of the receipt rule set to make active. Setting this value to null disables all email receiving.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604897 = newJObject()
  var formData_604898 = newJObject()
  add(formData_604898, "RuleSetName", newJString(RuleSetName))
  add(query_604897, "Action", newJString(Action))
  add(query_604897, "Version", newJString(Version))
  result = call_604896.call(nil, query_604897, nil, formData_604898, nil)

var postSetActiveReceiptRuleSet* = Call_PostSetActiveReceiptRuleSet_604882(
    name: "postSetActiveReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SetActiveReceiptRuleSet",
    validator: validate_PostSetActiveReceiptRuleSet_604883, base: "/",
    url: url_PostSetActiveReceiptRuleSet_604884,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetActiveReceiptRuleSet_604866 = ref object of OpenApiRestCall_602433
proc url_GetSetActiveReceiptRuleSet_604868(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSetActiveReceiptRuleSet_604867(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the specified receipt rule set as the active receipt rule set.</p> <note> <p>To disable your email-receiving through Amazon SES completely, you can call this API with RuleSetName set to null.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleSetName: JString
  ##              : The name of the receipt rule set to make active. Setting this value to null disables all email receiving.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_604869 = query.getOrDefault("RuleSetName")
  valid_604869 = validateParameter(valid_604869, JString, required = false,
                                 default = nil)
  if valid_604869 != nil:
    section.add "RuleSetName", valid_604869
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604870 = query.getOrDefault("Action")
  valid_604870 = validateParameter(valid_604870, JString, required = true, default = newJString(
      "SetActiveReceiptRuleSet"))
  if valid_604870 != nil:
    section.add "Action", valid_604870
  var valid_604871 = query.getOrDefault("Version")
  valid_604871 = validateParameter(valid_604871, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604871 != nil:
    section.add "Version", valid_604871
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604872 = header.getOrDefault("X-Amz-Date")
  valid_604872 = validateParameter(valid_604872, JString, required = false,
                                 default = nil)
  if valid_604872 != nil:
    section.add "X-Amz-Date", valid_604872
  var valid_604873 = header.getOrDefault("X-Amz-Security-Token")
  valid_604873 = validateParameter(valid_604873, JString, required = false,
                                 default = nil)
  if valid_604873 != nil:
    section.add "X-Amz-Security-Token", valid_604873
  var valid_604874 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604874 = validateParameter(valid_604874, JString, required = false,
                                 default = nil)
  if valid_604874 != nil:
    section.add "X-Amz-Content-Sha256", valid_604874
  var valid_604875 = header.getOrDefault("X-Amz-Algorithm")
  valid_604875 = validateParameter(valid_604875, JString, required = false,
                                 default = nil)
  if valid_604875 != nil:
    section.add "X-Amz-Algorithm", valid_604875
  var valid_604876 = header.getOrDefault("X-Amz-Signature")
  valid_604876 = validateParameter(valid_604876, JString, required = false,
                                 default = nil)
  if valid_604876 != nil:
    section.add "X-Amz-Signature", valid_604876
  var valid_604877 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604877 = validateParameter(valid_604877, JString, required = false,
                                 default = nil)
  if valid_604877 != nil:
    section.add "X-Amz-SignedHeaders", valid_604877
  var valid_604878 = header.getOrDefault("X-Amz-Credential")
  valid_604878 = validateParameter(valid_604878, JString, required = false,
                                 default = nil)
  if valid_604878 != nil:
    section.add "X-Amz-Credential", valid_604878
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604879: Call_GetSetActiveReceiptRuleSet_604866; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the specified receipt rule set as the active receipt rule set.</p> <note> <p>To disable your email-receiving through Amazon SES completely, you can call this API with RuleSetName set to null.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_604879.validator(path, query, header, formData, body)
  let scheme = call_604879.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604879.url(scheme.get, call_604879.host, call_604879.base,
                         call_604879.route, valid.getOrDefault("path"))
  result = hook(call_604879, url, valid)

proc call*(call_604880: Call_GetSetActiveReceiptRuleSet_604866;
          RuleSetName: string = ""; Action: string = "SetActiveReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## getSetActiveReceiptRuleSet
  ## <p>Sets the specified receipt rule set as the active receipt rule set.</p> <note> <p>To disable your email-receiving through Amazon SES completely, you can call this API with RuleSetName set to null.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string
  ##              : The name of the receipt rule set to make active. Setting this value to null disables all email receiving.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604881 = newJObject()
  add(query_604881, "RuleSetName", newJString(RuleSetName))
  add(query_604881, "Action", newJString(Action))
  add(query_604881, "Version", newJString(Version))
  result = call_604880.call(nil, query_604881, nil, nil, nil)

var getSetActiveReceiptRuleSet* = Call_GetSetActiveReceiptRuleSet_604866(
    name: "getSetActiveReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SetActiveReceiptRuleSet",
    validator: validate_GetSetActiveReceiptRuleSet_604867, base: "/",
    url: url_GetSetActiveReceiptRuleSet_604868,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetIdentityDkimEnabled_604916 = ref object of OpenApiRestCall_602433
proc url_PostSetIdentityDkimEnabled_604918(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSetIdentityDkimEnabled_604917(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends from addresses on that domain. If Easy DKIM signing is enabled for an email address, then Amazon SES uses DKIM to sign all email it sends from that address.</p> <note> <p>For email addresses (for example, <code>user@example.com</code>), you can only enable DKIM signing if the corresponding domain (in this case, <code>example.com</code>) has been set up to use Easy DKIM.</p> </note> <p>You can enable DKIM signing for an identity at any time after you start the verification process for the identity, even if the verification process isn't complete. </p> <p>You can execute this operation no more than once per second.</p> <p>For more information about Easy DKIM signing, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604919 = query.getOrDefault("Action")
  valid_604919 = validateParameter(valid_604919, JString, required = true,
                                 default = newJString("SetIdentityDkimEnabled"))
  if valid_604919 != nil:
    section.add "Action", valid_604919
  var valid_604920 = query.getOrDefault("Version")
  valid_604920 = validateParameter(valid_604920, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604920 != nil:
    section.add "Version", valid_604920
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604921 = header.getOrDefault("X-Amz-Date")
  valid_604921 = validateParameter(valid_604921, JString, required = false,
                                 default = nil)
  if valid_604921 != nil:
    section.add "X-Amz-Date", valid_604921
  var valid_604922 = header.getOrDefault("X-Amz-Security-Token")
  valid_604922 = validateParameter(valid_604922, JString, required = false,
                                 default = nil)
  if valid_604922 != nil:
    section.add "X-Amz-Security-Token", valid_604922
  var valid_604923 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604923 = validateParameter(valid_604923, JString, required = false,
                                 default = nil)
  if valid_604923 != nil:
    section.add "X-Amz-Content-Sha256", valid_604923
  var valid_604924 = header.getOrDefault("X-Amz-Algorithm")
  valid_604924 = validateParameter(valid_604924, JString, required = false,
                                 default = nil)
  if valid_604924 != nil:
    section.add "X-Amz-Algorithm", valid_604924
  var valid_604925 = header.getOrDefault("X-Amz-Signature")
  valid_604925 = validateParameter(valid_604925, JString, required = false,
                                 default = nil)
  if valid_604925 != nil:
    section.add "X-Amz-Signature", valid_604925
  var valid_604926 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604926 = validateParameter(valid_604926, JString, required = false,
                                 default = nil)
  if valid_604926 != nil:
    section.add "X-Amz-SignedHeaders", valid_604926
  var valid_604927 = header.getOrDefault("X-Amz-Credential")
  valid_604927 = validateParameter(valid_604927, JString, required = false,
                                 default = nil)
  if valid_604927 != nil:
    section.add "X-Amz-Credential", valid_604927
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identity: JString (required)
  ##           : The identity for which DKIM signing should be enabled or disabled.
  ##   DkimEnabled: JBool (required)
  ##              : Sets whether DKIM signing is enabled for an identity. Set to <code>true</code> to enable DKIM signing for this identity; <code>false</code> to disable it. 
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identity` field"
  var valid_604928 = formData.getOrDefault("Identity")
  valid_604928 = validateParameter(valid_604928, JString, required = true,
                                 default = nil)
  if valid_604928 != nil:
    section.add "Identity", valid_604928
  var valid_604929 = formData.getOrDefault("DkimEnabled")
  valid_604929 = validateParameter(valid_604929, JBool, required = true, default = nil)
  if valid_604929 != nil:
    section.add "DkimEnabled", valid_604929
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604930: Call_PostSetIdentityDkimEnabled_604916; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends from addresses on that domain. If Easy DKIM signing is enabled for an email address, then Amazon SES uses DKIM to sign all email it sends from that address.</p> <note> <p>For email addresses (for example, <code>user@example.com</code>), you can only enable DKIM signing if the corresponding domain (in this case, <code>example.com</code>) has been set up to use Easy DKIM.</p> </note> <p>You can enable DKIM signing for an identity at any time after you start the verification process for the identity, even if the verification process isn't complete. </p> <p>You can execute this operation no more than once per second.</p> <p>For more information about Easy DKIM signing, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_604930.validator(path, query, header, formData, body)
  let scheme = call_604930.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604930.url(scheme.get, call_604930.host, call_604930.base,
                         call_604930.route, valid.getOrDefault("path"))
  result = hook(call_604930, url, valid)

proc call*(call_604931: Call_PostSetIdentityDkimEnabled_604916; Identity: string;
          DkimEnabled: bool; Action: string = "SetIdentityDkimEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## postSetIdentityDkimEnabled
  ## <p>Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends from addresses on that domain. If Easy DKIM signing is enabled for an email address, then Amazon SES uses DKIM to sign all email it sends from that address.</p> <note> <p>For email addresses (for example, <code>user@example.com</code>), you can only enable DKIM signing if the corresponding domain (in this case, <code>example.com</code>) has been set up to use Easy DKIM.</p> </note> <p>You can enable DKIM signing for an identity at any time after you start the verification process for the identity, even if the verification process isn't complete. </p> <p>You can execute this operation no more than once per second.</p> <p>For more information about Easy DKIM signing, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
  ##   Identity: string (required)
  ##           : The identity for which DKIM signing should be enabled or disabled.
  ##   Action: string (required)
  ##   DkimEnabled: bool (required)
  ##              : Sets whether DKIM signing is enabled for an identity. Set to <code>true</code> to enable DKIM signing for this identity; <code>false</code> to disable it. 
  ##   Version: string (required)
  var query_604932 = newJObject()
  var formData_604933 = newJObject()
  add(formData_604933, "Identity", newJString(Identity))
  add(query_604932, "Action", newJString(Action))
  add(formData_604933, "DkimEnabled", newJBool(DkimEnabled))
  add(query_604932, "Version", newJString(Version))
  result = call_604931.call(nil, query_604932, nil, formData_604933, nil)

var postSetIdentityDkimEnabled* = Call_PostSetIdentityDkimEnabled_604916(
    name: "postSetIdentityDkimEnabled", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SetIdentityDkimEnabled",
    validator: validate_PostSetIdentityDkimEnabled_604917, base: "/",
    url: url_PostSetIdentityDkimEnabled_604918,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetIdentityDkimEnabled_604899 = ref object of OpenApiRestCall_602433
proc url_GetSetIdentityDkimEnabled_604901(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSetIdentityDkimEnabled_604900(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends from addresses on that domain. If Easy DKIM signing is enabled for an email address, then Amazon SES uses DKIM to sign all email it sends from that address.</p> <note> <p>For email addresses (for example, <code>user@example.com</code>), you can only enable DKIM signing if the corresponding domain (in this case, <code>example.com</code>) has been set up to use Easy DKIM.</p> </note> <p>You can enable DKIM signing for an identity at any time after you start the verification process for the identity, even if the verification process isn't complete. </p> <p>You can execute this operation no more than once per second.</p> <p>For more information about Easy DKIM signing, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : The identity for which DKIM signing should be enabled or disabled.
  ##   DkimEnabled: JBool (required)
  ##              : Sets whether DKIM signing is enabled for an identity. Set to <code>true</code> to enable DKIM signing for this identity; <code>false</code> to disable it. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_604902 = query.getOrDefault("Identity")
  valid_604902 = validateParameter(valid_604902, JString, required = true,
                                 default = nil)
  if valid_604902 != nil:
    section.add "Identity", valid_604902
  var valid_604903 = query.getOrDefault("DkimEnabled")
  valid_604903 = validateParameter(valid_604903, JBool, required = true, default = nil)
  if valid_604903 != nil:
    section.add "DkimEnabled", valid_604903
  var valid_604904 = query.getOrDefault("Action")
  valid_604904 = validateParameter(valid_604904, JString, required = true,
                                 default = newJString("SetIdentityDkimEnabled"))
  if valid_604904 != nil:
    section.add "Action", valid_604904
  var valid_604905 = query.getOrDefault("Version")
  valid_604905 = validateParameter(valid_604905, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604905 != nil:
    section.add "Version", valid_604905
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604906 = header.getOrDefault("X-Amz-Date")
  valid_604906 = validateParameter(valid_604906, JString, required = false,
                                 default = nil)
  if valid_604906 != nil:
    section.add "X-Amz-Date", valid_604906
  var valid_604907 = header.getOrDefault("X-Amz-Security-Token")
  valid_604907 = validateParameter(valid_604907, JString, required = false,
                                 default = nil)
  if valid_604907 != nil:
    section.add "X-Amz-Security-Token", valid_604907
  var valid_604908 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604908 = validateParameter(valid_604908, JString, required = false,
                                 default = nil)
  if valid_604908 != nil:
    section.add "X-Amz-Content-Sha256", valid_604908
  var valid_604909 = header.getOrDefault("X-Amz-Algorithm")
  valid_604909 = validateParameter(valid_604909, JString, required = false,
                                 default = nil)
  if valid_604909 != nil:
    section.add "X-Amz-Algorithm", valid_604909
  var valid_604910 = header.getOrDefault("X-Amz-Signature")
  valid_604910 = validateParameter(valid_604910, JString, required = false,
                                 default = nil)
  if valid_604910 != nil:
    section.add "X-Amz-Signature", valid_604910
  var valid_604911 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604911 = validateParameter(valid_604911, JString, required = false,
                                 default = nil)
  if valid_604911 != nil:
    section.add "X-Amz-SignedHeaders", valid_604911
  var valid_604912 = header.getOrDefault("X-Amz-Credential")
  valid_604912 = validateParameter(valid_604912, JString, required = false,
                                 default = nil)
  if valid_604912 != nil:
    section.add "X-Amz-Credential", valid_604912
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604913: Call_GetSetIdentityDkimEnabled_604899; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends from addresses on that domain. If Easy DKIM signing is enabled for an email address, then Amazon SES uses DKIM to sign all email it sends from that address.</p> <note> <p>For email addresses (for example, <code>user@example.com</code>), you can only enable DKIM signing if the corresponding domain (in this case, <code>example.com</code>) has been set up to use Easy DKIM.</p> </note> <p>You can enable DKIM signing for an identity at any time after you start the verification process for the identity, even if the verification process isn't complete. </p> <p>You can execute this operation no more than once per second.</p> <p>For more information about Easy DKIM signing, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_604913.validator(path, query, header, formData, body)
  let scheme = call_604913.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604913.url(scheme.get, call_604913.host, call_604913.base,
                         call_604913.route, valid.getOrDefault("path"))
  result = hook(call_604913, url, valid)

proc call*(call_604914: Call_GetSetIdentityDkimEnabled_604899; Identity: string;
          DkimEnabled: bool; Action: string = "SetIdentityDkimEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## getSetIdentityDkimEnabled
  ## <p>Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends from addresses on that domain. If Easy DKIM signing is enabled for an email address, then Amazon SES uses DKIM to sign all email it sends from that address.</p> <note> <p>For email addresses (for example, <code>user@example.com</code>), you can only enable DKIM signing if the corresponding domain (in this case, <code>example.com</code>) has been set up to use Easy DKIM.</p> </note> <p>You can enable DKIM signing for an identity at any time after you start the verification process for the identity, even if the verification process isn't complete. </p> <p>You can execute this operation no more than once per second.</p> <p>For more information about Easy DKIM signing, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
  ##   Identity: string (required)
  ##           : The identity for which DKIM signing should be enabled or disabled.
  ##   DkimEnabled: bool (required)
  ##              : Sets whether DKIM signing is enabled for an identity. Set to <code>true</code> to enable DKIM signing for this identity; <code>false</code> to disable it. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604915 = newJObject()
  add(query_604915, "Identity", newJString(Identity))
  add(query_604915, "DkimEnabled", newJBool(DkimEnabled))
  add(query_604915, "Action", newJString(Action))
  add(query_604915, "Version", newJString(Version))
  result = call_604914.call(nil, query_604915, nil, nil, nil)

var getSetIdentityDkimEnabled* = Call_GetSetIdentityDkimEnabled_604899(
    name: "getSetIdentityDkimEnabled", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SetIdentityDkimEnabled",
    validator: validate_GetSetIdentityDkimEnabled_604900, base: "/",
    url: url_GetSetIdentityDkimEnabled_604901,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetIdentityFeedbackForwardingEnabled_604951 = ref object of OpenApiRestCall_602433
proc url_PostSetIdentityFeedbackForwardingEnabled_604953(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSetIdentityFeedbackForwardingEnabled_604952(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given an identity (an email address or a domain), enables or disables whether Amazon SES forwards bounce and complaint notifications as email. Feedback forwarding can only be disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and complaints.</p> <note> <p>Feedback forwarding does not apply to delivery notifications. Delivery notifications are only available through Amazon SNS.</p> </note> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604954 = query.getOrDefault("Action")
  valid_604954 = validateParameter(valid_604954, JString, required = true, default = newJString(
      "SetIdentityFeedbackForwardingEnabled"))
  if valid_604954 != nil:
    section.add "Action", valid_604954
  var valid_604955 = query.getOrDefault("Version")
  valid_604955 = validateParameter(valid_604955, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604955 != nil:
    section.add "Version", valid_604955
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604956 = header.getOrDefault("X-Amz-Date")
  valid_604956 = validateParameter(valid_604956, JString, required = false,
                                 default = nil)
  if valid_604956 != nil:
    section.add "X-Amz-Date", valid_604956
  var valid_604957 = header.getOrDefault("X-Amz-Security-Token")
  valid_604957 = validateParameter(valid_604957, JString, required = false,
                                 default = nil)
  if valid_604957 != nil:
    section.add "X-Amz-Security-Token", valid_604957
  var valid_604958 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604958 = validateParameter(valid_604958, JString, required = false,
                                 default = nil)
  if valid_604958 != nil:
    section.add "X-Amz-Content-Sha256", valid_604958
  var valid_604959 = header.getOrDefault("X-Amz-Algorithm")
  valid_604959 = validateParameter(valid_604959, JString, required = false,
                                 default = nil)
  if valid_604959 != nil:
    section.add "X-Amz-Algorithm", valid_604959
  var valid_604960 = header.getOrDefault("X-Amz-Signature")
  valid_604960 = validateParameter(valid_604960, JString, required = false,
                                 default = nil)
  if valid_604960 != nil:
    section.add "X-Amz-Signature", valid_604960
  var valid_604961 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604961 = validateParameter(valid_604961, JString, required = false,
                                 default = nil)
  if valid_604961 != nil:
    section.add "X-Amz-SignedHeaders", valid_604961
  var valid_604962 = header.getOrDefault("X-Amz-Credential")
  valid_604962 = validateParameter(valid_604962, JString, required = false,
                                 default = nil)
  if valid_604962 != nil:
    section.add "X-Amz-Credential", valid_604962
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identity: JString (required)
  ##           : The identity for which to set bounce and complaint notification forwarding. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   ForwardingEnabled: JBool (required)
  ##                    : Sets whether Amazon SES will forward bounce and complaint notifications as email. <code>true</code> specifies that Amazon SES will forward bounce and complaint notifications as email, in addition to any Amazon SNS topic publishing otherwise specified. <code>false</code> specifies that Amazon SES will publish bounce and complaint notifications only through Amazon SNS. This value can only be set to <code>false</code> when Amazon SNS topics are set for both <code>Bounce</code> and <code>Complaint</code> notification types.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identity` field"
  var valid_604963 = formData.getOrDefault("Identity")
  valid_604963 = validateParameter(valid_604963, JString, required = true,
                                 default = nil)
  if valid_604963 != nil:
    section.add "Identity", valid_604963
  var valid_604964 = formData.getOrDefault("ForwardingEnabled")
  valid_604964 = validateParameter(valid_604964, JBool, required = true, default = nil)
  if valid_604964 != nil:
    section.add "ForwardingEnabled", valid_604964
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604965: Call_PostSetIdentityFeedbackForwardingEnabled_604951;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given an identity (an email address or a domain), enables or disables whether Amazon SES forwards bounce and complaint notifications as email. Feedback forwarding can only be disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and complaints.</p> <note> <p>Feedback forwarding does not apply to delivery notifications. Delivery notifications are only available through Amazon SNS.</p> </note> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_604965.validator(path, query, header, formData, body)
  let scheme = call_604965.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604965.url(scheme.get, call_604965.host, call_604965.base,
                         call_604965.route, valid.getOrDefault("path"))
  result = hook(call_604965, url, valid)

proc call*(call_604966: Call_PostSetIdentityFeedbackForwardingEnabled_604951;
          Identity: string; ForwardingEnabled: bool;
          Action: string = "SetIdentityFeedbackForwardingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## postSetIdentityFeedbackForwardingEnabled
  ## <p>Given an identity (an email address or a domain), enables or disables whether Amazon SES forwards bounce and complaint notifications as email. Feedback forwarding can only be disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and complaints.</p> <note> <p>Feedback forwarding does not apply to delivery notifications. Delivery notifications are only available through Amazon SNS.</p> </note> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Identity: string (required)
  ##           : The identity for which to set bounce and complaint notification forwarding. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ForwardingEnabled: bool (required)
  ##                    : Sets whether Amazon SES will forward bounce and complaint notifications as email. <code>true</code> specifies that Amazon SES will forward bounce and complaint notifications as email, in addition to any Amazon SNS topic publishing otherwise specified. <code>false</code> specifies that Amazon SES will publish bounce and complaint notifications only through Amazon SNS. This value can only be set to <code>false</code> when Amazon SNS topics are set for both <code>Bounce</code> and <code>Complaint</code> notification types.
  var query_604967 = newJObject()
  var formData_604968 = newJObject()
  add(formData_604968, "Identity", newJString(Identity))
  add(query_604967, "Action", newJString(Action))
  add(query_604967, "Version", newJString(Version))
  add(formData_604968, "ForwardingEnabled", newJBool(ForwardingEnabled))
  result = call_604966.call(nil, query_604967, nil, formData_604968, nil)

var postSetIdentityFeedbackForwardingEnabled* = Call_PostSetIdentityFeedbackForwardingEnabled_604951(
    name: "postSetIdentityFeedbackForwardingEnabled", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=SetIdentityFeedbackForwardingEnabled",
    validator: validate_PostSetIdentityFeedbackForwardingEnabled_604952,
    base: "/", url: url_PostSetIdentityFeedbackForwardingEnabled_604953,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetIdentityFeedbackForwardingEnabled_604934 = ref object of OpenApiRestCall_602433
proc url_GetSetIdentityFeedbackForwardingEnabled_604936(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSetIdentityFeedbackForwardingEnabled_604935(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given an identity (an email address or a domain), enables or disables whether Amazon SES forwards bounce and complaint notifications as email. Feedback forwarding can only be disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and complaints.</p> <note> <p>Feedback forwarding does not apply to delivery notifications. Delivery notifications are only available through Amazon SNS.</p> </note> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : The identity for which to set bounce and complaint notification forwarding. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   ForwardingEnabled: JBool (required)
  ##                    : Sets whether Amazon SES will forward bounce and complaint notifications as email. <code>true</code> specifies that Amazon SES will forward bounce and complaint notifications as email, in addition to any Amazon SNS topic publishing otherwise specified. <code>false</code> specifies that Amazon SES will publish bounce and complaint notifications only through Amazon SNS. This value can only be set to <code>false</code> when Amazon SNS topics are set for both <code>Bounce</code> and <code>Complaint</code> notification types.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_604937 = query.getOrDefault("Identity")
  valid_604937 = validateParameter(valid_604937, JString, required = true,
                                 default = nil)
  if valid_604937 != nil:
    section.add "Identity", valid_604937
  var valid_604938 = query.getOrDefault("ForwardingEnabled")
  valid_604938 = validateParameter(valid_604938, JBool, required = true, default = nil)
  if valid_604938 != nil:
    section.add "ForwardingEnabled", valid_604938
  var valid_604939 = query.getOrDefault("Action")
  valid_604939 = validateParameter(valid_604939, JString, required = true, default = newJString(
      "SetIdentityFeedbackForwardingEnabled"))
  if valid_604939 != nil:
    section.add "Action", valid_604939
  var valid_604940 = query.getOrDefault("Version")
  valid_604940 = validateParameter(valid_604940, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604940 != nil:
    section.add "Version", valid_604940
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604941 = header.getOrDefault("X-Amz-Date")
  valid_604941 = validateParameter(valid_604941, JString, required = false,
                                 default = nil)
  if valid_604941 != nil:
    section.add "X-Amz-Date", valid_604941
  var valid_604942 = header.getOrDefault("X-Amz-Security-Token")
  valid_604942 = validateParameter(valid_604942, JString, required = false,
                                 default = nil)
  if valid_604942 != nil:
    section.add "X-Amz-Security-Token", valid_604942
  var valid_604943 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604943 = validateParameter(valid_604943, JString, required = false,
                                 default = nil)
  if valid_604943 != nil:
    section.add "X-Amz-Content-Sha256", valid_604943
  var valid_604944 = header.getOrDefault("X-Amz-Algorithm")
  valid_604944 = validateParameter(valid_604944, JString, required = false,
                                 default = nil)
  if valid_604944 != nil:
    section.add "X-Amz-Algorithm", valid_604944
  var valid_604945 = header.getOrDefault("X-Amz-Signature")
  valid_604945 = validateParameter(valid_604945, JString, required = false,
                                 default = nil)
  if valid_604945 != nil:
    section.add "X-Amz-Signature", valid_604945
  var valid_604946 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604946 = validateParameter(valid_604946, JString, required = false,
                                 default = nil)
  if valid_604946 != nil:
    section.add "X-Amz-SignedHeaders", valid_604946
  var valid_604947 = header.getOrDefault("X-Amz-Credential")
  valid_604947 = validateParameter(valid_604947, JString, required = false,
                                 default = nil)
  if valid_604947 != nil:
    section.add "X-Amz-Credential", valid_604947
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604948: Call_GetSetIdentityFeedbackForwardingEnabled_604934;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given an identity (an email address or a domain), enables or disables whether Amazon SES forwards bounce and complaint notifications as email. Feedback forwarding can only be disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and complaints.</p> <note> <p>Feedback forwarding does not apply to delivery notifications. Delivery notifications are only available through Amazon SNS.</p> </note> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_604948.validator(path, query, header, formData, body)
  let scheme = call_604948.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604948.url(scheme.get, call_604948.host, call_604948.base,
                         call_604948.route, valid.getOrDefault("path"))
  result = hook(call_604948, url, valid)

proc call*(call_604949: Call_GetSetIdentityFeedbackForwardingEnabled_604934;
          Identity: string; ForwardingEnabled: bool;
          Action: string = "SetIdentityFeedbackForwardingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## getSetIdentityFeedbackForwardingEnabled
  ## <p>Given an identity (an email address or a domain), enables or disables whether Amazon SES forwards bounce and complaint notifications as email. Feedback forwarding can only be disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and complaints.</p> <note> <p>Feedback forwarding does not apply to delivery notifications. Delivery notifications are only available through Amazon SNS.</p> </note> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Identity: string (required)
  ##           : The identity for which to set bounce and complaint notification forwarding. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   ForwardingEnabled: bool (required)
  ##                    : Sets whether Amazon SES will forward bounce and complaint notifications as email. <code>true</code> specifies that Amazon SES will forward bounce and complaint notifications as email, in addition to any Amazon SNS topic publishing otherwise specified. <code>false</code> specifies that Amazon SES will publish bounce and complaint notifications only through Amazon SNS. This value can only be set to <code>false</code> when Amazon SNS topics are set for both <code>Bounce</code> and <code>Complaint</code> notification types.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604950 = newJObject()
  add(query_604950, "Identity", newJString(Identity))
  add(query_604950, "ForwardingEnabled", newJBool(ForwardingEnabled))
  add(query_604950, "Action", newJString(Action))
  add(query_604950, "Version", newJString(Version))
  result = call_604949.call(nil, query_604950, nil, nil, nil)

var getSetIdentityFeedbackForwardingEnabled* = Call_GetSetIdentityFeedbackForwardingEnabled_604934(
    name: "getSetIdentityFeedbackForwardingEnabled", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=SetIdentityFeedbackForwardingEnabled",
    validator: validate_GetSetIdentityFeedbackForwardingEnabled_604935, base: "/",
    url: url_GetSetIdentityFeedbackForwardingEnabled_604936,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetIdentityHeadersInNotificationsEnabled_604987 = ref object of OpenApiRestCall_602433
proc url_PostSetIdentityHeadersInNotificationsEnabled_604989(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSetIdentityHeadersInNotificationsEnabled_604988(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given an identity (an email address or a domain), sets whether Amazon SES includes the original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified type.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604990 = query.getOrDefault("Action")
  valid_604990 = validateParameter(valid_604990, JString, required = true, default = newJString(
      "SetIdentityHeadersInNotificationsEnabled"))
  if valid_604990 != nil:
    section.add "Action", valid_604990
  var valid_604991 = query.getOrDefault("Version")
  valid_604991 = validateParameter(valid_604991, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604991 != nil:
    section.add "Version", valid_604991
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604992 = header.getOrDefault("X-Amz-Date")
  valid_604992 = validateParameter(valid_604992, JString, required = false,
                                 default = nil)
  if valid_604992 != nil:
    section.add "X-Amz-Date", valid_604992
  var valid_604993 = header.getOrDefault("X-Amz-Security-Token")
  valid_604993 = validateParameter(valid_604993, JString, required = false,
                                 default = nil)
  if valid_604993 != nil:
    section.add "X-Amz-Security-Token", valid_604993
  var valid_604994 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604994 = validateParameter(valid_604994, JString, required = false,
                                 default = nil)
  if valid_604994 != nil:
    section.add "X-Amz-Content-Sha256", valid_604994
  var valid_604995 = header.getOrDefault("X-Amz-Algorithm")
  valid_604995 = validateParameter(valid_604995, JString, required = false,
                                 default = nil)
  if valid_604995 != nil:
    section.add "X-Amz-Algorithm", valid_604995
  var valid_604996 = header.getOrDefault("X-Amz-Signature")
  valid_604996 = validateParameter(valid_604996, JString, required = false,
                                 default = nil)
  if valid_604996 != nil:
    section.add "X-Amz-Signature", valid_604996
  var valid_604997 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604997 = validateParameter(valid_604997, JString, required = false,
                                 default = nil)
  if valid_604997 != nil:
    section.add "X-Amz-SignedHeaders", valid_604997
  var valid_604998 = header.getOrDefault("X-Amz-Credential")
  valid_604998 = validateParameter(valid_604998, JString, required = false,
                                 default = nil)
  if valid_604998 != nil:
    section.add "X-Amz-Credential", valid_604998
  result.add "header", section
  ## parameters in `formData` object:
  ##   Enabled: JBool (required)
  ##          : <p>Sets whether Amazon SES includes the original email headers in Amazon SNS notifications of the specified notification type. A value of <code>true</code> specifies that Amazon SES will include headers in notifications, and a value of <code>false</code> specifies that Amazon SES will not include headers in notifications.</p> <p>This value can only be set when <code>NotificationType</code> is already set to use a particular Amazon SNS topic.</p>
  ##   Identity: JString (required)
  ##           : The identity for which to enable or disable headers in notifications. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   NotificationType: JString (required)
  ##                   : The notification type for which to enable or disable headers in notifications. 
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Enabled` field"
  var valid_604999 = formData.getOrDefault("Enabled")
  valid_604999 = validateParameter(valid_604999, JBool, required = true, default = nil)
  if valid_604999 != nil:
    section.add "Enabled", valid_604999
  var valid_605000 = formData.getOrDefault("Identity")
  valid_605000 = validateParameter(valid_605000, JString, required = true,
                                 default = nil)
  if valid_605000 != nil:
    section.add "Identity", valid_605000
  var valid_605001 = formData.getOrDefault("NotificationType")
  valid_605001 = validateParameter(valid_605001, JString, required = true,
                                 default = newJString("Bounce"))
  if valid_605001 != nil:
    section.add "NotificationType", valid_605001
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605002: Call_PostSetIdentityHeadersInNotificationsEnabled_604987;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given an identity (an email address or a domain), sets whether Amazon SES includes the original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified type.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_605002.validator(path, query, header, formData, body)
  let scheme = call_605002.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605002.url(scheme.get, call_605002.host, call_605002.base,
                         call_605002.route, valid.getOrDefault("path"))
  result = hook(call_605002, url, valid)

proc call*(call_605003: Call_PostSetIdentityHeadersInNotificationsEnabled_604987;
          Enabled: bool; Identity: string;
          Action: string = "SetIdentityHeadersInNotificationsEnabled";
          NotificationType: string = "Bounce"; Version: string = "2010-12-01"): Recallable =
  ## postSetIdentityHeadersInNotificationsEnabled
  ## <p>Given an identity (an email address or a domain), sets whether Amazon SES includes the original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified type.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Enabled: bool (required)
  ##          : <p>Sets whether Amazon SES includes the original email headers in Amazon SNS notifications of the specified notification type. A value of <code>true</code> specifies that Amazon SES will include headers in notifications, and a value of <code>false</code> specifies that Amazon SES will not include headers in notifications.</p> <p>This value can only be set when <code>NotificationType</code> is already set to use a particular Amazon SNS topic.</p>
  ##   Identity: string (required)
  ##           : The identity for which to enable or disable headers in notifications. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   Action: string (required)
  ##   NotificationType: string (required)
  ##                   : The notification type for which to enable or disable headers in notifications. 
  ##   Version: string (required)
  var query_605004 = newJObject()
  var formData_605005 = newJObject()
  add(formData_605005, "Enabled", newJBool(Enabled))
  add(formData_605005, "Identity", newJString(Identity))
  add(query_605004, "Action", newJString(Action))
  add(formData_605005, "NotificationType", newJString(NotificationType))
  add(query_605004, "Version", newJString(Version))
  result = call_605003.call(nil, query_605004, nil, formData_605005, nil)

var postSetIdentityHeadersInNotificationsEnabled* = Call_PostSetIdentityHeadersInNotificationsEnabled_604987(
    name: "postSetIdentityHeadersInNotificationsEnabled",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=SetIdentityHeadersInNotificationsEnabled",
    validator: validate_PostSetIdentityHeadersInNotificationsEnabled_604988,
    base: "/", url: url_PostSetIdentityHeadersInNotificationsEnabled_604989,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetIdentityHeadersInNotificationsEnabled_604969 = ref object of OpenApiRestCall_602433
proc url_GetSetIdentityHeadersInNotificationsEnabled_604971(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSetIdentityHeadersInNotificationsEnabled_604970(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given an identity (an email address or a domain), sets whether Amazon SES includes the original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified type.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : The identity for which to enable or disable headers in notifications. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   Enabled: JBool (required)
  ##          : <p>Sets whether Amazon SES includes the original email headers in Amazon SNS notifications of the specified notification type. A value of <code>true</code> specifies that Amazon SES will include headers in notifications, and a value of <code>false</code> specifies that Amazon SES will not include headers in notifications.</p> <p>This value can only be set when <code>NotificationType</code> is already set to use a particular Amazon SNS topic.</p>
  ##   Action: JString (required)
  ##   NotificationType: JString (required)
  ##                   : The notification type for which to enable or disable headers in notifications. 
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_604972 = query.getOrDefault("Identity")
  valid_604972 = validateParameter(valid_604972, JString, required = true,
                                 default = nil)
  if valid_604972 != nil:
    section.add "Identity", valid_604972
  var valid_604973 = query.getOrDefault("Enabled")
  valid_604973 = validateParameter(valid_604973, JBool, required = true, default = nil)
  if valid_604973 != nil:
    section.add "Enabled", valid_604973
  var valid_604974 = query.getOrDefault("Action")
  valid_604974 = validateParameter(valid_604974, JString, required = true, default = newJString(
      "SetIdentityHeadersInNotificationsEnabled"))
  if valid_604974 != nil:
    section.add "Action", valid_604974
  var valid_604975 = query.getOrDefault("NotificationType")
  valid_604975 = validateParameter(valid_604975, JString, required = true,
                                 default = newJString("Bounce"))
  if valid_604975 != nil:
    section.add "NotificationType", valid_604975
  var valid_604976 = query.getOrDefault("Version")
  valid_604976 = validateParameter(valid_604976, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_604976 != nil:
    section.add "Version", valid_604976
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604977 = header.getOrDefault("X-Amz-Date")
  valid_604977 = validateParameter(valid_604977, JString, required = false,
                                 default = nil)
  if valid_604977 != nil:
    section.add "X-Amz-Date", valid_604977
  var valid_604978 = header.getOrDefault("X-Amz-Security-Token")
  valid_604978 = validateParameter(valid_604978, JString, required = false,
                                 default = nil)
  if valid_604978 != nil:
    section.add "X-Amz-Security-Token", valid_604978
  var valid_604979 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604979 = validateParameter(valid_604979, JString, required = false,
                                 default = nil)
  if valid_604979 != nil:
    section.add "X-Amz-Content-Sha256", valid_604979
  var valid_604980 = header.getOrDefault("X-Amz-Algorithm")
  valid_604980 = validateParameter(valid_604980, JString, required = false,
                                 default = nil)
  if valid_604980 != nil:
    section.add "X-Amz-Algorithm", valid_604980
  var valid_604981 = header.getOrDefault("X-Amz-Signature")
  valid_604981 = validateParameter(valid_604981, JString, required = false,
                                 default = nil)
  if valid_604981 != nil:
    section.add "X-Amz-Signature", valid_604981
  var valid_604982 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604982 = validateParameter(valid_604982, JString, required = false,
                                 default = nil)
  if valid_604982 != nil:
    section.add "X-Amz-SignedHeaders", valid_604982
  var valid_604983 = header.getOrDefault("X-Amz-Credential")
  valid_604983 = validateParameter(valid_604983, JString, required = false,
                                 default = nil)
  if valid_604983 != nil:
    section.add "X-Amz-Credential", valid_604983
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604984: Call_GetSetIdentityHeadersInNotificationsEnabled_604969;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given an identity (an email address or a domain), sets whether Amazon SES includes the original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified type.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_604984.validator(path, query, header, formData, body)
  let scheme = call_604984.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604984.url(scheme.get, call_604984.host, call_604984.base,
                         call_604984.route, valid.getOrDefault("path"))
  result = hook(call_604984, url, valid)

proc call*(call_604985: Call_GetSetIdentityHeadersInNotificationsEnabled_604969;
          Identity: string; Enabled: bool;
          Action: string = "SetIdentityHeadersInNotificationsEnabled";
          NotificationType: string = "Bounce"; Version: string = "2010-12-01"): Recallable =
  ## getSetIdentityHeadersInNotificationsEnabled
  ## <p>Given an identity (an email address or a domain), sets whether Amazon SES includes the original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified type.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Identity: string (required)
  ##           : The identity for which to enable or disable headers in notifications. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   Enabled: bool (required)
  ##          : <p>Sets whether Amazon SES includes the original email headers in Amazon SNS notifications of the specified notification type. A value of <code>true</code> specifies that Amazon SES will include headers in notifications, and a value of <code>false</code> specifies that Amazon SES will not include headers in notifications.</p> <p>This value can only be set when <code>NotificationType</code> is already set to use a particular Amazon SNS topic.</p>
  ##   Action: string (required)
  ##   NotificationType: string (required)
  ##                   : The notification type for which to enable or disable headers in notifications. 
  ##   Version: string (required)
  var query_604986 = newJObject()
  add(query_604986, "Identity", newJString(Identity))
  add(query_604986, "Enabled", newJBool(Enabled))
  add(query_604986, "Action", newJString(Action))
  add(query_604986, "NotificationType", newJString(NotificationType))
  add(query_604986, "Version", newJString(Version))
  result = call_604985.call(nil, query_604986, nil, nil, nil)

var getSetIdentityHeadersInNotificationsEnabled* = Call_GetSetIdentityHeadersInNotificationsEnabled_604969(
    name: "getSetIdentityHeadersInNotificationsEnabled", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=SetIdentityHeadersInNotificationsEnabled",
    validator: validate_GetSetIdentityHeadersInNotificationsEnabled_604970,
    base: "/", url: url_GetSetIdentityHeadersInNotificationsEnabled_604971,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetIdentityMailFromDomain_605024 = ref object of OpenApiRestCall_602433
proc url_PostSetIdentityMailFromDomain_605026(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSetIdentityMailFromDomain_605025(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables the custom MAIL FROM domain setup for a verified identity (an email address or a domain).</p> <important> <p>To send emails using the specified MAIL FROM domain, you must add an MX record to your MAIL FROM domain's DNS settings. If you want your emails to pass Sender Policy Framework (SPF) checks, you must also add or update an SPF record. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-set.html">Amazon SES Developer Guide</a>.</p> </important> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605027 = query.getOrDefault("Action")
  valid_605027 = validateParameter(valid_605027, JString, required = true, default = newJString(
      "SetIdentityMailFromDomain"))
  if valid_605027 != nil:
    section.add "Action", valid_605027
  var valid_605028 = query.getOrDefault("Version")
  valid_605028 = validateParameter(valid_605028, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605028 != nil:
    section.add "Version", valid_605028
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605029 = header.getOrDefault("X-Amz-Date")
  valid_605029 = validateParameter(valid_605029, JString, required = false,
                                 default = nil)
  if valid_605029 != nil:
    section.add "X-Amz-Date", valid_605029
  var valid_605030 = header.getOrDefault("X-Amz-Security-Token")
  valid_605030 = validateParameter(valid_605030, JString, required = false,
                                 default = nil)
  if valid_605030 != nil:
    section.add "X-Amz-Security-Token", valid_605030
  var valid_605031 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605031 = validateParameter(valid_605031, JString, required = false,
                                 default = nil)
  if valid_605031 != nil:
    section.add "X-Amz-Content-Sha256", valid_605031
  var valid_605032 = header.getOrDefault("X-Amz-Algorithm")
  valid_605032 = validateParameter(valid_605032, JString, required = false,
                                 default = nil)
  if valid_605032 != nil:
    section.add "X-Amz-Algorithm", valid_605032
  var valid_605033 = header.getOrDefault("X-Amz-Signature")
  valid_605033 = validateParameter(valid_605033, JString, required = false,
                                 default = nil)
  if valid_605033 != nil:
    section.add "X-Amz-Signature", valid_605033
  var valid_605034 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605034 = validateParameter(valid_605034, JString, required = false,
                                 default = nil)
  if valid_605034 != nil:
    section.add "X-Amz-SignedHeaders", valid_605034
  var valid_605035 = header.getOrDefault("X-Amz-Credential")
  valid_605035 = validateParameter(valid_605035, JString, required = false,
                                 default = nil)
  if valid_605035 != nil:
    section.add "X-Amz-Credential", valid_605035
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identity: JString (required)
  ##           : The verified identity for which you want to enable or disable the specified custom MAIL FROM domain.
  ##   MailFromDomain: JString
  ##                 : The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM domain must 1) be a subdomain of the verified identity, 2) not be used in a "From" address if the MAIL FROM domain is the destination of email feedback forwarding (for more information, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from.html">Amazon SES Developer Guide</a>), and 3) not be used to receive emails. A value of <code>null</code> disables the custom MAIL FROM setting for the identity.
  ##   BehaviorOnMXFailure: JString
  ##                      : <p>The action that you want Amazon SES to take if it cannot successfully read the required MX record when you send an email. If you choose <code>UseDefaultValue</code>, Amazon SES will use amazonses.com (or a subdomain of that) as the MAIL FROM domain. If you choose <code>RejectMessage</code>, Amazon SES will return a <code>MailFromDomainNotVerified</code> error and not send the email.</p> <p>The action specified in <code>BehaviorOnMXFailure</code> is taken when the custom MAIL FROM domain setup is in the <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code> states.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identity` field"
  var valid_605036 = formData.getOrDefault("Identity")
  valid_605036 = validateParameter(valid_605036, JString, required = true,
                                 default = nil)
  if valid_605036 != nil:
    section.add "Identity", valid_605036
  var valid_605037 = formData.getOrDefault("MailFromDomain")
  valid_605037 = validateParameter(valid_605037, JString, required = false,
                                 default = nil)
  if valid_605037 != nil:
    section.add "MailFromDomain", valid_605037
  var valid_605038 = formData.getOrDefault("BehaviorOnMXFailure")
  valid_605038 = validateParameter(valid_605038, JString, required = false,
                                 default = newJString("UseDefaultValue"))
  if valid_605038 != nil:
    section.add "BehaviorOnMXFailure", valid_605038
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605039: Call_PostSetIdentityMailFromDomain_605024; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Enables or disables the custom MAIL FROM domain setup for a verified identity (an email address or a domain).</p> <important> <p>To send emails using the specified MAIL FROM domain, you must add an MX record to your MAIL FROM domain's DNS settings. If you want your emails to pass Sender Policy Framework (SPF) checks, you must also add or update an SPF record. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-set.html">Amazon SES Developer Guide</a>.</p> </important> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605039.validator(path, query, header, formData, body)
  let scheme = call_605039.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605039.url(scheme.get, call_605039.host, call_605039.base,
                         call_605039.route, valid.getOrDefault("path"))
  result = hook(call_605039, url, valid)

proc call*(call_605040: Call_PostSetIdentityMailFromDomain_605024;
          Identity: string; MailFromDomain: string = "";
          Action: string = "SetIdentityMailFromDomain";
          BehaviorOnMXFailure: string = "UseDefaultValue";
          Version: string = "2010-12-01"): Recallable =
  ## postSetIdentityMailFromDomain
  ## <p>Enables or disables the custom MAIL FROM domain setup for a verified identity (an email address or a domain).</p> <important> <p>To send emails using the specified MAIL FROM domain, you must add an MX record to your MAIL FROM domain's DNS settings. If you want your emails to pass Sender Policy Framework (SPF) checks, you must also add or update an SPF record. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-set.html">Amazon SES Developer Guide</a>.</p> </important> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : The verified identity for which you want to enable or disable the specified custom MAIL FROM domain.
  ##   MailFromDomain: string
  ##                 : The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM domain must 1) be a subdomain of the verified identity, 2) not be used in a "From" address if the MAIL FROM domain is the destination of email feedback forwarding (for more information, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from.html">Amazon SES Developer Guide</a>), and 3) not be used to receive emails. A value of <code>null</code> disables the custom MAIL FROM setting for the identity.
  ##   Action: string (required)
  ##   BehaviorOnMXFailure: string
  ##                      : <p>The action that you want Amazon SES to take if it cannot successfully read the required MX record when you send an email. If you choose <code>UseDefaultValue</code>, Amazon SES will use amazonses.com (or a subdomain of that) as the MAIL FROM domain. If you choose <code>RejectMessage</code>, Amazon SES will return a <code>MailFromDomainNotVerified</code> error and not send the email.</p> <p>The action specified in <code>BehaviorOnMXFailure</code> is taken when the custom MAIL FROM domain setup is in the <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code> states.</p>
  ##   Version: string (required)
  var query_605041 = newJObject()
  var formData_605042 = newJObject()
  add(formData_605042, "Identity", newJString(Identity))
  add(formData_605042, "MailFromDomain", newJString(MailFromDomain))
  add(query_605041, "Action", newJString(Action))
  add(formData_605042, "BehaviorOnMXFailure", newJString(BehaviorOnMXFailure))
  add(query_605041, "Version", newJString(Version))
  result = call_605040.call(nil, query_605041, nil, formData_605042, nil)

var postSetIdentityMailFromDomain* = Call_PostSetIdentityMailFromDomain_605024(
    name: "postSetIdentityMailFromDomain", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SetIdentityMailFromDomain",
    validator: validate_PostSetIdentityMailFromDomain_605025, base: "/",
    url: url_PostSetIdentityMailFromDomain_605026,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetIdentityMailFromDomain_605006 = ref object of OpenApiRestCall_602433
proc url_GetSetIdentityMailFromDomain_605008(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSetIdentityMailFromDomain_605007(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables the custom MAIL FROM domain setup for a verified identity (an email address or a domain).</p> <important> <p>To send emails using the specified MAIL FROM domain, you must add an MX record to your MAIL FROM domain's DNS settings. If you want your emails to pass Sender Policy Framework (SPF) checks, you must also add or update an SPF record. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-set.html">Amazon SES Developer Guide</a>.</p> </important> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : The verified identity for which you want to enable or disable the specified custom MAIL FROM domain.
  ##   BehaviorOnMXFailure: JString
  ##                      : <p>The action that you want Amazon SES to take if it cannot successfully read the required MX record when you send an email. If you choose <code>UseDefaultValue</code>, Amazon SES will use amazonses.com (or a subdomain of that) as the MAIL FROM domain. If you choose <code>RejectMessage</code>, Amazon SES will return a <code>MailFromDomainNotVerified</code> error and not send the email.</p> <p>The action specified in <code>BehaviorOnMXFailure</code> is taken when the custom MAIL FROM domain setup is in the <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code> states.</p>
  ##   MailFromDomain: JString
  ##                 : The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM domain must 1) be a subdomain of the verified identity, 2) not be used in a "From" address if the MAIL FROM domain is the destination of email feedback forwarding (for more information, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from.html">Amazon SES Developer Guide</a>), and 3) not be used to receive emails. A value of <code>null</code> disables the custom MAIL FROM setting for the identity.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_605009 = query.getOrDefault("Identity")
  valid_605009 = validateParameter(valid_605009, JString, required = true,
                                 default = nil)
  if valid_605009 != nil:
    section.add "Identity", valid_605009
  var valid_605010 = query.getOrDefault("BehaviorOnMXFailure")
  valid_605010 = validateParameter(valid_605010, JString, required = false,
                                 default = newJString("UseDefaultValue"))
  if valid_605010 != nil:
    section.add "BehaviorOnMXFailure", valid_605010
  var valid_605011 = query.getOrDefault("MailFromDomain")
  valid_605011 = validateParameter(valid_605011, JString, required = false,
                                 default = nil)
  if valid_605011 != nil:
    section.add "MailFromDomain", valid_605011
  var valid_605012 = query.getOrDefault("Action")
  valid_605012 = validateParameter(valid_605012, JString, required = true, default = newJString(
      "SetIdentityMailFromDomain"))
  if valid_605012 != nil:
    section.add "Action", valid_605012
  var valid_605013 = query.getOrDefault("Version")
  valid_605013 = validateParameter(valid_605013, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605013 != nil:
    section.add "Version", valid_605013
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605014 = header.getOrDefault("X-Amz-Date")
  valid_605014 = validateParameter(valid_605014, JString, required = false,
                                 default = nil)
  if valid_605014 != nil:
    section.add "X-Amz-Date", valid_605014
  var valid_605015 = header.getOrDefault("X-Amz-Security-Token")
  valid_605015 = validateParameter(valid_605015, JString, required = false,
                                 default = nil)
  if valid_605015 != nil:
    section.add "X-Amz-Security-Token", valid_605015
  var valid_605016 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605016 = validateParameter(valid_605016, JString, required = false,
                                 default = nil)
  if valid_605016 != nil:
    section.add "X-Amz-Content-Sha256", valid_605016
  var valid_605017 = header.getOrDefault("X-Amz-Algorithm")
  valid_605017 = validateParameter(valid_605017, JString, required = false,
                                 default = nil)
  if valid_605017 != nil:
    section.add "X-Amz-Algorithm", valid_605017
  var valid_605018 = header.getOrDefault("X-Amz-Signature")
  valid_605018 = validateParameter(valid_605018, JString, required = false,
                                 default = nil)
  if valid_605018 != nil:
    section.add "X-Amz-Signature", valid_605018
  var valid_605019 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605019 = validateParameter(valid_605019, JString, required = false,
                                 default = nil)
  if valid_605019 != nil:
    section.add "X-Amz-SignedHeaders", valid_605019
  var valid_605020 = header.getOrDefault("X-Amz-Credential")
  valid_605020 = validateParameter(valid_605020, JString, required = false,
                                 default = nil)
  if valid_605020 != nil:
    section.add "X-Amz-Credential", valid_605020
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605021: Call_GetSetIdentityMailFromDomain_605006; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Enables or disables the custom MAIL FROM domain setup for a verified identity (an email address or a domain).</p> <important> <p>To send emails using the specified MAIL FROM domain, you must add an MX record to your MAIL FROM domain's DNS settings. If you want your emails to pass Sender Policy Framework (SPF) checks, you must also add or update an SPF record. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-set.html">Amazon SES Developer Guide</a>.</p> </important> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605021.validator(path, query, header, formData, body)
  let scheme = call_605021.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605021.url(scheme.get, call_605021.host, call_605021.base,
                         call_605021.route, valid.getOrDefault("path"))
  result = hook(call_605021, url, valid)

proc call*(call_605022: Call_GetSetIdentityMailFromDomain_605006; Identity: string;
          BehaviorOnMXFailure: string = "UseDefaultValue";
          MailFromDomain: string = ""; Action: string = "SetIdentityMailFromDomain";
          Version: string = "2010-12-01"): Recallable =
  ## getSetIdentityMailFromDomain
  ## <p>Enables or disables the custom MAIL FROM domain setup for a verified identity (an email address or a domain).</p> <important> <p>To send emails using the specified MAIL FROM domain, you must add an MX record to your MAIL FROM domain's DNS settings. If you want your emails to pass Sender Policy Framework (SPF) checks, you must also add or update an SPF record. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-set.html">Amazon SES Developer Guide</a>.</p> </important> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : The verified identity for which you want to enable or disable the specified custom MAIL FROM domain.
  ##   BehaviorOnMXFailure: string
  ##                      : <p>The action that you want Amazon SES to take if it cannot successfully read the required MX record when you send an email. If you choose <code>UseDefaultValue</code>, Amazon SES will use amazonses.com (or a subdomain of that) as the MAIL FROM domain. If you choose <code>RejectMessage</code>, Amazon SES will return a <code>MailFromDomainNotVerified</code> error and not send the email.</p> <p>The action specified in <code>BehaviorOnMXFailure</code> is taken when the custom MAIL FROM domain setup is in the <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code> states.</p>
  ##   MailFromDomain: string
  ##                 : The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM domain must 1) be a subdomain of the verified identity, 2) not be used in a "From" address if the MAIL FROM domain is the destination of email feedback forwarding (for more information, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from.html">Amazon SES Developer Guide</a>), and 3) not be used to receive emails. A value of <code>null</code> disables the custom MAIL FROM setting for the identity.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605023 = newJObject()
  add(query_605023, "Identity", newJString(Identity))
  add(query_605023, "BehaviorOnMXFailure", newJString(BehaviorOnMXFailure))
  add(query_605023, "MailFromDomain", newJString(MailFromDomain))
  add(query_605023, "Action", newJString(Action))
  add(query_605023, "Version", newJString(Version))
  result = call_605022.call(nil, query_605023, nil, nil, nil)

var getSetIdentityMailFromDomain* = Call_GetSetIdentityMailFromDomain_605006(
    name: "getSetIdentityMailFromDomain", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SetIdentityMailFromDomain",
    validator: validate_GetSetIdentityMailFromDomain_605007, base: "/",
    url: url_GetSetIdentityMailFromDomain_605008,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetIdentityNotificationTopic_605061 = ref object of OpenApiRestCall_602433
proc url_PostSetIdentityNotificationTopic_605063(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSetIdentityNotificationTopic_605062(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use this operation, you specify a verified identity, such as an email address or domain. When you send an email that uses the chosen identity in the Source field, Amazon SES sends notifications to the topic you specified. You can send bounce, complaint, or delivery notifications (or any combination of the three) to the Amazon SNS topic that you specify.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about feedback notification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605064 = query.getOrDefault("Action")
  valid_605064 = validateParameter(valid_605064, JString, required = true, default = newJString(
      "SetIdentityNotificationTopic"))
  if valid_605064 != nil:
    section.add "Action", valid_605064
  var valid_605065 = query.getOrDefault("Version")
  valid_605065 = validateParameter(valid_605065, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605065 != nil:
    section.add "Version", valid_605065
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605066 = header.getOrDefault("X-Amz-Date")
  valid_605066 = validateParameter(valid_605066, JString, required = false,
                                 default = nil)
  if valid_605066 != nil:
    section.add "X-Amz-Date", valid_605066
  var valid_605067 = header.getOrDefault("X-Amz-Security-Token")
  valid_605067 = validateParameter(valid_605067, JString, required = false,
                                 default = nil)
  if valid_605067 != nil:
    section.add "X-Amz-Security-Token", valid_605067
  var valid_605068 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605068 = validateParameter(valid_605068, JString, required = false,
                                 default = nil)
  if valid_605068 != nil:
    section.add "X-Amz-Content-Sha256", valid_605068
  var valid_605069 = header.getOrDefault("X-Amz-Algorithm")
  valid_605069 = validateParameter(valid_605069, JString, required = false,
                                 default = nil)
  if valid_605069 != nil:
    section.add "X-Amz-Algorithm", valid_605069
  var valid_605070 = header.getOrDefault("X-Amz-Signature")
  valid_605070 = validateParameter(valid_605070, JString, required = false,
                                 default = nil)
  if valid_605070 != nil:
    section.add "X-Amz-Signature", valid_605070
  var valid_605071 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605071 = validateParameter(valid_605071, JString, required = false,
                                 default = nil)
  if valid_605071 != nil:
    section.add "X-Amz-SignedHeaders", valid_605071
  var valid_605072 = header.getOrDefault("X-Amz-Credential")
  valid_605072 = validateParameter(valid_605072, JString, required = false,
                                 default = nil)
  if valid_605072 != nil:
    section.add "X-Amz-Credential", valid_605072
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identity: JString (required)
  ##           : <p>The identity (email address or domain) that you want to set the Amazon SNS topic for.</p> <important> <p>You can only specify a verified identity for this parameter.</p> </important> <p>You can specify an identity by using its name or by using its Amazon Resource Name (ARN). The following examples are all valid identities: <code>sender@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p>
  ##   SnsTopic: JString
  ##           : The Amazon Resource Name (ARN) of the Amazon SNS topic. If the parameter is omitted from the request or a null value is passed, <code>SnsTopic</code> is cleared and publishing is disabled.
  ##   NotificationType: JString (required)
  ##                   : The type of notifications that will be published to the specified Amazon SNS topic.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identity` field"
  var valid_605073 = formData.getOrDefault("Identity")
  valid_605073 = validateParameter(valid_605073, JString, required = true,
                                 default = nil)
  if valid_605073 != nil:
    section.add "Identity", valid_605073
  var valid_605074 = formData.getOrDefault("SnsTopic")
  valid_605074 = validateParameter(valid_605074, JString, required = false,
                                 default = nil)
  if valid_605074 != nil:
    section.add "SnsTopic", valid_605074
  var valid_605075 = formData.getOrDefault("NotificationType")
  valid_605075 = validateParameter(valid_605075, JString, required = true,
                                 default = newJString("Bounce"))
  if valid_605075 != nil:
    section.add "NotificationType", valid_605075
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605076: Call_PostSetIdentityNotificationTopic_605061;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use this operation, you specify a verified identity, such as an email address or domain. When you send an email that uses the chosen identity in the Source field, Amazon SES sends notifications to the topic you specified. You can send bounce, complaint, or delivery notifications (or any combination of the three) to the Amazon SNS topic that you specify.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about feedback notification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_605076.validator(path, query, header, formData, body)
  let scheme = call_605076.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605076.url(scheme.get, call_605076.host, call_605076.base,
                         call_605076.route, valid.getOrDefault("path"))
  result = hook(call_605076, url, valid)

proc call*(call_605077: Call_PostSetIdentityNotificationTopic_605061;
          Identity: string; SnsTopic: string = "";
          Action: string = "SetIdentityNotificationTopic";
          NotificationType: string = "Bounce"; Version: string = "2010-12-01"): Recallable =
  ## postSetIdentityNotificationTopic
  ## <p>Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use this operation, you specify a verified identity, such as an email address or domain. When you send an email that uses the chosen identity in the Source field, Amazon SES sends notifications to the topic you specified. You can send bounce, complaint, or delivery notifications (or any combination of the three) to the Amazon SNS topic that you specify.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about feedback notification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Identity: string (required)
  ##           : <p>The identity (email address or domain) that you want to set the Amazon SNS topic for.</p> <important> <p>You can only specify a verified identity for this parameter.</p> </important> <p>You can specify an identity by using its name or by using its Amazon Resource Name (ARN). The following examples are all valid identities: <code>sender@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p>
  ##   SnsTopic: string
  ##           : The Amazon Resource Name (ARN) of the Amazon SNS topic. If the parameter is omitted from the request or a null value is passed, <code>SnsTopic</code> is cleared and publishing is disabled.
  ##   Action: string (required)
  ##   NotificationType: string (required)
  ##                   : The type of notifications that will be published to the specified Amazon SNS topic.
  ##   Version: string (required)
  var query_605078 = newJObject()
  var formData_605079 = newJObject()
  add(formData_605079, "Identity", newJString(Identity))
  add(formData_605079, "SnsTopic", newJString(SnsTopic))
  add(query_605078, "Action", newJString(Action))
  add(formData_605079, "NotificationType", newJString(NotificationType))
  add(query_605078, "Version", newJString(Version))
  result = call_605077.call(nil, query_605078, nil, formData_605079, nil)

var postSetIdentityNotificationTopic* = Call_PostSetIdentityNotificationTopic_605061(
    name: "postSetIdentityNotificationTopic", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SetIdentityNotificationTopic",
    validator: validate_PostSetIdentityNotificationTopic_605062, base: "/",
    url: url_PostSetIdentityNotificationTopic_605063,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetIdentityNotificationTopic_605043 = ref object of OpenApiRestCall_602433
proc url_GetSetIdentityNotificationTopic_605045(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSetIdentityNotificationTopic_605044(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use this operation, you specify a verified identity, such as an email address or domain. When you send an email that uses the chosen identity in the Source field, Amazon SES sends notifications to the topic you specified. You can send bounce, complaint, or delivery notifications (or any combination of the three) to the Amazon SNS topic that you specify.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about feedback notification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : <p>The identity (email address or domain) that you want to set the Amazon SNS topic for.</p> <important> <p>You can only specify a verified identity for this parameter.</p> </important> <p>You can specify an identity by using its name or by using its Amazon Resource Name (ARN). The following examples are all valid identities: <code>sender@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p>
  ##   Action: JString (required)
  ##   NotificationType: JString (required)
  ##                   : The type of notifications that will be published to the specified Amazon SNS topic.
  ##   Version: JString (required)
  ##   SnsTopic: JString
  ##           : The Amazon Resource Name (ARN) of the Amazon SNS topic. If the parameter is omitted from the request or a null value is passed, <code>SnsTopic</code> is cleared and publishing is disabled.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_605046 = query.getOrDefault("Identity")
  valid_605046 = validateParameter(valid_605046, JString, required = true,
                                 default = nil)
  if valid_605046 != nil:
    section.add "Identity", valid_605046
  var valid_605047 = query.getOrDefault("Action")
  valid_605047 = validateParameter(valid_605047, JString, required = true, default = newJString(
      "SetIdentityNotificationTopic"))
  if valid_605047 != nil:
    section.add "Action", valid_605047
  var valid_605048 = query.getOrDefault("NotificationType")
  valid_605048 = validateParameter(valid_605048, JString, required = true,
                                 default = newJString("Bounce"))
  if valid_605048 != nil:
    section.add "NotificationType", valid_605048
  var valid_605049 = query.getOrDefault("Version")
  valid_605049 = validateParameter(valid_605049, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605049 != nil:
    section.add "Version", valid_605049
  var valid_605050 = query.getOrDefault("SnsTopic")
  valid_605050 = validateParameter(valid_605050, JString, required = false,
                                 default = nil)
  if valid_605050 != nil:
    section.add "SnsTopic", valid_605050
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605051 = header.getOrDefault("X-Amz-Date")
  valid_605051 = validateParameter(valid_605051, JString, required = false,
                                 default = nil)
  if valid_605051 != nil:
    section.add "X-Amz-Date", valid_605051
  var valid_605052 = header.getOrDefault("X-Amz-Security-Token")
  valid_605052 = validateParameter(valid_605052, JString, required = false,
                                 default = nil)
  if valid_605052 != nil:
    section.add "X-Amz-Security-Token", valid_605052
  var valid_605053 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605053 = validateParameter(valid_605053, JString, required = false,
                                 default = nil)
  if valid_605053 != nil:
    section.add "X-Amz-Content-Sha256", valid_605053
  var valid_605054 = header.getOrDefault("X-Amz-Algorithm")
  valid_605054 = validateParameter(valid_605054, JString, required = false,
                                 default = nil)
  if valid_605054 != nil:
    section.add "X-Amz-Algorithm", valid_605054
  var valid_605055 = header.getOrDefault("X-Amz-Signature")
  valid_605055 = validateParameter(valid_605055, JString, required = false,
                                 default = nil)
  if valid_605055 != nil:
    section.add "X-Amz-Signature", valid_605055
  var valid_605056 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605056 = validateParameter(valid_605056, JString, required = false,
                                 default = nil)
  if valid_605056 != nil:
    section.add "X-Amz-SignedHeaders", valid_605056
  var valid_605057 = header.getOrDefault("X-Amz-Credential")
  valid_605057 = validateParameter(valid_605057, JString, required = false,
                                 default = nil)
  if valid_605057 != nil:
    section.add "X-Amz-Credential", valid_605057
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605058: Call_GetSetIdentityNotificationTopic_605043;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use this operation, you specify a verified identity, such as an email address or domain. When you send an email that uses the chosen identity in the Source field, Amazon SES sends notifications to the topic you specified. You can send bounce, complaint, or delivery notifications (or any combination of the three) to the Amazon SNS topic that you specify.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about feedback notification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_605058.validator(path, query, header, formData, body)
  let scheme = call_605058.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605058.url(scheme.get, call_605058.host, call_605058.base,
                         call_605058.route, valid.getOrDefault("path"))
  result = hook(call_605058, url, valid)

proc call*(call_605059: Call_GetSetIdentityNotificationTopic_605043;
          Identity: string; Action: string = "SetIdentityNotificationTopic";
          NotificationType: string = "Bounce"; Version: string = "2010-12-01";
          SnsTopic: string = ""): Recallable =
  ## getSetIdentityNotificationTopic
  ## <p>Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use this operation, you specify a verified identity, such as an email address or domain. When you send an email that uses the chosen identity in the Source field, Amazon SES sends notifications to the topic you specified. You can send bounce, complaint, or delivery notifications (or any combination of the three) to the Amazon SNS topic that you specify.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about feedback notification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Identity: string (required)
  ##           : <p>The identity (email address or domain) that you want to set the Amazon SNS topic for.</p> <important> <p>You can only specify a verified identity for this parameter.</p> </important> <p>You can specify an identity by using its name or by using its Amazon Resource Name (ARN). The following examples are all valid identities: <code>sender@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p>
  ##   Action: string (required)
  ##   NotificationType: string (required)
  ##                   : The type of notifications that will be published to the specified Amazon SNS topic.
  ##   Version: string (required)
  ##   SnsTopic: string
  ##           : The Amazon Resource Name (ARN) of the Amazon SNS topic. If the parameter is omitted from the request or a null value is passed, <code>SnsTopic</code> is cleared and publishing is disabled.
  var query_605060 = newJObject()
  add(query_605060, "Identity", newJString(Identity))
  add(query_605060, "Action", newJString(Action))
  add(query_605060, "NotificationType", newJString(NotificationType))
  add(query_605060, "Version", newJString(Version))
  add(query_605060, "SnsTopic", newJString(SnsTopic))
  result = call_605059.call(nil, query_605060, nil, nil, nil)

var getSetIdentityNotificationTopic* = Call_GetSetIdentityNotificationTopic_605043(
    name: "getSetIdentityNotificationTopic", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SetIdentityNotificationTopic",
    validator: validate_GetSetIdentityNotificationTopic_605044, base: "/",
    url: url_GetSetIdentityNotificationTopic_605045,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetReceiptRulePosition_605098 = ref object of OpenApiRestCall_602433
proc url_PostSetReceiptRulePosition_605100(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSetReceiptRulePosition_605099(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the position of the specified receipt rule in the receipt rule set.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605101 = query.getOrDefault("Action")
  valid_605101 = validateParameter(valid_605101, JString, required = true,
                                 default = newJString("SetReceiptRulePosition"))
  if valid_605101 != nil:
    section.add "Action", valid_605101
  var valid_605102 = query.getOrDefault("Version")
  valid_605102 = validateParameter(valid_605102, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605102 != nil:
    section.add "Version", valid_605102
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605103 = header.getOrDefault("X-Amz-Date")
  valid_605103 = validateParameter(valid_605103, JString, required = false,
                                 default = nil)
  if valid_605103 != nil:
    section.add "X-Amz-Date", valid_605103
  var valid_605104 = header.getOrDefault("X-Amz-Security-Token")
  valid_605104 = validateParameter(valid_605104, JString, required = false,
                                 default = nil)
  if valid_605104 != nil:
    section.add "X-Amz-Security-Token", valid_605104
  var valid_605105 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605105 = validateParameter(valid_605105, JString, required = false,
                                 default = nil)
  if valid_605105 != nil:
    section.add "X-Amz-Content-Sha256", valid_605105
  var valid_605106 = header.getOrDefault("X-Amz-Algorithm")
  valid_605106 = validateParameter(valid_605106, JString, required = false,
                                 default = nil)
  if valid_605106 != nil:
    section.add "X-Amz-Algorithm", valid_605106
  var valid_605107 = header.getOrDefault("X-Amz-Signature")
  valid_605107 = validateParameter(valid_605107, JString, required = false,
                                 default = nil)
  if valid_605107 != nil:
    section.add "X-Amz-Signature", valid_605107
  var valid_605108 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605108 = validateParameter(valid_605108, JString, required = false,
                                 default = nil)
  if valid_605108 != nil:
    section.add "X-Amz-SignedHeaders", valid_605108
  var valid_605109 = header.getOrDefault("X-Amz-Credential")
  valid_605109 = validateParameter(valid_605109, JString, required = false,
                                 default = nil)
  if valid_605109 != nil:
    section.add "X-Amz-Credential", valid_605109
  result.add "header", section
  ## parameters in `formData` object:
  ##   After: JString
  ##        : The name of the receipt rule after which to place the specified receipt rule.
  ##   RuleName: JString (required)
  ##           : The name of the receipt rule to reposition.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that contains the receipt rule to reposition.
  section = newJObject()
  var valid_605110 = formData.getOrDefault("After")
  valid_605110 = validateParameter(valid_605110, JString, required = false,
                                 default = nil)
  if valid_605110 != nil:
    section.add "After", valid_605110
  assert formData != nil,
        "formData argument is necessary due to required `RuleName` field"
  var valid_605111 = formData.getOrDefault("RuleName")
  valid_605111 = validateParameter(valid_605111, JString, required = true,
                                 default = nil)
  if valid_605111 != nil:
    section.add "RuleName", valid_605111
  var valid_605112 = formData.getOrDefault("RuleSetName")
  valid_605112 = validateParameter(valid_605112, JString, required = true,
                                 default = nil)
  if valid_605112 != nil:
    section.add "RuleSetName", valid_605112
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605113: Call_PostSetReceiptRulePosition_605098; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the position of the specified receipt rule in the receipt rule set.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605113.validator(path, query, header, formData, body)
  let scheme = call_605113.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605113.url(scheme.get, call_605113.host, call_605113.base,
                         call_605113.route, valid.getOrDefault("path"))
  result = hook(call_605113, url, valid)

proc call*(call_605114: Call_PostSetReceiptRulePosition_605098; RuleName: string;
          RuleSetName: string; After: string = "";
          Action: string = "SetReceiptRulePosition"; Version: string = "2010-12-01"): Recallable =
  ## postSetReceiptRulePosition
  ## <p>Sets the position of the specified receipt rule in the receipt rule set.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   After: string
  ##        : The name of the receipt rule after which to place the specified receipt rule.
  ##   RuleName: string (required)
  ##           : The name of the receipt rule to reposition.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that contains the receipt rule to reposition.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605115 = newJObject()
  var formData_605116 = newJObject()
  add(formData_605116, "After", newJString(After))
  add(formData_605116, "RuleName", newJString(RuleName))
  add(formData_605116, "RuleSetName", newJString(RuleSetName))
  add(query_605115, "Action", newJString(Action))
  add(query_605115, "Version", newJString(Version))
  result = call_605114.call(nil, query_605115, nil, formData_605116, nil)

var postSetReceiptRulePosition* = Call_PostSetReceiptRulePosition_605098(
    name: "postSetReceiptRulePosition", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SetReceiptRulePosition",
    validator: validate_PostSetReceiptRulePosition_605099, base: "/",
    url: url_PostSetReceiptRulePosition_605100,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetReceiptRulePosition_605080 = ref object of OpenApiRestCall_602433
proc url_GetSetReceiptRulePosition_605082(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSetReceiptRulePosition_605081(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the position of the specified receipt rule in the receipt rule set.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleName: JString (required)
  ##           : The name of the receipt rule to reposition.
  ##   After: JString
  ##        : The name of the receipt rule after which to place the specified receipt rule.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that contains the receipt rule to reposition.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleName` field"
  var valid_605083 = query.getOrDefault("RuleName")
  valid_605083 = validateParameter(valid_605083, JString, required = true,
                                 default = nil)
  if valid_605083 != nil:
    section.add "RuleName", valid_605083
  var valid_605084 = query.getOrDefault("After")
  valid_605084 = validateParameter(valid_605084, JString, required = false,
                                 default = nil)
  if valid_605084 != nil:
    section.add "After", valid_605084
  var valid_605085 = query.getOrDefault("RuleSetName")
  valid_605085 = validateParameter(valid_605085, JString, required = true,
                                 default = nil)
  if valid_605085 != nil:
    section.add "RuleSetName", valid_605085
  var valid_605086 = query.getOrDefault("Action")
  valid_605086 = validateParameter(valid_605086, JString, required = true,
                                 default = newJString("SetReceiptRulePosition"))
  if valid_605086 != nil:
    section.add "Action", valid_605086
  var valid_605087 = query.getOrDefault("Version")
  valid_605087 = validateParameter(valid_605087, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605087 != nil:
    section.add "Version", valid_605087
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605088 = header.getOrDefault("X-Amz-Date")
  valid_605088 = validateParameter(valid_605088, JString, required = false,
                                 default = nil)
  if valid_605088 != nil:
    section.add "X-Amz-Date", valid_605088
  var valid_605089 = header.getOrDefault("X-Amz-Security-Token")
  valid_605089 = validateParameter(valid_605089, JString, required = false,
                                 default = nil)
  if valid_605089 != nil:
    section.add "X-Amz-Security-Token", valid_605089
  var valid_605090 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605090 = validateParameter(valid_605090, JString, required = false,
                                 default = nil)
  if valid_605090 != nil:
    section.add "X-Amz-Content-Sha256", valid_605090
  var valid_605091 = header.getOrDefault("X-Amz-Algorithm")
  valid_605091 = validateParameter(valid_605091, JString, required = false,
                                 default = nil)
  if valid_605091 != nil:
    section.add "X-Amz-Algorithm", valid_605091
  var valid_605092 = header.getOrDefault("X-Amz-Signature")
  valid_605092 = validateParameter(valid_605092, JString, required = false,
                                 default = nil)
  if valid_605092 != nil:
    section.add "X-Amz-Signature", valid_605092
  var valid_605093 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605093 = validateParameter(valid_605093, JString, required = false,
                                 default = nil)
  if valid_605093 != nil:
    section.add "X-Amz-SignedHeaders", valid_605093
  var valid_605094 = header.getOrDefault("X-Amz-Credential")
  valid_605094 = validateParameter(valid_605094, JString, required = false,
                                 default = nil)
  if valid_605094 != nil:
    section.add "X-Amz-Credential", valid_605094
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605095: Call_GetSetReceiptRulePosition_605080; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the position of the specified receipt rule in the receipt rule set.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605095.validator(path, query, header, formData, body)
  let scheme = call_605095.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605095.url(scheme.get, call_605095.host, call_605095.base,
                         call_605095.route, valid.getOrDefault("path"))
  result = hook(call_605095, url, valid)

proc call*(call_605096: Call_GetSetReceiptRulePosition_605080; RuleName: string;
          RuleSetName: string; After: string = "";
          Action: string = "SetReceiptRulePosition"; Version: string = "2010-12-01"): Recallable =
  ## getSetReceiptRulePosition
  ## <p>Sets the position of the specified receipt rule in the receipt rule set.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleName: string (required)
  ##           : The name of the receipt rule to reposition.
  ##   After: string
  ##        : The name of the receipt rule after which to place the specified receipt rule.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that contains the receipt rule to reposition.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605097 = newJObject()
  add(query_605097, "RuleName", newJString(RuleName))
  add(query_605097, "After", newJString(After))
  add(query_605097, "RuleSetName", newJString(RuleSetName))
  add(query_605097, "Action", newJString(Action))
  add(query_605097, "Version", newJString(Version))
  result = call_605096.call(nil, query_605097, nil, nil, nil)

var getSetReceiptRulePosition* = Call_GetSetReceiptRulePosition_605080(
    name: "getSetReceiptRulePosition", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SetReceiptRulePosition",
    validator: validate_GetSetReceiptRulePosition_605081, base: "/",
    url: url_GetSetReceiptRulePosition_605082,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostTestRenderTemplate_605134 = ref object of OpenApiRestCall_602433
proc url_PostTestRenderTemplate_605136(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostTestRenderTemplate_605135(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a preview of the MIME content of an email when provided with a template and a set of replacement data.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605137 = query.getOrDefault("Action")
  valid_605137 = validateParameter(valid_605137, JString, required = true,
                                 default = newJString("TestRenderTemplate"))
  if valid_605137 != nil:
    section.add "Action", valid_605137
  var valid_605138 = query.getOrDefault("Version")
  valid_605138 = validateParameter(valid_605138, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605138 != nil:
    section.add "Version", valid_605138
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605139 = header.getOrDefault("X-Amz-Date")
  valid_605139 = validateParameter(valid_605139, JString, required = false,
                                 default = nil)
  if valid_605139 != nil:
    section.add "X-Amz-Date", valid_605139
  var valid_605140 = header.getOrDefault("X-Amz-Security-Token")
  valid_605140 = validateParameter(valid_605140, JString, required = false,
                                 default = nil)
  if valid_605140 != nil:
    section.add "X-Amz-Security-Token", valid_605140
  var valid_605141 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605141 = validateParameter(valid_605141, JString, required = false,
                                 default = nil)
  if valid_605141 != nil:
    section.add "X-Amz-Content-Sha256", valid_605141
  var valid_605142 = header.getOrDefault("X-Amz-Algorithm")
  valid_605142 = validateParameter(valid_605142, JString, required = false,
                                 default = nil)
  if valid_605142 != nil:
    section.add "X-Amz-Algorithm", valid_605142
  var valid_605143 = header.getOrDefault("X-Amz-Signature")
  valid_605143 = validateParameter(valid_605143, JString, required = false,
                                 default = nil)
  if valid_605143 != nil:
    section.add "X-Amz-Signature", valid_605143
  var valid_605144 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605144 = validateParameter(valid_605144, JString, required = false,
                                 default = nil)
  if valid_605144 != nil:
    section.add "X-Amz-SignedHeaders", valid_605144
  var valid_605145 = header.getOrDefault("X-Amz-Credential")
  valid_605145 = validateParameter(valid_605145, JString, required = false,
                                 default = nil)
  if valid_605145 != nil:
    section.add "X-Amz-Credential", valid_605145
  result.add "header", section
  ## parameters in `formData` object:
  ##   TemplateData: JString (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   TemplateName: JString (required)
  ##               : The name of the template that you want to render.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TemplateData` field"
  var valid_605146 = formData.getOrDefault("TemplateData")
  valid_605146 = validateParameter(valid_605146, JString, required = true,
                                 default = nil)
  if valid_605146 != nil:
    section.add "TemplateData", valid_605146
  var valid_605147 = formData.getOrDefault("TemplateName")
  valid_605147 = validateParameter(valid_605147, JString, required = true,
                                 default = nil)
  if valid_605147 != nil:
    section.add "TemplateName", valid_605147
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605148: Call_PostTestRenderTemplate_605134; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a preview of the MIME content of an email when provided with a template and a set of replacement data.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605148.validator(path, query, header, formData, body)
  let scheme = call_605148.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605148.url(scheme.get, call_605148.host, call_605148.base,
                         call_605148.route, valid.getOrDefault("path"))
  result = hook(call_605148, url, valid)

proc call*(call_605149: Call_PostTestRenderTemplate_605134; TemplateData: string;
          TemplateName: string; Action: string = "TestRenderTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## postTestRenderTemplate
  ## <p>Creates a preview of the MIME content of an email when provided with a template and a set of replacement data.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateData: string (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the template that you want to render.
  ##   Version: string (required)
  var query_605150 = newJObject()
  var formData_605151 = newJObject()
  add(formData_605151, "TemplateData", newJString(TemplateData))
  add(query_605150, "Action", newJString(Action))
  add(formData_605151, "TemplateName", newJString(TemplateName))
  add(query_605150, "Version", newJString(Version))
  result = call_605149.call(nil, query_605150, nil, formData_605151, nil)

var postTestRenderTemplate* = Call_PostTestRenderTemplate_605134(
    name: "postTestRenderTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=TestRenderTemplate",
    validator: validate_PostTestRenderTemplate_605135, base: "/",
    url: url_PostTestRenderTemplate_605136, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTestRenderTemplate_605117 = ref object of OpenApiRestCall_602433
proc url_GetTestRenderTemplate_605119(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetTestRenderTemplate_605118(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a preview of the MIME content of an email when provided with a template and a set of replacement data.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TemplateData: JString (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   Action: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the template that you want to render.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `TemplateData` field"
  var valid_605120 = query.getOrDefault("TemplateData")
  valid_605120 = validateParameter(valid_605120, JString, required = true,
                                 default = nil)
  if valid_605120 != nil:
    section.add "TemplateData", valid_605120
  var valid_605121 = query.getOrDefault("Action")
  valid_605121 = validateParameter(valid_605121, JString, required = true,
                                 default = newJString("TestRenderTemplate"))
  if valid_605121 != nil:
    section.add "Action", valid_605121
  var valid_605122 = query.getOrDefault("TemplateName")
  valid_605122 = validateParameter(valid_605122, JString, required = true,
                                 default = nil)
  if valid_605122 != nil:
    section.add "TemplateName", valid_605122
  var valid_605123 = query.getOrDefault("Version")
  valid_605123 = validateParameter(valid_605123, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605123 != nil:
    section.add "Version", valid_605123
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605124 = header.getOrDefault("X-Amz-Date")
  valid_605124 = validateParameter(valid_605124, JString, required = false,
                                 default = nil)
  if valid_605124 != nil:
    section.add "X-Amz-Date", valid_605124
  var valid_605125 = header.getOrDefault("X-Amz-Security-Token")
  valid_605125 = validateParameter(valid_605125, JString, required = false,
                                 default = nil)
  if valid_605125 != nil:
    section.add "X-Amz-Security-Token", valid_605125
  var valid_605126 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605126 = validateParameter(valid_605126, JString, required = false,
                                 default = nil)
  if valid_605126 != nil:
    section.add "X-Amz-Content-Sha256", valid_605126
  var valid_605127 = header.getOrDefault("X-Amz-Algorithm")
  valid_605127 = validateParameter(valid_605127, JString, required = false,
                                 default = nil)
  if valid_605127 != nil:
    section.add "X-Amz-Algorithm", valid_605127
  var valid_605128 = header.getOrDefault("X-Amz-Signature")
  valid_605128 = validateParameter(valid_605128, JString, required = false,
                                 default = nil)
  if valid_605128 != nil:
    section.add "X-Amz-Signature", valid_605128
  var valid_605129 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605129 = validateParameter(valid_605129, JString, required = false,
                                 default = nil)
  if valid_605129 != nil:
    section.add "X-Amz-SignedHeaders", valid_605129
  var valid_605130 = header.getOrDefault("X-Amz-Credential")
  valid_605130 = validateParameter(valid_605130, JString, required = false,
                                 default = nil)
  if valid_605130 != nil:
    section.add "X-Amz-Credential", valid_605130
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605131: Call_GetTestRenderTemplate_605117; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a preview of the MIME content of an email when provided with a template and a set of replacement data.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605131.validator(path, query, header, formData, body)
  let scheme = call_605131.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605131.url(scheme.get, call_605131.host, call_605131.base,
                         call_605131.route, valid.getOrDefault("path"))
  result = hook(call_605131, url, valid)

proc call*(call_605132: Call_GetTestRenderTemplate_605117; TemplateData: string;
          TemplateName: string; Action: string = "TestRenderTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## getTestRenderTemplate
  ## <p>Creates a preview of the MIME content of an email when provided with a template and a set of replacement data.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateData: string (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the template that you want to render.
  ##   Version: string (required)
  var query_605133 = newJObject()
  add(query_605133, "TemplateData", newJString(TemplateData))
  add(query_605133, "Action", newJString(Action))
  add(query_605133, "TemplateName", newJString(TemplateName))
  add(query_605133, "Version", newJString(Version))
  result = call_605132.call(nil, query_605133, nil, nil, nil)

var getTestRenderTemplate* = Call_GetTestRenderTemplate_605117(
    name: "getTestRenderTemplate", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=TestRenderTemplate",
    validator: validate_GetTestRenderTemplate_605118, base: "/",
    url: url_GetTestRenderTemplate_605119, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateAccountSendingEnabled_605168 = ref object of OpenApiRestCall_602433
proc url_PostUpdateAccountSendingEnabled_605170(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateAccountSendingEnabled_605169(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables email sending across your entire Amazon SES account in the current AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending across your Amazon SES account in a given AWS Region when reputation metrics (such as your bounce or complaint rates) reach certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605171 = query.getOrDefault("Action")
  valid_605171 = validateParameter(valid_605171, JString, required = true, default = newJString(
      "UpdateAccountSendingEnabled"))
  if valid_605171 != nil:
    section.add "Action", valid_605171
  var valid_605172 = query.getOrDefault("Version")
  valid_605172 = validateParameter(valid_605172, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605172 != nil:
    section.add "Version", valid_605172
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605173 = header.getOrDefault("X-Amz-Date")
  valid_605173 = validateParameter(valid_605173, JString, required = false,
                                 default = nil)
  if valid_605173 != nil:
    section.add "X-Amz-Date", valid_605173
  var valid_605174 = header.getOrDefault("X-Amz-Security-Token")
  valid_605174 = validateParameter(valid_605174, JString, required = false,
                                 default = nil)
  if valid_605174 != nil:
    section.add "X-Amz-Security-Token", valid_605174
  var valid_605175 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605175 = validateParameter(valid_605175, JString, required = false,
                                 default = nil)
  if valid_605175 != nil:
    section.add "X-Amz-Content-Sha256", valid_605175
  var valid_605176 = header.getOrDefault("X-Amz-Algorithm")
  valid_605176 = validateParameter(valid_605176, JString, required = false,
                                 default = nil)
  if valid_605176 != nil:
    section.add "X-Amz-Algorithm", valid_605176
  var valid_605177 = header.getOrDefault("X-Amz-Signature")
  valid_605177 = validateParameter(valid_605177, JString, required = false,
                                 default = nil)
  if valid_605177 != nil:
    section.add "X-Amz-Signature", valid_605177
  var valid_605178 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605178 = validateParameter(valid_605178, JString, required = false,
                                 default = nil)
  if valid_605178 != nil:
    section.add "X-Amz-SignedHeaders", valid_605178
  var valid_605179 = header.getOrDefault("X-Amz-Credential")
  valid_605179 = validateParameter(valid_605179, JString, required = false,
                                 default = nil)
  if valid_605179 != nil:
    section.add "X-Amz-Credential", valid_605179
  result.add "header", section
  ## parameters in `formData` object:
  ##   Enabled: JBool
  ##          : Describes whether email sending is enabled or disabled for your Amazon SES account in the current AWS Region.
  section = newJObject()
  var valid_605180 = formData.getOrDefault("Enabled")
  valid_605180 = validateParameter(valid_605180, JBool, required = false, default = nil)
  if valid_605180 != nil:
    section.add "Enabled", valid_605180
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605181: Call_PostUpdateAccountSendingEnabled_605168;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables or disables email sending across your entire Amazon SES account in the current AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending across your Amazon SES account in a given AWS Region when reputation metrics (such as your bounce or complaint rates) reach certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605181.validator(path, query, header, formData, body)
  let scheme = call_605181.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605181.url(scheme.get, call_605181.host, call_605181.base,
                         call_605181.route, valid.getOrDefault("path"))
  result = hook(call_605181, url, valid)

proc call*(call_605182: Call_PostUpdateAccountSendingEnabled_605168;
          Enabled: bool = false; Action: string = "UpdateAccountSendingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## postUpdateAccountSendingEnabled
  ## <p>Enables or disables email sending across your entire Amazon SES account in the current AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending across your Amazon SES account in a given AWS Region when reputation metrics (such as your bounce or complaint rates) reach certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Enabled: bool
  ##          : Describes whether email sending is enabled or disabled for your Amazon SES account in the current AWS Region.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605183 = newJObject()
  var formData_605184 = newJObject()
  add(formData_605184, "Enabled", newJBool(Enabled))
  add(query_605183, "Action", newJString(Action))
  add(query_605183, "Version", newJString(Version))
  result = call_605182.call(nil, query_605183, nil, formData_605184, nil)

var postUpdateAccountSendingEnabled* = Call_PostUpdateAccountSendingEnabled_605168(
    name: "postUpdateAccountSendingEnabled", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=UpdateAccountSendingEnabled",
    validator: validate_PostUpdateAccountSendingEnabled_605169, base: "/",
    url: url_PostUpdateAccountSendingEnabled_605170,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateAccountSendingEnabled_605152 = ref object of OpenApiRestCall_602433
proc url_GetUpdateAccountSendingEnabled_605154(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateAccountSendingEnabled_605153(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables email sending across your entire Amazon SES account in the current AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending across your Amazon SES account in a given AWS Region when reputation metrics (such as your bounce or complaint rates) reach certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Enabled: JBool
  ##          : Describes whether email sending is enabled or disabled for your Amazon SES account in the current AWS Region.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_605155 = query.getOrDefault("Enabled")
  valid_605155 = validateParameter(valid_605155, JBool, required = false, default = nil)
  if valid_605155 != nil:
    section.add "Enabled", valid_605155
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605156 = query.getOrDefault("Action")
  valid_605156 = validateParameter(valid_605156, JString, required = true, default = newJString(
      "UpdateAccountSendingEnabled"))
  if valid_605156 != nil:
    section.add "Action", valid_605156
  var valid_605157 = query.getOrDefault("Version")
  valid_605157 = validateParameter(valid_605157, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605157 != nil:
    section.add "Version", valid_605157
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605158 = header.getOrDefault("X-Amz-Date")
  valid_605158 = validateParameter(valid_605158, JString, required = false,
                                 default = nil)
  if valid_605158 != nil:
    section.add "X-Amz-Date", valid_605158
  var valid_605159 = header.getOrDefault("X-Amz-Security-Token")
  valid_605159 = validateParameter(valid_605159, JString, required = false,
                                 default = nil)
  if valid_605159 != nil:
    section.add "X-Amz-Security-Token", valid_605159
  var valid_605160 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605160 = validateParameter(valid_605160, JString, required = false,
                                 default = nil)
  if valid_605160 != nil:
    section.add "X-Amz-Content-Sha256", valid_605160
  var valid_605161 = header.getOrDefault("X-Amz-Algorithm")
  valid_605161 = validateParameter(valid_605161, JString, required = false,
                                 default = nil)
  if valid_605161 != nil:
    section.add "X-Amz-Algorithm", valid_605161
  var valid_605162 = header.getOrDefault("X-Amz-Signature")
  valid_605162 = validateParameter(valid_605162, JString, required = false,
                                 default = nil)
  if valid_605162 != nil:
    section.add "X-Amz-Signature", valid_605162
  var valid_605163 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605163 = validateParameter(valid_605163, JString, required = false,
                                 default = nil)
  if valid_605163 != nil:
    section.add "X-Amz-SignedHeaders", valid_605163
  var valid_605164 = header.getOrDefault("X-Amz-Credential")
  valid_605164 = validateParameter(valid_605164, JString, required = false,
                                 default = nil)
  if valid_605164 != nil:
    section.add "X-Amz-Credential", valid_605164
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605165: Call_GetUpdateAccountSendingEnabled_605152; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Enables or disables email sending across your entire Amazon SES account in the current AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending across your Amazon SES account in a given AWS Region when reputation metrics (such as your bounce or complaint rates) reach certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605165.validator(path, query, header, formData, body)
  let scheme = call_605165.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605165.url(scheme.get, call_605165.host, call_605165.base,
                         call_605165.route, valid.getOrDefault("path"))
  result = hook(call_605165, url, valid)

proc call*(call_605166: Call_GetUpdateAccountSendingEnabled_605152;
          Enabled: bool = false; Action: string = "UpdateAccountSendingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## getUpdateAccountSendingEnabled
  ## <p>Enables or disables email sending across your entire Amazon SES account in the current AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending across your Amazon SES account in a given AWS Region when reputation metrics (such as your bounce or complaint rates) reach certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Enabled: bool
  ##          : Describes whether email sending is enabled or disabled for your Amazon SES account in the current AWS Region.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605167 = newJObject()
  add(query_605167, "Enabled", newJBool(Enabled))
  add(query_605167, "Action", newJString(Action))
  add(query_605167, "Version", newJString(Version))
  result = call_605166.call(nil, query_605167, nil, nil, nil)

var getUpdateAccountSendingEnabled* = Call_GetUpdateAccountSendingEnabled_605152(
    name: "getUpdateAccountSendingEnabled", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=UpdateAccountSendingEnabled",
    validator: validate_GetUpdateAccountSendingEnabled_605153, base: "/",
    url: url_GetUpdateAccountSendingEnabled_605154,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateConfigurationSetEventDestination_605207 = ref object of OpenApiRestCall_602433
proc url_PostUpdateConfigurationSetEventDestination_605209(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateConfigurationSetEventDestination_605208(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the event destination of a configuration set. Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605210 = query.getOrDefault("Action")
  valid_605210 = validateParameter(valid_605210, JString, required = true, default = newJString(
      "UpdateConfigurationSetEventDestination"))
  if valid_605210 != nil:
    section.add "Action", valid_605210
  var valid_605211 = query.getOrDefault("Version")
  valid_605211 = validateParameter(valid_605211, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605211 != nil:
    section.add "Version", valid_605211
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605212 = header.getOrDefault("X-Amz-Date")
  valid_605212 = validateParameter(valid_605212, JString, required = false,
                                 default = nil)
  if valid_605212 != nil:
    section.add "X-Amz-Date", valid_605212
  var valid_605213 = header.getOrDefault("X-Amz-Security-Token")
  valid_605213 = validateParameter(valid_605213, JString, required = false,
                                 default = nil)
  if valid_605213 != nil:
    section.add "X-Amz-Security-Token", valid_605213
  var valid_605214 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605214 = validateParameter(valid_605214, JString, required = false,
                                 default = nil)
  if valid_605214 != nil:
    section.add "X-Amz-Content-Sha256", valid_605214
  var valid_605215 = header.getOrDefault("X-Amz-Algorithm")
  valid_605215 = validateParameter(valid_605215, JString, required = false,
                                 default = nil)
  if valid_605215 != nil:
    section.add "X-Amz-Algorithm", valid_605215
  var valid_605216 = header.getOrDefault("X-Amz-Signature")
  valid_605216 = validateParameter(valid_605216, JString, required = false,
                                 default = nil)
  if valid_605216 != nil:
    section.add "X-Amz-Signature", valid_605216
  var valid_605217 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605217 = validateParameter(valid_605217, JString, required = false,
                                 default = nil)
  if valid_605217 != nil:
    section.add "X-Amz-SignedHeaders", valid_605217
  var valid_605218 = header.getOrDefault("X-Amz-Credential")
  valid_605218 = validateParameter(valid_605218, JString, required = false,
                                 default = nil)
  if valid_605218 != nil:
    section.add "X-Amz-Credential", valid_605218
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that contains the event destination that you want to update.
  ##   EventDestination.Name: JString
  ##                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestination.CloudWatchDestination: JString
  ##                                         : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   EventDestination.MatchingEventTypes: JArray
  ##                                      : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   EventDestination.KinesisFirehoseDestination: JString
  ##                                              : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   EventDestination.Enabled: JString
  ##                           : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestination.SNSDestination: JString
  ##                                  : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_605219 = formData.getOrDefault("ConfigurationSetName")
  valid_605219 = validateParameter(valid_605219, JString, required = true,
                                 default = nil)
  if valid_605219 != nil:
    section.add "ConfigurationSetName", valid_605219
  var valid_605220 = formData.getOrDefault("EventDestination.Name")
  valid_605220 = validateParameter(valid_605220, JString, required = false,
                                 default = nil)
  if valid_605220 != nil:
    section.add "EventDestination.Name", valid_605220
  var valid_605221 = formData.getOrDefault("EventDestination.CloudWatchDestination")
  valid_605221 = validateParameter(valid_605221, JString, required = false,
                                 default = nil)
  if valid_605221 != nil:
    section.add "EventDestination.CloudWatchDestination", valid_605221
  var valid_605222 = formData.getOrDefault("EventDestination.MatchingEventTypes")
  valid_605222 = validateParameter(valid_605222, JArray, required = false,
                                 default = nil)
  if valid_605222 != nil:
    section.add "EventDestination.MatchingEventTypes", valid_605222
  var valid_605223 = formData.getOrDefault("EventDestination.KinesisFirehoseDestination")
  valid_605223 = validateParameter(valid_605223, JString, required = false,
                                 default = nil)
  if valid_605223 != nil:
    section.add "EventDestination.KinesisFirehoseDestination", valid_605223
  var valid_605224 = formData.getOrDefault("EventDestination.Enabled")
  valid_605224 = validateParameter(valid_605224, JString, required = false,
                                 default = nil)
  if valid_605224 != nil:
    section.add "EventDestination.Enabled", valid_605224
  var valid_605225 = formData.getOrDefault("EventDestination.SNSDestination")
  valid_605225 = validateParameter(valid_605225, JString, required = false,
                                 default = nil)
  if valid_605225 != nil:
    section.add "EventDestination.SNSDestination", valid_605225
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605226: Call_PostUpdateConfigurationSetEventDestination_605207;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Updates the event destination of a configuration set. Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605226.validator(path, query, header, formData, body)
  let scheme = call_605226.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605226.url(scheme.get, call_605226.host, call_605226.base,
                         call_605226.route, valid.getOrDefault("path"))
  result = hook(call_605226, url, valid)

proc call*(call_605227: Call_PostUpdateConfigurationSetEventDestination_605207;
          ConfigurationSetName: string; EventDestinationName: string = "";
          EventDestinationCloudWatchDestination: string = "";
          Action: string = "UpdateConfigurationSetEventDestination";
          EventDestinationMatchingEventTypes: JsonNode = nil;
          EventDestinationKinesisFirehoseDestination: string = "";
          EventDestinationEnabled: string = "";
          EventDestinationSNSDestination: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## postUpdateConfigurationSetEventDestination
  ## <p>Updates the event destination of a configuration set. Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that contains the event destination that you want to update.
  ##   EventDestinationName: string
  ##                       : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestinationCloudWatchDestination: string
  ##                                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   Action: string (required)
  ##   EventDestinationMatchingEventTypes: JArray
  ##                                     : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   EventDestinationKinesisFirehoseDestination: string
  ##                                             : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   EventDestinationEnabled: string
  ##                          : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestinationSNSDestination: string
  ##                                 : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  ##   Version: string (required)
  var query_605228 = newJObject()
  var formData_605229 = newJObject()
  add(formData_605229, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_605229, "EventDestination.Name", newJString(EventDestinationName))
  add(formData_605229, "EventDestination.CloudWatchDestination",
      newJString(EventDestinationCloudWatchDestination))
  add(query_605228, "Action", newJString(Action))
  if EventDestinationMatchingEventTypes != nil:
    formData_605229.add "EventDestination.MatchingEventTypes",
                       EventDestinationMatchingEventTypes
  add(formData_605229, "EventDestination.KinesisFirehoseDestination",
      newJString(EventDestinationKinesisFirehoseDestination))
  add(formData_605229, "EventDestination.Enabled",
      newJString(EventDestinationEnabled))
  add(formData_605229, "EventDestination.SNSDestination",
      newJString(EventDestinationSNSDestination))
  add(query_605228, "Version", newJString(Version))
  result = call_605227.call(nil, query_605228, nil, formData_605229, nil)

var postUpdateConfigurationSetEventDestination* = Call_PostUpdateConfigurationSetEventDestination_605207(
    name: "postUpdateConfigurationSetEventDestination", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetEventDestination",
    validator: validate_PostUpdateConfigurationSetEventDestination_605208,
    base: "/", url: url_PostUpdateConfigurationSetEventDestination_605209,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateConfigurationSetEventDestination_605185 = ref object of OpenApiRestCall_602433
proc url_GetUpdateConfigurationSetEventDestination_605187(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateConfigurationSetEventDestination_605186(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the event destination of a configuration set. Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EventDestination.Enabled: JString
  ##                           : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestination.KinesisFirehoseDestination: JString
  ##                                              : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   Action: JString (required)
  ##   EventDestination.Name: JString
  ##                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestination.CloudWatchDestination: JString
  ##                                         : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   EventDestination.SNSDestination: JString
  ##                                  : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  ##   EventDestination.MatchingEventTypes: JArray
  ##                                      : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that contains the event destination that you want to update.
  ##   Version: JString (required)
  section = newJObject()
  var valid_605188 = query.getOrDefault("EventDestination.Enabled")
  valid_605188 = validateParameter(valid_605188, JString, required = false,
                                 default = nil)
  if valid_605188 != nil:
    section.add "EventDestination.Enabled", valid_605188
  var valid_605189 = query.getOrDefault("EventDestination.KinesisFirehoseDestination")
  valid_605189 = validateParameter(valid_605189, JString, required = false,
                                 default = nil)
  if valid_605189 != nil:
    section.add "EventDestination.KinesisFirehoseDestination", valid_605189
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605190 = query.getOrDefault("Action")
  valid_605190 = validateParameter(valid_605190, JString, required = true, default = newJString(
      "UpdateConfigurationSetEventDestination"))
  if valid_605190 != nil:
    section.add "Action", valid_605190
  var valid_605191 = query.getOrDefault("EventDestination.Name")
  valid_605191 = validateParameter(valid_605191, JString, required = false,
                                 default = nil)
  if valid_605191 != nil:
    section.add "EventDestination.Name", valid_605191
  var valid_605192 = query.getOrDefault("EventDestination.CloudWatchDestination")
  valid_605192 = validateParameter(valid_605192, JString, required = false,
                                 default = nil)
  if valid_605192 != nil:
    section.add "EventDestination.CloudWatchDestination", valid_605192
  var valid_605193 = query.getOrDefault("EventDestination.SNSDestination")
  valid_605193 = validateParameter(valid_605193, JString, required = false,
                                 default = nil)
  if valid_605193 != nil:
    section.add "EventDestination.SNSDestination", valid_605193
  var valid_605194 = query.getOrDefault("EventDestination.MatchingEventTypes")
  valid_605194 = validateParameter(valid_605194, JArray, required = false,
                                 default = nil)
  if valid_605194 != nil:
    section.add "EventDestination.MatchingEventTypes", valid_605194
  var valid_605195 = query.getOrDefault("ConfigurationSetName")
  valid_605195 = validateParameter(valid_605195, JString, required = true,
                                 default = nil)
  if valid_605195 != nil:
    section.add "ConfigurationSetName", valid_605195
  var valid_605196 = query.getOrDefault("Version")
  valid_605196 = validateParameter(valid_605196, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605196 != nil:
    section.add "Version", valid_605196
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605197 = header.getOrDefault("X-Amz-Date")
  valid_605197 = validateParameter(valid_605197, JString, required = false,
                                 default = nil)
  if valid_605197 != nil:
    section.add "X-Amz-Date", valid_605197
  var valid_605198 = header.getOrDefault("X-Amz-Security-Token")
  valid_605198 = validateParameter(valid_605198, JString, required = false,
                                 default = nil)
  if valid_605198 != nil:
    section.add "X-Amz-Security-Token", valid_605198
  var valid_605199 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605199 = validateParameter(valid_605199, JString, required = false,
                                 default = nil)
  if valid_605199 != nil:
    section.add "X-Amz-Content-Sha256", valid_605199
  var valid_605200 = header.getOrDefault("X-Amz-Algorithm")
  valid_605200 = validateParameter(valid_605200, JString, required = false,
                                 default = nil)
  if valid_605200 != nil:
    section.add "X-Amz-Algorithm", valid_605200
  var valid_605201 = header.getOrDefault("X-Amz-Signature")
  valid_605201 = validateParameter(valid_605201, JString, required = false,
                                 default = nil)
  if valid_605201 != nil:
    section.add "X-Amz-Signature", valid_605201
  var valid_605202 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605202 = validateParameter(valid_605202, JString, required = false,
                                 default = nil)
  if valid_605202 != nil:
    section.add "X-Amz-SignedHeaders", valid_605202
  var valid_605203 = header.getOrDefault("X-Amz-Credential")
  valid_605203 = validateParameter(valid_605203, JString, required = false,
                                 default = nil)
  if valid_605203 != nil:
    section.add "X-Amz-Credential", valid_605203
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605204: Call_GetUpdateConfigurationSetEventDestination_605185;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Updates the event destination of a configuration set. Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605204.validator(path, query, header, formData, body)
  let scheme = call_605204.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605204.url(scheme.get, call_605204.host, call_605204.base,
                         call_605204.route, valid.getOrDefault("path"))
  result = hook(call_605204, url, valid)

proc call*(call_605205: Call_GetUpdateConfigurationSetEventDestination_605185;
          ConfigurationSetName: string; EventDestinationEnabled: string = "";
          EventDestinationKinesisFirehoseDestination: string = "";
          Action: string = "UpdateConfigurationSetEventDestination";
          EventDestinationName: string = "";
          EventDestinationCloudWatchDestination: string = "";
          EventDestinationSNSDestination: string = "";
          EventDestinationMatchingEventTypes: JsonNode = nil;
          Version: string = "2010-12-01"): Recallable =
  ## getUpdateConfigurationSetEventDestination
  ## <p>Updates the event destination of a configuration set. Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>You can execute this operation no more than once per second.</p>
  ##   EventDestinationEnabled: string
  ##                          : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestinationKinesisFirehoseDestination: string
  ##                                             : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   Action: string (required)
  ##   EventDestinationName: string
  ##                       : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestinationCloudWatchDestination: string
  ##                                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   EventDestinationSNSDestination: string
  ##                                 : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  ##   EventDestinationMatchingEventTypes: JArray
  ##                                     : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that contains the event destination that you want to update.
  ##   Version: string (required)
  var query_605206 = newJObject()
  add(query_605206, "EventDestination.Enabled",
      newJString(EventDestinationEnabled))
  add(query_605206, "EventDestination.KinesisFirehoseDestination",
      newJString(EventDestinationKinesisFirehoseDestination))
  add(query_605206, "Action", newJString(Action))
  add(query_605206, "EventDestination.Name", newJString(EventDestinationName))
  add(query_605206, "EventDestination.CloudWatchDestination",
      newJString(EventDestinationCloudWatchDestination))
  add(query_605206, "EventDestination.SNSDestination",
      newJString(EventDestinationSNSDestination))
  if EventDestinationMatchingEventTypes != nil:
    query_605206.add "EventDestination.MatchingEventTypes",
                    EventDestinationMatchingEventTypes
  add(query_605206, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_605206, "Version", newJString(Version))
  result = call_605205.call(nil, query_605206, nil, nil, nil)

var getUpdateConfigurationSetEventDestination* = Call_GetUpdateConfigurationSetEventDestination_605185(
    name: "getUpdateConfigurationSetEventDestination", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetEventDestination",
    validator: validate_GetUpdateConfigurationSetEventDestination_605186,
    base: "/", url: url_GetUpdateConfigurationSetEventDestination_605187,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateConfigurationSetReputationMetricsEnabled_605247 = ref object of OpenApiRestCall_602433
proc url_PostUpdateConfigurationSetReputationMetricsEnabled_605249(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateConfigurationSetReputationMetricsEnabled_605248(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## <p>Enables or disables the publishing of reputation metrics for emails sent using a specific configuration set in a given AWS Region. Reputation metrics include bounce and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can create alarms when bounce or complaint rates exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605250 = query.getOrDefault("Action")
  valid_605250 = validateParameter(valid_605250, JString, required = true, default = newJString(
      "UpdateConfigurationSetReputationMetricsEnabled"))
  if valid_605250 != nil:
    section.add "Action", valid_605250
  var valid_605251 = query.getOrDefault("Version")
  valid_605251 = validateParameter(valid_605251, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605251 != nil:
    section.add "Version", valid_605251
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605252 = header.getOrDefault("X-Amz-Date")
  valid_605252 = validateParameter(valid_605252, JString, required = false,
                                 default = nil)
  if valid_605252 != nil:
    section.add "X-Amz-Date", valid_605252
  var valid_605253 = header.getOrDefault("X-Amz-Security-Token")
  valid_605253 = validateParameter(valid_605253, JString, required = false,
                                 default = nil)
  if valid_605253 != nil:
    section.add "X-Amz-Security-Token", valid_605253
  var valid_605254 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605254 = validateParameter(valid_605254, JString, required = false,
                                 default = nil)
  if valid_605254 != nil:
    section.add "X-Amz-Content-Sha256", valid_605254
  var valid_605255 = header.getOrDefault("X-Amz-Algorithm")
  valid_605255 = validateParameter(valid_605255, JString, required = false,
                                 default = nil)
  if valid_605255 != nil:
    section.add "X-Amz-Algorithm", valid_605255
  var valid_605256 = header.getOrDefault("X-Amz-Signature")
  valid_605256 = validateParameter(valid_605256, JString, required = false,
                                 default = nil)
  if valid_605256 != nil:
    section.add "X-Amz-Signature", valid_605256
  var valid_605257 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605257 = validateParameter(valid_605257, JString, required = false,
                                 default = nil)
  if valid_605257 != nil:
    section.add "X-Amz-SignedHeaders", valid_605257
  var valid_605258 = header.getOrDefault("X-Amz-Credential")
  valid_605258 = validateParameter(valid_605258, JString, required = false,
                                 default = nil)
  if valid_605258 != nil:
    section.add "X-Amz-Credential", valid_605258
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Enabled: JBool (required)
  ##          : Describes whether or not Amazon SES will publish reputation metrics for the configuration set, such as bounce and complaint rates, to Amazon CloudWatch.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_605259 = formData.getOrDefault("ConfigurationSetName")
  valid_605259 = validateParameter(valid_605259, JString, required = true,
                                 default = nil)
  if valid_605259 != nil:
    section.add "ConfigurationSetName", valid_605259
  var valid_605260 = formData.getOrDefault("Enabled")
  valid_605260 = validateParameter(valid_605260, JBool, required = true, default = nil)
  if valid_605260 != nil:
    section.add "Enabled", valid_605260
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605261: Call_PostUpdateConfigurationSetReputationMetricsEnabled_605247;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables or disables the publishing of reputation metrics for emails sent using a specific configuration set in a given AWS Region. Reputation metrics include bounce and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can create alarms when bounce or complaint rates exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605261.validator(path, query, header, formData, body)
  let scheme = call_605261.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605261.url(scheme.get, call_605261.host, call_605261.base,
                         call_605261.route, valid.getOrDefault("path"))
  result = hook(call_605261, url, valid)

proc call*(call_605262: Call_PostUpdateConfigurationSetReputationMetricsEnabled_605247;
          ConfigurationSetName: string; Enabled: bool;
          Action: string = "UpdateConfigurationSetReputationMetricsEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## postUpdateConfigurationSetReputationMetricsEnabled
  ## <p>Enables or disables the publishing of reputation metrics for emails sent using a specific configuration set in a given AWS Region. Reputation metrics include bounce and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can create alarms when bounce or complaint rates exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Enabled: bool (required)
  ##          : Describes whether or not Amazon SES will publish reputation metrics for the configuration set, such as bounce and complaint rates, to Amazon CloudWatch.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605263 = newJObject()
  var formData_605264 = newJObject()
  add(formData_605264, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_605264, "Enabled", newJBool(Enabled))
  add(query_605263, "Action", newJString(Action))
  add(query_605263, "Version", newJString(Version))
  result = call_605262.call(nil, query_605263, nil, formData_605264, nil)

var postUpdateConfigurationSetReputationMetricsEnabled* = Call_PostUpdateConfigurationSetReputationMetricsEnabled_605247(
    name: "postUpdateConfigurationSetReputationMetricsEnabled",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetReputationMetricsEnabled",
    validator: validate_PostUpdateConfigurationSetReputationMetricsEnabled_605248,
    base: "/", url: url_PostUpdateConfigurationSetReputationMetricsEnabled_605249,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateConfigurationSetReputationMetricsEnabled_605230 = ref object of OpenApiRestCall_602433
proc url_GetUpdateConfigurationSetReputationMetricsEnabled_605232(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateConfigurationSetReputationMetricsEnabled_605231(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## <p>Enables or disables the publishing of reputation metrics for emails sent using a specific configuration set in a given AWS Region. Reputation metrics include bounce and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can create alarms when bounce or complaint rates exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Enabled: JBool (required)
  ##          : Describes whether or not Amazon SES will publish reputation metrics for the configuration set, such as bounce and complaint rates, to Amazon CloudWatch.
  ##   Action: JString (required)
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Enabled` field"
  var valid_605233 = query.getOrDefault("Enabled")
  valid_605233 = validateParameter(valid_605233, JBool, required = true, default = nil)
  if valid_605233 != nil:
    section.add "Enabled", valid_605233
  var valid_605234 = query.getOrDefault("Action")
  valid_605234 = validateParameter(valid_605234, JString, required = true, default = newJString(
      "UpdateConfigurationSetReputationMetricsEnabled"))
  if valid_605234 != nil:
    section.add "Action", valid_605234
  var valid_605235 = query.getOrDefault("ConfigurationSetName")
  valid_605235 = validateParameter(valid_605235, JString, required = true,
                                 default = nil)
  if valid_605235 != nil:
    section.add "ConfigurationSetName", valid_605235
  var valid_605236 = query.getOrDefault("Version")
  valid_605236 = validateParameter(valid_605236, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605236 != nil:
    section.add "Version", valid_605236
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605237 = header.getOrDefault("X-Amz-Date")
  valid_605237 = validateParameter(valid_605237, JString, required = false,
                                 default = nil)
  if valid_605237 != nil:
    section.add "X-Amz-Date", valid_605237
  var valid_605238 = header.getOrDefault("X-Amz-Security-Token")
  valid_605238 = validateParameter(valid_605238, JString, required = false,
                                 default = nil)
  if valid_605238 != nil:
    section.add "X-Amz-Security-Token", valid_605238
  var valid_605239 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605239 = validateParameter(valid_605239, JString, required = false,
                                 default = nil)
  if valid_605239 != nil:
    section.add "X-Amz-Content-Sha256", valid_605239
  var valid_605240 = header.getOrDefault("X-Amz-Algorithm")
  valid_605240 = validateParameter(valid_605240, JString, required = false,
                                 default = nil)
  if valid_605240 != nil:
    section.add "X-Amz-Algorithm", valid_605240
  var valid_605241 = header.getOrDefault("X-Amz-Signature")
  valid_605241 = validateParameter(valid_605241, JString, required = false,
                                 default = nil)
  if valid_605241 != nil:
    section.add "X-Amz-Signature", valid_605241
  var valid_605242 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605242 = validateParameter(valid_605242, JString, required = false,
                                 default = nil)
  if valid_605242 != nil:
    section.add "X-Amz-SignedHeaders", valid_605242
  var valid_605243 = header.getOrDefault("X-Amz-Credential")
  valid_605243 = validateParameter(valid_605243, JString, required = false,
                                 default = nil)
  if valid_605243 != nil:
    section.add "X-Amz-Credential", valid_605243
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605244: Call_GetUpdateConfigurationSetReputationMetricsEnabled_605230;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables or disables the publishing of reputation metrics for emails sent using a specific configuration set in a given AWS Region. Reputation metrics include bounce and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can create alarms when bounce or complaint rates exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605244.validator(path, query, header, formData, body)
  let scheme = call_605244.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605244.url(scheme.get, call_605244.host, call_605244.base,
                         call_605244.route, valid.getOrDefault("path"))
  result = hook(call_605244, url, valid)

proc call*(call_605245: Call_GetUpdateConfigurationSetReputationMetricsEnabled_605230;
          Enabled: bool; ConfigurationSetName: string;
          Action: string = "UpdateConfigurationSetReputationMetricsEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## getUpdateConfigurationSetReputationMetricsEnabled
  ## <p>Enables or disables the publishing of reputation metrics for emails sent using a specific configuration set in a given AWS Region. Reputation metrics include bounce and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can create alarms when bounce or complaint rates exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Enabled: bool (required)
  ##          : Describes whether or not Amazon SES will publish reputation metrics for the configuration set, such as bounce and complaint rates, to Amazon CloudWatch.
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Version: string (required)
  var query_605246 = newJObject()
  add(query_605246, "Enabled", newJBool(Enabled))
  add(query_605246, "Action", newJString(Action))
  add(query_605246, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_605246, "Version", newJString(Version))
  result = call_605245.call(nil, query_605246, nil, nil, nil)

var getUpdateConfigurationSetReputationMetricsEnabled* = Call_GetUpdateConfigurationSetReputationMetricsEnabled_605230(
    name: "getUpdateConfigurationSetReputationMetricsEnabled",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetReputationMetricsEnabled",
    validator: validate_GetUpdateConfigurationSetReputationMetricsEnabled_605231,
    base: "/", url: url_GetUpdateConfigurationSetReputationMetricsEnabled_605232,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateConfigurationSetSendingEnabled_605282 = ref object of OpenApiRestCall_602433
proc url_PostUpdateConfigurationSetSendingEnabled_605284(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateConfigurationSetSendingEnabled_605283(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables email sending for messages sent using a specific configuration set in a given AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending for a configuration set when the reputation metrics for that configuration set (such as your bounce on complaint rate) exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605285 = query.getOrDefault("Action")
  valid_605285 = validateParameter(valid_605285, JString, required = true, default = newJString(
      "UpdateConfigurationSetSendingEnabled"))
  if valid_605285 != nil:
    section.add "Action", valid_605285
  var valid_605286 = query.getOrDefault("Version")
  valid_605286 = validateParameter(valid_605286, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605286 != nil:
    section.add "Version", valid_605286
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605287 = header.getOrDefault("X-Amz-Date")
  valid_605287 = validateParameter(valid_605287, JString, required = false,
                                 default = nil)
  if valid_605287 != nil:
    section.add "X-Amz-Date", valid_605287
  var valid_605288 = header.getOrDefault("X-Amz-Security-Token")
  valid_605288 = validateParameter(valid_605288, JString, required = false,
                                 default = nil)
  if valid_605288 != nil:
    section.add "X-Amz-Security-Token", valid_605288
  var valid_605289 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605289 = validateParameter(valid_605289, JString, required = false,
                                 default = nil)
  if valid_605289 != nil:
    section.add "X-Amz-Content-Sha256", valid_605289
  var valid_605290 = header.getOrDefault("X-Amz-Algorithm")
  valid_605290 = validateParameter(valid_605290, JString, required = false,
                                 default = nil)
  if valid_605290 != nil:
    section.add "X-Amz-Algorithm", valid_605290
  var valid_605291 = header.getOrDefault("X-Amz-Signature")
  valid_605291 = validateParameter(valid_605291, JString, required = false,
                                 default = nil)
  if valid_605291 != nil:
    section.add "X-Amz-Signature", valid_605291
  var valid_605292 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605292 = validateParameter(valid_605292, JString, required = false,
                                 default = nil)
  if valid_605292 != nil:
    section.add "X-Amz-SignedHeaders", valid_605292
  var valid_605293 = header.getOrDefault("X-Amz-Credential")
  valid_605293 = validateParameter(valid_605293, JString, required = false,
                                 default = nil)
  if valid_605293 != nil:
    section.add "X-Amz-Credential", valid_605293
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Enabled: JBool (required)
  ##          : Describes whether email sending is enabled or disabled for the configuration set. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_605294 = formData.getOrDefault("ConfigurationSetName")
  valid_605294 = validateParameter(valid_605294, JString, required = true,
                                 default = nil)
  if valid_605294 != nil:
    section.add "ConfigurationSetName", valid_605294
  var valid_605295 = formData.getOrDefault("Enabled")
  valid_605295 = validateParameter(valid_605295, JBool, required = true, default = nil)
  if valid_605295 != nil:
    section.add "Enabled", valid_605295
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605296: Call_PostUpdateConfigurationSetSendingEnabled_605282;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables or disables email sending for messages sent using a specific configuration set in a given AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending for a configuration set when the reputation metrics for that configuration set (such as your bounce on complaint rate) exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605296.validator(path, query, header, formData, body)
  let scheme = call_605296.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605296.url(scheme.get, call_605296.host, call_605296.base,
                         call_605296.route, valid.getOrDefault("path"))
  result = hook(call_605296, url, valid)

proc call*(call_605297: Call_PostUpdateConfigurationSetSendingEnabled_605282;
          ConfigurationSetName: string; Enabled: bool;
          Action: string = "UpdateConfigurationSetSendingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## postUpdateConfigurationSetSendingEnabled
  ## <p>Enables or disables email sending for messages sent using a specific configuration set in a given AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending for a configuration set when the reputation metrics for that configuration set (such as your bounce on complaint rate) exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Enabled: bool (required)
  ##          : Describes whether email sending is enabled or disabled for the configuration set. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605298 = newJObject()
  var formData_605299 = newJObject()
  add(formData_605299, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_605299, "Enabled", newJBool(Enabled))
  add(query_605298, "Action", newJString(Action))
  add(query_605298, "Version", newJString(Version))
  result = call_605297.call(nil, query_605298, nil, formData_605299, nil)

var postUpdateConfigurationSetSendingEnabled* = Call_PostUpdateConfigurationSetSendingEnabled_605282(
    name: "postUpdateConfigurationSetSendingEnabled", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetSendingEnabled",
    validator: validate_PostUpdateConfigurationSetSendingEnabled_605283,
    base: "/", url: url_PostUpdateConfigurationSetSendingEnabled_605284,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateConfigurationSetSendingEnabled_605265 = ref object of OpenApiRestCall_602433
proc url_GetUpdateConfigurationSetSendingEnabled_605267(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateConfigurationSetSendingEnabled_605266(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables email sending for messages sent using a specific configuration set in a given AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending for a configuration set when the reputation metrics for that configuration set (such as your bounce on complaint rate) exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Enabled: JBool (required)
  ##          : Describes whether email sending is enabled or disabled for the configuration set. 
  ##   Action: JString (required)
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Enabled` field"
  var valid_605268 = query.getOrDefault("Enabled")
  valid_605268 = validateParameter(valid_605268, JBool, required = true, default = nil)
  if valid_605268 != nil:
    section.add "Enabled", valid_605268
  var valid_605269 = query.getOrDefault("Action")
  valid_605269 = validateParameter(valid_605269, JString, required = true, default = newJString(
      "UpdateConfigurationSetSendingEnabled"))
  if valid_605269 != nil:
    section.add "Action", valid_605269
  var valid_605270 = query.getOrDefault("ConfigurationSetName")
  valid_605270 = validateParameter(valid_605270, JString, required = true,
                                 default = nil)
  if valid_605270 != nil:
    section.add "ConfigurationSetName", valid_605270
  var valid_605271 = query.getOrDefault("Version")
  valid_605271 = validateParameter(valid_605271, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605271 != nil:
    section.add "Version", valid_605271
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605272 = header.getOrDefault("X-Amz-Date")
  valid_605272 = validateParameter(valid_605272, JString, required = false,
                                 default = nil)
  if valid_605272 != nil:
    section.add "X-Amz-Date", valid_605272
  var valid_605273 = header.getOrDefault("X-Amz-Security-Token")
  valid_605273 = validateParameter(valid_605273, JString, required = false,
                                 default = nil)
  if valid_605273 != nil:
    section.add "X-Amz-Security-Token", valid_605273
  var valid_605274 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605274 = validateParameter(valid_605274, JString, required = false,
                                 default = nil)
  if valid_605274 != nil:
    section.add "X-Amz-Content-Sha256", valid_605274
  var valid_605275 = header.getOrDefault("X-Amz-Algorithm")
  valid_605275 = validateParameter(valid_605275, JString, required = false,
                                 default = nil)
  if valid_605275 != nil:
    section.add "X-Amz-Algorithm", valid_605275
  var valid_605276 = header.getOrDefault("X-Amz-Signature")
  valid_605276 = validateParameter(valid_605276, JString, required = false,
                                 default = nil)
  if valid_605276 != nil:
    section.add "X-Amz-Signature", valid_605276
  var valid_605277 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605277 = validateParameter(valid_605277, JString, required = false,
                                 default = nil)
  if valid_605277 != nil:
    section.add "X-Amz-SignedHeaders", valid_605277
  var valid_605278 = header.getOrDefault("X-Amz-Credential")
  valid_605278 = validateParameter(valid_605278, JString, required = false,
                                 default = nil)
  if valid_605278 != nil:
    section.add "X-Amz-Credential", valid_605278
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605279: Call_GetUpdateConfigurationSetSendingEnabled_605265;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables or disables email sending for messages sent using a specific configuration set in a given AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending for a configuration set when the reputation metrics for that configuration set (such as your bounce on complaint rate) exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605279.validator(path, query, header, formData, body)
  let scheme = call_605279.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605279.url(scheme.get, call_605279.host, call_605279.base,
                         call_605279.route, valid.getOrDefault("path"))
  result = hook(call_605279, url, valid)

proc call*(call_605280: Call_GetUpdateConfigurationSetSendingEnabled_605265;
          Enabled: bool; ConfigurationSetName: string;
          Action: string = "UpdateConfigurationSetSendingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## getUpdateConfigurationSetSendingEnabled
  ## <p>Enables or disables email sending for messages sent using a specific configuration set in a given AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending for a configuration set when the reputation metrics for that configuration set (such as your bounce on complaint rate) exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Enabled: bool (required)
  ##          : Describes whether email sending is enabled or disabled for the configuration set. 
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Version: string (required)
  var query_605281 = newJObject()
  add(query_605281, "Enabled", newJBool(Enabled))
  add(query_605281, "Action", newJString(Action))
  add(query_605281, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_605281, "Version", newJString(Version))
  result = call_605280.call(nil, query_605281, nil, nil, nil)

var getUpdateConfigurationSetSendingEnabled* = Call_GetUpdateConfigurationSetSendingEnabled_605265(
    name: "getUpdateConfigurationSetSendingEnabled", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetSendingEnabled",
    validator: validate_GetUpdateConfigurationSetSendingEnabled_605266, base: "/",
    url: url_GetUpdateConfigurationSetSendingEnabled_605267,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateConfigurationSetTrackingOptions_605317 = ref object of OpenApiRestCall_602433
proc url_PostUpdateConfigurationSetTrackingOptions_605319(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateConfigurationSetTrackingOptions_605318(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605320 = query.getOrDefault("Action")
  valid_605320 = validateParameter(valid_605320, JString, required = true, default = newJString(
      "UpdateConfigurationSetTrackingOptions"))
  if valid_605320 != nil:
    section.add "Action", valid_605320
  var valid_605321 = query.getOrDefault("Version")
  valid_605321 = validateParameter(valid_605321, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605321 != nil:
    section.add "Version", valid_605321
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605322 = header.getOrDefault("X-Amz-Date")
  valid_605322 = validateParameter(valid_605322, JString, required = false,
                                 default = nil)
  if valid_605322 != nil:
    section.add "X-Amz-Date", valid_605322
  var valid_605323 = header.getOrDefault("X-Amz-Security-Token")
  valid_605323 = validateParameter(valid_605323, JString, required = false,
                                 default = nil)
  if valid_605323 != nil:
    section.add "X-Amz-Security-Token", valid_605323
  var valid_605324 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605324 = validateParameter(valid_605324, JString, required = false,
                                 default = nil)
  if valid_605324 != nil:
    section.add "X-Amz-Content-Sha256", valid_605324
  var valid_605325 = header.getOrDefault("X-Amz-Algorithm")
  valid_605325 = validateParameter(valid_605325, JString, required = false,
                                 default = nil)
  if valid_605325 != nil:
    section.add "X-Amz-Algorithm", valid_605325
  var valid_605326 = header.getOrDefault("X-Amz-Signature")
  valid_605326 = validateParameter(valid_605326, JString, required = false,
                                 default = nil)
  if valid_605326 != nil:
    section.add "X-Amz-Signature", valid_605326
  var valid_605327 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605327 = validateParameter(valid_605327, JString, required = false,
                                 default = nil)
  if valid_605327 != nil:
    section.add "X-Amz-SignedHeaders", valid_605327
  var valid_605328 = header.getOrDefault("X-Amz-Credential")
  valid_605328 = validateParameter(valid_605328, JString, required = false,
                                 default = nil)
  if valid_605328 != nil:
    section.add "X-Amz-Credential", valid_605328
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set for which you want to update the custom tracking domain.
  ##   TrackingOptions.CustomRedirectDomain: JString
  ##                                       : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_605329 = formData.getOrDefault("ConfigurationSetName")
  valid_605329 = validateParameter(valid_605329, JString, required = true,
                                 default = nil)
  if valid_605329 != nil:
    section.add "ConfigurationSetName", valid_605329
  var valid_605330 = formData.getOrDefault("TrackingOptions.CustomRedirectDomain")
  valid_605330 = validateParameter(valid_605330, JString, required = false,
                                 default = nil)
  if valid_605330 != nil:
    section.add "TrackingOptions.CustomRedirectDomain", valid_605330
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605331: Call_PostUpdateConfigurationSetTrackingOptions_605317;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Modifies an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_605331.validator(path, query, header, formData, body)
  let scheme = call_605331.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605331.url(scheme.get, call_605331.host, call_605331.base,
                         call_605331.route, valid.getOrDefault("path"))
  result = hook(call_605331, url, valid)

proc call*(call_605332: Call_PostUpdateConfigurationSetTrackingOptions_605317;
          ConfigurationSetName: string;
          Action: string = "UpdateConfigurationSetTrackingOptions";
          TrackingOptionsCustomRedirectDomain: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## postUpdateConfigurationSetTrackingOptions
  ## <p>Modifies an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set for which you want to update the custom tracking domain.
  ##   Action: string (required)
  ##   TrackingOptionsCustomRedirectDomain: string
  ##                                      : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  ##   Version: string (required)
  var query_605333 = newJObject()
  var formData_605334 = newJObject()
  add(formData_605334, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_605333, "Action", newJString(Action))
  add(formData_605334, "TrackingOptions.CustomRedirectDomain",
      newJString(TrackingOptionsCustomRedirectDomain))
  add(query_605333, "Version", newJString(Version))
  result = call_605332.call(nil, query_605333, nil, formData_605334, nil)

var postUpdateConfigurationSetTrackingOptions* = Call_PostUpdateConfigurationSetTrackingOptions_605317(
    name: "postUpdateConfigurationSetTrackingOptions", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetTrackingOptions",
    validator: validate_PostUpdateConfigurationSetTrackingOptions_605318,
    base: "/", url: url_PostUpdateConfigurationSetTrackingOptions_605319,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateConfigurationSetTrackingOptions_605300 = ref object of OpenApiRestCall_602433
proc url_GetUpdateConfigurationSetTrackingOptions_605302(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateConfigurationSetTrackingOptions_605301(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TrackingOptions.CustomRedirectDomain: JString
  ##                                       : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  ##   Action: JString (required)
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set for which you want to update the custom tracking domain.
  ##   Version: JString (required)
  section = newJObject()
  var valid_605303 = query.getOrDefault("TrackingOptions.CustomRedirectDomain")
  valid_605303 = validateParameter(valid_605303, JString, required = false,
                                 default = nil)
  if valid_605303 != nil:
    section.add "TrackingOptions.CustomRedirectDomain", valid_605303
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605304 = query.getOrDefault("Action")
  valid_605304 = validateParameter(valid_605304, JString, required = true, default = newJString(
      "UpdateConfigurationSetTrackingOptions"))
  if valid_605304 != nil:
    section.add "Action", valid_605304
  var valid_605305 = query.getOrDefault("ConfigurationSetName")
  valid_605305 = validateParameter(valid_605305, JString, required = true,
                                 default = nil)
  if valid_605305 != nil:
    section.add "ConfigurationSetName", valid_605305
  var valid_605306 = query.getOrDefault("Version")
  valid_605306 = validateParameter(valid_605306, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605306 != nil:
    section.add "Version", valid_605306
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605307 = header.getOrDefault("X-Amz-Date")
  valid_605307 = validateParameter(valid_605307, JString, required = false,
                                 default = nil)
  if valid_605307 != nil:
    section.add "X-Amz-Date", valid_605307
  var valid_605308 = header.getOrDefault("X-Amz-Security-Token")
  valid_605308 = validateParameter(valid_605308, JString, required = false,
                                 default = nil)
  if valid_605308 != nil:
    section.add "X-Amz-Security-Token", valid_605308
  var valid_605309 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605309 = validateParameter(valid_605309, JString, required = false,
                                 default = nil)
  if valid_605309 != nil:
    section.add "X-Amz-Content-Sha256", valid_605309
  var valid_605310 = header.getOrDefault("X-Amz-Algorithm")
  valid_605310 = validateParameter(valid_605310, JString, required = false,
                                 default = nil)
  if valid_605310 != nil:
    section.add "X-Amz-Algorithm", valid_605310
  var valid_605311 = header.getOrDefault("X-Amz-Signature")
  valid_605311 = validateParameter(valid_605311, JString, required = false,
                                 default = nil)
  if valid_605311 != nil:
    section.add "X-Amz-Signature", valid_605311
  var valid_605312 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605312 = validateParameter(valid_605312, JString, required = false,
                                 default = nil)
  if valid_605312 != nil:
    section.add "X-Amz-SignedHeaders", valid_605312
  var valid_605313 = header.getOrDefault("X-Amz-Credential")
  valid_605313 = validateParameter(valid_605313, JString, required = false,
                                 default = nil)
  if valid_605313 != nil:
    section.add "X-Amz-Credential", valid_605313
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605314: Call_GetUpdateConfigurationSetTrackingOptions_605300;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Modifies an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_605314.validator(path, query, header, formData, body)
  let scheme = call_605314.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605314.url(scheme.get, call_605314.host, call_605314.base,
                         call_605314.route, valid.getOrDefault("path"))
  result = hook(call_605314, url, valid)

proc call*(call_605315: Call_GetUpdateConfigurationSetTrackingOptions_605300;
          ConfigurationSetName: string;
          TrackingOptionsCustomRedirectDomain: string = "";
          Action: string = "UpdateConfigurationSetTrackingOptions";
          Version: string = "2010-12-01"): Recallable =
  ## getUpdateConfigurationSetTrackingOptions
  ## <p>Modifies an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ##   TrackingOptionsCustomRedirectDomain: string
  ##                                      : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set for which you want to update the custom tracking domain.
  ##   Version: string (required)
  var query_605316 = newJObject()
  add(query_605316, "TrackingOptions.CustomRedirectDomain",
      newJString(TrackingOptionsCustomRedirectDomain))
  add(query_605316, "Action", newJString(Action))
  add(query_605316, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_605316, "Version", newJString(Version))
  result = call_605315.call(nil, query_605316, nil, nil, nil)

var getUpdateConfigurationSetTrackingOptions* = Call_GetUpdateConfigurationSetTrackingOptions_605300(
    name: "getUpdateConfigurationSetTrackingOptions", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetTrackingOptions",
    validator: validate_GetUpdateConfigurationSetTrackingOptions_605301,
    base: "/", url: url_GetUpdateConfigurationSetTrackingOptions_605302,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateCustomVerificationEmailTemplate_605356 = ref object of OpenApiRestCall_602433
proc url_PostUpdateCustomVerificationEmailTemplate_605358(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateCustomVerificationEmailTemplate_605357(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates an existing custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605359 = query.getOrDefault("Action")
  valid_605359 = validateParameter(valid_605359, JString, required = true, default = newJString(
      "UpdateCustomVerificationEmailTemplate"))
  if valid_605359 != nil:
    section.add "Action", valid_605359
  var valid_605360 = query.getOrDefault("Version")
  valid_605360 = validateParameter(valid_605360, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605360 != nil:
    section.add "Version", valid_605360
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605361 = header.getOrDefault("X-Amz-Date")
  valid_605361 = validateParameter(valid_605361, JString, required = false,
                                 default = nil)
  if valid_605361 != nil:
    section.add "X-Amz-Date", valid_605361
  var valid_605362 = header.getOrDefault("X-Amz-Security-Token")
  valid_605362 = validateParameter(valid_605362, JString, required = false,
                                 default = nil)
  if valid_605362 != nil:
    section.add "X-Amz-Security-Token", valid_605362
  var valid_605363 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605363 = validateParameter(valid_605363, JString, required = false,
                                 default = nil)
  if valid_605363 != nil:
    section.add "X-Amz-Content-Sha256", valid_605363
  var valid_605364 = header.getOrDefault("X-Amz-Algorithm")
  valid_605364 = validateParameter(valid_605364, JString, required = false,
                                 default = nil)
  if valid_605364 != nil:
    section.add "X-Amz-Algorithm", valid_605364
  var valid_605365 = header.getOrDefault("X-Amz-Signature")
  valid_605365 = validateParameter(valid_605365, JString, required = false,
                                 default = nil)
  if valid_605365 != nil:
    section.add "X-Amz-Signature", valid_605365
  var valid_605366 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605366 = validateParameter(valid_605366, JString, required = false,
                                 default = nil)
  if valid_605366 != nil:
    section.add "X-Amz-SignedHeaders", valid_605366
  var valid_605367 = header.getOrDefault("X-Amz-Credential")
  valid_605367 = validateParameter(valid_605367, JString, required = false,
                                 default = nil)
  if valid_605367 != nil:
    section.add "X-Amz-Credential", valid_605367
  result.add "header", section
  ## parameters in `formData` object:
  ##   SuccessRedirectionURL: JString
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   FailureRedirectionURL: JString
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   FromEmailAddress: JString
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateContent: JString
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template that you want to update.
  ##   TemplateSubject: JString
  ##                  : The subject line of the custom verification email.
  section = newJObject()
  var valid_605368 = formData.getOrDefault("SuccessRedirectionURL")
  valid_605368 = validateParameter(valid_605368, JString, required = false,
                                 default = nil)
  if valid_605368 != nil:
    section.add "SuccessRedirectionURL", valid_605368
  var valid_605369 = formData.getOrDefault("FailureRedirectionURL")
  valid_605369 = validateParameter(valid_605369, JString, required = false,
                                 default = nil)
  if valid_605369 != nil:
    section.add "FailureRedirectionURL", valid_605369
  var valid_605370 = formData.getOrDefault("FromEmailAddress")
  valid_605370 = validateParameter(valid_605370, JString, required = false,
                                 default = nil)
  if valid_605370 != nil:
    section.add "FromEmailAddress", valid_605370
  var valid_605371 = formData.getOrDefault("TemplateContent")
  valid_605371 = validateParameter(valid_605371, JString, required = false,
                                 default = nil)
  if valid_605371 != nil:
    section.add "TemplateContent", valid_605371
  assert formData != nil,
        "formData argument is necessary due to required `TemplateName` field"
  var valid_605372 = formData.getOrDefault("TemplateName")
  valid_605372 = validateParameter(valid_605372, JString, required = true,
                                 default = nil)
  if valid_605372 != nil:
    section.add "TemplateName", valid_605372
  var valid_605373 = formData.getOrDefault("TemplateSubject")
  valid_605373 = validateParameter(valid_605373, JString, required = false,
                                 default = nil)
  if valid_605373 != nil:
    section.add "TemplateSubject", valid_605373
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605374: Call_PostUpdateCustomVerificationEmailTemplate_605356;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Updates an existing custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605374.validator(path, query, header, formData, body)
  let scheme = call_605374.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605374.url(scheme.get, call_605374.host, call_605374.base,
                         call_605374.route, valid.getOrDefault("path"))
  result = hook(call_605374, url, valid)

proc call*(call_605375: Call_PostUpdateCustomVerificationEmailTemplate_605356;
          TemplateName: string; SuccessRedirectionURL: string = "";
          FailureRedirectionURL: string = ""; FromEmailAddress: string = "";
          Action: string = "UpdateCustomVerificationEmailTemplate";
          TemplateContent: string = ""; TemplateSubject: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## postUpdateCustomVerificationEmailTemplate
  ## <p>Updates an existing custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   SuccessRedirectionURL: string
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   FailureRedirectionURL: string
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   FromEmailAddress: string
  ##                   : The email address that the custom verification email is sent from.
  ##   Action: string (required)
  ##   TemplateContent: string
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template that you want to update.
  ##   TemplateSubject: string
  ##                  : The subject line of the custom verification email.
  ##   Version: string (required)
  var query_605376 = newJObject()
  var formData_605377 = newJObject()
  add(formData_605377, "SuccessRedirectionURL", newJString(SuccessRedirectionURL))
  add(formData_605377, "FailureRedirectionURL", newJString(FailureRedirectionURL))
  add(formData_605377, "FromEmailAddress", newJString(FromEmailAddress))
  add(query_605376, "Action", newJString(Action))
  add(formData_605377, "TemplateContent", newJString(TemplateContent))
  add(formData_605377, "TemplateName", newJString(TemplateName))
  add(formData_605377, "TemplateSubject", newJString(TemplateSubject))
  add(query_605376, "Version", newJString(Version))
  result = call_605375.call(nil, query_605376, nil, formData_605377, nil)

var postUpdateCustomVerificationEmailTemplate* = Call_PostUpdateCustomVerificationEmailTemplate_605356(
    name: "postUpdateCustomVerificationEmailTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateCustomVerificationEmailTemplate",
    validator: validate_PostUpdateCustomVerificationEmailTemplate_605357,
    base: "/", url: url_PostUpdateCustomVerificationEmailTemplate_605358,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateCustomVerificationEmailTemplate_605335 = ref object of OpenApiRestCall_602433
proc url_GetUpdateCustomVerificationEmailTemplate_605337(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateCustomVerificationEmailTemplate_605336(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates an existing custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TemplateSubject: JString
  ##                  : The subject line of the custom verification email.
  ##   FromEmailAddress: JString
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateContent: JString
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   Action: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template that you want to update.
  ##   SuccessRedirectionURL: JString
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   FailureRedirectionURL: JString
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   Version: JString (required)
  section = newJObject()
  var valid_605338 = query.getOrDefault("TemplateSubject")
  valid_605338 = validateParameter(valid_605338, JString, required = false,
                                 default = nil)
  if valid_605338 != nil:
    section.add "TemplateSubject", valid_605338
  var valid_605339 = query.getOrDefault("FromEmailAddress")
  valid_605339 = validateParameter(valid_605339, JString, required = false,
                                 default = nil)
  if valid_605339 != nil:
    section.add "FromEmailAddress", valid_605339
  var valid_605340 = query.getOrDefault("TemplateContent")
  valid_605340 = validateParameter(valid_605340, JString, required = false,
                                 default = nil)
  if valid_605340 != nil:
    section.add "TemplateContent", valid_605340
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605341 = query.getOrDefault("Action")
  valid_605341 = validateParameter(valid_605341, JString, required = true, default = newJString(
      "UpdateCustomVerificationEmailTemplate"))
  if valid_605341 != nil:
    section.add "Action", valid_605341
  var valid_605342 = query.getOrDefault("TemplateName")
  valid_605342 = validateParameter(valid_605342, JString, required = true,
                                 default = nil)
  if valid_605342 != nil:
    section.add "TemplateName", valid_605342
  var valid_605343 = query.getOrDefault("SuccessRedirectionURL")
  valid_605343 = validateParameter(valid_605343, JString, required = false,
                                 default = nil)
  if valid_605343 != nil:
    section.add "SuccessRedirectionURL", valid_605343
  var valid_605344 = query.getOrDefault("FailureRedirectionURL")
  valid_605344 = validateParameter(valid_605344, JString, required = false,
                                 default = nil)
  if valid_605344 != nil:
    section.add "FailureRedirectionURL", valid_605344
  var valid_605345 = query.getOrDefault("Version")
  valid_605345 = validateParameter(valid_605345, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605345 != nil:
    section.add "Version", valid_605345
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605346 = header.getOrDefault("X-Amz-Date")
  valid_605346 = validateParameter(valid_605346, JString, required = false,
                                 default = nil)
  if valid_605346 != nil:
    section.add "X-Amz-Date", valid_605346
  var valid_605347 = header.getOrDefault("X-Amz-Security-Token")
  valid_605347 = validateParameter(valid_605347, JString, required = false,
                                 default = nil)
  if valid_605347 != nil:
    section.add "X-Amz-Security-Token", valid_605347
  var valid_605348 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605348 = validateParameter(valid_605348, JString, required = false,
                                 default = nil)
  if valid_605348 != nil:
    section.add "X-Amz-Content-Sha256", valid_605348
  var valid_605349 = header.getOrDefault("X-Amz-Algorithm")
  valid_605349 = validateParameter(valid_605349, JString, required = false,
                                 default = nil)
  if valid_605349 != nil:
    section.add "X-Amz-Algorithm", valid_605349
  var valid_605350 = header.getOrDefault("X-Amz-Signature")
  valid_605350 = validateParameter(valid_605350, JString, required = false,
                                 default = nil)
  if valid_605350 != nil:
    section.add "X-Amz-Signature", valid_605350
  var valid_605351 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605351 = validateParameter(valid_605351, JString, required = false,
                                 default = nil)
  if valid_605351 != nil:
    section.add "X-Amz-SignedHeaders", valid_605351
  var valid_605352 = header.getOrDefault("X-Amz-Credential")
  valid_605352 = validateParameter(valid_605352, JString, required = false,
                                 default = nil)
  if valid_605352 != nil:
    section.add "X-Amz-Credential", valid_605352
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605353: Call_GetUpdateCustomVerificationEmailTemplate_605335;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Updates an existing custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605353.validator(path, query, header, formData, body)
  let scheme = call_605353.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605353.url(scheme.get, call_605353.host, call_605353.base,
                         call_605353.route, valid.getOrDefault("path"))
  result = hook(call_605353, url, valid)

proc call*(call_605354: Call_GetUpdateCustomVerificationEmailTemplate_605335;
          TemplateName: string; TemplateSubject: string = "";
          FromEmailAddress: string = ""; TemplateContent: string = "";
          Action: string = "UpdateCustomVerificationEmailTemplate";
          SuccessRedirectionURL: string = ""; FailureRedirectionURL: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## getUpdateCustomVerificationEmailTemplate
  ## <p>Updates an existing custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateSubject: string
  ##                  : The subject line of the custom verification email.
  ##   FromEmailAddress: string
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateContent: string
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template that you want to update.
  ##   SuccessRedirectionURL: string
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   FailureRedirectionURL: string
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   Version: string (required)
  var query_605355 = newJObject()
  add(query_605355, "TemplateSubject", newJString(TemplateSubject))
  add(query_605355, "FromEmailAddress", newJString(FromEmailAddress))
  add(query_605355, "TemplateContent", newJString(TemplateContent))
  add(query_605355, "Action", newJString(Action))
  add(query_605355, "TemplateName", newJString(TemplateName))
  add(query_605355, "SuccessRedirectionURL", newJString(SuccessRedirectionURL))
  add(query_605355, "FailureRedirectionURL", newJString(FailureRedirectionURL))
  add(query_605355, "Version", newJString(Version))
  result = call_605354.call(nil, query_605355, nil, nil, nil)

var getUpdateCustomVerificationEmailTemplate* = Call_GetUpdateCustomVerificationEmailTemplate_605335(
    name: "getUpdateCustomVerificationEmailTemplate", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateCustomVerificationEmailTemplate",
    validator: validate_GetUpdateCustomVerificationEmailTemplate_605336,
    base: "/", url: url_GetUpdateCustomVerificationEmailTemplate_605337,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateReceiptRule_605400 = ref object of OpenApiRestCall_602433
proc url_PostUpdateReceiptRule_605402(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateReceiptRule_605401(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates a receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605403 = query.getOrDefault("Action")
  valid_605403 = validateParameter(valid_605403, JString, required = true,
                                 default = newJString("UpdateReceiptRule"))
  if valid_605403 != nil:
    section.add "Action", valid_605403
  var valid_605404 = query.getOrDefault("Version")
  valid_605404 = validateParameter(valid_605404, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605404 != nil:
    section.add "Version", valid_605404
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605405 = header.getOrDefault("X-Amz-Date")
  valid_605405 = validateParameter(valid_605405, JString, required = false,
                                 default = nil)
  if valid_605405 != nil:
    section.add "X-Amz-Date", valid_605405
  var valid_605406 = header.getOrDefault("X-Amz-Security-Token")
  valid_605406 = validateParameter(valid_605406, JString, required = false,
                                 default = nil)
  if valid_605406 != nil:
    section.add "X-Amz-Security-Token", valid_605406
  var valid_605407 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605407 = validateParameter(valid_605407, JString, required = false,
                                 default = nil)
  if valid_605407 != nil:
    section.add "X-Amz-Content-Sha256", valid_605407
  var valid_605408 = header.getOrDefault("X-Amz-Algorithm")
  valid_605408 = validateParameter(valid_605408, JString, required = false,
                                 default = nil)
  if valid_605408 != nil:
    section.add "X-Amz-Algorithm", valid_605408
  var valid_605409 = header.getOrDefault("X-Amz-Signature")
  valid_605409 = validateParameter(valid_605409, JString, required = false,
                                 default = nil)
  if valid_605409 != nil:
    section.add "X-Amz-Signature", valid_605409
  var valid_605410 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605410 = validateParameter(valid_605410, JString, required = false,
                                 default = nil)
  if valid_605410 != nil:
    section.add "X-Amz-SignedHeaders", valid_605410
  var valid_605411 = header.getOrDefault("X-Amz-Credential")
  valid_605411 = validateParameter(valid_605411, JString, required = false,
                                 default = nil)
  if valid_605411 != nil:
    section.add "X-Amz-Credential", valid_605411
  result.add "header", section
  ## parameters in `formData` object:
  ##   Rule.Recipients: JArray
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   Rule.Enabled: JString
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   Rule.Actions: JArray
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   Rule.Name: JString
  ##            : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Rule.ScanEnabled: JString
  ##                   : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   Rule.TlsPolicy: JString
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  section = newJObject()
  var valid_605412 = formData.getOrDefault("Rule.Recipients")
  valid_605412 = validateParameter(valid_605412, JArray, required = false,
                                 default = nil)
  if valid_605412 != nil:
    section.add "Rule.Recipients", valid_605412
  var valid_605413 = formData.getOrDefault("Rule.Enabled")
  valid_605413 = validateParameter(valid_605413, JString, required = false,
                                 default = nil)
  if valid_605413 != nil:
    section.add "Rule.Enabled", valid_605413
  assert formData != nil,
        "formData argument is necessary due to required `RuleSetName` field"
  var valid_605414 = formData.getOrDefault("RuleSetName")
  valid_605414 = validateParameter(valid_605414, JString, required = true,
                                 default = nil)
  if valid_605414 != nil:
    section.add "RuleSetName", valid_605414
  var valid_605415 = formData.getOrDefault("Rule.Actions")
  valid_605415 = validateParameter(valid_605415, JArray, required = false,
                                 default = nil)
  if valid_605415 != nil:
    section.add "Rule.Actions", valid_605415
  var valid_605416 = formData.getOrDefault("Rule.Name")
  valid_605416 = validateParameter(valid_605416, JString, required = false,
                                 default = nil)
  if valid_605416 != nil:
    section.add "Rule.Name", valid_605416
  var valid_605417 = formData.getOrDefault("Rule.ScanEnabled")
  valid_605417 = validateParameter(valid_605417, JString, required = false,
                                 default = nil)
  if valid_605417 != nil:
    section.add "Rule.ScanEnabled", valid_605417
  var valid_605418 = formData.getOrDefault("Rule.TlsPolicy")
  valid_605418 = validateParameter(valid_605418, JString, required = false,
                                 default = nil)
  if valid_605418 != nil:
    section.add "Rule.TlsPolicy", valid_605418
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605419: Call_PostUpdateReceiptRule_605400; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates a receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605419.validator(path, query, header, formData, body)
  let scheme = call_605419.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605419.url(scheme.get, call_605419.host, call_605419.base,
                         call_605419.route, valid.getOrDefault("path"))
  result = hook(call_605419, url, valid)

proc call*(call_605420: Call_PostUpdateReceiptRule_605400; RuleSetName: string;
          RuleRecipients: JsonNode = nil; RuleEnabled: string = "";
          Action: string = "UpdateReceiptRule"; RuleActions: JsonNode = nil;
          RuleName: string = ""; RuleScanEnabled: string = "";
          RuleTlsPolicy: string = ""; Version: string = "2010-12-01"): Recallable =
  ## postUpdateReceiptRule
  ## <p>Updates a receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleRecipients: JArray
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   RuleEnabled: string
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   Action: string (required)
  ##   RuleActions: JArray
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   RuleName: string
  ##           : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   RuleScanEnabled: string
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   RuleTlsPolicy: string
  ##                : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   Version: string (required)
  var query_605421 = newJObject()
  var formData_605422 = newJObject()
  if RuleRecipients != nil:
    formData_605422.add "Rule.Recipients", RuleRecipients
  add(formData_605422, "Rule.Enabled", newJString(RuleEnabled))
  add(formData_605422, "RuleSetName", newJString(RuleSetName))
  add(query_605421, "Action", newJString(Action))
  if RuleActions != nil:
    formData_605422.add "Rule.Actions", RuleActions
  add(formData_605422, "Rule.Name", newJString(RuleName))
  add(formData_605422, "Rule.ScanEnabled", newJString(RuleScanEnabled))
  add(formData_605422, "Rule.TlsPolicy", newJString(RuleTlsPolicy))
  add(query_605421, "Version", newJString(Version))
  result = call_605420.call(nil, query_605421, nil, formData_605422, nil)

var postUpdateReceiptRule* = Call_PostUpdateReceiptRule_605400(
    name: "postUpdateReceiptRule", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=UpdateReceiptRule",
    validator: validate_PostUpdateReceiptRule_605401, base: "/",
    url: url_PostUpdateReceiptRule_605402, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateReceiptRule_605378 = ref object of OpenApiRestCall_602433
proc url_GetUpdateReceiptRule_605380(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateReceiptRule_605379(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates a receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Rule.ScanEnabled: JString
  ##                   : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   Rule.Name: JString
  ##            : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Rule.Enabled: JString
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   Rule.TlsPolicy: JString
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   Action: JString (required)
  ##   Rule.Actions: JArray
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   Rule.Recipients: JArray
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   Version: JString (required)
  section = newJObject()
  var valid_605381 = query.getOrDefault("Rule.ScanEnabled")
  valid_605381 = validateParameter(valid_605381, JString, required = false,
                                 default = nil)
  if valid_605381 != nil:
    section.add "Rule.ScanEnabled", valid_605381
  var valid_605382 = query.getOrDefault("Rule.Name")
  valid_605382 = validateParameter(valid_605382, JString, required = false,
                                 default = nil)
  if valid_605382 != nil:
    section.add "Rule.Name", valid_605382
  var valid_605383 = query.getOrDefault("Rule.Enabled")
  valid_605383 = validateParameter(valid_605383, JString, required = false,
                                 default = nil)
  if valid_605383 != nil:
    section.add "Rule.Enabled", valid_605383
  var valid_605384 = query.getOrDefault("Rule.TlsPolicy")
  valid_605384 = validateParameter(valid_605384, JString, required = false,
                                 default = nil)
  if valid_605384 != nil:
    section.add "Rule.TlsPolicy", valid_605384
  assert query != nil,
        "query argument is necessary due to required `RuleSetName` field"
  var valid_605385 = query.getOrDefault("RuleSetName")
  valid_605385 = validateParameter(valid_605385, JString, required = true,
                                 default = nil)
  if valid_605385 != nil:
    section.add "RuleSetName", valid_605385
  var valid_605386 = query.getOrDefault("Action")
  valid_605386 = validateParameter(valid_605386, JString, required = true,
                                 default = newJString("UpdateReceiptRule"))
  if valid_605386 != nil:
    section.add "Action", valid_605386
  var valid_605387 = query.getOrDefault("Rule.Actions")
  valid_605387 = validateParameter(valid_605387, JArray, required = false,
                                 default = nil)
  if valid_605387 != nil:
    section.add "Rule.Actions", valid_605387
  var valid_605388 = query.getOrDefault("Rule.Recipients")
  valid_605388 = validateParameter(valid_605388, JArray, required = false,
                                 default = nil)
  if valid_605388 != nil:
    section.add "Rule.Recipients", valid_605388
  var valid_605389 = query.getOrDefault("Version")
  valid_605389 = validateParameter(valid_605389, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605389 != nil:
    section.add "Version", valid_605389
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605390 = header.getOrDefault("X-Amz-Date")
  valid_605390 = validateParameter(valid_605390, JString, required = false,
                                 default = nil)
  if valid_605390 != nil:
    section.add "X-Amz-Date", valid_605390
  var valid_605391 = header.getOrDefault("X-Amz-Security-Token")
  valid_605391 = validateParameter(valid_605391, JString, required = false,
                                 default = nil)
  if valid_605391 != nil:
    section.add "X-Amz-Security-Token", valid_605391
  var valid_605392 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605392 = validateParameter(valid_605392, JString, required = false,
                                 default = nil)
  if valid_605392 != nil:
    section.add "X-Amz-Content-Sha256", valid_605392
  var valid_605393 = header.getOrDefault("X-Amz-Algorithm")
  valid_605393 = validateParameter(valid_605393, JString, required = false,
                                 default = nil)
  if valid_605393 != nil:
    section.add "X-Amz-Algorithm", valid_605393
  var valid_605394 = header.getOrDefault("X-Amz-Signature")
  valid_605394 = validateParameter(valid_605394, JString, required = false,
                                 default = nil)
  if valid_605394 != nil:
    section.add "X-Amz-Signature", valid_605394
  var valid_605395 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605395 = validateParameter(valid_605395, JString, required = false,
                                 default = nil)
  if valid_605395 != nil:
    section.add "X-Amz-SignedHeaders", valid_605395
  var valid_605396 = header.getOrDefault("X-Amz-Credential")
  valid_605396 = validateParameter(valid_605396, JString, required = false,
                                 default = nil)
  if valid_605396 != nil:
    section.add "X-Amz-Credential", valid_605396
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605397: Call_GetUpdateReceiptRule_605378; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates a receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605397.validator(path, query, header, formData, body)
  let scheme = call_605397.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605397.url(scheme.get, call_605397.host, call_605397.base,
                         call_605397.route, valid.getOrDefault("path"))
  result = hook(call_605397, url, valid)

proc call*(call_605398: Call_GetUpdateReceiptRule_605378; RuleSetName: string;
          RuleScanEnabled: string = ""; RuleName: string = ""; RuleEnabled: string = "";
          RuleTlsPolicy: string = ""; Action: string = "UpdateReceiptRule";
          RuleActions: JsonNode = nil; RuleRecipients: JsonNode = nil;
          Version: string = "2010-12-01"): Recallable =
  ## getUpdateReceiptRule
  ## <p>Updates a receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleScanEnabled: string
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   RuleName: string
  ##           : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   RuleEnabled: string
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   RuleTlsPolicy: string
  ##                : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   Action: string (required)
  ##   RuleActions: JArray
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   RuleRecipients: JArray
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   Version: string (required)
  var query_605399 = newJObject()
  add(query_605399, "Rule.ScanEnabled", newJString(RuleScanEnabled))
  add(query_605399, "Rule.Name", newJString(RuleName))
  add(query_605399, "Rule.Enabled", newJString(RuleEnabled))
  add(query_605399, "Rule.TlsPolicy", newJString(RuleTlsPolicy))
  add(query_605399, "RuleSetName", newJString(RuleSetName))
  add(query_605399, "Action", newJString(Action))
  if RuleActions != nil:
    query_605399.add "Rule.Actions", RuleActions
  if RuleRecipients != nil:
    query_605399.add "Rule.Recipients", RuleRecipients
  add(query_605399, "Version", newJString(Version))
  result = call_605398.call(nil, query_605399, nil, nil, nil)

var getUpdateReceiptRule* = Call_GetUpdateReceiptRule_605378(
    name: "getUpdateReceiptRule", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=UpdateReceiptRule",
    validator: validate_GetUpdateReceiptRule_605379, base: "/",
    url: url_GetUpdateReceiptRule_605380, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateTemplate_605442 = ref object of OpenApiRestCall_602433
proc url_PostUpdateTemplate_605444(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateTemplate_605443(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605445 = query.getOrDefault("Action")
  valid_605445 = validateParameter(valid_605445, JString, required = true,
                                 default = newJString("UpdateTemplate"))
  if valid_605445 != nil:
    section.add "Action", valid_605445
  var valid_605446 = query.getOrDefault("Version")
  valid_605446 = validateParameter(valid_605446, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605446 != nil:
    section.add "Version", valid_605446
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605447 = header.getOrDefault("X-Amz-Date")
  valid_605447 = validateParameter(valid_605447, JString, required = false,
                                 default = nil)
  if valid_605447 != nil:
    section.add "X-Amz-Date", valid_605447
  var valid_605448 = header.getOrDefault("X-Amz-Security-Token")
  valid_605448 = validateParameter(valid_605448, JString, required = false,
                                 default = nil)
  if valid_605448 != nil:
    section.add "X-Amz-Security-Token", valid_605448
  var valid_605449 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605449 = validateParameter(valid_605449, JString, required = false,
                                 default = nil)
  if valid_605449 != nil:
    section.add "X-Amz-Content-Sha256", valid_605449
  var valid_605450 = header.getOrDefault("X-Amz-Algorithm")
  valid_605450 = validateParameter(valid_605450, JString, required = false,
                                 default = nil)
  if valid_605450 != nil:
    section.add "X-Amz-Algorithm", valid_605450
  var valid_605451 = header.getOrDefault("X-Amz-Signature")
  valid_605451 = validateParameter(valid_605451, JString, required = false,
                                 default = nil)
  if valid_605451 != nil:
    section.add "X-Amz-Signature", valid_605451
  var valid_605452 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605452 = validateParameter(valid_605452, JString, required = false,
                                 default = nil)
  if valid_605452 != nil:
    section.add "X-Amz-SignedHeaders", valid_605452
  var valid_605453 = header.getOrDefault("X-Amz-Credential")
  valid_605453 = validateParameter(valid_605453, JString, required = false,
                                 default = nil)
  if valid_605453 != nil:
    section.add "X-Amz-Credential", valid_605453
  result.add "header", section
  ## parameters in `formData` object:
  ##   Template.HtmlPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   Template.TemplateName: JString
  ##                        : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   Template.TextPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Template.SubjectPart: JString
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  section = newJObject()
  var valid_605454 = formData.getOrDefault("Template.HtmlPart")
  valid_605454 = validateParameter(valid_605454, JString, required = false,
                                 default = nil)
  if valid_605454 != nil:
    section.add "Template.HtmlPart", valid_605454
  var valid_605455 = formData.getOrDefault("Template.TemplateName")
  valid_605455 = validateParameter(valid_605455, JString, required = false,
                                 default = nil)
  if valid_605455 != nil:
    section.add "Template.TemplateName", valid_605455
  var valid_605456 = formData.getOrDefault("Template.TextPart")
  valid_605456 = validateParameter(valid_605456, JString, required = false,
                                 default = nil)
  if valid_605456 != nil:
    section.add "Template.TextPart", valid_605456
  var valid_605457 = formData.getOrDefault("Template.SubjectPart")
  valid_605457 = validateParameter(valid_605457, JString, required = false,
                                 default = nil)
  if valid_605457 != nil:
    section.add "Template.SubjectPart", valid_605457
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605458: Call_PostUpdateTemplate_605442; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605458.validator(path, query, header, formData, body)
  let scheme = call_605458.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605458.url(scheme.get, call_605458.host, call_605458.base,
                         call_605458.route, valid.getOrDefault("path"))
  result = hook(call_605458, url, valid)

proc call*(call_605459: Call_PostUpdateTemplate_605442;
          Action: string = "UpdateTemplate"; TemplateHtmlPart: string = "";
          TemplateTemplateName: string = ""; TemplateTextPart: string = "";
          Version: string = "2010-12-01"; TemplateSubjectPart: string = ""): Recallable =
  ## postUpdateTemplate
  ## <p>Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateHtmlPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   TemplateTemplateName: string
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   TemplateTextPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Version: string (required)
  ##   TemplateSubjectPart: string
  ##                      : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  var query_605460 = newJObject()
  var formData_605461 = newJObject()
  add(query_605460, "Action", newJString(Action))
  add(formData_605461, "Template.HtmlPart", newJString(TemplateHtmlPart))
  add(formData_605461, "Template.TemplateName", newJString(TemplateTemplateName))
  add(formData_605461, "Template.TextPart", newJString(TemplateTextPart))
  add(query_605460, "Version", newJString(Version))
  add(formData_605461, "Template.SubjectPart", newJString(TemplateSubjectPart))
  result = call_605459.call(nil, query_605460, nil, formData_605461, nil)

var postUpdateTemplate* = Call_PostUpdateTemplate_605442(
    name: "postUpdateTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=UpdateTemplate",
    validator: validate_PostUpdateTemplate_605443, base: "/",
    url: url_PostUpdateTemplate_605444, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateTemplate_605423 = ref object of OpenApiRestCall_602433
proc url_GetUpdateTemplate_605425(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateTemplate_605424(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Template.TemplateName: JString
  ##                        : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   Action: JString (required)
  ##   Template.SubjectPart: JString
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  ##   Template.HtmlPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   Template.TextPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Version: JString (required)
  section = newJObject()
  var valid_605426 = query.getOrDefault("Template.TemplateName")
  valid_605426 = validateParameter(valid_605426, JString, required = false,
                                 default = nil)
  if valid_605426 != nil:
    section.add "Template.TemplateName", valid_605426
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605427 = query.getOrDefault("Action")
  valid_605427 = validateParameter(valid_605427, JString, required = true,
                                 default = newJString("UpdateTemplate"))
  if valid_605427 != nil:
    section.add "Action", valid_605427
  var valid_605428 = query.getOrDefault("Template.SubjectPart")
  valid_605428 = validateParameter(valid_605428, JString, required = false,
                                 default = nil)
  if valid_605428 != nil:
    section.add "Template.SubjectPart", valid_605428
  var valid_605429 = query.getOrDefault("Template.HtmlPart")
  valid_605429 = validateParameter(valid_605429, JString, required = false,
                                 default = nil)
  if valid_605429 != nil:
    section.add "Template.HtmlPart", valid_605429
  var valid_605430 = query.getOrDefault("Template.TextPart")
  valid_605430 = validateParameter(valid_605430, JString, required = false,
                                 default = nil)
  if valid_605430 != nil:
    section.add "Template.TextPart", valid_605430
  var valid_605431 = query.getOrDefault("Version")
  valid_605431 = validateParameter(valid_605431, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605431 != nil:
    section.add "Version", valid_605431
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605432 = header.getOrDefault("X-Amz-Date")
  valid_605432 = validateParameter(valid_605432, JString, required = false,
                                 default = nil)
  if valid_605432 != nil:
    section.add "X-Amz-Date", valid_605432
  var valid_605433 = header.getOrDefault("X-Amz-Security-Token")
  valid_605433 = validateParameter(valid_605433, JString, required = false,
                                 default = nil)
  if valid_605433 != nil:
    section.add "X-Amz-Security-Token", valid_605433
  var valid_605434 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605434 = validateParameter(valid_605434, JString, required = false,
                                 default = nil)
  if valid_605434 != nil:
    section.add "X-Amz-Content-Sha256", valid_605434
  var valid_605435 = header.getOrDefault("X-Amz-Algorithm")
  valid_605435 = validateParameter(valid_605435, JString, required = false,
                                 default = nil)
  if valid_605435 != nil:
    section.add "X-Amz-Algorithm", valid_605435
  var valid_605436 = header.getOrDefault("X-Amz-Signature")
  valid_605436 = validateParameter(valid_605436, JString, required = false,
                                 default = nil)
  if valid_605436 != nil:
    section.add "X-Amz-Signature", valid_605436
  var valid_605437 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605437 = validateParameter(valid_605437, JString, required = false,
                                 default = nil)
  if valid_605437 != nil:
    section.add "X-Amz-SignedHeaders", valid_605437
  var valid_605438 = header.getOrDefault("X-Amz-Credential")
  valid_605438 = validateParameter(valid_605438, JString, required = false,
                                 default = nil)
  if valid_605438 != nil:
    section.add "X-Amz-Credential", valid_605438
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605439: Call_GetUpdateTemplate_605423; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605439.validator(path, query, header, formData, body)
  let scheme = call_605439.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605439.url(scheme.get, call_605439.host, call_605439.base,
                         call_605439.route, valid.getOrDefault("path"))
  result = hook(call_605439, url, valid)

proc call*(call_605440: Call_GetUpdateTemplate_605423;
          TemplateTemplateName: string = ""; Action: string = "UpdateTemplate";
          TemplateSubjectPart: string = ""; TemplateHtmlPart: string = "";
          TemplateTextPart: string = ""; Version: string = "2010-12-01"): Recallable =
  ## getUpdateTemplate
  ## <p>Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateTemplateName: string
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   Action: string (required)
  ##   TemplateSubjectPart: string
  ##                      : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  ##   TemplateHtmlPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   TemplateTextPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Version: string (required)
  var query_605441 = newJObject()
  add(query_605441, "Template.TemplateName", newJString(TemplateTemplateName))
  add(query_605441, "Action", newJString(Action))
  add(query_605441, "Template.SubjectPart", newJString(TemplateSubjectPart))
  add(query_605441, "Template.HtmlPart", newJString(TemplateHtmlPart))
  add(query_605441, "Template.TextPart", newJString(TemplateTextPart))
  add(query_605441, "Version", newJString(Version))
  result = call_605440.call(nil, query_605441, nil, nil, nil)

var getUpdateTemplate* = Call_GetUpdateTemplate_605423(name: "getUpdateTemplate",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=UpdateTemplate", validator: validate_GetUpdateTemplate_605424,
    base: "/", url: url_GetUpdateTemplate_605425,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostVerifyDomainDkim_605478 = ref object of OpenApiRestCall_602433
proc url_PostVerifyDomainDkim_605480(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostVerifyDomainDkim_605479(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a set of DKIM tokens for a domain identity.</p> <important> <p>When you execute the <code>VerifyDomainDkim</code> operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the <code>VerifyDomainIdentity</code> operation. However, you can't send email from the domain until you either successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">verify it</a> or you successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">set up DKIM for it</a>.</p> </important> <p>You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM.</p> <p>To create the CNAME records for DKIM authentication, use the following values:</p> <ul> <li> <p> <b>Name</b>: <i>token</i>._domainkey.<i>example.com</i> </p> </li> <li> <p> <b>Type</b>: CNAME</p> </li> <li> <p> <b>Value</b>: <i>token</i>.dkim.amazonses.com</p> </li> </ul> <p>In the preceding example, replace <i>token</i> with one of the tokens that are generated when you execute this operation. Replace <i>example.com</i> with your domain. Repeat this process for each token that's generated by this operation.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605481 = query.getOrDefault("Action")
  valid_605481 = validateParameter(valid_605481, JString, required = true,
                                 default = newJString("VerifyDomainDkim"))
  if valid_605481 != nil:
    section.add "Action", valid_605481
  var valid_605482 = query.getOrDefault("Version")
  valid_605482 = validateParameter(valid_605482, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605482 != nil:
    section.add "Version", valid_605482
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605483 = header.getOrDefault("X-Amz-Date")
  valid_605483 = validateParameter(valid_605483, JString, required = false,
                                 default = nil)
  if valid_605483 != nil:
    section.add "X-Amz-Date", valid_605483
  var valid_605484 = header.getOrDefault("X-Amz-Security-Token")
  valid_605484 = validateParameter(valid_605484, JString, required = false,
                                 default = nil)
  if valid_605484 != nil:
    section.add "X-Amz-Security-Token", valid_605484
  var valid_605485 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605485 = validateParameter(valid_605485, JString, required = false,
                                 default = nil)
  if valid_605485 != nil:
    section.add "X-Amz-Content-Sha256", valid_605485
  var valid_605486 = header.getOrDefault("X-Amz-Algorithm")
  valid_605486 = validateParameter(valid_605486, JString, required = false,
                                 default = nil)
  if valid_605486 != nil:
    section.add "X-Amz-Algorithm", valid_605486
  var valid_605487 = header.getOrDefault("X-Amz-Signature")
  valid_605487 = validateParameter(valid_605487, JString, required = false,
                                 default = nil)
  if valid_605487 != nil:
    section.add "X-Amz-Signature", valid_605487
  var valid_605488 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605488 = validateParameter(valid_605488, JString, required = false,
                                 default = nil)
  if valid_605488 != nil:
    section.add "X-Amz-SignedHeaders", valid_605488
  var valid_605489 = header.getOrDefault("X-Amz-Credential")
  valid_605489 = validateParameter(valid_605489, JString, required = false,
                                 default = nil)
  if valid_605489 != nil:
    section.add "X-Amz-Credential", valid_605489
  result.add "header", section
  ## parameters in `formData` object:
  ##   Domain: JString (required)
  ##         : The name of the domain to be verified for Easy DKIM signing.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Domain` field"
  var valid_605490 = formData.getOrDefault("Domain")
  valid_605490 = validateParameter(valid_605490, JString, required = true,
                                 default = nil)
  if valid_605490 != nil:
    section.add "Domain", valid_605490
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605491: Call_PostVerifyDomainDkim_605478; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a set of DKIM tokens for a domain identity.</p> <important> <p>When you execute the <code>VerifyDomainDkim</code> operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the <code>VerifyDomainIdentity</code> operation. However, you can't send email from the domain until you either successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">verify it</a> or you successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">set up DKIM for it</a>.</p> </important> <p>You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM.</p> <p>To create the CNAME records for DKIM authentication, use the following values:</p> <ul> <li> <p> <b>Name</b>: <i>token</i>._domainkey.<i>example.com</i> </p> </li> <li> <p> <b>Type</b>: CNAME</p> </li> <li> <p> <b>Value</b>: <i>token</i>.dkim.amazonses.com</p> </li> </ul> <p>In the preceding example, replace <i>token</i> with one of the tokens that are generated when you execute this operation. Replace <i>example.com</i> with your domain. Repeat this process for each token that's generated by this operation.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605491.validator(path, query, header, formData, body)
  let scheme = call_605491.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605491.url(scheme.get, call_605491.host, call_605491.base,
                         call_605491.route, valid.getOrDefault("path"))
  result = hook(call_605491, url, valid)

proc call*(call_605492: Call_PostVerifyDomainDkim_605478; Domain: string;
          Action: string = "VerifyDomainDkim"; Version: string = "2010-12-01"): Recallable =
  ## postVerifyDomainDkim
  ## <p>Returns a set of DKIM tokens for a domain identity.</p> <important> <p>When you execute the <code>VerifyDomainDkim</code> operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the <code>VerifyDomainIdentity</code> operation. However, you can't send email from the domain until you either successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">verify it</a> or you successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">set up DKIM for it</a>.</p> </important> <p>You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM.</p> <p>To create the CNAME records for DKIM authentication, use the following values:</p> <ul> <li> <p> <b>Name</b>: <i>token</i>._domainkey.<i>example.com</i> </p> </li> <li> <p> <b>Type</b>: CNAME</p> </li> <li> <p> <b>Value</b>: <i>token</i>.dkim.amazonses.com</p> </li> </ul> <p>In the preceding example, replace <i>token</i> with one of the tokens that are generated when you execute this operation. Replace <i>example.com</i> with your domain. Repeat this process for each token that's generated by this operation.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Domain: string (required)
  ##         : The name of the domain to be verified for Easy DKIM signing.
  ##   Version: string (required)
  var query_605493 = newJObject()
  var formData_605494 = newJObject()
  add(query_605493, "Action", newJString(Action))
  add(formData_605494, "Domain", newJString(Domain))
  add(query_605493, "Version", newJString(Version))
  result = call_605492.call(nil, query_605493, nil, formData_605494, nil)

var postVerifyDomainDkim* = Call_PostVerifyDomainDkim_605478(
    name: "postVerifyDomainDkim", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=VerifyDomainDkim",
    validator: validate_PostVerifyDomainDkim_605479, base: "/",
    url: url_PostVerifyDomainDkim_605480, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetVerifyDomainDkim_605462 = ref object of OpenApiRestCall_602433
proc url_GetVerifyDomainDkim_605464(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetVerifyDomainDkim_605463(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Returns a set of DKIM tokens for a domain identity.</p> <important> <p>When you execute the <code>VerifyDomainDkim</code> operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the <code>VerifyDomainIdentity</code> operation. However, you can't send email from the domain until you either successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">verify it</a> or you successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">set up DKIM for it</a>.</p> </important> <p>You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM.</p> <p>To create the CNAME records for DKIM authentication, use the following values:</p> <ul> <li> <p> <b>Name</b>: <i>token</i>._domainkey.<i>example.com</i> </p> </li> <li> <p> <b>Type</b>: CNAME</p> </li> <li> <p> <b>Value</b>: <i>token</i>.dkim.amazonses.com</p> </li> </ul> <p>In the preceding example, replace <i>token</i> with one of the tokens that are generated when you execute this operation. Replace <i>example.com</i> with your domain. Repeat this process for each token that's generated by this operation.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Domain: JString (required)
  ##         : The name of the domain to be verified for Easy DKIM signing.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605465 = query.getOrDefault("Action")
  valid_605465 = validateParameter(valid_605465, JString, required = true,
                                 default = newJString("VerifyDomainDkim"))
  if valid_605465 != nil:
    section.add "Action", valid_605465
  var valid_605466 = query.getOrDefault("Domain")
  valid_605466 = validateParameter(valid_605466, JString, required = true,
                                 default = nil)
  if valid_605466 != nil:
    section.add "Domain", valid_605466
  var valid_605467 = query.getOrDefault("Version")
  valid_605467 = validateParameter(valid_605467, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605467 != nil:
    section.add "Version", valid_605467
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605468 = header.getOrDefault("X-Amz-Date")
  valid_605468 = validateParameter(valid_605468, JString, required = false,
                                 default = nil)
  if valid_605468 != nil:
    section.add "X-Amz-Date", valid_605468
  var valid_605469 = header.getOrDefault("X-Amz-Security-Token")
  valid_605469 = validateParameter(valid_605469, JString, required = false,
                                 default = nil)
  if valid_605469 != nil:
    section.add "X-Amz-Security-Token", valid_605469
  var valid_605470 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605470 = validateParameter(valid_605470, JString, required = false,
                                 default = nil)
  if valid_605470 != nil:
    section.add "X-Amz-Content-Sha256", valid_605470
  var valid_605471 = header.getOrDefault("X-Amz-Algorithm")
  valid_605471 = validateParameter(valid_605471, JString, required = false,
                                 default = nil)
  if valid_605471 != nil:
    section.add "X-Amz-Algorithm", valid_605471
  var valid_605472 = header.getOrDefault("X-Amz-Signature")
  valid_605472 = validateParameter(valid_605472, JString, required = false,
                                 default = nil)
  if valid_605472 != nil:
    section.add "X-Amz-Signature", valid_605472
  var valid_605473 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605473 = validateParameter(valid_605473, JString, required = false,
                                 default = nil)
  if valid_605473 != nil:
    section.add "X-Amz-SignedHeaders", valid_605473
  var valid_605474 = header.getOrDefault("X-Amz-Credential")
  valid_605474 = validateParameter(valid_605474, JString, required = false,
                                 default = nil)
  if valid_605474 != nil:
    section.add "X-Amz-Credential", valid_605474
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605475: Call_GetVerifyDomainDkim_605462; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a set of DKIM tokens for a domain identity.</p> <important> <p>When you execute the <code>VerifyDomainDkim</code> operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the <code>VerifyDomainIdentity</code> operation. However, you can't send email from the domain until you either successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">verify it</a> or you successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">set up DKIM for it</a>.</p> </important> <p>You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM.</p> <p>To create the CNAME records for DKIM authentication, use the following values:</p> <ul> <li> <p> <b>Name</b>: <i>token</i>._domainkey.<i>example.com</i> </p> </li> <li> <p> <b>Type</b>: CNAME</p> </li> <li> <p> <b>Value</b>: <i>token</i>.dkim.amazonses.com</p> </li> </ul> <p>In the preceding example, replace <i>token</i> with one of the tokens that are generated when you execute this operation. Replace <i>example.com</i> with your domain. Repeat this process for each token that's generated by this operation.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605475.validator(path, query, header, formData, body)
  let scheme = call_605475.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605475.url(scheme.get, call_605475.host, call_605475.base,
                         call_605475.route, valid.getOrDefault("path"))
  result = hook(call_605475, url, valid)

proc call*(call_605476: Call_GetVerifyDomainDkim_605462; Domain: string;
          Action: string = "VerifyDomainDkim"; Version: string = "2010-12-01"): Recallable =
  ## getVerifyDomainDkim
  ## <p>Returns a set of DKIM tokens for a domain identity.</p> <important> <p>When you execute the <code>VerifyDomainDkim</code> operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the <code>VerifyDomainIdentity</code> operation. However, you can't send email from the domain until you either successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">verify it</a> or you successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">set up DKIM for it</a>.</p> </important> <p>You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM.</p> <p>To create the CNAME records for DKIM authentication, use the following values:</p> <ul> <li> <p> <b>Name</b>: <i>token</i>._domainkey.<i>example.com</i> </p> </li> <li> <p> <b>Type</b>: CNAME</p> </li> <li> <p> <b>Value</b>: <i>token</i>.dkim.amazonses.com</p> </li> </ul> <p>In the preceding example, replace <i>token</i> with one of the tokens that are generated when you execute this operation. Replace <i>example.com</i> with your domain. Repeat this process for each token that's generated by this operation.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Domain: string (required)
  ##         : The name of the domain to be verified for Easy DKIM signing.
  ##   Version: string (required)
  var query_605477 = newJObject()
  add(query_605477, "Action", newJString(Action))
  add(query_605477, "Domain", newJString(Domain))
  add(query_605477, "Version", newJString(Version))
  result = call_605476.call(nil, query_605477, nil, nil, nil)

var getVerifyDomainDkim* = Call_GetVerifyDomainDkim_605462(
    name: "getVerifyDomainDkim", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=VerifyDomainDkim",
    validator: validate_GetVerifyDomainDkim_605463, base: "/",
    url: url_GetVerifyDomainDkim_605464, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostVerifyDomainIdentity_605511 = ref object of OpenApiRestCall_602433
proc url_PostVerifyDomainIdentity_605513(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostVerifyDomainIdentity_605512(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds a domain to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. For more information about verifying domains, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605514 = query.getOrDefault("Action")
  valid_605514 = validateParameter(valid_605514, JString, required = true,
                                 default = newJString("VerifyDomainIdentity"))
  if valid_605514 != nil:
    section.add "Action", valid_605514
  var valid_605515 = query.getOrDefault("Version")
  valid_605515 = validateParameter(valid_605515, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605515 != nil:
    section.add "Version", valid_605515
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605516 = header.getOrDefault("X-Amz-Date")
  valid_605516 = validateParameter(valid_605516, JString, required = false,
                                 default = nil)
  if valid_605516 != nil:
    section.add "X-Amz-Date", valid_605516
  var valid_605517 = header.getOrDefault("X-Amz-Security-Token")
  valid_605517 = validateParameter(valid_605517, JString, required = false,
                                 default = nil)
  if valid_605517 != nil:
    section.add "X-Amz-Security-Token", valid_605517
  var valid_605518 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605518 = validateParameter(valid_605518, JString, required = false,
                                 default = nil)
  if valid_605518 != nil:
    section.add "X-Amz-Content-Sha256", valid_605518
  var valid_605519 = header.getOrDefault("X-Amz-Algorithm")
  valid_605519 = validateParameter(valid_605519, JString, required = false,
                                 default = nil)
  if valid_605519 != nil:
    section.add "X-Amz-Algorithm", valid_605519
  var valid_605520 = header.getOrDefault("X-Amz-Signature")
  valid_605520 = validateParameter(valid_605520, JString, required = false,
                                 default = nil)
  if valid_605520 != nil:
    section.add "X-Amz-Signature", valid_605520
  var valid_605521 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605521 = validateParameter(valid_605521, JString, required = false,
                                 default = nil)
  if valid_605521 != nil:
    section.add "X-Amz-SignedHeaders", valid_605521
  var valid_605522 = header.getOrDefault("X-Amz-Credential")
  valid_605522 = validateParameter(valid_605522, JString, required = false,
                                 default = nil)
  if valid_605522 != nil:
    section.add "X-Amz-Credential", valid_605522
  result.add "header", section
  ## parameters in `formData` object:
  ##   Domain: JString (required)
  ##         : The domain to be verified.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Domain` field"
  var valid_605523 = formData.getOrDefault("Domain")
  valid_605523 = validateParameter(valid_605523, JString, required = true,
                                 default = nil)
  if valid_605523 != nil:
    section.add "Domain", valid_605523
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605524: Call_PostVerifyDomainIdentity_605511; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds a domain to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. For more information about verifying domains, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605524.validator(path, query, header, formData, body)
  let scheme = call_605524.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605524.url(scheme.get, call_605524.host, call_605524.base,
                         call_605524.route, valid.getOrDefault("path"))
  result = hook(call_605524, url, valid)

proc call*(call_605525: Call_PostVerifyDomainIdentity_605511; Domain: string;
          Action: string = "VerifyDomainIdentity"; Version: string = "2010-12-01"): Recallable =
  ## postVerifyDomainIdentity
  ## <p>Adds a domain to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. For more information about verifying domains, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Domain: string (required)
  ##         : The domain to be verified.
  ##   Version: string (required)
  var query_605526 = newJObject()
  var formData_605527 = newJObject()
  add(query_605526, "Action", newJString(Action))
  add(formData_605527, "Domain", newJString(Domain))
  add(query_605526, "Version", newJString(Version))
  result = call_605525.call(nil, query_605526, nil, formData_605527, nil)

var postVerifyDomainIdentity* = Call_PostVerifyDomainIdentity_605511(
    name: "postVerifyDomainIdentity", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=VerifyDomainIdentity",
    validator: validate_PostVerifyDomainIdentity_605512, base: "/",
    url: url_PostVerifyDomainIdentity_605513, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetVerifyDomainIdentity_605495 = ref object of OpenApiRestCall_602433
proc url_GetVerifyDomainIdentity_605497(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetVerifyDomainIdentity_605496(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds a domain to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. For more information about verifying domains, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Domain: JString (required)
  ##         : The domain to be verified.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605498 = query.getOrDefault("Action")
  valid_605498 = validateParameter(valid_605498, JString, required = true,
                                 default = newJString("VerifyDomainIdentity"))
  if valid_605498 != nil:
    section.add "Action", valid_605498
  var valid_605499 = query.getOrDefault("Domain")
  valid_605499 = validateParameter(valid_605499, JString, required = true,
                                 default = nil)
  if valid_605499 != nil:
    section.add "Domain", valid_605499
  var valid_605500 = query.getOrDefault("Version")
  valid_605500 = validateParameter(valid_605500, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605500 != nil:
    section.add "Version", valid_605500
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605501 = header.getOrDefault("X-Amz-Date")
  valid_605501 = validateParameter(valid_605501, JString, required = false,
                                 default = nil)
  if valid_605501 != nil:
    section.add "X-Amz-Date", valid_605501
  var valid_605502 = header.getOrDefault("X-Amz-Security-Token")
  valid_605502 = validateParameter(valid_605502, JString, required = false,
                                 default = nil)
  if valid_605502 != nil:
    section.add "X-Amz-Security-Token", valid_605502
  var valid_605503 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605503 = validateParameter(valid_605503, JString, required = false,
                                 default = nil)
  if valid_605503 != nil:
    section.add "X-Amz-Content-Sha256", valid_605503
  var valid_605504 = header.getOrDefault("X-Amz-Algorithm")
  valid_605504 = validateParameter(valid_605504, JString, required = false,
                                 default = nil)
  if valid_605504 != nil:
    section.add "X-Amz-Algorithm", valid_605504
  var valid_605505 = header.getOrDefault("X-Amz-Signature")
  valid_605505 = validateParameter(valid_605505, JString, required = false,
                                 default = nil)
  if valid_605505 != nil:
    section.add "X-Amz-Signature", valid_605505
  var valid_605506 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605506 = validateParameter(valid_605506, JString, required = false,
                                 default = nil)
  if valid_605506 != nil:
    section.add "X-Amz-SignedHeaders", valid_605506
  var valid_605507 = header.getOrDefault("X-Amz-Credential")
  valid_605507 = validateParameter(valid_605507, JString, required = false,
                                 default = nil)
  if valid_605507 != nil:
    section.add "X-Amz-Credential", valid_605507
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605508: Call_GetVerifyDomainIdentity_605495; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds a domain to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. For more information about verifying domains, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605508.validator(path, query, header, formData, body)
  let scheme = call_605508.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605508.url(scheme.get, call_605508.host, call_605508.base,
                         call_605508.route, valid.getOrDefault("path"))
  result = hook(call_605508, url, valid)

proc call*(call_605509: Call_GetVerifyDomainIdentity_605495; Domain: string;
          Action: string = "VerifyDomainIdentity"; Version: string = "2010-12-01"): Recallable =
  ## getVerifyDomainIdentity
  ## <p>Adds a domain to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. For more information about verifying domains, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Domain: string (required)
  ##         : The domain to be verified.
  ##   Version: string (required)
  var query_605510 = newJObject()
  add(query_605510, "Action", newJString(Action))
  add(query_605510, "Domain", newJString(Domain))
  add(query_605510, "Version", newJString(Version))
  result = call_605509.call(nil, query_605510, nil, nil, nil)

var getVerifyDomainIdentity* = Call_GetVerifyDomainIdentity_605495(
    name: "getVerifyDomainIdentity", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=VerifyDomainIdentity",
    validator: validate_GetVerifyDomainIdentity_605496, base: "/",
    url: url_GetVerifyDomainIdentity_605497, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostVerifyEmailAddress_605544 = ref object of OpenApiRestCall_602433
proc url_PostVerifyEmailAddress_605546(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostVerifyEmailAddress_605545(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deprecated. Use the <code>VerifyEmailIdentity</code> operation to verify a new email address.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605547 = query.getOrDefault("Action")
  valid_605547 = validateParameter(valid_605547, JString, required = true,
                                 default = newJString("VerifyEmailAddress"))
  if valid_605547 != nil:
    section.add "Action", valid_605547
  var valid_605548 = query.getOrDefault("Version")
  valid_605548 = validateParameter(valid_605548, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605548 != nil:
    section.add "Version", valid_605548
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605549 = header.getOrDefault("X-Amz-Date")
  valid_605549 = validateParameter(valid_605549, JString, required = false,
                                 default = nil)
  if valid_605549 != nil:
    section.add "X-Amz-Date", valid_605549
  var valid_605550 = header.getOrDefault("X-Amz-Security-Token")
  valid_605550 = validateParameter(valid_605550, JString, required = false,
                                 default = nil)
  if valid_605550 != nil:
    section.add "X-Amz-Security-Token", valid_605550
  var valid_605551 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605551 = validateParameter(valid_605551, JString, required = false,
                                 default = nil)
  if valid_605551 != nil:
    section.add "X-Amz-Content-Sha256", valid_605551
  var valid_605552 = header.getOrDefault("X-Amz-Algorithm")
  valid_605552 = validateParameter(valid_605552, JString, required = false,
                                 default = nil)
  if valid_605552 != nil:
    section.add "X-Amz-Algorithm", valid_605552
  var valid_605553 = header.getOrDefault("X-Amz-Signature")
  valid_605553 = validateParameter(valid_605553, JString, required = false,
                                 default = nil)
  if valid_605553 != nil:
    section.add "X-Amz-Signature", valid_605553
  var valid_605554 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605554 = validateParameter(valid_605554, JString, required = false,
                                 default = nil)
  if valid_605554 != nil:
    section.add "X-Amz-SignedHeaders", valid_605554
  var valid_605555 = header.getOrDefault("X-Amz-Credential")
  valid_605555 = validateParameter(valid_605555, JString, required = false,
                                 default = nil)
  if valid_605555 != nil:
    section.add "X-Amz-Credential", valid_605555
  result.add "header", section
  ## parameters in `formData` object:
  ##   EmailAddress: JString (required)
  ##               : The email address to be verified.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `EmailAddress` field"
  var valid_605556 = formData.getOrDefault("EmailAddress")
  valid_605556 = validateParameter(valid_605556, JString, required = true,
                                 default = nil)
  if valid_605556 != nil:
    section.add "EmailAddress", valid_605556
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605557: Call_PostVerifyEmailAddress_605544; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deprecated. Use the <code>VerifyEmailIdentity</code> operation to verify a new email address.
  ## 
  let valid = call_605557.validator(path, query, header, formData, body)
  let scheme = call_605557.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605557.url(scheme.get, call_605557.host, call_605557.base,
                         call_605557.route, valid.getOrDefault("path"))
  result = hook(call_605557, url, valid)

proc call*(call_605558: Call_PostVerifyEmailAddress_605544; EmailAddress: string;
          Action: string = "VerifyEmailAddress"; Version: string = "2010-12-01"): Recallable =
  ## postVerifyEmailAddress
  ## Deprecated. Use the <code>VerifyEmailIdentity</code> operation to verify a new email address.
  ##   EmailAddress: string (required)
  ##               : The email address to be verified.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605559 = newJObject()
  var formData_605560 = newJObject()
  add(formData_605560, "EmailAddress", newJString(EmailAddress))
  add(query_605559, "Action", newJString(Action))
  add(query_605559, "Version", newJString(Version))
  result = call_605558.call(nil, query_605559, nil, formData_605560, nil)

var postVerifyEmailAddress* = Call_PostVerifyEmailAddress_605544(
    name: "postVerifyEmailAddress", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=VerifyEmailAddress",
    validator: validate_PostVerifyEmailAddress_605545, base: "/",
    url: url_PostVerifyEmailAddress_605546, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetVerifyEmailAddress_605528 = ref object of OpenApiRestCall_602433
proc url_GetVerifyEmailAddress_605530(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetVerifyEmailAddress_605529(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deprecated. Use the <code>VerifyEmailIdentity</code> operation to verify a new email address.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   EmailAddress: JString (required)
  ##               : The email address to be verified.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605531 = query.getOrDefault("Action")
  valid_605531 = validateParameter(valid_605531, JString, required = true,
                                 default = newJString("VerifyEmailAddress"))
  if valid_605531 != nil:
    section.add "Action", valid_605531
  var valid_605532 = query.getOrDefault("EmailAddress")
  valid_605532 = validateParameter(valid_605532, JString, required = true,
                                 default = nil)
  if valid_605532 != nil:
    section.add "EmailAddress", valid_605532
  var valid_605533 = query.getOrDefault("Version")
  valid_605533 = validateParameter(valid_605533, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605533 != nil:
    section.add "Version", valid_605533
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605534 = header.getOrDefault("X-Amz-Date")
  valid_605534 = validateParameter(valid_605534, JString, required = false,
                                 default = nil)
  if valid_605534 != nil:
    section.add "X-Amz-Date", valid_605534
  var valid_605535 = header.getOrDefault("X-Amz-Security-Token")
  valid_605535 = validateParameter(valid_605535, JString, required = false,
                                 default = nil)
  if valid_605535 != nil:
    section.add "X-Amz-Security-Token", valid_605535
  var valid_605536 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605536 = validateParameter(valid_605536, JString, required = false,
                                 default = nil)
  if valid_605536 != nil:
    section.add "X-Amz-Content-Sha256", valid_605536
  var valid_605537 = header.getOrDefault("X-Amz-Algorithm")
  valid_605537 = validateParameter(valid_605537, JString, required = false,
                                 default = nil)
  if valid_605537 != nil:
    section.add "X-Amz-Algorithm", valid_605537
  var valid_605538 = header.getOrDefault("X-Amz-Signature")
  valid_605538 = validateParameter(valid_605538, JString, required = false,
                                 default = nil)
  if valid_605538 != nil:
    section.add "X-Amz-Signature", valid_605538
  var valid_605539 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605539 = validateParameter(valid_605539, JString, required = false,
                                 default = nil)
  if valid_605539 != nil:
    section.add "X-Amz-SignedHeaders", valid_605539
  var valid_605540 = header.getOrDefault("X-Amz-Credential")
  valid_605540 = validateParameter(valid_605540, JString, required = false,
                                 default = nil)
  if valid_605540 != nil:
    section.add "X-Amz-Credential", valid_605540
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605541: Call_GetVerifyEmailAddress_605528; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deprecated. Use the <code>VerifyEmailIdentity</code> operation to verify a new email address.
  ## 
  let valid = call_605541.validator(path, query, header, formData, body)
  let scheme = call_605541.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605541.url(scheme.get, call_605541.host, call_605541.base,
                         call_605541.route, valid.getOrDefault("path"))
  result = hook(call_605541, url, valid)

proc call*(call_605542: Call_GetVerifyEmailAddress_605528; EmailAddress: string;
          Action: string = "VerifyEmailAddress"; Version: string = "2010-12-01"): Recallable =
  ## getVerifyEmailAddress
  ## Deprecated. Use the <code>VerifyEmailIdentity</code> operation to verify a new email address.
  ##   Action: string (required)
  ##   EmailAddress: string (required)
  ##               : The email address to be verified.
  ##   Version: string (required)
  var query_605543 = newJObject()
  add(query_605543, "Action", newJString(Action))
  add(query_605543, "EmailAddress", newJString(EmailAddress))
  add(query_605543, "Version", newJString(Version))
  result = call_605542.call(nil, query_605543, nil, nil, nil)

var getVerifyEmailAddress* = Call_GetVerifyEmailAddress_605528(
    name: "getVerifyEmailAddress", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=VerifyEmailAddress",
    validator: validate_GetVerifyEmailAddress_605529, base: "/",
    url: url_GetVerifyEmailAddress_605530, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostVerifyEmailIdentity_605577 = ref object of OpenApiRestCall_602433
proc url_PostVerifyEmailIdentity_605579(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostVerifyEmailIdentity_605578(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS region and attempts to verify it. As a result of executing this operation, a verification email is sent to the specified address.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605580 = query.getOrDefault("Action")
  valid_605580 = validateParameter(valid_605580, JString, required = true,
                                 default = newJString("VerifyEmailIdentity"))
  if valid_605580 != nil:
    section.add "Action", valid_605580
  var valid_605581 = query.getOrDefault("Version")
  valid_605581 = validateParameter(valid_605581, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605581 != nil:
    section.add "Version", valid_605581
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605582 = header.getOrDefault("X-Amz-Date")
  valid_605582 = validateParameter(valid_605582, JString, required = false,
                                 default = nil)
  if valid_605582 != nil:
    section.add "X-Amz-Date", valid_605582
  var valid_605583 = header.getOrDefault("X-Amz-Security-Token")
  valid_605583 = validateParameter(valid_605583, JString, required = false,
                                 default = nil)
  if valid_605583 != nil:
    section.add "X-Amz-Security-Token", valid_605583
  var valid_605584 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605584 = validateParameter(valid_605584, JString, required = false,
                                 default = nil)
  if valid_605584 != nil:
    section.add "X-Amz-Content-Sha256", valid_605584
  var valid_605585 = header.getOrDefault("X-Amz-Algorithm")
  valid_605585 = validateParameter(valid_605585, JString, required = false,
                                 default = nil)
  if valid_605585 != nil:
    section.add "X-Amz-Algorithm", valid_605585
  var valid_605586 = header.getOrDefault("X-Amz-Signature")
  valid_605586 = validateParameter(valid_605586, JString, required = false,
                                 default = nil)
  if valid_605586 != nil:
    section.add "X-Amz-Signature", valid_605586
  var valid_605587 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605587 = validateParameter(valid_605587, JString, required = false,
                                 default = nil)
  if valid_605587 != nil:
    section.add "X-Amz-SignedHeaders", valid_605587
  var valid_605588 = header.getOrDefault("X-Amz-Credential")
  valid_605588 = validateParameter(valid_605588, JString, required = false,
                                 default = nil)
  if valid_605588 != nil:
    section.add "X-Amz-Credential", valid_605588
  result.add "header", section
  ## parameters in `formData` object:
  ##   EmailAddress: JString (required)
  ##               : The email address to be verified.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `EmailAddress` field"
  var valid_605589 = formData.getOrDefault("EmailAddress")
  valid_605589 = validateParameter(valid_605589, JString, required = true,
                                 default = nil)
  if valid_605589 != nil:
    section.add "EmailAddress", valid_605589
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605590: Call_PostVerifyEmailIdentity_605577; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS region and attempts to verify it. As a result of executing this operation, a verification email is sent to the specified address.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605590.validator(path, query, header, formData, body)
  let scheme = call_605590.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605590.url(scheme.get, call_605590.host, call_605590.base,
                         call_605590.route, valid.getOrDefault("path"))
  result = hook(call_605590, url, valid)

proc call*(call_605591: Call_PostVerifyEmailIdentity_605577; EmailAddress: string;
          Action: string = "VerifyEmailIdentity"; Version: string = "2010-12-01"): Recallable =
  ## postVerifyEmailIdentity
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS region and attempts to verify it. As a result of executing this operation, a verification email is sent to the specified address.</p> <p>You can execute this operation no more than once per second.</p>
  ##   EmailAddress: string (required)
  ##               : The email address to be verified.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605592 = newJObject()
  var formData_605593 = newJObject()
  add(formData_605593, "EmailAddress", newJString(EmailAddress))
  add(query_605592, "Action", newJString(Action))
  add(query_605592, "Version", newJString(Version))
  result = call_605591.call(nil, query_605592, nil, formData_605593, nil)

var postVerifyEmailIdentity* = Call_PostVerifyEmailIdentity_605577(
    name: "postVerifyEmailIdentity", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=VerifyEmailIdentity",
    validator: validate_PostVerifyEmailIdentity_605578, base: "/",
    url: url_PostVerifyEmailIdentity_605579, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetVerifyEmailIdentity_605561 = ref object of OpenApiRestCall_602433
proc url_GetVerifyEmailIdentity_605563(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetVerifyEmailIdentity_605562(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS region and attempts to verify it. As a result of executing this operation, a verification email is sent to the specified address.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   EmailAddress: JString (required)
  ##               : The email address to be verified.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605564 = query.getOrDefault("Action")
  valid_605564 = validateParameter(valid_605564, JString, required = true,
                                 default = newJString("VerifyEmailIdentity"))
  if valid_605564 != nil:
    section.add "Action", valid_605564
  var valid_605565 = query.getOrDefault("EmailAddress")
  valid_605565 = validateParameter(valid_605565, JString, required = true,
                                 default = nil)
  if valid_605565 != nil:
    section.add "EmailAddress", valid_605565
  var valid_605566 = query.getOrDefault("Version")
  valid_605566 = validateParameter(valid_605566, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_605566 != nil:
    section.add "Version", valid_605566
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605567 = header.getOrDefault("X-Amz-Date")
  valid_605567 = validateParameter(valid_605567, JString, required = false,
                                 default = nil)
  if valid_605567 != nil:
    section.add "X-Amz-Date", valid_605567
  var valid_605568 = header.getOrDefault("X-Amz-Security-Token")
  valid_605568 = validateParameter(valid_605568, JString, required = false,
                                 default = nil)
  if valid_605568 != nil:
    section.add "X-Amz-Security-Token", valid_605568
  var valid_605569 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605569 = validateParameter(valid_605569, JString, required = false,
                                 default = nil)
  if valid_605569 != nil:
    section.add "X-Amz-Content-Sha256", valid_605569
  var valid_605570 = header.getOrDefault("X-Amz-Algorithm")
  valid_605570 = validateParameter(valid_605570, JString, required = false,
                                 default = nil)
  if valid_605570 != nil:
    section.add "X-Amz-Algorithm", valid_605570
  var valid_605571 = header.getOrDefault("X-Amz-Signature")
  valid_605571 = validateParameter(valid_605571, JString, required = false,
                                 default = nil)
  if valid_605571 != nil:
    section.add "X-Amz-Signature", valid_605571
  var valid_605572 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605572 = validateParameter(valid_605572, JString, required = false,
                                 default = nil)
  if valid_605572 != nil:
    section.add "X-Amz-SignedHeaders", valid_605572
  var valid_605573 = header.getOrDefault("X-Amz-Credential")
  valid_605573 = validateParameter(valid_605573, JString, required = false,
                                 default = nil)
  if valid_605573 != nil:
    section.add "X-Amz-Credential", valid_605573
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605574: Call_GetVerifyEmailIdentity_605561; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS region and attempts to verify it. As a result of executing this operation, a verification email is sent to the specified address.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_605574.validator(path, query, header, formData, body)
  let scheme = call_605574.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605574.url(scheme.get, call_605574.host, call_605574.base,
                         call_605574.route, valid.getOrDefault("path"))
  result = hook(call_605574, url, valid)

proc call*(call_605575: Call_GetVerifyEmailIdentity_605561; EmailAddress: string;
          Action: string = "VerifyEmailIdentity"; Version: string = "2010-12-01"): Recallable =
  ## getVerifyEmailIdentity
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS region and attempts to verify it. As a result of executing this operation, a verification email is sent to the specified address.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   EmailAddress: string (required)
  ##               : The email address to be verified.
  ##   Version: string (required)
  var query_605576 = newJObject()
  add(query_605576, "Action", newJString(Action))
  add(query_605576, "EmailAddress", newJString(EmailAddress))
  add(query_605576, "Version", newJString(Version))
  result = call_605575.call(nil, query_605576, nil, nil, nil)

var getVerifyEmailIdentity* = Call_GetVerifyEmailIdentity_605561(
    name: "getVerifyEmailIdentity", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=VerifyEmailIdentity",
    validator: validate_GetVerifyEmailIdentity_605562, base: "/",
    url: url_GetVerifyEmailIdentity_605563, schemes: {Scheme.Https, Scheme.Http})
export
  rest

proc sign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", "")
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", "")
    region = os.getEnv("AWS_REGION", "")
  assert secret != "", "need secret key in env"
  assert access != "", "need access key in env"
  assert region != "", "need region in env"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  let
    algo = SHA256
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  echo recall.headers
  recall.headers.del "Host"
  recall.url = $url

method hook(call: OpenApiRestCall; url: string; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, "")
  result.sign(input.getOrDefault("query"), SHA256)
