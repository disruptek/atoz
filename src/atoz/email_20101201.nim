
import
  json, options, hashes, uri, strutils, tables, rest, os, uri, strutils, httpcore, sigv4

## auto-generated via openapi macro
## title: Amazon Simple Email Service
## version: 2010-12-01
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>Amazon Simple Email Service</fullname> <p> This document contains reference information for the <a href="https://aws.amazon.com/ses/">Amazon Simple Email Service</a> (Amazon SES) API, version 2010-12-01. This document is best used in conjunction with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html">Amazon SES Developer Guide</a>. </p> <note> <p> For a list of Amazon SES endpoints to use in service requests, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/regions.html">Regions and Amazon SES</a> in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html">Amazon SES Developer Guide</a>.</p> </note>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/email/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_605589 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_605589](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_605589): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    case js.kind
    of JInt, JFloat, JNull, JBool:
      head = $js
    of JString:
      head = js.getStr
    else:
      return
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  awsServers = {Scheme.Http: {"ap-northeast-1": "email.ap-northeast-1.amazonaws.com", "ap-southeast-1": "email.ap-southeast-1.amazonaws.com",
                           "us-west-2": "email.us-west-2.amazonaws.com",
                           "eu-west-2": "email.eu-west-2.amazonaws.com", "ap-northeast-3": "email.ap-northeast-3.amazonaws.com",
                           "eu-central-1": "email.eu-central-1.amazonaws.com",
                           "us-east-2": "email.us-east-2.amazonaws.com",
                           "us-east-1": "email.us-east-1.amazonaws.com", "cn-northwest-1": "email.cn-northwest-1.amazonaws.com.cn",
                           "ap-south-1": "email.ap-south-1.amazonaws.com",
                           "eu-north-1": "email.eu-north-1.amazonaws.com", "ap-northeast-2": "email.ap-northeast-2.amazonaws.com",
                           "us-west-1": "email.us-west-1.amazonaws.com", "us-gov-east-1": "email.us-gov-east-1.amazonaws.com",
                           "eu-west-3": "email.eu-west-3.amazonaws.com",
                           "cn-north-1": "email.cn-north-1.amazonaws.com.cn",
                           "sa-east-1": "email.sa-east-1.amazonaws.com",
                           "eu-west-1": "email.eu-west-1.amazonaws.com", "us-gov-west-1": "email.us-gov-west-1.amazonaws.com", "ap-southeast-2": "email.ap-southeast-2.amazonaws.com",
                           "ca-central-1": "email.ca-central-1.amazonaws.com"}.toTable, Scheme.Https: {
      "ap-northeast-1": "email.ap-northeast-1.amazonaws.com",
      "ap-southeast-1": "email.ap-southeast-1.amazonaws.com",
      "us-west-2": "email.us-west-2.amazonaws.com",
      "eu-west-2": "email.eu-west-2.amazonaws.com",
      "ap-northeast-3": "email.ap-northeast-3.amazonaws.com",
      "eu-central-1": "email.eu-central-1.amazonaws.com",
      "us-east-2": "email.us-east-2.amazonaws.com",
      "us-east-1": "email.us-east-1.amazonaws.com",
      "cn-northwest-1": "email.cn-northwest-1.amazonaws.com.cn",
      "ap-south-1": "email.ap-south-1.amazonaws.com",
      "eu-north-1": "email.eu-north-1.amazonaws.com",
      "ap-northeast-2": "email.ap-northeast-2.amazonaws.com",
      "us-west-1": "email.us-west-1.amazonaws.com",
      "us-gov-east-1": "email.us-gov-east-1.amazonaws.com",
      "eu-west-3": "email.eu-west-3.amazonaws.com",
      "cn-north-1": "email.cn-north-1.amazonaws.com.cn",
      "sa-east-1": "email.sa-east-1.amazonaws.com",
      "eu-west-1": "email.eu-west-1.amazonaws.com",
      "us-gov-west-1": "email.us-gov-west-1.amazonaws.com",
      "ap-southeast-2": "email.ap-southeast-2.amazonaws.com",
      "ca-central-1": "email.ca-central-1.amazonaws.com"}.toTable}.toTable
const
  awsServiceName = "email"
method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_PostCloneReceiptRuleSet_606199 = ref object of OpenApiRestCall_605589
proc url_PostCloneReceiptRuleSet_606201(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCloneReceiptRuleSet_606200(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a receipt rule set by cloning an existing one. All receipt rules and configurations are copied to the new receipt rule set and are completely independent of the source rule set.</p> <p>For information about setting up rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606202 = query.getOrDefault("Action")
  valid_606202 = validateParameter(valid_606202, JString, required = true,
                                 default = newJString("CloneReceiptRuleSet"))
  if valid_606202 != nil:
    section.add "Action", valid_606202
  var valid_606203 = query.getOrDefault("Version")
  valid_606203 = validateParameter(valid_606203, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606203 != nil:
    section.add "Version", valid_606203
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606204 = header.getOrDefault("X-Amz-Signature")
  valid_606204 = validateParameter(valid_606204, JString, required = false,
                                 default = nil)
  if valid_606204 != nil:
    section.add "X-Amz-Signature", valid_606204
  var valid_606205 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606205 = validateParameter(valid_606205, JString, required = false,
                                 default = nil)
  if valid_606205 != nil:
    section.add "X-Amz-Content-Sha256", valid_606205
  var valid_606206 = header.getOrDefault("X-Amz-Date")
  valid_606206 = validateParameter(valid_606206, JString, required = false,
                                 default = nil)
  if valid_606206 != nil:
    section.add "X-Amz-Date", valid_606206
  var valid_606207 = header.getOrDefault("X-Amz-Credential")
  valid_606207 = validateParameter(valid_606207, JString, required = false,
                                 default = nil)
  if valid_606207 != nil:
    section.add "X-Amz-Credential", valid_606207
  var valid_606208 = header.getOrDefault("X-Amz-Security-Token")
  valid_606208 = validateParameter(valid_606208, JString, required = false,
                                 default = nil)
  if valid_606208 != nil:
    section.add "X-Amz-Security-Token", valid_606208
  var valid_606209 = header.getOrDefault("X-Amz-Algorithm")
  valid_606209 = validateParameter(valid_606209, JString, required = false,
                                 default = nil)
  if valid_606209 != nil:
    section.add "X-Amz-Algorithm", valid_606209
  var valid_606210 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606210 = validateParameter(valid_606210, JString, required = false,
                                 default = nil)
  if valid_606210 != nil:
    section.add "X-Amz-SignedHeaders", valid_606210
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleSetName: JString (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   OriginalRuleSetName: JString (required)
  ##                      : The name of the rule set to clone.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleSetName` field"
  var valid_606211 = formData.getOrDefault("RuleSetName")
  valid_606211 = validateParameter(valid_606211, JString, required = true,
                                 default = nil)
  if valid_606211 != nil:
    section.add "RuleSetName", valid_606211
  var valid_606212 = formData.getOrDefault("OriginalRuleSetName")
  valid_606212 = validateParameter(valid_606212, JString, required = true,
                                 default = nil)
  if valid_606212 != nil:
    section.add "OriginalRuleSetName", valid_606212
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606213: Call_PostCloneReceiptRuleSet_606199; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a receipt rule set by cloning an existing one. All receipt rules and configurations are copied to the new receipt rule set and are completely independent of the source rule set.</p> <p>For information about setting up rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_606213.validator(path, query, header, formData, body)
  let scheme = call_606213.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606213.url(scheme.get, call_606213.host, call_606213.base,
                         call_606213.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606213, url, valid)

proc call*(call_606214: Call_PostCloneReceiptRuleSet_606199; RuleSetName: string;
          OriginalRuleSetName: string; Action: string = "CloneReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## postCloneReceiptRuleSet
  ## <p>Creates a receipt rule set by cloning an existing one. All receipt rules and configurations are copied to the new receipt rule set and are completely independent of the source rule set.</p> <p>For information about setting up rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   OriginalRuleSetName: string (required)
  ##                      : The name of the rule set to clone.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606215 = newJObject()
  var formData_606216 = newJObject()
  add(formData_606216, "RuleSetName", newJString(RuleSetName))
  add(formData_606216, "OriginalRuleSetName", newJString(OriginalRuleSetName))
  add(query_606215, "Action", newJString(Action))
  add(query_606215, "Version", newJString(Version))
  result = call_606214.call(nil, query_606215, nil, formData_606216, nil)

var postCloneReceiptRuleSet* = Call_PostCloneReceiptRuleSet_606199(
    name: "postCloneReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=CloneReceiptRuleSet",
    validator: validate_PostCloneReceiptRuleSet_606200, base: "/",
    url: url_PostCloneReceiptRuleSet_606201, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCloneReceiptRuleSet_605927 = ref object of OpenApiRestCall_605589
proc url_GetCloneReceiptRuleSet_605929(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCloneReceiptRuleSet_605928(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a receipt rule set by cloning an existing one. All receipt rules and configurations are copied to the new receipt rule set and are completely independent of the source rule set.</p> <p>For information about setting up rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OriginalRuleSetName: JString (required)
  ##                      : The name of the rule set to clone.
  ##   Action: JString (required)
  ##   RuleSetName: JString (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `OriginalRuleSetName` field"
  var valid_606041 = query.getOrDefault("OriginalRuleSetName")
  valid_606041 = validateParameter(valid_606041, JString, required = true,
                                 default = nil)
  if valid_606041 != nil:
    section.add "OriginalRuleSetName", valid_606041
  var valid_606055 = query.getOrDefault("Action")
  valid_606055 = validateParameter(valid_606055, JString, required = true,
                                 default = newJString("CloneReceiptRuleSet"))
  if valid_606055 != nil:
    section.add "Action", valid_606055
  var valid_606056 = query.getOrDefault("RuleSetName")
  valid_606056 = validateParameter(valid_606056, JString, required = true,
                                 default = nil)
  if valid_606056 != nil:
    section.add "RuleSetName", valid_606056
  var valid_606057 = query.getOrDefault("Version")
  valid_606057 = validateParameter(valid_606057, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606057 != nil:
    section.add "Version", valid_606057
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606058 = header.getOrDefault("X-Amz-Signature")
  valid_606058 = validateParameter(valid_606058, JString, required = false,
                                 default = nil)
  if valid_606058 != nil:
    section.add "X-Amz-Signature", valid_606058
  var valid_606059 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606059 = validateParameter(valid_606059, JString, required = false,
                                 default = nil)
  if valid_606059 != nil:
    section.add "X-Amz-Content-Sha256", valid_606059
  var valid_606060 = header.getOrDefault("X-Amz-Date")
  valid_606060 = validateParameter(valid_606060, JString, required = false,
                                 default = nil)
  if valid_606060 != nil:
    section.add "X-Amz-Date", valid_606060
  var valid_606061 = header.getOrDefault("X-Amz-Credential")
  valid_606061 = validateParameter(valid_606061, JString, required = false,
                                 default = nil)
  if valid_606061 != nil:
    section.add "X-Amz-Credential", valid_606061
  var valid_606062 = header.getOrDefault("X-Amz-Security-Token")
  valid_606062 = validateParameter(valid_606062, JString, required = false,
                                 default = nil)
  if valid_606062 != nil:
    section.add "X-Amz-Security-Token", valid_606062
  var valid_606063 = header.getOrDefault("X-Amz-Algorithm")
  valid_606063 = validateParameter(valid_606063, JString, required = false,
                                 default = nil)
  if valid_606063 != nil:
    section.add "X-Amz-Algorithm", valid_606063
  var valid_606064 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606064 = validateParameter(valid_606064, JString, required = false,
                                 default = nil)
  if valid_606064 != nil:
    section.add "X-Amz-SignedHeaders", valid_606064
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606087: Call_GetCloneReceiptRuleSet_605927; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a receipt rule set by cloning an existing one. All receipt rules and configurations are copied to the new receipt rule set and are completely independent of the source rule set.</p> <p>For information about setting up rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_606087.validator(path, query, header, formData, body)
  let scheme = call_606087.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606087.url(scheme.get, call_606087.host, call_606087.base,
                         call_606087.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606087, url, valid)

proc call*(call_606158: Call_GetCloneReceiptRuleSet_605927;
          OriginalRuleSetName: string; RuleSetName: string;
          Action: string = "CloneReceiptRuleSet"; Version: string = "2010-12-01"): Recallable =
  ## getCloneReceiptRuleSet
  ## <p>Creates a receipt rule set by cloning an existing one. All receipt rules and configurations are copied to the new receipt rule set and are completely independent of the source rule set.</p> <p>For information about setting up rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   OriginalRuleSetName: string (required)
  ##                      : The name of the rule set to clone.
  ##   Action: string (required)
  ##   RuleSetName: string (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Version: string (required)
  var query_606159 = newJObject()
  add(query_606159, "OriginalRuleSetName", newJString(OriginalRuleSetName))
  add(query_606159, "Action", newJString(Action))
  add(query_606159, "RuleSetName", newJString(RuleSetName))
  add(query_606159, "Version", newJString(Version))
  result = call_606158.call(nil, query_606159, nil, nil, nil)

var getCloneReceiptRuleSet* = Call_GetCloneReceiptRuleSet_605927(
    name: "getCloneReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=CloneReceiptRuleSet",
    validator: validate_GetCloneReceiptRuleSet_605928, base: "/",
    url: url_GetCloneReceiptRuleSet_605929, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateConfigurationSet_606233 = ref object of OpenApiRestCall_605589
proc url_PostCreateConfigurationSet_606235(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateConfigurationSet_606234(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a configuration set.</p> <p>Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606236 = query.getOrDefault("Action")
  valid_606236 = validateParameter(valid_606236, JString, required = true,
                                 default = newJString("CreateConfigurationSet"))
  if valid_606236 != nil:
    section.add "Action", valid_606236
  var valid_606237 = query.getOrDefault("Version")
  valid_606237 = validateParameter(valid_606237, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606237 != nil:
    section.add "Version", valid_606237
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606238 = header.getOrDefault("X-Amz-Signature")
  valid_606238 = validateParameter(valid_606238, JString, required = false,
                                 default = nil)
  if valid_606238 != nil:
    section.add "X-Amz-Signature", valid_606238
  var valid_606239 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606239 = validateParameter(valid_606239, JString, required = false,
                                 default = nil)
  if valid_606239 != nil:
    section.add "X-Amz-Content-Sha256", valid_606239
  var valid_606240 = header.getOrDefault("X-Amz-Date")
  valid_606240 = validateParameter(valid_606240, JString, required = false,
                                 default = nil)
  if valid_606240 != nil:
    section.add "X-Amz-Date", valid_606240
  var valid_606241 = header.getOrDefault("X-Amz-Credential")
  valid_606241 = validateParameter(valid_606241, JString, required = false,
                                 default = nil)
  if valid_606241 != nil:
    section.add "X-Amz-Credential", valid_606241
  var valid_606242 = header.getOrDefault("X-Amz-Security-Token")
  valid_606242 = validateParameter(valid_606242, JString, required = false,
                                 default = nil)
  if valid_606242 != nil:
    section.add "X-Amz-Security-Token", valid_606242
  var valid_606243 = header.getOrDefault("X-Amz-Algorithm")
  valid_606243 = validateParameter(valid_606243, JString, required = false,
                                 default = nil)
  if valid_606243 != nil:
    section.add "X-Amz-Algorithm", valid_606243
  var valid_606244 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606244 = validateParameter(valid_606244, JString, required = false,
                                 default = nil)
  if valid_606244 != nil:
    section.add "X-Amz-SignedHeaders", valid_606244
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSet.Name: JString
  ##                        : <p>The name of the configuration set.</p> <p>Configuration sets let you create groups of rules that you can apply to the emails you send using Amazon SES. For more information about using configuration sets, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/using-configuration-sets.html">Using Amazon SES Configuration Sets</a> in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the configuration set. The name must meet the following requirements:</p> <ul> <li> <p>Contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain 64 characters or fewer.</p> </li> </ul>
  section = newJObject()
  var valid_606245 = formData.getOrDefault("ConfigurationSet.Name")
  valid_606245 = validateParameter(valid_606245, JString, required = false,
                                 default = nil)
  if valid_606245 != nil:
    section.add "ConfigurationSet.Name", valid_606245
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606246: Call_PostCreateConfigurationSet_606233; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a configuration set.</p> <p>Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_606246.validator(path, query, header, formData, body)
  let scheme = call_606246.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606246.url(scheme.get, call_606246.host, call_606246.base,
                         call_606246.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606246, url, valid)

proc call*(call_606247: Call_PostCreateConfigurationSet_606233;
          Action: string = "CreateConfigurationSet";
          ConfigurationSetName: string = ""; Version: string = "2010-12-01"): Recallable =
  ## postCreateConfigurationSet
  ## <p>Creates a configuration set.</p> <p>Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   ConfigurationSetName: string
  ##                       : <p>The name of the configuration set.</p> <p>Configuration sets let you create groups of rules that you can apply to the emails you send using Amazon SES. For more information about using configuration sets, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/using-configuration-sets.html">Using Amazon SES Configuration Sets</a> in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the configuration set. The name must meet the following requirements:</p> <ul> <li> <p>Contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain 64 characters or fewer.</p> </li> </ul>
  ##   Version: string (required)
  var query_606248 = newJObject()
  var formData_606249 = newJObject()
  add(query_606248, "Action", newJString(Action))
  add(formData_606249, "ConfigurationSet.Name", newJString(ConfigurationSetName))
  add(query_606248, "Version", newJString(Version))
  result = call_606247.call(nil, query_606248, nil, formData_606249, nil)

var postCreateConfigurationSet* = Call_PostCreateConfigurationSet_606233(
    name: "postCreateConfigurationSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=CreateConfigurationSet",
    validator: validate_PostCreateConfigurationSet_606234, base: "/",
    url: url_PostCreateConfigurationSet_606235,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateConfigurationSet_606217 = ref object of OpenApiRestCall_605589
proc url_GetCreateConfigurationSet_606219(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateConfigurationSet_606218(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a configuration set.</p> <p>Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ConfigurationSet.Name: JString
  ##                        : <p>The name of the configuration set.</p> <p>Configuration sets let you create groups of rules that you can apply to the emails you send using Amazon SES. For more information about using configuration sets, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/using-configuration-sets.html">Using Amazon SES Configuration Sets</a> in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the configuration set. The name must meet the following requirements:</p> <ul> <li> <p>Contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain 64 characters or fewer.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606220 = query.getOrDefault("ConfigurationSet.Name")
  valid_606220 = validateParameter(valid_606220, JString, required = false,
                                 default = nil)
  if valid_606220 != nil:
    section.add "ConfigurationSet.Name", valid_606220
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606221 = query.getOrDefault("Action")
  valid_606221 = validateParameter(valid_606221, JString, required = true,
                                 default = newJString("CreateConfigurationSet"))
  if valid_606221 != nil:
    section.add "Action", valid_606221
  var valid_606222 = query.getOrDefault("Version")
  valid_606222 = validateParameter(valid_606222, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606222 != nil:
    section.add "Version", valid_606222
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606223 = header.getOrDefault("X-Amz-Signature")
  valid_606223 = validateParameter(valid_606223, JString, required = false,
                                 default = nil)
  if valid_606223 != nil:
    section.add "X-Amz-Signature", valid_606223
  var valid_606224 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606224 = validateParameter(valid_606224, JString, required = false,
                                 default = nil)
  if valid_606224 != nil:
    section.add "X-Amz-Content-Sha256", valid_606224
  var valid_606225 = header.getOrDefault("X-Amz-Date")
  valid_606225 = validateParameter(valid_606225, JString, required = false,
                                 default = nil)
  if valid_606225 != nil:
    section.add "X-Amz-Date", valid_606225
  var valid_606226 = header.getOrDefault("X-Amz-Credential")
  valid_606226 = validateParameter(valid_606226, JString, required = false,
                                 default = nil)
  if valid_606226 != nil:
    section.add "X-Amz-Credential", valid_606226
  var valid_606227 = header.getOrDefault("X-Amz-Security-Token")
  valid_606227 = validateParameter(valid_606227, JString, required = false,
                                 default = nil)
  if valid_606227 != nil:
    section.add "X-Amz-Security-Token", valid_606227
  var valid_606228 = header.getOrDefault("X-Amz-Algorithm")
  valid_606228 = validateParameter(valid_606228, JString, required = false,
                                 default = nil)
  if valid_606228 != nil:
    section.add "X-Amz-Algorithm", valid_606228
  var valid_606229 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606229 = validateParameter(valid_606229, JString, required = false,
                                 default = nil)
  if valid_606229 != nil:
    section.add "X-Amz-SignedHeaders", valid_606229
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606230: Call_GetCreateConfigurationSet_606217; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a configuration set.</p> <p>Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_606230.validator(path, query, header, formData, body)
  let scheme = call_606230.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606230.url(scheme.get, call_606230.host, call_606230.base,
                         call_606230.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606230, url, valid)

proc call*(call_606231: Call_GetCreateConfigurationSet_606217;
          ConfigurationSetName: string = "";
          Action: string = "CreateConfigurationSet"; Version: string = "2010-12-01"): Recallable =
  ## getCreateConfigurationSet
  ## <p>Creates a configuration set.</p> <p>Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string
  ##                       : <p>The name of the configuration set.</p> <p>Configuration sets let you create groups of rules that you can apply to the emails you send using Amazon SES. For more information about using configuration sets, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/using-configuration-sets.html">Using Amazon SES Configuration Sets</a> in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the configuration set. The name must meet the following requirements:</p> <ul> <li> <p>Contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain 64 characters or fewer.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606232 = newJObject()
  add(query_606232, "ConfigurationSet.Name", newJString(ConfigurationSetName))
  add(query_606232, "Action", newJString(Action))
  add(query_606232, "Version", newJString(Version))
  result = call_606231.call(nil, query_606232, nil, nil, nil)

var getCreateConfigurationSet* = Call_GetCreateConfigurationSet_606217(
    name: "getCreateConfigurationSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=CreateConfigurationSet",
    validator: validate_GetCreateConfigurationSet_606218, base: "/",
    url: url_GetCreateConfigurationSet_606219,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateConfigurationSetEventDestination_606272 = ref object of OpenApiRestCall_605589
proc url_PostCreateConfigurationSetEventDestination_606274(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateConfigurationSetEventDestination_606273(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a configuration set event destination.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>An event destination is the AWS service to which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606275 = query.getOrDefault("Action")
  valid_606275 = validateParameter(valid_606275, JString, required = true, default = newJString(
      "CreateConfigurationSetEventDestination"))
  if valid_606275 != nil:
    section.add "Action", valid_606275
  var valid_606276 = query.getOrDefault("Version")
  valid_606276 = validateParameter(valid_606276, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606276 != nil:
    section.add "Version", valid_606276
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606277 = header.getOrDefault("X-Amz-Signature")
  valid_606277 = validateParameter(valid_606277, JString, required = false,
                                 default = nil)
  if valid_606277 != nil:
    section.add "X-Amz-Signature", valid_606277
  var valid_606278 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606278 = validateParameter(valid_606278, JString, required = false,
                                 default = nil)
  if valid_606278 != nil:
    section.add "X-Amz-Content-Sha256", valid_606278
  var valid_606279 = header.getOrDefault("X-Amz-Date")
  valid_606279 = validateParameter(valid_606279, JString, required = false,
                                 default = nil)
  if valid_606279 != nil:
    section.add "X-Amz-Date", valid_606279
  var valid_606280 = header.getOrDefault("X-Amz-Credential")
  valid_606280 = validateParameter(valid_606280, JString, required = false,
                                 default = nil)
  if valid_606280 != nil:
    section.add "X-Amz-Credential", valid_606280
  var valid_606281 = header.getOrDefault("X-Amz-Security-Token")
  valid_606281 = validateParameter(valid_606281, JString, required = false,
                                 default = nil)
  if valid_606281 != nil:
    section.add "X-Amz-Security-Token", valid_606281
  var valid_606282 = header.getOrDefault("X-Amz-Algorithm")
  valid_606282 = validateParameter(valid_606282, JString, required = false,
                                 default = nil)
  if valid_606282 != nil:
    section.add "X-Amz-Algorithm", valid_606282
  var valid_606283 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606283 = validateParameter(valid_606283, JString, required = false,
                                 default = nil)
  if valid_606283 != nil:
    section.add "X-Amz-SignedHeaders", valid_606283
  result.add "header", section
  ## parameters in `formData` object:
  ##   EventDestination.Name: JString
  ##                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestination.MatchingEventTypes: JArray
  ##                                      : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   EventDestination.Enabled: JString
  ##                           : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that the event destination should be associated with.
  ##   EventDestination.CloudWatchDestination: JString
  ##                                         : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   EventDestination.KinesisFirehoseDestination: JString
  ##                                              : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   EventDestination.SNSDestination: JString
  ##                                  : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  section = newJObject()
  var valid_606284 = formData.getOrDefault("EventDestination.Name")
  valid_606284 = validateParameter(valid_606284, JString, required = false,
                                 default = nil)
  if valid_606284 != nil:
    section.add "EventDestination.Name", valid_606284
  var valid_606285 = formData.getOrDefault("EventDestination.MatchingEventTypes")
  valid_606285 = validateParameter(valid_606285, JArray, required = false,
                                 default = nil)
  if valid_606285 != nil:
    section.add "EventDestination.MatchingEventTypes", valid_606285
  var valid_606286 = formData.getOrDefault("EventDestination.Enabled")
  valid_606286 = validateParameter(valid_606286, JString, required = false,
                                 default = nil)
  if valid_606286 != nil:
    section.add "EventDestination.Enabled", valid_606286
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_606287 = formData.getOrDefault("ConfigurationSetName")
  valid_606287 = validateParameter(valid_606287, JString, required = true,
                                 default = nil)
  if valid_606287 != nil:
    section.add "ConfigurationSetName", valid_606287
  var valid_606288 = formData.getOrDefault("EventDestination.CloudWatchDestination")
  valid_606288 = validateParameter(valid_606288, JString, required = false,
                                 default = nil)
  if valid_606288 != nil:
    section.add "EventDestination.CloudWatchDestination", valid_606288
  var valid_606289 = formData.getOrDefault("EventDestination.KinesisFirehoseDestination")
  valid_606289 = validateParameter(valid_606289, JString, required = false,
                                 default = nil)
  if valid_606289 != nil:
    section.add "EventDestination.KinesisFirehoseDestination", valid_606289
  var valid_606290 = formData.getOrDefault("EventDestination.SNSDestination")
  valid_606290 = validateParameter(valid_606290, JString, required = false,
                                 default = nil)
  if valid_606290 != nil:
    section.add "EventDestination.SNSDestination", valid_606290
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606291: Call_PostCreateConfigurationSetEventDestination_606272;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a configuration set event destination.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>An event destination is the AWS service to which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_606291.validator(path, query, header, formData, body)
  let scheme = call_606291.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606291.url(scheme.get, call_606291.host, call_606291.base,
                         call_606291.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606291, url, valid)

proc call*(call_606292: Call_PostCreateConfigurationSetEventDestination_606272;
          ConfigurationSetName: string; EventDestinationName: string = "";
          EventDestinationMatchingEventTypes: JsonNode = nil;
          EventDestinationEnabled: string = "";
          Action: string = "CreateConfigurationSetEventDestination";
          Version: string = "2010-12-01";
          EventDestinationCloudWatchDestination: string = "";
          EventDestinationKinesisFirehoseDestination: string = "";
          EventDestinationSNSDestination: string = ""): Recallable =
  ## postCreateConfigurationSetEventDestination
  ## <p>Creates a configuration set event destination.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>An event destination is the AWS service to which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   EventDestinationName: string
  ##                       : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestinationMatchingEventTypes: JArray
  ##                                     : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   EventDestinationEnabled: string
  ##                          : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that the event destination should be associated with.
  ##   Version: string (required)
  ##   EventDestinationCloudWatchDestination: string
  ##                                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   EventDestinationKinesisFirehoseDestination: string
  ##                                             : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   EventDestinationSNSDestination: string
  ##                                 : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  var query_606293 = newJObject()
  var formData_606294 = newJObject()
  add(formData_606294, "EventDestination.Name", newJString(EventDestinationName))
  if EventDestinationMatchingEventTypes != nil:
    formData_606294.add "EventDestination.MatchingEventTypes",
                       EventDestinationMatchingEventTypes
  add(formData_606294, "EventDestination.Enabled",
      newJString(EventDestinationEnabled))
  add(query_606293, "Action", newJString(Action))
  add(formData_606294, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_606293, "Version", newJString(Version))
  add(formData_606294, "EventDestination.CloudWatchDestination",
      newJString(EventDestinationCloudWatchDestination))
  add(formData_606294, "EventDestination.KinesisFirehoseDestination",
      newJString(EventDestinationKinesisFirehoseDestination))
  add(formData_606294, "EventDestination.SNSDestination",
      newJString(EventDestinationSNSDestination))
  result = call_606292.call(nil, query_606293, nil, formData_606294, nil)

var postCreateConfigurationSetEventDestination* = Call_PostCreateConfigurationSetEventDestination_606272(
    name: "postCreateConfigurationSetEventDestination", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=CreateConfigurationSetEventDestination",
    validator: validate_PostCreateConfigurationSetEventDestination_606273,
    base: "/", url: url_PostCreateConfigurationSetEventDestination_606274,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateConfigurationSetEventDestination_606250 = ref object of OpenApiRestCall_605589
proc url_GetCreateConfigurationSetEventDestination_606252(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateConfigurationSetEventDestination_606251(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a configuration set event destination.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>An event destination is the AWS service to which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EventDestination.Enabled: JString
  ##                           : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestination.SNSDestination: JString
  ##                                  : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that the event destination should be associated with.
  ##   Action: JString (required)
  ##   EventDestination.Name: JString
  ##                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestination.KinesisFirehoseDestination: JString
  ##                                              : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   EventDestination.CloudWatchDestination: JString
  ##                                         : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   Version: JString (required)
  ##   EventDestination.MatchingEventTypes: JArray
  ##                                      : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  section = newJObject()
  var valid_606253 = query.getOrDefault("EventDestination.Enabled")
  valid_606253 = validateParameter(valid_606253, JString, required = false,
                                 default = nil)
  if valid_606253 != nil:
    section.add "EventDestination.Enabled", valid_606253
  var valid_606254 = query.getOrDefault("EventDestination.SNSDestination")
  valid_606254 = validateParameter(valid_606254, JString, required = false,
                                 default = nil)
  if valid_606254 != nil:
    section.add "EventDestination.SNSDestination", valid_606254
  assert query != nil, "query argument is necessary due to required `ConfigurationSetName` field"
  var valid_606255 = query.getOrDefault("ConfigurationSetName")
  valid_606255 = validateParameter(valid_606255, JString, required = true,
                                 default = nil)
  if valid_606255 != nil:
    section.add "ConfigurationSetName", valid_606255
  var valid_606256 = query.getOrDefault("Action")
  valid_606256 = validateParameter(valid_606256, JString, required = true, default = newJString(
      "CreateConfigurationSetEventDestination"))
  if valid_606256 != nil:
    section.add "Action", valid_606256
  var valid_606257 = query.getOrDefault("EventDestination.Name")
  valid_606257 = validateParameter(valid_606257, JString, required = false,
                                 default = nil)
  if valid_606257 != nil:
    section.add "EventDestination.Name", valid_606257
  var valid_606258 = query.getOrDefault("EventDestination.KinesisFirehoseDestination")
  valid_606258 = validateParameter(valid_606258, JString, required = false,
                                 default = nil)
  if valid_606258 != nil:
    section.add "EventDestination.KinesisFirehoseDestination", valid_606258
  var valid_606259 = query.getOrDefault("EventDestination.CloudWatchDestination")
  valid_606259 = validateParameter(valid_606259, JString, required = false,
                                 default = nil)
  if valid_606259 != nil:
    section.add "EventDestination.CloudWatchDestination", valid_606259
  var valid_606260 = query.getOrDefault("Version")
  valid_606260 = validateParameter(valid_606260, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606260 != nil:
    section.add "Version", valid_606260
  var valid_606261 = query.getOrDefault("EventDestination.MatchingEventTypes")
  valid_606261 = validateParameter(valid_606261, JArray, required = false,
                                 default = nil)
  if valid_606261 != nil:
    section.add "EventDestination.MatchingEventTypes", valid_606261
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606262 = header.getOrDefault("X-Amz-Signature")
  valid_606262 = validateParameter(valid_606262, JString, required = false,
                                 default = nil)
  if valid_606262 != nil:
    section.add "X-Amz-Signature", valid_606262
  var valid_606263 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606263 = validateParameter(valid_606263, JString, required = false,
                                 default = nil)
  if valid_606263 != nil:
    section.add "X-Amz-Content-Sha256", valid_606263
  var valid_606264 = header.getOrDefault("X-Amz-Date")
  valid_606264 = validateParameter(valid_606264, JString, required = false,
                                 default = nil)
  if valid_606264 != nil:
    section.add "X-Amz-Date", valid_606264
  var valid_606265 = header.getOrDefault("X-Amz-Credential")
  valid_606265 = validateParameter(valid_606265, JString, required = false,
                                 default = nil)
  if valid_606265 != nil:
    section.add "X-Amz-Credential", valid_606265
  var valid_606266 = header.getOrDefault("X-Amz-Security-Token")
  valid_606266 = validateParameter(valid_606266, JString, required = false,
                                 default = nil)
  if valid_606266 != nil:
    section.add "X-Amz-Security-Token", valid_606266
  var valid_606267 = header.getOrDefault("X-Amz-Algorithm")
  valid_606267 = validateParameter(valid_606267, JString, required = false,
                                 default = nil)
  if valid_606267 != nil:
    section.add "X-Amz-Algorithm", valid_606267
  var valid_606268 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606268 = validateParameter(valid_606268, JString, required = false,
                                 default = nil)
  if valid_606268 != nil:
    section.add "X-Amz-SignedHeaders", valid_606268
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606269: Call_GetCreateConfigurationSetEventDestination_606250;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a configuration set event destination.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>An event destination is the AWS service to which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_606269.validator(path, query, header, formData, body)
  let scheme = call_606269.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606269.url(scheme.get, call_606269.host, call_606269.base,
                         call_606269.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606269, url, valid)

proc call*(call_606270: Call_GetCreateConfigurationSetEventDestination_606250;
          ConfigurationSetName: string; EventDestinationEnabled: string = "";
          EventDestinationSNSDestination: string = "";
          Action: string = "CreateConfigurationSetEventDestination";
          EventDestinationName: string = "";
          EventDestinationKinesisFirehoseDestination: string = "";
          EventDestinationCloudWatchDestination: string = "";
          Version: string = "2010-12-01";
          EventDestinationMatchingEventTypes: JsonNode = nil): Recallable =
  ## getCreateConfigurationSetEventDestination
  ## <p>Creates a configuration set event destination.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>An event destination is the AWS service to which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   EventDestinationEnabled: string
  ##                          : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestinationSNSDestination: string
  ##                                 : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that the event destination should be associated with.
  ##   Action: string (required)
  ##   EventDestinationName: string
  ##                       : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestinationKinesisFirehoseDestination: string
  ##                                             : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   EventDestinationCloudWatchDestination: string
  ##                                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   Version: string (required)
  ##   EventDestinationMatchingEventTypes: JArray
  ##                                     : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  var query_606271 = newJObject()
  add(query_606271, "EventDestination.Enabled",
      newJString(EventDestinationEnabled))
  add(query_606271, "EventDestination.SNSDestination",
      newJString(EventDestinationSNSDestination))
  add(query_606271, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_606271, "Action", newJString(Action))
  add(query_606271, "EventDestination.Name", newJString(EventDestinationName))
  add(query_606271, "EventDestination.KinesisFirehoseDestination",
      newJString(EventDestinationKinesisFirehoseDestination))
  add(query_606271, "EventDestination.CloudWatchDestination",
      newJString(EventDestinationCloudWatchDestination))
  add(query_606271, "Version", newJString(Version))
  if EventDestinationMatchingEventTypes != nil:
    query_606271.add "EventDestination.MatchingEventTypes",
                    EventDestinationMatchingEventTypes
  result = call_606270.call(nil, query_606271, nil, nil, nil)

var getCreateConfigurationSetEventDestination* = Call_GetCreateConfigurationSetEventDestination_606250(
    name: "getCreateConfigurationSetEventDestination", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=CreateConfigurationSetEventDestination",
    validator: validate_GetCreateConfigurationSetEventDestination_606251,
    base: "/", url: url_GetCreateConfigurationSetEventDestination_606252,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateConfigurationSetTrackingOptions_606312 = ref object of OpenApiRestCall_605589
proc url_PostCreateConfigurationSetTrackingOptions_606314(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateConfigurationSetTrackingOptions_606313(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606315 = query.getOrDefault("Action")
  valid_606315 = validateParameter(valid_606315, JString, required = true, default = newJString(
      "CreateConfigurationSetTrackingOptions"))
  if valid_606315 != nil:
    section.add "Action", valid_606315
  var valid_606316 = query.getOrDefault("Version")
  valid_606316 = validateParameter(valid_606316, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606316 != nil:
    section.add "Version", valid_606316
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606317 = header.getOrDefault("X-Amz-Signature")
  valid_606317 = validateParameter(valid_606317, JString, required = false,
                                 default = nil)
  if valid_606317 != nil:
    section.add "X-Amz-Signature", valid_606317
  var valid_606318 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606318 = validateParameter(valid_606318, JString, required = false,
                                 default = nil)
  if valid_606318 != nil:
    section.add "X-Amz-Content-Sha256", valid_606318
  var valid_606319 = header.getOrDefault("X-Amz-Date")
  valid_606319 = validateParameter(valid_606319, JString, required = false,
                                 default = nil)
  if valid_606319 != nil:
    section.add "X-Amz-Date", valid_606319
  var valid_606320 = header.getOrDefault("X-Amz-Credential")
  valid_606320 = validateParameter(valid_606320, JString, required = false,
                                 default = nil)
  if valid_606320 != nil:
    section.add "X-Amz-Credential", valid_606320
  var valid_606321 = header.getOrDefault("X-Amz-Security-Token")
  valid_606321 = validateParameter(valid_606321, JString, required = false,
                                 default = nil)
  if valid_606321 != nil:
    section.add "X-Amz-Security-Token", valid_606321
  var valid_606322 = header.getOrDefault("X-Amz-Algorithm")
  valid_606322 = validateParameter(valid_606322, JString, required = false,
                                 default = nil)
  if valid_606322 != nil:
    section.add "X-Amz-Algorithm", valid_606322
  var valid_606323 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606323 = validateParameter(valid_606323, JString, required = false,
                                 default = nil)
  if valid_606323 != nil:
    section.add "X-Amz-SignedHeaders", valid_606323
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that the tracking options should be associated with.
  ##   TrackingOptions.CustomRedirectDomain: JString
  ##                                       : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_606324 = formData.getOrDefault("ConfigurationSetName")
  valid_606324 = validateParameter(valid_606324, JString, required = true,
                                 default = nil)
  if valid_606324 != nil:
    section.add "ConfigurationSetName", valid_606324
  var valid_606325 = formData.getOrDefault("TrackingOptions.CustomRedirectDomain")
  valid_606325 = validateParameter(valid_606325, JString, required = false,
                                 default = nil)
  if valid_606325 != nil:
    section.add "TrackingOptions.CustomRedirectDomain", valid_606325
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606326: Call_PostCreateConfigurationSetTrackingOptions_606312;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_606326.validator(path, query, header, formData, body)
  let scheme = call_606326.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606326.url(scheme.get, call_606326.host, call_606326.base,
                         call_606326.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606326, url, valid)

proc call*(call_606327: Call_PostCreateConfigurationSetTrackingOptions_606312;
          ConfigurationSetName: string;
          Action: string = "CreateConfigurationSetTrackingOptions";
          Version: string = "2010-12-01";
          TrackingOptionsCustomRedirectDomain: string = ""): Recallable =
  ## postCreateConfigurationSetTrackingOptions
  ## <p>Creates an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that the tracking options should be associated with.
  ##   Version: string (required)
  ##   TrackingOptionsCustomRedirectDomain: string
  ##                                      : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  var query_606328 = newJObject()
  var formData_606329 = newJObject()
  add(query_606328, "Action", newJString(Action))
  add(formData_606329, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_606328, "Version", newJString(Version))
  add(formData_606329, "TrackingOptions.CustomRedirectDomain",
      newJString(TrackingOptionsCustomRedirectDomain))
  result = call_606327.call(nil, query_606328, nil, formData_606329, nil)

var postCreateConfigurationSetTrackingOptions* = Call_PostCreateConfigurationSetTrackingOptions_606312(
    name: "postCreateConfigurationSetTrackingOptions", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=CreateConfigurationSetTrackingOptions",
    validator: validate_PostCreateConfigurationSetTrackingOptions_606313,
    base: "/", url: url_PostCreateConfigurationSetTrackingOptions_606314,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateConfigurationSetTrackingOptions_606295 = ref object of OpenApiRestCall_605589
proc url_GetCreateConfigurationSetTrackingOptions_606297(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateConfigurationSetTrackingOptions_606296(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TrackingOptions.CustomRedirectDomain: JString
  ##                                       : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that the tracking options should be associated with.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606298 = query.getOrDefault("TrackingOptions.CustomRedirectDomain")
  valid_606298 = validateParameter(valid_606298, JString, required = false,
                                 default = nil)
  if valid_606298 != nil:
    section.add "TrackingOptions.CustomRedirectDomain", valid_606298
  assert query != nil, "query argument is necessary due to required `ConfigurationSetName` field"
  var valid_606299 = query.getOrDefault("ConfigurationSetName")
  valid_606299 = validateParameter(valid_606299, JString, required = true,
                                 default = nil)
  if valid_606299 != nil:
    section.add "ConfigurationSetName", valid_606299
  var valid_606300 = query.getOrDefault("Action")
  valid_606300 = validateParameter(valid_606300, JString, required = true, default = newJString(
      "CreateConfigurationSetTrackingOptions"))
  if valid_606300 != nil:
    section.add "Action", valid_606300
  var valid_606301 = query.getOrDefault("Version")
  valid_606301 = validateParameter(valid_606301, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606301 != nil:
    section.add "Version", valid_606301
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606302 = header.getOrDefault("X-Amz-Signature")
  valid_606302 = validateParameter(valid_606302, JString, required = false,
                                 default = nil)
  if valid_606302 != nil:
    section.add "X-Amz-Signature", valid_606302
  var valid_606303 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606303 = validateParameter(valid_606303, JString, required = false,
                                 default = nil)
  if valid_606303 != nil:
    section.add "X-Amz-Content-Sha256", valid_606303
  var valid_606304 = header.getOrDefault("X-Amz-Date")
  valid_606304 = validateParameter(valid_606304, JString, required = false,
                                 default = nil)
  if valid_606304 != nil:
    section.add "X-Amz-Date", valid_606304
  var valid_606305 = header.getOrDefault("X-Amz-Credential")
  valid_606305 = validateParameter(valid_606305, JString, required = false,
                                 default = nil)
  if valid_606305 != nil:
    section.add "X-Amz-Credential", valid_606305
  var valid_606306 = header.getOrDefault("X-Amz-Security-Token")
  valid_606306 = validateParameter(valid_606306, JString, required = false,
                                 default = nil)
  if valid_606306 != nil:
    section.add "X-Amz-Security-Token", valid_606306
  var valid_606307 = header.getOrDefault("X-Amz-Algorithm")
  valid_606307 = validateParameter(valid_606307, JString, required = false,
                                 default = nil)
  if valid_606307 != nil:
    section.add "X-Amz-Algorithm", valid_606307
  var valid_606308 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606308 = validateParameter(valid_606308, JString, required = false,
                                 default = nil)
  if valid_606308 != nil:
    section.add "X-Amz-SignedHeaders", valid_606308
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606309: Call_GetCreateConfigurationSetTrackingOptions_606295;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_606309.validator(path, query, header, formData, body)
  let scheme = call_606309.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606309.url(scheme.get, call_606309.host, call_606309.base,
                         call_606309.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606309, url, valid)

proc call*(call_606310: Call_GetCreateConfigurationSetTrackingOptions_606295;
          ConfigurationSetName: string;
          TrackingOptionsCustomRedirectDomain: string = "";
          Action: string = "CreateConfigurationSetTrackingOptions";
          Version: string = "2010-12-01"): Recallable =
  ## getCreateConfigurationSetTrackingOptions
  ## <p>Creates an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ##   TrackingOptionsCustomRedirectDomain: string
  ##                                      : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that the tracking options should be associated with.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606311 = newJObject()
  add(query_606311, "TrackingOptions.CustomRedirectDomain",
      newJString(TrackingOptionsCustomRedirectDomain))
  add(query_606311, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_606311, "Action", newJString(Action))
  add(query_606311, "Version", newJString(Version))
  result = call_606310.call(nil, query_606311, nil, nil, nil)

var getCreateConfigurationSetTrackingOptions* = Call_GetCreateConfigurationSetTrackingOptions_606295(
    name: "getCreateConfigurationSetTrackingOptions", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=CreateConfigurationSetTrackingOptions",
    validator: validate_GetCreateConfigurationSetTrackingOptions_606296,
    base: "/", url: url_GetCreateConfigurationSetTrackingOptions_606297,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCustomVerificationEmailTemplate_606351 = ref object of OpenApiRestCall_605589
proc url_PostCreateCustomVerificationEmailTemplate_606353(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateCustomVerificationEmailTemplate_606352(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606354 = query.getOrDefault("Action")
  valid_606354 = validateParameter(valid_606354, JString, required = true, default = newJString(
      "CreateCustomVerificationEmailTemplate"))
  if valid_606354 != nil:
    section.add "Action", valid_606354
  var valid_606355 = query.getOrDefault("Version")
  valid_606355 = validateParameter(valid_606355, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606355 != nil:
    section.add "Version", valid_606355
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606356 = header.getOrDefault("X-Amz-Signature")
  valid_606356 = validateParameter(valid_606356, JString, required = false,
                                 default = nil)
  if valid_606356 != nil:
    section.add "X-Amz-Signature", valid_606356
  var valid_606357 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606357 = validateParameter(valid_606357, JString, required = false,
                                 default = nil)
  if valid_606357 != nil:
    section.add "X-Amz-Content-Sha256", valid_606357
  var valid_606358 = header.getOrDefault("X-Amz-Date")
  valid_606358 = validateParameter(valid_606358, JString, required = false,
                                 default = nil)
  if valid_606358 != nil:
    section.add "X-Amz-Date", valid_606358
  var valid_606359 = header.getOrDefault("X-Amz-Credential")
  valid_606359 = validateParameter(valid_606359, JString, required = false,
                                 default = nil)
  if valid_606359 != nil:
    section.add "X-Amz-Credential", valid_606359
  var valid_606360 = header.getOrDefault("X-Amz-Security-Token")
  valid_606360 = validateParameter(valid_606360, JString, required = false,
                                 default = nil)
  if valid_606360 != nil:
    section.add "X-Amz-Security-Token", valid_606360
  var valid_606361 = header.getOrDefault("X-Amz-Algorithm")
  valid_606361 = validateParameter(valid_606361, JString, required = false,
                                 default = nil)
  if valid_606361 != nil:
    section.add "X-Amz-Algorithm", valid_606361
  var valid_606362 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606362 = validateParameter(valid_606362, JString, required = false,
                                 default = nil)
  if valid_606362 != nil:
    section.add "X-Amz-SignedHeaders", valid_606362
  result.add "header", section
  ## parameters in `formData` object:
  ##   TemplateSubject: JString (required)
  ##                  : The subject line of the custom verification email.
  ##   FromEmailAddress: JString (required)
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template.
  ##   SuccessRedirectionURL: JString (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   TemplateContent: JString (required)
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   FailureRedirectionURL: JString (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `TemplateSubject` field"
  var valid_606363 = formData.getOrDefault("TemplateSubject")
  valid_606363 = validateParameter(valid_606363, JString, required = true,
                                 default = nil)
  if valid_606363 != nil:
    section.add "TemplateSubject", valid_606363
  var valid_606364 = formData.getOrDefault("FromEmailAddress")
  valid_606364 = validateParameter(valid_606364, JString, required = true,
                                 default = nil)
  if valid_606364 != nil:
    section.add "FromEmailAddress", valid_606364
  var valid_606365 = formData.getOrDefault("TemplateName")
  valid_606365 = validateParameter(valid_606365, JString, required = true,
                                 default = nil)
  if valid_606365 != nil:
    section.add "TemplateName", valid_606365
  var valid_606366 = formData.getOrDefault("SuccessRedirectionURL")
  valid_606366 = validateParameter(valid_606366, JString, required = true,
                                 default = nil)
  if valid_606366 != nil:
    section.add "SuccessRedirectionURL", valid_606366
  var valid_606367 = formData.getOrDefault("TemplateContent")
  valid_606367 = validateParameter(valid_606367, JString, required = true,
                                 default = nil)
  if valid_606367 != nil:
    section.add "TemplateContent", valid_606367
  var valid_606368 = formData.getOrDefault("FailureRedirectionURL")
  valid_606368 = validateParameter(valid_606368, JString, required = true,
                                 default = nil)
  if valid_606368 != nil:
    section.add "FailureRedirectionURL", valid_606368
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606369: Call_PostCreateCustomVerificationEmailTemplate_606351;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_606369.validator(path, query, header, formData, body)
  let scheme = call_606369.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606369.url(scheme.get, call_606369.host, call_606369.base,
                         call_606369.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606369, url, valid)

proc call*(call_606370: Call_PostCreateCustomVerificationEmailTemplate_606351;
          TemplateSubject: string; FromEmailAddress: string; TemplateName: string;
          SuccessRedirectionURL: string; TemplateContent: string;
          FailureRedirectionURL: string;
          Action: string = "CreateCustomVerificationEmailTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## postCreateCustomVerificationEmailTemplate
  ## <p>Creates a new custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateSubject: string (required)
  ##                  : The subject line of the custom verification email.
  ##   FromEmailAddress: string (required)
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template.
  ##   SuccessRedirectionURL: string (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   TemplateContent: string (required)
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   Action: string (required)
  ##   FailureRedirectionURL: string (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   Version: string (required)
  var query_606371 = newJObject()
  var formData_606372 = newJObject()
  add(formData_606372, "TemplateSubject", newJString(TemplateSubject))
  add(formData_606372, "FromEmailAddress", newJString(FromEmailAddress))
  add(formData_606372, "TemplateName", newJString(TemplateName))
  add(formData_606372, "SuccessRedirectionURL", newJString(SuccessRedirectionURL))
  add(formData_606372, "TemplateContent", newJString(TemplateContent))
  add(query_606371, "Action", newJString(Action))
  add(formData_606372, "FailureRedirectionURL", newJString(FailureRedirectionURL))
  add(query_606371, "Version", newJString(Version))
  result = call_606370.call(nil, query_606371, nil, formData_606372, nil)

var postCreateCustomVerificationEmailTemplate* = Call_PostCreateCustomVerificationEmailTemplate_606351(
    name: "postCreateCustomVerificationEmailTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=CreateCustomVerificationEmailTemplate",
    validator: validate_PostCreateCustomVerificationEmailTemplate_606352,
    base: "/", url: url_PostCreateCustomVerificationEmailTemplate_606353,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCustomVerificationEmailTemplate_606330 = ref object of OpenApiRestCall_605589
proc url_GetCreateCustomVerificationEmailTemplate_606332(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateCustomVerificationEmailTemplate_606331(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TemplateSubject: JString (required)
  ##                  : The subject line of the custom verification email.
  ##   FromEmailAddress: JString (required)
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateContent: JString (required)
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   SuccessRedirectionURL: JString (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   Action: JString (required)
  ##   FailureRedirectionURL: JString (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   Version: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `TemplateSubject` field"
  var valid_606333 = query.getOrDefault("TemplateSubject")
  valid_606333 = validateParameter(valid_606333, JString, required = true,
                                 default = nil)
  if valid_606333 != nil:
    section.add "TemplateSubject", valid_606333
  var valid_606334 = query.getOrDefault("FromEmailAddress")
  valid_606334 = validateParameter(valid_606334, JString, required = true,
                                 default = nil)
  if valid_606334 != nil:
    section.add "FromEmailAddress", valid_606334
  var valid_606335 = query.getOrDefault("TemplateContent")
  valid_606335 = validateParameter(valid_606335, JString, required = true,
                                 default = nil)
  if valid_606335 != nil:
    section.add "TemplateContent", valid_606335
  var valid_606336 = query.getOrDefault("SuccessRedirectionURL")
  valid_606336 = validateParameter(valid_606336, JString, required = true,
                                 default = nil)
  if valid_606336 != nil:
    section.add "SuccessRedirectionURL", valid_606336
  var valid_606337 = query.getOrDefault("Action")
  valid_606337 = validateParameter(valid_606337, JString, required = true, default = newJString(
      "CreateCustomVerificationEmailTemplate"))
  if valid_606337 != nil:
    section.add "Action", valid_606337
  var valid_606338 = query.getOrDefault("FailureRedirectionURL")
  valid_606338 = validateParameter(valid_606338, JString, required = true,
                                 default = nil)
  if valid_606338 != nil:
    section.add "FailureRedirectionURL", valid_606338
  var valid_606339 = query.getOrDefault("Version")
  valid_606339 = validateParameter(valid_606339, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606339 != nil:
    section.add "Version", valid_606339
  var valid_606340 = query.getOrDefault("TemplateName")
  valid_606340 = validateParameter(valid_606340, JString, required = true,
                                 default = nil)
  if valid_606340 != nil:
    section.add "TemplateName", valid_606340
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606341 = header.getOrDefault("X-Amz-Signature")
  valid_606341 = validateParameter(valid_606341, JString, required = false,
                                 default = nil)
  if valid_606341 != nil:
    section.add "X-Amz-Signature", valid_606341
  var valid_606342 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606342 = validateParameter(valid_606342, JString, required = false,
                                 default = nil)
  if valid_606342 != nil:
    section.add "X-Amz-Content-Sha256", valid_606342
  var valid_606343 = header.getOrDefault("X-Amz-Date")
  valid_606343 = validateParameter(valid_606343, JString, required = false,
                                 default = nil)
  if valid_606343 != nil:
    section.add "X-Amz-Date", valid_606343
  var valid_606344 = header.getOrDefault("X-Amz-Credential")
  valid_606344 = validateParameter(valid_606344, JString, required = false,
                                 default = nil)
  if valid_606344 != nil:
    section.add "X-Amz-Credential", valid_606344
  var valid_606345 = header.getOrDefault("X-Amz-Security-Token")
  valid_606345 = validateParameter(valid_606345, JString, required = false,
                                 default = nil)
  if valid_606345 != nil:
    section.add "X-Amz-Security-Token", valid_606345
  var valid_606346 = header.getOrDefault("X-Amz-Algorithm")
  valid_606346 = validateParameter(valid_606346, JString, required = false,
                                 default = nil)
  if valid_606346 != nil:
    section.add "X-Amz-Algorithm", valid_606346
  var valid_606347 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606347 = validateParameter(valid_606347, JString, required = false,
                                 default = nil)
  if valid_606347 != nil:
    section.add "X-Amz-SignedHeaders", valid_606347
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606348: Call_GetCreateCustomVerificationEmailTemplate_606330;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_606348.validator(path, query, header, formData, body)
  let scheme = call_606348.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606348.url(scheme.get, call_606348.host, call_606348.base,
                         call_606348.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606348, url, valid)

proc call*(call_606349: Call_GetCreateCustomVerificationEmailTemplate_606330;
          TemplateSubject: string; FromEmailAddress: string;
          TemplateContent: string; SuccessRedirectionURL: string;
          FailureRedirectionURL: string; TemplateName: string;
          Action: string = "CreateCustomVerificationEmailTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## getCreateCustomVerificationEmailTemplate
  ## <p>Creates a new custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateSubject: string (required)
  ##                  : The subject line of the custom verification email.
  ##   FromEmailAddress: string (required)
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateContent: string (required)
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   SuccessRedirectionURL: string (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   Action: string (required)
  ##   FailureRedirectionURL: string (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   Version: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template.
  var query_606350 = newJObject()
  add(query_606350, "TemplateSubject", newJString(TemplateSubject))
  add(query_606350, "FromEmailAddress", newJString(FromEmailAddress))
  add(query_606350, "TemplateContent", newJString(TemplateContent))
  add(query_606350, "SuccessRedirectionURL", newJString(SuccessRedirectionURL))
  add(query_606350, "Action", newJString(Action))
  add(query_606350, "FailureRedirectionURL", newJString(FailureRedirectionURL))
  add(query_606350, "Version", newJString(Version))
  add(query_606350, "TemplateName", newJString(TemplateName))
  result = call_606349.call(nil, query_606350, nil, nil, nil)

var getCreateCustomVerificationEmailTemplate* = Call_GetCreateCustomVerificationEmailTemplate_606330(
    name: "getCreateCustomVerificationEmailTemplate", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=CreateCustomVerificationEmailTemplate",
    validator: validate_GetCreateCustomVerificationEmailTemplate_606331,
    base: "/", url: url_GetCreateCustomVerificationEmailTemplate_606332,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateReceiptFilter_606390 = ref object of OpenApiRestCall_605589
proc url_PostCreateReceiptFilter_606392(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateReceiptFilter_606391(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new IP address filter.</p> <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606393 = query.getOrDefault("Action")
  valid_606393 = validateParameter(valid_606393, JString, required = true,
                                 default = newJString("CreateReceiptFilter"))
  if valid_606393 != nil:
    section.add "Action", valid_606393
  var valid_606394 = query.getOrDefault("Version")
  valid_606394 = validateParameter(valid_606394, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606394 != nil:
    section.add "Version", valid_606394
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606395 = header.getOrDefault("X-Amz-Signature")
  valid_606395 = validateParameter(valid_606395, JString, required = false,
                                 default = nil)
  if valid_606395 != nil:
    section.add "X-Amz-Signature", valid_606395
  var valid_606396 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606396 = validateParameter(valid_606396, JString, required = false,
                                 default = nil)
  if valid_606396 != nil:
    section.add "X-Amz-Content-Sha256", valid_606396
  var valid_606397 = header.getOrDefault("X-Amz-Date")
  valid_606397 = validateParameter(valid_606397, JString, required = false,
                                 default = nil)
  if valid_606397 != nil:
    section.add "X-Amz-Date", valid_606397
  var valid_606398 = header.getOrDefault("X-Amz-Credential")
  valid_606398 = validateParameter(valid_606398, JString, required = false,
                                 default = nil)
  if valid_606398 != nil:
    section.add "X-Amz-Credential", valid_606398
  var valid_606399 = header.getOrDefault("X-Amz-Security-Token")
  valid_606399 = validateParameter(valid_606399, JString, required = false,
                                 default = nil)
  if valid_606399 != nil:
    section.add "X-Amz-Security-Token", valid_606399
  var valid_606400 = header.getOrDefault("X-Amz-Algorithm")
  valid_606400 = validateParameter(valid_606400, JString, required = false,
                                 default = nil)
  if valid_606400 != nil:
    section.add "X-Amz-Algorithm", valid_606400
  var valid_606401 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606401 = validateParameter(valid_606401, JString, required = false,
                                 default = nil)
  if valid_606401 != nil:
    section.add "X-Amz-SignedHeaders", valid_606401
  result.add "header", section
  ## parameters in `formData` object:
  ##   Filter.IpFilter: JString
  ##                  : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## A structure that provides the IP addresses to block or allow, and whether to block or allow incoming mail from them.
  ##   Filter.Name: JString
  ##              : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the IP address filter. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  section = newJObject()
  var valid_606402 = formData.getOrDefault("Filter.IpFilter")
  valid_606402 = validateParameter(valid_606402, JString, required = false,
                                 default = nil)
  if valid_606402 != nil:
    section.add "Filter.IpFilter", valid_606402
  var valid_606403 = formData.getOrDefault("Filter.Name")
  valid_606403 = validateParameter(valid_606403, JString, required = false,
                                 default = nil)
  if valid_606403 != nil:
    section.add "Filter.Name", valid_606403
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606404: Call_PostCreateReceiptFilter_606390; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new IP address filter.</p> <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_606404.validator(path, query, header, formData, body)
  let scheme = call_606404.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606404.url(scheme.get, call_606404.host, call_606404.base,
                         call_606404.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606404, url, valid)

proc call*(call_606405: Call_PostCreateReceiptFilter_606390;
          FilterIpFilter: string = ""; FilterName: string = "";
          Action: string = "CreateReceiptFilter"; Version: string = "2010-12-01"): Recallable =
  ## postCreateReceiptFilter
  ## <p>Creates a new IP address filter.</p> <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   FilterIpFilter: string
  ##                 : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## A structure that provides the IP addresses to block or allow, and whether to block or allow incoming mail from them.
  ##   FilterName: string
  ##             : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the IP address filter. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606406 = newJObject()
  var formData_606407 = newJObject()
  add(formData_606407, "Filter.IpFilter", newJString(FilterIpFilter))
  add(formData_606407, "Filter.Name", newJString(FilterName))
  add(query_606406, "Action", newJString(Action))
  add(query_606406, "Version", newJString(Version))
  result = call_606405.call(nil, query_606406, nil, formData_606407, nil)

var postCreateReceiptFilter* = Call_PostCreateReceiptFilter_606390(
    name: "postCreateReceiptFilter", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=CreateReceiptFilter",
    validator: validate_PostCreateReceiptFilter_606391, base: "/",
    url: url_PostCreateReceiptFilter_606392, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateReceiptFilter_606373 = ref object of OpenApiRestCall_605589
proc url_GetCreateReceiptFilter_606375(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateReceiptFilter_606374(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new IP address filter.</p> <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Filter.Name: JString
  ##              : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the IP address filter. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Filter.IpFilter: JString
  ##                  : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## A structure that provides the IP addresses to block or allow, and whether to block or allow incoming mail from them.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606376 = query.getOrDefault("Filter.Name")
  valid_606376 = validateParameter(valid_606376, JString, required = false,
                                 default = nil)
  if valid_606376 != nil:
    section.add "Filter.Name", valid_606376
  var valid_606377 = query.getOrDefault("Filter.IpFilter")
  valid_606377 = validateParameter(valid_606377, JString, required = false,
                                 default = nil)
  if valid_606377 != nil:
    section.add "Filter.IpFilter", valid_606377
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606378 = query.getOrDefault("Action")
  valid_606378 = validateParameter(valid_606378, JString, required = true,
                                 default = newJString("CreateReceiptFilter"))
  if valid_606378 != nil:
    section.add "Action", valid_606378
  var valid_606379 = query.getOrDefault("Version")
  valid_606379 = validateParameter(valid_606379, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606379 != nil:
    section.add "Version", valid_606379
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606380 = header.getOrDefault("X-Amz-Signature")
  valid_606380 = validateParameter(valid_606380, JString, required = false,
                                 default = nil)
  if valid_606380 != nil:
    section.add "X-Amz-Signature", valid_606380
  var valid_606381 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606381 = validateParameter(valid_606381, JString, required = false,
                                 default = nil)
  if valid_606381 != nil:
    section.add "X-Amz-Content-Sha256", valid_606381
  var valid_606382 = header.getOrDefault("X-Amz-Date")
  valid_606382 = validateParameter(valid_606382, JString, required = false,
                                 default = nil)
  if valid_606382 != nil:
    section.add "X-Amz-Date", valid_606382
  var valid_606383 = header.getOrDefault("X-Amz-Credential")
  valid_606383 = validateParameter(valid_606383, JString, required = false,
                                 default = nil)
  if valid_606383 != nil:
    section.add "X-Amz-Credential", valid_606383
  var valid_606384 = header.getOrDefault("X-Amz-Security-Token")
  valid_606384 = validateParameter(valid_606384, JString, required = false,
                                 default = nil)
  if valid_606384 != nil:
    section.add "X-Amz-Security-Token", valid_606384
  var valid_606385 = header.getOrDefault("X-Amz-Algorithm")
  valid_606385 = validateParameter(valid_606385, JString, required = false,
                                 default = nil)
  if valid_606385 != nil:
    section.add "X-Amz-Algorithm", valid_606385
  var valid_606386 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606386 = validateParameter(valid_606386, JString, required = false,
                                 default = nil)
  if valid_606386 != nil:
    section.add "X-Amz-SignedHeaders", valid_606386
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606387: Call_GetCreateReceiptFilter_606373; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new IP address filter.</p> <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_606387.validator(path, query, header, formData, body)
  let scheme = call_606387.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606387.url(scheme.get, call_606387.host, call_606387.base,
                         call_606387.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606387, url, valid)

proc call*(call_606388: Call_GetCreateReceiptFilter_606373;
          FilterName: string = ""; FilterIpFilter: string = "";
          Action: string = "CreateReceiptFilter"; Version: string = "2010-12-01"): Recallable =
  ## getCreateReceiptFilter
  ## <p>Creates a new IP address filter.</p> <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   FilterName: string
  ##             : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the IP address filter. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   FilterIpFilter: string
  ##                 : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## A structure that provides the IP addresses to block or allow, and whether to block or allow incoming mail from them.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606389 = newJObject()
  add(query_606389, "Filter.Name", newJString(FilterName))
  add(query_606389, "Filter.IpFilter", newJString(FilterIpFilter))
  add(query_606389, "Action", newJString(Action))
  add(query_606389, "Version", newJString(Version))
  result = call_606388.call(nil, query_606389, nil, nil, nil)

var getCreateReceiptFilter* = Call_GetCreateReceiptFilter_606373(
    name: "getCreateReceiptFilter", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=CreateReceiptFilter",
    validator: validate_GetCreateReceiptFilter_606374, base: "/",
    url: url_GetCreateReceiptFilter_606375, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateReceiptRule_606431 = ref object of OpenApiRestCall_605589
proc url_PostCreateReceiptRule_606433(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateReceiptRule_606432(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606434 = query.getOrDefault("Action")
  valid_606434 = validateParameter(valid_606434, JString, required = true,
                                 default = newJString("CreateReceiptRule"))
  if valid_606434 != nil:
    section.add "Action", valid_606434
  var valid_606435 = query.getOrDefault("Version")
  valid_606435 = validateParameter(valid_606435, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606435 != nil:
    section.add "Version", valid_606435
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606436 = header.getOrDefault("X-Amz-Signature")
  valid_606436 = validateParameter(valid_606436, JString, required = false,
                                 default = nil)
  if valid_606436 != nil:
    section.add "X-Amz-Signature", valid_606436
  var valid_606437 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606437 = validateParameter(valid_606437, JString, required = false,
                                 default = nil)
  if valid_606437 != nil:
    section.add "X-Amz-Content-Sha256", valid_606437
  var valid_606438 = header.getOrDefault("X-Amz-Date")
  valid_606438 = validateParameter(valid_606438, JString, required = false,
                                 default = nil)
  if valid_606438 != nil:
    section.add "X-Amz-Date", valid_606438
  var valid_606439 = header.getOrDefault("X-Amz-Credential")
  valid_606439 = validateParameter(valid_606439, JString, required = false,
                                 default = nil)
  if valid_606439 != nil:
    section.add "X-Amz-Credential", valid_606439
  var valid_606440 = header.getOrDefault("X-Amz-Security-Token")
  valid_606440 = validateParameter(valid_606440, JString, required = false,
                                 default = nil)
  if valid_606440 != nil:
    section.add "X-Amz-Security-Token", valid_606440
  var valid_606441 = header.getOrDefault("X-Amz-Algorithm")
  valid_606441 = validateParameter(valid_606441, JString, required = false,
                                 default = nil)
  if valid_606441 != nil:
    section.add "X-Amz-Algorithm", valid_606441
  var valid_606442 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606442 = validateParameter(valid_606442, JString, required = false,
                                 default = nil)
  if valid_606442 != nil:
    section.add "X-Amz-SignedHeaders", valid_606442
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleSetName: JString (required)
  ##              : The name of the rule set that the receipt rule will be added to.
  ##   Rule.Recipients: JArray
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   Rule.Enabled: JString
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   After: JString
  ##        : The name of an existing rule after which the new rule will be placed. If this parameter is null, the new rule will be inserted at the beginning of the rule list.
  ##   Rule.Actions: JArray
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   Rule.TlsPolicy: JString
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   Rule.ScanEnabled: JString
  ##                   : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   Rule.Name: JString
  ##            : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleSetName` field"
  var valid_606443 = formData.getOrDefault("RuleSetName")
  valid_606443 = validateParameter(valid_606443, JString, required = true,
                                 default = nil)
  if valid_606443 != nil:
    section.add "RuleSetName", valid_606443
  var valid_606444 = formData.getOrDefault("Rule.Recipients")
  valid_606444 = validateParameter(valid_606444, JArray, required = false,
                                 default = nil)
  if valid_606444 != nil:
    section.add "Rule.Recipients", valid_606444
  var valid_606445 = formData.getOrDefault("Rule.Enabled")
  valid_606445 = validateParameter(valid_606445, JString, required = false,
                                 default = nil)
  if valid_606445 != nil:
    section.add "Rule.Enabled", valid_606445
  var valid_606446 = formData.getOrDefault("After")
  valid_606446 = validateParameter(valid_606446, JString, required = false,
                                 default = nil)
  if valid_606446 != nil:
    section.add "After", valid_606446
  var valid_606447 = formData.getOrDefault("Rule.Actions")
  valid_606447 = validateParameter(valid_606447, JArray, required = false,
                                 default = nil)
  if valid_606447 != nil:
    section.add "Rule.Actions", valid_606447
  var valid_606448 = formData.getOrDefault("Rule.TlsPolicy")
  valid_606448 = validateParameter(valid_606448, JString, required = false,
                                 default = nil)
  if valid_606448 != nil:
    section.add "Rule.TlsPolicy", valid_606448
  var valid_606449 = formData.getOrDefault("Rule.ScanEnabled")
  valid_606449 = validateParameter(valid_606449, JString, required = false,
                                 default = nil)
  if valid_606449 != nil:
    section.add "Rule.ScanEnabled", valid_606449
  var valid_606450 = formData.getOrDefault("Rule.Name")
  valid_606450 = validateParameter(valid_606450, JString, required = false,
                                 default = nil)
  if valid_606450 != nil:
    section.add "Rule.Name", valid_606450
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606451: Call_PostCreateReceiptRule_606431; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_606451.validator(path, query, header, formData, body)
  let scheme = call_606451.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606451.url(scheme.get, call_606451.host, call_606451.base,
                         call_606451.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606451, url, valid)

proc call*(call_606452: Call_PostCreateReceiptRule_606431; RuleSetName: string;
          RuleRecipients: JsonNode = nil; RuleEnabled: string = ""; After: string = "";
          RuleActions: JsonNode = nil; RuleTlsPolicy: string = "";
          Action: string = "CreateReceiptRule"; Version: string = "2010-12-01";
          RuleScanEnabled: string = ""; RuleName: string = ""): Recallable =
  ## postCreateReceiptRule
  ## <p>Creates a receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : The name of the rule set that the receipt rule will be added to.
  ##   RuleRecipients: JArray
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   RuleEnabled: string
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   After: string
  ##        : The name of an existing rule after which the new rule will be placed. If this parameter is null, the new rule will be inserted at the beginning of the rule list.
  ##   RuleActions: JArray
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   RuleTlsPolicy: string
  ##                : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   RuleScanEnabled: string
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   RuleName: string
  ##           : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  var query_606453 = newJObject()
  var formData_606454 = newJObject()
  add(formData_606454, "RuleSetName", newJString(RuleSetName))
  if RuleRecipients != nil:
    formData_606454.add "Rule.Recipients", RuleRecipients
  add(formData_606454, "Rule.Enabled", newJString(RuleEnabled))
  add(formData_606454, "After", newJString(After))
  if RuleActions != nil:
    formData_606454.add "Rule.Actions", RuleActions
  add(formData_606454, "Rule.TlsPolicy", newJString(RuleTlsPolicy))
  add(query_606453, "Action", newJString(Action))
  add(query_606453, "Version", newJString(Version))
  add(formData_606454, "Rule.ScanEnabled", newJString(RuleScanEnabled))
  add(formData_606454, "Rule.Name", newJString(RuleName))
  result = call_606452.call(nil, query_606453, nil, formData_606454, nil)

var postCreateReceiptRule* = Call_PostCreateReceiptRule_606431(
    name: "postCreateReceiptRule", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=CreateReceiptRule",
    validator: validate_PostCreateReceiptRule_606432, base: "/",
    url: url_PostCreateReceiptRule_606433, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateReceiptRule_606408 = ref object of OpenApiRestCall_605589
proc url_GetCreateReceiptRule_606410(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateReceiptRule_606409(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Rule.Enabled: JString
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   Rule.Name: JString
  ##            : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   After: JString
  ##        : The name of an existing rule after which the new rule will be placed. If this parameter is null, the new rule will be inserted at the beginning of the rule list.
  ##   Rule.ScanEnabled: JString
  ##                   : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   Rule.Recipients: JArray
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   Action: JString (required)
  ##   RuleSetName: JString (required)
  ##              : The name of the rule set that the receipt rule will be added to.
  ##   Rule.TlsPolicy: JString
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   Rule.Actions: JArray
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   Version: JString (required)
  section = newJObject()
  var valid_606411 = query.getOrDefault("Rule.Enabled")
  valid_606411 = validateParameter(valid_606411, JString, required = false,
                                 default = nil)
  if valid_606411 != nil:
    section.add "Rule.Enabled", valid_606411
  var valid_606412 = query.getOrDefault("Rule.Name")
  valid_606412 = validateParameter(valid_606412, JString, required = false,
                                 default = nil)
  if valid_606412 != nil:
    section.add "Rule.Name", valid_606412
  var valid_606413 = query.getOrDefault("After")
  valid_606413 = validateParameter(valid_606413, JString, required = false,
                                 default = nil)
  if valid_606413 != nil:
    section.add "After", valid_606413
  var valid_606414 = query.getOrDefault("Rule.ScanEnabled")
  valid_606414 = validateParameter(valid_606414, JString, required = false,
                                 default = nil)
  if valid_606414 != nil:
    section.add "Rule.ScanEnabled", valid_606414
  var valid_606415 = query.getOrDefault("Rule.Recipients")
  valid_606415 = validateParameter(valid_606415, JArray, required = false,
                                 default = nil)
  if valid_606415 != nil:
    section.add "Rule.Recipients", valid_606415
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606416 = query.getOrDefault("Action")
  valid_606416 = validateParameter(valid_606416, JString, required = true,
                                 default = newJString("CreateReceiptRule"))
  if valid_606416 != nil:
    section.add "Action", valid_606416
  var valid_606417 = query.getOrDefault("RuleSetName")
  valid_606417 = validateParameter(valid_606417, JString, required = true,
                                 default = nil)
  if valid_606417 != nil:
    section.add "RuleSetName", valid_606417
  var valid_606418 = query.getOrDefault("Rule.TlsPolicy")
  valid_606418 = validateParameter(valid_606418, JString, required = false,
                                 default = nil)
  if valid_606418 != nil:
    section.add "Rule.TlsPolicy", valid_606418
  var valid_606419 = query.getOrDefault("Rule.Actions")
  valid_606419 = validateParameter(valid_606419, JArray, required = false,
                                 default = nil)
  if valid_606419 != nil:
    section.add "Rule.Actions", valid_606419
  var valid_606420 = query.getOrDefault("Version")
  valid_606420 = validateParameter(valid_606420, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606420 != nil:
    section.add "Version", valid_606420
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606421 = header.getOrDefault("X-Amz-Signature")
  valid_606421 = validateParameter(valid_606421, JString, required = false,
                                 default = nil)
  if valid_606421 != nil:
    section.add "X-Amz-Signature", valid_606421
  var valid_606422 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606422 = validateParameter(valid_606422, JString, required = false,
                                 default = nil)
  if valid_606422 != nil:
    section.add "X-Amz-Content-Sha256", valid_606422
  var valid_606423 = header.getOrDefault("X-Amz-Date")
  valid_606423 = validateParameter(valid_606423, JString, required = false,
                                 default = nil)
  if valid_606423 != nil:
    section.add "X-Amz-Date", valid_606423
  var valid_606424 = header.getOrDefault("X-Amz-Credential")
  valid_606424 = validateParameter(valid_606424, JString, required = false,
                                 default = nil)
  if valid_606424 != nil:
    section.add "X-Amz-Credential", valid_606424
  var valid_606425 = header.getOrDefault("X-Amz-Security-Token")
  valid_606425 = validateParameter(valid_606425, JString, required = false,
                                 default = nil)
  if valid_606425 != nil:
    section.add "X-Amz-Security-Token", valid_606425
  var valid_606426 = header.getOrDefault("X-Amz-Algorithm")
  valid_606426 = validateParameter(valid_606426, JString, required = false,
                                 default = nil)
  if valid_606426 != nil:
    section.add "X-Amz-Algorithm", valid_606426
  var valid_606427 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606427 = validateParameter(valid_606427, JString, required = false,
                                 default = nil)
  if valid_606427 != nil:
    section.add "X-Amz-SignedHeaders", valid_606427
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606428: Call_GetCreateReceiptRule_606408; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_606428.validator(path, query, header, formData, body)
  let scheme = call_606428.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606428.url(scheme.get, call_606428.host, call_606428.base,
                         call_606428.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606428, url, valid)

proc call*(call_606429: Call_GetCreateReceiptRule_606408; RuleSetName: string;
          RuleEnabled: string = ""; RuleName: string = ""; After: string = "";
          RuleScanEnabled: string = ""; RuleRecipients: JsonNode = nil;
          Action: string = "CreateReceiptRule"; RuleTlsPolicy: string = "";
          RuleActions: JsonNode = nil; Version: string = "2010-12-01"): Recallable =
  ## getCreateReceiptRule
  ## <p>Creates a receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleEnabled: string
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   RuleName: string
  ##           : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   After: string
  ##        : The name of an existing rule after which the new rule will be placed. If this parameter is null, the new rule will be inserted at the beginning of the rule list.
  ##   RuleScanEnabled: string
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   RuleRecipients: JArray
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   Action: string (required)
  ##   RuleSetName: string (required)
  ##              : The name of the rule set that the receipt rule will be added to.
  ##   RuleTlsPolicy: string
  ##                : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   RuleActions: JArray
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   Version: string (required)
  var query_606430 = newJObject()
  add(query_606430, "Rule.Enabled", newJString(RuleEnabled))
  add(query_606430, "Rule.Name", newJString(RuleName))
  add(query_606430, "After", newJString(After))
  add(query_606430, "Rule.ScanEnabled", newJString(RuleScanEnabled))
  if RuleRecipients != nil:
    query_606430.add "Rule.Recipients", RuleRecipients
  add(query_606430, "Action", newJString(Action))
  add(query_606430, "RuleSetName", newJString(RuleSetName))
  add(query_606430, "Rule.TlsPolicy", newJString(RuleTlsPolicy))
  if RuleActions != nil:
    query_606430.add "Rule.Actions", RuleActions
  add(query_606430, "Version", newJString(Version))
  result = call_606429.call(nil, query_606430, nil, nil, nil)

var getCreateReceiptRule* = Call_GetCreateReceiptRule_606408(
    name: "getCreateReceiptRule", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=CreateReceiptRule",
    validator: validate_GetCreateReceiptRule_606409, base: "/",
    url: url_GetCreateReceiptRule_606410, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateReceiptRuleSet_606471 = ref object of OpenApiRestCall_605589
proc url_PostCreateReceiptRuleSet_606473(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateReceiptRuleSet_606472(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an empty receipt rule set.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606474 = query.getOrDefault("Action")
  valid_606474 = validateParameter(valid_606474, JString, required = true,
                                 default = newJString("CreateReceiptRuleSet"))
  if valid_606474 != nil:
    section.add "Action", valid_606474
  var valid_606475 = query.getOrDefault("Version")
  valid_606475 = validateParameter(valid_606475, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606475 != nil:
    section.add "Version", valid_606475
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606476 = header.getOrDefault("X-Amz-Signature")
  valid_606476 = validateParameter(valid_606476, JString, required = false,
                                 default = nil)
  if valid_606476 != nil:
    section.add "X-Amz-Signature", valid_606476
  var valid_606477 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606477 = validateParameter(valid_606477, JString, required = false,
                                 default = nil)
  if valid_606477 != nil:
    section.add "X-Amz-Content-Sha256", valid_606477
  var valid_606478 = header.getOrDefault("X-Amz-Date")
  valid_606478 = validateParameter(valid_606478, JString, required = false,
                                 default = nil)
  if valid_606478 != nil:
    section.add "X-Amz-Date", valid_606478
  var valid_606479 = header.getOrDefault("X-Amz-Credential")
  valid_606479 = validateParameter(valid_606479, JString, required = false,
                                 default = nil)
  if valid_606479 != nil:
    section.add "X-Amz-Credential", valid_606479
  var valid_606480 = header.getOrDefault("X-Amz-Security-Token")
  valid_606480 = validateParameter(valid_606480, JString, required = false,
                                 default = nil)
  if valid_606480 != nil:
    section.add "X-Amz-Security-Token", valid_606480
  var valid_606481 = header.getOrDefault("X-Amz-Algorithm")
  valid_606481 = validateParameter(valid_606481, JString, required = false,
                                 default = nil)
  if valid_606481 != nil:
    section.add "X-Amz-Algorithm", valid_606481
  var valid_606482 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606482 = validateParameter(valid_606482, JString, required = false,
                                 default = nil)
  if valid_606482 != nil:
    section.add "X-Amz-SignedHeaders", valid_606482
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleSetName: JString (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleSetName` field"
  var valid_606483 = formData.getOrDefault("RuleSetName")
  valid_606483 = validateParameter(valid_606483, JString, required = true,
                                 default = nil)
  if valid_606483 != nil:
    section.add "RuleSetName", valid_606483
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606484: Call_PostCreateReceiptRuleSet_606471; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an empty receipt rule set.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_606484.validator(path, query, header, formData, body)
  let scheme = call_606484.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606484.url(scheme.get, call_606484.host, call_606484.base,
                         call_606484.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606484, url, valid)

proc call*(call_606485: Call_PostCreateReceiptRuleSet_606471; RuleSetName: string;
          Action: string = "CreateReceiptRuleSet"; Version: string = "2010-12-01"): Recallable =
  ## postCreateReceiptRuleSet
  ## <p>Creates an empty receipt rule set.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606486 = newJObject()
  var formData_606487 = newJObject()
  add(formData_606487, "RuleSetName", newJString(RuleSetName))
  add(query_606486, "Action", newJString(Action))
  add(query_606486, "Version", newJString(Version))
  result = call_606485.call(nil, query_606486, nil, formData_606487, nil)

var postCreateReceiptRuleSet* = Call_PostCreateReceiptRuleSet_606471(
    name: "postCreateReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=CreateReceiptRuleSet",
    validator: validate_PostCreateReceiptRuleSet_606472, base: "/",
    url: url_PostCreateReceiptRuleSet_606473, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateReceiptRuleSet_606455 = ref object of OpenApiRestCall_605589
proc url_GetCreateReceiptRuleSet_606457(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateReceiptRuleSet_606456(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an empty receipt rule set.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   RuleSetName: JString (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606458 = query.getOrDefault("Action")
  valid_606458 = validateParameter(valid_606458, JString, required = true,
                                 default = newJString("CreateReceiptRuleSet"))
  if valid_606458 != nil:
    section.add "Action", valid_606458
  var valid_606459 = query.getOrDefault("RuleSetName")
  valid_606459 = validateParameter(valid_606459, JString, required = true,
                                 default = nil)
  if valid_606459 != nil:
    section.add "RuleSetName", valid_606459
  var valid_606460 = query.getOrDefault("Version")
  valid_606460 = validateParameter(valid_606460, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606460 != nil:
    section.add "Version", valid_606460
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606461 = header.getOrDefault("X-Amz-Signature")
  valid_606461 = validateParameter(valid_606461, JString, required = false,
                                 default = nil)
  if valid_606461 != nil:
    section.add "X-Amz-Signature", valid_606461
  var valid_606462 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606462 = validateParameter(valid_606462, JString, required = false,
                                 default = nil)
  if valid_606462 != nil:
    section.add "X-Amz-Content-Sha256", valid_606462
  var valid_606463 = header.getOrDefault("X-Amz-Date")
  valid_606463 = validateParameter(valid_606463, JString, required = false,
                                 default = nil)
  if valid_606463 != nil:
    section.add "X-Amz-Date", valid_606463
  var valid_606464 = header.getOrDefault("X-Amz-Credential")
  valid_606464 = validateParameter(valid_606464, JString, required = false,
                                 default = nil)
  if valid_606464 != nil:
    section.add "X-Amz-Credential", valid_606464
  var valid_606465 = header.getOrDefault("X-Amz-Security-Token")
  valid_606465 = validateParameter(valid_606465, JString, required = false,
                                 default = nil)
  if valid_606465 != nil:
    section.add "X-Amz-Security-Token", valid_606465
  var valid_606466 = header.getOrDefault("X-Amz-Algorithm")
  valid_606466 = validateParameter(valid_606466, JString, required = false,
                                 default = nil)
  if valid_606466 != nil:
    section.add "X-Amz-Algorithm", valid_606466
  var valid_606467 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606467 = validateParameter(valid_606467, JString, required = false,
                                 default = nil)
  if valid_606467 != nil:
    section.add "X-Amz-SignedHeaders", valid_606467
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606468: Call_GetCreateReceiptRuleSet_606455; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an empty receipt rule set.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_606468.validator(path, query, header, formData, body)
  let scheme = call_606468.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606468.url(scheme.get, call_606468.host, call_606468.base,
                         call_606468.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606468, url, valid)

proc call*(call_606469: Call_GetCreateReceiptRuleSet_606455; RuleSetName: string;
          Action: string = "CreateReceiptRuleSet"; Version: string = "2010-12-01"): Recallable =
  ## getCreateReceiptRuleSet
  ## <p>Creates an empty receipt rule set.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   RuleSetName: string (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Version: string (required)
  var query_606470 = newJObject()
  add(query_606470, "Action", newJString(Action))
  add(query_606470, "RuleSetName", newJString(RuleSetName))
  add(query_606470, "Version", newJString(Version))
  result = call_606469.call(nil, query_606470, nil, nil, nil)

var getCreateReceiptRuleSet* = Call_GetCreateReceiptRuleSet_606455(
    name: "getCreateReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=CreateReceiptRuleSet",
    validator: validate_GetCreateReceiptRuleSet_606456, base: "/",
    url: url_GetCreateReceiptRuleSet_606457, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateTemplate_606507 = ref object of OpenApiRestCall_605589
proc url_PostCreateTemplate_606509(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateTemplate_606508(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606510 = query.getOrDefault("Action")
  valid_606510 = validateParameter(valid_606510, JString, required = true,
                                 default = newJString("CreateTemplate"))
  if valid_606510 != nil:
    section.add "Action", valid_606510
  var valid_606511 = query.getOrDefault("Version")
  valid_606511 = validateParameter(valid_606511, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606511 != nil:
    section.add "Version", valid_606511
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606512 = header.getOrDefault("X-Amz-Signature")
  valid_606512 = validateParameter(valid_606512, JString, required = false,
                                 default = nil)
  if valid_606512 != nil:
    section.add "X-Amz-Signature", valid_606512
  var valid_606513 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606513 = validateParameter(valid_606513, JString, required = false,
                                 default = nil)
  if valid_606513 != nil:
    section.add "X-Amz-Content-Sha256", valid_606513
  var valid_606514 = header.getOrDefault("X-Amz-Date")
  valid_606514 = validateParameter(valid_606514, JString, required = false,
                                 default = nil)
  if valid_606514 != nil:
    section.add "X-Amz-Date", valid_606514
  var valid_606515 = header.getOrDefault("X-Amz-Credential")
  valid_606515 = validateParameter(valid_606515, JString, required = false,
                                 default = nil)
  if valid_606515 != nil:
    section.add "X-Amz-Credential", valid_606515
  var valid_606516 = header.getOrDefault("X-Amz-Security-Token")
  valid_606516 = validateParameter(valid_606516, JString, required = false,
                                 default = nil)
  if valid_606516 != nil:
    section.add "X-Amz-Security-Token", valid_606516
  var valid_606517 = header.getOrDefault("X-Amz-Algorithm")
  valid_606517 = validateParameter(valid_606517, JString, required = false,
                                 default = nil)
  if valid_606517 != nil:
    section.add "X-Amz-Algorithm", valid_606517
  var valid_606518 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606518 = validateParameter(valid_606518, JString, required = false,
                                 default = nil)
  if valid_606518 != nil:
    section.add "X-Amz-SignedHeaders", valid_606518
  result.add "header", section
  ## parameters in `formData` object:
  ##   Template.TextPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Template.TemplateName: JString
  ##                        : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   Template.SubjectPart: JString
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  ##   Template.HtmlPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  section = newJObject()
  var valid_606519 = formData.getOrDefault("Template.TextPart")
  valid_606519 = validateParameter(valid_606519, JString, required = false,
                                 default = nil)
  if valid_606519 != nil:
    section.add "Template.TextPart", valid_606519
  var valid_606520 = formData.getOrDefault("Template.TemplateName")
  valid_606520 = validateParameter(valid_606520, JString, required = false,
                                 default = nil)
  if valid_606520 != nil:
    section.add "Template.TemplateName", valid_606520
  var valid_606521 = formData.getOrDefault("Template.SubjectPart")
  valid_606521 = validateParameter(valid_606521, JString, required = false,
                                 default = nil)
  if valid_606521 != nil:
    section.add "Template.SubjectPart", valid_606521
  var valid_606522 = formData.getOrDefault("Template.HtmlPart")
  valid_606522 = validateParameter(valid_606522, JString, required = false,
                                 default = nil)
  if valid_606522 != nil:
    section.add "Template.HtmlPart", valid_606522
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606523: Call_PostCreateTemplate_606507; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_606523.validator(path, query, header, formData, body)
  let scheme = call_606523.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606523.url(scheme.get, call_606523.host, call_606523.base,
                         call_606523.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606523, url, valid)

proc call*(call_606524: Call_PostCreateTemplate_606507;
          TemplateTextPart: string = ""; TemplateTemplateName: string = "";
          TemplateSubjectPart: string = ""; Action: string = "CreateTemplate";
          Version: string = "2010-12-01"; TemplateHtmlPart: string = ""): Recallable =
  ## postCreateTemplate
  ## <p>Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateTextPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   TemplateTemplateName: string
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   TemplateSubjectPart: string
  ##                      : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   TemplateHtmlPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  var query_606525 = newJObject()
  var formData_606526 = newJObject()
  add(formData_606526, "Template.TextPart", newJString(TemplateTextPart))
  add(formData_606526, "Template.TemplateName", newJString(TemplateTemplateName))
  add(formData_606526, "Template.SubjectPart", newJString(TemplateSubjectPart))
  add(query_606525, "Action", newJString(Action))
  add(query_606525, "Version", newJString(Version))
  add(formData_606526, "Template.HtmlPart", newJString(TemplateHtmlPart))
  result = call_606524.call(nil, query_606525, nil, formData_606526, nil)

var postCreateTemplate* = Call_PostCreateTemplate_606507(
    name: "postCreateTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=CreateTemplate",
    validator: validate_PostCreateTemplate_606508, base: "/",
    url: url_PostCreateTemplate_606509, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateTemplate_606488 = ref object of OpenApiRestCall_605589
proc url_GetCreateTemplate_606490(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateTemplate_606489(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Template.HtmlPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   Template.TemplateName: JString
  ##                        : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   Template.TextPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Action: JString (required)
  ##   Template.SubjectPart: JString
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  ##   Version: JString (required)
  section = newJObject()
  var valid_606491 = query.getOrDefault("Template.HtmlPart")
  valid_606491 = validateParameter(valid_606491, JString, required = false,
                                 default = nil)
  if valid_606491 != nil:
    section.add "Template.HtmlPart", valid_606491
  var valid_606492 = query.getOrDefault("Template.TemplateName")
  valid_606492 = validateParameter(valid_606492, JString, required = false,
                                 default = nil)
  if valid_606492 != nil:
    section.add "Template.TemplateName", valid_606492
  var valid_606493 = query.getOrDefault("Template.TextPart")
  valid_606493 = validateParameter(valid_606493, JString, required = false,
                                 default = nil)
  if valid_606493 != nil:
    section.add "Template.TextPart", valid_606493
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606494 = query.getOrDefault("Action")
  valid_606494 = validateParameter(valid_606494, JString, required = true,
                                 default = newJString("CreateTemplate"))
  if valid_606494 != nil:
    section.add "Action", valid_606494
  var valid_606495 = query.getOrDefault("Template.SubjectPart")
  valid_606495 = validateParameter(valid_606495, JString, required = false,
                                 default = nil)
  if valid_606495 != nil:
    section.add "Template.SubjectPart", valid_606495
  var valid_606496 = query.getOrDefault("Version")
  valid_606496 = validateParameter(valid_606496, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606496 != nil:
    section.add "Version", valid_606496
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606497 = header.getOrDefault("X-Amz-Signature")
  valid_606497 = validateParameter(valid_606497, JString, required = false,
                                 default = nil)
  if valid_606497 != nil:
    section.add "X-Amz-Signature", valid_606497
  var valid_606498 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606498 = validateParameter(valid_606498, JString, required = false,
                                 default = nil)
  if valid_606498 != nil:
    section.add "X-Amz-Content-Sha256", valid_606498
  var valid_606499 = header.getOrDefault("X-Amz-Date")
  valid_606499 = validateParameter(valid_606499, JString, required = false,
                                 default = nil)
  if valid_606499 != nil:
    section.add "X-Amz-Date", valid_606499
  var valid_606500 = header.getOrDefault("X-Amz-Credential")
  valid_606500 = validateParameter(valid_606500, JString, required = false,
                                 default = nil)
  if valid_606500 != nil:
    section.add "X-Amz-Credential", valid_606500
  var valid_606501 = header.getOrDefault("X-Amz-Security-Token")
  valid_606501 = validateParameter(valid_606501, JString, required = false,
                                 default = nil)
  if valid_606501 != nil:
    section.add "X-Amz-Security-Token", valid_606501
  var valid_606502 = header.getOrDefault("X-Amz-Algorithm")
  valid_606502 = validateParameter(valid_606502, JString, required = false,
                                 default = nil)
  if valid_606502 != nil:
    section.add "X-Amz-Algorithm", valid_606502
  var valid_606503 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606503 = validateParameter(valid_606503, JString, required = false,
                                 default = nil)
  if valid_606503 != nil:
    section.add "X-Amz-SignedHeaders", valid_606503
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606504: Call_GetCreateTemplate_606488; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_606504.validator(path, query, header, formData, body)
  let scheme = call_606504.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606504.url(scheme.get, call_606504.host, call_606504.base,
                         call_606504.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606504, url, valid)

proc call*(call_606505: Call_GetCreateTemplate_606488;
          TemplateHtmlPart: string = ""; TemplateTemplateName: string = "";
          TemplateTextPart: string = ""; Action: string = "CreateTemplate";
          TemplateSubjectPart: string = ""; Version: string = "2010-12-01"): Recallable =
  ## getCreateTemplate
  ## <p>Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateHtmlPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   TemplateTemplateName: string
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   TemplateTextPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Action: string (required)
  ##   TemplateSubjectPart: string
  ##                      : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  ##   Version: string (required)
  var query_606506 = newJObject()
  add(query_606506, "Template.HtmlPart", newJString(TemplateHtmlPart))
  add(query_606506, "Template.TemplateName", newJString(TemplateTemplateName))
  add(query_606506, "Template.TextPart", newJString(TemplateTextPart))
  add(query_606506, "Action", newJString(Action))
  add(query_606506, "Template.SubjectPart", newJString(TemplateSubjectPart))
  add(query_606506, "Version", newJString(Version))
  result = call_606505.call(nil, query_606506, nil, nil, nil)

var getCreateTemplate* = Call_GetCreateTemplate_606488(name: "getCreateTemplate",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=CreateTemplate", validator: validate_GetCreateTemplate_606489,
    base: "/", url: url_GetCreateTemplate_606490,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteConfigurationSet_606543 = ref object of OpenApiRestCall_605589
proc url_PostDeleteConfigurationSet_606545(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteConfigurationSet_606544(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606546 = query.getOrDefault("Action")
  valid_606546 = validateParameter(valid_606546, JString, required = true,
                                 default = newJString("DeleteConfigurationSet"))
  if valid_606546 != nil:
    section.add "Action", valid_606546
  var valid_606547 = query.getOrDefault("Version")
  valid_606547 = validateParameter(valid_606547, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606547 != nil:
    section.add "Version", valid_606547
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606548 = header.getOrDefault("X-Amz-Signature")
  valid_606548 = validateParameter(valid_606548, JString, required = false,
                                 default = nil)
  if valid_606548 != nil:
    section.add "X-Amz-Signature", valid_606548
  var valid_606549 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606549 = validateParameter(valid_606549, JString, required = false,
                                 default = nil)
  if valid_606549 != nil:
    section.add "X-Amz-Content-Sha256", valid_606549
  var valid_606550 = header.getOrDefault("X-Amz-Date")
  valid_606550 = validateParameter(valid_606550, JString, required = false,
                                 default = nil)
  if valid_606550 != nil:
    section.add "X-Amz-Date", valid_606550
  var valid_606551 = header.getOrDefault("X-Amz-Credential")
  valid_606551 = validateParameter(valid_606551, JString, required = false,
                                 default = nil)
  if valid_606551 != nil:
    section.add "X-Amz-Credential", valid_606551
  var valid_606552 = header.getOrDefault("X-Amz-Security-Token")
  valid_606552 = validateParameter(valid_606552, JString, required = false,
                                 default = nil)
  if valid_606552 != nil:
    section.add "X-Amz-Security-Token", valid_606552
  var valid_606553 = header.getOrDefault("X-Amz-Algorithm")
  valid_606553 = validateParameter(valid_606553, JString, required = false,
                                 default = nil)
  if valid_606553 != nil:
    section.add "X-Amz-Algorithm", valid_606553
  var valid_606554 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606554 = validateParameter(valid_606554, JString, required = false,
                                 default = nil)
  if valid_606554 != nil:
    section.add "X-Amz-SignedHeaders", valid_606554
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set to delete.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_606555 = formData.getOrDefault("ConfigurationSetName")
  valid_606555 = validateParameter(valid_606555, JString, required = true,
                                 default = nil)
  if valid_606555 != nil:
    section.add "ConfigurationSetName", valid_606555
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606556: Call_PostDeleteConfigurationSet_606543; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_606556.validator(path, query, header, formData, body)
  let scheme = call_606556.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606556.url(scheme.get, call_606556.host, call_606556.base,
                         call_606556.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606556, url, valid)

proc call*(call_606557: Call_PostDeleteConfigurationSet_606543;
          ConfigurationSetName: string; Action: string = "DeleteConfigurationSet";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteConfigurationSet
  ## <p>Deletes a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set to delete.
  ##   Version: string (required)
  var query_606558 = newJObject()
  var formData_606559 = newJObject()
  add(query_606558, "Action", newJString(Action))
  add(formData_606559, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_606558, "Version", newJString(Version))
  result = call_606557.call(nil, query_606558, nil, formData_606559, nil)

var postDeleteConfigurationSet* = Call_PostDeleteConfigurationSet_606543(
    name: "postDeleteConfigurationSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteConfigurationSet",
    validator: validate_PostDeleteConfigurationSet_606544, base: "/",
    url: url_PostDeleteConfigurationSet_606545,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteConfigurationSet_606527 = ref object of OpenApiRestCall_605589
proc url_GetDeleteConfigurationSet_606529(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteConfigurationSet_606528(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set to delete.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ConfigurationSetName` field"
  var valid_606530 = query.getOrDefault("ConfigurationSetName")
  valid_606530 = validateParameter(valid_606530, JString, required = true,
                                 default = nil)
  if valid_606530 != nil:
    section.add "ConfigurationSetName", valid_606530
  var valid_606531 = query.getOrDefault("Action")
  valid_606531 = validateParameter(valid_606531, JString, required = true,
                                 default = newJString("DeleteConfigurationSet"))
  if valid_606531 != nil:
    section.add "Action", valid_606531
  var valid_606532 = query.getOrDefault("Version")
  valid_606532 = validateParameter(valid_606532, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606532 != nil:
    section.add "Version", valid_606532
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606533 = header.getOrDefault("X-Amz-Signature")
  valid_606533 = validateParameter(valid_606533, JString, required = false,
                                 default = nil)
  if valid_606533 != nil:
    section.add "X-Amz-Signature", valid_606533
  var valid_606534 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606534 = validateParameter(valid_606534, JString, required = false,
                                 default = nil)
  if valid_606534 != nil:
    section.add "X-Amz-Content-Sha256", valid_606534
  var valid_606535 = header.getOrDefault("X-Amz-Date")
  valid_606535 = validateParameter(valid_606535, JString, required = false,
                                 default = nil)
  if valid_606535 != nil:
    section.add "X-Amz-Date", valid_606535
  var valid_606536 = header.getOrDefault("X-Amz-Credential")
  valid_606536 = validateParameter(valid_606536, JString, required = false,
                                 default = nil)
  if valid_606536 != nil:
    section.add "X-Amz-Credential", valid_606536
  var valid_606537 = header.getOrDefault("X-Amz-Security-Token")
  valid_606537 = validateParameter(valid_606537, JString, required = false,
                                 default = nil)
  if valid_606537 != nil:
    section.add "X-Amz-Security-Token", valid_606537
  var valid_606538 = header.getOrDefault("X-Amz-Algorithm")
  valid_606538 = validateParameter(valid_606538, JString, required = false,
                                 default = nil)
  if valid_606538 != nil:
    section.add "X-Amz-Algorithm", valid_606538
  var valid_606539 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606539 = validateParameter(valid_606539, JString, required = false,
                                 default = nil)
  if valid_606539 != nil:
    section.add "X-Amz-SignedHeaders", valid_606539
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606540: Call_GetDeleteConfigurationSet_606527; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_606540.validator(path, query, header, formData, body)
  let scheme = call_606540.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606540.url(scheme.get, call_606540.host, call_606540.base,
                         call_606540.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606540, url, valid)

proc call*(call_606541: Call_GetDeleteConfigurationSet_606527;
          ConfigurationSetName: string; Action: string = "DeleteConfigurationSet";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteConfigurationSet
  ## <p>Deletes a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606542 = newJObject()
  add(query_606542, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_606542, "Action", newJString(Action))
  add(query_606542, "Version", newJString(Version))
  result = call_606541.call(nil, query_606542, nil, nil, nil)

var getDeleteConfigurationSet* = Call_GetDeleteConfigurationSet_606527(
    name: "getDeleteConfigurationSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DeleteConfigurationSet",
    validator: validate_GetDeleteConfigurationSet_606528, base: "/",
    url: url_GetDeleteConfigurationSet_606529,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteConfigurationSetEventDestination_606577 = ref object of OpenApiRestCall_605589
proc url_PostDeleteConfigurationSetEventDestination_606579(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteConfigurationSetEventDestination_606578(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606580 = query.getOrDefault("Action")
  valid_606580 = validateParameter(valid_606580, JString, required = true, default = newJString(
      "DeleteConfigurationSetEventDestination"))
  if valid_606580 != nil:
    section.add "Action", valid_606580
  var valid_606581 = query.getOrDefault("Version")
  valid_606581 = validateParameter(valid_606581, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606581 != nil:
    section.add "Version", valid_606581
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606582 = header.getOrDefault("X-Amz-Signature")
  valid_606582 = validateParameter(valid_606582, JString, required = false,
                                 default = nil)
  if valid_606582 != nil:
    section.add "X-Amz-Signature", valid_606582
  var valid_606583 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606583 = validateParameter(valid_606583, JString, required = false,
                                 default = nil)
  if valid_606583 != nil:
    section.add "X-Amz-Content-Sha256", valid_606583
  var valid_606584 = header.getOrDefault("X-Amz-Date")
  valid_606584 = validateParameter(valid_606584, JString, required = false,
                                 default = nil)
  if valid_606584 != nil:
    section.add "X-Amz-Date", valid_606584
  var valid_606585 = header.getOrDefault("X-Amz-Credential")
  valid_606585 = validateParameter(valid_606585, JString, required = false,
                                 default = nil)
  if valid_606585 != nil:
    section.add "X-Amz-Credential", valid_606585
  var valid_606586 = header.getOrDefault("X-Amz-Security-Token")
  valid_606586 = validateParameter(valid_606586, JString, required = false,
                                 default = nil)
  if valid_606586 != nil:
    section.add "X-Amz-Security-Token", valid_606586
  var valid_606587 = header.getOrDefault("X-Amz-Algorithm")
  valid_606587 = validateParameter(valid_606587, JString, required = false,
                                 default = nil)
  if valid_606587 != nil:
    section.add "X-Amz-Algorithm", valid_606587
  var valid_606588 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606588 = validateParameter(valid_606588, JString, required = false,
                                 default = nil)
  if valid_606588 != nil:
    section.add "X-Amz-SignedHeaders", valid_606588
  result.add "header", section
  ## parameters in `formData` object:
  ##   EventDestinationName: JString (required)
  ##                       : The name of the event destination to delete.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set from which to delete the event destination.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `EventDestinationName` field"
  var valid_606589 = formData.getOrDefault("EventDestinationName")
  valid_606589 = validateParameter(valid_606589, JString, required = true,
                                 default = nil)
  if valid_606589 != nil:
    section.add "EventDestinationName", valid_606589
  var valid_606590 = formData.getOrDefault("ConfigurationSetName")
  valid_606590 = validateParameter(valid_606590, JString, required = true,
                                 default = nil)
  if valid_606590 != nil:
    section.add "ConfigurationSetName", valid_606590
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606591: Call_PostDeleteConfigurationSetEventDestination_606577;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_606591.validator(path, query, header, formData, body)
  let scheme = call_606591.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606591.url(scheme.get, call_606591.host, call_606591.base,
                         call_606591.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606591, url, valid)

proc call*(call_606592: Call_PostDeleteConfigurationSetEventDestination_606577;
          EventDestinationName: string; ConfigurationSetName: string;
          Action: string = "DeleteConfigurationSetEventDestination";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteConfigurationSetEventDestination
  ## <p>Deletes a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   EventDestinationName: string (required)
  ##                       : The name of the event destination to delete.
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set from which to delete the event destination.
  ##   Version: string (required)
  var query_606593 = newJObject()
  var formData_606594 = newJObject()
  add(formData_606594, "EventDestinationName", newJString(EventDestinationName))
  add(query_606593, "Action", newJString(Action))
  add(formData_606594, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_606593, "Version", newJString(Version))
  result = call_606592.call(nil, query_606593, nil, formData_606594, nil)

var postDeleteConfigurationSetEventDestination* = Call_PostDeleteConfigurationSetEventDestination_606577(
    name: "postDeleteConfigurationSetEventDestination", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=DeleteConfigurationSetEventDestination",
    validator: validate_PostDeleteConfigurationSetEventDestination_606578,
    base: "/", url: url_PostDeleteConfigurationSetEventDestination_606579,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteConfigurationSetEventDestination_606560 = ref object of OpenApiRestCall_605589
proc url_GetDeleteConfigurationSetEventDestination_606562(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteConfigurationSetEventDestination_606561(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EventDestinationName: JString (required)
  ##                       : The name of the event destination to delete.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set from which to delete the event destination.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `EventDestinationName` field"
  var valid_606563 = query.getOrDefault("EventDestinationName")
  valid_606563 = validateParameter(valid_606563, JString, required = true,
                                 default = nil)
  if valid_606563 != nil:
    section.add "EventDestinationName", valid_606563
  var valid_606564 = query.getOrDefault("ConfigurationSetName")
  valid_606564 = validateParameter(valid_606564, JString, required = true,
                                 default = nil)
  if valid_606564 != nil:
    section.add "ConfigurationSetName", valid_606564
  var valid_606565 = query.getOrDefault("Action")
  valid_606565 = validateParameter(valid_606565, JString, required = true, default = newJString(
      "DeleteConfigurationSetEventDestination"))
  if valid_606565 != nil:
    section.add "Action", valid_606565
  var valid_606566 = query.getOrDefault("Version")
  valid_606566 = validateParameter(valid_606566, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606566 != nil:
    section.add "Version", valid_606566
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606567 = header.getOrDefault("X-Amz-Signature")
  valid_606567 = validateParameter(valid_606567, JString, required = false,
                                 default = nil)
  if valid_606567 != nil:
    section.add "X-Amz-Signature", valid_606567
  var valid_606568 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606568 = validateParameter(valid_606568, JString, required = false,
                                 default = nil)
  if valid_606568 != nil:
    section.add "X-Amz-Content-Sha256", valid_606568
  var valid_606569 = header.getOrDefault("X-Amz-Date")
  valid_606569 = validateParameter(valid_606569, JString, required = false,
                                 default = nil)
  if valid_606569 != nil:
    section.add "X-Amz-Date", valid_606569
  var valid_606570 = header.getOrDefault("X-Amz-Credential")
  valid_606570 = validateParameter(valid_606570, JString, required = false,
                                 default = nil)
  if valid_606570 != nil:
    section.add "X-Amz-Credential", valid_606570
  var valid_606571 = header.getOrDefault("X-Amz-Security-Token")
  valid_606571 = validateParameter(valid_606571, JString, required = false,
                                 default = nil)
  if valid_606571 != nil:
    section.add "X-Amz-Security-Token", valid_606571
  var valid_606572 = header.getOrDefault("X-Amz-Algorithm")
  valid_606572 = validateParameter(valid_606572, JString, required = false,
                                 default = nil)
  if valid_606572 != nil:
    section.add "X-Amz-Algorithm", valid_606572
  var valid_606573 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606573 = validateParameter(valid_606573, JString, required = false,
                                 default = nil)
  if valid_606573 != nil:
    section.add "X-Amz-SignedHeaders", valid_606573
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606574: Call_GetDeleteConfigurationSetEventDestination_606560;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_606574.validator(path, query, header, formData, body)
  let scheme = call_606574.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606574.url(scheme.get, call_606574.host, call_606574.base,
                         call_606574.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606574, url, valid)

proc call*(call_606575: Call_GetDeleteConfigurationSetEventDestination_606560;
          EventDestinationName: string; ConfigurationSetName: string;
          Action: string = "DeleteConfigurationSetEventDestination";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteConfigurationSetEventDestination
  ## <p>Deletes a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   EventDestinationName: string (required)
  ##                       : The name of the event destination to delete.
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set from which to delete the event destination.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606576 = newJObject()
  add(query_606576, "EventDestinationName", newJString(EventDestinationName))
  add(query_606576, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_606576, "Action", newJString(Action))
  add(query_606576, "Version", newJString(Version))
  result = call_606575.call(nil, query_606576, nil, nil, nil)

var getDeleteConfigurationSetEventDestination* = Call_GetDeleteConfigurationSetEventDestination_606560(
    name: "getDeleteConfigurationSetEventDestination", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=DeleteConfigurationSetEventDestination",
    validator: validate_GetDeleteConfigurationSetEventDestination_606561,
    base: "/", url: url_GetDeleteConfigurationSetEventDestination_606562,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteConfigurationSetTrackingOptions_606611 = ref object of OpenApiRestCall_605589
proc url_PostDeleteConfigurationSetTrackingOptions_606613(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteConfigurationSetTrackingOptions_606612(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an association between a configuration set and a custom domain for open and click event tracking.</p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p> <note> <p>Deleting this kind of association will result in emails sent using the specified configuration set to capture open and click events using the standard, Amazon SES-operated domains.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606614 = query.getOrDefault("Action")
  valid_606614 = validateParameter(valid_606614, JString, required = true, default = newJString(
      "DeleteConfigurationSetTrackingOptions"))
  if valid_606614 != nil:
    section.add "Action", valid_606614
  var valid_606615 = query.getOrDefault("Version")
  valid_606615 = validateParameter(valid_606615, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606615 != nil:
    section.add "Version", valid_606615
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606616 = header.getOrDefault("X-Amz-Signature")
  valid_606616 = validateParameter(valid_606616, JString, required = false,
                                 default = nil)
  if valid_606616 != nil:
    section.add "X-Amz-Signature", valid_606616
  var valid_606617 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606617 = validateParameter(valid_606617, JString, required = false,
                                 default = nil)
  if valid_606617 != nil:
    section.add "X-Amz-Content-Sha256", valid_606617
  var valid_606618 = header.getOrDefault("X-Amz-Date")
  valid_606618 = validateParameter(valid_606618, JString, required = false,
                                 default = nil)
  if valid_606618 != nil:
    section.add "X-Amz-Date", valid_606618
  var valid_606619 = header.getOrDefault("X-Amz-Credential")
  valid_606619 = validateParameter(valid_606619, JString, required = false,
                                 default = nil)
  if valid_606619 != nil:
    section.add "X-Amz-Credential", valid_606619
  var valid_606620 = header.getOrDefault("X-Amz-Security-Token")
  valid_606620 = validateParameter(valid_606620, JString, required = false,
                                 default = nil)
  if valid_606620 != nil:
    section.add "X-Amz-Security-Token", valid_606620
  var valid_606621 = header.getOrDefault("X-Amz-Algorithm")
  valid_606621 = validateParameter(valid_606621, JString, required = false,
                                 default = nil)
  if valid_606621 != nil:
    section.add "X-Amz-Algorithm", valid_606621
  var valid_606622 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606622 = validateParameter(valid_606622, JString, required = false,
                                 default = nil)
  if valid_606622 != nil:
    section.add "X-Amz-SignedHeaders", valid_606622
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set from which you want to delete the tracking options.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_606623 = formData.getOrDefault("ConfigurationSetName")
  valid_606623 = validateParameter(valid_606623, JString, required = true,
                                 default = nil)
  if valid_606623 != nil:
    section.add "ConfigurationSetName", valid_606623
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606624: Call_PostDeleteConfigurationSetTrackingOptions_606611;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes an association between a configuration set and a custom domain for open and click event tracking.</p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p> <note> <p>Deleting this kind of association will result in emails sent using the specified configuration set to capture open and click events using the standard, Amazon SES-operated domains.</p> </note>
  ## 
  let valid = call_606624.validator(path, query, header, formData, body)
  let scheme = call_606624.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606624.url(scheme.get, call_606624.host, call_606624.base,
                         call_606624.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606624, url, valid)

proc call*(call_606625: Call_PostDeleteConfigurationSetTrackingOptions_606611;
          ConfigurationSetName: string;
          Action: string = "DeleteConfigurationSetTrackingOptions";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteConfigurationSetTrackingOptions
  ## <p>Deletes an association between a configuration set and a custom domain for open and click event tracking.</p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p> <note> <p>Deleting this kind of association will result in emails sent using the specified configuration set to capture open and click events using the standard, Amazon SES-operated domains.</p> </note>
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set from which you want to delete the tracking options.
  ##   Version: string (required)
  var query_606626 = newJObject()
  var formData_606627 = newJObject()
  add(query_606626, "Action", newJString(Action))
  add(formData_606627, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_606626, "Version", newJString(Version))
  result = call_606625.call(nil, query_606626, nil, formData_606627, nil)

var postDeleteConfigurationSetTrackingOptions* = Call_PostDeleteConfigurationSetTrackingOptions_606611(
    name: "postDeleteConfigurationSetTrackingOptions", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=DeleteConfigurationSetTrackingOptions",
    validator: validate_PostDeleteConfigurationSetTrackingOptions_606612,
    base: "/", url: url_PostDeleteConfigurationSetTrackingOptions_606613,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteConfigurationSetTrackingOptions_606595 = ref object of OpenApiRestCall_605589
proc url_GetDeleteConfigurationSetTrackingOptions_606597(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteConfigurationSetTrackingOptions_606596(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an association between a configuration set and a custom domain for open and click event tracking.</p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p> <note> <p>Deleting this kind of association will result in emails sent using the specified configuration set to capture open and click events using the standard, Amazon SES-operated domains.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set from which you want to delete the tracking options.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ConfigurationSetName` field"
  var valid_606598 = query.getOrDefault("ConfigurationSetName")
  valid_606598 = validateParameter(valid_606598, JString, required = true,
                                 default = nil)
  if valid_606598 != nil:
    section.add "ConfigurationSetName", valid_606598
  var valid_606599 = query.getOrDefault("Action")
  valid_606599 = validateParameter(valid_606599, JString, required = true, default = newJString(
      "DeleteConfigurationSetTrackingOptions"))
  if valid_606599 != nil:
    section.add "Action", valid_606599
  var valid_606600 = query.getOrDefault("Version")
  valid_606600 = validateParameter(valid_606600, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606600 != nil:
    section.add "Version", valid_606600
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606601 = header.getOrDefault("X-Amz-Signature")
  valid_606601 = validateParameter(valid_606601, JString, required = false,
                                 default = nil)
  if valid_606601 != nil:
    section.add "X-Amz-Signature", valid_606601
  var valid_606602 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606602 = validateParameter(valid_606602, JString, required = false,
                                 default = nil)
  if valid_606602 != nil:
    section.add "X-Amz-Content-Sha256", valid_606602
  var valid_606603 = header.getOrDefault("X-Amz-Date")
  valid_606603 = validateParameter(valid_606603, JString, required = false,
                                 default = nil)
  if valid_606603 != nil:
    section.add "X-Amz-Date", valid_606603
  var valid_606604 = header.getOrDefault("X-Amz-Credential")
  valid_606604 = validateParameter(valid_606604, JString, required = false,
                                 default = nil)
  if valid_606604 != nil:
    section.add "X-Amz-Credential", valid_606604
  var valid_606605 = header.getOrDefault("X-Amz-Security-Token")
  valid_606605 = validateParameter(valid_606605, JString, required = false,
                                 default = nil)
  if valid_606605 != nil:
    section.add "X-Amz-Security-Token", valid_606605
  var valid_606606 = header.getOrDefault("X-Amz-Algorithm")
  valid_606606 = validateParameter(valid_606606, JString, required = false,
                                 default = nil)
  if valid_606606 != nil:
    section.add "X-Amz-Algorithm", valid_606606
  var valid_606607 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606607 = validateParameter(valid_606607, JString, required = false,
                                 default = nil)
  if valid_606607 != nil:
    section.add "X-Amz-SignedHeaders", valid_606607
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606608: Call_GetDeleteConfigurationSetTrackingOptions_606595;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes an association between a configuration set and a custom domain for open and click event tracking.</p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p> <note> <p>Deleting this kind of association will result in emails sent using the specified configuration set to capture open and click events using the standard, Amazon SES-operated domains.</p> </note>
  ## 
  let valid = call_606608.validator(path, query, header, formData, body)
  let scheme = call_606608.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606608.url(scheme.get, call_606608.host, call_606608.base,
                         call_606608.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606608, url, valid)

proc call*(call_606609: Call_GetDeleteConfigurationSetTrackingOptions_606595;
          ConfigurationSetName: string;
          Action: string = "DeleteConfigurationSetTrackingOptions";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteConfigurationSetTrackingOptions
  ## <p>Deletes an association between a configuration set and a custom domain for open and click event tracking.</p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p> <note> <p>Deleting this kind of association will result in emails sent using the specified configuration set to capture open and click events using the standard, Amazon SES-operated domains.</p> </note>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set from which you want to delete the tracking options.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606610 = newJObject()
  add(query_606610, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_606610, "Action", newJString(Action))
  add(query_606610, "Version", newJString(Version))
  result = call_606609.call(nil, query_606610, nil, nil, nil)

var getDeleteConfigurationSetTrackingOptions* = Call_GetDeleteConfigurationSetTrackingOptions_606595(
    name: "getDeleteConfigurationSetTrackingOptions", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=DeleteConfigurationSetTrackingOptions",
    validator: validate_GetDeleteConfigurationSetTrackingOptions_606596,
    base: "/", url: url_GetDeleteConfigurationSetTrackingOptions_606597,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCustomVerificationEmailTemplate_606644 = ref object of OpenApiRestCall_605589
proc url_PostDeleteCustomVerificationEmailTemplate_606646(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteCustomVerificationEmailTemplate_606645(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an existing custom verification email template. </p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606647 = query.getOrDefault("Action")
  valid_606647 = validateParameter(valid_606647, JString, required = true, default = newJString(
      "DeleteCustomVerificationEmailTemplate"))
  if valid_606647 != nil:
    section.add "Action", valid_606647
  var valid_606648 = query.getOrDefault("Version")
  valid_606648 = validateParameter(valid_606648, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606648 != nil:
    section.add "Version", valid_606648
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606649 = header.getOrDefault("X-Amz-Signature")
  valid_606649 = validateParameter(valid_606649, JString, required = false,
                                 default = nil)
  if valid_606649 != nil:
    section.add "X-Amz-Signature", valid_606649
  var valid_606650 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606650 = validateParameter(valid_606650, JString, required = false,
                                 default = nil)
  if valid_606650 != nil:
    section.add "X-Amz-Content-Sha256", valid_606650
  var valid_606651 = header.getOrDefault("X-Amz-Date")
  valid_606651 = validateParameter(valid_606651, JString, required = false,
                                 default = nil)
  if valid_606651 != nil:
    section.add "X-Amz-Date", valid_606651
  var valid_606652 = header.getOrDefault("X-Amz-Credential")
  valid_606652 = validateParameter(valid_606652, JString, required = false,
                                 default = nil)
  if valid_606652 != nil:
    section.add "X-Amz-Credential", valid_606652
  var valid_606653 = header.getOrDefault("X-Amz-Security-Token")
  valid_606653 = validateParameter(valid_606653, JString, required = false,
                                 default = nil)
  if valid_606653 != nil:
    section.add "X-Amz-Security-Token", valid_606653
  var valid_606654 = header.getOrDefault("X-Amz-Algorithm")
  valid_606654 = validateParameter(valid_606654, JString, required = false,
                                 default = nil)
  if valid_606654 != nil:
    section.add "X-Amz-Algorithm", valid_606654
  var valid_606655 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606655 = validateParameter(valid_606655, JString, required = false,
                                 default = nil)
  if valid_606655 != nil:
    section.add "X-Amz-SignedHeaders", valid_606655
  result.add "header", section
  ## parameters in `formData` object:
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template that you want to delete.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TemplateName` field"
  var valid_606656 = formData.getOrDefault("TemplateName")
  valid_606656 = validateParameter(valid_606656, JString, required = true,
                                 default = nil)
  if valid_606656 != nil:
    section.add "TemplateName", valid_606656
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606657: Call_PostDeleteCustomVerificationEmailTemplate_606644;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes an existing custom verification email template. </p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_606657.validator(path, query, header, formData, body)
  let scheme = call_606657.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606657.url(scheme.get, call_606657.host, call_606657.base,
                         call_606657.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606657, url, valid)

proc call*(call_606658: Call_PostDeleteCustomVerificationEmailTemplate_606644;
          TemplateName: string;
          Action: string = "DeleteCustomVerificationEmailTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteCustomVerificationEmailTemplate
  ## <p>Deletes an existing custom verification email template. </p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template that you want to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606659 = newJObject()
  var formData_606660 = newJObject()
  add(formData_606660, "TemplateName", newJString(TemplateName))
  add(query_606659, "Action", newJString(Action))
  add(query_606659, "Version", newJString(Version))
  result = call_606658.call(nil, query_606659, nil, formData_606660, nil)

var postDeleteCustomVerificationEmailTemplate* = Call_PostDeleteCustomVerificationEmailTemplate_606644(
    name: "postDeleteCustomVerificationEmailTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=DeleteCustomVerificationEmailTemplate",
    validator: validate_PostDeleteCustomVerificationEmailTemplate_606645,
    base: "/", url: url_PostDeleteCustomVerificationEmailTemplate_606646,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCustomVerificationEmailTemplate_606628 = ref object of OpenApiRestCall_605589
proc url_GetDeleteCustomVerificationEmailTemplate_606630(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteCustomVerificationEmailTemplate_606629(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an existing custom verification email template. </p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template that you want to delete.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606631 = query.getOrDefault("Action")
  valid_606631 = validateParameter(valid_606631, JString, required = true, default = newJString(
      "DeleteCustomVerificationEmailTemplate"))
  if valid_606631 != nil:
    section.add "Action", valid_606631
  var valid_606632 = query.getOrDefault("Version")
  valid_606632 = validateParameter(valid_606632, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606632 != nil:
    section.add "Version", valid_606632
  var valid_606633 = query.getOrDefault("TemplateName")
  valid_606633 = validateParameter(valid_606633, JString, required = true,
                                 default = nil)
  if valid_606633 != nil:
    section.add "TemplateName", valid_606633
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606634 = header.getOrDefault("X-Amz-Signature")
  valid_606634 = validateParameter(valid_606634, JString, required = false,
                                 default = nil)
  if valid_606634 != nil:
    section.add "X-Amz-Signature", valid_606634
  var valid_606635 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606635 = validateParameter(valid_606635, JString, required = false,
                                 default = nil)
  if valid_606635 != nil:
    section.add "X-Amz-Content-Sha256", valid_606635
  var valid_606636 = header.getOrDefault("X-Amz-Date")
  valid_606636 = validateParameter(valid_606636, JString, required = false,
                                 default = nil)
  if valid_606636 != nil:
    section.add "X-Amz-Date", valid_606636
  var valid_606637 = header.getOrDefault("X-Amz-Credential")
  valid_606637 = validateParameter(valid_606637, JString, required = false,
                                 default = nil)
  if valid_606637 != nil:
    section.add "X-Amz-Credential", valid_606637
  var valid_606638 = header.getOrDefault("X-Amz-Security-Token")
  valid_606638 = validateParameter(valid_606638, JString, required = false,
                                 default = nil)
  if valid_606638 != nil:
    section.add "X-Amz-Security-Token", valid_606638
  var valid_606639 = header.getOrDefault("X-Amz-Algorithm")
  valid_606639 = validateParameter(valid_606639, JString, required = false,
                                 default = nil)
  if valid_606639 != nil:
    section.add "X-Amz-Algorithm", valid_606639
  var valid_606640 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606640 = validateParameter(valid_606640, JString, required = false,
                                 default = nil)
  if valid_606640 != nil:
    section.add "X-Amz-SignedHeaders", valid_606640
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606641: Call_GetDeleteCustomVerificationEmailTemplate_606628;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes an existing custom verification email template. </p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_606641.validator(path, query, header, formData, body)
  let scheme = call_606641.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606641.url(scheme.get, call_606641.host, call_606641.base,
                         call_606641.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606641, url, valid)

proc call*(call_606642: Call_GetDeleteCustomVerificationEmailTemplate_606628;
          TemplateName: string;
          Action: string = "DeleteCustomVerificationEmailTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteCustomVerificationEmailTemplate
  ## <p>Deletes an existing custom verification email template. </p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template that you want to delete.
  var query_606643 = newJObject()
  add(query_606643, "Action", newJString(Action))
  add(query_606643, "Version", newJString(Version))
  add(query_606643, "TemplateName", newJString(TemplateName))
  result = call_606642.call(nil, query_606643, nil, nil, nil)

var getDeleteCustomVerificationEmailTemplate* = Call_GetDeleteCustomVerificationEmailTemplate_606628(
    name: "getDeleteCustomVerificationEmailTemplate", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=DeleteCustomVerificationEmailTemplate",
    validator: validate_GetDeleteCustomVerificationEmailTemplate_606629,
    base: "/", url: url_GetDeleteCustomVerificationEmailTemplate_606630,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteIdentity_606677 = ref object of OpenApiRestCall_605589
proc url_PostDeleteIdentity_606679(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteIdentity_606678(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Deletes the specified identity (an email address or a domain) from the list of verified identities.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606680 = query.getOrDefault("Action")
  valid_606680 = validateParameter(valid_606680, JString, required = true,
                                 default = newJString("DeleteIdentity"))
  if valid_606680 != nil:
    section.add "Action", valid_606680
  var valid_606681 = query.getOrDefault("Version")
  valid_606681 = validateParameter(valid_606681, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606681 != nil:
    section.add "Version", valid_606681
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606682 = header.getOrDefault("X-Amz-Signature")
  valid_606682 = validateParameter(valid_606682, JString, required = false,
                                 default = nil)
  if valid_606682 != nil:
    section.add "X-Amz-Signature", valid_606682
  var valid_606683 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606683 = validateParameter(valid_606683, JString, required = false,
                                 default = nil)
  if valid_606683 != nil:
    section.add "X-Amz-Content-Sha256", valid_606683
  var valid_606684 = header.getOrDefault("X-Amz-Date")
  valid_606684 = validateParameter(valid_606684, JString, required = false,
                                 default = nil)
  if valid_606684 != nil:
    section.add "X-Amz-Date", valid_606684
  var valid_606685 = header.getOrDefault("X-Amz-Credential")
  valid_606685 = validateParameter(valid_606685, JString, required = false,
                                 default = nil)
  if valid_606685 != nil:
    section.add "X-Amz-Credential", valid_606685
  var valid_606686 = header.getOrDefault("X-Amz-Security-Token")
  valid_606686 = validateParameter(valid_606686, JString, required = false,
                                 default = nil)
  if valid_606686 != nil:
    section.add "X-Amz-Security-Token", valid_606686
  var valid_606687 = header.getOrDefault("X-Amz-Algorithm")
  valid_606687 = validateParameter(valid_606687, JString, required = false,
                                 default = nil)
  if valid_606687 != nil:
    section.add "X-Amz-Algorithm", valid_606687
  var valid_606688 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606688 = validateParameter(valid_606688, JString, required = false,
                                 default = nil)
  if valid_606688 != nil:
    section.add "X-Amz-SignedHeaders", valid_606688
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identity: JString (required)
  ##           : The identity to be removed from the list of identities for the AWS Account.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identity` field"
  var valid_606689 = formData.getOrDefault("Identity")
  valid_606689 = validateParameter(valid_606689, JString, required = true,
                                 default = nil)
  if valid_606689 != nil:
    section.add "Identity", valid_606689
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606690: Call_PostDeleteIdentity_606677; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified identity (an email address or a domain) from the list of verified identities.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_606690.validator(path, query, header, formData, body)
  let scheme = call_606690.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606690.url(scheme.get, call_606690.host, call_606690.base,
                         call_606690.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606690, url, valid)

proc call*(call_606691: Call_PostDeleteIdentity_606677; Identity: string;
          Action: string = "DeleteIdentity"; Version: string = "2010-12-01"): Recallable =
  ## postDeleteIdentity
  ## <p>Deletes the specified identity (an email address or a domain) from the list of verified identities.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : The identity to be removed from the list of identities for the AWS Account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606692 = newJObject()
  var formData_606693 = newJObject()
  add(formData_606693, "Identity", newJString(Identity))
  add(query_606692, "Action", newJString(Action))
  add(query_606692, "Version", newJString(Version))
  result = call_606691.call(nil, query_606692, nil, formData_606693, nil)

var postDeleteIdentity* = Call_PostDeleteIdentity_606677(
    name: "postDeleteIdentity", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteIdentity",
    validator: validate_PostDeleteIdentity_606678, base: "/",
    url: url_PostDeleteIdentity_606679, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteIdentity_606661 = ref object of OpenApiRestCall_605589
proc url_GetDeleteIdentity_606663(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteIdentity_606662(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Deletes the specified identity (an email address or a domain) from the list of verified identities.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : The identity to be removed from the list of identities for the AWS Account.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_606664 = query.getOrDefault("Identity")
  valid_606664 = validateParameter(valid_606664, JString, required = true,
                                 default = nil)
  if valid_606664 != nil:
    section.add "Identity", valid_606664
  var valid_606665 = query.getOrDefault("Action")
  valid_606665 = validateParameter(valid_606665, JString, required = true,
                                 default = newJString("DeleteIdentity"))
  if valid_606665 != nil:
    section.add "Action", valid_606665
  var valid_606666 = query.getOrDefault("Version")
  valid_606666 = validateParameter(valid_606666, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606666 != nil:
    section.add "Version", valid_606666
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606667 = header.getOrDefault("X-Amz-Signature")
  valid_606667 = validateParameter(valid_606667, JString, required = false,
                                 default = nil)
  if valid_606667 != nil:
    section.add "X-Amz-Signature", valid_606667
  var valid_606668 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606668 = validateParameter(valid_606668, JString, required = false,
                                 default = nil)
  if valid_606668 != nil:
    section.add "X-Amz-Content-Sha256", valid_606668
  var valid_606669 = header.getOrDefault("X-Amz-Date")
  valid_606669 = validateParameter(valid_606669, JString, required = false,
                                 default = nil)
  if valid_606669 != nil:
    section.add "X-Amz-Date", valid_606669
  var valid_606670 = header.getOrDefault("X-Amz-Credential")
  valid_606670 = validateParameter(valid_606670, JString, required = false,
                                 default = nil)
  if valid_606670 != nil:
    section.add "X-Amz-Credential", valid_606670
  var valid_606671 = header.getOrDefault("X-Amz-Security-Token")
  valid_606671 = validateParameter(valid_606671, JString, required = false,
                                 default = nil)
  if valid_606671 != nil:
    section.add "X-Amz-Security-Token", valid_606671
  var valid_606672 = header.getOrDefault("X-Amz-Algorithm")
  valid_606672 = validateParameter(valid_606672, JString, required = false,
                                 default = nil)
  if valid_606672 != nil:
    section.add "X-Amz-Algorithm", valid_606672
  var valid_606673 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606673 = validateParameter(valid_606673, JString, required = false,
                                 default = nil)
  if valid_606673 != nil:
    section.add "X-Amz-SignedHeaders", valid_606673
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606674: Call_GetDeleteIdentity_606661; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified identity (an email address or a domain) from the list of verified identities.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_606674.validator(path, query, header, formData, body)
  let scheme = call_606674.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606674.url(scheme.get, call_606674.host, call_606674.base,
                         call_606674.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606674, url, valid)

proc call*(call_606675: Call_GetDeleteIdentity_606661; Identity: string;
          Action: string = "DeleteIdentity"; Version: string = "2010-12-01"): Recallable =
  ## getDeleteIdentity
  ## <p>Deletes the specified identity (an email address or a domain) from the list of verified identities.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : The identity to be removed from the list of identities for the AWS Account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606676 = newJObject()
  add(query_606676, "Identity", newJString(Identity))
  add(query_606676, "Action", newJString(Action))
  add(query_606676, "Version", newJString(Version))
  result = call_606675.call(nil, query_606676, nil, nil, nil)

var getDeleteIdentity* = Call_GetDeleteIdentity_606661(name: "getDeleteIdentity",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=DeleteIdentity", validator: validate_GetDeleteIdentity_606662,
    base: "/", url: url_GetDeleteIdentity_606663,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteIdentityPolicy_606711 = ref object of OpenApiRestCall_605589
proc url_PostDeleteIdentityPolicy_606713(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteIdentityPolicy_606712(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606714 = query.getOrDefault("Action")
  valid_606714 = validateParameter(valid_606714, JString, required = true,
                                 default = newJString("DeleteIdentityPolicy"))
  if valid_606714 != nil:
    section.add "Action", valid_606714
  var valid_606715 = query.getOrDefault("Version")
  valid_606715 = validateParameter(valid_606715, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606715 != nil:
    section.add "Version", valid_606715
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606716 = header.getOrDefault("X-Amz-Signature")
  valid_606716 = validateParameter(valid_606716, JString, required = false,
                                 default = nil)
  if valid_606716 != nil:
    section.add "X-Amz-Signature", valid_606716
  var valid_606717 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606717 = validateParameter(valid_606717, JString, required = false,
                                 default = nil)
  if valid_606717 != nil:
    section.add "X-Amz-Content-Sha256", valid_606717
  var valid_606718 = header.getOrDefault("X-Amz-Date")
  valid_606718 = validateParameter(valid_606718, JString, required = false,
                                 default = nil)
  if valid_606718 != nil:
    section.add "X-Amz-Date", valid_606718
  var valid_606719 = header.getOrDefault("X-Amz-Credential")
  valid_606719 = validateParameter(valid_606719, JString, required = false,
                                 default = nil)
  if valid_606719 != nil:
    section.add "X-Amz-Credential", valid_606719
  var valid_606720 = header.getOrDefault("X-Amz-Security-Token")
  valid_606720 = validateParameter(valid_606720, JString, required = false,
                                 default = nil)
  if valid_606720 != nil:
    section.add "X-Amz-Security-Token", valid_606720
  var valid_606721 = header.getOrDefault("X-Amz-Algorithm")
  valid_606721 = validateParameter(valid_606721, JString, required = false,
                                 default = nil)
  if valid_606721 != nil:
    section.add "X-Amz-Algorithm", valid_606721
  var valid_606722 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606722 = validateParameter(valid_606722, JString, required = false,
                                 default = nil)
  if valid_606722 != nil:
    section.add "X-Amz-SignedHeaders", valid_606722
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identity: JString (required)
  ##           : <p>The identity that is associated with the policy that you want to delete. You can specify the identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   PolicyName: JString (required)
  ##             : The name of the policy to be deleted.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identity` field"
  var valid_606723 = formData.getOrDefault("Identity")
  valid_606723 = validateParameter(valid_606723, JString, required = true,
                                 default = nil)
  if valid_606723 != nil:
    section.add "Identity", valid_606723
  var valid_606724 = formData.getOrDefault("PolicyName")
  valid_606724 = validateParameter(valid_606724, JString, required = true,
                                 default = nil)
  if valid_606724 != nil:
    section.add "PolicyName", valid_606724
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606725: Call_PostDeleteIdentityPolicy_606711; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_606725.validator(path, query, header, formData, body)
  let scheme = call_606725.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606725.url(scheme.get, call_606725.host, call_606725.base,
                         call_606725.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606725, url, valid)

proc call*(call_606726: Call_PostDeleteIdentityPolicy_606711; Identity: string;
          PolicyName: string; Action: string = "DeleteIdentityPolicy";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteIdentityPolicy
  ## <p>Deletes the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : <p>The identity that is associated with the policy that you want to delete. You can specify the identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : The name of the policy to be deleted.
  var query_606727 = newJObject()
  var formData_606728 = newJObject()
  add(formData_606728, "Identity", newJString(Identity))
  add(query_606727, "Action", newJString(Action))
  add(query_606727, "Version", newJString(Version))
  add(formData_606728, "PolicyName", newJString(PolicyName))
  result = call_606726.call(nil, query_606727, nil, formData_606728, nil)

var postDeleteIdentityPolicy* = Call_PostDeleteIdentityPolicy_606711(
    name: "postDeleteIdentityPolicy", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteIdentityPolicy",
    validator: validate_PostDeleteIdentityPolicy_606712, base: "/",
    url: url_PostDeleteIdentityPolicy_606713, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteIdentityPolicy_606694 = ref object of OpenApiRestCall_605589
proc url_GetDeleteIdentityPolicy_606696(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteIdentityPolicy_606695(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyName: JString (required)
  ##             : The name of the policy to be deleted.
  ##   Identity: JString (required)
  ##           : <p>The identity that is associated with the policy that you want to delete. You can specify the identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyName` field"
  var valid_606697 = query.getOrDefault("PolicyName")
  valid_606697 = validateParameter(valid_606697, JString, required = true,
                                 default = nil)
  if valid_606697 != nil:
    section.add "PolicyName", valid_606697
  var valid_606698 = query.getOrDefault("Identity")
  valid_606698 = validateParameter(valid_606698, JString, required = true,
                                 default = nil)
  if valid_606698 != nil:
    section.add "Identity", valid_606698
  var valid_606699 = query.getOrDefault("Action")
  valid_606699 = validateParameter(valid_606699, JString, required = true,
                                 default = newJString("DeleteIdentityPolicy"))
  if valid_606699 != nil:
    section.add "Action", valid_606699
  var valid_606700 = query.getOrDefault("Version")
  valid_606700 = validateParameter(valid_606700, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606700 != nil:
    section.add "Version", valid_606700
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606701 = header.getOrDefault("X-Amz-Signature")
  valid_606701 = validateParameter(valid_606701, JString, required = false,
                                 default = nil)
  if valid_606701 != nil:
    section.add "X-Amz-Signature", valid_606701
  var valid_606702 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606702 = validateParameter(valid_606702, JString, required = false,
                                 default = nil)
  if valid_606702 != nil:
    section.add "X-Amz-Content-Sha256", valid_606702
  var valid_606703 = header.getOrDefault("X-Amz-Date")
  valid_606703 = validateParameter(valid_606703, JString, required = false,
                                 default = nil)
  if valid_606703 != nil:
    section.add "X-Amz-Date", valid_606703
  var valid_606704 = header.getOrDefault("X-Amz-Credential")
  valid_606704 = validateParameter(valid_606704, JString, required = false,
                                 default = nil)
  if valid_606704 != nil:
    section.add "X-Amz-Credential", valid_606704
  var valid_606705 = header.getOrDefault("X-Amz-Security-Token")
  valid_606705 = validateParameter(valid_606705, JString, required = false,
                                 default = nil)
  if valid_606705 != nil:
    section.add "X-Amz-Security-Token", valid_606705
  var valid_606706 = header.getOrDefault("X-Amz-Algorithm")
  valid_606706 = validateParameter(valid_606706, JString, required = false,
                                 default = nil)
  if valid_606706 != nil:
    section.add "X-Amz-Algorithm", valid_606706
  var valid_606707 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606707 = validateParameter(valid_606707, JString, required = false,
                                 default = nil)
  if valid_606707 != nil:
    section.add "X-Amz-SignedHeaders", valid_606707
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606708: Call_GetDeleteIdentityPolicy_606694; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_606708.validator(path, query, header, formData, body)
  let scheme = call_606708.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606708.url(scheme.get, call_606708.host, call_606708.base,
                         call_606708.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606708, url, valid)

proc call*(call_606709: Call_GetDeleteIdentityPolicy_606694; PolicyName: string;
          Identity: string; Action: string = "DeleteIdentityPolicy";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteIdentityPolicy
  ## <p>Deletes the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   PolicyName: string (required)
  ##             : The name of the policy to be deleted.
  ##   Identity: string (required)
  ##           : <p>The identity that is associated with the policy that you want to delete. You can specify the identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606710 = newJObject()
  add(query_606710, "PolicyName", newJString(PolicyName))
  add(query_606710, "Identity", newJString(Identity))
  add(query_606710, "Action", newJString(Action))
  add(query_606710, "Version", newJString(Version))
  result = call_606709.call(nil, query_606710, nil, nil, nil)

var getDeleteIdentityPolicy* = Call_GetDeleteIdentityPolicy_606694(
    name: "getDeleteIdentityPolicy", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DeleteIdentityPolicy",
    validator: validate_GetDeleteIdentityPolicy_606695, base: "/",
    url: url_GetDeleteIdentityPolicy_606696, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteReceiptFilter_606745 = ref object of OpenApiRestCall_605589
proc url_PostDeleteReceiptFilter_606747(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteReceiptFilter_606746(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified IP address filter.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606748 = query.getOrDefault("Action")
  valid_606748 = validateParameter(valid_606748, JString, required = true,
                                 default = newJString("DeleteReceiptFilter"))
  if valid_606748 != nil:
    section.add "Action", valid_606748
  var valid_606749 = query.getOrDefault("Version")
  valid_606749 = validateParameter(valid_606749, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606749 != nil:
    section.add "Version", valid_606749
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606750 = header.getOrDefault("X-Amz-Signature")
  valid_606750 = validateParameter(valid_606750, JString, required = false,
                                 default = nil)
  if valid_606750 != nil:
    section.add "X-Amz-Signature", valid_606750
  var valid_606751 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606751 = validateParameter(valid_606751, JString, required = false,
                                 default = nil)
  if valid_606751 != nil:
    section.add "X-Amz-Content-Sha256", valid_606751
  var valid_606752 = header.getOrDefault("X-Amz-Date")
  valid_606752 = validateParameter(valid_606752, JString, required = false,
                                 default = nil)
  if valid_606752 != nil:
    section.add "X-Amz-Date", valid_606752
  var valid_606753 = header.getOrDefault("X-Amz-Credential")
  valid_606753 = validateParameter(valid_606753, JString, required = false,
                                 default = nil)
  if valid_606753 != nil:
    section.add "X-Amz-Credential", valid_606753
  var valid_606754 = header.getOrDefault("X-Amz-Security-Token")
  valid_606754 = validateParameter(valid_606754, JString, required = false,
                                 default = nil)
  if valid_606754 != nil:
    section.add "X-Amz-Security-Token", valid_606754
  var valid_606755 = header.getOrDefault("X-Amz-Algorithm")
  valid_606755 = validateParameter(valid_606755, JString, required = false,
                                 default = nil)
  if valid_606755 != nil:
    section.add "X-Amz-Algorithm", valid_606755
  var valid_606756 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606756 = validateParameter(valid_606756, JString, required = false,
                                 default = nil)
  if valid_606756 != nil:
    section.add "X-Amz-SignedHeaders", valid_606756
  result.add "header", section
  ## parameters in `formData` object:
  ##   FilterName: JString (required)
  ##             : The name of the IP address filter to delete.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `FilterName` field"
  var valid_606757 = formData.getOrDefault("FilterName")
  valid_606757 = validateParameter(valid_606757, JString, required = true,
                                 default = nil)
  if valid_606757 != nil:
    section.add "FilterName", valid_606757
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606758: Call_PostDeleteReceiptFilter_606745; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified IP address filter.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_606758.validator(path, query, header, formData, body)
  let scheme = call_606758.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606758.url(scheme.get, call_606758.host, call_606758.base,
                         call_606758.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606758, url, valid)

proc call*(call_606759: Call_PostDeleteReceiptFilter_606745; FilterName: string;
          Action: string = "DeleteReceiptFilter"; Version: string = "2010-12-01"): Recallable =
  ## postDeleteReceiptFilter
  ## <p>Deletes the specified IP address filter.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   FilterName: string (required)
  ##             : The name of the IP address filter to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606760 = newJObject()
  var formData_606761 = newJObject()
  add(formData_606761, "FilterName", newJString(FilterName))
  add(query_606760, "Action", newJString(Action))
  add(query_606760, "Version", newJString(Version))
  result = call_606759.call(nil, query_606760, nil, formData_606761, nil)

var postDeleteReceiptFilter* = Call_PostDeleteReceiptFilter_606745(
    name: "postDeleteReceiptFilter", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteReceiptFilter",
    validator: validate_PostDeleteReceiptFilter_606746, base: "/",
    url: url_PostDeleteReceiptFilter_606747, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteReceiptFilter_606729 = ref object of OpenApiRestCall_605589
proc url_GetDeleteReceiptFilter_606731(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteReceiptFilter_606730(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified IP address filter.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   FilterName: JString (required)
  ##             : The name of the IP address filter to delete.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `FilterName` field"
  var valid_606732 = query.getOrDefault("FilterName")
  valid_606732 = validateParameter(valid_606732, JString, required = true,
                                 default = nil)
  if valid_606732 != nil:
    section.add "FilterName", valid_606732
  var valid_606733 = query.getOrDefault("Action")
  valid_606733 = validateParameter(valid_606733, JString, required = true,
                                 default = newJString("DeleteReceiptFilter"))
  if valid_606733 != nil:
    section.add "Action", valid_606733
  var valid_606734 = query.getOrDefault("Version")
  valid_606734 = validateParameter(valid_606734, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606734 != nil:
    section.add "Version", valid_606734
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606735 = header.getOrDefault("X-Amz-Signature")
  valid_606735 = validateParameter(valid_606735, JString, required = false,
                                 default = nil)
  if valid_606735 != nil:
    section.add "X-Amz-Signature", valid_606735
  var valid_606736 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606736 = validateParameter(valid_606736, JString, required = false,
                                 default = nil)
  if valid_606736 != nil:
    section.add "X-Amz-Content-Sha256", valid_606736
  var valid_606737 = header.getOrDefault("X-Amz-Date")
  valid_606737 = validateParameter(valid_606737, JString, required = false,
                                 default = nil)
  if valid_606737 != nil:
    section.add "X-Amz-Date", valid_606737
  var valid_606738 = header.getOrDefault("X-Amz-Credential")
  valid_606738 = validateParameter(valid_606738, JString, required = false,
                                 default = nil)
  if valid_606738 != nil:
    section.add "X-Amz-Credential", valid_606738
  var valid_606739 = header.getOrDefault("X-Amz-Security-Token")
  valid_606739 = validateParameter(valid_606739, JString, required = false,
                                 default = nil)
  if valid_606739 != nil:
    section.add "X-Amz-Security-Token", valid_606739
  var valid_606740 = header.getOrDefault("X-Amz-Algorithm")
  valid_606740 = validateParameter(valid_606740, JString, required = false,
                                 default = nil)
  if valid_606740 != nil:
    section.add "X-Amz-Algorithm", valid_606740
  var valid_606741 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606741 = validateParameter(valid_606741, JString, required = false,
                                 default = nil)
  if valid_606741 != nil:
    section.add "X-Amz-SignedHeaders", valid_606741
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606742: Call_GetDeleteReceiptFilter_606729; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified IP address filter.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_606742.validator(path, query, header, formData, body)
  let scheme = call_606742.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606742.url(scheme.get, call_606742.host, call_606742.base,
                         call_606742.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606742, url, valid)

proc call*(call_606743: Call_GetDeleteReceiptFilter_606729; FilterName: string;
          Action: string = "DeleteReceiptFilter"; Version: string = "2010-12-01"): Recallable =
  ## getDeleteReceiptFilter
  ## <p>Deletes the specified IP address filter.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   FilterName: string (required)
  ##             : The name of the IP address filter to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606744 = newJObject()
  add(query_606744, "FilterName", newJString(FilterName))
  add(query_606744, "Action", newJString(Action))
  add(query_606744, "Version", newJString(Version))
  result = call_606743.call(nil, query_606744, nil, nil, nil)

var getDeleteReceiptFilter* = Call_GetDeleteReceiptFilter_606729(
    name: "getDeleteReceiptFilter", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DeleteReceiptFilter",
    validator: validate_GetDeleteReceiptFilter_606730, base: "/",
    url: url_GetDeleteReceiptFilter_606731, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteReceiptRule_606779 = ref object of OpenApiRestCall_605589
proc url_PostDeleteReceiptRule_606781(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteReceiptRule_606780(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606782 = query.getOrDefault("Action")
  valid_606782 = validateParameter(valid_606782, JString, required = true,
                                 default = newJString("DeleteReceiptRule"))
  if valid_606782 != nil:
    section.add "Action", valid_606782
  var valid_606783 = query.getOrDefault("Version")
  valid_606783 = validateParameter(valid_606783, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606783 != nil:
    section.add "Version", valid_606783
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606784 = header.getOrDefault("X-Amz-Signature")
  valid_606784 = validateParameter(valid_606784, JString, required = false,
                                 default = nil)
  if valid_606784 != nil:
    section.add "X-Amz-Signature", valid_606784
  var valid_606785 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606785 = validateParameter(valid_606785, JString, required = false,
                                 default = nil)
  if valid_606785 != nil:
    section.add "X-Amz-Content-Sha256", valid_606785
  var valid_606786 = header.getOrDefault("X-Amz-Date")
  valid_606786 = validateParameter(valid_606786, JString, required = false,
                                 default = nil)
  if valid_606786 != nil:
    section.add "X-Amz-Date", valid_606786
  var valid_606787 = header.getOrDefault("X-Amz-Credential")
  valid_606787 = validateParameter(valid_606787, JString, required = false,
                                 default = nil)
  if valid_606787 != nil:
    section.add "X-Amz-Credential", valid_606787
  var valid_606788 = header.getOrDefault("X-Amz-Security-Token")
  valid_606788 = validateParameter(valid_606788, JString, required = false,
                                 default = nil)
  if valid_606788 != nil:
    section.add "X-Amz-Security-Token", valid_606788
  var valid_606789 = header.getOrDefault("X-Amz-Algorithm")
  valid_606789 = validateParameter(valid_606789, JString, required = false,
                                 default = nil)
  if valid_606789 != nil:
    section.add "X-Amz-Algorithm", valid_606789
  var valid_606790 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606790 = validateParameter(valid_606790, JString, required = false,
                                 default = nil)
  if valid_606790 != nil:
    section.add "X-Amz-SignedHeaders", valid_606790
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleName: JString (required)
  ##           : The name of the receipt rule to delete.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that contains the receipt rule to delete.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleName` field"
  var valid_606791 = formData.getOrDefault("RuleName")
  valid_606791 = validateParameter(valid_606791, JString, required = true,
                                 default = nil)
  if valid_606791 != nil:
    section.add "RuleName", valid_606791
  var valid_606792 = formData.getOrDefault("RuleSetName")
  valid_606792 = validateParameter(valid_606792, JString, required = true,
                                 default = nil)
  if valid_606792 != nil:
    section.add "RuleSetName", valid_606792
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606793: Call_PostDeleteReceiptRule_606779; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_606793.validator(path, query, header, formData, body)
  let scheme = call_606793.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606793.url(scheme.get, call_606793.host, call_606793.base,
                         call_606793.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606793, url, valid)

proc call*(call_606794: Call_PostDeleteReceiptRule_606779; RuleName: string;
          RuleSetName: string; Action: string = "DeleteReceiptRule";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteReceiptRule
  ## <p>Deletes the specified receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleName: string (required)
  ##           : The name of the receipt rule to delete.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that contains the receipt rule to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606795 = newJObject()
  var formData_606796 = newJObject()
  add(formData_606796, "RuleName", newJString(RuleName))
  add(formData_606796, "RuleSetName", newJString(RuleSetName))
  add(query_606795, "Action", newJString(Action))
  add(query_606795, "Version", newJString(Version))
  result = call_606794.call(nil, query_606795, nil, formData_606796, nil)

var postDeleteReceiptRule* = Call_PostDeleteReceiptRule_606779(
    name: "postDeleteReceiptRule", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteReceiptRule",
    validator: validate_PostDeleteReceiptRule_606780, base: "/",
    url: url_PostDeleteReceiptRule_606781, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteReceiptRule_606762 = ref object of OpenApiRestCall_605589
proc url_GetDeleteReceiptRule_606764(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteReceiptRule_606763(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleName: JString (required)
  ##           : The name of the receipt rule to delete.
  ##   Action: JString (required)
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that contains the receipt rule to delete.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleName` field"
  var valid_606765 = query.getOrDefault("RuleName")
  valid_606765 = validateParameter(valid_606765, JString, required = true,
                                 default = nil)
  if valid_606765 != nil:
    section.add "RuleName", valid_606765
  var valid_606766 = query.getOrDefault("Action")
  valid_606766 = validateParameter(valid_606766, JString, required = true,
                                 default = newJString("DeleteReceiptRule"))
  if valid_606766 != nil:
    section.add "Action", valid_606766
  var valid_606767 = query.getOrDefault("RuleSetName")
  valid_606767 = validateParameter(valid_606767, JString, required = true,
                                 default = nil)
  if valid_606767 != nil:
    section.add "RuleSetName", valid_606767
  var valid_606768 = query.getOrDefault("Version")
  valid_606768 = validateParameter(valid_606768, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606768 != nil:
    section.add "Version", valid_606768
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606769 = header.getOrDefault("X-Amz-Signature")
  valid_606769 = validateParameter(valid_606769, JString, required = false,
                                 default = nil)
  if valid_606769 != nil:
    section.add "X-Amz-Signature", valid_606769
  var valid_606770 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606770 = validateParameter(valid_606770, JString, required = false,
                                 default = nil)
  if valid_606770 != nil:
    section.add "X-Amz-Content-Sha256", valid_606770
  var valid_606771 = header.getOrDefault("X-Amz-Date")
  valid_606771 = validateParameter(valid_606771, JString, required = false,
                                 default = nil)
  if valid_606771 != nil:
    section.add "X-Amz-Date", valid_606771
  var valid_606772 = header.getOrDefault("X-Amz-Credential")
  valid_606772 = validateParameter(valid_606772, JString, required = false,
                                 default = nil)
  if valid_606772 != nil:
    section.add "X-Amz-Credential", valid_606772
  var valid_606773 = header.getOrDefault("X-Amz-Security-Token")
  valid_606773 = validateParameter(valid_606773, JString, required = false,
                                 default = nil)
  if valid_606773 != nil:
    section.add "X-Amz-Security-Token", valid_606773
  var valid_606774 = header.getOrDefault("X-Amz-Algorithm")
  valid_606774 = validateParameter(valid_606774, JString, required = false,
                                 default = nil)
  if valid_606774 != nil:
    section.add "X-Amz-Algorithm", valid_606774
  var valid_606775 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606775 = validateParameter(valid_606775, JString, required = false,
                                 default = nil)
  if valid_606775 != nil:
    section.add "X-Amz-SignedHeaders", valid_606775
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606776: Call_GetDeleteReceiptRule_606762; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_606776.validator(path, query, header, formData, body)
  let scheme = call_606776.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606776.url(scheme.get, call_606776.host, call_606776.base,
                         call_606776.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606776, url, valid)

proc call*(call_606777: Call_GetDeleteReceiptRule_606762; RuleName: string;
          RuleSetName: string; Action: string = "DeleteReceiptRule";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteReceiptRule
  ## <p>Deletes the specified receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleName: string (required)
  ##           : The name of the receipt rule to delete.
  ##   Action: string (required)
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that contains the receipt rule to delete.
  ##   Version: string (required)
  var query_606778 = newJObject()
  add(query_606778, "RuleName", newJString(RuleName))
  add(query_606778, "Action", newJString(Action))
  add(query_606778, "RuleSetName", newJString(RuleSetName))
  add(query_606778, "Version", newJString(Version))
  result = call_606777.call(nil, query_606778, nil, nil, nil)

var getDeleteReceiptRule* = Call_GetDeleteReceiptRule_606762(
    name: "getDeleteReceiptRule", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DeleteReceiptRule",
    validator: validate_GetDeleteReceiptRule_606763, base: "/",
    url: url_GetDeleteReceiptRule_606764, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteReceiptRuleSet_606813 = ref object of OpenApiRestCall_605589
proc url_PostDeleteReceiptRuleSet_606815(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteReceiptRuleSet_606814(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified receipt rule set and all of the receipt rules it contains.</p> <note> <p>The currently active rule set cannot be deleted.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606816 = query.getOrDefault("Action")
  valid_606816 = validateParameter(valid_606816, JString, required = true,
                                 default = newJString("DeleteReceiptRuleSet"))
  if valid_606816 != nil:
    section.add "Action", valid_606816
  var valid_606817 = query.getOrDefault("Version")
  valid_606817 = validateParameter(valid_606817, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606817 != nil:
    section.add "Version", valid_606817
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606818 = header.getOrDefault("X-Amz-Signature")
  valid_606818 = validateParameter(valid_606818, JString, required = false,
                                 default = nil)
  if valid_606818 != nil:
    section.add "X-Amz-Signature", valid_606818
  var valid_606819 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606819 = validateParameter(valid_606819, JString, required = false,
                                 default = nil)
  if valid_606819 != nil:
    section.add "X-Amz-Content-Sha256", valid_606819
  var valid_606820 = header.getOrDefault("X-Amz-Date")
  valid_606820 = validateParameter(valid_606820, JString, required = false,
                                 default = nil)
  if valid_606820 != nil:
    section.add "X-Amz-Date", valid_606820
  var valid_606821 = header.getOrDefault("X-Amz-Credential")
  valid_606821 = validateParameter(valid_606821, JString, required = false,
                                 default = nil)
  if valid_606821 != nil:
    section.add "X-Amz-Credential", valid_606821
  var valid_606822 = header.getOrDefault("X-Amz-Security-Token")
  valid_606822 = validateParameter(valid_606822, JString, required = false,
                                 default = nil)
  if valid_606822 != nil:
    section.add "X-Amz-Security-Token", valid_606822
  var valid_606823 = header.getOrDefault("X-Amz-Algorithm")
  valid_606823 = validateParameter(valid_606823, JString, required = false,
                                 default = nil)
  if valid_606823 != nil:
    section.add "X-Amz-Algorithm", valid_606823
  var valid_606824 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606824 = validateParameter(valid_606824, JString, required = false,
                                 default = nil)
  if valid_606824 != nil:
    section.add "X-Amz-SignedHeaders", valid_606824
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set to delete.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleSetName` field"
  var valid_606825 = formData.getOrDefault("RuleSetName")
  valid_606825 = validateParameter(valid_606825, JString, required = true,
                                 default = nil)
  if valid_606825 != nil:
    section.add "RuleSetName", valid_606825
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606826: Call_PostDeleteReceiptRuleSet_606813; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified receipt rule set and all of the receipt rules it contains.</p> <note> <p>The currently active rule set cannot be deleted.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_606826.validator(path, query, header, formData, body)
  let scheme = call_606826.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606826.url(scheme.get, call_606826.host, call_606826.base,
                         call_606826.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606826, url, valid)

proc call*(call_606827: Call_PostDeleteReceiptRuleSet_606813; RuleSetName: string;
          Action: string = "DeleteReceiptRuleSet"; Version: string = "2010-12-01"): Recallable =
  ## postDeleteReceiptRuleSet
  ## <p>Deletes the specified receipt rule set and all of the receipt rules it contains.</p> <note> <p>The currently active rule set cannot be deleted.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606828 = newJObject()
  var formData_606829 = newJObject()
  add(formData_606829, "RuleSetName", newJString(RuleSetName))
  add(query_606828, "Action", newJString(Action))
  add(query_606828, "Version", newJString(Version))
  result = call_606827.call(nil, query_606828, nil, formData_606829, nil)

var postDeleteReceiptRuleSet* = Call_PostDeleteReceiptRuleSet_606813(
    name: "postDeleteReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteReceiptRuleSet",
    validator: validate_PostDeleteReceiptRuleSet_606814, base: "/",
    url: url_PostDeleteReceiptRuleSet_606815, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteReceiptRuleSet_606797 = ref object of OpenApiRestCall_605589
proc url_GetDeleteReceiptRuleSet_606799(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteReceiptRuleSet_606798(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified receipt rule set and all of the receipt rules it contains.</p> <note> <p>The currently active rule set cannot be deleted.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set to delete.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606800 = query.getOrDefault("Action")
  valid_606800 = validateParameter(valid_606800, JString, required = true,
                                 default = newJString("DeleteReceiptRuleSet"))
  if valid_606800 != nil:
    section.add "Action", valid_606800
  var valid_606801 = query.getOrDefault("RuleSetName")
  valid_606801 = validateParameter(valid_606801, JString, required = true,
                                 default = nil)
  if valid_606801 != nil:
    section.add "RuleSetName", valid_606801
  var valid_606802 = query.getOrDefault("Version")
  valid_606802 = validateParameter(valid_606802, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606802 != nil:
    section.add "Version", valid_606802
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606803 = header.getOrDefault("X-Amz-Signature")
  valid_606803 = validateParameter(valid_606803, JString, required = false,
                                 default = nil)
  if valid_606803 != nil:
    section.add "X-Amz-Signature", valid_606803
  var valid_606804 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606804 = validateParameter(valid_606804, JString, required = false,
                                 default = nil)
  if valid_606804 != nil:
    section.add "X-Amz-Content-Sha256", valid_606804
  var valid_606805 = header.getOrDefault("X-Amz-Date")
  valid_606805 = validateParameter(valid_606805, JString, required = false,
                                 default = nil)
  if valid_606805 != nil:
    section.add "X-Amz-Date", valid_606805
  var valid_606806 = header.getOrDefault("X-Amz-Credential")
  valid_606806 = validateParameter(valid_606806, JString, required = false,
                                 default = nil)
  if valid_606806 != nil:
    section.add "X-Amz-Credential", valid_606806
  var valid_606807 = header.getOrDefault("X-Amz-Security-Token")
  valid_606807 = validateParameter(valid_606807, JString, required = false,
                                 default = nil)
  if valid_606807 != nil:
    section.add "X-Amz-Security-Token", valid_606807
  var valid_606808 = header.getOrDefault("X-Amz-Algorithm")
  valid_606808 = validateParameter(valid_606808, JString, required = false,
                                 default = nil)
  if valid_606808 != nil:
    section.add "X-Amz-Algorithm", valid_606808
  var valid_606809 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606809 = validateParameter(valid_606809, JString, required = false,
                                 default = nil)
  if valid_606809 != nil:
    section.add "X-Amz-SignedHeaders", valid_606809
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606810: Call_GetDeleteReceiptRuleSet_606797; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified receipt rule set and all of the receipt rules it contains.</p> <note> <p>The currently active rule set cannot be deleted.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_606810.validator(path, query, header, formData, body)
  let scheme = call_606810.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606810.url(scheme.get, call_606810.host, call_606810.base,
                         call_606810.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606810, url, valid)

proc call*(call_606811: Call_GetDeleteReceiptRuleSet_606797; RuleSetName: string;
          Action: string = "DeleteReceiptRuleSet"; Version: string = "2010-12-01"): Recallable =
  ## getDeleteReceiptRuleSet
  ## <p>Deletes the specified receipt rule set and all of the receipt rules it contains.</p> <note> <p>The currently active rule set cannot be deleted.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set to delete.
  ##   Version: string (required)
  var query_606812 = newJObject()
  add(query_606812, "Action", newJString(Action))
  add(query_606812, "RuleSetName", newJString(RuleSetName))
  add(query_606812, "Version", newJString(Version))
  result = call_606811.call(nil, query_606812, nil, nil, nil)

var getDeleteReceiptRuleSet* = Call_GetDeleteReceiptRuleSet_606797(
    name: "getDeleteReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DeleteReceiptRuleSet",
    validator: validate_GetDeleteReceiptRuleSet_606798, base: "/",
    url: url_GetDeleteReceiptRuleSet_606799, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteTemplate_606846 = ref object of OpenApiRestCall_605589
proc url_PostDeleteTemplate_606848(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteTemplate_606847(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Deletes an email template.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606849 = query.getOrDefault("Action")
  valid_606849 = validateParameter(valid_606849, JString, required = true,
                                 default = newJString("DeleteTemplate"))
  if valid_606849 != nil:
    section.add "Action", valid_606849
  var valid_606850 = query.getOrDefault("Version")
  valid_606850 = validateParameter(valid_606850, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606850 != nil:
    section.add "Version", valid_606850
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606851 = header.getOrDefault("X-Amz-Signature")
  valid_606851 = validateParameter(valid_606851, JString, required = false,
                                 default = nil)
  if valid_606851 != nil:
    section.add "X-Amz-Signature", valid_606851
  var valid_606852 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606852 = validateParameter(valid_606852, JString, required = false,
                                 default = nil)
  if valid_606852 != nil:
    section.add "X-Amz-Content-Sha256", valid_606852
  var valid_606853 = header.getOrDefault("X-Amz-Date")
  valid_606853 = validateParameter(valid_606853, JString, required = false,
                                 default = nil)
  if valid_606853 != nil:
    section.add "X-Amz-Date", valid_606853
  var valid_606854 = header.getOrDefault("X-Amz-Credential")
  valid_606854 = validateParameter(valid_606854, JString, required = false,
                                 default = nil)
  if valid_606854 != nil:
    section.add "X-Amz-Credential", valid_606854
  var valid_606855 = header.getOrDefault("X-Amz-Security-Token")
  valid_606855 = validateParameter(valid_606855, JString, required = false,
                                 default = nil)
  if valid_606855 != nil:
    section.add "X-Amz-Security-Token", valid_606855
  var valid_606856 = header.getOrDefault("X-Amz-Algorithm")
  valid_606856 = validateParameter(valid_606856, JString, required = false,
                                 default = nil)
  if valid_606856 != nil:
    section.add "X-Amz-Algorithm", valid_606856
  var valid_606857 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606857 = validateParameter(valid_606857, JString, required = false,
                                 default = nil)
  if valid_606857 != nil:
    section.add "X-Amz-SignedHeaders", valid_606857
  result.add "header", section
  ## parameters in `formData` object:
  ##   TemplateName: JString (required)
  ##               : The name of the template to be deleted.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TemplateName` field"
  var valid_606858 = formData.getOrDefault("TemplateName")
  valid_606858 = validateParameter(valid_606858, JString, required = true,
                                 default = nil)
  if valid_606858 != nil:
    section.add "TemplateName", valid_606858
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606859: Call_PostDeleteTemplate_606846; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an email template.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_606859.validator(path, query, header, formData, body)
  let scheme = call_606859.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606859.url(scheme.get, call_606859.host, call_606859.base,
                         call_606859.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606859, url, valid)

proc call*(call_606860: Call_PostDeleteTemplate_606846; TemplateName: string;
          Action: string = "DeleteTemplate"; Version: string = "2010-12-01"): Recallable =
  ## postDeleteTemplate
  ## <p>Deletes an email template.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateName: string (required)
  ##               : The name of the template to be deleted.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606861 = newJObject()
  var formData_606862 = newJObject()
  add(formData_606862, "TemplateName", newJString(TemplateName))
  add(query_606861, "Action", newJString(Action))
  add(query_606861, "Version", newJString(Version))
  result = call_606860.call(nil, query_606861, nil, formData_606862, nil)

var postDeleteTemplate* = Call_PostDeleteTemplate_606846(
    name: "postDeleteTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteTemplate",
    validator: validate_PostDeleteTemplate_606847, base: "/",
    url: url_PostDeleteTemplate_606848, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteTemplate_606830 = ref object of OpenApiRestCall_605589
proc url_GetDeleteTemplate_606832(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteTemplate_606831(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Deletes an email template.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the template to be deleted.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606833 = query.getOrDefault("Action")
  valid_606833 = validateParameter(valid_606833, JString, required = true,
                                 default = newJString("DeleteTemplate"))
  if valid_606833 != nil:
    section.add "Action", valid_606833
  var valid_606834 = query.getOrDefault("Version")
  valid_606834 = validateParameter(valid_606834, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606834 != nil:
    section.add "Version", valid_606834
  var valid_606835 = query.getOrDefault("TemplateName")
  valid_606835 = validateParameter(valid_606835, JString, required = true,
                                 default = nil)
  if valid_606835 != nil:
    section.add "TemplateName", valid_606835
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606836 = header.getOrDefault("X-Amz-Signature")
  valid_606836 = validateParameter(valid_606836, JString, required = false,
                                 default = nil)
  if valid_606836 != nil:
    section.add "X-Amz-Signature", valid_606836
  var valid_606837 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606837 = validateParameter(valid_606837, JString, required = false,
                                 default = nil)
  if valid_606837 != nil:
    section.add "X-Amz-Content-Sha256", valid_606837
  var valid_606838 = header.getOrDefault("X-Amz-Date")
  valid_606838 = validateParameter(valid_606838, JString, required = false,
                                 default = nil)
  if valid_606838 != nil:
    section.add "X-Amz-Date", valid_606838
  var valid_606839 = header.getOrDefault("X-Amz-Credential")
  valid_606839 = validateParameter(valid_606839, JString, required = false,
                                 default = nil)
  if valid_606839 != nil:
    section.add "X-Amz-Credential", valid_606839
  var valid_606840 = header.getOrDefault("X-Amz-Security-Token")
  valid_606840 = validateParameter(valid_606840, JString, required = false,
                                 default = nil)
  if valid_606840 != nil:
    section.add "X-Amz-Security-Token", valid_606840
  var valid_606841 = header.getOrDefault("X-Amz-Algorithm")
  valid_606841 = validateParameter(valid_606841, JString, required = false,
                                 default = nil)
  if valid_606841 != nil:
    section.add "X-Amz-Algorithm", valid_606841
  var valid_606842 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606842 = validateParameter(valid_606842, JString, required = false,
                                 default = nil)
  if valid_606842 != nil:
    section.add "X-Amz-SignedHeaders", valid_606842
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606843: Call_GetDeleteTemplate_606830; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an email template.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_606843.validator(path, query, header, formData, body)
  let scheme = call_606843.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606843.url(scheme.get, call_606843.host, call_606843.base,
                         call_606843.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606843, url, valid)

proc call*(call_606844: Call_GetDeleteTemplate_606830; TemplateName: string;
          Action: string = "DeleteTemplate"; Version: string = "2010-12-01"): Recallable =
  ## getDeleteTemplate
  ## <p>Deletes an email template.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the template to be deleted.
  var query_606845 = newJObject()
  add(query_606845, "Action", newJString(Action))
  add(query_606845, "Version", newJString(Version))
  add(query_606845, "TemplateName", newJString(TemplateName))
  result = call_606844.call(nil, query_606845, nil, nil, nil)

var getDeleteTemplate* = Call_GetDeleteTemplate_606830(name: "getDeleteTemplate",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=DeleteTemplate", validator: validate_GetDeleteTemplate_606831,
    base: "/", url: url_GetDeleteTemplate_606832,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteVerifiedEmailAddress_606879 = ref object of OpenApiRestCall_605589
proc url_PostDeleteVerifiedEmailAddress_606881(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteVerifiedEmailAddress_606880(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deprecated. Use the <code>DeleteIdentity</code> operation to delete email addresses and domains.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606882 = query.getOrDefault("Action")
  valid_606882 = validateParameter(valid_606882, JString, required = true, default = newJString(
      "DeleteVerifiedEmailAddress"))
  if valid_606882 != nil:
    section.add "Action", valid_606882
  var valid_606883 = query.getOrDefault("Version")
  valid_606883 = validateParameter(valid_606883, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606883 != nil:
    section.add "Version", valid_606883
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606884 = header.getOrDefault("X-Amz-Signature")
  valid_606884 = validateParameter(valid_606884, JString, required = false,
                                 default = nil)
  if valid_606884 != nil:
    section.add "X-Amz-Signature", valid_606884
  var valid_606885 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606885 = validateParameter(valid_606885, JString, required = false,
                                 default = nil)
  if valid_606885 != nil:
    section.add "X-Amz-Content-Sha256", valid_606885
  var valid_606886 = header.getOrDefault("X-Amz-Date")
  valid_606886 = validateParameter(valid_606886, JString, required = false,
                                 default = nil)
  if valid_606886 != nil:
    section.add "X-Amz-Date", valid_606886
  var valid_606887 = header.getOrDefault("X-Amz-Credential")
  valid_606887 = validateParameter(valid_606887, JString, required = false,
                                 default = nil)
  if valid_606887 != nil:
    section.add "X-Amz-Credential", valid_606887
  var valid_606888 = header.getOrDefault("X-Amz-Security-Token")
  valid_606888 = validateParameter(valid_606888, JString, required = false,
                                 default = nil)
  if valid_606888 != nil:
    section.add "X-Amz-Security-Token", valid_606888
  var valid_606889 = header.getOrDefault("X-Amz-Algorithm")
  valid_606889 = validateParameter(valid_606889, JString, required = false,
                                 default = nil)
  if valid_606889 != nil:
    section.add "X-Amz-Algorithm", valid_606889
  var valid_606890 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606890 = validateParameter(valid_606890, JString, required = false,
                                 default = nil)
  if valid_606890 != nil:
    section.add "X-Amz-SignedHeaders", valid_606890
  result.add "header", section
  ## parameters in `formData` object:
  ##   EmailAddress: JString (required)
  ##               : An email address to be removed from the list of verified addresses.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `EmailAddress` field"
  var valid_606891 = formData.getOrDefault("EmailAddress")
  valid_606891 = validateParameter(valid_606891, JString, required = true,
                                 default = nil)
  if valid_606891 != nil:
    section.add "EmailAddress", valid_606891
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606892: Call_PostDeleteVerifiedEmailAddress_606879; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deprecated. Use the <code>DeleteIdentity</code> operation to delete email addresses and domains.
  ## 
  let valid = call_606892.validator(path, query, header, formData, body)
  let scheme = call_606892.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606892.url(scheme.get, call_606892.host, call_606892.base,
                         call_606892.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606892, url, valid)

proc call*(call_606893: Call_PostDeleteVerifiedEmailAddress_606879;
          EmailAddress: string; Action: string = "DeleteVerifiedEmailAddress";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteVerifiedEmailAddress
  ## Deprecated. Use the <code>DeleteIdentity</code> operation to delete email addresses and domains.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   EmailAddress: string (required)
  ##               : An email address to be removed from the list of verified addresses.
  var query_606894 = newJObject()
  var formData_606895 = newJObject()
  add(query_606894, "Action", newJString(Action))
  add(query_606894, "Version", newJString(Version))
  add(formData_606895, "EmailAddress", newJString(EmailAddress))
  result = call_606893.call(nil, query_606894, nil, formData_606895, nil)

var postDeleteVerifiedEmailAddress* = Call_PostDeleteVerifiedEmailAddress_606879(
    name: "postDeleteVerifiedEmailAddress", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteVerifiedEmailAddress",
    validator: validate_PostDeleteVerifiedEmailAddress_606880, base: "/",
    url: url_PostDeleteVerifiedEmailAddress_606881,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteVerifiedEmailAddress_606863 = ref object of OpenApiRestCall_605589
proc url_GetDeleteVerifiedEmailAddress_606865(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteVerifiedEmailAddress_606864(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deprecated. Use the <code>DeleteIdentity</code> operation to delete email addresses and domains.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   EmailAddress: JString (required)
  ##               : An email address to be removed from the list of verified addresses.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606866 = query.getOrDefault("Action")
  valid_606866 = validateParameter(valid_606866, JString, required = true, default = newJString(
      "DeleteVerifiedEmailAddress"))
  if valid_606866 != nil:
    section.add "Action", valid_606866
  var valid_606867 = query.getOrDefault("EmailAddress")
  valid_606867 = validateParameter(valid_606867, JString, required = true,
                                 default = nil)
  if valid_606867 != nil:
    section.add "EmailAddress", valid_606867
  var valid_606868 = query.getOrDefault("Version")
  valid_606868 = validateParameter(valid_606868, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606868 != nil:
    section.add "Version", valid_606868
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606869 = header.getOrDefault("X-Amz-Signature")
  valid_606869 = validateParameter(valid_606869, JString, required = false,
                                 default = nil)
  if valid_606869 != nil:
    section.add "X-Amz-Signature", valid_606869
  var valid_606870 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606870 = validateParameter(valid_606870, JString, required = false,
                                 default = nil)
  if valid_606870 != nil:
    section.add "X-Amz-Content-Sha256", valid_606870
  var valid_606871 = header.getOrDefault("X-Amz-Date")
  valid_606871 = validateParameter(valid_606871, JString, required = false,
                                 default = nil)
  if valid_606871 != nil:
    section.add "X-Amz-Date", valid_606871
  var valid_606872 = header.getOrDefault("X-Amz-Credential")
  valid_606872 = validateParameter(valid_606872, JString, required = false,
                                 default = nil)
  if valid_606872 != nil:
    section.add "X-Amz-Credential", valid_606872
  var valid_606873 = header.getOrDefault("X-Amz-Security-Token")
  valid_606873 = validateParameter(valid_606873, JString, required = false,
                                 default = nil)
  if valid_606873 != nil:
    section.add "X-Amz-Security-Token", valid_606873
  var valid_606874 = header.getOrDefault("X-Amz-Algorithm")
  valid_606874 = validateParameter(valid_606874, JString, required = false,
                                 default = nil)
  if valid_606874 != nil:
    section.add "X-Amz-Algorithm", valid_606874
  var valid_606875 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606875 = validateParameter(valid_606875, JString, required = false,
                                 default = nil)
  if valid_606875 != nil:
    section.add "X-Amz-SignedHeaders", valid_606875
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606876: Call_GetDeleteVerifiedEmailAddress_606863; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deprecated. Use the <code>DeleteIdentity</code> operation to delete email addresses and domains.
  ## 
  let valid = call_606876.validator(path, query, header, formData, body)
  let scheme = call_606876.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606876.url(scheme.get, call_606876.host, call_606876.base,
                         call_606876.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606876, url, valid)

proc call*(call_606877: Call_GetDeleteVerifiedEmailAddress_606863;
          EmailAddress: string; Action: string = "DeleteVerifiedEmailAddress";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteVerifiedEmailAddress
  ## Deprecated. Use the <code>DeleteIdentity</code> operation to delete email addresses and domains.
  ##   Action: string (required)
  ##   EmailAddress: string (required)
  ##               : An email address to be removed from the list of verified addresses.
  ##   Version: string (required)
  var query_606878 = newJObject()
  add(query_606878, "Action", newJString(Action))
  add(query_606878, "EmailAddress", newJString(EmailAddress))
  add(query_606878, "Version", newJString(Version))
  result = call_606877.call(nil, query_606878, nil, nil, nil)

var getDeleteVerifiedEmailAddress* = Call_GetDeleteVerifiedEmailAddress_606863(
    name: "getDeleteVerifiedEmailAddress", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DeleteVerifiedEmailAddress",
    validator: validate_GetDeleteVerifiedEmailAddress_606864, base: "/",
    url: url_GetDeleteVerifiedEmailAddress_606865,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeActiveReceiptRuleSet_606911 = ref object of OpenApiRestCall_605589
proc url_PostDescribeActiveReceiptRuleSet_606913(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeActiveReceiptRuleSet_606912(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the metadata and receipt rules for the receipt rule set that is currently active.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606914 = query.getOrDefault("Action")
  valid_606914 = validateParameter(valid_606914, JString, required = true, default = newJString(
      "DescribeActiveReceiptRuleSet"))
  if valid_606914 != nil:
    section.add "Action", valid_606914
  var valid_606915 = query.getOrDefault("Version")
  valid_606915 = validateParameter(valid_606915, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606915 != nil:
    section.add "Version", valid_606915
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606916 = header.getOrDefault("X-Amz-Signature")
  valid_606916 = validateParameter(valid_606916, JString, required = false,
                                 default = nil)
  if valid_606916 != nil:
    section.add "X-Amz-Signature", valid_606916
  var valid_606917 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606917 = validateParameter(valid_606917, JString, required = false,
                                 default = nil)
  if valid_606917 != nil:
    section.add "X-Amz-Content-Sha256", valid_606917
  var valid_606918 = header.getOrDefault("X-Amz-Date")
  valid_606918 = validateParameter(valid_606918, JString, required = false,
                                 default = nil)
  if valid_606918 != nil:
    section.add "X-Amz-Date", valid_606918
  var valid_606919 = header.getOrDefault("X-Amz-Credential")
  valid_606919 = validateParameter(valid_606919, JString, required = false,
                                 default = nil)
  if valid_606919 != nil:
    section.add "X-Amz-Credential", valid_606919
  var valid_606920 = header.getOrDefault("X-Amz-Security-Token")
  valid_606920 = validateParameter(valid_606920, JString, required = false,
                                 default = nil)
  if valid_606920 != nil:
    section.add "X-Amz-Security-Token", valid_606920
  var valid_606921 = header.getOrDefault("X-Amz-Algorithm")
  valid_606921 = validateParameter(valid_606921, JString, required = false,
                                 default = nil)
  if valid_606921 != nil:
    section.add "X-Amz-Algorithm", valid_606921
  var valid_606922 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606922 = validateParameter(valid_606922, JString, required = false,
                                 default = nil)
  if valid_606922 != nil:
    section.add "X-Amz-SignedHeaders", valid_606922
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606923: Call_PostDescribeActiveReceiptRuleSet_606911;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the metadata and receipt rules for the receipt rule set that is currently active.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_606923.validator(path, query, header, formData, body)
  let scheme = call_606923.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606923.url(scheme.get, call_606923.host, call_606923.base,
                         call_606923.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606923, url, valid)

proc call*(call_606924: Call_PostDescribeActiveReceiptRuleSet_606911;
          Action: string = "DescribeActiveReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## postDescribeActiveReceiptRuleSet
  ## <p>Returns the metadata and receipt rules for the receipt rule set that is currently active.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606925 = newJObject()
  add(query_606925, "Action", newJString(Action))
  add(query_606925, "Version", newJString(Version))
  result = call_606924.call(nil, query_606925, nil, nil, nil)

var postDescribeActiveReceiptRuleSet* = Call_PostDescribeActiveReceiptRuleSet_606911(
    name: "postDescribeActiveReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DescribeActiveReceiptRuleSet",
    validator: validate_PostDescribeActiveReceiptRuleSet_606912, base: "/",
    url: url_PostDescribeActiveReceiptRuleSet_606913,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeActiveReceiptRuleSet_606896 = ref object of OpenApiRestCall_605589
proc url_GetDescribeActiveReceiptRuleSet_606898(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeActiveReceiptRuleSet_606897(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the metadata and receipt rules for the receipt rule set that is currently active.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606899 = query.getOrDefault("Action")
  valid_606899 = validateParameter(valid_606899, JString, required = true, default = newJString(
      "DescribeActiveReceiptRuleSet"))
  if valid_606899 != nil:
    section.add "Action", valid_606899
  var valid_606900 = query.getOrDefault("Version")
  valid_606900 = validateParameter(valid_606900, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606900 != nil:
    section.add "Version", valid_606900
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606901 = header.getOrDefault("X-Amz-Signature")
  valid_606901 = validateParameter(valid_606901, JString, required = false,
                                 default = nil)
  if valid_606901 != nil:
    section.add "X-Amz-Signature", valid_606901
  var valid_606902 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606902 = validateParameter(valid_606902, JString, required = false,
                                 default = nil)
  if valid_606902 != nil:
    section.add "X-Amz-Content-Sha256", valid_606902
  var valid_606903 = header.getOrDefault("X-Amz-Date")
  valid_606903 = validateParameter(valid_606903, JString, required = false,
                                 default = nil)
  if valid_606903 != nil:
    section.add "X-Amz-Date", valid_606903
  var valid_606904 = header.getOrDefault("X-Amz-Credential")
  valid_606904 = validateParameter(valid_606904, JString, required = false,
                                 default = nil)
  if valid_606904 != nil:
    section.add "X-Amz-Credential", valid_606904
  var valid_606905 = header.getOrDefault("X-Amz-Security-Token")
  valid_606905 = validateParameter(valid_606905, JString, required = false,
                                 default = nil)
  if valid_606905 != nil:
    section.add "X-Amz-Security-Token", valid_606905
  var valid_606906 = header.getOrDefault("X-Amz-Algorithm")
  valid_606906 = validateParameter(valid_606906, JString, required = false,
                                 default = nil)
  if valid_606906 != nil:
    section.add "X-Amz-Algorithm", valid_606906
  var valid_606907 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606907 = validateParameter(valid_606907, JString, required = false,
                                 default = nil)
  if valid_606907 != nil:
    section.add "X-Amz-SignedHeaders", valid_606907
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606908: Call_GetDescribeActiveReceiptRuleSet_606896;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the metadata and receipt rules for the receipt rule set that is currently active.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_606908.validator(path, query, header, formData, body)
  let scheme = call_606908.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606908.url(scheme.get, call_606908.host, call_606908.base,
                         call_606908.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606908, url, valid)

proc call*(call_606909: Call_GetDescribeActiveReceiptRuleSet_606896;
          Action: string = "DescribeActiveReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## getDescribeActiveReceiptRuleSet
  ## <p>Returns the metadata and receipt rules for the receipt rule set that is currently active.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606910 = newJObject()
  add(query_606910, "Action", newJString(Action))
  add(query_606910, "Version", newJString(Version))
  result = call_606909.call(nil, query_606910, nil, nil, nil)

var getDescribeActiveReceiptRuleSet* = Call_GetDescribeActiveReceiptRuleSet_606896(
    name: "getDescribeActiveReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DescribeActiveReceiptRuleSet",
    validator: validate_GetDescribeActiveReceiptRuleSet_606897, base: "/",
    url: url_GetDescribeActiveReceiptRuleSet_606898,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeConfigurationSet_606943 = ref object of OpenApiRestCall_605589
proc url_PostDescribeConfigurationSet_606945(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeConfigurationSet_606944(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the details of the specified configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606946 = query.getOrDefault("Action")
  valid_606946 = validateParameter(valid_606946, JString, required = true, default = newJString(
      "DescribeConfigurationSet"))
  if valid_606946 != nil:
    section.add "Action", valid_606946
  var valid_606947 = query.getOrDefault("Version")
  valid_606947 = validateParameter(valid_606947, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606947 != nil:
    section.add "Version", valid_606947
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606948 = header.getOrDefault("X-Amz-Signature")
  valid_606948 = validateParameter(valid_606948, JString, required = false,
                                 default = nil)
  if valid_606948 != nil:
    section.add "X-Amz-Signature", valid_606948
  var valid_606949 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606949 = validateParameter(valid_606949, JString, required = false,
                                 default = nil)
  if valid_606949 != nil:
    section.add "X-Amz-Content-Sha256", valid_606949
  var valid_606950 = header.getOrDefault("X-Amz-Date")
  valid_606950 = validateParameter(valid_606950, JString, required = false,
                                 default = nil)
  if valid_606950 != nil:
    section.add "X-Amz-Date", valid_606950
  var valid_606951 = header.getOrDefault("X-Amz-Credential")
  valid_606951 = validateParameter(valid_606951, JString, required = false,
                                 default = nil)
  if valid_606951 != nil:
    section.add "X-Amz-Credential", valid_606951
  var valid_606952 = header.getOrDefault("X-Amz-Security-Token")
  valid_606952 = validateParameter(valid_606952, JString, required = false,
                                 default = nil)
  if valid_606952 != nil:
    section.add "X-Amz-Security-Token", valid_606952
  var valid_606953 = header.getOrDefault("X-Amz-Algorithm")
  valid_606953 = validateParameter(valid_606953, JString, required = false,
                                 default = nil)
  if valid_606953 != nil:
    section.add "X-Amz-Algorithm", valid_606953
  var valid_606954 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606954 = validateParameter(valid_606954, JString, required = false,
                                 default = nil)
  if valid_606954 != nil:
    section.add "X-Amz-SignedHeaders", valid_606954
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetAttributeNames: JArray
  ##                                 : A list of configuration set attributes to return.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set to describe.
  section = newJObject()
  var valid_606955 = formData.getOrDefault("ConfigurationSetAttributeNames")
  valid_606955 = validateParameter(valid_606955, JArray, required = false,
                                 default = nil)
  if valid_606955 != nil:
    section.add "ConfigurationSetAttributeNames", valid_606955
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_606956 = formData.getOrDefault("ConfigurationSetName")
  valid_606956 = validateParameter(valid_606956, JString, required = true,
                                 default = nil)
  if valid_606956 != nil:
    section.add "ConfigurationSetName", valid_606956
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606957: Call_PostDescribeConfigurationSet_606943; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the details of the specified configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_606957.validator(path, query, header, formData, body)
  let scheme = call_606957.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606957.url(scheme.get, call_606957.host, call_606957.base,
                         call_606957.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606957, url, valid)

proc call*(call_606958: Call_PostDescribeConfigurationSet_606943;
          ConfigurationSetName: string;
          ConfigurationSetAttributeNames: JsonNode = nil;
          Action: string = "DescribeConfigurationSet";
          Version: string = "2010-12-01"): Recallable =
  ## postDescribeConfigurationSet
  ## <p>Returns the details of the specified configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetAttributeNames: JArray
  ##                                 : A list of configuration set attributes to return.
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set to describe.
  ##   Version: string (required)
  var query_606959 = newJObject()
  var formData_606960 = newJObject()
  if ConfigurationSetAttributeNames != nil:
    formData_606960.add "ConfigurationSetAttributeNames",
                       ConfigurationSetAttributeNames
  add(query_606959, "Action", newJString(Action))
  add(formData_606960, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_606959, "Version", newJString(Version))
  result = call_606958.call(nil, query_606959, nil, formData_606960, nil)

var postDescribeConfigurationSet* = Call_PostDescribeConfigurationSet_606943(
    name: "postDescribeConfigurationSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DescribeConfigurationSet",
    validator: validate_PostDescribeConfigurationSet_606944, base: "/",
    url: url_PostDescribeConfigurationSet_606945,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeConfigurationSet_606926 = ref object of OpenApiRestCall_605589
proc url_GetDescribeConfigurationSet_606928(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeConfigurationSet_606927(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the details of the specified configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ConfigurationSetAttributeNames: JArray
  ##                                 : A list of configuration set attributes to return.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set to describe.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606929 = query.getOrDefault("ConfigurationSetAttributeNames")
  valid_606929 = validateParameter(valid_606929, JArray, required = false,
                                 default = nil)
  if valid_606929 != nil:
    section.add "ConfigurationSetAttributeNames", valid_606929
  assert query != nil, "query argument is necessary due to required `ConfigurationSetName` field"
  var valid_606930 = query.getOrDefault("ConfigurationSetName")
  valid_606930 = validateParameter(valid_606930, JString, required = true,
                                 default = nil)
  if valid_606930 != nil:
    section.add "ConfigurationSetName", valid_606930
  var valid_606931 = query.getOrDefault("Action")
  valid_606931 = validateParameter(valid_606931, JString, required = true, default = newJString(
      "DescribeConfigurationSet"))
  if valid_606931 != nil:
    section.add "Action", valid_606931
  var valid_606932 = query.getOrDefault("Version")
  valid_606932 = validateParameter(valid_606932, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606932 != nil:
    section.add "Version", valid_606932
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606933 = header.getOrDefault("X-Amz-Signature")
  valid_606933 = validateParameter(valid_606933, JString, required = false,
                                 default = nil)
  if valid_606933 != nil:
    section.add "X-Amz-Signature", valid_606933
  var valid_606934 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606934 = validateParameter(valid_606934, JString, required = false,
                                 default = nil)
  if valid_606934 != nil:
    section.add "X-Amz-Content-Sha256", valid_606934
  var valid_606935 = header.getOrDefault("X-Amz-Date")
  valid_606935 = validateParameter(valid_606935, JString, required = false,
                                 default = nil)
  if valid_606935 != nil:
    section.add "X-Amz-Date", valid_606935
  var valid_606936 = header.getOrDefault("X-Amz-Credential")
  valid_606936 = validateParameter(valid_606936, JString, required = false,
                                 default = nil)
  if valid_606936 != nil:
    section.add "X-Amz-Credential", valid_606936
  var valid_606937 = header.getOrDefault("X-Amz-Security-Token")
  valid_606937 = validateParameter(valid_606937, JString, required = false,
                                 default = nil)
  if valid_606937 != nil:
    section.add "X-Amz-Security-Token", valid_606937
  var valid_606938 = header.getOrDefault("X-Amz-Algorithm")
  valid_606938 = validateParameter(valid_606938, JString, required = false,
                                 default = nil)
  if valid_606938 != nil:
    section.add "X-Amz-Algorithm", valid_606938
  var valid_606939 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606939 = validateParameter(valid_606939, JString, required = false,
                                 default = nil)
  if valid_606939 != nil:
    section.add "X-Amz-SignedHeaders", valid_606939
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606940: Call_GetDescribeConfigurationSet_606926; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the details of the specified configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_606940.validator(path, query, header, formData, body)
  let scheme = call_606940.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606940.url(scheme.get, call_606940.host, call_606940.base,
                         call_606940.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606940, url, valid)

proc call*(call_606941: Call_GetDescribeConfigurationSet_606926;
          ConfigurationSetName: string;
          ConfigurationSetAttributeNames: JsonNode = nil;
          Action: string = "DescribeConfigurationSet";
          Version: string = "2010-12-01"): Recallable =
  ## getDescribeConfigurationSet
  ## <p>Returns the details of the specified configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetAttributeNames: JArray
  ##                                 : A list of configuration set attributes to return.
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set to describe.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606942 = newJObject()
  if ConfigurationSetAttributeNames != nil:
    query_606942.add "ConfigurationSetAttributeNames",
                    ConfigurationSetAttributeNames
  add(query_606942, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_606942, "Action", newJString(Action))
  add(query_606942, "Version", newJString(Version))
  result = call_606941.call(nil, query_606942, nil, nil, nil)

var getDescribeConfigurationSet* = Call_GetDescribeConfigurationSet_606926(
    name: "getDescribeConfigurationSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DescribeConfigurationSet",
    validator: validate_GetDescribeConfigurationSet_606927, base: "/",
    url: url_GetDescribeConfigurationSet_606928,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReceiptRule_606978 = ref object of OpenApiRestCall_605589
proc url_PostDescribeReceiptRule_606980(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeReceiptRule_606979(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the details of the specified receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606981 = query.getOrDefault("Action")
  valid_606981 = validateParameter(valid_606981, JString, required = true,
                                 default = newJString("DescribeReceiptRule"))
  if valid_606981 != nil:
    section.add "Action", valid_606981
  var valid_606982 = query.getOrDefault("Version")
  valid_606982 = validateParameter(valid_606982, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606982 != nil:
    section.add "Version", valid_606982
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606983 = header.getOrDefault("X-Amz-Signature")
  valid_606983 = validateParameter(valid_606983, JString, required = false,
                                 default = nil)
  if valid_606983 != nil:
    section.add "X-Amz-Signature", valid_606983
  var valid_606984 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606984 = validateParameter(valid_606984, JString, required = false,
                                 default = nil)
  if valid_606984 != nil:
    section.add "X-Amz-Content-Sha256", valid_606984
  var valid_606985 = header.getOrDefault("X-Amz-Date")
  valid_606985 = validateParameter(valid_606985, JString, required = false,
                                 default = nil)
  if valid_606985 != nil:
    section.add "X-Amz-Date", valid_606985
  var valid_606986 = header.getOrDefault("X-Amz-Credential")
  valid_606986 = validateParameter(valid_606986, JString, required = false,
                                 default = nil)
  if valid_606986 != nil:
    section.add "X-Amz-Credential", valid_606986
  var valid_606987 = header.getOrDefault("X-Amz-Security-Token")
  valid_606987 = validateParameter(valid_606987, JString, required = false,
                                 default = nil)
  if valid_606987 != nil:
    section.add "X-Amz-Security-Token", valid_606987
  var valid_606988 = header.getOrDefault("X-Amz-Algorithm")
  valid_606988 = validateParameter(valid_606988, JString, required = false,
                                 default = nil)
  if valid_606988 != nil:
    section.add "X-Amz-Algorithm", valid_606988
  var valid_606989 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606989 = validateParameter(valid_606989, JString, required = false,
                                 default = nil)
  if valid_606989 != nil:
    section.add "X-Amz-SignedHeaders", valid_606989
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleName: JString (required)
  ##           : The name of the receipt rule.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleName` field"
  var valid_606990 = formData.getOrDefault("RuleName")
  valid_606990 = validateParameter(valid_606990, JString, required = true,
                                 default = nil)
  if valid_606990 != nil:
    section.add "RuleName", valid_606990
  var valid_606991 = formData.getOrDefault("RuleSetName")
  valid_606991 = validateParameter(valid_606991, JString, required = true,
                                 default = nil)
  if valid_606991 != nil:
    section.add "RuleSetName", valid_606991
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606992: Call_PostDescribeReceiptRule_606978; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the details of the specified receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_606992.validator(path, query, header, formData, body)
  let scheme = call_606992.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606992.url(scheme.get, call_606992.host, call_606992.base,
                         call_606992.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606992, url, valid)

proc call*(call_606993: Call_PostDescribeReceiptRule_606978; RuleName: string;
          RuleSetName: string; Action: string = "DescribeReceiptRule";
          Version: string = "2010-12-01"): Recallable =
  ## postDescribeReceiptRule
  ## <p>Returns the details of the specified receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleName: string (required)
  ##           : The name of the receipt rule.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606994 = newJObject()
  var formData_606995 = newJObject()
  add(formData_606995, "RuleName", newJString(RuleName))
  add(formData_606995, "RuleSetName", newJString(RuleSetName))
  add(query_606994, "Action", newJString(Action))
  add(query_606994, "Version", newJString(Version))
  result = call_606993.call(nil, query_606994, nil, formData_606995, nil)

var postDescribeReceiptRule* = Call_PostDescribeReceiptRule_606978(
    name: "postDescribeReceiptRule", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DescribeReceiptRule",
    validator: validate_PostDescribeReceiptRule_606979, base: "/",
    url: url_PostDescribeReceiptRule_606980, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReceiptRule_606961 = ref object of OpenApiRestCall_605589
proc url_GetDescribeReceiptRule_606963(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeReceiptRule_606962(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the details of the specified receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleName: JString (required)
  ##           : The name of the receipt rule.
  ##   Action: JString (required)
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleName` field"
  var valid_606964 = query.getOrDefault("RuleName")
  valid_606964 = validateParameter(valid_606964, JString, required = true,
                                 default = nil)
  if valid_606964 != nil:
    section.add "RuleName", valid_606964
  var valid_606965 = query.getOrDefault("Action")
  valid_606965 = validateParameter(valid_606965, JString, required = true,
                                 default = newJString("DescribeReceiptRule"))
  if valid_606965 != nil:
    section.add "Action", valid_606965
  var valid_606966 = query.getOrDefault("RuleSetName")
  valid_606966 = validateParameter(valid_606966, JString, required = true,
                                 default = nil)
  if valid_606966 != nil:
    section.add "RuleSetName", valid_606966
  var valid_606967 = query.getOrDefault("Version")
  valid_606967 = validateParameter(valid_606967, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_606967 != nil:
    section.add "Version", valid_606967
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606968 = header.getOrDefault("X-Amz-Signature")
  valid_606968 = validateParameter(valid_606968, JString, required = false,
                                 default = nil)
  if valid_606968 != nil:
    section.add "X-Amz-Signature", valid_606968
  var valid_606969 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606969 = validateParameter(valid_606969, JString, required = false,
                                 default = nil)
  if valid_606969 != nil:
    section.add "X-Amz-Content-Sha256", valid_606969
  var valid_606970 = header.getOrDefault("X-Amz-Date")
  valid_606970 = validateParameter(valid_606970, JString, required = false,
                                 default = nil)
  if valid_606970 != nil:
    section.add "X-Amz-Date", valid_606970
  var valid_606971 = header.getOrDefault("X-Amz-Credential")
  valid_606971 = validateParameter(valid_606971, JString, required = false,
                                 default = nil)
  if valid_606971 != nil:
    section.add "X-Amz-Credential", valid_606971
  var valid_606972 = header.getOrDefault("X-Amz-Security-Token")
  valid_606972 = validateParameter(valid_606972, JString, required = false,
                                 default = nil)
  if valid_606972 != nil:
    section.add "X-Amz-Security-Token", valid_606972
  var valid_606973 = header.getOrDefault("X-Amz-Algorithm")
  valid_606973 = validateParameter(valid_606973, JString, required = false,
                                 default = nil)
  if valid_606973 != nil:
    section.add "X-Amz-Algorithm", valid_606973
  var valid_606974 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606974 = validateParameter(valid_606974, JString, required = false,
                                 default = nil)
  if valid_606974 != nil:
    section.add "X-Amz-SignedHeaders", valid_606974
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606975: Call_GetDescribeReceiptRule_606961; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the details of the specified receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_606975.validator(path, query, header, formData, body)
  let scheme = call_606975.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606975.url(scheme.get, call_606975.host, call_606975.base,
                         call_606975.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606975, url, valid)

proc call*(call_606976: Call_GetDescribeReceiptRule_606961; RuleName: string;
          RuleSetName: string; Action: string = "DescribeReceiptRule";
          Version: string = "2010-12-01"): Recallable =
  ## getDescribeReceiptRule
  ## <p>Returns the details of the specified receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleName: string (required)
  ##           : The name of the receipt rule.
  ##   Action: string (required)
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   Version: string (required)
  var query_606977 = newJObject()
  add(query_606977, "RuleName", newJString(RuleName))
  add(query_606977, "Action", newJString(Action))
  add(query_606977, "RuleSetName", newJString(RuleSetName))
  add(query_606977, "Version", newJString(Version))
  result = call_606976.call(nil, query_606977, nil, nil, nil)

var getDescribeReceiptRule* = Call_GetDescribeReceiptRule_606961(
    name: "getDescribeReceiptRule", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DescribeReceiptRule",
    validator: validate_GetDescribeReceiptRule_606962, base: "/",
    url: url_GetDescribeReceiptRule_606963, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReceiptRuleSet_607012 = ref object of OpenApiRestCall_605589
proc url_PostDescribeReceiptRuleSet_607014(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeReceiptRuleSet_607013(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the details of the specified receipt rule set.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607015 = query.getOrDefault("Action")
  valid_607015 = validateParameter(valid_607015, JString, required = true,
                                 default = newJString("DescribeReceiptRuleSet"))
  if valid_607015 != nil:
    section.add "Action", valid_607015
  var valid_607016 = query.getOrDefault("Version")
  valid_607016 = validateParameter(valid_607016, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607016 != nil:
    section.add "Version", valid_607016
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607017 = header.getOrDefault("X-Amz-Signature")
  valid_607017 = validateParameter(valid_607017, JString, required = false,
                                 default = nil)
  if valid_607017 != nil:
    section.add "X-Amz-Signature", valid_607017
  var valid_607018 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607018 = validateParameter(valid_607018, JString, required = false,
                                 default = nil)
  if valid_607018 != nil:
    section.add "X-Amz-Content-Sha256", valid_607018
  var valid_607019 = header.getOrDefault("X-Amz-Date")
  valid_607019 = validateParameter(valid_607019, JString, required = false,
                                 default = nil)
  if valid_607019 != nil:
    section.add "X-Amz-Date", valid_607019
  var valid_607020 = header.getOrDefault("X-Amz-Credential")
  valid_607020 = validateParameter(valid_607020, JString, required = false,
                                 default = nil)
  if valid_607020 != nil:
    section.add "X-Amz-Credential", valid_607020
  var valid_607021 = header.getOrDefault("X-Amz-Security-Token")
  valid_607021 = validateParameter(valid_607021, JString, required = false,
                                 default = nil)
  if valid_607021 != nil:
    section.add "X-Amz-Security-Token", valid_607021
  var valid_607022 = header.getOrDefault("X-Amz-Algorithm")
  valid_607022 = validateParameter(valid_607022, JString, required = false,
                                 default = nil)
  if valid_607022 != nil:
    section.add "X-Amz-Algorithm", valid_607022
  var valid_607023 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607023 = validateParameter(valid_607023, JString, required = false,
                                 default = nil)
  if valid_607023 != nil:
    section.add "X-Amz-SignedHeaders", valid_607023
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set to describe.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleSetName` field"
  var valid_607024 = formData.getOrDefault("RuleSetName")
  valid_607024 = validateParameter(valid_607024, JString, required = true,
                                 default = nil)
  if valid_607024 != nil:
    section.add "RuleSetName", valid_607024
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607025: Call_PostDescribeReceiptRuleSet_607012; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the details of the specified receipt rule set.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_607025.validator(path, query, header, formData, body)
  let scheme = call_607025.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607025.url(scheme.get, call_607025.host, call_607025.base,
                         call_607025.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607025, url, valid)

proc call*(call_607026: Call_PostDescribeReceiptRuleSet_607012;
          RuleSetName: string; Action: string = "DescribeReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## postDescribeReceiptRuleSet
  ## <p>Returns the details of the specified receipt rule set.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set to describe.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607027 = newJObject()
  var formData_607028 = newJObject()
  add(formData_607028, "RuleSetName", newJString(RuleSetName))
  add(query_607027, "Action", newJString(Action))
  add(query_607027, "Version", newJString(Version))
  result = call_607026.call(nil, query_607027, nil, formData_607028, nil)

var postDescribeReceiptRuleSet* = Call_PostDescribeReceiptRuleSet_607012(
    name: "postDescribeReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DescribeReceiptRuleSet",
    validator: validate_PostDescribeReceiptRuleSet_607013, base: "/",
    url: url_PostDescribeReceiptRuleSet_607014,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReceiptRuleSet_606996 = ref object of OpenApiRestCall_605589
proc url_GetDescribeReceiptRuleSet_606998(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeReceiptRuleSet_606997(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the details of the specified receipt rule set.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set to describe.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606999 = query.getOrDefault("Action")
  valid_606999 = validateParameter(valid_606999, JString, required = true,
                                 default = newJString("DescribeReceiptRuleSet"))
  if valid_606999 != nil:
    section.add "Action", valid_606999
  var valid_607000 = query.getOrDefault("RuleSetName")
  valid_607000 = validateParameter(valid_607000, JString, required = true,
                                 default = nil)
  if valid_607000 != nil:
    section.add "RuleSetName", valid_607000
  var valid_607001 = query.getOrDefault("Version")
  valid_607001 = validateParameter(valid_607001, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607001 != nil:
    section.add "Version", valid_607001
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607002 = header.getOrDefault("X-Amz-Signature")
  valid_607002 = validateParameter(valid_607002, JString, required = false,
                                 default = nil)
  if valid_607002 != nil:
    section.add "X-Amz-Signature", valid_607002
  var valid_607003 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607003 = validateParameter(valid_607003, JString, required = false,
                                 default = nil)
  if valid_607003 != nil:
    section.add "X-Amz-Content-Sha256", valid_607003
  var valid_607004 = header.getOrDefault("X-Amz-Date")
  valid_607004 = validateParameter(valid_607004, JString, required = false,
                                 default = nil)
  if valid_607004 != nil:
    section.add "X-Amz-Date", valid_607004
  var valid_607005 = header.getOrDefault("X-Amz-Credential")
  valid_607005 = validateParameter(valid_607005, JString, required = false,
                                 default = nil)
  if valid_607005 != nil:
    section.add "X-Amz-Credential", valid_607005
  var valid_607006 = header.getOrDefault("X-Amz-Security-Token")
  valid_607006 = validateParameter(valid_607006, JString, required = false,
                                 default = nil)
  if valid_607006 != nil:
    section.add "X-Amz-Security-Token", valid_607006
  var valid_607007 = header.getOrDefault("X-Amz-Algorithm")
  valid_607007 = validateParameter(valid_607007, JString, required = false,
                                 default = nil)
  if valid_607007 != nil:
    section.add "X-Amz-Algorithm", valid_607007
  var valid_607008 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607008 = validateParameter(valid_607008, JString, required = false,
                                 default = nil)
  if valid_607008 != nil:
    section.add "X-Amz-SignedHeaders", valid_607008
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607009: Call_GetDescribeReceiptRuleSet_606996; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the details of the specified receipt rule set.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_607009.validator(path, query, header, formData, body)
  let scheme = call_607009.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607009.url(scheme.get, call_607009.host, call_607009.base,
                         call_607009.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607009, url, valid)

proc call*(call_607010: Call_GetDescribeReceiptRuleSet_606996; RuleSetName: string;
          Action: string = "DescribeReceiptRuleSet"; Version: string = "2010-12-01"): Recallable =
  ## getDescribeReceiptRuleSet
  ## <p>Returns the details of the specified receipt rule set.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set to describe.
  ##   Version: string (required)
  var query_607011 = newJObject()
  add(query_607011, "Action", newJString(Action))
  add(query_607011, "RuleSetName", newJString(RuleSetName))
  add(query_607011, "Version", newJString(Version))
  result = call_607010.call(nil, query_607011, nil, nil, nil)

var getDescribeReceiptRuleSet* = Call_GetDescribeReceiptRuleSet_606996(
    name: "getDescribeReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DescribeReceiptRuleSet",
    validator: validate_GetDescribeReceiptRuleSet_606997, base: "/",
    url: url_GetDescribeReceiptRuleSet_606998,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetAccountSendingEnabled_607044 = ref object of OpenApiRestCall_605589
proc url_PostGetAccountSendingEnabled_607046(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetAccountSendingEnabled_607045(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the email sending status of the Amazon SES account for the current region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607047 = query.getOrDefault("Action")
  valid_607047 = validateParameter(valid_607047, JString, required = true, default = newJString(
      "GetAccountSendingEnabled"))
  if valid_607047 != nil:
    section.add "Action", valid_607047
  var valid_607048 = query.getOrDefault("Version")
  valid_607048 = validateParameter(valid_607048, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607048 != nil:
    section.add "Version", valid_607048
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607049 = header.getOrDefault("X-Amz-Signature")
  valid_607049 = validateParameter(valid_607049, JString, required = false,
                                 default = nil)
  if valid_607049 != nil:
    section.add "X-Amz-Signature", valid_607049
  var valid_607050 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607050 = validateParameter(valid_607050, JString, required = false,
                                 default = nil)
  if valid_607050 != nil:
    section.add "X-Amz-Content-Sha256", valid_607050
  var valid_607051 = header.getOrDefault("X-Amz-Date")
  valid_607051 = validateParameter(valid_607051, JString, required = false,
                                 default = nil)
  if valid_607051 != nil:
    section.add "X-Amz-Date", valid_607051
  var valid_607052 = header.getOrDefault("X-Amz-Credential")
  valid_607052 = validateParameter(valid_607052, JString, required = false,
                                 default = nil)
  if valid_607052 != nil:
    section.add "X-Amz-Credential", valid_607052
  var valid_607053 = header.getOrDefault("X-Amz-Security-Token")
  valid_607053 = validateParameter(valid_607053, JString, required = false,
                                 default = nil)
  if valid_607053 != nil:
    section.add "X-Amz-Security-Token", valid_607053
  var valid_607054 = header.getOrDefault("X-Amz-Algorithm")
  valid_607054 = validateParameter(valid_607054, JString, required = false,
                                 default = nil)
  if valid_607054 != nil:
    section.add "X-Amz-Algorithm", valid_607054
  var valid_607055 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607055 = validateParameter(valid_607055, JString, required = false,
                                 default = nil)
  if valid_607055 != nil:
    section.add "X-Amz-SignedHeaders", valid_607055
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607056: Call_PostGetAccountSendingEnabled_607044; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the email sending status of the Amazon SES account for the current region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_607056.validator(path, query, header, formData, body)
  let scheme = call_607056.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607056.url(scheme.get, call_607056.host, call_607056.base,
                         call_607056.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607056, url, valid)

proc call*(call_607057: Call_PostGetAccountSendingEnabled_607044;
          Action: string = "GetAccountSendingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## postGetAccountSendingEnabled
  ## <p>Returns the email sending status of the Amazon SES account for the current region.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607058 = newJObject()
  add(query_607058, "Action", newJString(Action))
  add(query_607058, "Version", newJString(Version))
  result = call_607057.call(nil, query_607058, nil, nil, nil)

var postGetAccountSendingEnabled* = Call_PostGetAccountSendingEnabled_607044(
    name: "postGetAccountSendingEnabled", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=GetAccountSendingEnabled",
    validator: validate_PostGetAccountSendingEnabled_607045, base: "/",
    url: url_PostGetAccountSendingEnabled_607046,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetAccountSendingEnabled_607029 = ref object of OpenApiRestCall_605589
proc url_GetGetAccountSendingEnabled_607031(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetAccountSendingEnabled_607030(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the email sending status of the Amazon SES account for the current region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607032 = query.getOrDefault("Action")
  valid_607032 = validateParameter(valid_607032, JString, required = true, default = newJString(
      "GetAccountSendingEnabled"))
  if valid_607032 != nil:
    section.add "Action", valid_607032
  var valid_607033 = query.getOrDefault("Version")
  valid_607033 = validateParameter(valid_607033, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607033 != nil:
    section.add "Version", valid_607033
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607034 = header.getOrDefault("X-Amz-Signature")
  valid_607034 = validateParameter(valid_607034, JString, required = false,
                                 default = nil)
  if valid_607034 != nil:
    section.add "X-Amz-Signature", valid_607034
  var valid_607035 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607035 = validateParameter(valid_607035, JString, required = false,
                                 default = nil)
  if valid_607035 != nil:
    section.add "X-Amz-Content-Sha256", valid_607035
  var valid_607036 = header.getOrDefault("X-Amz-Date")
  valid_607036 = validateParameter(valid_607036, JString, required = false,
                                 default = nil)
  if valid_607036 != nil:
    section.add "X-Amz-Date", valid_607036
  var valid_607037 = header.getOrDefault("X-Amz-Credential")
  valid_607037 = validateParameter(valid_607037, JString, required = false,
                                 default = nil)
  if valid_607037 != nil:
    section.add "X-Amz-Credential", valid_607037
  var valid_607038 = header.getOrDefault("X-Amz-Security-Token")
  valid_607038 = validateParameter(valid_607038, JString, required = false,
                                 default = nil)
  if valid_607038 != nil:
    section.add "X-Amz-Security-Token", valid_607038
  var valid_607039 = header.getOrDefault("X-Amz-Algorithm")
  valid_607039 = validateParameter(valid_607039, JString, required = false,
                                 default = nil)
  if valid_607039 != nil:
    section.add "X-Amz-Algorithm", valid_607039
  var valid_607040 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607040 = validateParameter(valid_607040, JString, required = false,
                                 default = nil)
  if valid_607040 != nil:
    section.add "X-Amz-SignedHeaders", valid_607040
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607041: Call_GetGetAccountSendingEnabled_607029; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the email sending status of the Amazon SES account for the current region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_607041.validator(path, query, header, formData, body)
  let scheme = call_607041.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607041.url(scheme.get, call_607041.host, call_607041.base,
                         call_607041.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607041, url, valid)

proc call*(call_607042: Call_GetGetAccountSendingEnabled_607029;
          Action: string = "GetAccountSendingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## getGetAccountSendingEnabled
  ## <p>Returns the email sending status of the Amazon SES account for the current region.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607043 = newJObject()
  add(query_607043, "Action", newJString(Action))
  add(query_607043, "Version", newJString(Version))
  result = call_607042.call(nil, query_607043, nil, nil, nil)

var getGetAccountSendingEnabled* = Call_GetGetAccountSendingEnabled_607029(
    name: "getGetAccountSendingEnabled", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=GetAccountSendingEnabled",
    validator: validate_GetGetAccountSendingEnabled_607030, base: "/",
    url: url_GetGetAccountSendingEnabled_607031,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetCustomVerificationEmailTemplate_607075 = ref object of OpenApiRestCall_605589
proc url_PostGetCustomVerificationEmailTemplate_607077(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetCustomVerificationEmailTemplate_607076(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the custom email verification template for the template name you specify.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607078 = query.getOrDefault("Action")
  valid_607078 = validateParameter(valid_607078, JString, required = true, default = newJString(
      "GetCustomVerificationEmailTemplate"))
  if valid_607078 != nil:
    section.add "Action", valid_607078
  var valid_607079 = query.getOrDefault("Version")
  valid_607079 = validateParameter(valid_607079, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607079 != nil:
    section.add "Version", valid_607079
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607080 = header.getOrDefault("X-Amz-Signature")
  valid_607080 = validateParameter(valid_607080, JString, required = false,
                                 default = nil)
  if valid_607080 != nil:
    section.add "X-Amz-Signature", valid_607080
  var valid_607081 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607081 = validateParameter(valid_607081, JString, required = false,
                                 default = nil)
  if valid_607081 != nil:
    section.add "X-Amz-Content-Sha256", valid_607081
  var valid_607082 = header.getOrDefault("X-Amz-Date")
  valid_607082 = validateParameter(valid_607082, JString, required = false,
                                 default = nil)
  if valid_607082 != nil:
    section.add "X-Amz-Date", valid_607082
  var valid_607083 = header.getOrDefault("X-Amz-Credential")
  valid_607083 = validateParameter(valid_607083, JString, required = false,
                                 default = nil)
  if valid_607083 != nil:
    section.add "X-Amz-Credential", valid_607083
  var valid_607084 = header.getOrDefault("X-Amz-Security-Token")
  valid_607084 = validateParameter(valid_607084, JString, required = false,
                                 default = nil)
  if valid_607084 != nil:
    section.add "X-Amz-Security-Token", valid_607084
  var valid_607085 = header.getOrDefault("X-Amz-Algorithm")
  valid_607085 = validateParameter(valid_607085, JString, required = false,
                                 default = nil)
  if valid_607085 != nil:
    section.add "X-Amz-Algorithm", valid_607085
  var valid_607086 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607086 = validateParameter(valid_607086, JString, required = false,
                                 default = nil)
  if valid_607086 != nil:
    section.add "X-Amz-SignedHeaders", valid_607086
  result.add "header", section
  ## parameters in `formData` object:
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template that you want to retrieve.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TemplateName` field"
  var valid_607087 = formData.getOrDefault("TemplateName")
  valid_607087 = validateParameter(valid_607087, JString, required = true,
                                 default = nil)
  if valid_607087 != nil:
    section.add "TemplateName", valid_607087
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607088: Call_PostGetCustomVerificationEmailTemplate_607075;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the custom email verification template for the template name you specify.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_607088.validator(path, query, header, formData, body)
  let scheme = call_607088.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607088.url(scheme.get, call_607088.host, call_607088.base,
                         call_607088.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607088, url, valid)

proc call*(call_607089: Call_PostGetCustomVerificationEmailTemplate_607075;
          TemplateName: string;
          Action: string = "GetCustomVerificationEmailTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## postGetCustomVerificationEmailTemplate
  ## <p>Returns the custom email verification template for the template name you specify.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template that you want to retrieve.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607090 = newJObject()
  var formData_607091 = newJObject()
  add(formData_607091, "TemplateName", newJString(TemplateName))
  add(query_607090, "Action", newJString(Action))
  add(query_607090, "Version", newJString(Version))
  result = call_607089.call(nil, query_607090, nil, formData_607091, nil)

var postGetCustomVerificationEmailTemplate* = Call_PostGetCustomVerificationEmailTemplate_607075(
    name: "postGetCustomVerificationEmailTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=GetCustomVerificationEmailTemplate",
    validator: validate_PostGetCustomVerificationEmailTemplate_607076, base: "/",
    url: url_PostGetCustomVerificationEmailTemplate_607077,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetCustomVerificationEmailTemplate_607059 = ref object of OpenApiRestCall_605589
proc url_GetGetCustomVerificationEmailTemplate_607061(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetCustomVerificationEmailTemplate_607060(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the custom email verification template for the template name you specify.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template that you want to retrieve.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607062 = query.getOrDefault("Action")
  valid_607062 = validateParameter(valid_607062, JString, required = true, default = newJString(
      "GetCustomVerificationEmailTemplate"))
  if valid_607062 != nil:
    section.add "Action", valid_607062
  var valid_607063 = query.getOrDefault("Version")
  valid_607063 = validateParameter(valid_607063, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607063 != nil:
    section.add "Version", valid_607063
  var valid_607064 = query.getOrDefault("TemplateName")
  valid_607064 = validateParameter(valid_607064, JString, required = true,
                                 default = nil)
  if valid_607064 != nil:
    section.add "TemplateName", valid_607064
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607065 = header.getOrDefault("X-Amz-Signature")
  valid_607065 = validateParameter(valid_607065, JString, required = false,
                                 default = nil)
  if valid_607065 != nil:
    section.add "X-Amz-Signature", valid_607065
  var valid_607066 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607066 = validateParameter(valid_607066, JString, required = false,
                                 default = nil)
  if valid_607066 != nil:
    section.add "X-Amz-Content-Sha256", valid_607066
  var valid_607067 = header.getOrDefault("X-Amz-Date")
  valid_607067 = validateParameter(valid_607067, JString, required = false,
                                 default = nil)
  if valid_607067 != nil:
    section.add "X-Amz-Date", valid_607067
  var valid_607068 = header.getOrDefault("X-Amz-Credential")
  valid_607068 = validateParameter(valid_607068, JString, required = false,
                                 default = nil)
  if valid_607068 != nil:
    section.add "X-Amz-Credential", valid_607068
  var valid_607069 = header.getOrDefault("X-Amz-Security-Token")
  valid_607069 = validateParameter(valid_607069, JString, required = false,
                                 default = nil)
  if valid_607069 != nil:
    section.add "X-Amz-Security-Token", valid_607069
  var valid_607070 = header.getOrDefault("X-Amz-Algorithm")
  valid_607070 = validateParameter(valid_607070, JString, required = false,
                                 default = nil)
  if valid_607070 != nil:
    section.add "X-Amz-Algorithm", valid_607070
  var valid_607071 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607071 = validateParameter(valid_607071, JString, required = false,
                                 default = nil)
  if valid_607071 != nil:
    section.add "X-Amz-SignedHeaders", valid_607071
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607072: Call_GetGetCustomVerificationEmailTemplate_607059;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the custom email verification template for the template name you specify.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_607072.validator(path, query, header, formData, body)
  let scheme = call_607072.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607072.url(scheme.get, call_607072.host, call_607072.base,
                         call_607072.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607072, url, valid)

proc call*(call_607073: Call_GetGetCustomVerificationEmailTemplate_607059;
          TemplateName: string;
          Action: string = "GetCustomVerificationEmailTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## getGetCustomVerificationEmailTemplate
  ## <p>Returns the custom email verification template for the template name you specify.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template that you want to retrieve.
  var query_607074 = newJObject()
  add(query_607074, "Action", newJString(Action))
  add(query_607074, "Version", newJString(Version))
  add(query_607074, "TemplateName", newJString(TemplateName))
  result = call_607073.call(nil, query_607074, nil, nil, nil)

var getGetCustomVerificationEmailTemplate* = Call_GetGetCustomVerificationEmailTemplate_607059(
    name: "getGetCustomVerificationEmailTemplate", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=GetCustomVerificationEmailTemplate",
    validator: validate_GetGetCustomVerificationEmailTemplate_607060, base: "/",
    url: url_GetGetCustomVerificationEmailTemplate_607061,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetIdentityDkimAttributes_607108 = ref object of OpenApiRestCall_605589
proc url_PostGetIdentityDkimAttributes_607110(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetIdentityDkimAttributes_607109(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the current status of Easy DKIM signing for an entity. For domain name identities, this operation also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES has successfully verified that these tokens have been published.</p> <p>This operation takes a list of identities as input and returns the following information for each:</p> <ul> <li> <p>Whether Easy DKIM signing is enabled or disabled.</p> </li> <li> <p>A set of DKIM tokens that represent the identity. If the identity is an email address, the tokens represent the domain of that address.</p> </li> <li> <p>Whether Amazon SES has successfully verified the DKIM tokens published in the domain's DNS. This information is only returned for domain name identities, not for email addresses.</p> </li> </ul> <p>This operation is throttled at one request per second and can only get DKIM attributes for up to 100 identities at a time.</p> <p>For more information about creating DNS records using DKIM tokens, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607111 = query.getOrDefault("Action")
  valid_607111 = validateParameter(valid_607111, JString, required = true, default = newJString(
      "GetIdentityDkimAttributes"))
  if valid_607111 != nil:
    section.add "Action", valid_607111
  var valid_607112 = query.getOrDefault("Version")
  valid_607112 = validateParameter(valid_607112, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607112 != nil:
    section.add "Version", valid_607112
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607113 = header.getOrDefault("X-Amz-Signature")
  valid_607113 = validateParameter(valid_607113, JString, required = false,
                                 default = nil)
  if valid_607113 != nil:
    section.add "X-Amz-Signature", valid_607113
  var valid_607114 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607114 = validateParameter(valid_607114, JString, required = false,
                                 default = nil)
  if valid_607114 != nil:
    section.add "X-Amz-Content-Sha256", valid_607114
  var valid_607115 = header.getOrDefault("X-Amz-Date")
  valid_607115 = validateParameter(valid_607115, JString, required = false,
                                 default = nil)
  if valid_607115 != nil:
    section.add "X-Amz-Date", valid_607115
  var valid_607116 = header.getOrDefault("X-Amz-Credential")
  valid_607116 = validateParameter(valid_607116, JString, required = false,
                                 default = nil)
  if valid_607116 != nil:
    section.add "X-Amz-Credential", valid_607116
  var valid_607117 = header.getOrDefault("X-Amz-Security-Token")
  valid_607117 = validateParameter(valid_607117, JString, required = false,
                                 default = nil)
  if valid_607117 != nil:
    section.add "X-Amz-Security-Token", valid_607117
  var valid_607118 = header.getOrDefault("X-Amz-Algorithm")
  valid_607118 = validateParameter(valid_607118, JString, required = false,
                                 default = nil)
  if valid_607118 != nil:
    section.add "X-Amz-Algorithm", valid_607118
  var valid_607119 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607119 = validateParameter(valid_607119, JString, required = false,
                                 default = nil)
  if valid_607119 != nil:
    section.add "X-Amz-SignedHeaders", valid_607119
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identities: JArray (required)
  ##             : A list of one or more verified identities - email addresses, domains, or both.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identities` field"
  var valid_607120 = formData.getOrDefault("Identities")
  valid_607120 = validateParameter(valid_607120, JArray, required = true, default = nil)
  if valid_607120 != nil:
    section.add "Identities", valid_607120
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607121: Call_PostGetIdentityDkimAttributes_607108; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the current status of Easy DKIM signing for an entity. For domain name identities, this operation also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES has successfully verified that these tokens have been published.</p> <p>This operation takes a list of identities as input and returns the following information for each:</p> <ul> <li> <p>Whether Easy DKIM signing is enabled or disabled.</p> </li> <li> <p>A set of DKIM tokens that represent the identity. If the identity is an email address, the tokens represent the domain of that address.</p> </li> <li> <p>Whether Amazon SES has successfully verified the DKIM tokens published in the domain's DNS. This information is only returned for domain name identities, not for email addresses.</p> </li> </ul> <p>This operation is throttled at one request per second and can only get DKIM attributes for up to 100 identities at a time.</p> <p>For more information about creating DNS records using DKIM tokens, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_607121.validator(path, query, header, formData, body)
  let scheme = call_607121.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607121.url(scheme.get, call_607121.host, call_607121.base,
                         call_607121.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607121, url, valid)

proc call*(call_607122: Call_PostGetIdentityDkimAttributes_607108;
          Identities: JsonNode; Action: string = "GetIdentityDkimAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## postGetIdentityDkimAttributes
  ## <p>Returns the current status of Easy DKIM signing for an entity. For domain name identities, this operation also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES has successfully verified that these tokens have been published.</p> <p>This operation takes a list of identities as input and returns the following information for each:</p> <ul> <li> <p>Whether Easy DKIM signing is enabled or disabled.</p> </li> <li> <p>A set of DKIM tokens that represent the identity. If the identity is an email address, the tokens represent the domain of that address.</p> </li> <li> <p>Whether Amazon SES has successfully verified the DKIM tokens published in the domain's DNS. This information is only returned for domain name identities, not for email addresses.</p> </li> </ul> <p>This operation is throttled at one request per second and can only get DKIM attributes for up to 100 identities at a time.</p> <p>For more information about creating DNS records using DKIM tokens, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html">Amazon SES Developer Guide</a>.</p>
  ##   Identities: JArray (required)
  ##             : A list of one or more verified identities - email addresses, domains, or both.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607123 = newJObject()
  var formData_607124 = newJObject()
  if Identities != nil:
    formData_607124.add "Identities", Identities
  add(query_607123, "Action", newJString(Action))
  add(query_607123, "Version", newJString(Version))
  result = call_607122.call(nil, query_607123, nil, formData_607124, nil)

var postGetIdentityDkimAttributes* = Call_PostGetIdentityDkimAttributes_607108(
    name: "postGetIdentityDkimAttributes", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=GetIdentityDkimAttributes",
    validator: validate_PostGetIdentityDkimAttributes_607109, base: "/",
    url: url_PostGetIdentityDkimAttributes_607110,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetIdentityDkimAttributes_607092 = ref object of OpenApiRestCall_605589
proc url_GetGetIdentityDkimAttributes_607094(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetIdentityDkimAttributes_607093(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the current status of Easy DKIM signing for an entity. For domain name identities, this operation also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES has successfully verified that these tokens have been published.</p> <p>This operation takes a list of identities as input and returns the following information for each:</p> <ul> <li> <p>Whether Easy DKIM signing is enabled or disabled.</p> </li> <li> <p>A set of DKIM tokens that represent the identity. If the identity is an email address, the tokens represent the domain of that address.</p> </li> <li> <p>Whether Amazon SES has successfully verified the DKIM tokens published in the domain's DNS. This information is only returned for domain name identities, not for email addresses.</p> </li> </ul> <p>This operation is throttled at one request per second and can only get DKIM attributes for up to 100 identities at a time.</p> <p>For more information about creating DNS records using DKIM tokens, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identities: JArray (required)
  ##             : A list of one or more verified identities - email addresses, domains, or both.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identities` field"
  var valid_607095 = query.getOrDefault("Identities")
  valid_607095 = validateParameter(valid_607095, JArray, required = true, default = nil)
  if valid_607095 != nil:
    section.add "Identities", valid_607095
  var valid_607096 = query.getOrDefault("Action")
  valid_607096 = validateParameter(valid_607096, JString, required = true, default = newJString(
      "GetIdentityDkimAttributes"))
  if valid_607096 != nil:
    section.add "Action", valid_607096
  var valid_607097 = query.getOrDefault("Version")
  valid_607097 = validateParameter(valid_607097, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607097 != nil:
    section.add "Version", valid_607097
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607098 = header.getOrDefault("X-Amz-Signature")
  valid_607098 = validateParameter(valid_607098, JString, required = false,
                                 default = nil)
  if valid_607098 != nil:
    section.add "X-Amz-Signature", valid_607098
  var valid_607099 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607099 = validateParameter(valid_607099, JString, required = false,
                                 default = nil)
  if valid_607099 != nil:
    section.add "X-Amz-Content-Sha256", valid_607099
  var valid_607100 = header.getOrDefault("X-Amz-Date")
  valid_607100 = validateParameter(valid_607100, JString, required = false,
                                 default = nil)
  if valid_607100 != nil:
    section.add "X-Amz-Date", valid_607100
  var valid_607101 = header.getOrDefault("X-Amz-Credential")
  valid_607101 = validateParameter(valid_607101, JString, required = false,
                                 default = nil)
  if valid_607101 != nil:
    section.add "X-Amz-Credential", valid_607101
  var valid_607102 = header.getOrDefault("X-Amz-Security-Token")
  valid_607102 = validateParameter(valid_607102, JString, required = false,
                                 default = nil)
  if valid_607102 != nil:
    section.add "X-Amz-Security-Token", valid_607102
  var valid_607103 = header.getOrDefault("X-Amz-Algorithm")
  valid_607103 = validateParameter(valid_607103, JString, required = false,
                                 default = nil)
  if valid_607103 != nil:
    section.add "X-Amz-Algorithm", valid_607103
  var valid_607104 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607104 = validateParameter(valid_607104, JString, required = false,
                                 default = nil)
  if valid_607104 != nil:
    section.add "X-Amz-SignedHeaders", valid_607104
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607105: Call_GetGetIdentityDkimAttributes_607092; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the current status of Easy DKIM signing for an entity. For domain name identities, this operation also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES has successfully verified that these tokens have been published.</p> <p>This operation takes a list of identities as input and returns the following information for each:</p> <ul> <li> <p>Whether Easy DKIM signing is enabled or disabled.</p> </li> <li> <p>A set of DKIM tokens that represent the identity. If the identity is an email address, the tokens represent the domain of that address.</p> </li> <li> <p>Whether Amazon SES has successfully verified the DKIM tokens published in the domain's DNS. This information is only returned for domain name identities, not for email addresses.</p> </li> </ul> <p>This operation is throttled at one request per second and can only get DKIM attributes for up to 100 identities at a time.</p> <p>For more information about creating DNS records using DKIM tokens, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_607105.validator(path, query, header, formData, body)
  let scheme = call_607105.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607105.url(scheme.get, call_607105.host, call_607105.base,
                         call_607105.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607105, url, valid)

proc call*(call_607106: Call_GetGetIdentityDkimAttributes_607092;
          Identities: JsonNode; Action: string = "GetIdentityDkimAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## getGetIdentityDkimAttributes
  ## <p>Returns the current status of Easy DKIM signing for an entity. For domain name identities, this operation also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES has successfully verified that these tokens have been published.</p> <p>This operation takes a list of identities as input and returns the following information for each:</p> <ul> <li> <p>Whether Easy DKIM signing is enabled or disabled.</p> </li> <li> <p>A set of DKIM tokens that represent the identity. If the identity is an email address, the tokens represent the domain of that address.</p> </li> <li> <p>Whether Amazon SES has successfully verified the DKIM tokens published in the domain's DNS. This information is only returned for domain name identities, not for email addresses.</p> </li> </ul> <p>This operation is throttled at one request per second and can only get DKIM attributes for up to 100 identities at a time.</p> <p>For more information about creating DNS records using DKIM tokens, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html">Amazon SES Developer Guide</a>.</p>
  ##   Identities: JArray (required)
  ##             : A list of one or more verified identities - email addresses, domains, or both.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607107 = newJObject()
  if Identities != nil:
    query_607107.add "Identities", Identities
  add(query_607107, "Action", newJString(Action))
  add(query_607107, "Version", newJString(Version))
  result = call_607106.call(nil, query_607107, nil, nil, nil)

var getGetIdentityDkimAttributes* = Call_GetGetIdentityDkimAttributes_607092(
    name: "getGetIdentityDkimAttributes", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=GetIdentityDkimAttributes",
    validator: validate_GetGetIdentityDkimAttributes_607093, base: "/",
    url: url_GetGetIdentityDkimAttributes_607094,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetIdentityMailFromDomainAttributes_607141 = ref object of OpenApiRestCall_605589
proc url_PostGetIdentityMailFromDomainAttributes_607143(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetIdentityMailFromDomainAttributes_607142(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the custom MAIL FROM attributes for a list of identities (email addresses : domains).</p> <p>This operation is throttled at one request per second and can only get custom MAIL FROM attributes for up to 100 identities at a time.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607144 = query.getOrDefault("Action")
  valid_607144 = validateParameter(valid_607144, JString, required = true, default = newJString(
      "GetIdentityMailFromDomainAttributes"))
  if valid_607144 != nil:
    section.add "Action", valid_607144
  var valid_607145 = query.getOrDefault("Version")
  valid_607145 = validateParameter(valid_607145, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607145 != nil:
    section.add "Version", valid_607145
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607146 = header.getOrDefault("X-Amz-Signature")
  valid_607146 = validateParameter(valid_607146, JString, required = false,
                                 default = nil)
  if valid_607146 != nil:
    section.add "X-Amz-Signature", valid_607146
  var valid_607147 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607147 = validateParameter(valid_607147, JString, required = false,
                                 default = nil)
  if valid_607147 != nil:
    section.add "X-Amz-Content-Sha256", valid_607147
  var valid_607148 = header.getOrDefault("X-Amz-Date")
  valid_607148 = validateParameter(valid_607148, JString, required = false,
                                 default = nil)
  if valid_607148 != nil:
    section.add "X-Amz-Date", valid_607148
  var valid_607149 = header.getOrDefault("X-Amz-Credential")
  valid_607149 = validateParameter(valid_607149, JString, required = false,
                                 default = nil)
  if valid_607149 != nil:
    section.add "X-Amz-Credential", valid_607149
  var valid_607150 = header.getOrDefault("X-Amz-Security-Token")
  valid_607150 = validateParameter(valid_607150, JString, required = false,
                                 default = nil)
  if valid_607150 != nil:
    section.add "X-Amz-Security-Token", valid_607150
  var valid_607151 = header.getOrDefault("X-Amz-Algorithm")
  valid_607151 = validateParameter(valid_607151, JString, required = false,
                                 default = nil)
  if valid_607151 != nil:
    section.add "X-Amz-Algorithm", valid_607151
  var valid_607152 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607152 = validateParameter(valid_607152, JString, required = false,
                                 default = nil)
  if valid_607152 != nil:
    section.add "X-Amz-SignedHeaders", valid_607152
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identities: JArray (required)
  ##             : A list of one or more identities.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identities` field"
  var valid_607153 = formData.getOrDefault("Identities")
  valid_607153 = validateParameter(valid_607153, JArray, required = true, default = nil)
  if valid_607153 != nil:
    section.add "Identities", valid_607153
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607154: Call_PostGetIdentityMailFromDomainAttributes_607141;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the custom MAIL FROM attributes for a list of identities (email addresses : domains).</p> <p>This operation is throttled at one request per second and can only get custom MAIL FROM attributes for up to 100 identities at a time.</p>
  ## 
  let valid = call_607154.validator(path, query, header, formData, body)
  let scheme = call_607154.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607154.url(scheme.get, call_607154.host, call_607154.base,
                         call_607154.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607154, url, valid)

proc call*(call_607155: Call_PostGetIdentityMailFromDomainAttributes_607141;
          Identities: JsonNode;
          Action: string = "GetIdentityMailFromDomainAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## postGetIdentityMailFromDomainAttributes
  ## <p>Returns the custom MAIL FROM attributes for a list of identities (email addresses : domains).</p> <p>This operation is throttled at one request per second and can only get custom MAIL FROM attributes for up to 100 identities at a time.</p>
  ##   Identities: JArray (required)
  ##             : A list of one or more identities.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607156 = newJObject()
  var formData_607157 = newJObject()
  if Identities != nil:
    formData_607157.add "Identities", Identities
  add(query_607156, "Action", newJString(Action))
  add(query_607156, "Version", newJString(Version))
  result = call_607155.call(nil, query_607156, nil, formData_607157, nil)

var postGetIdentityMailFromDomainAttributes* = Call_PostGetIdentityMailFromDomainAttributes_607141(
    name: "postGetIdentityMailFromDomainAttributes", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=GetIdentityMailFromDomainAttributes",
    validator: validate_PostGetIdentityMailFromDomainAttributes_607142, base: "/",
    url: url_PostGetIdentityMailFromDomainAttributes_607143,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetIdentityMailFromDomainAttributes_607125 = ref object of OpenApiRestCall_605589
proc url_GetGetIdentityMailFromDomainAttributes_607127(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetIdentityMailFromDomainAttributes_607126(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the custom MAIL FROM attributes for a list of identities (email addresses : domains).</p> <p>This operation is throttled at one request per second and can only get custom MAIL FROM attributes for up to 100 identities at a time.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identities: JArray (required)
  ##             : A list of one or more identities.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identities` field"
  var valid_607128 = query.getOrDefault("Identities")
  valid_607128 = validateParameter(valid_607128, JArray, required = true, default = nil)
  if valid_607128 != nil:
    section.add "Identities", valid_607128
  var valid_607129 = query.getOrDefault("Action")
  valid_607129 = validateParameter(valid_607129, JString, required = true, default = newJString(
      "GetIdentityMailFromDomainAttributes"))
  if valid_607129 != nil:
    section.add "Action", valid_607129
  var valid_607130 = query.getOrDefault("Version")
  valid_607130 = validateParameter(valid_607130, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607130 != nil:
    section.add "Version", valid_607130
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607131 = header.getOrDefault("X-Amz-Signature")
  valid_607131 = validateParameter(valid_607131, JString, required = false,
                                 default = nil)
  if valid_607131 != nil:
    section.add "X-Amz-Signature", valid_607131
  var valid_607132 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607132 = validateParameter(valid_607132, JString, required = false,
                                 default = nil)
  if valid_607132 != nil:
    section.add "X-Amz-Content-Sha256", valid_607132
  var valid_607133 = header.getOrDefault("X-Amz-Date")
  valid_607133 = validateParameter(valid_607133, JString, required = false,
                                 default = nil)
  if valid_607133 != nil:
    section.add "X-Amz-Date", valid_607133
  var valid_607134 = header.getOrDefault("X-Amz-Credential")
  valid_607134 = validateParameter(valid_607134, JString, required = false,
                                 default = nil)
  if valid_607134 != nil:
    section.add "X-Amz-Credential", valid_607134
  var valid_607135 = header.getOrDefault("X-Amz-Security-Token")
  valid_607135 = validateParameter(valid_607135, JString, required = false,
                                 default = nil)
  if valid_607135 != nil:
    section.add "X-Amz-Security-Token", valid_607135
  var valid_607136 = header.getOrDefault("X-Amz-Algorithm")
  valid_607136 = validateParameter(valid_607136, JString, required = false,
                                 default = nil)
  if valid_607136 != nil:
    section.add "X-Amz-Algorithm", valid_607136
  var valid_607137 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607137 = validateParameter(valid_607137, JString, required = false,
                                 default = nil)
  if valid_607137 != nil:
    section.add "X-Amz-SignedHeaders", valid_607137
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607138: Call_GetGetIdentityMailFromDomainAttributes_607125;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the custom MAIL FROM attributes for a list of identities (email addresses : domains).</p> <p>This operation is throttled at one request per second and can only get custom MAIL FROM attributes for up to 100 identities at a time.</p>
  ## 
  let valid = call_607138.validator(path, query, header, formData, body)
  let scheme = call_607138.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607138.url(scheme.get, call_607138.host, call_607138.base,
                         call_607138.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607138, url, valid)

proc call*(call_607139: Call_GetGetIdentityMailFromDomainAttributes_607125;
          Identities: JsonNode;
          Action: string = "GetIdentityMailFromDomainAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## getGetIdentityMailFromDomainAttributes
  ## <p>Returns the custom MAIL FROM attributes for a list of identities (email addresses : domains).</p> <p>This operation is throttled at one request per second and can only get custom MAIL FROM attributes for up to 100 identities at a time.</p>
  ##   Identities: JArray (required)
  ##             : A list of one or more identities.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607140 = newJObject()
  if Identities != nil:
    query_607140.add "Identities", Identities
  add(query_607140, "Action", newJString(Action))
  add(query_607140, "Version", newJString(Version))
  result = call_607139.call(nil, query_607140, nil, nil, nil)

var getGetIdentityMailFromDomainAttributes* = Call_GetGetIdentityMailFromDomainAttributes_607125(
    name: "getGetIdentityMailFromDomainAttributes", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=GetIdentityMailFromDomainAttributes",
    validator: validate_GetGetIdentityMailFromDomainAttributes_607126, base: "/",
    url: url_GetGetIdentityMailFromDomainAttributes_607127,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetIdentityNotificationAttributes_607174 = ref object of OpenApiRestCall_605589
proc url_PostGetIdentityNotificationAttributes_607176(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetIdentityNotificationAttributes_607175(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given a list of verified identities (email addresses and/or domains), returns a structure describing identity notification attributes.</p> <p>This operation is throttled at one request per second and can only get notification attributes for up to 100 identities at a time.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607177 = query.getOrDefault("Action")
  valid_607177 = validateParameter(valid_607177, JString, required = true, default = newJString(
      "GetIdentityNotificationAttributes"))
  if valid_607177 != nil:
    section.add "Action", valid_607177
  var valid_607178 = query.getOrDefault("Version")
  valid_607178 = validateParameter(valid_607178, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607178 != nil:
    section.add "Version", valid_607178
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607179 = header.getOrDefault("X-Amz-Signature")
  valid_607179 = validateParameter(valid_607179, JString, required = false,
                                 default = nil)
  if valid_607179 != nil:
    section.add "X-Amz-Signature", valid_607179
  var valid_607180 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607180 = validateParameter(valid_607180, JString, required = false,
                                 default = nil)
  if valid_607180 != nil:
    section.add "X-Amz-Content-Sha256", valid_607180
  var valid_607181 = header.getOrDefault("X-Amz-Date")
  valid_607181 = validateParameter(valid_607181, JString, required = false,
                                 default = nil)
  if valid_607181 != nil:
    section.add "X-Amz-Date", valid_607181
  var valid_607182 = header.getOrDefault("X-Amz-Credential")
  valid_607182 = validateParameter(valid_607182, JString, required = false,
                                 default = nil)
  if valid_607182 != nil:
    section.add "X-Amz-Credential", valid_607182
  var valid_607183 = header.getOrDefault("X-Amz-Security-Token")
  valid_607183 = validateParameter(valid_607183, JString, required = false,
                                 default = nil)
  if valid_607183 != nil:
    section.add "X-Amz-Security-Token", valid_607183
  var valid_607184 = header.getOrDefault("X-Amz-Algorithm")
  valid_607184 = validateParameter(valid_607184, JString, required = false,
                                 default = nil)
  if valid_607184 != nil:
    section.add "X-Amz-Algorithm", valid_607184
  var valid_607185 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607185 = validateParameter(valid_607185, JString, required = false,
                                 default = nil)
  if valid_607185 != nil:
    section.add "X-Amz-SignedHeaders", valid_607185
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identities: JArray (required)
  ##             : A list of one or more identities. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identities` field"
  var valid_607186 = formData.getOrDefault("Identities")
  valid_607186 = validateParameter(valid_607186, JArray, required = true, default = nil)
  if valid_607186 != nil:
    section.add "Identities", valid_607186
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607187: Call_PostGetIdentityNotificationAttributes_607174;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given a list of verified identities (email addresses and/or domains), returns a structure describing identity notification attributes.</p> <p>This operation is throttled at one request per second and can only get notification attributes for up to 100 identities at a time.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_607187.validator(path, query, header, formData, body)
  let scheme = call_607187.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607187.url(scheme.get, call_607187.host, call_607187.base,
                         call_607187.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607187, url, valid)

proc call*(call_607188: Call_PostGetIdentityNotificationAttributes_607174;
          Identities: JsonNode;
          Action: string = "GetIdentityNotificationAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## postGetIdentityNotificationAttributes
  ## <p>Given a list of verified identities (email addresses and/or domains), returns a structure describing identity notification attributes.</p> <p>This operation is throttled at one request per second and can only get notification attributes for up to 100 identities at a time.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Identities: JArray (required)
  ##             : A list of one or more identities. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607189 = newJObject()
  var formData_607190 = newJObject()
  if Identities != nil:
    formData_607190.add "Identities", Identities
  add(query_607189, "Action", newJString(Action))
  add(query_607189, "Version", newJString(Version))
  result = call_607188.call(nil, query_607189, nil, formData_607190, nil)

var postGetIdentityNotificationAttributes* = Call_PostGetIdentityNotificationAttributes_607174(
    name: "postGetIdentityNotificationAttributes", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=GetIdentityNotificationAttributes",
    validator: validate_PostGetIdentityNotificationAttributes_607175, base: "/",
    url: url_PostGetIdentityNotificationAttributes_607176,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetIdentityNotificationAttributes_607158 = ref object of OpenApiRestCall_605589
proc url_GetGetIdentityNotificationAttributes_607160(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetIdentityNotificationAttributes_607159(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given a list of verified identities (email addresses and/or domains), returns a structure describing identity notification attributes.</p> <p>This operation is throttled at one request per second and can only get notification attributes for up to 100 identities at a time.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identities: JArray (required)
  ##             : A list of one or more identities. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identities` field"
  var valid_607161 = query.getOrDefault("Identities")
  valid_607161 = validateParameter(valid_607161, JArray, required = true, default = nil)
  if valid_607161 != nil:
    section.add "Identities", valid_607161
  var valid_607162 = query.getOrDefault("Action")
  valid_607162 = validateParameter(valid_607162, JString, required = true, default = newJString(
      "GetIdentityNotificationAttributes"))
  if valid_607162 != nil:
    section.add "Action", valid_607162
  var valid_607163 = query.getOrDefault("Version")
  valid_607163 = validateParameter(valid_607163, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607163 != nil:
    section.add "Version", valid_607163
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607164 = header.getOrDefault("X-Amz-Signature")
  valid_607164 = validateParameter(valid_607164, JString, required = false,
                                 default = nil)
  if valid_607164 != nil:
    section.add "X-Amz-Signature", valid_607164
  var valid_607165 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607165 = validateParameter(valid_607165, JString, required = false,
                                 default = nil)
  if valid_607165 != nil:
    section.add "X-Amz-Content-Sha256", valid_607165
  var valid_607166 = header.getOrDefault("X-Amz-Date")
  valid_607166 = validateParameter(valid_607166, JString, required = false,
                                 default = nil)
  if valid_607166 != nil:
    section.add "X-Amz-Date", valid_607166
  var valid_607167 = header.getOrDefault("X-Amz-Credential")
  valid_607167 = validateParameter(valid_607167, JString, required = false,
                                 default = nil)
  if valid_607167 != nil:
    section.add "X-Amz-Credential", valid_607167
  var valid_607168 = header.getOrDefault("X-Amz-Security-Token")
  valid_607168 = validateParameter(valid_607168, JString, required = false,
                                 default = nil)
  if valid_607168 != nil:
    section.add "X-Amz-Security-Token", valid_607168
  var valid_607169 = header.getOrDefault("X-Amz-Algorithm")
  valid_607169 = validateParameter(valid_607169, JString, required = false,
                                 default = nil)
  if valid_607169 != nil:
    section.add "X-Amz-Algorithm", valid_607169
  var valid_607170 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607170 = validateParameter(valid_607170, JString, required = false,
                                 default = nil)
  if valid_607170 != nil:
    section.add "X-Amz-SignedHeaders", valid_607170
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607171: Call_GetGetIdentityNotificationAttributes_607158;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given a list of verified identities (email addresses and/or domains), returns a structure describing identity notification attributes.</p> <p>This operation is throttled at one request per second and can only get notification attributes for up to 100 identities at a time.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_607171.validator(path, query, header, formData, body)
  let scheme = call_607171.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607171.url(scheme.get, call_607171.host, call_607171.base,
                         call_607171.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607171, url, valid)

proc call*(call_607172: Call_GetGetIdentityNotificationAttributes_607158;
          Identities: JsonNode;
          Action: string = "GetIdentityNotificationAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## getGetIdentityNotificationAttributes
  ## <p>Given a list of verified identities (email addresses and/or domains), returns a structure describing identity notification attributes.</p> <p>This operation is throttled at one request per second and can only get notification attributes for up to 100 identities at a time.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Identities: JArray (required)
  ##             : A list of one or more identities. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607173 = newJObject()
  if Identities != nil:
    query_607173.add "Identities", Identities
  add(query_607173, "Action", newJString(Action))
  add(query_607173, "Version", newJString(Version))
  result = call_607172.call(nil, query_607173, nil, nil, nil)

var getGetIdentityNotificationAttributes* = Call_GetGetIdentityNotificationAttributes_607158(
    name: "getGetIdentityNotificationAttributes", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=GetIdentityNotificationAttributes",
    validator: validate_GetGetIdentityNotificationAttributes_607159, base: "/",
    url: url_GetGetIdentityNotificationAttributes_607160,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetIdentityPolicies_607208 = ref object of OpenApiRestCall_605589
proc url_PostGetIdentityPolicies_607210(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetIdentityPolicies_607209(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607211 = query.getOrDefault("Action")
  valid_607211 = validateParameter(valid_607211, JString, required = true,
                                 default = newJString("GetIdentityPolicies"))
  if valid_607211 != nil:
    section.add "Action", valid_607211
  var valid_607212 = query.getOrDefault("Version")
  valid_607212 = validateParameter(valid_607212, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607212 != nil:
    section.add "Version", valid_607212
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607213 = header.getOrDefault("X-Amz-Signature")
  valid_607213 = validateParameter(valid_607213, JString, required = false,
                                 default = nil)
  if valid_607213 != nil:
    section.add "X-Amz-Signature", valid_607213
  var valid_607214 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607214 = validateParameter(valid_607214, JString, required = false,
                                 default = nil)
  if valid_607214 != nil:
    section.add "X-Amz-Content-Sha256", valid_607214
  var valid_607215 = header.getOrDefault("X-Amz-Date")
  valid_607215 = validateParameter(valid_607215, JString, required = false,
                                 default = nil)
  if valid_607215 != nil:
    section.add "X-Amz-Date", valid_607215
  var valid_607216 = header.getOrDefault("X-Amz-Credential")
  valid_607216 = validateParameter(valid_607216, JString, required = false,
                                 default = nil)
  if valid_607216 != nil:
    section.add "X-Amz-Credential", valid_607216
  var valid_607217 = header.getOrDefault("X-Amz-Security-Token")
  valid_607217 = validateParameter(valid_607217, JString, required = false,
                                 default = nil)
  if valid_607217 != nil:
    section.add "X-Amz-Security-Token", valid_607217
  var valid_607218 = header.getOrDefault("X-Amz-Algorithm")
  valid_607218 = validateParameter(valid_607218, JString, required = false,
                                 default = nil)
  if valid_607218 != nil:
    section.add "X-Amz-Algorithm", valid_607218
  var valid_607219 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607219 = validateParameter(valid_607219, JString, required = false,
                                 default = nil)
  if valid_607219 != nil:
    section.add "X-Amz-SignedHeaders", valid_607219
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identity: JString (required)
  ##           : <p>The identity for which the policies will be retrieved. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   PolicyNames: JArray (required)
  ##              : A list of the names of policies to be retrieved. You can retrieve a maximum of 20 policies at a time. If you do not know the names of the policies that are attached to the identity, you can use <code>ListIdentityPolicies</code>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identity` field"
  var valid_607220 = formData.getOrDefault("Identity")
  valid_607220 = validateParameter(valid_607220, JString, required = true,
                                 default = nil)
  if valid_607220 != nil:
    section.add "Identity", valid_607220
  var valid_607221 = formData.getOrDefault("PolicyNames")
  valid_607221 = validateParameter(valid_607221, JArray, required = true, default = nil)
  if valid_607221 != nil:
    section.add "PolicyNames", valid_607221
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607222: Call_PostGetIdentityPolicies_607208; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_607222.validator(path, query, header, formData, body)
  let scheme = call_607222.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607222.url(scheme.get, call_607222.host, call_607222.base,
                         call_607222.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607222, url, valid)

proc call*(call_607223: Call_PostGetIdentityPolicies_607208; Identity: string;
          PolicyNames: JsonNode; Action: string = "GetIdentityPolicies";
          Version: string = "2010-12-01"): Recallable =
  ## postGetIdentityPolicies
  ## <p>Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : <p>The identity for which the policies will be retrieved. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   PolicyNames: JArray (required)
  ##              : A list of the names of policies to be retrieved. You can retrieve a maximum of 20 policies at a time. If you do not know the names of the policies that are attached to the identity, you can use <code>ListIdentityPolicies</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607224 = newJObject()
  var formData_607225 = newJObject()
  add(formData_607225, "Identity", newJString(Identity))
  if PolicyNames != nil:
    formData_607225.add "PolicyNames", PolicyNames
  add(query_607224, "Action", newJString(Action))
  add(query_607224, "Version", newJString(Version))
  result = call_607223.call(nil, query_607224, nil, formData_607225, nil)

var postGetIdentityPolicies* = Call_PostGetIdentityPolicies_607208(
    name: "postGetIdentityPolicies", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=GetIdentityPolicies",
    validator: validate_PostGetIdentityPolicies_607209, base: "/",
    url: url_PostGetIdentityPolicies_607210, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetIdentityPolicies_607191 = ref object of OpenApiRestCall_605589
proc url_GetGetIdentityPolicies_607193(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetIdentityPolicies_607192(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : <p>The identity for which the policies will be retrieved. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   PolicyNames: JArray (required)
  ##              : A list of the names of policies to be retrieved. You can retrieve a maximum of 20 policies at a time. If you do not know the names of the policies that are attached to the identity, you can use <code>ListIdentityPolicies</code>.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_607194 = query.getOrDefault("Identity")
  valid_607194 = validateParameter(valid_607194, JString, required = true,
                                 default = nil)
  if valid_607194 != nil:
    section.add "Identity", valid_607194
  var valid_607195 = query.getOrDefault("Action")
  valid_607195 = validateParameter(valid_607195, JString, required = true,
                                 default = newJString("GetIdentityPolicies"))
  if valid_607195 != nil:
    section.add "Action", valid_607195
  var valid_607196 = query.getOrDefault("Version")
  valid_607196 = validateParameter(valid_607196, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607196 != nil:
    section.add "Version", valid_607196
  var valid_607197 = query.getOrDefault("PolicyNames")
  valid_607197 = validateParameter(valid_607197, JArray, required = true, default = nil)
  if valid_607197 != nil:
    section.add "PolicyNames", valid_607197
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607198 = header.getOrDefault("X-Amz-Signature")
  valid_607198 = validateParameter(valid_607198, JString, required = false,
                                 default = nil)
  if valid_607198 != nil:
    section.add "X-Amz-Signature", valid_607198
  var valid_607199 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607199 = validateParameter(valid_607199, JString, required = false,
                                 default = nil)
  if valid_607199 != nil:
    section.add "X-Amz-Content-Sha256", valid_607199
  var valid_607200 = header.getOrDefault("X-Amz-Date")
  valid_607200 = validateParameter(valid_607200, JString, required = false,
                                 default = nil)
  if valid_607200 != nil:
    section.add "X-Amz-Date", valid_607200
  var valid_607201 = header.getOrDefault("X-Amz-Credential")
  valid_607201 = validateParameter(valid_607201, JString, required = false,
                                 default = nil)
  if valid_607201 != nil:
    section.add "X-Amz-Credential", valid_607201
  var valid_607202 = header.getOrDefault("X-Amz-Security-Token")
  valid_607202 = validateParameter(valid_607202, JString, required = false,
                                 default = nil)
  if valid_607202 != nil:
    section.add "X-Amz-Security-Token", valid_607202
  var valid_607203 = header.getOrDefault("X-Amz-Algorithm")
  valid_607203 = validateParameter(valid_607203, JString, required = false,
                                 default = nil)
  if valid_607203 != nil:
    section.add "X-Amz-Algorithm", valid_607203
  var valid_607204 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607204 = validateParameter(valid_607204, JString, required = false,
                                 default = nil)
  if valid_607204 != nil:
    section.add "X-Amz-SignedHeaders", valid_607204
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607205: Call_GetGetIdentityPolicies_607191; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_607205.validator(path, query, header, formData, body)
  let scheme = call_607205.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607205.url(scheme.get, call_607205.host, call_607205.base,
                         call_607205.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607205, url, valid)

proc call*(call_607206: Call_GetGetIdentityPolicies_607191; Identity: string;
          PolicyNames: JsonNode; Action: string = "GetIdentityPolicies";
          Version: string = "2010-12-01"): Recallable =
  ## getGetIdentityPolicies
  ## <p>Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : <p>The identity for which the policies will be retrieved. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyNames: JArray (required)
  ##              : A list of the names of policies to be retrieved. You can retrieve a maximum of 20 policies at a time. If you do not know the names of the policies that are attached to the identity, you can use <code>ListIdentityPolicies</code>.
  var query_607207 = newJObject()
  add(query_607207, "Identity", newJString(Identity))
  add(query_607207, "Action", newJString(Action))
  add(query_607207, "Version", newJString(Version))
  if PolicyNames != nil:
    query_607207.add "PolicyNames", PolicyNames
  result = call_607206.call(nil, query_607207, nil, nil, nil)

var getGetIdentityPolicies* = Call_GetGetIdentityPolicies_607191(
    name: "getGetIdentityPolicies", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=GetIdentityPolicies",
    validator: validate_GetGetIdentityPolicies_607192, base: "/",
    url: url_GetGetIdentityPolicies_607193, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetIdentityVerificationAttributes_607242 = ref object of OpenApiRestCall_605589
proc url_PostGetIdentityVerificationAttributes_607244(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetIdentityVerificationAttributes_607243(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given a list of identities (email addresses and/or domains), returns the verification status and (for domain identities) the verification token for each identity.</p> <p>The verification status of an email address is "Pending" until the email address owner clicks the link within the verification email that Amazon SES sent to that address. If the email address owner clicks the link within 24 hours, the verification status of the email address changes to "Success". If the link is not clicked within 24 hours, the verification status changes to "Failed." In that case, if you still want to verify the email address, you must restart the verification process from the beginning.</p> <p>For domain identities, the domain's verification status is "Pending" as Amazon SES searches for the required TXT record in the DNS settings of the domain. When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p> <p>This operation is throttled at one request per second and can only get verification attributes for up to 100 identities at a time.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607245 = query.getOrDefault("Action")
  valid_607245 = validateParameter(valid_607245, JString, required = true, default = newJString(
      "GetIdentityVerificationAttributes"))
  if valid_607245 != nil:
    section.add "Action", valid_607245
  var valid_607246 = query.getOrDefault("Version")
  valid_607246 = validateParameter(valid_607246, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607246 != nil:
    section.add "Version", valid_607246
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607247 = header.getOrDefault("X-Amz-Signature")
  valid_607247 = validateParameter(valid_607247, JString, required = false,
                                 default = nil)
  if valid_607247 != nil:
    section.add "X-Amz-Signature", valid_607247
  var valid_607248 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607248 = validateParameter(valid_607248, JString, required = false,
                                 default = nil)
  if valid_607248 != nil:
    section.add "X-Amz-Content-Sha256", valid_607248
  var valid_607249 = header.getOrDefault("X-Amz-Date")
  valid_607249 = validateParameter(valid_607249, JString, required = false,
                                 default = nil)
  if valid_607249 != nil:
    section.add "X-Amz-Date", valid_607249
  var valid_607250 = header.getOrDefault("X-Amz-Credential")
  valid_607250 = validateParameter(valid_607250, JString, required = false,
                                 default = nil)
  if valid_607250 != nil:
    section.add "X-Amz-Credential", valid_607250
  var valid_607251 = header.getOrDefault("X-Amz-Security-Token")
  valid_607251 = validateParameter(valid_607251, JString, required = false,
                                 default = nil)
  if valid_607251 != nil:
    section.add "X-Amz-Security-Token", valid_607251
  var valid_607252 = header.getOrDefault("X-Amz-Algorithm")
  valid_607252 = validateParameter(valid_607252, JString, required = false,
                                 default = nil)
  if valid_607252 != nil:
    section.add "X-Amz-Algorithm", valid_607252
  var valid_607253 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607253 = validateParameter(valid_607253, JString, required = false,
                                 default = nil)
  if valid_607253 != nil:
    section.add "X-Amz-SignedHeaders", valid_607253
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identities: JArray (required)
  ##             : A list of identities.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identities` field"
  var valid_607254 = formData.getOrDefault("Identities")
  valid_607254 = validateParameter(valid_607254, JArray, required = true, default = nil)
  if valid_607254 != nil:
    section.add "Identities", valid_607254
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607255: Call_PostGetIdentityVerificationAttributes_607242;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given a list of identities (email addresses and/or domains), returns the verification status and (for domain identities) the verification token for each identity.</p> <p>The verification status of an email address is "Pending" until the email address owner clicks the link within the verification email that Amazon SES sent to that address. If the email address owner clicks the link within 24 hours, the verification status of the email address changes to "Success". If the link is not clicked within 24 hours, the verification status changes to "Failed." In that case, if you still want to verify the email address, you must restart the verification process from the beginning.</p> <p>For domain identities, the domain's verification status is "Pending" as Amazon SES searches for the required TXT record in the DNS settings of the domain. When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p> <p>This operation is throttled at one request per second and can only get verification attributes for up to 100 identities at a time.</p>
  ## 
  let valid = call_607255.validator(path, query, header, formData, body)
  let scheme = call_607255.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607255.url(scheme.get, call_607255.host, call_607255.base,
                         call_607255.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607255, url, valid)

proc call*(call_607256: Call_PostGetIdentityVerificationAttributes_607242;
          Identities: JsonNode;
          Action: string = "GetIdentityVerificationAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## postGetIdentityVerificationAttributes
  ## <p>Given a list of identities (email addresses and/or domains), returns the verification status and (for domain identities) the verification token for each identity.</p> <p>The verification status of an email address is "Pending" until the email address owner clicks the link within the verification email that Amazon SES sent to that address. If the email address owner clicks the link within 24 hours, the verification status of the email address changes to "Success". If the link is not clicked within 24 hours, the verification status changes to "Failed." In that case, if you still want to verify the email address, you must restart the verification process from the beginning.</p> <p>For domain identities, the domain's verification status is "Pending" as Amazon SES searches for the required TXT record in the DNS settings of the domain. When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p> <p>This operation is throttled at one request per second and can only get verification attributes for up to 100 identities at a time.</p>
  ##   Identities: JArray (required)
  ##             : A list of identities.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607257 = newJObject()
  var formData_607258 = newJObject()
  if Identities != nil:
    formData_607258.add "Identities", Identities
  add(query_607257, "Action", newJString(Action))
  add(query_607257, "Version", newJString(Version))
  result = call_607256.call(nil, query_607257, nil, formData_607258, nil)

var postGetIdentityVerificationAttributes* = Call_PostGetIdentityVerificationAttributes_607242(
    name: "postGetIdentityVerificationAttributes", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=GetIdentityVerificationAttributes",
    validator: validate_PostGetIdentityVerificationAttributes_607243, base: "/",
    url: url_PostGetIdentityVerificationAttributes_607244,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetIdentityVerificationAttributes_607226 = ref object of OpenApiRestCall_605589
proc url_GetGetIdentityVerificationAttributes_607228(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetIdentityVerificationAttributes_607227(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given a list of identities (email addresses and/or domains), returns the verification status and (for domain identities) the verification token for each identity.</p> <p>The verification status of an email address is "Pending" until the email address owner clicks the link within the verification email that Amazon SES sent to that address. If the email address owner clicks the link within 24 hours, the verification status of the email address changes to "Success". If the link is not clicked within 24 hours, the verification status changes to "Failed." In that case, if you still want to verify the email address, you must restart the verification process from the beginning.</p> <p>For domain identities, the domain's verification status is "Pending" as Amazon SES searches for the required TXT record in the DNS settings of the domain. When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p> <p>This operation is throttled at one request per second and can only get verification attributes for up to 100 identities at a time.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identities: JArray (required)
  ##             : A list of identities.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identities` field"
  var valid_607229 = query.getOrDefault("Identities")
  valid_607229 = validateParameter(valid_607229, JArray, required = true, default = nil)
  if valid_607229 != nil:
    section.add "Identities", valid_607229
  var valid_607230 = query.getOrDefault("Action")
  valid_607230 = validateParameter(valid_607230, JString, required = true, default = newJString(
      "GetIdentityVerificationAttributes"))
  if valid_607230 != nil:
    section.add "Action", valid_607230
  var valid_607231 = query.getOrDefault("Version")
  valid_607231 = validateParameter(valid_607231, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607231 != nil:
    section.add "Version", valid_607231
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607232 = header.getOrDefault("X-Amz-Signature")
  valid_607232 = validateParameter(valid_607232, JString, required = false,
                                 default = nil)
  if valid_607232 != nil:
    section.add "X-Amz-Signature", valid_607232
  var valid_607233 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607233 = validateParameter(valid_607233, JString, required = false,
                                 default = nil)
  if valid_607233 != nil:
    section.add "X-Amz-Content-Sha256", valid_607233
  var valid_607234 = header.getOrDefault("X-Amz-Date")
  valid_607234 = validateParameter(valid_607234, JString, required = false,
                                 default = nil)
  if valid_607234 != nil:
    section.add "X-Amz-Date", valid_607234
  var valid_607235 = header.getOrDefault("X-Amz-Credential")
  valid_607235 = validateParameter(valid_607235, JString, required = false,
                                 default = nil)
  if valid_607235 != nil:
    section.add "X-Amz-Credential", valid_607235
  var valid_607236 = header.getOrDefault("X-Amz-Security-Token")
  valid_607236 = validateParameter(valid_607236, JString, required = false,
                                 default = nil)
  if valid_607236 != nil:
    section.add "X-Amz-Security-Token", valid_607236
  var valid_607237 = header.getOrDefault("X-Amz-Algorithm")
  valid_607237 = validateParameter(valid_607237, JString, required = false,
                                 default = nil)
  if valid_607237 != nil:
    section.add "X-Amz-Algorithm", valid_607237
  var valid_607238 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607238 = validateParameter(valid_607238, JString, required = false,
                                 default = nil)
  if valid_607238 != nil:
    section.add "X-Amz-SignedHeaders", valid_607238
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607239: Call_GetGetIdentityVerificationAttributes_607226;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given a list of identities (email addresses and/or domains), returns the verification status and (for domain identities) the verification token for each identity.</p> <p>The verification status of an email address is "Pending" until the email address owner clicks the link within the verification email that Amazon SES sent to that address. If the email address owner clicks the link within 24 hours, the verification status of the email address changes to "Success". If the link is not clicked within 24 hours, the verification status changes to "Failed." In that case, if you still want to verify the email address, you must restart the verification process from the beginning.</p> <p>For domain identities, the domain's verification status is "Pending" as Amazon SES searches for the required TXT record in the DNS settings of the domain. When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p> <p>This operation is throttled at one request per second and can only get verification attributes for up to 100 identities at a time.</p>
  ## 
  let valid = call_607239.validator(path, query, header, formData, body)
  let scheme = call_607239.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607239.url(scheme.get, call_607239.host, call_607239.base,
                         call_607239.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607239, url, valid)

proc call*(call_607240: Call_GetGetIdentityVerificationAttributes_607226;
          Identities: JsonNode;
          Action: string = "GetIdentityVerificationAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## getGetIdentityVerificationAttributes
  ## <p>Given a list of identities (email addresses and/or domains), returns the verification status and (for domain identities) the verification token for each identity.</p> <p>The verification status of an email address is "Pending" until the email address owner clicks the link within the verification email that Amazon SES sent to that address. If the email address owner clicks the link within 24 hours, the verification status of the email address changes to "Success". If the link is not clicked within 24 hours, the verification status changes to "Failed." In that case, if you still want to verify the email address, you must restart the verification process from the beginning.</p> <p>For domain identities, the domain's verification status is "Pending" as Amazon SES searches for the required TXT record in the DNS settings of the domain. When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p> <p>This operation is throttled at one request per second and can only get verification attributes for up to 100 identities at a time.</p>
  ##   Identities: JArray (required)
  ##             : A list of identities.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607241 = newJObject()
  if Identities != nil:
    query_607241.add "Identities", Identities
  add(query_607241, "Action", newJString(Action))
  add(query_607241, "Version", newJString(Version))
  result = call_607240.call(nil, query_607241, nil, nil, nil)

var getGetIdentityVerificationAttributes* = Call_GetGetIdentityVerificationAttributes_607226(
    name: "getGetIdentityVerificationAttributes", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=GetIdentityVerificationAttributes",
    validator: validate_GetGetIdentityVerificationAttributes_607227, base: "/",
    url: url_GetGetIdentityVerificationAttributes_607228,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetSendQuota_607274 = ref object of OpenApiRestCall_605589
proc url_PostGetSendQuota_607276(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetSendQuota_607275(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Provides the sending limits for the Amazon SES account. </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607277 = query.getOrDefault("Action")
  valid_607277 = validateParameter(valid_607277, JString, required = true,
                                 default = newJString("GetSendQuota"))
  if valid_607277 != nil:
    section.add "Action", valid_607277
  var valid_607278 = query.getOrDefault("Version")
  valid_607278 = validateParameter(valid_607278, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607278 != nil:
    section.add "Version", valid_607278
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607279 = header.getOrDefault("X-Amz-Signature")
  valid_607279 = validateParameter(valid_607279, JString, required = false,
                                 default = nil)
  if valid_607279 != nil:
    section.add "X-Amz-Signature", valid_607279
  var valid_607280 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607280 = validateParameter(valid_607280, JString, required = false,
                                 default = nil)
  if valid_607280 != nil:
    section.add "X-Amz-Content-Sha256", valid_607280
  var valid_607281 = header.getOrDefault("X-Amz-Date")
  valid_607281 = validateParameter(valid_607281, JString, required = false,
                                 default = nil)
  if valid_607281 != nil:
    section.add "X-Amz-Date", valid_607281
  var valid_607282 = header.getOrDefault("X-Amz-Credential")
  valid_607282 = validateParameter(valid_607282, JString, required = false,
                                 default = nil)
  if valid_607282 != nil:
    section.add "X-Amz-Credential", valid_607282
  var valid_607283 = header.getOrDefault("X-Amz-Security-Token")
  valid_607283 = validateParameter(valid_607283, JString, required = false,
                                 default = nil)
  if valid_607283 != nil:
    section.add "X-Amz-Security-Token", valid_607283
  var valid_607284 = header.getOrDefault("X-Amz-Algorithm")
  valid_607284 = validateParameter(valid_607284, JString, required = false,
                                 default = nil)
  if valid_607284 != nil:
    section.add "X-Amz-Algorithm", valid_607284
  var valid_607285 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607285 = validateParameter(valid_607285, JString, required = false,
                                 default = nil)
  if valid_607285 != nil:
    section.add "X-Amz-SignedHeaders", valid_607285
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607286: Call_PostGetSendQuota_607274; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Provides the sending limits for the Amazon SES account. </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_607286.validator(path, query, header, formData, body)
  let scheme = call_607286.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607286.url(scheme.get, call_607286.host, call_607286.base,
                         call_607286.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607286, url, valid)

proc call*(call_607287: Call_PostGetSendQuota_607274;
          Action: string = "GetSendQuota"; Version: string = "2010-12-01"): Recallable =
  ## postGetSendQuota
  ## <p>Provides the sending limits for the Amazon SES account. </p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607288 = newJObject()
  add(query_607288, "Action", newJString(Action))
  add(query_607288, "Version", newJString(Version))
  result = call_607287.call(nil, query_607288, nil, nil, nil)

var postGetSendQuota* = Call_PostGetSendQuota_607274(name: "postGetSendQuota",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=GetSendQuota", validator: validate_PostGetSendQuota_607275,
    base: "/", url: url_PostGetSendQuota_607276,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetSendQuota_607259 = ref object of OpenApiRestCall_605589
proc url_GetGetSendQuota_607261(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetSendQuota_607260(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Provides the sending limits for the Amazon SES account. </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607262 = query.getOrDefault("Action")
  valid_607262 = validateParameter(valid_607262, JString, required = true,
                                 default = newJString("GetSendQuota"))
  if valid_607262 != nil:
    section.add "Action", valid_607262
  var valid_607263 = query.getOrDefault("Version")
  valid_607263 = validateParameter(valid_607263, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607263 != nil:
    section.add "Version", valid_607263
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607264 = header.getOrDefault("X-Amz-Signature")
  valid_607264 = validateParameter(valid_607264, JString, required = false,
                                 default = nil)
  if valid_607264 != nil:
    section.add "X-Amz-Signature", valid_607264
  var valid_607265 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607265 = validateParameter(valid_607265, JString, required = false,
                                 default = nil)
  if valid_607265 != nil:
    section.add "X-Amz-Content-Sha256", valid_607265
  var valid_607266 = header.getOrDefault("X-Amz-Date")
  valid_607266 = validateParameter(valid_607266, JString, required = false,
                                 default = nil)
  if valid_607266 != nil:
    section.add "X-Amz-Date", valid_607266
  var valid_607267 = header.getOrDefault("X-Amz-Credential")
  valid_607267 = validateParameter(valid_607267, JString, required = false,
                                 default = nil)
  if valid_607267 != nil:
    section.add "X-Amz-Credential", valid_607267
  var valid_607268 = header.getOrDefault("X-Amz-Security-Token")
  valid_607268 = validateParameter(valid_607268, JString, required = false,
                                 default = nil)
  if valid_607268 != nil:
    section.add "X-Amz-Security-Token", valid_607268
  var valid_607269 = header.getOrDefault("X-Amz-Algorithm")
  valid_607269 = validateParameter(valid_607269, JString, required = false,
                                 default = nil)
  if valid_607269 != nil:
    section.add "X-Amz-Algorithm", valid_607269
  var valid_607270 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607270 = validateParameter(valid_607270, JString, required = false,
                                 default = nil)
  if valid_607270 != nil:
    section.add "X-Amz-SignedHeaders", valid_607270
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607271: Call_GetGetSendQuota_607259; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Provides the sending limits for the Amazon SES account. </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_607271.validator(path, query, header, formData, body)
  let scheme = call_607271.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607271.url(scheme.get, call_607271.host, call_607271.base,
                         call_607271.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607271, url, valid)

proc call*(call_607272: Call_GetGetSendQuota_607259;
          Action: string = "GetSendQuota"; Version: string = "2010-12-01"): Recallable =
  ## getGetSendQuota
  ## <p>Provides the sending limits for the Amazon SES account. </p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607273 = newJObject()
  add(query_607273, "Action", newJString(Action))
  add(query_607273, "Version", newJString(Version))
  result = call_607272.call(nil, query_607273, nil, nil, nil)

var getGetSendQuota* = Call_GetGetSendQuota_607259(name: "getGetSendQuota",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=GetSendQuota", validator: validate_GetGetSendQuota_607260,
    base: "/", url: url_GetGetSendQuota_607261, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetSendStatistics_607304 = ref object of OpenApiRestCall_605589
proc url_PostGetSendStatistics_607306(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetSendStatistics_607305(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Provides sending statistics for the current AWS Region. The result is a list of data points, representing the last two weeks of sending activity. Each data point in the list contains statistics for a 15-minute period of time.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607307 = query.getOrDefault("Action")
  valid_607307 = validateParameter(valid_607307, JString, required = true,
                                 default = newJString("GetSendStatistics"))
  if valid_607307 != nil:
    section.add "Action", valid_607307
  var valid_607308 = query.getOrDefault("Version")
  valid_607308 = validateParameter(valid_607308, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607308 != nil:
    section.add "Version", valid_607308
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607309 = header.getOrDefault("X-Amz-Signature")
  valid_607309 = validateParameter(valid_607309, JString, required = false,
                                 default = nil)
  if valid_607309 != nil:
    section.add "X-Amz-Signature", valid_607309
  var valid_607310 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607310 = validateParameter(valid_607310, JString, required = false,
                                 default = nil)
  if valid_607310 != nil:
    section.add "X-Amz-Content-Sha256", valid_607310
  var valid_607311 = header.getOrDefault("X-Amz-Date")
  valid_607311 = validateParameter(valid_607311, JString, required = false,
                                 default = nil)
  if valid_607311 != nil:
    section.add "X-Amz-Date", valid_607311
  var valid_607312 = header.getOrDefault("X-Amz-Credential")
  valid_607312 = validateParameter(valid_607312, JString, required = false,
                                 default = nil)
  if valid_607312 != nil:
    section.add "X-Amz-Credential", valid_607312
  var valid_607313 = header.getOrDefault("X-Amz-Security-Token")
  valid_607313 = validateParameter(valid_607313, JString, required = false,
                                 default = nil)
  if valid_607313 != nil:
    section.add "X-Amz-Security-Token", valid_607313
  var valid_607314 = header.getOrDefault("X-Amz-Algorithm")
  valid_607314 = validateParameter(valid_607314, JString, required = false,
                                 default = nil)
  if valid_607314 != nil:
    section.add "X-Amz-Algorithm", valid_607314
  var valid_607315 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607315 = validateParameter(valid_607315, JString, required = false,
                                 default = nil)
  if valid_607315 != nil:
    section.add "X-Amz-SignedHeaders", valid_607315
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607316: Call_PostGetSendStatistics_607304; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Provides sending statistics for the current AWS Region. The result is a list of data points, representing the last two weeks of sending activity. Each data point in the list contains statistics for a 15-minute period of time.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_607316.validator(path, query, header, formData, body)
  let scheme = call_607316.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607316.url(scheme.get, call_607316.host, call_607316.base,
                         call_607316.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607316, url, valid)

proc call*(call_607317: Call_PostGetSendStatistics_607304;
          Action: string = "GetSendStatistics"; Version: string = "2010-12-01"): Recallable =
  ## postGetSendStatistics
  ## <p>Provides sending statistics for the current AWS Region. The result is a list of data points, representing the last two weeks of sending activity. Each data point in the list contains statistics for a 15-minute period of time.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607318 = newJObject()
  add(query_607318, "Action", newJString(Action))
  add(query_607318, "Version", newJString(Version))
  result = call_607317.call(nil, query_607318, nil, nil, nil)

var postGetSendStatistics* = Call_PostGetSendStatistics_607304(
    name: "postGetSendStatistics", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=GetSendStatistics",
    validator: validate_PostGetSendStatistics_607305, base: "/",
    url: url_PostGetSendStatistics_607306, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetSendStatistics_607289 = ref object of OpenApiRestCall_605589
proc url_GetGetSendStatistics_607291(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetSendStatistics_607290(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Provides sending statistics for the current AWS Region. The result is a list of data points, representing the last two weeks of sending activity. Each data point in the list contains statistics for a 15-minute period of time.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607292 = query.getOrDefault("Action")
  valid_607292 = validateParameter(valid_607292, JString, required = true,
                                 default = newJString("GetSendStatistics"))
  if valid_607292 != nil:
    section.add "Action", valid_607292
  var valid_607293 = query.getOrDefault("Version")
  valid_607293 = validateParameter(valid_607293, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607293 != nil:
    section.add "Version", valid_607293
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607294 = header.getOrDefault("X-Amz-Signature")
  valid_607294 = validateParameter(valid_607294, JString, required = false,
                                 default = nil)
  if valid_607294 != nil:
    section.add "X-Amz-Signature", valid_607294
  var valid_607295 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607295 = validateParameter(valid_607295, JString, required = false,
                                 default = nil)
  if valid_607295 != nil:
    section.add "X-Amz-Content-Sha256", valid_607295
  var valid_607296 = header.getOrDefault("X-Amz-Date")
  valid_607296 = validateParameter(valid_607296, JString, required = false,
                                 default = nil)
  if valid_607296 != nil:
    section.add "X-Amz-Date", valid_607296
  var valid_607297 = header.getOrDefault("X-Amz-Credential")
  valid_607297 = validateParameter(valid_607297, JString, required = false,
                                 default = nil)
  if valid_607297 != nil:
    section.add "X-Amz-Credential", valid_607297
  var valid_607298 = header.getOrDefault("X-Amz-Security-Token")
  valid_607298 = validateParameter(valid_607298, JString, required = false,
                                 default = nil)
  if valid_607298 != nil:
    section.add "X-Amz-Security-Token", valid_607298
  var valid_607299 = header.getOrDefault("X-Amz-Algorithm")
  valid_607299 = validateParameter(valid_607299, JString, required = false,
                                 default = nil)
  if valid_607299 != nil:
    section.add "X-Amz-Algorithm", valid_607299
  var valid_607300 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607300 = validateParameter(valid_607300, JString, required = false,
                                 default = nil)
  if valid_607300 != nil:
    section.add "X-Amz-SignedHeaders", valid_607300
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607301: Call_GetGetSendStatistics_607289; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Provides sending statistics for the current AWS Region. The result is a list of data points, representing the last two weeks of sending activity. Each data point in the list contains statistics for a 15-minute period of time.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_607301.validator(path, query, header, formData, body)
  let scheme = call_607301.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607301.url(scheme.get, call_607301.host, call_607301.base,
                         call_607301.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607301, url, valid)

proc call*(call_607302: Call_GetGetSendStatistics_607289;
          Action: string = "GetSendStatistics"; Version: string = "2010-12-01"): Recallable =
  ## getGetSendStatistics
  ## <p>Provides sending statistics for the current AWS Region. The result is a list of data points, representing the last two weeks of sending activity. Each data point in the list contains statistics for a 15-minute period of time.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607303 = newJObject()
  add(query_607303, "Action", newJString(Action))
  add(query_607303, "Version", newJString(Version))
  result = call_607302.call(nil, query_607303, nil, nil, nil)

var getGetSendStatistics* = Call_GetGetSendStatistics_607289(
    name: "getGetSendStatistics", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=GetSendStatistics",
    validator: validate_GetGetSendStatistics_607290, base: "/",
    url: url_GetGetSendStatistics_607291, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetTemplate_607335 = ref object of OpenApiRestCall_605589
proc url_PostGetTemplate_607337(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetTemplate_607336(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Displays the template object (which includes the Subject line, HTML part and text part) for the template you specify.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607338 = query.getOrDefault("Action")
  valid_607338 = validateParameter(valid_607338, JString, required = true,
                                 default = newJString("GetTemplate"))
  if valid_607338 != nil:
    section.add "Action", valid_607338
  var valid_607339 = query.getOrDefault("Version")
  valid_607339 = validateParameter(valid_607339, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607339 != nil:
    section.add "Version", valid_607339
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607340 = header.getOrDefault("X-Amz-Signature")
  valid_607340 = validateParameter(valid_607340, JString, required = false,
                                 default = nil)
  if valid_607340 != nil:
    section.add "X-Amz-Signature", valid_607340
  var valid_607341 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607341 = validateParameter(valid_607341, JString, required = false,
                                 default = nil)
  if valid_607341 != nil:
    section.add "X-Amz-Content-Sha256", valid_607341
  var valid_607342 = header.getOrDefault("X-Amz-Date")
  valid_607342 = validateParameter(valid_607342, JString, required = false,
                                 default = nil)
  if valid_607342 != nil:
    section.add "X-Amz-Date", valid_607342
  var valid_607343 = header.getOrDefault("X-Amz-Credential")
  valid_607343 = validateParameter(valid_607343, JString, required = false,
                                 default = nil)
  if valid_607343 != nil:
    section.add "X-Amz-Credential", valid_607343
  var valid_607344 = header.getOrDefault("X-Amz-Security-Token")
  valid_607344 = validateParameter(valid_607344, JString, required = false,
                                 default = nil)
  if valid_607344 != nil:
    section.add "X-Amz-Security-Token", valid_607344
  var valid_607345 = header.getOrDefault("X-Amz-Algorithm")
  valid_607345 = validateParameter(valid_607345, JString, required = false,
                                 default = nil)
  if valid_607345 != nil:
    section.add "X-Amz-Algorithm", valid_607345
  var valid_607346 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607346 = validateParameter(valid_607346, JString, required = false,
                                 default = nil)
  if valid_607346 != nil:
    section.add "X-Amz-SignedHeaders", valid_607346
  result.add "header", section
  ## parameters in `formData` object:
  ##   TemplateName: JString (required)
  ##               : The name of the template you want to retrieve.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TemplateName` field"
  var valid_607347 = formData.getOrDefault("TemplateName")
  valid_607347 = validateParameter(valid_607347, JString, required = true,
                                 default = nil)
  if valid_607347 != nil:
    section.add "TemplateName", valid_607347
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607348: Call_PostGetTemplate_607335; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Displays the template object (which includes the Subject line, HTML part and text part) for the template you specify.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_607348.validator(path, query, header, formData, body)
  let scheme = call_607348.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607348.url(scheme.get, call_607348.host, call_607348.base,
                         call_607348.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607348, url, valid)

proc call*(call_607349: Call_PostGetTemplate_607335; TemplateName: string;
          Action: string = "GetTemplate"; Version: string = "2010-12-01"): Recallable =
  ## postGetTemplate
  ## <p>Displays the template object (which includes the Subject line, HTML part and text part) for the template you specify.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateName: string (required)
  ##               : The name of the template you want to retrieve.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607350 = newJObject()
  var formData_607351 = newJObject()
  add(formData_607351, "TemplateName", newJString(TemplateName))
  add(query_607350, "Action", newJString(Action))
  add(query_607350, "Version", newJString(Version))
  result = call_607349.call(nil, query_607350, nil, formData_607351, nil)

var postGetTemplate* = Call_PostGetTemplate_607335(name: "postGetTemplate",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=GetTemplate", validator: validate_PostGetTemplate_607336,
    base: "/", url: url_PostGetTemplate_607337, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetTemplate_607319 = ref object of OpenApiRestCall_605589
proc url_GetGetTemplate_607321(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetTemplate_607320(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Displays the template object (which includes the Subject line, HTML part and text part) for the template you specify.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the template you want to retrieve.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607322 = query.getOrDefault("Action")
  valid_607322 = validateParameter(valid_607322, JString, required = true,
                                 default = newJString("GetTemplate"))
  if valid_607322 != nil:
    section.add "Action", valid_607322
  var valid_607323 = query.getOrDefault("Version")
  valid_607323 = validateParameter(valid_607323, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607323 != nil:
    section.add "Version", valid_607323
  var valid_607324 = query.getOrDefault("TemplateName")
  valid_607324 = validateParameter(valid_607324, JString, required = true,
                                 default = nil)
  if valid_607324 != nil:
    section.add "TemplateName", valid_607324
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607325 = header.getOrDefault("X-Amz-Signature")
  valid_607325 = validateParameter(valid_607325, JString, required = false,
                                 default = nil)
  if valid_607325 != nil:
    section.add "X-Amz-Signature", valid_607325
  var valid_607326 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607326 = validateParameter(valid_607326, JString, required = false,
                                 default = nil)
  if valid_607326 != nil:
    section.add "X-Amz-Content-Sha256", valid_607326
  var valid_607327 = header.getOrDefault("X-Amz-Date")
  valid_607327 = validateParameter(valid_607327, JString, required = false,
                                 default = nil)
  if valid_607327 != nil:
    section.add "X-Amz-Date", valid_607327
  var valid_607328 = header.getOrDefault("X-Amz-Credential")
  valid_607328 = validateParameter(valid_607328, JString, required = false,
                                 default = nil)
  if valid_607328 != nil:
    section.add "X-Amz-Credential", valid_607328
  var valid_607329 = header.getOrDefault("X-Amz-Security-Token")
  valid_607329 = validateParameter(valid_607329, JString, required = false,
                                 default = nil)
  if valid_607329 != nil:
    section.add "X-Amz-Security-Token", valid_607329
  var valid_607330 = header.getOrDefault("X-Amz-Algorithm")
  valid_607330 = validateParameter(valid_607330, JString, required = false,
                                 default = nil)
  if valid_607330 != nil:
    section.add "X-Amz-Algorithm", valid_607330
  var valid_607331 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607331 = validateParameter(valid_607331, JString, required = false,
                                 default = nil)
  if valid_607331 != nil:
    section.add "X-Amz-SignedHeaders", valid_607331
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607332: Call_GetGetTemplate_607319; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Displays the template object (which includes the Subject line, HTML part and text part) for the template you specify.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_607332.validator(path, query, header, formData, body)
  let scheme = call_607332.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607332.url(scheme.get, call_607332.host, call_607332.base,
                         call_607332.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607332, url, valid)

proc call*(call_607333: Call_GetGetTemplate_607319; TemplateName: string;
          Action: string = "GetTemplate"; Version: string = "2010-12-01"): Recallable =
  ## getGetTemplate
  ## <p>Displays the template object (which includes the Subject line, HTML part and text part) for the template you specify.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the template you want to retrieve.
  var query_607334 = newJObject()
  add(query_607334, "Action", newJString(Action))
  add(query_607334, "Version", newJString(Version))
  add(query_607334, "TemplateName", newJString(TemplateName))
  result = call_607333.call(nil, query_607334, nil, nil, nil)

var getGetTemplate* = Call_GetGetTemplate_607319(name: "getGetTemplate",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=GetTemplate", validator: validate_GetGetTemplate_607320,
    base: "/", url: url_GetGetTemplate_607321, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListConfigurationSets_607369 = ref object of OpenApiRestCall_605589
proc url_PostListConfigurationSets_607371(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListConfigurationSets_607370(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Provides a list of the configuration sets associated with your Amazon SES account in the current AWS Region. For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second. This operation will return up to 1,000 configuration sets each time it is run. If your Amazon SES account has more than 1,000 configuration sets, this operation will also return a NextToken element. You can then execute the <code>ListConfigurationSets</code> operation again, passing the <code>NextToken</code> parameter and the value of the NextToken element to retrieve additional results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607372 = query.getOrDefault("Action")
  valid_607372 = validateParameter(valid_607372, JString, required = true,
                                 default = newJString("ListConfigurationSets"))
  if valid_607372 != nil:
    section.add "Action", valid_607372
  var valid_607373 = query.getOrDefault("Version")
  valid_607373 = validateParameter(valid_607373, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607373 != nil:
    section.add "Version", valid_607373
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607374 = header.getOrDefault("X-Amz-Signature")
  valid_607374 = validateParameter(valid_607374, JString, required = false,
                                 default = nil)
  if valid_607374 != nil:
    section.add "X-Amz-Signature", valid_607374
  var valid_607375 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607375 = validateParameter(valid_607375, JString, required = false,
                                 default = nil)
  if valid_607375 != nil:
    section.add "X-Amz-Content-Sha256", valid_607375
  var valid_607376 = header.getOrDefault("X-Amz-Date")
  valid_607376 = validateParameter(valid_607376, JString, required = false,
                                 default = nil)
  if valid_607376 != nil:
    section.add "X-Amz-Date", valid_607376
  var valid_607377 = header.getOrDefault("X-Amz-Credential")
  valid_607377 = validateParameter(valid_607377, JString, required = false,
                                 default = nil)
  if valid_607377 != nil:
    section.add "X-Amz-Credential", valid_607377
  var valid_607378 = header.getOrDefault("X-Amz-Security-Token")
  valid_607378 = validateParameter(valid_607378, JString, required = false,
                                 default = nil)
  if valid_607378 != nil:
    section.add "X-Amz-Security-Token", valid_607378
  var valid_607379 = header.getOrDefault("X-Amz-Algorithm")
  valid_607379 = validateParameter(valid_607379, JString, required = false,
                                 default = nil)
  if valid_607379 != nil:
    section.add "X-Amz-Algorithm", valid_607379
  var valid_607380 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607380 = validateParameter(valid_607380, JString, required = false,
                                 default = nil)
  if valid_607380 != nil:
    section.add "X-Amz-SignedHeaders", valid_607380
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : A token returned from a previous call to <code>ListConfigurationSets</code> to indicate the position of the configuration set in the configuration set list.
  ##   MaxItems: JInt
  ##           : The number of configuration sets to return.
  section = newJObject()
  var valid_607381 = formData.getOrDefault("NextToken")
  valid_607381 = validateParameter(valid_607381, JString, required = false,
                                 default = nil)
  if valid_607381 != nil:
    section.add "NextToken", valid_607381
  var valid_607382 = formData.getOrDefault("MaxItems")
  valid_607382 = validateParameter(valid_607382, JInt, required = false, default = nil)
  if valid_607382 != nil:
    section.add "MaxItems", valid_607382
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607383: Call_PostListConfigurationSets_607369; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Provides a list of the configuration sets associated with your Amazon SES account in the current AWS Region. For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second. This operation will return up to 1,000 configuration sets each time it is run. If your Amazon SES account has more than 1,000 configuration sets, this operation will also return a NextToken element. You can then execute the <code>ListConfigurationSets</code> operation again, passing the <code>NextToken</code> parameter and the value of the NextToken element to retrieve additional results.</p>
  ## 
  let valid = call_607383.validator(path, query, header, formData, body)
  let scheme = call_607383.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607383.url(scheme.get, call_607383.host, call_607383.base,
                         call_607383.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607383, url, valid)

proc call*(call_607384: Call_PostListConfigurationSets_607369;
          NextToken: string = ""; Action: string = "ListConfigurationSets";
          MaxItems: int = 0; Version: string = "2010-12-01"): Recallable =
  ## postListConfigurationSets
  ## <p>Provides a list of the configuration sets associated with your Amazon SES account in the current AWS Region. For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second. This operation will return up to 1,000 configuration sets each time it is run. If your Amazon SES account has more than 1,000 configuration sets, this operation will also return a NextToken element. You can then execute the <code>ListConfigurationSets</code> operation again, passing the <code>NextToken</code> parameter and the value of the NextToken element to retrieve additional results.</p>
  ##   NextToken: string
  ##            : A token returned from a previous call to <code>ListConfigurationSets</code> to indicate the position of the configuration set in the configuration set list.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : The number of configuration sets to return.
  ##   Version: string (required)
  var query_607385 = newJObject()
  var formData_607386 = newJObject()
  add(formData_607386, "NextToken", newJString(NextToken))
  add(query_607385, "Action", newJString(Action))
  add(formData_607386, "MaxItems", newJInt(MaxItems))
  add(query_607385, "Version", newJString(Version))
  result = call_607384.call(nil, query_607385, nil, formData_607386, nil)

var postListConfigurationSets* = Call_PostListConfigurationSets_607369(
    name: "postListConfigurationSets", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ListConfigurationSets",
    validator: validate_PostListConfigurationSets_607370, base: "/",
    url: url_PostListConfigurationSets_607371,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListConfigurationSets_607352 = ref object of OpenApiRestCall_605589
proc url_GetListConfigurationSets_607354(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListConfigurationSets_607353(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Provides a list of the configuration sets associated with your Amazon SES account in the current AWS Region. For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second. This operation will return up to 1,000 configuration sets each time it is run. If your Amazon SES account has more than 1,000 configuration sets, this operation will also return a NextToken element. You can then execute the <code>ListConfigurationSets</code> operation again, passing the <code>NextToken</code> parameter and the value of the NextToken element to retrieve additional results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxItems: JInt
  ##           : The number of configuration sets to return.
  ##   NextToken: JString
  ##            : A token returned from a previous call to <code>ListConfigurationSets</code> to indicate the position of the configuration set in the configuration set list.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607355 = query.getOrDefault("MaxItems")
  valid_607355 = validateParameter(valid_607355, JInt, required = false, default = nil)
  if valid_607355 != nil:
    section.add "MaxItems", valid_607355
  var valid_607356 = query.getOrDefault("NextToken")
  valid_607356 = validateParameter(valid_607356, JString, required = false,
                                 default = nil)
  if valid_607356 != nil:
    section.add "NextToken", valid_607356
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607357 = query.getOrDefault("Action")
  valid_607357 = validateParameter(valid_607357, JString, required = true,
                                 default = newJString("ListConfigurationSets"))
  if valid_607357 != nil:
    section.add "Action", valid_607357
  var valid_607358 = query.getOrDefault("Version")
  valid_607358 = validateParameter(valid_607358, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607358 != nil:
    section.add "Version", valid_607358
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607359 = header.getOrDefault("X-Amz-Signature")
  valid_607359 = validateParameter(valid_607359, JString, required = false,
                                 default = nil)
  if valid_607359 != nil:
    section.add "X-Amz-Signature", valid_607359
  var valid_607360 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607360 = validateParameter(valid_607360, JString, required = false,
                                 default = nil)
  if valid_607360 != nil:
    section.add "X-Amz-Content-Sha256", valid_607360
  var valid_607361 = header.getOrDefault("X-Amz-Date")
  valid_607361 = validateParameter(valid_607361, JString, required = false,
                                 default = nil)
  if valid_607361 != nil:
    section.add "X-Amz-Date", valid_607361
  var valid_607362 = header.getOrDefault("X-Amz-Credential")
  valid_607362 = validateParameter(valid_607362, JString, required = false,
                                 default = nil)
  if valid_607362 != nil:
    section.add "X-Amz-Credential", valid_607362
  var valid_607363 = header.getOrDefault("X-Amz-Security-Token")
  valid_607363 = validateParameter(valid_607363, JString, required = false,
                                 default = nil)
  if valid_607363 != nil:
    section.add "X-Amz-Security-Token", valid_607363
  var valid_607364 = header.getOrDefault("X-Amz-Algorithm")
  valid_607364 = validateParameter(valid_607364, JString, required = false,
                                 default = nil)
  if valid_607364 != nil:
    section.add "X-Amz-Algorithm", valid_607364
  var valid_607365 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607365 = validateParameter(valid_607365, JString, required = false,
                                 default = nil)
  if valid_607365 != nil:
    section.add "X-Amz-SignedHeaders", valid_607365
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607366: Call_GetListConfigurationSets_607352; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Provides a list of the configuration sets associated with your Amazon SES account in the current AWS Region. For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second. This operation will return up to 1,000 configuration sets each time it is run. If your Amazon SES account has more than 1,000 configuration sets, this operation will also return a NextToken element. You can then execute the <code>ListConfigurationSets</code> operation again, passing the <code>NextToken</code> parameter and the value of the NextToken element to retrieve additional results.</p>
  ## 
  let valid = call_607366.validator(path, query, header, formData, body)
  let scheme = call_607366.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607366.url(scheme.get, call_607366.host, call_607366.base,
                         call_607366.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607366, url, valid)

proc call*(call_607367: Call_GetListConfigurationSets_607352; MaxItems: int = 0;
          NextToken: string = ""; Action: string = "ListConfigurationSets";
          Version: string = "2010-12-01"): Recallable =
  ## getListConfigurationSets
  ## <p>Provides a list of the configuration sets associated with your Amazon SES account in the current AWS Region. For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second. This operation will return up to 1,000 configuration sets each time it is run. If your Amazon SES account has more than 1,000 configuration sets, this operation will also return a NextToken element. You can then execute the <code>ListConfigurationSets</code> operation again, passing the <code>NextToken</code> parameter and the value of the NextToken element to retrieve additional results.</p>
  ##   MaxItems: int
  ##           : The number of configuration sets to return.
  ##   NextToken: string
  ##            : A token returned from a previous call to <code>ListConfigurationSets</code> to indicate the position of the configuration set in the configuration set list.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607368 = newJObject()
  add(query_607368, "MaxItems", newJInt(MaxItems))
  add(query_607368, "NextToken", newJString(NextToken))
  add(query_607368, "Action", newJString(Action))
  add(query_607368, "Version", newJString(Version))
  result = call_607367.call(nil, query_607368, nil, nil, nil)

var getListConfigurationSets* = Call_GetListConfigurationSets_607352(
    name: "getListConfigurationSets", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=ListConfigurationSets",
    validator: validate_GetListConfigurationSets_607353, base: "/",
    url: url_GetListConfigurationSets_607354, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListCustomVerificationEmailTemplates_607404 = ref object of OpenApiRestCall_605589
proc url_PostListCustomVerificationEmailTemplates_607406(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListCustomVerificationEmailTemplates_607405(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the existing custom verification email templates for your account in the current AWS Region.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607407 = query.getOrDefault("Action")
  valid_607407 = validateParameter(valid_607407, JString, required = true, default = newJString(
      "ListCustomVerificationEmailTemplates"))
  if valid_607407 != nil:
    section.add "Action", valid_607407
  var valid_607408 = query.getOrDefault("Version")
  valid_607408 = validateParameter(valid_607408, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607408 != nil:
    section.add "Version", valid_607408
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607409 = header.getOrDefault("X-Amz-Signature")
  valid_607409 = validateParameter(valid_607409, JString, required = false,
                                 default = nil)
  if valid_607409 != nil:
    section.add "X-Amz-Signature", valid_607409
  var valid_607410 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607410 = validateParameter(valid_607410, JString, required = false,
                                 default = nil)
  if valid_607410 != nil:
    section.add "X-Amz-Content-Sha256", valid_607410
  var valid_607411 = header.getOrDefault("X-Amz-Date")
  valid_607411 = validateParameter(valid_607411, JString, required = false,
                                 default = nil)
  if valid_607411 != nil:
    section.add "X-Amz-Date", valid_607411
  var valid_607412 = header.getOrDefault("X-Amz-Credential")
  valid_607412 = validateParameter(valid_607412, JString, required = false,
                                 default = nil)
  if valid_607412 != nil:
    section.add "X-Amz-Credential", valid_607412
  var valid_607413 = header.getOrDefault("X-Amz-Security-Token")
  valid_607413 = validateParameter(valid_607413, JString, required = false,
                                 default = nil)
  if valid_607413 != nil:
    section.add "X-Amz-Security-Token", valid_607413
  var valid_607414 = header.getOrDefault("X-Amz-Algorithm")
  valid_607414 = validateParameter(valid_607414, JString, required = false,
                                 default = nil)
  if valid_607414 != nil:
    section.add "X-Amz-Algorithm", valid_607414
  var valid_607415 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607415 = validateParameter(valid_607415, JString, required = false,
                                 default = nil)
  if valid_607415 != nil:
    section.add "X-Amz-SignedHeaders", valid_607415
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : An array the contains the name and creation time stamp for each template in your Amazon SES account.
  ##   MaxResults: JInt
  ##             : The maximum number of custom verification email templates to return. This value must be at least 1 and less than or equal to 50. If you do not specify a value, or if you specify a value less than 1 or greater than 50, the operation will return up to 50 results.
  section = newJObject()
  var valid_607416 = formData.getOrDefault("NextToken")
  valid_607416 = validateParameter(valid_607416, JString, required = false,
                                 default = nil)
  if valid_607416 != nil:
    section.add "NextToken", valid_607416
  var valid_607417 = formData.getOrDefault("MaxResults")
  valid_607417 = validateParameter(valid_607417, JInt, required = false, default = nil)
  if valid_607417 != nil:
    section.add "MaxResults", valid_607417
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607418: Call_PostListCustomVerificationEmailTemplates_607404;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Lists the existing custom verification email templates for your account in the current AWS Region.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_607418.validator(path, query, header, formData, body)
  let scheme = call_607418.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607418.url(scheme.get, call_607418.host, call_607418.base,
                         call_607418.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607418, url, valid)

proc call*(call_607419: Call_PostListCustomVerificationEmailTemplates_607404;
          NextToken: string = "";
          Action: string = "ListCustomVerificationEmailTemplates";
          Version: string = "2010-12-01"; MaxResults: int = 0): Recallable =
  ## postListCustomVerificationEmailTemplates
  ## <p>Lists the existing custom verification email templates for your account in the current AWS Region.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : An array the contains the name and creation time stamp for each template in your Amazon SES account.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxResults: int
  ##             : The maximum number of custom verification email templates to return. This value must be at least 1 and less than or equal to 50. If you do not specify a value, or if you specify a value less than 1 or greater than 50, the operation will return up to 50 results.
  var query_607420 = newJObject()
  var formData_607421 = newJObject()
  add(formData_607421, "NextToken", newJString(NextToken))
  add(query_607420, "Action", newJString(Action))
  add(query_607420, "Version", newJString(Version))
  add(formData_607421, "MaxResults", newJInt(MaxResults))
  result = call_607419.call(nil, query_607420, nil, formData_607421, nil)

var postListCustomVerificationEmailTemplates* = Call_PostListCustomVerificationEmailTemplates_607404(
    name: "postListCustomVerificationEmailTemplates", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=ListCustomVerificationEmailTemplates",
    validator: validate_PostListCustomVerificationEmailTemplates_607405,
    base: "/", url: url_PostListCustomVerificationEmailTemplates_607406,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListCustomVerificationEmailTemplates_607387 = ref object of OpenApiRestCall_605589
proc url_GetListCustomVerificationEmailTemplates_607389(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListCustomVerificationEmailTemplates_607388(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the existing custom verification email templates for your account in the current AWS Region.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxResults: JInt
  ##             : The maximum number of custom verification email templates to return. This value must be at least 1 and less than or equal to 50. If you do not specify a value, or if you specify a value less than 1 or greater than 50, the operation will return up to 50 results.
  ##   NextToken: JString
  ##            : An array the contains the name and creation time stamp for each template in your Amazon SES account.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607390 = query.getOrDefault("MaxResults")
  valid_607390 = validateParameter(valid_607390, JInt, required = false, default = nil)
  if valid_607390 != nil:
    section.add "MaxResults", valid_607390
  var valid_607391 = query.getOrDefault("NextToken")
  valid_607391 = validateParameter(valid_607391, JString, required = false,
                                 default = nil)
  if valid_607391 != nil:
    section.add "NextToken", valid_607391
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607392 = query.getOrDefault("Action")
  valid_607392 = validateParameter(valid_607392, JString, required = true, default = newJString(
      "ListCustomVerificationEmailTemplates"))
  if valid_607392 != nil:
    section.add "Action", valid_607392
  var valid_607393 = query.getOrDefault("Version")
  valid_607393 = validateParameter(valid_607393, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607393 != nil:
    section.add "Version", valid_607393
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607394 = header.getOrDefault("X-Amz-Signature")
  valid_607394 = validateParameter(valid_607394, JString, required = false,
                                 default = nil)
  if valid_607394 != nil:
    section.add "X-Amz-Signature", valid_607394
  var valid_607395 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607395 = validateParameter(valid_607395, JString, required = false,
                                 default = nil)
  if valid_607395 != nil:
    section.add "X-Amz-Content-Sha256", valid_607395
  var valid_607396 = header.getOrDefault("X-Amz-Date")
  valid_607396 = validateParameter(valid_607396, JString, required = false,
                                 default = nil)
  if valid_607396 != nil:
    section.add "X-Amz-Date", valid_607396
  var valid_607397 = header.getOrDefault("X-Amz-Credential")
  valid_607397 = validateParameter(valid_607397, JString, required = false,
                                 default = nil)
  if valid_607397 != nil:
    section.add "X-Amz-Credential", valid_607397
  var valid_607398 = header.getOrDefault("X-Amz-Security-Token")
  valid_607398 = validateParameter(valid_607398, JString, required = false,
                                 default = nil)
  if valid_607398 != nil:
    section.add "X-Amz-Security-Token", valid_607398
  var valid_607399 = header.getOrDefault("X-Amz-Algorithm")
  valid_607399 = validateParameter(valid_607399, JString, required = false,
                                 default = nil)
  if valid_607399 != nil:
    section.add "X-Amz-Algorithm", valid_607399
  var valid_607400 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607400 = validateParameter(valid_607400, JString, required = false,
                                 default = nil)
  if valid_607400 != nil:
    section.add "X-Amz-SignedHeaders", valid_607400
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607401: Call_GetListCustomVerificationEmailTemplates_607387;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Lists the existing custom verification email templates for your account in the current AWS Region.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_607401.validator(path, query, header, formData, body)
  let scheme = call_607401.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607401.url(scheme.get, call_607401.host, call_607401.base,
                         call_607401.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607401, url, valid)

proc call*(call_607402: Call_GetListCustomVerificationEmailTemplates_607387;
          MaxResults: int = 0; NextToken: string = "";
          Action: string = "ListCustomVerificationEmailTemplates";
          Version: string = "2010-12-01"): Recallable =
  ## getListCustomVerificationEmailTemplates
  ## <p>Lists the existing custom verification email templates for your account in the current AWS Region.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   MaxResults: int
  ##             : The maximum number of custom verification email templates to return. This value must be at least 1 and less than or equal to 50. If you do not specify a value, or if you specify a value less than 1 or greater than 50, the operation will return up to 50 results.
  ##   NextToken: string
  ##            : An array the contains the name and creation time stamp for each template in your Amazon SES account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607403 = newJObject()
  add(query_607403, "MaxResults", newJInt(MaxResults))
  add(query_607403, "NextToken", newJString(NextToken))
  add(query_607403, "Action", newJString(Action))
  add(query_607403, "Version", newJString(Version))
  result = call_607402.call(nil, query_607403, nil, nil, nil)

var getListCustomVerificationEmailTemplates* = Call_GetListCustomVerificationEmailTemplates_607387(
    name: "getListCustomVerificationEmailTemplates", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=ListCustomVerificationEmailTemplates",
    validator: validate_GetListCustomVerificationEmailTemplates_607388, base: "/",
    url: url_GetListCustomVerificationEmailTemplates_607389,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListIdentities_607440 = ref object of OpenApiRestCall_605589
proc url_PostListIdentities_607442(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListIdentities_607441(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Returns a list containing all of the identities (email addresses and domains) for your AWS account in the current AWS Region, regardless of verification status.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607443 = query.getOrDefault("Action")
  valid_607443 = validateParameter(valid_607443, JString, required = true,
                                 default = newJString("ListIdentities"))
  if valid_607443 != nil:
    section.add "Action", valid_607443
  var valid_607444 = query.getOrDefault("Version")
  valid_607444 = validateParameter(valid_607444, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607444 != nil:
    section.add "Version", valid_607444
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607445 = header.getOrDefault("X-Amz-Signature")
  valid_607445 = validateParameter(valid_607445, JString, required = false,
                                 default = nil)
  if valid_607445 != nil:
    section.add "X-Amz-Signature", valid_607445
  var valid_607446 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607446 = validateParameter(valid_607446, JString, required = false,
                                 default = nil)
  if valid_607446 != nil:
    section.add "X-Amz-Content-Sha256", valid_607446
  var valid_607447 = header.getOrDefault("X-Amz-Date")
  valid_607447 = validateParameter(valid_607447, JString, required = false,
                                 default = nil)
  if valid_607447 != nil:
    section.add "X-Amz-Date", valid_607447
  var valid_607448 = header.getOrDefault("X-Amz-Credential")
  valid_607448 = validateParameter(valid_607448, JString, required = false,
                                 default = nil)
  if valid_607448 != nil:
    section.add "X-Amz-Credential", valid_607448
  var valid_607449 = header.getOrDefault("X-Amz-Security-Token")
  valid_607449 = validateParameter(valid_607449, JString, required = false,
                                 default = nil)
  if valid_607449 != nil:
    section.add "X-Amz-Security-Token", valid_607449
  var valid_607450 = header.getOrDefault("X-Amz-Algorithm")
  valid_607450 = validateParameter(valid_607450, JString, required = false,
                                 default = nil)
  if valid_607450 != nil:
    section.add "X-Amz-Algorithm", valid_607450
  var valid_607451 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607451 = validateParameter(valid_607451, JString, required = false,
                                 default = nil)
  if valid_607451 != nil:
    section.add "X-Amz-SignedHeaders", valid_607451
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : The token to use for pagination.
  ##   IdentityType: JString
  ##               : The type of the identities to list. Possible values are "EmailAddress" and "Domain". If this parameter is omitted, then all identities will be listed.
  ##   MaxItems: JInt
  ##           : The maximum number of identities per page. Possible values are 1-1000 inclusive.
  section = newJObject()
  var valid_607452 = formData.getOrDefault("NextToken")
  valid_607452 = validateParameter(valid_607452, JString, required = false,
                                 default = nil)
  if valid_607452 != nil:
    section.add "NextToken", valid_607452
  var valid_607453 = formData.getOrDefault("IdentityType")
  valid_607453 = validateParameter(valid_607453, JString, required = false,
                                 default = newJString("EmailAddress"))
  if valid_607453 != nil:
    section.add "IdentityType", valid_607453
  var valid_607454 = formData.getOrDefault("MaxItems")
  valid_607454 = validateParameter(valid_607454, JInt, required = false, default = nil)
  if valid_607454 != nil:
    section.add "MaxItems", valid_607454
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607455: Call_PostListIdentities_607440; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list containing all of the identities (email addresses and domains) for your AWS account in the current AWS Region, regardless of verification status.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_607455.validator(path, query, header, formData, body)
  let scheme = call_607455.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607455.url(scheme.get, call_607455.host, call_607455.base,
                         call_607455.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607455, url, valid)

proc call*(call_607456: Call_PostListIdentities_607440; NextToken: string = "";
          IdentityType: string = "EmailAddress"; Action: string = "ListIdentities";
          MaxItems: int = 0; Version: string = "2010-12-01"): Recallable =
  ## postListIdentities
  ## <p>Returns a list containing all of the identities (email addresses and domains) for your AWS account in the current AWS Region, regardless of verification status.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : The token to use for pagination.
  ##   IdentityType: string
  ##               : The type of the identities to list. Possible values are "EmailAddress" and "Domain". If this parameter is omitted, then all identities will be listed.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : The maximum number of identities per page. Possible values are 1-1000 inclusive.
  ##   Version: string (required)
  var query_607457 = newJObject()
  var formData_607458 = newJObject()
  add(formData_607458, "NextToken", newJString(NextToken))
  add(formData_607458, "IdentityType", newJString(IdentityType))
  add(query_607457, "Action", newJString(Action))
  add(formData_607458, "MaxItems", newJInt(MaxItems))
  add(query_607457, "Version", newJString(Version))
  result = call_607456.call(nil, query_607457, nil, formData_607458, nil)

var postListIdentities* = Call_PostListIdentities_607440(
    name: "postListIdentities", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ListIdentities",
    validator: validate_PostListIdentities_607441, base: "/",
    url: url_PostListIdentities_607442, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListIdentities_607422 = ref object of OpenApiRestCall_605589
proc url_GetListIdentities_607424(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListIdentities_607423(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Returns a list containing all of the identities (email addresses and domains) for your AWS account in the current AWS Region, regardless of verification status.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxItems: JInt
  ##           : The maximum number of identities per page. Possible values are 1-1000 inclusive.
  ##   NextToken: JString
  ##            : The token to use for pagination.
  ##   IdentityType: JString
  ##               : The type of the identities to list. Possible values are "EmailAddress" and "Domain". If this parameter is omitted, then all identities will be listed.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607425 = query.getOrDefault("MaxItems")
  valid_607425 = validateParameter(valid_607425, JInt, required = false, default = nil)
  if valid_607425 != nil:
    section.add "MaxItems", valid_607425
  var valid_607426 = query.getOrDefault("NextToken")
  valid_607426 = validateParameter(valid_607426, JString, required = false,
                                 default = nil)
  if valid_607426 != nil:
    section.add "NextToken", valid_607426
  var valid_607427 = query.getOrDefault("IdentityType")
  valid_607427 = validateParameter(valid_607427, JString, required = false,
                                 default = newJString("EmailAddress"))
  if valid_607427 != nil:
    section.add "IdentityType", valid_607427
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607428 = query.getOrDefault("Action")
  valid_607428 = validateParameter(valid_607428, JString, required = true,
                                 default = newJString("ListIdentities"))
  if valid_607428 != nil:
    section.add "Action", valid_607428
  var valid_607429 = query.getOrDefault("Version")
  valid_607429 = validateParameter(valid_607429, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607429 != nil:
    section.add "Version", valid_607429
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607430 = header.getOrDefault("X-Amz-Signature")
  valid_607430 = validateParameter(valid_607430, JString, required = false,
                                 default = nil)
  if valid_607430 != nil:
    section.add "X-Amz-Signature", valid_607430
  var valid_607431 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607431 = validateParameter(valid_607431, JString, required = false,
                                 default = nil)
  if valid_607431 != nil:
    section.add "X-Amz-Content-Sha256", valid_607431
  var valid_607432 = header.getOrDefault("X-Amz-Date")
  valid_607432 = validateParameter(valid_607432, JString, required = false,
                                 default = nil)
  if valid_607432 != nil:
    section.add "X-Amz-Date", valid_607432
  var valid_607433 = header.getOrDefault("X-Amz-Credential")
  valid_607433 = validateParameter(valid_607433, JString, required = false,
                                 default = nil)
  if valid_607433 != nil:
    section.add "X-Amz-Credential", valid_607433
  var valid_607434 = header.getOrDefault("X-Amz-Security-Token")
  valid_607434 = validateParameter(valid_607434, JString, required = false,
                                 default = nil)
  if valid_607434 != nil:
    section.add "X-Amz-Security-Token", valid_607434
  var valid_607435 = header.getOrDefault("X-Amz-Algorithm")
  valid_607435 = validateParameter(valid_607435, JString, required = false,
                                 default = nil)
  if valid_607435 != nil:
    section.add "X-Amz-Algorithm", valid_607435
  var valid_607436 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607436 = validateParameter(valid_607436, JString, required = false,
                                 default = nil)
  if valid_607436 != nil:
    section.add "X-Amz-SignedHeaders", valid_607436
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607437: Call_GetListIdentities_607422; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list containing all of the identities (email addresses and domains) for your AWS account in the current AWS Region, regardless of verification status.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_607437.validator(path, query, header, formData, body)
  let scheme = call_607437.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607437.url(scheme.get, call_607437.host, call_607437.base,
                         call_607437.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607437, url, valid)

proc call*(call_607438: Call_GetListIdentities_607422; MaxItems: int = 0;
          NextToken: string = ""; IdentityType: string = "EmailAddress";
          Action: string = "ListIdentities"; Version: string = "2010-12-01"): Recallable =
  ## getListIdentities
  ## <p>Returns a list containing all of the identities (email addresses and domains) for your AWS account in the current AWS Region, regardless of verification status.</p> <p>You can execute this operation no more than once per second.</p>
  ##   MaxItems: int
  ##           : The maximum number of identities per page. Possible values are 1-1000 inclusive.
  ##   NextToken: string
  ##            : The token to use for pagination.
  ##   IdentityType: string
  ##               : The type of the identities to list. Possible values are "EmailAddress" and "Domain". If this parameter is omitted, then all identities will be listed.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607439 = newJObject()
  add(query_607439, "MaxItems", newJInt(MaxItems))
  add(query_607439, "NextToken", newJString(NextToken))
  add(query_607439, "IdentityType", newJString(IdentityType))
  add(query_607439, "Action", newJString(Action))
  add(query_607439, "Version", newJString(Version))
  result = call_607438.call(nil, query_607439, nil, nil, nil)

var getListIdentities* = Call_GetListIdentities_607422(name: "getListIdentities",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=ListIdentities", validator: validate_GetListIdentities_607423,
    base: "/", url: url_GetListIdentities_607424,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListIdentityPolicies_607475 = ref object of OpenApiRestCall_605589
proc url_PostListIdentityPolicies_607477(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListIdentityPolicies_607476(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of sending authorization policies that are attached to the given identity (an email address or a domain). This API returns only a list. If you want the actual policy content, you can use <code>GetIdentityPolicies</code>.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607478 = query.getOrDefault("Action")
  valid_607478 = validateParameter(valid_607478, JString, required = true,
                                 default = newJString("ListIdentityPolicies"))
  if valid_607478 != nil:
    section.add "Action", valid_607478
  var valid_607479 = query.getOrDefault("Version")
  valid_607479 = validateParameter(valid_607479, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607479 != nil:
    section.add "Version", valid_607479
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607480 = header.getOrDefault("X-Amz-Signature")
  valid_607480 = validateParameter(valid_607480, JString, required = false,
                                 default = nil)
  if valid_607480 != nil:
    section.add "X-Amz-Signature", valid_607480
  var valid_607481 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607481 = validateParameter(valid_607481, JString, required = false,
                                 default = nil)
  if valid_607481 != nil:
    section.add "X-Amz-Content-Sha256", valid_607481
  var valid_607482 = header.getOrDefault("X-Amz-Date")
  valid_607482 = validateParameter(valid_607482, JString, required = false,
                                 default = nil)
  if valid_607482 != nil:
    section.add "X-Amz-Date", valid_607482
  var valid_607483 = header.getOrDefault("X-Amz-Credential")
  valid_607483 = validateParameter(valid_607483, JString, required = false,
                                 default = nil)
  if valid_607483 != nil:
    section.add "X-Amz-Credential", valid_607483
  var valid_607484 = header.getOrDefault("X-Amz-Security-Token")
  valid_607484 = validateParameter(valid_607484, JString, required = false,
                                 default = nil)
  if valid_607484 != nil:
    section.add "X-Amz-Security-Token", valid_607484
  var valid_607485 = header.getOrDefault("X-Amz-Algorithm")
  valid_607485 = validateParameter(valid_607485, JString, required = false,
                                 default = nil)
  if valid_607485 != nil:
    section.add "X-Amz-Algorithm", valid_607485
  var valid_607486 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607486 = validateParameter(valid_607486, JString, required = false,
                                 default = nil)
  if valid_607486 != nil:
    section.add "X-Amz-SignedHeaders", valid_607486
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identity: JString (required)
  ##           : <p>The identity that is associated with the policy for which the policies will be listed. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identity` field"
  var valid_607487 = formData.getOrDefault("Identity")
  valid_607487 = validateParameter(valid_607487, JString, required = true,
                                 default = nil)
  if valid_607487 != nil:
    section.add "Identity", valid_607487
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607488: Call_PostListIdentityPolicies_607475; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list of sending authorization policies that are attached to the given identity (an email address or a domain). This API returns only a list. If you want the actual policy content, you can use <code>GetIdentityPolicies</code>.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_607488.validator(path, query, header, formData, body)
  let scheme = call_607488.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607488.url(scheme.get, call_607488.host, call_607488.base,
                         call_607488.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607488, url, valid)

proc call*(call_607489: Call_PostListIdentityPolicies_607475; Identity: string;
          Action: string = "ListIdentityPolicies"; Version: string = "2010-12-01"): Recallable =
  ## postListIdentityPolicies
  ## <p>Returns a list of sending authorization policies that are attached to the given identity (an email address or a domain). This API returns only a list. If you want the actual policy content, you can use <code>GetIdentityPolicies</code>.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : <p>The identity that is associated with the policy for which the policies will be listed. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607490 = newJObject()
  var formData_607491 = newJObject()
  add(formData_607491, "Identity", newJString(Identity))
  add(query_607490, "Action", newJString(Action))
  add(query_607490, "Version", newJString(Version))
  result = call_607489.call(nil, query_607490, nil, formData_607491, nil)

var postListIdentityPolicies* = Call_PostListIdentityPolicies_607475(
    name: "postListIdentityPolicies", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ListIdentityPolicies",
    validator: validate_PostListIdentityPolicies_607476, base: "/",
    url: url_PostListIdentityPolicies_607477, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListIdentityPolicies_607459 = ref object of OpenApiRestCall_605589
proc url_GetListIdentityPolicies_607461(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListIdentityPolicies_607460(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of sending authorization policies that are attached to the given identity (an email address or a domain). This API returns only a list. If you want the actual policy content, you can use <code>GetIdentityPolicies</code>.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : <p>The identity that is associated with the policy for which the policies will be listed. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_607462 = query.getOrDefault("Identity")
  valid_607462 = validateParameter(valid_607462, JString, required = true,
                                 default = nil)
  if valid_607462 != nil:
    section.add "Identity", valid_607462
  var valid_607463 = query.getOrDefault("Action")
  valid_607463 = validateParameter(valid_607463, JString, required = true,
                                 default = newJString("ListIdentityPolicies"))
  if valid_607463 != nil:
    section.add "Action", valid_607463
  var valid_607464 = query.getOrDefault("Version")
  valid_607464 = validateParameter(valid_607464, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607464 != nil:
    section.add "Version", valid_607464
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607465 = header.getOrDefault("X-Amz-Signature")
  valid_607465 = validateParameter(valid_607465, JString, required = false,
                                 default = nil)
  if valid_607465 != nil:
    section.add "X-Amz-Signature", valid_607465
  var valid_607466 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607466 = validateParameter(valid_607466, JString, required = false,
                                 default = nil)
  if valid_607466 != nil:
    section.add "X-Amz-Content-Sha256", valid_607466
  var valid_607467 = header.getOrDefault("X-Amz-Date")
  valid_607467 = validateParameter(valid_607467, JString, required = false,
                                 default = nil)
  if valid_607467 != nil:
    section.add "X-Amz-Date", valid_607467
  var valid_607468 = header.getOrDefault("X-Amz-Credential")
  valid_607468 = validateParameter(valid_607468, JString, required = false,
                                 default = nil)
  if valid_607468 != nil:
    section.add "X-Amz-Credential", valid_607468
  var valid_607469 = header.getOrDefault("X-Amz-Security-Token")
  valid_607469 = validateParameter(valid_607469, JString, required = false,
                                 default = nil)
  if valid_607469 != nil:
    section.add "X-Amz-Security-Token", valid_607469
  var valid_607470 = header.getOrDefault("X-Amz-Algorithm")
  valid_607470 = validateParameter(valid_607470, JString, required = false,
                                 default = nil)
  if valid_607470 != nil:
    section.add "X-Amz-Algorithm", valid_607470
  var valid_607471 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607471 = validateParameter(valid_607471, JString, required = false,
                                 default = nil)
  if valid_607471 != nil:
    section.add "X-Amz-SignedHeaders", valid_607471
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607472: Call_GetListIdentityPolicies_607459; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list of sending authorization policies that are attached to the given identity (an email address or a domain). This API returns only a list. If you want the actual policy content, you can use <code>GetIdentityPolicies</code>.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_607472.validator(path, query, header, formData, body)
  let scheme = call_607472.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607472.url(scheme.get, call_607472.host, call_607472.base,
                         call_607472.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607472, url, valid)

proc call*(call_607473: Call_GetListIdentityPolicies_607459; Identity: string;
          Action: string = "ListIdentityPolicies"; Version: string = "2010-12-01"): Recallable =
  ## getListIdentityPolicies
  ## <p>Returns a list of sending authorization policies that are attached to the given identity (an email address or a domain). This API returns only a list. If you want the actual policy content, you can use <code>GetIdentityPolicies</code>.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : <p>The identity that is associated with the policy for which the policies will be listed. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607474 = newJObject()
  add(query_607474, "Identity", newJString(Identity))
  add(query_607474, "Action", newJString(Action))
  add(query_607474, "Version", newJString(Version))
  result = call_607473.call(nil, query_607474, nil, nil, nil)

var getListIdentityPolicies* = Call_GetListIdentityPolicies_607459(
    name: "getListIdentityPolicies", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=ListIdentityPolicies",
    validator: validate_GetListIdentityPolicies_607460, base: "/",
    url: url_GetListIdentityPolicies_607461, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListReceiptFilters_607507 = ref object of OpenApiRestCall_605589
proc url_PostListReceiptFilters_607509(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListReceiptFilters_607508(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IP address filters associated with your AWS account in the current AWS Region.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607510 = query.getOrDefault("Action")
  valid_607510 = validateParameter(valid_607510, JString, required = true,
                                 default = newJString("ListReceiptFilters"))
  if valid_607510 != nil:
    section.add "Action", valid_607510
  var valid_607511 = query.getOrDefault("Version")
  valid_607511 = validateParameter(valid_607511, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607511 != nil:
    section.add "Version", valid_607511
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607512 = header.getOrDefault("X-Amz-Signature")
  valid_607512 = validateParameter(valid_607512, JString, required = false,
                                 default = nil)
  if valid_607512 != nil:
    section.add "X-Amz-Signature", valid_607512
  var valid_607513 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607513 = validateParameter(valid_607513, JString, required = false,
                                 default = nil)
  if valid_607513 != nil:
    section.add "X-Amz-Content-Sha256", valid_607513
  var valid_607514 = header.getOrDefault("X-Amz-Date")
  valid_607514 = validateParameter(valid_607514, JString, required = false,
                                 default = nil)
  if valid_607514 != nil:
    section.add "X-Amz-Date", valid_607514
  var valid_607515 = header.getOrDefault("X-Amz-Credential")
  valid_607515 = validateParameter(valid_607515, JString, required = false,
                                 default = nil)
  if valid_607515 != nil:
    section.add "X-Amz-Credential", valid_607515
  var valid_607516 = header.getOrDefault("X-Amz-Security-Token")
  valid_607516 = validateParameter(valid_607516, JString, required = false,
                                 default = nil)
  if valid_607516 != nil:
    section.add "X-Amz-Security-Token", valid_607516
  var valid_607517 = header.getOrDefault("X-Amz-Algorithm")
  valid_607517 = validateParameter(valid_607517, JString, required = false,
                                 default = nil)
  if valid_607517 != nil:
    section.add "X-Amz-Algorithm", valid_607517
  var valid_607518 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607518 = validateParameter(valid_607518, JString, required = false,
                                 default = nil)
  if valid_607518 != nil:
    section.add "X-Amz-SignedHeaders", valid_607518
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607519: Call_PostListReceiptFilters_607507; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IP address filters associated with your AWS account in the current AWS Region.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_607519.validator(path, query, header, formData, body)
  let scheme = call_607519.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607519.url(scheme.get, call_607519.host, call_607519.base,
                         call_607519.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607519, url, valid)

proc call*(call_607520: Call_PostListReceiptFilters_607507;
          Action: string = "ListReceiptFilters"; Version: string = "2010-12-01"): Recallable =
  ## postListReceiptFilters
  ## <p>Lists the IP address filters associated with your AWS account in the current AWS Region.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607521 = newJObject()
  add(query_607521, "Action", newJString(Action))
  add(query_607521, "Version", newJString(Version))
  result = call_607520.call(nil, query_607521, nil, nil, nil)

var postListReceiptFilters* = Call_PostListReceiptFilters_607507(
    name: "postListReceiptFilters", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ListReceiptFilters",
    validator: validate_PostListReceiptFilters_607508, base: "/",
    url: url_PostListReceiptFilters_607509, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListReceiptFilters_607492 = ref object of OpenApiRestCall_605589
proc url_GetListReceiptFilters_607494(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListReceiptFilters_607493(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IP address filters associated with your AWS account in the current AWS Region.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607495 = query.getOrDefault("Action")
  valid_607495 = validateParameter(valid_607495, JString, required = true,
                                 default = newJString("ListReceiptFilters"))
  if valid_607495 != nil:
    section.add "Action", valid_607495
  var valid_607496 = query.getOrDefault("Version")
  valid_607496 = validateParameter(valid_607496, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607496 != nil:
    section.add "Version", valid_607496
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607497 = header.getOrDefault("X-Amz-Signature")
  valid_607497 = validateParameter(valid_607497, JString, required = false,
                                 default = nil)
  if valid_607497 != nil:
    section.add "X-Amz-Signature", valid_607497
  var valid_607498 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607498 = validateParameter(valid_607498, JString, required = false,
                                 default = nil)
  if valid_607498 != nil:
    section.add "X-Amz-Content-Sha256", valid_607498
  var valid_607499 = header.getOrDefault("X-Amz-Date")
  valid_607499 = validateParameter(valid_607499, JString, required = false,
                                 default = nil)
  if valid_607499 != nil:
    section.add "X-Amz-Date", valid_607499
  var valid_607500 = header.getOrDefault("X-Amz-Credential")
  valid_607500 = validateParameter(valid_607500, JString, required = false,
                                 default = nil)
  if valid_607500 != nil:
    section.add "X-Amz-Credential", valid_607500
  var valid_607501 = header.getOrDefault("X-Amz-Security-Token")
  valid_607501 = validateParameter(valid_607501, JString, required = false,
                                 default = nil)
  if valid_607501 != nil:
    section.add "X-Amz-Security-Token", valid_607501
  var valid_607502 = header.getOrDefault("X-Amz-Algorithm")
  valid_607502 = validateParameter(valid_607502, JString, required = false,
                                 default = nil)
  if valid_607502 != nil:
    section.add "X-Amz-Algorithm", valid_607502
  var valid_607503 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607503 = validateParameter(valid_607503, JString, required = false,
                                 default = nil)
  if valid_607503 != nil:
    section.add "X-Amz-SignedHeaders", valid_607503
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607504: Call_GetListReceiptFilters_607492; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IP address filters associated with your AWS account in the current AWS Region.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_607504.validator(path, query, header, formData, body)
  let scheme = call_607504.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607504.url(scheme.get, call_607504.host, call_607504.base,
                         call_607504.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607504, url, valid)

proc call*(call_607505: Call_GetListReceiptFilters_607492;
          Action: string = "ListReceiptFilters"; Version: string = "2010-12-01"): Recallable =
  ## getListReceiptFilters
  ## <p>Lists the IP address filters associated with your AWS account in the current AWS Region.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607506 = newJObject()
  add(query_607506, "Action", newJString(Action))
  add(query_607506, "Version", newJString(Version))
  result = call_607505.call(nil, query_607506, nil, nil, nil)

var getListReceiptFilters* = Call_GetListReceiptFilters_607492(
    name: "getListReceiptFilters", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=ListReceiptFilters",
    validator: validate_GetListReceiptFilters_607493, base: "/",
    url: url_GetListReceiptFilters_607494, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListReceiptRuleSets_607538 = ref object of OpenApiRestCall_605589
proc url_PostListReceiptRuleSets_607540(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListReceiptRuleSets_607539(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the receipt rule sets that exist under your AWS account in the current AWS Region. If there are additional receipt rule sets to be retrieved, you will receive a <code>NextToken</code> that you can provide to the next call to <code>ListReceiptRuleSets</code> to retrieve the additional entries.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607541 = query.getOrDefault("Action")
  valid_607541 = validateParameter(valid_607541, JString, required = true,
                                 default = newJString("ListReceiptRuleSets"))
  if valid_607541 != nil:
    section.add "Action", valid_607541
  var valid_607542 = query.getOrDefault("Version")
  valid_607542 = validateParameter(valid_607542, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607542 != nil:
    section.add "Version", valid_607542
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607543 = header.getOrDefault("X-Amz-Signature")
  valid_607543 = validateParameter(valid_607543, JString, required = false,
                                 default = nil)
  if valid_607543 != nil:
    section.add "X-Amz-Signature", valid_607543
  var valid_607544 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607544 = validateParameter(valid_607544, JString, required = false,
                                 default = nil)
  if valid_607544 != nil:
    section.add "X-Amz-Content-Sha256", valid_607544
  var valid_607545 = header.getOrDefault("X-Amz-Date")
  valid_607545 = validateParameter(valid_607545, JString, required = false,
                                 default = nil)
  if valid_607545 != nil:
    section.add "X-Amz-Date", valid_607545
  var valid_607546 = header.getOrDefault("X-Amz-Credential")
  valid_607546 = validateParameter(valid_607546, JString, required = false,
                                 default = nil)
  if valid_607546 != nil:
    section.add "X-Amz-Credential", valid_607546
  var valid_607547 = header.getOrDefault("X-Amz-Security-Token")
  valid_607547 = validateParameter(valid_607547, JString, required = false,
                                 default = nil)
  if valid_607547 != nil:
    section.add "X-Amz-Security-Token", valid_607547
  var valid_607548 = header.getOrDefault("X-Amz-Algorithm")
  valid_607548 = validateParameter(valid_607548, JString, required = false,
                                 default = nil)
  if valid_607548 != nil:
    section.add "X-Amz-Algorithm", valid_607548
  var valid_607549 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607549 = validateParameter(valid_607549, JString, required = false,
                                 default = nil)
  if valid_607549 != nil:
    section.add "X-Amz-SignedHeaders", valid_607549
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : A token returned from a previous call to <code>ListReceiptRuleSets</code> to indicate the position in the receipt rule set list.
  section = newJObject()
  var valid_607550 = formData.getOrDefault("NextToken")
  valid_607550 = validateParameter(valid_607550, JString, required = false,
                                 default = nil)
  if valid_607550 != nil:
    section.add "NextToken", valid_607550
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607551: Call_PostListReceiptRuleSets_607538; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the receipt rule sets that exist under your AWS account in the current AWS Region. If there are additional receipt rule sets to be retrieved, you will receive a <code>NextToken</code> that you can provide to the next call to <code>ListReceiptRuleSets</code> to retrieve the additional entries.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_607551.validator(path, query, header, formData, body)
  let scheme = call_607551.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607551.url(scheme.get, call_607551.host, call_607551.base,
                         call_607551.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607551, url, valid)

proc call*(call_607552: Call_PostListReceiptRuleSets_607538;
          NextToken: string = ""; Action: string = "ListReceiptRuleSets";
          Version: string = "2010-12-01"): Recallable =
  ## postListReceiptRuleSets
  ## <p>Lists the receipt rule sets that exist under your AWS account in the current AWS Region. If there are additional receipt rule sets to be retrieved, you will receive a <code>NextToken</code> that you can provide to the next call to <code>ListReceiptRuleSets</code> to retrieve the additional entries.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : A token returned from a previous call to <code>ListReceiptRuleSets</code> to indicate the position in the receipt rule set list.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607553 = newJObject()
  var formData_607554 = newJObject()
  add(formData_607554, "NextToken", newJString(NextToken))
  add(query_607553, "Action", newJString(Action))
  add(query_607553, "Version", newJString(Version))
  result = call_607552.call(nil, query_607553, nil, formData_607554, nil)

var postListReceiptRuleSets* = Call_PostListReceiptRuleSets_607538(
    name: "postListReceiptRuleSets", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ListReceiptRuleSets",
    validator: validate_PostListReceiptRuleSets_607539, base: "/",
    url: url_PostListReceiptRuleSets_607540, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListReceiptRuleSets_607522 = ref object of OpenApiRestCall_605589
proc url_GetListReceiptRuleSets_607524(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListReceiptRuleSets_607523(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the receipt rule sets that exist under your AWS account in the current AWS Region. If there are additional receipt rule sets to be retrieved, you will receive a <code>NextToken</code> that you can provide to the next call to <code>ListReceiptRuleSets</code> to retrieve the additional entries.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : A token returned from a previous call to <code>ListReceiptRuleSets</code> to indicate the position in the receipt rule set list.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607525 = query.getOrDefault("NextToken")
  valid_607525 = validateParameter(valid_607525, JString, required = false,
                                 default = nil)
  if valid_607525 != nil:
    section.add "NextToken", valid_607525
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607526 = query.getOrDefault("Action")
  valid_607526 = validateParameter(valid_607526, JString, required = true,
                                 default = newJString("ListReceiptRuleSets"))
  if valid_607526 != nil:
    section.add "Action", valid_607526
  var valid_607527 = query.getOrDefault("Version")
  valid_607527 = validateParameter(valid_607527, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607527 != nil:
    section.add "Version", valid_607527
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607528 = header.getOrDefault("X-Amz-Signature")
  valid_607528 = validateParameter(valid_607528, JString, required = false,
                                 default = nil)
  if valid_607528 != nil:
    section.add "X-Amz-Signature", valid_607528
  var valid_607529 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607529 = validateParameter(valid_607529, JString, required = false,
                                 default = nil)
  if valid_607529 != nil:
    section.add "X-Amz-Content-Sha256", valid_607529
  var valid_607530 = header.getOrDefault("X-Amz-Date")
  valid_607530 = validateParameter(valid_607530, JString, required = false,
                                 default = nil)
  if valid_607530 != nil:
    section.add "X-Amz-Date", valid_607530
  var valid_607531 = header.getOrDefault("X-Amz-Credential")
  valid_607531 = validateParameter(valid_607531, JString, required = false,
                                 default = nil)
  if valid_607531 != nil:
    section.add "X-Amz-Credential", valid_607531
  var valid_607532 = header.getOrDefault("X-Amz-Security-Token")
  valid_607532 = validateParameter(valid_607532, JString, required = false,
                                 default = nil)
  if valid_607532 != nil:
    section.add "X-Amz-Security-Token", valid_607532
  var valid_607533 = header.getOrDefault("X-Amz-Algorithm")
  valid_607533 = validateParameter(valid_607533, JString, required = false,
                                 default = nil)
  if valid_607533 != nil:
    section.add "X-Amz-Algorithm", valid_607533
  var valid_607534 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607534 = validateParameter(valid_607534, JString, required = false,
                                 default = nil)
  if valid_607534 != nil:
    section.add "X-Amz-SignedHeaders", valid_607534
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607535: Call_GetListReceiptRuleSets_607522; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the receipt rule sets that exist under your AWS account in the current AWS Region. If there are additional receipt rule sets to be retrieved, you will receive a <code>NextToken</code> that you can provide to the next call to <code>ListReceiptRuleSets</code> to retrieve the additional entries.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_607535.validator(path, query, header, formData, body)
  let scheme = call_607535.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607535.url(scheme.get, call_607535.host, call_607535.base,
                         call_607535.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607535, url, valid)

proc call*(call_607536: Call_GetListReceiptRuleSets_607522; NextToken: string = "";
          Action: string = "ListReceiptRuleSets"; Version: string = "2010-12-01"): Recallable =
  ## getListReceiptRuleSets
  ## <p>Lists the receipt rule sets that exist under your AWS account in the current AWS Region. If there are additional receipt rule sets to be retrieved, you will receive a <code>NextToken</code> that you can provide to the next call to <code>ListReceiptRuleSets</code> to retrieve the additional entries.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : A token returned from a previous call to <code>ListReceiptRuleSets</code> to indicate the position in the receipt rule set list.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607537 = newJObject()
  add(query_607537, "NextToken", newJString(NextToken))
  add(query_607537, "Action", newJString(Action))
  add(query_607537, "Version", newJString(Version))
  result = call_607536.call(nil, query_607537, nil, nil, nil)

var getListReceiptRuleSets* = Call_GetListReceiptRuleSets_607522(
    name: "getListReceiptRuleSets", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=ListReceiptRuleSets",
    validator: validate_GetListReceiptRuleSets_607523, base: "/",
    url: url_GetListReceiptRuleSets_607524, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListTemplates_607572 = ref object of OpenApiRestCall_605589
proc url_PostListTemplates_607574(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListTemplates_607573(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Lists the email templates present in your Amazon SES account in the current AWS Region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607575 = query.getOrDefault("Action")
  valid_607575 = validateParameter(valid_607575, JString, required = true,
                                 default = newJString("ListTemplates"))
  if valid_607575 != nil:
    section.add "Action", valid_607575
  var valid_607576 = query.getOrDefault("Version")
  valid_607576 = validateParameter(valid_607576, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607576 != nil:
    section.add "Version", valid_607576
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607577 = header.getOrDefault("X-Amz-Signature")
  valid_607577 = validateParameter(valid_607577, JString, required = false,
                                 default = nil)
  if valid_607577 != nil:
    section.add "X-Amz-Signature", valid_607577
  var valid_607578 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607578 = validateParameter(valid_607578, JString, required = false,
                                 default = nil)
  if valid_607578 != nil:
    section.add "X-Amz-Content-Sha256", valid_607578
  var valid_607579 = header.getOrDefault("X-Amz-Date")
  valid_607579 = validateParameter(valid_607579, JString, required = false,
                                 default = nil)
  if valid_607579 != nil:
    section.add "X-Amz-Date", valid_607579
  var valid_607580 = header.getOrDefault("X-Amz-Credential")
  valid_607580 = validateParameter(valid_607580, JString, required = false,
                                 default = nil)
  if valid_607580 != nil:
    section.add "X-Amz-Credential", valid_607580
  var valid_607581 = header.getOrDefault("X-Amz-Security-Token")
  valid_607581 = validateParameter(valid_607581, JString, required = false,
                                 default = nil)
  if valid_607581 != nil:
    section.add "X-Amz-Security-Token", valid_607581
  var valid_607582 = header.getOrDefault("X-Amz-Algorithm")
  valid_607582 = validateParameter(valid_607582, JString, required = false,
                                 default = nil)
  if valid_607582 != nil:
    section.add "X-Amz-Algorithm", valid_607582
  var valid_607583 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607583 = validateParameter(valid_607583, JString, required = false,
                                 default = nil)
  if valid_607583 != nil:
    section.add "X-Amz-SignedHeaders", valid_607583
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : A token returned from a previous call to <code>ListTemplates</code> to indicate the position in the list of email templates.
  ##   MaxItems: JInt
  ##           : The maximum number of templates to return. This value must be at least 1 and less than or equal to 10. If you do not specify a value, or if you specify a value less than 1 or greater than 10, the operation will return up to 10 results.
  section = newJObject()
  var valid_607584 = formData.getOrDefault("NextToken")
  valid_607584 = validateParameter(valid_607584, JString, required = false,
                                 default = nil)
  if valid_607584 != nil:
    section.add "NextToken", valid_607584
  var valid_607585 = formData.getOrDefault("MaxItems")
  valid_607585 = validateParameter(valid_607585, JInt, required = false, default = nil)
  if valid_607585 != nil:
    section.add "MaxItems", valid_607585
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607586: Call_PostListTemplates_607572; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the email templates present in your Amazon SES account in the current AWS Region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_607586.validator(path, query, header, formData, body)
  let scheme = call_607586.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607586.url(scheme.get, call_607586.host, call_607586.base,
                         call_607586.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607586, url, valid)

proc call*(call_607587: Call_PostListTemplates_607572; NextToken: string = "";
          Action: string = "ListTemplates"; MaxItems: int = 0;
          Version: string = "2010-12-01"): Recallable =
  ## postListTemplates
  ## <p>Lists the email templates present in your Amazon SES account in the current AWS Region.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : A token returned from a previous call to <code>ListTemplates</code> to indicate the position in the list of email templates.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : The maximum number of templates to return. This value must be at least 1 and less than or equal to 10. If you do not specify a value, or if you specify a value less than 1 or greater than 10, the operation will return up to 10 results.
  ##   Version: string (required)
  var query_607588 = newJObject()
  var formData_607589 = newJObject()
  add(formData_607589, "NextToken", newJString(NextToken))
  add(query_607588, "Action", newJString(Action))
  add(formData_607589, "MaxItems", newJInt(MaxItems))
  add(query_607588, "Version", newJString(Version))
  result = call_607587.call(nil, query_607588, nil, formData_607589, nil)

var postListTemplates* = Call_PostListTemplates_607572(name: "postListTemplates",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=ListTemplates", validator: validate_PostListTemplates_607573,
    base: "/", url: url_PostListTemplates_607574,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListTemplates_607555 = ref object of OpenApiRestCall_605589
proc url_GetListTemplates_607557(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListTemplates_607556(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Lists the email templates present in your Amazon SES account in the current AWS Region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxItems: JInt
  ##           : The maximum number of templates to return. This value must be at least 1 and less than or equal to 10. If you do not specify a value, or if you specify a value less than 1 or greater than 10, the operation will return up to 10 results.
  ##   NextToken: JString
  ##            : A token returned from a previous call to <code>ListTemplates</code> to indicate the position in the list of email templates.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607558 = query.getOrDefault("MaxItems")
  valid_607558 = validateParameter(valid_607558, JInt, required = false, default = nil)
  if valid_607558 != nil:
    section.add "MaxItems", valid_607558
  var valid_607559 = query.getOrDefault("NextToken")
  valid_607559 = validateParameter(valid_607559, JString, required = false,
                                 default = nil)
  if valid_607559 != nil:
    section.add "NextToken", valid_607559
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607560 = query.getOrDefault("Action")
  valid_607560 = validateParameter(valid_607560, JString, required = true,
                                 default = newJString("ListTemplates"))
  if valid_607560 != nil:
    section.add "Action", valid_607560
  var valid_607561 = query.getOrDefault("Version")
  valid_607561 = validateParameter(valid_607561, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607561 != nil:
    section.add "Version", valid_607561
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607562 = header.getOrDefault("X-Amz-Signature")
  valid_607562 = validateParameter(valid_607562, JString, required = false,
                                 default = nil)
  if valid_607562 != nil:
    section.add "X-Amz-Signature", valid_607562
  var valid_607563 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607563 = validateParameter(valid_607563, JString, required = false,
                                 default = nil)
  if valid_607563 != nil:
    section.add "X-Amz-Content-Sha256", valid_607563
  var valid_607564 = header.getOrDefault("X-Amz-Date")
  valid_607564 = validateParameter(valid_607564, JString, required = false,
                                 default = nil)
  if valid_607564 != nil:
    section.add "X-Amz-Date", valid_607564
  var valid_607565 = header.getOrDefault("X-Amz-Credential")
  valid_607565 = validateParameter(valid_607565, JString, required = false,
                                 default = nil)
  if valid_607565 != nil:
    section.add "X-Amz-Credential", valid_607565
  var valid_607566 = header.getOrDefault("X-Amz-Security-Token")
  valid_607566 = validateParameter(valid_607566, JString, required = false,
                                 default = nil)
  if valid_607566 != nil:
    section.add "X-Amz-Security-Token", valid_607566
  var valid_607567 = header.getOrDefault("X-Amz-Algorithm")
  valid_607567 = validateParameter(valid_607567, JString, required = false,
                                 default = nil)
  if valid_607567 != nil:
    section.add "X-Amz-Algorithm", valid_607567
  var valid_607568 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607568 = validateParameter(valid_607568, JString, required = false,
                                 default = nil)
  if valid_607568 != nil:
    section.add "X-Amz-SignedHeaders", valid_607568
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607569: Call_GetListTemplates_607555; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the email templates present in your Amazon SES account in the current AWS Region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_607569.validator(path, query, header, formData, body)
  let scheme = call_607569.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607569.url(scheme.get, call_607569.host, call_607569.base,
                         call_607569.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607569, url, valid)

proc call*(call_607570: Call_GetListTemplates_607555; MaxItems: int = 0;
          NextToken: string = ""; Action: string = "ListTemplates";
          Version: string = "2010-12-01"): Recallable =
  ## getListTemplates
  ## <p>Lists the email templates present in your Amazon SES account in the current AWS Region.</p> <p>You can execute this operation no more than once per second.</p>
  ##   MaxItems: int
  ##           : The maximum number of templates to return. This value must be at least 1 and less than or equal to 10. If you do not specify a value, or if you specify a value less than 1 or greater than 10, the operation will return up to 10 results.
  ##   NextToken: string
  ##            : A token returned from a previous call to <code>ListTemplates</code> to indicate the position in the list of email templates.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607571 = newJObject()
  add(query_607571, "MaxItems", newJInt(MaxItems))
  add(query_607571, "NextToken", newJString(NextToken))
  add(query_607571, "Action", newJString(Action))
  add(query_607571, "Version", newJString(Version))
  result = call_607570.call(nil, query_607571, nil, nil, nil)

var getListTemplates* = Call_GetListTemplates_607555(name: "getListTemplates",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=ListTemplates", validator: validate_GetListTemplates_607556,
    base: "/", url: url_GetListTemplates_607557,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListVerifiedEmailAddresses_607605 = ref object of OpenApiRestCall_605589
proc url_PostListVerifiedEmailAddresses_607607(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListVerifiedEmailAddresses_607606(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deprecated. Use the <code>ListIdentities</code> operation to list the email addresses and domains associated with your account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607608 = query.getOrDefault("Action")
  valid_607608 = validateParameter(valid_607608, JString, required = true, default = newJString(
      "ListVerifiedEmailAddresses"))
  if valid_607608 != nil:
    section.add "Action", valid_607608
  var valid_607609 = query.getOrDefault("Version")
  valid_607609 = validateParameter(valid_607609, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607609 != nil:
    section.add "Version", valid_607609
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607610 = header.getOrDefault("X-Amz-Signature")
  valid_607610 = validateParameter(valid_607610, JString, required = false,
                                 default = nil)
  if valid_607610 != nil:
    section.add "X-Amz-Signature", valid_607610
  var valid_607611 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607611 = validateParameter(valid_607611, JString, required = false,
                                 default = nil)
  if valid_607611 != nil:
    section.add "X-Amz-Content-Sha256", valid_607611
  var valid_607612 = header.getOrDefault("X-Amz-Date")
  valid_607612 = validateParameter(valid_607612, JString, required = false,
                                 default = nil)
  if valid_607612 != nil:
    section.add "X-Amz-Date", valid_607612
  var valid_607613 = header.getOrDefault("X-Amz-Credential")
  valid_607613 = validateParameter(valid_607613, JString, required = false,
                                 default = nil)
  if valid_607613 != nil:
    section.add "X-Amz-Credential", valid_607613
  var valid_607614 = header.getOrDefault("X-Amz-Security-Token")
  valid_607614 = validateParameter(valid_607614, JString, required = false,
                                 default = nil)
  if valid_607614 != nil:
    section.add "X-Amz-Security-Token", valid_607614
  var valid_607615 = header.getOrDefault("X-Amz-Algorithm")
  valid_607615 = validateParameter(valid_607615, JString, required = false,
                                 default = nil)
  if valid_607615 != nil:
    section.add "X-Amz-Algorithm", valid_607615
  var valid_607616 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607616 = validateParameter(valid_607616, JString, required = false,
                                 default = nil)
  if valid_607616 != nil:
    section.add "X-Amz-SignedHeaders", valid_607616
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607617: Call_PostListVerifiedEmailAddresses_607605; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deprecated. Use the <code>ListIdentities</code> operation to list the email addresses and domains associated with your account.
  ## 
  let valid = call_607617.validator(path, query, header, formData, body)
  let scheme = call_607617.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607617.url(scheme.get, call_607617.host, call_607617.base,
                         call_607617.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607617, url, valid)

proc call*(call_607618: Call_PostListVerifiedEmailAddresses_607605;
          Action: string = "ListVerifiedEmailAddresses";
          Version: string = "2010-12-01"): Recallable =
  ## postListVerifiedEmailAddresses
  ## Deprecated. Use the <code>ListIdentities</code> operation to list the email addresses and domains associated with your account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607619 = newJObject()
  add(query_607619, "Action", newJString(Action))
  add(query_607619, "Version", newJString(Version))
  result = call_607618.call(nil, query_607619, nil, nil, nil)

var postListVerifiedEmailAddresses* = Call_PostListVerifiedEmailAddresses_607605(
    name: "postListVerifiedEmailAddresses", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ListVerifiedEmailAddresses",
    validator: validate_PostListVerifiedEmailAddresses_607606, base: "/",
    url: url_PostListVerifiedEmailAddresses_607607,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListVerifiedEmailAddresses_607590 = ref object of OpenApiRestCall_605589
proc url_GetListVerifiedEmailAddresses_607592(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListVerifiedEmailAddresses_607591(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deprecated. Use the <code>ListIdentities</code> operation to list the email addresses and domains associated with your account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607593 = query.getOrDefault("Action")
  valid_607593 = validateParameter(valid_607593, JString, required = true, default = newJString(
      "ListVerifiedEmailAddresses"))
  if valid_607593 != nil:
    section.add "Action", valid_607593
  var valid_607594 = query.getOrDefault("Version")
  valid_607594 = validateParameter(valid_607594, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607594 != nil:
    section.add "Version", valid_607594
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607595 = header.getOrDefault("X-Amz-Signature")
  valid_607595 = validateParameter(valid_607595, JString, required = false,
                                 default = nil)
  if valid_607595 != nil:
    section.add "X-Amz-Signature", valid_607595
  var valid_607596 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607596 = validateParameter(valid_607596, JString, required = false,
                                 default = nil)
  if valid_607596 != nil:
    section.add "X-Amz-Content-Sha256", valid_607596
  var valid_607597 = header.getOrDefault("X-Amz-Date")
  valid_607597 = validateParameter(valid_607597, JString, required = false,
                                 default = nil)
  if valid_607597 != nil:
    section.add "X-Amz-Date", valid_607597
  var valid_607598 = header.getOrDefault("X-Amz-Credential")
  valid_607598 = validateParameter(valid_607598, JString, required = false,
                                 default = nil)
  if valid_607598 != nil:
    section.add "X-Amz-Credential", valid_607598
  var valid_607599 = header.getOrDefault("X-Amz-Security-Token")
  valid_607599 = validateParameter(valid_607599, JString, required = false,
                                 default = nil)
  if valid_607599 != nil:
    section.add "X-Amz-Security-Token", valid_607599
  var valid_607600 = header.getOrDefault("X-Amz-Algorithm")
  valid_607600 = validateParameter(valid_607600, JString, required = false,
                                 default = nil)
  if valid_607600 != nil:
    section.add "X-Amz-Algorithm", valid_607600
  var valid_607601 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607601 = validateParameter(valid_607601, JString, required = false,
                                 default = nil)
  if valid_607601 != nil:
    section.add "X-Amz-SignedHeaders", valid_607601
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607602: Call_GetListVerifiedEmailAddresses_607590; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deprecated. Use the <code>ListIdentities</code> operation to list the email addresses and domains associated with your account.
  ## 
  let valid = call_607602.validator(path, query, header, formData, body)
  let scheme = call_607602.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607602.url(scheme.get, call_607602.host, call_607602.base,
                         call_607602.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607602, url, valid)

proc call*(call_607603: Call_GetListVerifiedEmailAddresses_607590;
          Action: string = "ListVerifiedEmailAddresses";
          Version: string = "2010-12-01"): Recallable =
  ## getListVerifiedEmailAddresses
  ## Deprecated. Use the <code>ListIdentities</code> operation to list the email addresses and domains associated with your account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607604 = newJObject()
  add(query_607604, "Action", newJString(Action))
  add(query_607604, "Version", newJString(Version))
  result = call_607603.call(nil, query_607604, nil, nil, nil)

var getListVerifiedEmailAddresses* = Call_GetListVerifiedEmailAddresses_607590(
    name: "getListVerifiedEmailAddresses", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=ListVerifiedEmailAddresses",
    validator: validate_GetListVerifiedEmailAddresses_607591, base: "/",
    url: url_GetListVerifiedEmailAddresses_607592,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutConfigurationSetDeliveryOptions_607637 = ref object of OpenApiRestCall_605589
proc url_PostPutConfigurationSetDeliveryOptions_607639(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutConfigurationSetDeliveryOptions_607638(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds or updates the delivery options for a configuration set.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607640 = query.getOrDefault("Action")
  valid_607640 = validateParameter(valid_607640, JString, required = true, default = newJString(
      "PutConfigurationSetDeliveryOptions"))
  if valid_607640 != nil:
    section.add "Action", valid_607640
  var valid_607641 = query.getOrDefault("Version")
  valid_607641 = validateParameter(valid_607641, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607641 != nil:
    section.add "Version", valid_607641
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607642 = header.getOrDefault("X-Amz-Signature")
  valid_607642 = validateParameter(valid_607642, JString, required = false,
                                 default = nil)
  if valid_607642 != nil:
    section.add "X-Amz-Signature", valid_607642
  var valid_607643 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607643 = validateParameter(valid_607643, JString, required = false,
                                 default = nil)
  if valid_607643 != nil:
    section.add "X-Amz-Content-Sha256", valid_607643
  var valid_607644 = header.getOrDefault("X-Amz-Date")
  valid_607644 = validateParameter(valid_607644, JString, required = false,
                                 default = nil)
  if valid_607644 != nil:
    section.add "X-Amz-Date", valid_607644
  var valid_607645 = header.getOrDefault("X-Amz-Credential")
  valid_607645 = validateParameter(valid_607645, JString, required = false,
                                 default = nil)
  if valid_607645 != nil:
    section.add "X-Amz-Credential", valid_607645
  var valid_607646 = header.getOrDefault("X-Amz-Security-Token")
  valid_607646 = validateParameter(valid_607646, JString, required = false,
                                 default = nil)
  if valid_607646 != nil:
    section.add "X-Amz-Security-Token", valid_607646
  var valid_607647 = header.getOrDefault("X-Amz-Algorithm")
  valid_607647 = validateParameter(valid_607647, JString, required = false,
                                 default = nil)
  if valid_607647 != nil:
    section.add "X-Amz-Algorithm", valid_607647
  var valid_607648 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607648 = validateParameter(valid_607648, JString, required = false,
                                 default = nil)
  if valid_607648 != nil:
    section.add "X-Amz-SignedHeaders", valid_607648
  result.add "header", section
  ## parameters in `formData` object:
  ##   DeliveryOptions.TlsPolicy: JString
  ##                            : Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS).
  ## Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only delivered if a TLS connection can be established. If the value is <code>Optional</code>, messages can be delivered in plain text if a TLS connection can't be established.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that you want to specify the delivery options for.
  section = newJObject()
  var valid_607649 = formData.getOrDefault("DeliveryOptions.TlsPolicy")
  valid_607649 = validateParameter(valid_607649, JString, required = false,
                                 default = nil)
  if valid_607649 != nil:
    section.add "DeliveryOptions.TlsPolicy", valid_607649
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_607650 = formData.getOrDefault("ConfigurationSetName")
  valid_607650 = validateParameter(valid_607650, JString, required = true,
                                 default = nil)
  if valid_607650 != nil:
    section.add "ConfigurationSetName", valid_607650
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607651: Call_PostPutConfigurationSetDeliveryOptions_607637;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds or updates the delivery options for a configuration set.
  ## 
  let valid = call_607651.validator(path, query, header, formData, body)
  let scheme = call_607651.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607651.url(scheme.get, call_607651.host, call_607651.base,
                         call_607651.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607651, url, valid)

proc call*(call_607652: Call_PostPutConfigurationSetDeliveryOptions_607637;
          ConfigurationSetName: string; DeliveryOptionsTlsPolicy: string = "";
          Action: string = "PutConfigurationSetDeliveryOptions";
          Version: string = "2010-12-01"): Recallable =
  ## postPutConfigurationSetDeliveryOptions
  ## Adds or updates the delivery options for a configuration set.
  ##   DeliveryOptionsTlsPolicy: string
  ##                           : Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS).
  ## Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only delivered if a TLS connection can be established. If the value is <code>Optional</code>, messages can be delivered in plain text if a TLS connection can't be established.
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that you want to specify the delivery options for.
  ##   Version: string (required)
  var query_607653 = newJObject()
  var formData_607654 = newJObject()
  add(formData_607654, "DeliveryOptions.TlsPolicy",
      newJString(DeliveryOptionsTlsPolicy))
  add(query_607653, "Action", newJString(Action))
  add(formData_607654, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_607653, "Version", newJString(Version))
  result = call_607652.call(nil, query_607653, nil, formData_607654, nil)

var postPutConfigurationSetDeliveryOptions* = Call_PostPutConfigurationSetDeliveryOptions_607637(
    name: "postPutConfigurationSetDeliveryOptions", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=PutConfigurationSetDeliveryOptions",
    validator: validate_PostPutConfigurationSetDeliveryOptions_607638, base: "/",
    url: url_PostPutConfigurationSetDeliveryOptions_607639,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutConfigurationSetDeliveryOptions_607620 = ref object of OpenApiRestCall_605589
proc url_GetPutConfigurationSetDeliveryOptions_607622(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutConfigurationSetDeliveryOptions_607621(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds or updates the delivery options for a configuration set.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that you want to specify the delivery options for.
  ##   DeliveryOptions.TlsPolicy: JString
  ##                            : Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS).
  ## Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only delivered if a TLS connection can be established. If the value is <code>Optional</code>, messages can be delivered in plain text if a TLS connection can't be established.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ConfigurationSetName` field"
  var valid_607623 = query.getOrDefault("ConfigurationSetName")
  valid_607623 = validateParameter(valid_607623, JString, required = true,
                                 default = nil)
  if valid_607623 != nil:
    section.add "ConfigurationSetName", valid_607623
  var valid_607624 = query.getOrDefault("DeliveryOptions.TlsPolicy")
  valid_607624 = validateParameter(valid_607624, JString, required = false,
                                 default = nil)
  if valid_607624 != nil:
    section.add "DeliveryOptions.TlsPolicy", valid_607624
  var valid_607625 = query.getOrDefault("Action")
  valid_607625 = validateParameter(valid_607625, JString, required = true, default = newJString(
      "PutConfigurationSetDeliveryOptions"))
  if valid_607625 != nil:
    section.add "Action", valid_607625
  var valid_607626 = query.getOrDefault("Version")
  valid_607626 = validateParameter(valid_607626, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607626 != nil:
    section.add "Version", valid_607626
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607627 = header.getOrDefault("X-Amz-Signature")
  valid_607627 = validateParameter(valid_607627, JString, required = false,
                                 default = nil)
  if valid_607627 != nil:
    section.add "X-Amz-Signature", valid_607627
  var valid_607628 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607628 = validateParameter(valid_607628, JString, required = false,
                                 default = nil)
  if valid_607628 != nil:
    section.add "X-Amz-Content-Sha256", valid_607628
  var valid_607629 = header.getOrDefault("X-Amz-Date")
  valid_607629 = validateParameter(valid_607629, JString, required = false,
                                 default = nil)
  if valid_607629 != nil:
    section.add "X-Amz-Date", valid_607629
  var valid_607630 = header.getOrDefault("X-Amz-Credential")
  valid_607630 = validateParameter(valid_607630, JString, required = false,
                                 default = nil)
  if valid_607630 != nil:
    section.add "X-Amz-Credential", valid_607630
  var valid_607631 = header.getOrDefault("X-Amz-Security-Token")
  valid_607631 = validateParameter(valid_607631, JString, required = false,
                                 default = nil)
  if valid_607631 != nil:
    section.add "X-Amz-Security-Token", valid_607631
  var valid_607632 = header.getOrDefault("X-Amz-Algorithm")
  valid_607632 = validateParameter(valid_607632, JString, required = false,
                                 default = nil)
  if valid_607632 != nil:
    section.add "X-Amz-Algorithm", valid_607632
  var valid_607633 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607633 = validateParameter(valid_607633, JString, required = false,
                                 default = nil)
  if valid_607633 != nil:
    section.add "X-Amz-SignedHeaders", valid_607633
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607634: Call_GetPutConfigurationSetDeliveryOptions_607620;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds or updates the delivery options for a configuration set.
  ## 
  let valid = call_607634.validator(path, query, header, formData, body)
  let scheme = call_607634.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607634.url(scheme.get, call_607634.host, call_607634.base,
                         call_607634.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607634, url, valid)

proc call*(call_607635: Call_GetPutConfigurationSetDeliveryOptions_607620;
          ConfigurationSetName: string; DeliveryOptionsTlsPolicy: string = "";
          Action: string = "PutConfigurationSetDeliveryOptions";
          Version: string = "2010-12-01"): Recallable =
  ## getPutConfigurationSetDeliveryOptions
  ## Adds or updates the delivery options for a configuration set.
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that you want to specify the delivery options for.
  ##   DeliveryOptionsTlsPolicy: string
  ##                           : Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS).
  ## Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only delivered if a TLS connection can be established. If the value is <code>Optional</code>, messages can be delivered in plain text if a TLS connection can't be established.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607636 = newJObject()
  add(query_607636, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_607636, "DeliveryOptions.TlsPolicy",
      newJString(DeliveryOptionsTlsPolicy))
  add(query_607636, "Action", newJString(Action))
  add(query_607636, "Version", newJString(Version))
  result = call_607635.call(nil, query_607636, nil, nil, nil)

var getPutConfigurationSetDeliveryOptions* = Call_GetPutConfigurationSetDeliveryOptions_607620(
    name: "getPutConfigurationSetDeliveryOptions", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=PutConfigurationSetDeliveryOptions",
    validator: validate_GetPutConfigurationSetDeliveryOptions_607621, base: "/",
    url: url_GetPutConfigurationSetDeliveryOptions_607622,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutIdentityPolicy_607673 = ref object of OpenApiRestCall_605589
proc url_PostPutIdentityPolicy_607675(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutIdentityPolicy_607674(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds or updates a sending authorization policy for the specified identity (an email address or a domain).</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607676 = query.getOrDefault("Action")
  valid_607676 = validateParameter(valid_607676, JString, required = true,
                                 default = newJString("PutIdentityPolicy"))
  if valid_607676 != nil:
    section.add "Action", valid_607676
  var valid_607677 = query.getOrDefault("Version")
  valid_607677 = validateParameter(valid_607677, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607677 != nil:
    section.add "Version", valid_607677
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607678 = header.getOrDefault("X-Amz-Signature")
  valid_607678 = validateParameter(valid_607678, JString, required = false,
                                 default = nil)
  if valid_607678 != nil:
    section.add "X-Amz-Signature", valid_607678
  var valid_607679 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607679 = validateParameter(valid_607679, JString, required = false,
                                 default = nil)
  if valid_607679 != nil:
    section.add "X-Amz-Content-Sha256", valid_607679
  var valid_607680 = header.getOrDefault("X-Amz-Date")
  valid_607680 = validateParameter(valid_607680, JString, required = false,
                                 default = nil)
  if valid_607680 != nil:
    section.add "X-Amz-Date", valid_607680
  var valid_607681 = header.getOrDefault("X-Amz-Credential")
  valid_607681 = validateParameter(valid_607681, JString, required = false,
                                 default = nil)
  if valid_607681 != nil:
    section.add "X-Amz-Credential", valid_607681
  var valid_607682 = header.getOrDefault("X-Amz-Security-Token")
  valid_607682 = validateParameter(valid_607682, JString, required = false,
                                 default = nil)
  if valid_607682 != nil:
    section.add "X-Amz-Security-Token", valid_607682
  var valid_607683 = header.getOrDefault("X-Amz-Algorithm")
  valid_607683 = validateParameter(valid_607683, JString, required = false,
                                 default = nil)
  if valid_607683 != nil:
    section.add "X-Amz-Algorithm", valid_607683
  var valid_607684 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607684 = validateParameter(valid_607684, JString, required = false,
                                 default = nil)
  if valid_607684 != nil:
    section.add "X-Amz-SignedHeaders", valid_607684
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identity: JString (required)
  ##           : <p>The identity that the policy will apply to. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Policy: JString (required)
  ##         : <p>The text of the policy in JSON format. The policy cannot exceed 4 KB.</p> <p>For information about the syntax of sending authorization policies, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-policies.html">Amazon SES Developer Guide</a>. </p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy.</p> <p>The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identity` field"
  var valid_607685 = formData.getOrDefault("Identity")
  valid_607685 = validateParameter(valid_607685, JString, required = true,
                                 default = nil)
  if valid_607685 != nil:
    section.add "Identity", valid_607685
  var valid_607686 = formData.getOrDefault("Policy")
  valid_607686 = validateParameter(valid_607686, JString, required = true,
                                 default = nil)
  if valid_607686 != nil:
    section.add "Policy", valid_607686
  var valid_607687 = formData.getOrDefault("PolicyName")
  valid_607687 = validateParameter(valid_607687, JString, required = true,
                                 default = nil)
  if valid_607687 != nil:
    section.add "PolicyName", valid_607687
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607688: Call_PostPutIdentityPolicy_607673; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates a sending authorization policy for the specified identity (an email address or a domain).</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_607688.validator(path, query, header, formData, body)
  let scheme = call_607688.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607688.url(scheme.get, call_607688.host, call_607688.base,
                         call_607688.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607688, url, valid)

proc call*(call_607689: Call_PostPutIdentityPolicy_607673; Identity: string;
          Policy: string; PolicyName: string; Action: string = "PutIdentityPolicy";
          Version: string = "2010-12-01"): Recallable =
  ## postPutIdentityPolicy
  ## <p>Adds or updates a sending authorization policy for the specified identity (an email address or a domain).</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : <p>The identity that the policy will apply to. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Policy: string (required)
  ##         : <p>The text of the policy in JSON format. The policy cannot exceed 4 KB.</p> <p>For information about the syntax of sending authorization policies, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-policies.html">Amazon SES Developer Guide</a>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy.</p> <p>The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.</p>
  var query_607690 = newJObject()
  var formData_607691 = newJObject()
  add(formData_607691, "Identity", newJString(Identity))
  add(formData_607691, "Policy", newJString(Policy))
  add(query_607690, "Action", newJString(Action))
  add(query_607690, "Version", newJString(Version))
  add(formData_607691, "PolicyName", newJString(PolicyName))
  result = call_607689.call(nil, query_607690, nil, formData_607691, nil)

var postPutIdentityPolicy* = Call_PostPutIdentityPolicy_607673(
    name: "postPutIdentityPolicy", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=PutIdentityPolicy",
    validator: validate_PostPutIdentityPolicy_607674, base: "/",
    url: url_PostPutIdentityPolicy_607675, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutIdentityPolicy_607655 = ref object of OpenApiRestCall_605589
proc url_GetPutIdentityPolicy_607657(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutIdentityPolicy_607656(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds or updates a sending authorization policy for the specified identity (an email address or a domain).</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy.</p> <p>The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.</p>
  ##   Identity: JString (required)
  ##           : <p>The identity that the policy will apply to. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Policy: JString (required)
  ##         : <p>The text of the policy in JSON format. The policy cannot exceed 4 KB.</p> <p>For information about the syntax of sending authorization policies, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-policies.html">Amazon SES Developer Guide</a>. </p>
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyName` field"
  var valid_607658 = query.getOrDefault("PolicyName")
  valid_607658 = validateParameter(valid_607658, JString, required = true,
                                 default = nil)
  if valid_607658 != nil:
    section.add "PolicyName", valid_607658
  var valid_607659 = query.getOrDefault("Identity")
  valid_607659 = validateParameter(valid_607659, JString, required = true,
                                 default = nil)
  if valid_607659 != nil:
    section.add "Identity", valid_607659
  var valid_607660 = query.getOrDefault("Action")
  valid_607660 = validateParameter(valid_607660, JString, required = true,
                                 default = newJString("PutIdentityPolicy"))
  if valid_607660 != nil:
    section.add "Action", valid_607660
  var valid_607661 = query.getOrDefault("Version")
  valid_607661 = validateParameter(valid_607661, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607661 != nil:
    section.add "Version", valid_607661
  var valid_607662 = query.getOrDefault("Policy")
  valid_607662 = validateParameter(valid_607662, JString, required = true,
                                 default = nil)
  if valid_607662 != nil:
    section.add "Policy", valid_607662
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607663 = header.getOrDefault("X-Amz-Signature")
  valid_607663 = validateParameter(valid_607663, JString, required = false,
                                 default = nil)
  if valid_607663 != nil:
    section.add "X-Amz-Signature", valid_607663
  var valid_607664 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607664 = validateParameter(valid_607664, JString, required = false,
                                 default = nil)
  if valid_607664 != nil:
    section.add "X-Amz-Content-Sha256", valid_607664
  var valid_607665 = header.getOrDefault("X-Amz-Date")
  valid_607665 = validateParameter(valid_607665, JString, required = false,
                                 default = nil)
  if valid_607665 != nil:
    section.add "X-Amz-Date", valid_607665
  var valid_607666 = header.getOrDefault("X-Amz-Credential")
  valid_607666 = validateParameter(valid_607666, JString, required = false,
                                 default = nil)
  if valid_607666 != nil:
    section.add "X-Amz-Credential", valid_607666
  var valid_607667 = header.getOrDefault("X-Amz-Security-Token")
  valid_607667 = validateParameter(valid_607667, JString, required = false,
                                 default = nil)
  if valid_607667 != nil:
    section.add "X-Amz-Security-Token", valid_607667
  var valid_607668 = header.getOrDefault("X-Amz-Algorithm")
  valid_607668 = validateParameter(valid_607668, JString, required = false,
                                 default = nil)
  if valid_607668 != nil:
    section.add "X-Amz-Algorithm", valid_607668
  var valid_607669 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607669 = validateParameter(valid_607669, JString, required = false,
                                 default = nil)
  if valid_607669 != nil:
    section.add "X-Amz-SignedHeaders", valid_607669
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607670: Call_GetPutIdentityPolicy_607655; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates a sending authorization policy for the specified identity (an email address or a domain).</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_607670.validator(path, query, header, formData, body)
  let scheme = call_607670.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607670.url(scheme.get, call_607670.host, call_607670.base,
                         call_607670.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607670, url, valid)

proc call*(call_607671: Call_GetPutIdentityPolicy_607655; PolicyName: string;
          Identity: string; Policy: string; Action: string = "PutIdentityPolicy";
          Version: string = "2010-12-01"): Recallable =
  ## getPutIdentityPolicy
  ## <p>Adds or updates a sending authorization policy for the specified identity (an email address or a domain).</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy.</p> <p>The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.</p>
  ##   Identity: string (required)
  ##           : <p>The identity that the policy will apply to. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Policy: string (required)
  ##         : <p>The text of the policy in JSON format. The policy cannot exceed 4 KB.</p> <p>For information about the syntax of sending authorization policies, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-policies.html">Amazon SES Developer Guide</a>. </p>
  var query_607672 = newJObject()
  add(query_607672, "PolicyName", newJString(PolicyName))
  add(query_607672, "Identity", newJString(Identity))
  add(query_607672, "Action", newJString(Action))
  add(query_607672, "Version", newJString(Version))
  add(query_607672, "Policy", newJString(Policy))
  result = call_607671.call(nil, query_607672, nil, nil, nil)

var getPutIdentityPolicy* = Call_GetPutIdentityPolicy_607655(
    name: "getPutIdentityPolicy", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=PutIdentityPolicy",
    validator: validate_GetPutIdentityPolicy_607656, base: "/",
    url: url_GetPutIdentityPolicy_607657, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostReorderReceiptRuleSet_607709 = ref object of OpenApiRestCall_605589
proc url_PostReorderReceiptRuleSet_607711(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostReorderReceiptRuleSet_607710(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Reorders the receipt rules within a receipt rule set.</p> <note> <p>All of the rules in the rule set must be represented in this request. That is, this API will return an error if the reorder request doesn't explicitly position all of the rules.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607712 = query.getOrDefault("Action")
  valid_607712 = validateParameter(valid_607712, JString, required = true,
                                 default = newJString("ReorderReceiptRuleSet"))
  if valid_607712 != nil:
    section.add "Action", valid_607712
  var valid_607713 = query.getOrDefault("Version")
  valid_607713 = validateParameter(valid_607713, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607713 != nil:
    section.add "Version", valid_607713
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607714 = header.getOrDefault("X-Amz-Signature")
  valid_607714 = validateParameter(valid_607714, JString, required = false,
                                 default = nil)
  if valid_607714 != nil:
    section.add "X-Amz-Signature", valid_607714
  var valid_607715 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607715 = validateParameter(valid_607715, JString, required = false,
                                 default = nil)
  if valid_607715 != nil:
    section.add "X-Amz-Content-Sha256", valid_607715
  var valid_607716 = header.getOrDefault("X-Amz-Date")
  valid_607716 = validateParameter(valid_607716, JString, required = false,
                                 default = nil)
  if valid_607716 != nil:
    section.add "X-Amz-Date", valid_607716
  var valid_607717 = header.getOrDefault("X-Amz-Credential")
  valid_607717 = validateParameter(valid_607717, JString, required = false,
                                 default = nil)
  if valid_607717 != nil:
    section.add "X-Amz-Credential", valid_607717
  var valid_607718 = header.getOrDefault("X-Amz-Security-Token")
  valid_607718 = validateParameter(valid_607718, JString, required = false,
                                 default = nil)
  if valid_607718 != nil:
    section.add "X-Amz-Security-Token", valid_607718
  var valid_607719 = header.getOrDefault("X-Amz-Algorithm")
  valid_607719 = validateParameter(valid_607719, JString, required = false,
                                 default = nil)
  if valid_607719 != nil:
    section.add "X-Amz-Algorithm", valid_607719
  var valid_607720 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607720 = validateParameter(valid_607720, JString, required = false,
                                 default = nil)
  if valid_607720 != nil:
    section.add "X-Amz-SignedHeaders", valid_607720
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleNames: JArray (required)
  ##            : A list of the specified receipt rule set's receipt rules in the order that you want to put them.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set to reorder.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleNames` field"
  var valid_607721 = formData.getOrDefault("RuleNames")
  valid_607721 = validateParameter(valid_607721, JArray, required = true, default = nil)
  if valid_607721 != nil:
    section.add "RuleNames", valid_607721
  var valid_607722 = formData.getOrDefault("RuleSetName")
  valid_607722 = validateParameter(valid_607722, JString, required = true,
                                 default = nil)
  if valid_607722 != nil:
    section.add "RuleSetName", valid_607722
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607723: Call_PostReorderReceiptRuleSet_607709; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Reorders the receipt rules within a receipt rule set.</p> <note> <p>All of the rules in the rule set must be represented in this request. That is, this API will return an error if the reorder request doesn't explicitly position all of the rules.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_607723.validator(path, query, header, formData, body)
  let scheme = call_607723.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607723.url(scheme.get, call_607723.host, call_607723.base,
                         call_607723.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607723, url, valid)

proc call*(call_607724: Call_PostReorderReceiptRuleSet_607709; RuleNames: JsonNode;
          RuleSetName: string; Action: string = "ReorderReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## postReorderReceiptRuleSet
  ## <p>Reorders the receipt rules within a receipt rule set.</p> <note> <p>All of the rules in the rule set must be represented in this request. That is, this API will return an error if the reorder request doesn't explicitly position all of the rules.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleNames: JArray (required)
  ##            : A list of the specified receipt rule set's receipt rules in the order that you want to put them.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set to reorder.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607725 = newJObject()
  var formData_607726 = newJObject()
  if RuleNames != nil:
    formData_607726.add "RuleNames", RuleNames
  add(formData_607726, "RuleSetName", newJString(RuleSetName))
  add(query_607725, "Action", newJString(Action))
  add(query_607725, "Version", newJString(Version))
  result = call_607724.call(nil, query_607725, nil, formData_607726, nil)

var postReorderReceiptRuleSet* = Call_PostReorderReceiptRuleSet_607709(
    name: "postReorderReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ReorderReceiptRuleSet",
    validator: validate_PostReorderReceiptRuleSet_607710, base: "/",
    url: url_PostReorderReceiptRuleSet_607711,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetReorderReceiptRuleSet_607692 = ref object of OpenApiRestCall_605589
proc url_GetReorderReceiptRuleSet_607694(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetReorderReceiptRuleSet_607693(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Reorders the receipt rules within a receipt rule set.</p> <note> <p>All of the rules in the rule set must be represented in this request. That is, this API will return an error if the reorder request doesn't explicitly position all of the rules.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set to reorder.
  ##   RuleNames: JArray (required)
  ##            : A list of the specified receipt rule set's receipt rules in the order that you want to put them.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607695 = query.getOrDefault("Action")
  valid_607695 = validateParameter(valid_607695, JString, required = true,
                                 default = newJString("ReorderReceiptRuleSet"))
  if valid_607695 != nil:
    section.add "Action", valid_607695
  var valid_607696 = query.getOrDefault("RuleSetName")
  valid_607696 = validateParameter(valid_607696, JString, required = true,
                                 default = nil)
  if valid_607696 != nil:
    section.add "RuleSetName", valid_607696
  var valid_607697 = query.getOrDefault("RuleNames")
  valid_607697 = validateParameter(valid_607697, JArray, required = true, default = nil)
  if valid_607697 != nil:
    section.add "RuleNames", valid_607697
  var valid_607698 = query.getOrDefault("Version")
  valid_607698 = validateParameter(valid_607698, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607698 != nil:
    section.add "Version", valid_607698
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607699 = header.getOrDefault("X-Amz-Signature")
  valid_607699 = validateParameter(valid_607699, JString, required = false,
                                 default = nil)
  if valid_607699 != nil:
    section.add "X-Amz-Signature", valid_607699
  var valid_607700 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607700 = validateParameter(valid_607700, JString, required = false,
                                 default = nil)
  if valid_607700 != nil:
    section.add "X-Amz-Content-Sha256", valid_607700
  var valid_607701 = header.getOrDefault("X-Amz-Date")
  valid_607701 = validateParameter(valid_607701, JString, required = false,
                                 default = nil)
  if valid_607701 != nil:
    section.add "X-Amz-Date", valid_607701
  var valid_607702 = header.getOrDefault("X-Amz-Credential")
  valid_607702 = validateParameter(valid_607702, JString, required = false,
                                 default = nil)
  if valid_607702 != nil:
    section.add "X-Amz-Credential", valid_607702
  var valid_607703 = header.getOrDefault("X-Amz-Security-Token")
  valid_607703 = validateParameter(valid_607703, JString, required = false,
                                 default = nil)
  if valid_607703 != nil:
    section.add "X-Amz-Security-Token", valid_607703
  var valid_607704 = header.getOrDefault("X-Amz-Algorithm")
  valid_607704 = validateParameter(valid_607704, JString, required = false,
                                 default = nil)
  if valid_607704 != nil:
    section.add "X-Amz-Algorithm", valid_607704
  var valid_607705 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607705 = validateParameter(valid_607705, JString, required = false,
                                 default = nil)
  if valid_607705 != nil:
    section.add "X-Amz-SignedHeaders", valid_607705
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607706: Call_GetReorderReceiptRuleSet_607692; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Reorders the receipt rules within a receipt rule set.</p> <note> <p>All of the rules in the rule set must be represented in this request. That is, this API will return an error if the reorder request doesn't explicitly position all of the rules.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_607706.validator(path, query, header, formData, body)
  let scheme = call_607706.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607706.url(scheme.get, call_607706.host, call_607706.base,
                         call_607706.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607706, url, valid)

proc call*(call_607707: Call_GetReorderReceiptRuleSet_607692; RuleSetName: string;
          RuleNames: JsonNode; Action: string = "ReorderReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## getReorderReceiptRuleSet
  ## <p>Reorders the receipt rules within a receipt rule set.</p> <note> <p>All of the rules in the rule set must be represented in this request. That is, this API will return an error if the reorder request doesn't explicitly position all of the rules.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set to reorder.
  ##   RuleNames: JArray (required)
  ##            : A list of the specified receipt rule set's receipt rules in the order that you want to put them.
  ##   Version: string (required)
  var query_607708 = newJObject()
  add(query_607708, "Action", newJString(Action))
  add(query_607708, "RuleSetName", newJString(RuleSetName))
  if RuleNames != nil:
    query_607708.add "RuleNames", RuleNames
  add(query_607708, "Version", newJString(Version))
  result = call_607707.call(nil, query_607708, nil, nil, nil)

var getReorderReceiptRuleSet* = Call_GetReorderReceiptRuleSet_607692(
    name: "getReorderReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=ReorderReceiptRuleSet",
    validator: validate_GetReorderReceiptRuleSet_607693, base: "/",
    url: url_GetReorderReceiptRuleSet_607694, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSendBounce_607750 = ref object of OpenApiRestCall_605589
proc url_PostSendBounce_607752(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSendBounce_607751(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Generates and sends a bounce message to the sender of an email you received through Amazon SES. You can only use this API on an email up to 24 hours after you receive it.</p> <note> <p>You cannot use this API to send generic bounces for mail that was not received by Amazon SES.</p> </note> <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607753 = query.getOrDefault("Action")
  valid_607753 = validateParameter(valid_607753, JString, required = true,
                                 default = newJString("SendBounce"))
  if valid_607753 != nil:
    section.add "Action", valid_607753
  var valid_607754 = query.getOrDefault("Version")
  valid_607754 = validateParameter(valid_607754, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607754 != nil:
    section.add "Version", valid_607754
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607755 = header.getOrDefault("X-Amz-Signature")
  valid_607755 = validateParameter(valid_607755, JString, required = false,
                                 default = nil)
  if valid_607755 != nil:
    section.add "X-Amz-Signature", valid_607755
  var valid_607756 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607756 = validateParameter(valid_607756, JString, required = false,
                                 default = nil)
  if valid_607756 != nil:
    section.add "X-Amz-Content-Sha256", valid_607756
  var valid_607757 = header.getOrDefault("X-Amz-Date")
  valid_607757 = validateParameter(valid_607757, JString, required = false,
                                 default = nil)
  if valid_607757 != nil:
    section.add "X-Amz-Date", valid_607757
  var valid_607758 = header.getOrDefault("X-Amz-Credential")
  valid_607758 = validateParameter(valid_607758, JString, required = false,
                                 default = nil)
  if valid_607758 != nil:
    section.add "X-Amz-Credential", valid_607758
  var valid_607759 = header.getOrDefault("X-Amz-Security-Token")
  valid_607759 = validateParameter(valid_607759, JString, required = false,
                                 default = nil)
  if valid_607759 != nil:
    section.add "X-Amz-Security-Token", valid_607759
  var valid_607760 = header.getOrDefault("X-Amz-Algorithm")
  valid_607760 = validateParameter(valid_607760, JString, required = false,
                                 default = nil)
  if valid_607760 != nil:
    section.add "X-Amz-Algorithm", valid_607760
  var valid_607761 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607761 = validateParameter(valid_607761, JString, required = false,
                                 default = nil)
  if valid_607761 != nil:
    section.add "X-Amz-SignedHeaders", valid_607761
  result.add "header", section
  ## parameters in `formData` object:
  ##   MessageDsn.ExtensionFields: JArray
  ##                             : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## Additional X-headers to include in the DSN.
  ##   BounceSender: JString (required)
  ##               : The address to use in the "From" header of the bounce message. This must be an identity that you have verified with Amazon SES.
  ##   MessageDsn.ReportingMta: JString
  ##                          : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## The reporting MTA that attempted to deliver the message, formatted as specified in <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a> (<code>mta-name-type; mta-name</code>). The default value is <code>dns; inbound-smtp.[region].amazonaws.com</code>.
  ##   OriginalMessageId: JString (required)
  ##                    : The message ID of the message to be bounced.
  ##   BounceSenderArn: JString
  ##                  : This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the address in the "From" header of the bounce. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.
  ##   MessageDsn.ArrivalDate: JString
  ##                         : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## When the message was received by the reporting mail transfer agent (MTA), in <a href="https://www.ietf.org/rfc/rfc0822.txt">RFC 822</a> date-time format.
  ##   BouncedRecipientInfoList: JArray (required)
  ##                           : A list of recipients of the bounced message, including the information required to create the Delivery Status Notifications (DSNs) for the recipients. You must specify at least one <code>BouncedRecipientInfo</code> in the list.
  ##   Explanation: JString
  ##              : Human-readable text for the bounce message to explain the failure. If not specified, the text will be auto-generated based on the bounced recipient information.
  section = newJObject()
  var valid_607762 = formData.getOrDefault("MessageDsn.ExtensionFields")
  valid_607762 = validateParameter(valid_607762, JArray, required = false,
                                 default = nil)
  if valid_607762 != nil:
    section.add "MessageDsn.ExtensionFields", valid_607762
  assert formData != nil,
        "formData argument is necessary due to required `BounceSender` field"
  var valid_607763 = formData.getOrDefault("BounceSender")
  valid_607763 = validateParameter(valid_607763, JString, required = true,
                                 default = nil)
  if valid_607763 != nil:
    section.add "BounceSender", valid_607763
  var valid_607764 = formData.getOrDefault("MessageDsn.ReportingMta")
  valid_607764 = validateParameter(valid_607764, JString, required = false,
                                 default = nil)
  if valid_607764 != nil:
    section.add "MessageDsn.ReportingMta", valid_607764
  var valid_607765 = formData.getOrDefault("OriginalMessageId")
  valid_607765 = validateParameter(valid_607765, JString, required = true,
                                 default = nil)
  if valid_607765 != nil:
    section.add "OriginalMessageId", valid_607765
  var valid_607766 = formData.getOrDefault("BounceSenderArn")
  valid_607766 = validateParameter(valid_607766, JString, required = false,
                                 default = nil)
  if valid_607766 != nil:
    section.add "BounceSenderArn", valid_607766
  var valid_607767 = formData.getOrDefault("MessageDsn.ArrivalDate")
  valid_607767 = validateParameter(valid_607767, JString, required = false,
                                 default = nil)
  if valid_607767 != nil:
    section.add "MessageDsn.ArrivalDate", valid_607767
  var valid_607768 = formData.getOrDefault("BouncedRecipientInfoList")
  valid_607768 = validateParameter(valid_607768, JArray, required = true, default = nil)
  if valid_607768 != nil:
    section.add "BouncedRecipientInfoList", valid_607768
  var valid_607769 = formData.getOrDefault("Explanation")
  valid_607769 = validateParameter(valid_607769, JString, required = false,
                                 default = nil)
  if valid_607769 != nil:
    section.add "Explanation", valid_607769
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607770: Call_PostSendBounce_607750; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Generates and sends a bounce message to the sender of an email you received through Amazon SES. You can only use this API on an email up to 24 hours after you receive it.</p> <note> <p>You cannot use this API to send generic bounces for mail that was not received by Amazon SES.</p> </note> <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_607770.validator(path, query, header, formData, body)
  let scheme = call_607770.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607770.url(scheme.get, call_607770.host, call_607770.base,
                         call_607770.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607770, url, valid)

proc call*(call_607771: Call_PostSendBounce_607750; BounceSender: string;
          OriginalMessageId: string; BouncedRecipientInfoList: JsonNode;
          MessageDsnExtensionFields: JsonNode = nil;
          MessageDsnReportingMta: string = ""; BounceSenderArn: string = "";
          Action: string = "SendBounce"; MessageDsnArrivalDate: string = "";
          Explanation: string = ""; Version: string = "2010-12-01"): Recallable =
  ## postSendBounce
  ## <p>Generates and sends a bounce message to the sender of an email you received through Amazon SES. You can only use this API on an email up to 24 hours after you receive it.</p> <note> <p>You cannot use this API to send generic bounces for mail that was not received by Amazon SES.</p> </note> <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   MessageDsnExtensionFields: JArray
  ##                            : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## Additional X-headers to include in the DSN.
  ##   BounceSender: string (required)
  ##               : The address to use in the "From" header of the bounce message. This must be an identity that you have verified with Amazon SES.
  ##   MessageDsnReportingMta: string
  ##                         : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## The reporting MTA that attempted to deliver the message, formatted as specified in <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a> (<code>mta-name-type; mta-name</code>). The default value is <code>dns; inbound-smtp.[region].amazonaws.com</code>.
  ##   OriginalMessageId: string (required)
  ##                    : The message ID of the message to be bounced.
  ##   BounceSenderArn: string
  ##                  : This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the address in the "From" header of the bounce. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.
  ##   Action: string (required)
  ##   MessageDsnArrivalDate: string
  ##                        : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## When the message was received by the reporting mail transfer agent (MTA), in <a href="https://www.ietf.org/rfc/rfc0822.txt">RFC 822</a> date-time format.
  ##   BouncedRecipientInfoList: JArray (required)
  ##                           : A list of recipients of the bounced message, including the information required to create the Delivery Status Notifications (DSNs) for the recipients. You must specify at least one <code>BouncedRecipientInfo</code> in the list.
  ##   Explanation: string
  ##              : Human-readable text for the bounce message to explain the failure. If not specified, the text will be auto-generated based on the bounced recipient information.
  ##   Version: string (required)
  var query_607772 = newJObject()
  var formData_607773 = newJObject()
  if MessageDsnExtensionFields != nil:
    formData_607773.add "MessageDsn.ExtensionFields", MessageDsnExtensionFields
  add(formData_607773, "BounceSender", newJString(BounceSender))
  add(formData_607773, "MessageDsn.ReportingMta",
      newJString(MessageDsnReportingMta))
  add(formData_607773, "OriginalMessageId", newJString(OriginalMessageId))
  add(formData_607773, "BounceSenderArn", newJString(BounceSenderArn))
  add(query_607772, "Action", newJString(Action))
  add(formData_607773, "MessageDsn.ArrivalDate", newJString(MessageDsnArrivalDate))
  if BouncedRecipientInfoList != nil:
    formData_607773.add "BouncedRecipientInfoList", BouncedRecipientInfoList
  add(formData_607773, "Explanation", newJString(Explanation))
  add(query_607772, "Version", newJString(Version))
  result = call_607771.call(nil, query_607772, nil, formData_607773, nil)

var postSendBounce* = Call_PostSendBounce_607750(name: "postSendBounce",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=SendBounce", validator: validate_PostSendBounce_607751,
    base: "/", url: url_PostSendBounce_607752, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSendBounce_607727 = ref object of OpenApiRestCall_605589
proc url_GetSendBounce_607729(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSendBounce_607728(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates and sends a bounce message to the sender of an email you received through Amazon SES. You can only use this API on an email up to 24 hours after you receive it.</p> <note> <p>You cannot use this API to send generic bounces for mail that was not received by Amazon SES.</p> </note> <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Explanation: JString
  ##              : Human-readable text for the bounce message to explain the failure. If not specified, the text will be auto-generated based on the bounced recipient information.
  ##   BounceSender: JString (required)
  ##               : The address to use in the "From" header of the bounce message. This must be an identity that you have verified with Amazon SES.
  ##   MessageDsn.ReportingMta: JString
  ##                          : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## The reporting MTA that attempted to deliver the message, formatted as specified in <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a> (<code>mta-name-type; mta-name</code>). The default value is <code>dns; inbound-smtp.[region].amazonaws.com</code>.
  ##   OriginalMessageId: JString (required)
  ##                    : The message ID of the message to be bounced.
  ##   Action: JString (required)
  ##   MessageDsn.ArrivalDate: JString
  ##                         : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## When the message was received by the reporting mail transfer agent (MTA), in <a href="https://www.ietf.org/rfc/rfc0822.txt">RFC 822</a> date-time format.
  ##   Version: JString (required)
  ##   BouncedRecipientInfoList: JArray (required)
  ##                           : A list of recipients of the bounced message, including the information required to create the Delivery Status Notifications (DSNs) for the recipients. You must specify at least one <code>BouncedRecipientInfo</code> in the list.
  ##   BounceSenderArn: JString
  ##                  : This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the address in the "From" header of the bounce. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.
  ##   MessageDsn.ExtensionFields: JArray
  ##                             : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## Additional X-headers to include in the DSN.
  section = newJObject()
  var valid_607730 = query.getOrDefault("Explanation")
  valid_607730 = validateParameter(valid_607730, JString, required = false,
                                 default = nil)
  if valid_607730 != nil:
    section.add "Explanation", valid_607730
  assert query != nil,
        "query argument is necessary due to required `BounceSender` field"
  var valid_607731 = query.getOrDefault("BounceSender")
  valid_607731 = validateParameter(valid_607731, JString, required = true,
                                 default = nil)
  if valid_607731 != nil:
    section.add "BounceSender", valid_607731
  var valid_607732 = query.getOrDefault("MessageDsn.ReportingMta")
  valid_607732 = validateParameter(valid_607732, JString, required = false,
                                 default = nil)
  if valid_607732 != nil:
    section.add "MessageDsn.ReportingMta", valid_607732
  var valid_607733 = query.getOrDefault("OriginalMessageId")
  valid_607733 = validateParameter(valid_607733, JString, required = true,
                                 default = nil)
  if valid_607733 != nil:
    section.add "OriginalMessageId", valid_607733
  var valid_607734 = query.getOrDefault("Action")
  valid_607734 = validateParameter(valid_607734, JString, required = true,
                                 default = newJString("SendBounce"))
  if valid_607734 != nil:
    section.add "Action", valid_607734
  var valid_607735 = query.getOrDefault("MessageDsn.ArrivalDate")
  valid_607735 = validateParameter(valid_607735, JString, required = false,
                                 default = nil)
  if valid_607735 != nil:
    section.add "MessageDsn.ArrivalDate", valid_607735
  var valid_607736 = query.getOrDefault("Version")
  valid_607736 = validateParameter(valid_607736, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607736 != nil:
    section.add "Version", valid_607736
  var valid_607737 = query.getOrDefault("BouncedRecipientInfoList")
  valid_607737 = validateParameter(valid_607737, JArray, required = true, default = nil)
  if valid_607737 != nil:
    section.add "BouncedRecipientInfoList", valid_607737
  var valid_607738 = query.getOrDefault("BounceSenderArn")
  valid_607738 = validateParameter(valid_607738, JString, required = false,
                                 default = nil)
  if valid_607738 != nil:
    section.add "BounceSenderArn", valid_607738
  var valid_607739 = query.getOrDefault("MessageDsn.ExtensionFields")
  valid_607739 = validateParameter(valid_607739, JArray, required = false,
                                 default = nil)
  if valid_607739 != nil:
    section.add "MessageDsn.ExtensionFields", valid_607739
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607740 = header.getOrDefault("X-Amz-Signature")
  valid_607740 = validateParameter(valid_607740, JString, required = false,
                                 default = nil)
  if valid_607740 != nil:
    section.add "X-Amz-Signature", valid_607740
  var valid_607741 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607741 = validateParameter(valid_607741, JString, required = false,
                                 default = nil)
  if valid_607741 != nil:
    section.add "X-Amz-Content-Sha256", valid_607741
  var valid_607742 = header.getOrDefault("X-Amz-Date")
  valid_607742 = validateParameter(valid_607742, JString, required = false,
                                 default = nil)
  if valid_607742 != nil:
    section.add "X-Amz-Date", valid_607742
  var valid_607743 = header.getOrDefault("X-Amz-Credential")
  valid_607743 = validateParameter(valid_607743, JString, required = false,
                                 default = nil)
  if valid_607743 != nil:
    section.add "X-Amz-Credential", valid_607743
  var valid_607744 = header.getOrDefault("X-Amz-Security-Token")
  valid_607744 = validateParameter(valid_607744, JString, required = false,
                                 default = nil)
  if valid_607744 != nil:
    section.add "X-Amz-Security-Token", valid_607744
  var valid_607745 = header.getOrDefault("X-Amz-Algorithm")
  valid_607745 = validateParameter(valid_607745, JString, required = false,
                                 default = nil)
  if valid_607745 != nil:
    section.add "X-Amz-Algorithm", valid_607745
  var valid_607746 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607746 = validateParameter(valid_607746, JString, required = false,
                                 default = nil)
  if valid_607746 != nil:
    section.add "X-Amz-SignedHeaders", valid_607746
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607747: Call_GetSendBounce_607727; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Generates and sends a bounce message to the sender of an email you received through Amazon SES. You can only use this API on an email up to 24 hours after you receive it.</p> <note> <p>You cannot use this API to send generic bounces for mail that was not received by Amazon SES.</p> </note> <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_607747.validator(path, query, header, formData, body)
  let scheme = call_607747.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607747.url(scheme.get, call_607747.host, call_607747.base,
                         call_607747.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607747, url, valid)

proc call*(call_607748: Call_GetSendBounce_607727; BounceSender: string;
          OriginalMessageId: string; BouncedRecipientInfoList: JsonNode;
          Explanation: string = ""; MessageDsnReportingMta: string = "";
          Action: string = "SendBounce"; MessageDsnArrivalDate: string = "";
          Version: string = "2010-12-01"; BounceSenderArn: string = "";
          MessageDsnExtensionFields: JsonNode = nil): Recallable =
  ## getSendBounce
  ## <p>Generates and sends a bounce message to the sender of an email you received through Amazon SES. You can only use this API on an email up to 24 hours after you receive it.</p> <note> <p>You cannot use this API to send generic bounces for mail that was not received by Amazon SES.</p> </note> <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Explanation: string
  ##              : Human-readable text for the bounce message to explain the failure. If not specified, the text will be auto-generated based on the bounced recipient information.
  ##   BounceSender: string (required)
  ##               : The address to use in the "From" header of the bounce message. This must be an identity that you have verified with Amazon SES.
  ##   MessageDsnReportingMta: string
  ##                         : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## The reporting MTA that attempted to deliver the message, formatted as specified in <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a> (<code>mta-name-type; mta-name</code>). The default value is <code>dns; inbound-smtp.[region].amazonaws.com</code>.
  ##   OriginalMessageId: string (required)
  ##                    : The message ID of the message to be bounced.
  ##   Action: string (required)
  ##   MessageDsnArrivalDate: string
  ##                        : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## When the message was received by the reporting mail transfer agent (MTA), in <a href="https://www.ietf.org/rfc/rfc0822.txt">RFC 822</a> date-time format.
  ##   Version: string (required)
  ##   BouncedRecipientInfoList: JArray (required)
  ##                           : A list of recipients of the bounced message, including the information required to create the Delivery Status Notifications (DSNs) for the recipients. You must specify at least one <code>BouncedRecipientInfo</code> in the list.
  ##   BounceSenderArn: string
  ##                  : This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the address in the "From" header of the bounce. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.
  ##   MessageDsnExtensionFields: JArray
  ##                            : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## Additional X-headers to include in the DSN.
  var query_607749 = newJObject()
  add(query_607749, "Explanation", newJString(Explanation))
  add(query_607749, "BounceSender", newJString(BounceSender))
  add(query_607749, "MessageDsn.ReportingMta", newJString(MessageDsnReportingMta))
  add(query_607749, "OriginalMessageId", newJString(OriginalMessageId))
  add(query_607749, "Action", newJString(Action))
  add(query_607749, "MessageDsn.ArrivalDate", newJString(MessageDsnArrivalDate))
  add(query_607749, "Version", newJString(Version))
  if BouncedRecipientInfoList != nil:
    query_607749.add "BouncedRecipientInfoList", BouncedRecipientInfoList
  add(query_607749, "BounceSenderArn", newJString(BounceSenderArn))
  if MessageDsnExtensionFields != nil:
    query_607749.add "MessageDsn.ExtensionFields", MessageDsnExtensionFields
  result = call_607748.call(nil, query_607749, nil, nil, nil)

var getSendBounce* = Call_GetSendBounce_607727(name: "getSendBounce",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=SendBounce", validator: validate_GetSendBounce_607728,
    base: "/", url: url_GetSendBounce_607729, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSendBulkTemplatedEmail_607800 = ref object of OpenApiRestCall_605589
proc url_PostSendBulkTemplatedEmail_607802(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSendBulkTemplatedEmail_607801(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Composes an email message to multiple destinations. The message body is created using an email template.</p> <p>In order to send email using the <code>SendBulkTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Each <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendBulkTemplatedEmail</code> operation several times to send the message to each group.</p> </li> <li> <p>The number of destinations you can contact in a single call to the API may be limited by your account's maximum sending rate.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607803 = query.getOrDefault("Action")
  valid_607803 = validateParameter(valid_607803, JString, required = true,
                                 default = newJString("SendBulkTemplatedEmail"))
  if valid_607803 != nil:
    section.add "Action", valid_607803
  var valid_607804 = query.getOrDefault("Version")
  valid_607804 = validateParameter(valid_607804, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607804 != nil:
    section.add "Version", valid_607804
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607805 = header.getOrDefault("X-Amz-Signature")
  valid_607805 = validateParameter(valid_607805, JString, required = false,
                                 default = nil)
  if valid_607805 != nil:
    section.add "X-Amz-Signature", valid_607805
  var valid_607806 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607806 = validateParameter(valid_607806, JString, required = false,
                                 default = nil)
  if valid_607806 != nil:
    section.add "X-Amz-Content-Sha256", valid_607806
  var valid_607807 = header.getOrDefault("X-Amz-Date")
  valid_607807 = validateParameter(valid_607807, JString, required = false,
                                 default = nil)
  if valid_607807 != nil:
    section.add "X-Amz-Date", valid_607807
  var valid_607808 = header.getOrDefault("X-Amz-Credential")
  valid_607808 = validateParameter(valid_607808, JString, required = false,
                                 default = nil)
  if valid_607808 != nil:
    section.add "X-Amz-Credential", valid_607808
  var valid_607809 = header.getOrDefault("X-Amz-Security-Token")
  valid_607809 = validateParameter(valid_607809, JString, required = false,
                                 default = nil)
  if valid_607809 != nil:
    section.add "X-Amz-Security-Token", valid_607809
  var valid_607810 = header.getOrDefault("X-Amz-Algorithm")
  valid_607810 = validateParameter(valid_607810, JString, required = false,
                                 default = nil)
  if valid_607810 != nil:
    section.add "X-Amz-Algorithm", valid_607810
  var valid_607811 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607811 = validateParameter(valid_607811, JString, required = false,
                                 default = nil)
  if valid_607811 != nil:
    section.add "X-Amz-SignedHeaders", valid_607811
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Source: JString (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   DefaultTemplateData: JString
  ##                      : <p>A list of replacement values to apply to the template when replacement data is not specified in a Destination object. These values act as a default or fallback option when no other data is available.</p> <p>The template data is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.</p>
  ##   TemplateArn: JString
  ##              : The ARN of the template to use when sending this email.
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Destinations: JArray (required)
  ##               : One or more <code>Destination</code> objects. All of the recipients in a <code>Destination</code> will receive the same version of the email. You can specify up to 50 <code>Destination</code> objects within a <code>Destinations</code> array.
  ##   ReturnPath: JString
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   DefaultTags: JArray
  ##              : A list of tags, in the form of name/value pairs, to apply to an email that you send to a destination using <code>SendBulkTemplatedEmail</code>.
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendBulkTemplatedEmail</code>.
  ##   Template: JString (required)
  ##           : The template to use when sending this email.
  section = newJObject()
  var valid_607812 = formData.getOrDefault("ReturnPathArn")
  valid_607812 = validateParameter(valid_607812, JString, required = false,
                                 default = nil)
  if valid_607812 != nil:
    section.add "ReturnPathArn", valid_607812
  assert formData != nil,
        "formData argument is necessary due to required `Source` field"
  var valid_607813 = formData.getOrDefault("Source")
  valid_607813 = validateParameter(valid_607813, JString, required = true,
                                 default = nil)
  if valid_607813 != nil:
    section.add "Source", valid_607813
  var valid_607814 = formData.getOrDefault("DefaultTemplateData")
  valid_607814 = validateParameter(valid_607814, JString, required = false,
                                 default = nil)
  if valid_607814 != nil:
    section.add "DefaultTemplateData", valid_607814
  var valid_607815 = formData.getOrDefault("TemplateArn")
  valid_607815 = validateParameter(valid_607815, JString, required = false,
                                 default = nil)
  if valid_607815 != nil:
    section.add "TemplateArn", valid_607815
  var valid_607816 = formData.getOrDefault("SourceArn")
  valid_607816 = validateParameter(valid_607816, JString, required = false,
                                 default = nil)
  if valid_607816 != nil:
    section.add "SourceArn", valid_607816
  var valid_607817 = formData.getOrDefault("ReplyToAddresses")
  valid_607817 = validateParameter(valid_607817, JArray, required = false,
                                 default = nil)
  if valid_607817 != nil:
    section.add "ReplyToAddresses", valid_607817
  var valid_607818 = formData.getOrDefault("Destinations")
  valid_607818 = validateParameter(valid_607818, JArray, required = true, default = nil)
  if valid_607818 != nil:
    section.add "Destinations", valid_607818
  var valid_607819 = formData.getOrDefault("ReturnPath")
  valid_607819 = validateParameter(valid_607819, JString, required = false,
                                 default = nil)
  if valid_607819 != nil:
    section.add "ReturnPath", valid_607819
  var valid_607820 = formData.getOrDefault("DefaultTags")
  valid_607820 = validateParameter(valid_607820, JArray, required = false,
                                 default = nil)
  if valid_607820 != nil:
    section.add "DefaultTags", valid_607820
  var valid_607821 = formData.getOrDefault("ConfigurationSetName")
  valid_607821 = validateParameter(valid_607821, JString, required = false,
                                 default = nil)
  if valid_607821 != nil:
    section.add "ConfigurationSetName", valid_607821
  var valid_607822 = formData.getOrDefault("Template")
  valid_607822 = validateParameter(valid_607822, JString, required = true,
                                 default = nil)
  if valid_607822 != nil:
    section.add "Template", valid_607822
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607823: Call_PostSendBulkTemplatedEmail_607800; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message to multiple destinations. The message body is created using an email template.</p> <p>In order to send email using the <code>SendBulkTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Each <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendBulkTemplatedEmail</code> operation several times to send the message to each group.</p> </li> <li> <p>The number of destinations you can contact in a single call to the API may be limited by your account's maximum sending rate.</p> </li> </ul>
  ## 
  let valid = call_607823.validator(path, query, header, formData, body)
  let scheme = call_607823.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607823.url(scheme.get, call_607823.host, call_607823.base,
                         call_607823.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607823, url, valid)

proc call*(call_607824: Call_PostSendBulkTemplatedEmail_607800; Source: string;
          Destinations: JsonNode; Template: string; ReturnPathArn: string = "";
          DefaultTemplateData: string = ""; TemplateArn: string = "";
          SourceArn: string = ""; ReplyToAddresses: JsonNode = nil;
          Action: string = "SendBulkTemplatedEmail"; ReturnPath: string = "";
          DefaultTags: JsonNode = nil; ConfigurationSetName: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## postSendBulkTemplatedEmail
  ## <p>Composes an email message to multiple destinations. The message body is created using an email template.</p> <p>In order to send email using the <code>SendBulkTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Each <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendBulkTemplatedEmail</code> operation several times to send the message to each group.</p> </li> <li> <p>The number of destinations you can contact in a single call to the API may be limited by your account's maximum sending rate.</p> </li> </ul>
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Source: string (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   DefaultTemplateData: string
  ##                      : <p>A list of replacement values to apply to the template when replacement data is not specified in a Destination object. These values act as a default or fallback option when no other data is available.</p> <p>The template data is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.</p>
  ##   TemplateArn: string
  ##              : The ARN of the template to use when sending this email.
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Destinations: JArray (required)
  ##               : One or more <code>Destination</code> objects. All of the recipients in a <code>Destination</code> will receive the same version of the email. You can specify up to 50 <code>Destination</code> objects within a <code>Destinations</code> array.
  ##   Action: string (required)
  ##   ReturnPath: string
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   DefaultTags: JArray
  ##              : A list of tags, in the form of name/value pairs, to apply to an email that you send to a destination using <code>SendBulkTemplatedEmail</code>.
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendBulkTemplatedEmail</code>.
  ##   Template: string (required)
  ##           : The template to use when sending this email.
  ##   Version: string (required)
  var query_607825 = newJObject()
  var formData_607826 = newJObject()
  add(formData_607826, "ReturnPathArn", newJString(ReturnPathArn))
  add(formData_607826, "Source", newJString(Source))
  add(formData_607826, "DefaultTemplateData", newJString(DefaultTemplateData))
  add(formData_607826, "TemplateArn", newJString(TemplateArn))
  add(formData_607826, "SourceArn", newJString(SourceArn))
  if ReplyToAddresses != nil:
    formData_607826.add "ReplyToAddresses", ReplyToAddresses
  if Destinations != nil:
    formData_607826.add "Destinations", Destinations
  add(query_607825, "Action", newJString(Action))
  add(formData_607826, "ReturnPath", newJString(ReturnPath))
  if DefaultTags != nil:
    formData_607826.add "DefaultTags", DefaultTags
  add(formData_607826, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_607826, "Template", newJString(Template))
  add(query_607825, "Version", newJString(Version))
  result = call_607824.call(nil, query_607825, nil, formData_607826, nil)

var postSendBulkTemplatedEmail* = Call_PostSendBulkTemplatedEmail_607800(
    name: "postSendBulkTemplatedEmail", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SendBulkTemplatedEmail",
    validator: validate_PostSendBulkTemplatedEmail_607801, base: "/",
    url: url_PostSendBulkTemplatedEmail_607802,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSendBulkTemplatedEmail_607774 = ref object of OpenApiRestCall_605589
proc url_GetSendBulkTemplatedEmail_607776(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSendBulkTemplatedEmail_607775(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Composes an email message to multiple destinations. The message body is created using an email template.</p> <p>In order to send email using the <code>SendBulkTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Each <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendBulkTemplatedEmail</code> operation several times to send the message to each group.</p> </li> <li> <p>The number of destinations you can contact in a single call to the API may be limited by your account's maximum sending rate.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Destinations: JArray (required)
  ##               : One or more <code>Destination</code> objects. All of the recipients in a <code>Destination</code> will receive the same version of the email. You can specify up to 50 <code>Destination</code> objects within a <code>Destinations</code> array.
  ##   ReturnPath: JString
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   Source: JString (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendBulkTemplatedEmail</code>.
  ##   DefaultTemplateData: JString
  ##                      : <p>A list of replacement values to apply to the template when replacement data is not specified in a Destination object. These values act as a default or fallback option when no other data is available.</p> <p>The template data is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.</p>
  ##   Template: JString (required)
  ##           : The template to use when sending this email.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   DefaultTags: JArray
  ##              : A list of tags, in the form of name/value pairs, to apply to an email that you send to a destination using <code>SendBulkTemplatedEmail</code>.
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   TemplateArn: JString
  ##              : The ARN of the template to use when sending this email.
  section = newJObject()
  var valid_607777 = query.getOrDefault("SourceArn")
  valid_607777 = validateParameter(valid_607777, JString, required = false,
                                 default = nil)
  if valid_607777 != nil:
    section.add "SourceArn", valid_607777
  assert query != nil,
        "query argument is necessary due to required `Destinations` field"
  var valid_607778 = query.getOrDefault("Destinations")
  valid_607778 = validateParameter(valid_607778, JArray, required = true, default = nil)
  if valid_607778 != nil:
    section.add "Destinations", valid_607778
  var valid_607779 = query.getOrDefault("ReturnPath")
  valid_607779 = validateParameter(valid_607779, JString, required = false,
                                 default = nil)
  if valid_607779 != nil:
    section.add "ReturnPath", valid_607779
  var valid_607780 = query.getOrDefault("Source")
  valid_607780 = validateParameter(valid_607780, JString, required = true,
                                 default = nil)
  if valid_607780 != nil:
    section.add "Source", valid_607780
  var valid_607781 = query.getOrDefault("ConfigurationSetName")
  valid_607781 = validateParameter(valid_607781, JString, required = false,
                                 default = nil)
  if valid_607781 != nil:
    section.add "ConfigurationSetName", valid_607781
  var valid_607782 = query.getOrDefault("DefaultTemplateData")
  valid_607782 = validateParameter(valid_607782, JString, required = false,
                                 default = nil)
  if valid_607782 != nil:
    section.add "DefaultTemplateData", valid_607782
  var valid_607783 = query.getOrDefault("Template")
  valid_607783 = validateParameter(valid_607783, JString, required = true,
                                 default = nil)
  if valid_607783 != nil:
    section.add "Template", valid_607783
  var valid_607784 = query.getOrDefault("Action")
  valid_607784 = validateParameter(valid_607784, JString, required = true,
                                 default = newJString("SendBulkTemplatedEmail"))
  if valid_607784 != nil:
    section.add "Action", valid_607784
  var valid_607785 = query.getOrDefault("Version")
  valid_607785 = validateParameter(valid_607785, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607785 != nil:
    section.add "Version", valid_607785
  var valid_607786 = query.getOrDefault("ReturnPathArn")
  valid_607786 = validateParameter(valid_607786, JString, required = false,
                                 default = nil)
  if valid_607786 != nil:
    section.add "ReturnPathArn", valid_607786
  var valid_607787 = query.getOrDefault("DefaultTags")
  valid_607787 = validateParameter(valid_607787, JArray, required = false,
                                 default = nil)
  if valid_607787 != nil:
    section.add "DefaultTags", valid_607787
  var valid_607788 = query.getOrDefault("ReplyToAddresses")
  valid_607788 = validateParameter(valid_607788, JArray, required = false,
                                 default = nil)
  if valid_607788 != nil:
    section.add "ReplyToAddresses", valid_607788
  var valid_607789 = query.getOrDefault("TemplateArn")
  valid_607789 = validateParameter(valid_607789, JString, required = false,
                                 default = nil)
  if valid_607789 != nil:
    section.add "TemplateArn", valid_607789
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607790 = header.getOrDefault("X-Amz-Signature")
  valid_607790 = validateParameter(valid_607790, JString, required = false,
                                 default = nil)
  if valid_607790 != nil:
    section.add "X-Amz-Signature", valid_607790
  var valid_607791 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607791 = validateParameter(valid_607791, JString, required = false,
                                 default = nil)
  if valid_607791 != nil:
    section.add "X-Amz-Content-Sha256", valid_607791
  var valid_607792 = header.getOrDefault("X-Amz-Date")
  valid_607792 = validateParameter(valid_607792, JString, required = false,
                                 default = nil)
  if valid_607792 != nil:
    section.add "X-Amz-Date", valid_607792
  var valid_607793 = header.getOrDefault("X-Amz-Credential")
  valid_607793 = validateParameter(valid_607793, JString, required = false,
                                 default = nil)
  if valid_607793 != nil:
    section.add "X-Amz-Credential", valid_607793
  var valid_607794 = header.getOrDefault("X-Amz-Security-Token")
  valid_607794 = validateParameter(valid_607794, JString, required = false,
                                 default = nil)
  if valid_607794 != nil:
    section.add "X-Amz-Security-Token", valid_607794
  var valid_607795 = header.getOrDefault("X-Amz-Algorithm")
  valid_607795 = validateParameter(valid_607795, JString, required = false,
                                 default = nil)
  if valid_607795 != nil:
    section.add "X-Amz-Algorithm", valid_607795
  var valid_607796 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607796 = validateParameter(valid_607796, JString, required = false,
                                 default = nil)
  if valid_607796 != nil:
    section.add "X-Amz-SignedHeaders", valid_607796
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607797: Call_GetSendBulkTemplatedEmail_607774; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message to multiple destinations. The message body is created using an email template.</p> <p>In order to send email using the <code>SendBulkTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Each <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendBulkTemplatedEmail</code> operation several times to send the message to each group.</p> </li> <li> <p>The number of destinations you can contact in a single call to the API may be limited by your account's maximum sending rate.</p> </li> </ul>
  ## 
  let valid = call_607797.validator(path, query, header, formData, body)
  let scheme = call_607797.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607797.url(scheme.get, call_607797.host, call_607797.base,
                         call_607797.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607797, url, valid)

proc call*(call_607798: Call_GetSendBulkTemplatedEmail_607774;
          Destinations: JsonNode; Source: string; Template: string;
          SourceArn: string = ""; ReturnPath: string = "";
          ConfigurationSetName: string = ""; DefaultTemplateData: string = "";
          Action: string = "SendBulkTemplatedEmail"; Version: string = "2010-12-01";
          ReturnPathArn: string = ""; DefaultTags: JsonNode = nil;
          ReplyToAddresses: JsonNode = nil; TemplateArn: string = ""): Recallable =
  ## getSendBulkTemplatedEmail
  ## <p>Composes an email message to multiple destinations. The message body is created using an email template.</p> <p>In order to send email using the <code>SendBulkTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Each <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendBulkTemplatedEmail</code> operation several times to send the message to each group.</p> </li> <li> <p>The number of destinations you can contact in a single call to the API may be limited by your account's maximum sending rate.</p> </li> </ul>
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Destinations: JArray (required)
  ##               : One or more <code>Destination</code> objects. All of the recipients in a <code>Destination</code> will receive the same version of the email. You can specify up to 50 <code>Destination</code> objects within a <code>Destinations</code> array.
  ##   ReturnPath: string
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   Source: string (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendBulkTemplatedEmail</code>.
  ##   DefaultTemplateData: string
  ##                      : <p>A list of replacement values to apply to the template when replacement data is not specified in a Destination object. These values act as a default or fallback option when no other data is available.</p> <p>The template data is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.</p>
  ##   Template: string (required)
  ##           : The template to use when sending this email.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   DefaultTags: JArray
  ##              : A list of tags, in the form of name/value pairs, to apply to an email that you send to a destination using <code>SendBulkTemplatedEmail</code>.
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   TemplateArn: string
  ##              : The ARN of the template to use when sending this email.
  var query_607799 = newJObject()
  add(query_607799, "SourceArn", newJString(SourceArn))
  if Destinations != nil:
    query_607799.add "Destinations", Destinations
  add(query_607799, "ReturnPath", newJString(ReturnPath))
  add(query_607799, "Source", newJString(Source))
  add(query_607799, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_607799, "DefaultTemplateData", newJString(DefaultTemplateData))
  add(query_607799, "Template", newJString(Template))
  add(query_607799, "Action", newJString(Action))
  add(query_607799, "Version", newJString(Version))
  add(query_607799, "ReturnPathArn", newJString(ReturnPathArn))
  if DefaultTags != nil:
    query_607799.add "DefaultTags", DefaultTags
  if ReplyToAddresses != nil:
    query_607799.add "ReplyToAddresses", ReplyToAddresses
  add(query_607799, "TemplateArn", newJString(TemplateArn))
  result = call_607798.call(nil, query_607799, nil, nil, nil)

var getSendBulkTemplatedEmail* = Call_GetSendBulkTemplatedEmail_607774(
    name: "getSendBulkTemplatedEmail", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SendBulkTemplatedEmail",
    validator: validate_GetSendBulkTemplatedEmail_607775, base: "/",
    url: url_GetSendBulkTemplatedEmail_607776,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSendCustomVerificationEmail_607845 = ref object of OpenApiRestCall_605589
proc url_PostSendCustomVerificationEmail_607847(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSendCustomVerificationEmail_607846(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address.</p> <p>To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607848 = query.getOrDefault("Action")
  valid_607848 = validateParameter(valid_607848, JString, required = true, default = newJString(
      "SendCustomVerificationEmail"))
  if valid_607848 != nil:
    section.add "Action", valid_607848
  var valid_607849 = query.getOrDefault("Version")
  valid_607849 = validateParameter(valid_607849, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607849 != nil:
    section.add "Version", valid_607849
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607850 = header.getOrDefault("X-Amz-Signature")
  valid_607850 = validateParameter(valid_607850, JString, required = false,
                                 default = nil)
  if valid_607850 != nil:
    section.add "X-Amz-Signature", valid_607850
  var valid_607851 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607851 = validateParameter(valid_607851, JString, required = false,
                                 default = nil)
  if valid_607851 != nil:
    section.add "X-Amz-Content-Sha256", valid_607851
  var valid_607852 = header.getOrDefault("X-Amz-Date")
  valid_607852 = validateParameter(valid_607852, JString, required = false,
                                 default = nil)
  if valid_607852 != nil:
    section.add "X-Amz-Date", valid_607852
  var valid_607853 = header.getOrDefault("X-Amz-Credential")
  valid_607853 = validateParameter(valid_607853, JString, required = false,
                                 default = nil)
  if valid_607853 != nil:
    section.add "X-Amz-Credential", valid_607853
  var valid_607854 = header.getOrDefault("X-Amz-Security-Token")
  valid_607854 = validateParameter(valid_607854, JString, required = false,
                                 default = nil)
  if valid_607854 != nil:
    section.add "X-Amz-Security-Token", valid_607854
  var valid_607855 = header.getOrDefault("X-Amz-Algorithm")
  valid_607855 = validateParameter(valid_607855, JString, required = false,
                                 default = nil)
  if valid_607855 != nil:
    section.add "X-Amz-Algorithm", valid_607855
  var valid_607856 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607856 = validateParameter(valid_607856, JString, required = false,
                                 default = nil)
  if valid_607856 != nil:
    section.add "X-Amz-SignedHeaders", valid_607856
  result.add "header", section
  ## parameters in `formData` object:
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template to use when sending the verification email.
  ##   ConfigurationSetName: JString
  ##                       : Name of a configuration set to use when sending the verification email.
  ##   EmailAddress: JString (required)
  ##               : The email address to verify.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TemplateName` field"
  var valid_607857 = formData.getOrDefault("TemplateName")
  valid_607857 = validateParameter(valid_607857, JString, required = true,
                                 default = nil)
  if valid_607857 != nil:
    section.add "TemplateName", valid_607857
  var valid_607858 = formData.getOrDefault("ConfigurationSetName")
  valid_607858 = validateParameter(valid_607858, JString, required = false,
                                 default = nil)
  if valid_607858 != nil:
    section.add "ConfigurationSetName", valid_607858
  var valid_607859 = formData.getOrDefault("EmailAddress")
  valid_607859 = validateParameter(valid_607859, JString, required = true,
                                 default = nil)
  if valid_607859 != nil:
    section.add "EmailAddress", valid_607859
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607860: Call_PostSendCustomVerificationEmail_607845;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address.</p> <p>To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_607860.validator(path, query, header, formData, body)
  let scheme = call_607860.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607860.url(scheme.get, call_607860.host, call_607860.base,
                         call_607860.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607860, url, valid)

proc call*(call_607861: Call_PostSendCustomVerificationEmail_607845;
          TemplateName: string; EmailAddress: string;
          Action: string = "SendCustomVerificationEmail";
          ConfigurationSetName: string = ""; Version: string = "2010-12-01"): Recallable =
  ## postSendCustomVerificationEmail
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address.</p> <p>To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template to use when sending the verification email.
  ##   Action: string (required)
  ##   ConfigurationSetName: string
  ##                       : Name of a configuration set to use when sending the verification email.
  ##   Version: string (required)
  ##   EmailAddress: string (required)
  ##               : The email address to verify.
  var query_607862 = newJObject()
  var formData_607863 = newJObject()
  add(formData_607863, "TemplateName", newJString(TemplateName))
  add(query_607862, "Action", newJString(Action))
  add(formData_607863, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_607862, "Version", newJString(Version))
  add(formData_607863, "EmailAddress", newJString(EmailAddress))
  result = call_607861.call(nil, query_607862, nil, formData_607863, nil)

var postSendCustomVerificationEmail* = Call_PostSendCustomVerificationEmail_607845(
    name: "postSendCustomVerificationEmail", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SendCustomVerificationEmail",
    validator: validate_PostSendCustomVerificationEmail_607846, base: "/",
    url: url_PostSendCustomVerificationEmail_607847,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSendCustomVerificationEmail_607827 = ref object of OpenApiRestCall_605589
proc url_GetSendCustomVerificationEmail_607829(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSendCustomVerificationEmail_607828(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address.</p> <p>To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ConfigurationSetName: JString
  ##                       : Name of a configuration set to use when sending the verification email.
  ##   Action: JString (required)
  ##   EmailAddress: JString (required)
  ##               : The email address to verify.
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template to use when sending the verification email.
  ##   Version: JString (required)
  section = newJObject()
  var valid_607830 = query.getOrDefault("ConfigurationSetName")
  valid_607830 = validateParameter(valid_607830, JString, required = false,
                                 default = nil)
  if valid_607830 != nil:
    section.add "ConfigurationSetName", valid_607830
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607831 = query.getOrDefault("Action")
  valid_607831 = validateParameter(valid_607831, JString, required = true, default = newJString(
      "SendCustomVerificationEmail"))
  if valid_607831 != nil:
    section.add "Action", valid_607831
  var valid_607832 = query.getOrDefault("EmailAddress")
  valid_607832 = validateParameter(valid_607832, JString, required = true,
                                 default = nil)
  if valid_607832 != nil:
    section.add "EmailAddress", valid_607832
  var valid_607833 = query.getOrDefault("TemplateName")
  valid_607833 = validateParameter(valid_607833, JString, required = true,
                                 default = nil)
  if valid_607833 != nil:
    section.add "TemplateName", valid_607833
  var valid_607834 = query.getOrDefault("Version")
  valid_607834 = validateParameter(valid_607834, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607834 != nil:
    section.add "Version", valid_607834
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607835 = header.getOrDefault("X-Amz-Signature")
  valid_607835 = validateParameter(valid_607835, JString, required = false,
                                 default = nil)
  if valid_607835 != nil:
    section.add "X-Amz-Signature", valid_607835
  var valid_607836 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607836 = validateParameter(valid_607836, JString, required = false,
                                 default = nil)
  if valid_607836 != nil:
    section.add "X-Amz-Content-Sha256", valid_607836
  var valid_607837 = header.getOrDefault("X-Amz-Date")
  valid_607837 = validateParameter(valid_607837, JString, required = false,
                                 default = nil)
  if valid_607837 != nil:
    section.add "X-Amz-Date", valid_607837
  var valid_607838 = header.getOrDefault("X-Amz-Credential")
  valid_607838 = validateParameter(valid_607838, JString, required = false,
                                 default = nil)
  if valid_607838 != nil:
    section.add "X-Amz-Credential", valid_607838
  var valid_607839 = header.getOrDefault("X-Amz-Security-Token")
  valid_607839 = validateParameter(valid_607839, JString, required = false,
                                 default = nil)
  if valid_607839 != nil:
    section.add "X-Amz-Security-Token", valid_607839
  var valid_607840 = header.getOrDefault("X-Amz-Algorithm")
  valid_607840 = validateParameter(valid_607840, JString, required = false,
                                 default = nil)
  if valid_607840 != nil:
    section.add "X-Amz-Algorithm", valid_607840
  var valid_607841 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607841 = validateParameter(valid_607841, JString, required = false,
                                 default = nil)
  if valid_607841 != nil:
    section.add "X-Amz-SignedHeaders", valid_607841
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607842: Call_GetSendCustomVerificationEmail_607827; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address.</p> <p>To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_607842.validator(path, query, header, formData, body)
  let scheme = call_607842.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607842.url(scheme.get, call_607842.host, call_607842.base,
                         call_607842.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607842, url, valid)

proc call*(call_607843: Call_GetSendCustomVerificationEmail_607827;
          EmailAddress: string; TemplateName: string;
          ConfigurationSetName: string = "";
          Action: string = "SendCustomVerificationEmail";
          Version: string = "2010-12-01"): Recallable =
  ## getSendCustomVerificationEmail
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address.</p> <p>To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string
  ##                       : Name of a configuration set to use when sending the verification email.
  ##   Action: string (required)
  ##   EmailAddress: string (required)
  ##               : The email address to verify.
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template to use when sending the verification email.
  ##   Version: string (required)
  var query_607844 = newJObject()
  add(query_607844, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_607844, "Action", newJString(Action))
  add(query_607844, "EmailAddress", newJString(EmailAddress))
  add(query_607844, "TemplateName", newJString(TemplateName))
  add(query_607844, "Version", newJString(Version))
  result = call_607843.call(nil, query_607844, nil, nil, nil)

var getSendCustomVerificationEmail* = Call_GetSendCustomVerificationEmail_607827(
    name: "getSendCustomVerificationEmail", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SendCustomVerificationEmail",
    validator: validate_GetSendCustomVerificationEmail_607828, base: "/",
    url: url_GetSendCustomVerificationEmail_607829,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSendEmail_607891 = ref object of OpenApiRestCall_605589
proc url_PostSendEmail_607893(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSendEmail_607892(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Composes an email message and immediately queues it for sending. In order to send email using the <code>SendEmail</code> operation, your message must meet the following requirements:</p> <ul> <li> <p>The message must be sent from a verified email address or domain. If you attempt to send email using a non-verified address or domain, the operation will result in an "Email address not verified" error. </p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>The message must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendEmail</code> operation several times to send the message to each group.</p> </li> </ul> <important> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607894 = query.getOrDefault("Action")
  valid_607894 = validateParameter(valid_607894, JString, required = true,
                                 default = newJString("SendEmail"))
  if valid_607894 != nil:
    section.add "Action", valid_607894
  var valid_607895 = query.getOrDefault("Version")
  valid_607895 = validateParameter(valid_607895, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607895 != nil:
    section.add "Version", valid_607895
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607896 = header.getOrDefault("X-Amz-Signature")
  valid_607896 = validateParameter(valid_607896, JString, required = false,
                                 default = nil)
  if valid_607896 != nil:
    section.add "X-Amz-Signature", valid_607896
  var valid_607897 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607897 = validateParameter(valid_607897, JString, required = false,
                                 default = nil)
  if valid_607897 != nil:
    section.add "X-Amz-Content-Sha256", valid_607897
  var valid_607898 = header.getOrDefault("X-Amz-Date")
  valid_607898 = validateParameter(valid_607898, JString, required = false,
                                 default = nil)
  if valid_607898 != nil:
    section.add "X-Amz-Date", valid_607898
  var valid_607899 = header.getOrDefault("X-Amz-Credential")
  valid_607899 = validateParameter(valid_607899, JString, required = false,
                                 default = nil)
  if valid_607899 != nil:
    section.add "X-Amz-Credential", valid_607899
  var valid_607900 = header.getOrDefault("X-Amz-Security-Token")
  valid_607900 = validateParameter(valid_607900, JString, required = false,
                                 default = nil)
  if valid_607900 != nil:
    section.add "X-Amz-Security-Token", valid_607900
  var valid_607901 = header.getOrDefault("X-Amz-Algorithm")
  valid_607901 = validateParameter(valid_607901, JString, required = false,
                                 default = nil)
  if valid_607901 != nil:
    section.add "X-Amz-Algorithm", valid_607901
  var valid_607902 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607902 = validateParameter(valid_607902, JString, required = false,
                                 default = nil)
  if valid_607902 != nil:
    section.add "X-Amz-SignedHeaders", valid_607902
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Source: JString (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   Destination.CcAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Message.Body: JString
  ##               : Represents the message to be sent, composed of a subject and a body.
  ## The message body.
  ##   Destination.BccAddresses: JArray
  ##                           : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   Message.Subject: JString
  ##                  : Represents the message to be sent, composed of a subject and a body.
  ## The subject of the message: A short summary of the content, which will appear in the recipient's inbox.
  ##   ReturnPath: JString
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   Destination.ToAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendEmail</code>.
  section = newJObject()
  var valid_607903 = formData.getOrDefault("ReturnPathArn")
  valid_607903 = validateParameter(valid_607903, JString, required = false,
                                 default = nil)
  if valid_607903 != nil:
    section.add "ReturnPathArn", valid_607903
  assert formData != nil,
        "formData argument is necessary due to required `Source` field"
  var valid_607904 = formData.getOrDefault("Source")
  valid_607904 = validateParameter(valid_607904, JString, required = true,
                                 default = nil)
  if valid_607904 != nil:
    section.add "Source", valid_607904
  var valid_607905 = formData.getOrDefault("Destination.CcAddresses")
  valid_607905 = validateParameter(valid_607905, JArray, required = false,
                                 default = nil)
  if valid_607905 != nil:
    section.add "Destination.CcAddresses", valid_607905
  var valid_607906 = formData.getOrDefault("SourceArn")
  valid_607906 = validateParameter(valid_607906, JString, required = false,
                                 default = nil)
  if valid_607906 != nil:
    section.add "SourceArn", valid_607906
  var valid_607907 = formData.getOrDefault("ReplyToAddresses")
  valid_607907 = validateParameter(valid_607907, JArray, required = false,
                                 default = nil)
  if valid_607907 != nil:
    section.add "ReplyToAddresses", valid_607907
  var valid_607908 = formData.getOrDefault("Message.Body")
  valid_607908 = validateParameter(valid_607908, JString, required = false,
                                 default = nil)
  if valid_607908 != nil:
    section.add "Message.Body", valid_607908
  var valid_607909 = formData.getOrDefault("Destination.BccAddresses")
  valid_607909 = validateParameter(valid_607909, JArray, required = false,
                                 default = nil)
  if valid_607909 != nil:
    section.add "Destination.BccAddresses", valid_607909
  var valid_607910 = formData.getOrDefault("Message.Subject")
  valid_607910 = validateParameter(valid_607910, JString, required = false,
                                 default = nil)
  if valid_607910 != nil:
    section.add "Message.Subject", valid_607910
  var valid_607911 = formData.getOrDefault("ReturnPath")
  valid_607911 = validateParameter(valid_607911, JString, required = false,
                                 default = nil)
  if valid_607911 != nil:
    section.add "ReturnPath", valid_607911
  var valid_607912 = formData.getOrDefault("Tags")
  valid_607912 = validateParameter(valid_607912, JArray, required = false,
                                 default = nil)
  if valid_607912 != nil:
    section.add "Tags", valid_607912
  var valid_607913 = formData.getOrDefault("Destination.ToAddresses")
  valid_607913 = validateParameter(valid_607913, JArray, required = false,
                                 default = nil)
  if valid_607913 != nil:
    section.add "Destination.ToAddresses", valid_607913
  var valid_607914 = formData.getOrDefault("ConfigurationSetName")
  valid_607914 = validateParameter(valid_607914, JString, required = false,
                                 default = nil)
  if valid_607914 != nil:
    section.add "ConfigurationSetName", valid_607914
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607915: Call_PostSendEmail_607891; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message and immediately queues it for sending. In order to send email using the <code>SendEmail</code> operation, your message must meet the following requirements:</p> <ul> <li> <p>The message must be sent from a verified email address or domain. If you attempt to send email using a non-verified address or domain, the operation will result in an "Email address not verified" error. </p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>The message must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendEmail</code> operation several times to send the message to each group.</p> </li> </ul> <important> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </important>
  ## 
  let valid = call_607915.validator(path, query, header, formData, body)
  let scheme = call_607915.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607915.url(scheme.get, call_607915.host, call_607915.base,
                         call_607915.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607915, url, valid)

proc call*(call_607916: Call_PostSendEmail_607891; Source: string;
          ReturnPathArn: string = ""; DestinationCcAddresses: JsonNode = nil;
          SourceArn: string = ""; ReplyToAddresses: JsonNode = nil;
          MessageBody: string = ""; DestinationBccAddresses: JsonNode = nil;
          MessageSubject: string = ""; Action: string = "SendEmail";
          ReturnPath: string = ""; Tags: JsonNode = nil;
          DestinationToAddresses: JsonNode = nil; ConfigurationSetName: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## postSendEmail
  ## <p>Composes an email message and immediately queues it for sending. In order to send email using the <code>SendEmail</code> operation, your message must meet the following requirements:</p> <ul> <li> <p>The message must be sent from a verified email address or domain. If you attempt to send email using a non-verified address or domain, the operation will result in an "Email address not verified" error. </p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>The message must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendEmail</code> operation several times to send the message to each group.</p> </li> </ul> <important> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </important>
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Source: string (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   DestinationCcAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   MessageBody: string
  ##              : Represents the message to be sent, composed of a subject and a body.
  ## The message body.
  ##   DestinationBccAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   MessageSubject: string
  ##                 : Represents the message to be sent, composed of a subject and a body.
  ## The subject of the message: A short summary of the content, which will appear in the recipient's inbox.
  ##   Action: string (required)
  ##   ReturnPath: string
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   DestinationToAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendEmail</code>.
  ##   Version: string (required)
  var query_607917 = newJObject()
  var formData_607918 = newJObject()
  add(formData_607918, "ReturnPathArn", newJString(ReturnPathArn))
  add(formData_607918, "Source", newJString(Source))
  if DestinationCcAddresses != nil:
    formData_607918.add "Destination.CcAddresses", DestinationCcAddresses
  add(formData_607918, "SourceArn", newJString(SourceArn))
  if ReplyToAddresses != nil:
    formData_607918.add "ReplyToAddresses", ReplyToAddresses
  add(formData_607918, "Message.Body", newJString(MessageBody))
  if DestinationBccAddresses != nil:
    formData_607918.add "Destination.BccAddresses", DestinationBccAddresses
  add(formData_607918, "Message.Subject", newJString(MessageSubject))
  add(query_607917, "Action", newJString(Action))
  add(formData_607918, "ReturnPath", newJString(ReturnPath))
  if Tags != nil:
    formData_607918.add "Tags", Tags
  if DestinationToAddresses != nil:
    formData_607918.add "Destination.ToAddresses", DestinationToAddresses
  add(formData_607918, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_607917, "Version", newJString(Version))
  result = call_607916.call(nil, query_607917, nil, formData_607918, nil)

var postSendEmail* = Call_PostSendEmail_607891(name: "postSendEmail",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=SendEmail", validator: validate_PostSendEmail_607892,
    base: "/", url: url_PostSendEmail_607893, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSendEmail_607864 = ref object of OpenApiRestCall_605589
proc url_GetSendEmail_607866(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSendEmail_607865(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Composes an email message and immediately queues it for sending. In order to send email using the <code>SendEmail</code> operation, your message must meet the following requirements:</p> <ul> <li> <p>The message must be sent from a verified email address or domain. If you attempt to send email using a non-verified address or domain, the operation will result in an "Email address not verified" error. </p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>The message must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendEmail</code> operation several times to send the message to each group.</p> </li> </ul> <important> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   ReturnPath: JString
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   Source: JString (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendEmail</code>.
  ##   Destination.CcAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   Action: JString (required)
  ##   Message.Subject: JString
  ##                  : Represents the message to be sent, composed of a subject and a body.
  ## The subject of the message: A short summary of the content, which will appear in the recipient's inbox.
  ##   Destination.ToAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  ##   Destination.BccAddresses: JArray
  ##                           : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   Version: JString (required)
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Message.Body: JString
  ##               : Represents the message to be sent, composed of a subject and a body.
  ## The message body.
  section = newJObject()
  var valid_607867 = query.getOrDefault("SourceArn")
  valid_607867 = validateParameter(valid_607867, JString, required = false,
                                 default = nil)
  if valid_607867 != nil:
    section.add "SourceArn", valid_607867
  var valid_607868 = query.getOrDefault("ReturnPath")
  valid_607868 = validateParameter(valid_607868, JString, required = false,
                                 default = nil)
  if valid_607868 != nil:
    section.add "ReturnPath", valid_607868
  assert query != nil, "query argument is necessary due to required `Source` field"
  var valid_607869 = query.getOrDefault("Source")
  valid_607869 = validateParameter(valid_607869, JString, required = true,
                                 default = nil)
  if valid_607869 != nil:
    section.add "Source", valid_607869
  var valid_607870 = query.getOrDefault("Tags")
  valid_607870 = validateParameter(valid_607870, JArray, required = false,
                                 default = nil)
  if valid_607870 != nil:
    section.add "Tags", valid_607870
  var valid_607871 = query.getOrDefault("ConfigurationSetName")
  valid_607871 = validateParameter(valid_607871, JString, required = false,
                                 default = nil)
  if valid_607871 != nil:
    section.add "ConfigurationSetName", valid_607871
  var valid_607872 = query.getOrDefault("Destination.CcAddresses")
  valid_607872 = validateParameter(valid_607872, JArray, required = false,
                                 default = nil)
  if valid_607872 != nil:
    section.add "Destination.CcAddresses", valid_607872
  var valid_607873 = query.getOrDefault("Action")
  valid_607873 = validateParameter(valid_607873, JString, required = true,
                                 default = newJString("SendEmail"))
  if valid_607873 != nil:
    section.add "Action", valid_607873
  var valid_607874 = query.getOrDefault("Message.Subject")
  valid_607874 = validateParameter(valid_607874, JString, required = false,
                                 default = nil)
  if valid_607874 != nil:
    section.add "Message.Subject", valid_607874
  var valid_607875 = query.getOrDefault("Destination.ToAddresses")
  valid_607875 = validateParameter(valid_607875, JArray, required = false,
                                 default = nil)
  if valid_607875 != nil:
    section.add "Destination.ToAddresses", valid_607875
  var valid_607876 = query.getOrDefault("Destination.BccAddresses")
  valid_607876 = validateParameter(valid_607876, JArray, required = false,
                                 default = nil)
  if valid_607876 != nil:
    section.add "Destination.BccAddresses", valid_607876
  var valid_607877 = query.getOrDefault("Version")
  valid_607877 = validateParameter(valid_607877, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607877 != nil:
    section.add "Version", valid_607877
  var valid_607878 = query.getOrDefault("ReturnPathArn")
  valid_607878 = validateParameter(valid_607878, JString, required = false,
                                 default = nil)
  if valid_607878 != nil:
    section.add "ReturnPathArn", valid_607878
  var valid_607879 = query.getOrDefault("ReplyToAddresses")
  valid_607879 = validateParameter(valid_607879, JArray, required = false,
                                 default = nil)
  if valid_607879 != nil:
    section.add "ReplyToAddresses", valid_607879
  var valid_607880 = query.getOrDefault("Message.Body")
  valid_607880 = validateParameter(valid_607880, JString, required = false,
                                 default = nil)
  if valid_607880 != nil:
    section.add "Message.Body", valid_607880
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607881 = header.getOrDefault("X-Amz-Signature")
  valid_607881 = validateParameter(valid_607881, JString, required = false,
                                 default = nil)
  if valid_607881 != nil:
    section.add "X-Amz-Signature", valid_607881
  var valid_607882 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607882 = validateParameter(valid_607882, JString, required = false,
                                 default = nil)
  if valid_607882 != nil:
    section.add "X-Amz-Content-Sha256", valid_607882
  var valid_607883 = header.getOrDefault("X-Amz-Date")
  valid_607883 = validateParameter(valid_607883, JString, required = false,
                                 default = nil)
  if valid_607883 != nil:
    section.add "X-Amz-Date", valid_607883
  var valid_607884 = header.getOrDefault("X-Amz-Credential")
  valid_607884 = validateParameter(valid_607884, JString, required = false,
                                 default = nil)
  if valid_607884 != nil:
    section.add "X-Amz-Credential", valid_607884
  var valid_607885 = header.getOrDefault("X-Amz-Security-Token")
  valid_607885 = validateParameter(valid_607885, JString, required = false,
                                 default = nil)
  if valid_607885 != nil:
    section.add "X-Amz-Security-Token", valid_607885
  var valid_607886 = header.getOrDefault("X-Amz-Algorithm")
  valid_607886 = validateParameter(valid_607886, JString, required = false,
                                 default = nil)
  if valid_607886 != nil:
    section.add "X-Amz-Algorithm", valid_607886
  var valid_607887 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607887 = validateParameter(valid_607887, JString, required = false,
                                 default = nil)
  if valid_607887 != nil:
    section.add "X-Amz-SignedHeaders", valid_607887
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607888: Call_GetSendEmail_607864; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message and immediately queues it for sending. In order to send email using the <code>SendEmail</code> operation, your message must meet the following requirements:</p> <ul> <li> <p>The message must be sent from a verified email address or domain. If you attempt to send email using a non-verified address or domain, the operation will result in an "Email address not verified" error. </p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>The message must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendEmail</code> operation several times to send the message to each group.</p> </li> </ul> <important> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </important>
  ## 
  let valid = call_607888.validator(path, query, header, formData, body)
  let scheme = call_607888.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607888.url(scheme.get, call_607888.host, call_607888.base,
                         call_607888.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607888, url, valid)

proc call*(call_607889: Call_GetSendEmail_607864; Source: string;
          SourceArn: string = ""; ReturnPath: string = ""; Tags: JsonNode = nil;
          ConfigurationSetName: string = ""; DestinationCcAddresses: JsonNode = nil;
          Action: string = "SendEmail"; MessageSubject: string = "";
          DestinationToAddresses: JsonNode = nil;
          DestinationBccAddresses: JsonNode = nil; Version: string = "2010-12-01";
          ReturnPathArn: string = ""; ReplyToAddresses: JsonNode = nil;
          MessageBody: string = ""): Recallable =
  ## getSendEmail
  ## <p>Composes an email message and immediately queues it for sending. In order to send email using the <code>SendEmail</code> operation, your message must meet the following requirements:</p> <ul> <li> <p>The message must be sent from a verified email address or domain. If you attempt to send email using a non-verified address or domain, the operation will result in an "Email address not verified" error. </p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>The message must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendEmail</code> operation several times to send the message to each group.</p> </li> </ul> <important> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </important>
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   ReturnPath: string
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   Source: string (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendEmail</code>.
  ##   DestinationCcAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   Action: string (required)
  ##   MessageSubject: string
  ##                 : Represents the message to be sent, composed of a subject and a body.
  ## The subject of the message: A short summary of the content, which will appear in the recipient's inbox.
  ##   DestinationToAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  ##   DestinationBccAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   Version: string (required)
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   MessageBody: string
  ##              : Represents the message to be sent, composed of a subject and a body.
  ## The message body.
  var query_607890 = newJObject()
  add(query_607890, "SourceArn", newJString(SourceArn))
  add(query_607890, "ReturnPath", newJString(ReturnPath))
  add(query_607890, "Source", newJString(Source))
  if Tags != nil:
    query_607890.add "Tags", Tags
  add(query_607890, "ConfigurationSetName", newJString(ConfigurationSetName))
  if DestinationCcAddresses != nil:
    query_607890.add "Destination.CcAddresses", DestinationCcAddresses
  add(query_607890, "Action", newJString(Action))
  add(query_607890, "Message.Subject", newJString(MessageSubject))
  if DestinationToAddresses != nil:
    query_607890.add "Destination.ToAddresses", DestinationToAddresses
  if DestinationBccAddresses != nil:
    query_607890.add "Destination.BccAddresses", DestinationBccAddresses
  add(query_607890, "Version", newJString(Version))
  add(query_607890, "ReturnPathArn", newJString(ReturnPathArn))
  if ReplyToAddresses != nil:
    query_607890.add "ReplyToAddresses", ReplyToAddresses
  add(query_607890, "Message.Body", newJString(MessageBody))
  result = call_607889.call(nil, query_607890, nil, nil, nil)

var getSendEmail* = Call_GetSendEmail_607864(name: "getSendEmail",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=SendEmail", validator: validate_GetSendEmail_607865, base: "/",
    url: url_GetSendEmail_607866, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSendRawEmail_607942 = ref object of OpenApiRestCall_605589
proc url_PostSendRawEmail_607944(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSendRawEmail_607943(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Composes an email message and immediately queues it for sending.</p> <p>This operation is more flexible than the <code>SendEmail</code> API operation. When you use the <code>SendRawEmail</code> operation, you can specify the headers of the message as well as its content. This flexibility is useful, for example, when you want to send a multipart MIME email (such a message that contains both a text and an HTML version). You can also use this operation to send messages that include attachments.</p> <p>The <code>SendRawEmail</code> operation has the following requirements:</p> <ul> <li> <p>You can only send email from <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified email addresses or domains</a>. If you try to send email from an address that isn't verified, the operation results in an "Email address not verified" error.</p> </li> <li> <p>If your account is still in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon SES sandbox</a>, you can only send email to other verified addresses in your account, or to addresses that are associated with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon SES mailbox simulator</a>.</p> </li> <li> <p>The maximum message size, including attachments, is 10 MB.</p> </li> <li> <p>Each message has to include at least one recipient address. A recipient address includes any address on the To:, CC:, or BCC: lines.</p> </li> <li> <p>If you send a single message to more than one recipient address, and one of the recipient addresses isn't in a valid format (that is, it's not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), Amazon SES rejects the entire message, even if the other addresses are valid.</p> </li> <li> <p>Each message can include up to 50 recipient addresses across the To:, CC:, or BCC: lines. If you need to send a single message to more than 50 recipients, you have to split the list of recipient addresses into groups of less than 50 recipients, and send separate messages to each group.</p> </li> <li> <p>Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message parts. However, if Amazon SES has to modify the contents of your message (for example, if you use open and click tracking), 8-bit content isn't preserved. For this reason, we highly recommend that you encode all content that isn't 7-bit ASCII. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME Encoding</a> in the <i>Amazon SES Developer Guide</i>.</p> </li> </ul> <p>Additionally, keep the following considerations in mind when using the <code>SendRawEmail</code> operation:</p> <ul> <li> <p>Although you can customize the message headers when using the <code>SendRawEmail</code> operation, Amazon SES will automatically apply its own <code>Message-ID</code> and <code>Date</code> headers; if you passed these headers when creating the message, they will be overwritten by the values that Amazon SES provides.</p> </li> <li> <p>If you are using sending authorization to send on behalf of another user, <code>SendRawEmail</code> enables you to specify the cross-account identity for the email's Source, From, and Return-Path parameters in one of two ways: you can pass optional parameters <code>SourceArn</code>, <code>FromArn</code>, and/or <code>ReturnPathArn</code> to the API, or you can include the following X-headers in the header of your raw email:</p> <ul> <li> <p> <code>X-SES-SOURCE-ARN</code> </p> </li> <li> <p> <code>X-SES-FROM-ARN</code> </p> </li> <li> <p> <code>X-SES-RETURN-PATH-ARN</code> </p> </li> </ul> <important> <p>Don't include these X-headers in the DKIM signature. Amazon SES removes these before it sends the email.</p> </important> <p>If you only specify the <code>SourceIdentityArn</code> parameter, Amazon SES sets the From and Return-Path addresses to the same identity that you specified.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using Sending Authorization with Amazon SES</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607945 = query.getOrDefault("Action")
  valid_607945 = validateParameter(valid_607945, JString, required = true,
                                 default = newJString("SendRawEmail"))
  if valid_607945 != nil:
    section.add "Action", valid_607945
  var valid_607946 = query.getOrDefault("Version")
  valid_607946 = validateParameter(valid_607946, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607946 != nil:
    section.add "Version", valid_607946
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607947 = header.getOrDefault("X-Amz-Signature")
  valid_607947 = validateParameter(valid_607947, JString, required = false,
                                 default = nil)
  if valid_607947 != nil:
    section.add "X-Amz-Signature", valid_607947
  var valid_607948 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607948 = validateParameter(valid_607948, JString, required = false,
                                 default = nil)
  if valid_607948 != nil:
    section.add "X-Amz-Content-Sha256", valid_607948
  var valid_607949 = header.getOrDefault("X-Amz-Date")
  valid_607949 = validateParameter(valid_607949, JString, required = false,
                                 default = nil)
  if valid_607949 != nil:
    section.add "X-Amz-Date", valid_607949
  var valid_607950 = header.getOrDefault("X-Amz-Credential")
  valid_607950 = validateParameter(valid_607950, JString, required = false,
                                 default = nil)
  if valid_607950 != nil:
    section.add "X-Amz-Credential", valid_607950
  var valid_607951 = header.getOrDefault("X-Amz-Security-Token")
  valid_607951 = validateParameter(valid_607951, JString, required = false,
                                 default = nil)
  if valid_607951 != nil:
    section.add "X-Amz-Security-Token", valid_607951
  var valid_607952 = header.getOrDefault("X-Amz-Algorithm")
  valid_607952 = validateParameter(valid_607952, JString, required = false,
                                 default = nil)
  if valid_607952 != nil:
    section.add "X-Amz-Algorithm", valid_607952
  var valid_607953 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607953 = validateParameter(valid_607953, JString, required = false,
                                 default = nil)
  if valid_607953 != nil:
    section.add "X-Amz-SignedHeaders", valid_607953
  result.add "header", section
  ## parameters in `formData` object:
  ##   FromArn: JString
  ##          : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to specify a particular "From" address in the header of the raw email.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-FROM-ARN</code> in the raw message of the email. If you use both the <code>FromArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>FromArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-RETURN-PATH-ARN</code> in the raw message of the email. If you use both the <code>ReturnPathArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>ReturnPathArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Source: JString
  ##         : <p>The identity's email address. If you do not provide a value for this parameter, you must specify a "From" address in the raw text of the message. (You can also specify both.)</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in<a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note> <p>If you specify the <code>Source</code> parameter and have feedback forwarding enabled, then bounces and complaints will be sent to this email address. This takes precedence over any Return-Path header that you might include in the raw text of the message.</p>
  ##   RawMessage.Data: JString
  ##                  : Represents the raw data of the message.
  ## <p>The raw data of the message. This data needs to base64-encoded if you are accessing Amazon SES directly through the HTTPS interface. If you are accessing Amazon SES using an AWS SDK, the SDK takes care of the base 64-encoding for you. In all cases, the client must ensure that the message format complies with Internet email standards regarding email header fields, MIME types, and MIME encoding.</p> <p>The To:, CC:, and BCC: headers in the raw message can contain a group list.</p> <p>If you are using <code>SendRawEmail</code> with sending authorization, you can include X-headers in the raw message to specify the "Source," "From," and "Return-Path" addresses. For more information, see the documentation for <code>SendRawEmail</code>. </p> <important> <p>Do not include these X-headers in the DKIM signature, because they are removed by Amazon SES before sending the email.</p> </important> <p>For more information, go to the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html">Amazon SES Developer Guide</a>.</p>
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-SOURCE-ARN</code> in the raw message of the email. If you use both the <code>SourceArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>SourceArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Destinations: JArray
  ##               : A list of destinations for the message, consisting of To:, CC:, and BCC: addresses.
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendRawEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendRawEmail</code>.
  section = newJObject()
  var valid_607954 = formData.getOrDefault("FromArn")
  valid_607954 = validateParameter(valid_607954, JString, required = false,
                                 default = nil)
  if valid_607954 != nil:
    section.add "FromArn", valid_607954
  var valid_607955 = formData.getOrDefault("ReturnPathArn")
  valid_607955 = validateParameter(valid_607955, JString, required = false,
                                 default = nil)
  if valid_607955 != nil:
    section.add "ReturnPathArn", valid_607955
  var valid_607956 = formData.getOrDefault("Source")
  valid_607956 = validateParameter(valid_607956, JString, required = false,
                                 default = nil)
  if valid_607956 != nil:
    section.add "Source", valid_607956
  var valid_607957 = formData.getOrDefault("RawMessage.Data")
  valid_607957 = validateParameter(valid_607957, JString, required = false,
                                 default = nil)
  if valid_607957 != nil:
    section.add "RawMessage.Data", valid_607957
  var valid_607958 = formData.getOrDefault("SourceArn")
  valid_607958 = validateParameter(valid_607958, JString, required = false,
                                 default = nil)
  if valid_607958 != nil:
    section.add "SourceArn", valid_607958
  var valid_607959 = formData.getOrDefault("Destinations")
  valid_607959 = validateParameter(valid_607959, JArray, required = false,
                                 default = nil)
  if valid_607959 != nil:
    section.add "Destinations", valid_607959
  var valid_607960 = formData.getOrDefault("Tags")
  valid_607960 = validateParameter(valid_607960, JArray, required = false,
                                 default = nil)
  if valid_607960 != nil:
    section.add "Tags", valid_607960
  var valid_607961 = formData.getOrDefault("ConfigurationSetName")
  valid_607961 = validateParameter(valid_607961, JString, required = false,
                                 default = nil)
  if valid_607961 != nil:
    section.add "ConfigurationSetName", valid_607961
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607962: Call_PostSendRawEmail_607942; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message and immediately queues it for sending.</p> <p>This operation is more flexible than the <code>SendEmail</code> API operation. When you use the <code>SendRawEmail</code> operation, you can specify the headers of the message as well as its content. This flexibility is useful, for example, when you want to send a multipart MIME email (such a message that contains both a text and an HTML version). You can also use this operation to send messages that include attachments.</p> <p>The <code>SendRawEmail</code> operation has the following requirements:</p> <ul> <li> <p>You can only send email from <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified email addresses or domains</a>. If you try to send email from an address that isn't verified, the operation results in an "Email address not verified" error.</p> </li> <li> <p>If your account is still in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon SES sandbox</a>, you can only send email to other verified addresses in your account, or to addresses that are associated with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon SES mailbox simulator</a>.</p> </li> <li> <p>The maximum message size, including attachments, is 10 MB.</p> </li> <li> <p>Each message has to include at least one recipient address. A recipient address includes any address on the To:, CC:, or BCC: lines.</p> </li> <li> <p>If you send a single message to more than one recipient address, and one of the recipient addresses isn't in a valid format (that is, it's not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), Amazon SES rejects the entire message, even if the other addresses are valid.</p> </li> <li> <p>Each message can include up to 50 recipient addresses across the To:, CC:, or BCC: lines. If you need to send a single message to more than 50 recipients, you have to split the list of recipient addresses into groups of less than 50 recipients, and send separate messages to each group.</p> </li> <li> <p>Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message parts. However, if Amazon SES has to modify the contents of your message (for example, if you use open and click tracking), 8-bit content isn't preserved. For this reason, we highly recommend that you encode all content that isn't 7-bit ASCII. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME Encoding</a> in the <i>Amazon SES Developer Guide</i>.</p> </li> </ul> <p>Additionally, keep the following considerations in mind when using the <code>SendRawEmail</code> operation:</p> <ul> <li> <p>Although you can customize the message headers when using the <code>SendRawEmail</code> operation, Amazon SES will automatically apply its own <code>Message-ID</code> and <code>Date</code> headers; if you passed these headers when creating the message, they will be overwritten by the values that Amazon SES provides.</p> </li> <li> <p>If you are using sending authorization to send on behalf of another user, <code>SendRawEmail</code> enables you to specify the cross-account identity for the email's Source, From, and Return-Path parameters in one of two ways: you can pass optional parameters <code>SourceArn</code>, <code>FromArn</code>, and/or <code>ReturnPathArn</code> to the API, or you can include the following X-headers in the header of your raw email:</p> <ul> <li> <p> <code>X-SES-SOURCE-ARN</code> </p> </li> <li> <p> <code>X-SES-FROM-ARN</code> </p> </li> <li> <p> <code>X-SES-RETURN-PATH-ARN</code> </p> </li> </ul> <important> <p>Don't include these X-headers in the DKIM signature. Amazon SES removes these before it sends the email.</p> </important> <p>If you only specify the <code>SourceIdentityArn</code> parameter, Amazon SES sets the From and Return-Path addresses to the same identity that you specified.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using Sending Authorization with Amazon SES</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> </ul>
  ## 
  let valid = call_607962.validator(path, query, header, formData, body)
  let scheme = call_607962.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607962.url(scheme.get, call_607962.host, call_607962.base,
                         call_607962.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607962, url, valid)

proc call*(call_607963: Call_PostSendRawEmail_607942; FromArn: string = "";
          ReturnPathArn: string = ""; Source: string = ""; RawMessageData: string = "";
          SourceArn: string = ""; Destinations: JsonNode = nil;
          Action: string = "SendRawEmail"; Tags: JsonNode = nil;
          ConfigurationSetName: string = ""; Version: string = "2010-12-01"): Recallable =
  ## postSendRawEmail
  ## <p>Composes an email message and immediately queues it for sending.</p> <p>This operation is more flexible than the <code>SendEmail</code> API operation. When you use the <code>SendRawEmail</code> operation, you can specify the headers of the message as well as its content. This flexibility is useful, for example, when you want to send a multipart MIME email (such a message that contains both a text and an HTML version). You can also use this operation to send messages that include attachments.</p> <p>The <code>SendRawEmail</code> operation has the following requirements:</p> <ul> <li> <p>You can only send email from <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified email addresses or domains</a>. If you try to send email from an address that isn't verified, the operation results in an "Email address not verified" error.</p> </li> <li> <p>If your account is still in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon SES sandbox</a>, you can only send email to other verified addresses in your account, or to addresses that are associated with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon SES mailbox simulator</a>.</p> </li> <li> <p>The maximum message size, including attachments, is 10 MB.</p> </li> <li> <p>Each message has to include at least one recipient address. A recipient address includes any address on the To:, CC:, or BCC: lines.</p> </li> <li> <p>If you send a single message to more than one recipient address, and one of the recipient addresses isn't in a valid format (that is, it's not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), Amazon SES rejects the entire message, even if the other addresses are valid.</p> </li> <li> <p>Each message can include up to 50 recipient addresses across the To:, CC:, or BCC: lines. If you need to send a single message to more than 50 recipients, you have to split the list of recipient addresses into groups of less than 50 recipients, and send separate messages to each group.</p> </li> <li> <p>Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message parts. However, if Amazon SES has to modify the contents of your message (for example, if you use open and click tracking), 8-bit content isn't preserved. For this reason, we highly recommend that you encode all content that isn't 7-bit ASCII. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME Encoding</a> in the <i>Amazon SES Developer Guide</i>.</p> </li> </ul> <p>Additionally, keep the following considerations in mind when using the <code>SendRawEmail</code> operation:</p> <ul> <li> <p>Although you can customize the message headers when using the <code>SendRawEmail</code> operation, Amazon SES will automatically apply its own <code>Message-ID</code> and <code>Date</code> headers; if you passed these headers when creating the message, they will be overwritten by the values that Amazon SES provides.</p> </li> <li> <p>If you are using sending authorization to send on behalf of another user, <code>SendRawEmail</code> enables you to specify the cross-account identity for the email's Source, From, and Return-Path parameters in one of two ways: you can pass optional parameters <code>SourceArn</code>, <code>FromArn</code>, and/or <code>ReturnPathArn</code> to the API, or you can include the following X-headers in the header of your raw email:</p> <ul> <li> <p> <code>X-SES-SOURCE-ARN</code> </p> </li> <li> <p> <code>X-SES-FROM-ARN</code> </p> </li> <li> <p> <code>X-SES-RETURN-PATH-ARN</code> </p> </li> </ul> <important> <p>Don't include these X-headers in the DKIM signature. Amazon SES removes these before it sends the email.</p> </important> <p>If you only specify the <code>SourceIdentityArn</code> parameter, Amazon SES sets the From and Return-Path addresses to the same identity that you specified.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using Sending Authorization with Amazon SES</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> </ul>
  ##   FromArn: string
  ##          : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to specify a particular "From" address in the header of the raw email.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-FROM-ARN</code> in the raw message of the email. If you use both the <code>FromArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>FromArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-RETURN-PATH-ARN</code> in the raw message of the email. If you use both the <code>ReturnPathArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>ReturnPathArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Source: string
  ##         : <p>The identity's email address. If you do not provide a value for this parameter, you must specify a "From" address in the raw text of the message. (You can also specify both.)</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in<a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note> <p>If you specify the <code>Source</code> parameter and have feedback forwarding enabled, then bounces and complaints will be sent to this email address. This takes precedence over any Return-Path header that you might include in the raw text of the message.</p>
  ##   RawMessageData: string
  ##                 : Represents the raw data of the message.
  ## <p>The raw data of the message. This data needs to base64-encoded if you are accessing Amazon SES directly through the HTTPS interface. If you are accessing Amazon SES using an AWS SDK, the SDK takes care of the base 64-encoding for you. In all cases, the client must ensure that the message format complies with Internet email standards regarding email header fields, MIME types, and MIME encoding.</p> <p>The To:, CC:, and BCC: headers in the raw message can contain a group list.</p> <p>If you are using <code>SendRawEmail</code> with sending authorization, you can include X-headers in the raw message to specify the "Source," "From," and "Return-Path" addresses. For more information, see the documentation for <code>SendRawEmail</code>. </p> <important> <p>Do not include these X-headers in the DKIM signature, because they are removed by Amazon SES before sending the email.</p> </important> <p>For more information, go to the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html">Amazon SES Developer Guide</a>.</p>
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-SOURCE-ARN</code> in the raw message of the email. If you use both the <code>SourceArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>SourceArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Destinations: JArray
  ##               : A list of destinations for the message, consisting of To:, CC:, and BCC: addresses.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendRawEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendRawEmail</code>.
  ##   Version: string (required)
  var query_607964 = newJObject()
  var formData_607965 = newJObject()
  add(formData_607965, "FromArn", newJString(FromArn))
  add(formData_607965, "ReturnPathArn", newJString(ReturnPathArn))
  add(formData_607965, "Source", newJString(Source))
  add(formData_607965, "RawMessage.Data", newJString(RawMessageData))
  add(formData_607965, "SourceArn", newJString(SourceArn))
  if Destinations != nil:
    formData_607965.add "Destinations", Destinations
  add(query_607964, "Action", newJString(Action))
  if Tags != nil:
    formData_607965.add "Tags", Tags
  add(formData_607965, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_607964, "Version", newJString(Version))
  result = call_607963.call(nil, query_607964, nil, formData_607965, nil)

var postSendRawEmail* = Call_PostSendRawEmail_607942(name: "postSendRawEmail",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=SendRawEmail", validator: validate_PostSendRawEmail_607943,
    base: "/", url: url_PostSendRawEmail_607944,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSendRawEmail_607919 = ref object of OpenApiRestCall_605589
proc url_GetSendRawEmail_607921(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSendRawEmail_607920(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Composes an email message and immediately queues it for sending.</p> <p>This operation is more flexible than the <code>SendEmail</code> API operation. When you use the <code>SendRawEmail</code> operation, you can specify the headers of the message as well as its content. This flexibility is useful, for example, when you want to send a multipart MIME email (such a message that contains both a text and an HTML version). You can also use this operation to send messages that include attachments.</p> <p>The <code>SendRawEmail</code> operation has the following requirements:</p> <ul> <li> <p>You can only send email from <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified email addresses or domains</a>. If you try to send email from an address that isn't verified, the operation results in an "Email address not verified" error.</p> </li> <li> <p>If your account is still in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon SES sandbox</a>, you can only send email to other verified addresses in your account, or to addresses that are associated with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon SES mailbox simulator</a>.</p> </li> <li> <p>The maximum message size, including attachments, is 10 MB.</p> </li> <li> <p>Each message has to include at least one recipient address. A recipient address includes any address on the To:, CC:, or BCC: lines.</p> </li> <li> <p>If you send a single message to more than one recipient address, and one of the recipient addresses isn't in a valid format (that is, it's not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), Amazon SES rejects the entire message, even if the other addresses are valid.</p> </li> <li> <p>Each message can include up to 50 recipient addresses across the To:, CC:, or BCC: lines. If you need to send a single message to more than 50 recipients, you have to split the list of recipient addresses into groups of less than 50 recipients, and send separate messages to each group.</p> </li> <li> <p>Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message parts. However, if Amazon SES has to modify the contents of your message (for example, if you use open and click tracking), 8-bit content isn't preserved. For this reason, we highly recommend that you encode all content that isn't 7-bit ASCII. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME Encoding</a> in the <i>Amazon SES Developer Guide</i>.</p> </li> </ul> <p>Additionally, keep the following considerations in mind when using the <code>SendRawEmail</code> operation:</p> <ul> <li> <p>Although you can customize the message headers when using the <code>SendRawEmail</code> operation, Amazon SES will automatically apply its own <code>Message-ID</code> and <code>Date</code> headers; if you passed these headers when creating the message, they will be overwritten by the values that Amazon SES provides.</p> </li> <li> <p>If you are using sending authorization to send on behalf of another user, <code>SendRawEmail</code> enables you to specify the cross-account identity for the email's Source, From, and Return-Path parameters in one of two ways: you can pass optional parameters <code>SourceArn</code>, <code>FromArn</code>, and/or <code>ReturnPathArn</code> to the API, or you can include the following X-headers in the header of your raw email:</p> <ul> <li> <p> <code>X-SES-SOURCE-ARN</code> </p> </li> <li> <p> <code>X-SES-FROM-ARN</code> </p> </li> <li> <p> <code>X-SES-RETURN-PATH-ARN</code> </p> </li> </ul> <important> <p>Don't include these X-headers in the DKIM signature. Amazon SES removes these before it sends the email.</p> </important> <p>If you only specify the <code>SourceIdentityArn</code> parameter, Amazon SES sets the From and Return-Path addresses to the same identity that you specified.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using Sending Authorization with Amazon SES</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-SOURCE-ARN</code> in the raw message of the email. If you use both the <code>SourceArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>SourceArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Destinations: JArray
  ##               : A list of destinations for the message, consisting of To:, CC:, and BCC: addresses.
  ##   Source: JString
  ##         : <p>The identity's email address. If you do not provide a value for this parameter, you must specify a "From" address in the raw text of the message. (You can also specify both.)</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in<a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note> <p>If you specify the <code>Source</code> parameter and have feedback forwarding enabled, then bounces and complaints will be sent to this email address. This takes precedence over any Return-Path header that you might include in the raw text of the message.</p>
  ##   RawMessage.Data: JString
  ##                  : Represents the raw data of the message.
  ## <p>The raw data of the message. This data needs to base64-encoded if you are accessing Amazon SES directly through the HTTPS interface. If you are accessing Amazon SES using an AWS SDK, the SDK takes care of the base 64-encoding for you. In all cases, the client must ensure that the message format complies with Internet email standards regarding email header fields, MIME types, and MIME encoding.</p> <p>The To:, CC:, and BCC: headers in the raw message can contain a group list.</p> <p>If you are using <code>SendRawEmail</code> with sending authorization, you can include X-headers in the raw message to specify the "Source," "From," and "Return-Path" addresses. For more information, see the documentation for <code>SendRawEmail</code>. </p> <important> <p>Do not include these X-headers in the DKIM signature, because they are removed by Amazon SES before sending the email.</p> </important> <p>For more information, go to the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html">Amazon SES Developer Guide</a>.</p>
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendRawEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendRawEmail</code>.
  ##   Action: JString (required)
  ##   FromArn: JString
  ##          : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to specify a particular "From" address in the header of the raw email.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-FROM-ARN</code> in the raw message of the email. If you use both the <code>FromArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>FromArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Version: JString (required)
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-RETURN-PATH-ARN</code> in the raw message of the email. If you use both the <code>ReturnPathArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>ReturnPathArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  section = newJObject()
  var valid_607922 = query.getOrDefault("SourceArn")
  valid_607922 = validateParameter(valid_607922, JString, required = false,
                                 default = nil)
  if valid_607922 != nil:
    section.add "SourceArn", valid_607922
  var valid_607923 = query.getOrDefault("Destinations")
  valid_607923 = validateParameter(valid_607923, JArray, required = false,
                                 default = nil)
  if valid_607923 != nil:
    section.add "Destinations", valid_607923
  var valid_607924 = query.getOrDefault("Source")
  valid_607924 = validateParameter(valid_607924, JString, required = false,
                                 default = nil)
  if valid_607924 != nil:
    section.add "Source", valid_607924
  var valid_607925 = query.getOrDefault("RawMessage.Data")
  valid_607925 = validateParameter(valid_607925, JString, required = false,
                                 default = nil)
  if valid_607925 != nil:
    section.add "RawMessage.Data", valid_607925
  var valid_607926 = query.getOrDefault("Tags")
  valid_607926 = validateParameter(valid_607926, JArray, required = false,
                                 default = nil)
  if valid_607926 != nil:
    section.add "Tags", valid_607926
  var valid_607927 = query.getOrDefault("ConfigurationSetName")
  valid_607927 = validateParameter(valid_607927, JString, required = false,
                                 default = nil)
  if valid_607927 != nil:
    section.add "ConfigurationSetName", valid_607927
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607928 = query.getOrDefault("Action")
  valid_607928 = validateParameter(valid_607928, JString, required = true,
                                 default = newJString("SendRawEmail"))
  if valid_607928 != nil:
    section.add "Action", valid_607928
  var valid_607929 = query.getOrDefault("FromArn")
  valid_607929 = validateParameter(valid_607929, JString, required = false,
                                 default = nil)
  if valid_607929 != nil:
    section.add "FromArn", valid_607929
  var valid_607930 = query.getOrDefault("Version")
  valid_607930 = validateParameter(valid_607930, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607930 != nil:
    section.add "Version", valid_607930
  var valid_607931 = query.getOrDefault("ReturnPathArn")
  valid_607931 = validateParameter(valid_607931, JString, required = false,
                                 default = nil)
  if valid_607931 != nil:
    section.add "ReturnPathArn", valid_607931
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607932 = header.getOrDefault("X-Amz-Signature")
  valid_607932 = validateParameter(valid_607932, JString, required = false,
                                 default = nil)
  if valid_607932 != nil:
    section.add "X-Amz-Signature", valid_607932
  var valid_607933 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607933 = validateParameter(valid_607933, JString, required = false,
                                 default = nil)
  if valid_607933 != nil:
    section.add "X-Amz-Content-Sha256", valid_607933
  var valid_607934 = header.getOrDefault("X-Amz-Date")
  valid_607934 = validateParameter(valid_607934, JString, required = false,
                                 default = nil)
  if valid_607934 != nil:
    section.add "X-Amz-Date", valid_607934
  var valid_607935 = header.getOrDefault("X-Amz-Credential")
  valid_607935 = validateParameter(valid_607935, JString, required = false,
                                 default = nil)
  if valid_607935 != nil:
    section.add "X-Amz-Credential", valid_607935
  var valid_607936 = header.getOrDefault("X-Amz-Security-Token")
  valid_607936 = validateParameter(valid_607936, JString, required = false,
                                 default = nil)
  if valid_607936 != nil:
    section.add "X-Amz-Security-Token", valid_607936
  var valid_607937 = header.getOrDefault("X-Amz-Algorithm")
  valid_607937 = validateParameter(valid_607937, JString, required = false,
                                 default = nil)
  if valid_607937 != nil:
    section.add "X-Amz-Algorithm", valid_607937
  var valid_607938 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607938 = validateParameter(valid_607938, JString, required = false,
                                 default = nil)
  if valid_607938 != nil:
    section.add "X-Amz-SignedHeaders", valid_607938
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607939: Call_GetSendRawEmail_607919; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message and immediately queues it for sending.</p> <p>This operation is more flexible than the <code>SendEmail</code> API operation. When you use the <code>SendRawEmail</code> operation, you can specify the headers of the message as well as its content. This flexibility is useful, for example, when you want to send a multipart MIME email (such a message that contains both a text and an HTML version). You can also use this operation to send messages that include attachments.</p> <p>The <code>SendRawEmail</code> operation has the following requirements:</p> <ul> <li> <p>You can only send email from <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified email addresses or domains</a>. If you try to send email from an address that isn't verified, the operation results in an "Email address not verified" error.</p> </li> <li> <p>If your account is still in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon SES sandbox</a>, you can only send email to other verified addresses in your account, or to addresses that are associated with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon SES mailbox simulator</a>.</p> </li> <li> <p>The maximum message size, including attachments, is 10 MB.</p> </li> <li> <p>Each message has to include at least one recipient address. A recipient address includes any address on the To:, CC:, or BCC: lines.</p> </li> <li> <p>If you send a single message to more than one recipient address, and one of the recipient addresses isn't in a valid format (that is, it's not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), Amazon SES rejects the entire message, even if the other addresses are valid.</p> </li> <li> <p>Each message can include up to 50 recipient addresses across the To:, CC:, or BCC: lines. If you need to send a single message to more than 50 recipients, you have to split the list of recipient addresses into groups of less than 50 recipients, and send separate messages to each group.</p> </li> <li> <p>Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message parts. However, if Amazon SES has to modify the contents of your message (for example, if you use open and click tracking), 8-bit content isn't preserved. For this reason, we highly recommend that you encode all content that isn't 7-bit ASCII. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME Encoding</a> in the <i>Amazon SES Developer Guide</i>.</p> </li> </ul> <p>Additionally, keep the following considerations in mind when using the <code>SendRawEmail</code> operation:</p> <ul> <li> <p>Although you can customize the message headers when using the <code>SendRawEmail</code> operation, Amazon SES will automatically apply its own <code>Message-ID</code> and <code>Date</code> headers; if you passed these headers when creating the message, they will be overwritten by the values that Amazon SES provides.</p> </li> <li> <p>If you are using sending authorization to send on behalf of another user, <code>SendRawEmail</code> enables you to specify the cross-account identity for the email's Source, From, and Return-Path parameters in one of two ways: you can pass optional parameters <code>SourceArn</code>, <code>FromArn</code>, and/or <code>ReturnPathArn</code> to the API, or you can include the following X-headers in the header of your raw email:</p> <ul> <li> <p> <code>X-SES-SOURCE-ARN</code> </p> </li> <li> <p> <code>X-SES-FROM-ARN</code> </p> </li> <li> <p> <code>X-SES-RETURN-PATH-ARN</code> </p> </li> </ul> <important> <p>Don't include these X-headers in the DKIM signature. Amazon SES removes these before it sends the email.</p> </important> <p>If you only specify the <code>SourceIdentityArn</code> parameter, Amazon SES sets the From and Return-Path addresses to the same identity that you specified.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using Sending Authorization with Amazon SES</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> </ul>
  ## 
  let valid = call_607939.validator(path, query, header, formData, body)
  let scheme = call_607939.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607939.url(scheme.get, call_607939.host, call_607939.base,
                         call_607939.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607939, url, valid)

proc call*(call_607940: Call_GetSendRawEmail_607919; SourceArn: string = "";
          Destinations: JsonNode = nil; Source: string = "";
          RawMessageData: string = ""; Tags: JsonNode = nil;
          ConfigurationSetName: string = ""; Action: string = "SendRawEmail";
          FromArn: string = ""; Version: string = "2010-12-01";
          ReturnPathArn: string = ""): Recallable =
  ## getSendRawEmail
  ## <p>Composes an email message and immediately queues it for sending.</p> <p>This operation is more flexible than the <code>SendEmail</code> API operation. When you use the <code>SendRawEmail</code> operation, you can specify the headers of the message as well as its content. This flexibility is useful, for example, when you want to send a multipart MIME email (such a message that contains both a text and an HTML version). You can also use this operation to send messages that include attachments.</p> <p>The <code>SendRawEmail</code> operation has the following requirements:</p> <ul> <li> <p>You can only send email from <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified email addresses or domains</a>. If you try to send email from an address that isn't verified, the operation results in an "Email address not verified" error.</p> </li> <li> <p>If your account is still in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon SES sandbox</a>, you can only send email to other verified addresses in your account, or to addresses that are associated with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon SES mailbox simulator</a>.</p> </li> <li> <p>The maximum message size, including attachments, is 10 MB.</p> </li> <li> <p>Each message has to include at least one recipient address. A recipient address includes any address on the To:, CC:, or BCC: lines.</p> </li> <li> <p>If you send a single message to more than one recipient address, and one of the recipient addresses isn't in a valid format (that is, it's not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), Amazon SES rejects the entire message, even if the other addresses are valid.</p> </li> <li> <p>Each message can include up to 50 recipient addresses across the To:, CC:, or BCC: lines. If you need to send a single message to more than 50 recipients, you have to split the list of recipient addresses into groups of less than 50 recipients, and send separate messages to each group.</p> </li> <li> <p>Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message parts. However, if Amazon SES has to modify the contents of your message (for example, if you use open and click tracking), 8-bit content isn't preserved. For this reason, we highly recommend that you encode all content that isn't 7-bit ASCII. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME Encoding</a> in the <i>Amazon SES Developer Guide</i>.</p> </li> </ul> <p>Additionally, keep the following considerations in mind when using the <code>SendRawEmail</code> operation:</p> <ul> <li> <p>Although you can customize the message headers when using the <code>SendRawEmail</code> operation, Amazon SES will automatically apply its own <code>Message-ID</code> and <code>Date</code> headers; if you passed these headers when creating the message, they will be overwritten by the values that Amazon SES provides.</p> </li> <li> <p>If you are using sending authorization to send on behalf of another user, <code>SendRawEmail</code> enables you to specify the cross-account identity for the email's Source, From, and Return-Path parameters in one of two ways: you can pass optional parameters <code>SourceArn</code>, <code>FromArn</code>, and/or <code>ReturnPathArn</code> to the API, or you can include the following X-headers in the header of your raw email:</p> <ul> <li> <p> <code>X-SES-SOURCE-ARN</code> </p> </li> <li> <p> <code>X-SES-FROM-ARN</code> </p> </li> <li> <p> <code>X-SES-RETURN-PATH-ARN</code> </p> </li> </ul> <important> <p>Don't include these X-headers in the DKIM signature. Amazon SES removes these before it sends the email.</p> </important> <p>If you only specify the <code>SourceIdentityArn</code> parameter, Amazon SES sets the From and Return-Path addresses to the same identity that you specified.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using Sending Authorization with Amazon SES</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> </ul>
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-SOURCE-ARN</code> in the raw message of the email. If you use both the <code>SourceArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>SourceArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Destinations: JArray
  ##               : A list of destinations for the message, consisting of To:, CC:, and BCC: addresses.
  ##   Source: string
  ##         : <p>The identity's email address. If you do not provide a value for this parameter, you must specify a "From" address in the raw text of the message. (You can also specify both.)</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in<a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note> <p>If you specify the <code>Source</code> parameter and have feedback forwarding enabled, then bounces and complaints will be sent to this email address. This takes precedence over any Return-Path header that you might include in the raw text of the message.</p>
  ##   RawMessageData: string
  ##                 : Represents the raw data of the message.
  ## <p>The raw data of the message. This data needs to base64-encoded if you are accessing Amazon SES directly through the HTTPS interface. If you are accessing Amazon SES using an AWS SDK, the SDK takes care of the base 64-encoding for you. In all cases, the client must ensure that the message format complies with Internet email standards regarding email header fields, MIME types, and MIME encoding.</p> <p>The To:, CC:, and BCC: headers in the raw message can contain a group list.</p> <p>If you are using <code>SendRawEmail</code> with sending authorization, you can include X-headers in the raw message to specify the "Source," "From," and "Return-Path" addresses. For more information, see the documentation for <code>SendRawEmail</code>. </p> <important> <p>Do not include these X-headers in the DKIM signature, because they are removed by Amazon SES before sending the email.</p> </important> <p>For more information, go to the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html">Amazon SES Developer Guide</a>.</p>
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendRawEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendRawEmail</code>.
  ##   Action: string (required)
  ##   FromArn: string
  ##          : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to specify a particular "From" address in the header of the raw email.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-FROM-ARN</code> in the raw message of the email. If you use both the <code>FromArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>FromArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Version: string (required)
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-RETURN-PATH-ARN</code> in the raw message of the email. If you use both the <code>ReturnPathArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>ReturnPathArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  var query_607941 = newJObject()
  add(query_607941, "SourceArn", newJString(SourceArn))
  if Destinations != nil:
    query_607941.add "Destinations", Destinations
  add(query_607941, "Source", newJString(Source))
  add(query_607941, "RawMessage.Data", newJString(RawMessageData))
  if Tags != nil:
    query_607941.add "Tags", Tags
  add(query_607941, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_607941, "Action", newJString(Action))
  add(query_607941, "FromArn", newJString(FromArn))
  add(query_607941, "Version", newJString(Version))
  add(query_607941, "ReturnPathArn", newJString(ReturnPathArn))
  result = call_607940.call(nil, query_607941, nil, nil, nil)

var getSendRawEmail* = Call_GetSendRawEmail_607919(name: "getSendRawEmail",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=SendRawEmail", validator: validate_GetSendRawEmail_607920,
    base: "/", url: url_GetSendRawEmail_607921, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSendTemplatedEmail_607994 = ref object of OpenApiRestCall_605589
proc url_PostSendTemplatedEmail_607996(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSendTemplatedEmail_607995(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Composes an email message using an email template and immediately queues it for sending.</p> <p>In order to send email using the <code>SendTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Calls to the <code>SendTemplatedEmail</code> operation may only include one <code>Destination</code> parameter. A destination is a set of recipients who will receive the same version of the email. The <code>Destination</code> parameter can include up to 50 recipients, across the To:, CC: and BCC: fields.</p> </li> <li> <p>The <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> </ul> <important> <p>If your call to the <code>SendTemplatedEmail</code> operation includes all of the required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES can't render the email because the template contains errors, it doesn't send the email. Additionally, because it already accepted the message, Amazon SES doesn't return a message stating that it was unable to send the email.</p> <p>For these reasons, we highly recommend that you set up Amazon SES to send you notifications when Rendering Failure events occur. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Sending Personalized Email Using the Amazon SES API</a> in the <i>Amazon Simple Email Service Developer Guide</i>.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607997 = query.getOrDefault("Action")
  valid_607997 = validateParameter(valid_607997, JString, required = true,
                                 default = newJString("SendTemplatedEmail"))
  if valid_607997 != nil:
    section.add "Action", valid_607997
  var valid_607998 = query.getOrDefault("Version")
  valid_607998 = validateParameter(valid_607998, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607998 != nil:
    section.add "Version", valid_607998
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607999 = header.getOrDefault("X-Amz-Signature")
  valid_607999 = validateParameter(valid_607999, JString, required = false,
                                 default = nil)
  if valid_607999 != nil:
    section.add "X-Amz-Signature", valid_607999
  var valid_608000 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608000 = validateParameter(valid_608000, JString, required = false,
                                 default = nil)
  if valid_608000 != nil:
    section.add "X-Amz-Content-Sha256", valid_608000
  var valid_608001 = header.getOrDefault("X-Amz-Date")
  valid_608001 = validateParameter(valid_608001, JString, required = false,
                                 default = nil)
  if valid_608001 != nil:
    section.add "X-Amz-Date", valid_608001
  var valid_608002 = header.getOrDefault("X-Amz-Credential")
  valid_608002 = validateParameter(valid_608002, JString, required = false,
                                 default = nil)
  if valid_608002 != nil:
    section.add "X-Amz-Credential", valid_608002
  var valid_608003 = header.getOrDefault("X-Amz-Security-Token")
  valid_608003 = validateParameter(valid_608003, JString, required = false,
                                 default = nil)
  if valid_608003 != nil:
    section.add "X-Amz-Security-Token", valid_608003
  var valid_608004 = header.getOrDefault("X-Amz-Algorithm")
  valid_608004 = validateParameter(valid_608004, JString, required = false,
                                 default = nil)
  if valid_608004 != nil:
    section.add "X-Amz-Algorithm", valid_608004
  var valid_608005 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608005 = validateParameter(valid_608005, JString, required = false,
                                 default = nil)
  if valid_608005 != nil:
    section.add "X-Amz-SignedHeaders", valid_608005
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Source: JString (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in<a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   Destination.CcAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   TemplateData: JString (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   TemplateArn: JString
  ##              : The ARN of the template to use when sending this email.
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Destination.BccAddresses: JArray
  ##                           : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   ReturnPath: JString
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendTemplatedEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   Destination.ToAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendTemplatedEmail</code>.
  ##   Template: JString (required)
  ##           : The template to use when sending this email.
  section = newJObject()
  var valid_608006 = formData.getOrDefault("ReturnPathArn")
  valid_608006 = validateParameter(valid_608006, JString, required = false,
                                 default = nil)
  if valid_608006 != nil:
    section.add "ReturnPathArn", valid_608006
  assert formData != nil,
        "formData argument is necessary due to required `Source` field"
  var valid_608007 = formData.getOrDefault("Source")
  valid_608007 = validateParameter(valid_608007, JString, required = true,
                                 default = nil)
  if valid_608007 != nil:
    section.add "Source", valid_608007
  var valid_608008 = formData.getOrDefault("Destination.CcAddresses")
  valid_608008 = validateParameter(valid_608008, JArray, required = false,
                                 default = nil)
  if valid_608008 != nil:
    section.add "Destination.CcAddresses", valid_608008
  var valid_608009 = formData.getOrDefault("TemplateData")
  valid_608009 = validateParameter(valid_608009, JString, required = true,
                                 default = nil)
  if valid_608009 != nil:
    section.add "TemplateData", valid_608009
  var valid_608010 = formData.getOrDefault("TemplateArn")
  valid_608010 = validateParameter(valid_608010, JString, required = false,
                                 default = nil)
  if valid_608010 != nil:
    section.add "TemplateArn", valid_608010
  var valid_608011 = formData.getOrDefault("SourceArn")
  valid_608011 = validateParameter(valid_608011, JString, required = false,
                                 default = nil)
  if valid_608011 != nil:
    section.add "SourceArn", valid_608011
  var valid_608012 = formData.getOrDefault("ReplyToAddresses")
  valid_608012 = validateParameter(valid_608012, JArray, required = false,
                                 default = nil)
  if valid_608012 != nil:
    section.add "ReplyToAddresses", valid_608012
  var valid_608013 = formData.getOrDefault("Destination.BccAddresses")
  valid_608013 = validateParameter(valid_608013, JArray, required = false,
                                 default = nil)
  if valid_608013 != nil:
    section.add "Destination.BccAddresses", valid_608013
  var valid_608014 = formData.getOrDefault("ReturnPath")
  valid_608014 = validateParameter(valid_608014, JString, required = false,
                                 default = nil)
  if valid_608014 != nil:
    section.add "ReturnPath", valid_608014
  var valid_608015 = formData.getOrDefault("Tags")
  valid_608015 = validateParameter(valid_608015, JArray, required = false,
                                 default = nil)
  if valid_608015 != nil:
    section.add "Tags", valid_608015
  var valid_608016 = formData.getOrDefault("Destination.ToAddresses")
  valid_608016 = validateParameter(valid_608016, JArray, required = false,
                                 default = nil)
  if valid_608016 != nil:
    section.add "Destination.ToAddresses", valid_608016
  var valid_608017 = formData.getOrDefault("ConfigurationSetName")
  valid_608017 = validateParameter(valid_608017, JString, required = false,
                                 default = nil)
  if valid_608017 != nil:
    section.add "ConfigurationSetName", valid_608017
  var valid_608018 = formData.getOrDefault("Template")
  valid_608018 = validateParameter(valid_608018, JString, required = true,
                                 default = nil)
  if valid_608018 != nil:
    section.add "Template", valid_608018
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608019: Call_PostSendTemplatedEmail_607994; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message using an email template and immediately queues it for sending.</p> <p>In order to send email using the <code>SendTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Calls to the <code>SendTemplatedEmail</code> operation may only include one <code>Destination</code> parameter. A destination is a set of recipients who will receive the same version of the email. The <code>Destination</code> parameter can include up to 50 recipients, across the To:, CC: and BCC: fields.</p> </li> <li> <p>The <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> </ul> <important> <p>If your call to the <code>SendTemplatedEmail</code> operation includes all of the required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES can't render the email because the template contains errors, it doesn't send the email. Additionally, because it already accepted the message, Amazon SES doesn't return a message stating that it was unable to send the email.</p> <p>For these reasons, we highly recommend that you set up Amazon SES to send you notifications when Rendering Failure events occur. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Sending Personalized Email Using the Amazon SES API</a> in the <i>Amazon Simple Email Service Developer Guide</i>.</p> </important>
  ## 
  let valid = call_608019.validator(path, query, header, formData, body)
  let scheme = call_608019.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608019.url(scheme.get, call_608019.host, call_608019.base,
                         call_608019.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608019, url, valid)

proc call*(call_608020: Call_PostSendTemplatedEmail_607994; Source: string;
          TemplateData: string; Template: string; ReturnPathArn: string = "";
          DestinationCcAddresses: JsonNode = nil; TemplateArn: string = "";
          SourceArn: string = ""; ReplyToAddresses: JsonNode = nil;
          DestinationBccAddresses: JsonNode = nil;
          Action: string = "SendTemplatedEmail"; ReturnPath: string = "";
          Tags: JsonNode = nil; DestinationToAddresses: JsonNode = nil;
          ConfigurationSetName: string = ""; Version: string = "2010-12-01"): Recallable =
  ## postSendTemplatedEmail
  ## <p>Composes an email message using an email template and immediately queues it for sending.</p> <p>In order to send email using the <code>SendTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Calls to the <code>SendTemplatedEmail</code> operation may only include one <code>Destination</code> parameter. A destination is a set of recipients who will receive the same version of the email. The <code>Destination</code> parameter can include up to 50 recipients, across the To:, CC: and BCC: fields.</p> </li> <li> <p>The <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> </ul> <important> <p>If your call to the <code>SendTemplatedEmail</code> operation includes all of the required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES can't render the email because the template contains errors, it doesn't send the email. Additionally, because it already accepted the message, Amazon SES doesn't return a message stating that it was unable to send the email.</p> <p>For these reasons, we highly recommend that you set up Amazon SES to send you notifications when Rendering Failure events occur. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Sending Personalized Email Using the Amazon SES API</a> in the <i>Amazon Simple Email Service Developer Guide</i>.</p> </important>
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Source: string (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in<a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   DestinationCcAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   TemplateData: string (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   TemplateArn: string
  ##              : The ARN of the template to use when sending this email.
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   DestinationBccAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   Action: string (required)
  ##   ReturnPath: string
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendTemplatedEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   DestinationToAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendTemplatedEmail</code>.
  ##   Template: string (required)
  ##           : The template to use when sending this email.
  ##   Version: string (required)
  var query_608021 = newJObject()
  var formData_608022 = newJObject()
  add(formData_608022, "ReturnPathArn", newJString(ReturnPathArn))
  add(formData_608022, "Source", newJString(Source))
  if DestinationCcAddresses != nil:
    formData_608022.add "Destination.CcAddresses", DestinationCcAddresses
  add(formData_608022, "TemplateData", newJString(TemplateData))
  add(formData_608022, "TemplateArn", newJString(TemplateArn))
  add(formData_608022, "SourceArn", newJString(SourceArn))
  if ReplyToAddresses != nil:
    formData_608022.add "ReplyToAddresses", ReplyToAddresses
  if DestinationBccAddresses != nil:
    formData_608022.add "Destination.BccAddresses", DestinationBccAddresses
  add(query_608021, "Action", newJString(Action))
  add(formData_608022, "ReturnPath", newJString(ReturnPath))
  if Tags != nil:
    formData_608022.add "Tags", Tags
  if DestinationToAddresses != nil:
    formData_608022.add "Destination.ToAddresses", DestinationToAddresses
  add(formData_608022, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_608022, "Template", newJString(Template))
  add(query_608021, "Version", newJString(Version))
  result = call_608020.call(nil, query_608021, nil, formData_608022, nil)

var postSendTemplatedEmail* = Call_PostSendTemplatedEmail_607994(
    name: "postSendTemplatedEmail", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SendTemplatedEmail",
    validator: validate_PostSendTemplatedEmail_607995, base: "/",
    url: url_PostSendTemplatedEmail_607996, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSendTemplatedEmail_607966 = ref object of OpenApiRestCall_605589
proc url_GetSendTemplatedEmail_607968(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSendTemplatedEmail_607967(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Composes an email message using an email template and immediately queues it for sending.</p> <p>In order to send email using the <code>SendTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Calls to the <code>SendTemplatedEmail</code> operation may only include one <code>Destination</code> parameter. A destination is a set of recipients who will receive the same version of the email. The <code>Destination</code> parameter can include up to 50 recipients, across the To:, CC: and BCC: fields.</p> </li> <li> <p>The <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> </ul> <important> <p>If your call to the <code>SendTemplatedEmail</code> operation includes all of the required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES can't render the email because the template contains errors, it doesn't send the email. Additionally, because it already accepted the message, Amazon SES doesn't return a message stating that it was unable to send the email.</p> <p>For these reasons, we highly recommend that you set up Amazon SES to send you notifications when Rendering Failure events occur. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Sending Personalized Email Using the Amazon SES API</a> in the <i>Amazon Simple Email Service Developer Guide</i>.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   ReturnPath: JString
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   TemplateData: JString (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   Source: JString (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in<a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendTemplatedEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendTemplatedEmail</code>.
  ##   Destination.CcAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   Template: JString (required)
  ##           : The template to use when sending this email.
  ##   Action: JString (required)
  ##   Destination.ToAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  ##   Destination.BccAddresses: JArray
  ##                           : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   Version: JString (required)
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   TemplateArn: JString
  ##              : The ARN of the template to use when sending this email.
  section = newJObject()
  var valid_607969 = query.getOrDefault("SourceArn")
  valid_607969 = validateParameter(valid_607969, JString, required = false,
                                 default = nil)
  if valid_607969 != nil:
    section.add "SourceArn", valid_607969
  var valid_607970 = query.getOrDefault("ReturnPath")
  valid_607970 = validateParameter(valid_607970, JString, required = false,
                                 default = nil)
  if valid_607970 != nil:
    section.add "ReturnPath", valid_607970
  assert query != nil,
        "query argument is necessary due to required `TemplateData` field"
  var valid_607971 = query.getOrDefault("TemplateData")
  valid_607971 = validateParameter(valid_607971, JString, required = true,
                                 default = nil)
  if valid_607971 != nil:
    section.add "TemplateData", valid_607971
  var valid_607972 = query.getOrDefault("Source")
  valid_607972 = validateParameter(valid_607972, JString, required = true,
                                 default = nil)
  if valid_607972 != nil:
    section.add "Source", valid_607972
  var valid_607973 = query.getOrDefault("Tags")
  valid_607973 = validateParameter(valid_607973, JArray, required = false,
                                 default = nil)
  if valid_607973 != nil:
    section.add "Tags", valid_607973
  var valid_607974 = query.getOrDefault("ConfigurationSetName")
  valid_607974 = validateParameter(valid_607974, JString, required = false,
                                 default = nil)
  if valid_607974 != nil:
    section.add "ConfigurationSetName", valid_607974
  var valid_607975 = query.getOrDefault("Destination.CcAddresses")
  valid_607975 = validateParameter(valid_607975, JArray, required = false,
                                 default = nil)
  if valid_607975 != nil:
    section.add "Destination.CcAddresses", valid_607975
  var valid_607976 = query.getOrDefault("Template")
  valid_607976 = validateParameter(valid_607976, JString, required = true,
                                 default = nil)
  if valid_607976 != nil:
    section.add "Template", valid_607976
  var valid_607977 = query.getOrDefault("Action")
  valid_607977 = validateParameter(valid_607977, JString, required = true,
                                 default = newJString("SendTemplatedEmail"))
  if valid_607977 != nil:
    section.add "Action", valid_607977
  var valid_607978 = query.getOrDefault("Destination.ToAddresses")
  valid_607978 = validateParameter(valid_607978, JArray, required = false,
                                 default = nil)
  if valid_607978 != nil:
    section.add "Destination.ToAddresses", valid_607978
  var valid_607979 = query.getOrDefault("Destination.BccAddresses")
  valid_607979 = validateParameter(valid_607979, JArray, required = false,
                                 default = nil)
  if valid_607979 != nil:
    section.add "Destination.BccAddresses", valid_607979
  var valid_607980 = query.getOrDefault("Version")
  valid_607980 = validateParameter(valid_607980, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_607980 != nil:
    section.add "Version", valid_607980
  var valid_607981 = query.getOrDefault("ReturnPathArn")
  valid_607981 = validateParameter(valid_607981, JString, required = false,
                                 default = nil)
  if valid_607981 != nil:
    section.add "ReturnPathArn", valid_607981
  var valid_607982 = query.getOrDefault("ReplyToAddresses")
  valid_607982 = validateParameter(valid_607982, JArray, required = false,
                                 default = nil)
  if valid_607982 != nil:
    section.add "ReplyToAddresses", valid_607982
  var valid_607983 = query.getOrDefault("TemplateArn")
  valid_607983 = validateParameter(valid_607983, JString, required = false,
                                 default = nil)
  if valid_607983 != nil:
    section.add "TemplateArn", valid_607983
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607984 = header.getOrDefault("X-Amz-Signature")
  valid_607984 = validateParameter(valid_607984, JString, required = false,
                                 default = nil)
  if valid_607984 != nil:
    section.add "X-Amz-Signature", valid_607984
  var valid_607985 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607985 = validateParameter(valid_607985, JString, required = false,
                                 default = nil)
  if valid_607985 != nil:
    section.add "X-Amz-Content-Sha256", valid_607985
  var valid_607986 = header.getOrDefault("X-Amz-Date")
  valid_607986 = validateParameter(valid_607986, JString, required = false,
                                 default = nil)
  if valid_607986 != nil:
    section.add "X-Amz-Date", valid_607986
  var valid_607987 = header.getOrDefault("X-Amz-Credential")
  valid_607987 = validateParameter(valid_607987, JString, required = false,
                                 default = nil)
  if valid_607987 != nil:
    section.add "X-Amz-Credential", valid_607987
  var valid_607988 = header.getOrDefault("X-Amz-Security-Token")
  valid_607988 = validateParameter(valid_607988, JString, required = false,
                                 default = nil)
  if valid_607988 != nil:
    section.add "X-Amz-Security-Token", valid_607988
  var valid_607989 = header.getOrDefault("X-Amz-Algorithm")
  valid_607989 = validateParameter(valid_607989, JString, required = false,
                                 default = nil)
  if valid_607989 != nil:
    section.add "X-Amz-Algorithm", valid_607989
  var valid_607990 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607990 = validateParameter(valid_607990, JString, required = false,
                                 default = nil)
  if valid_607990 != nil:
    section.add "X-Amz-SignedHeaders", valid_607990
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607991: Call_GetSendTemplatedEmail_607966; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message using an email template and immediately queues it for sending.</p> <p>In order to send email using the <code>SendTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Calls to the <code>SendTemplatedEmail</code> operation may only include one <code>Destination</code> parameter. A destination is a set of recipients who will receive the same version of the email. The <code>Destination</code> parameter can include up to 50 recipients, across the To:, CC: and BCC: fields.</p> </li> <li> <p>The <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> </ul> <important> <p>If your call to the <code>SendTemplatedEmail</code> operation includes all of the required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES can't render the email because the template contains errors, it doesn't send the email. Additionally, because it already accepted the message, Amazon SES doesn't return a message stating that it was unable to send the email.</p> <p>For these reasons, we highly recommend that you set up Amazon SES to send you notifications when Rendering Failure events occur. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Sending Personalized Email Using the Amazon SES API</a> in the <i>Amazon Simple Email Service Developer Guide</i>.</p> </important>
  ## 
  let valid = call_607991.validator(path, query, header, formData, body)
  let scheme = call_607991.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607991.url(scheme.get, call_607991.host, call_607991.base,
                         call_607991.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607991, url, valid)

proc call*(call_607992: Call_GetSendTemplatedEmail_607966; TemplateData: string;
          Source: string; Template: string; SourceArn: string = "";
          ReturnPath: string = ""; Tags: JsonNode = nil;
          ConfigurationSetName: string = ""; DestinationCcAddresses: JsonNode = nil;
          Action: string = "SendTemplatedEmail";
          DestinationToAddresses: JsonNode = nil;
          DestinationBccAddresses: JsonNode = nil; Version: string = "2010-12-01";
          ReturnPathArn: string = ""; ReplyToAddresses: JsonNode = nil;
          TemplateArn: string = ""): Recallable =
  ## getSendTemplatedEmail
  ## <p>Composes an email message using an email template and immediately queues it for sending.</p> <p>In order to send email using the <code>SendTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Calls to the <code>SendTemplatedEmail</code> operation may only include one <code>Destination</code> parameter. A destination is a set of recipients who will receive the same version of the email. The <code>Destination</code> parameter can include up to 50 recipients, across the To:, CC: and BCC: fields.</p> </li> <li> <p>The <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> </ul> <important> <p>If your call to the <code>SendTemplatedEmail</code> operation includes all of the required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES can't render the email because the template contains errors, it doesn't send the email. Additionally, because it already accepted the message, Amazon SES doesn't return a message stating that it was unable to send the email.</p> <p>For these reasons, we highly recommend that you set up Amazon SES to send you notifications when Rendering Failure events occur. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Sending Personalized Email Using the Amazon SES API</a> in the <i>Amazon Simple Email Service Developer Guide</i>.</p> </important>
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   ReturnPath: string
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   TemplateData: string (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   Source: string (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in<a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendTemplatedEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendTemplatedEmail</code>.
  ##   DestinationCcAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   Template: string (required)
  ##           : The template to use when sending this email.
  ##   Action: string (required)
  ##   DestinationToAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  ##   DestinationBccAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   Version: string (required)
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   TemplateArn: string
  ##              : The ARN of the template to use when sending this email.
  var query_607993 = newJObject()
  add(query_607993, "SourceArn", newJString(SourceArn))
  add(query_607993, "ReturnPath", newJString(ReturnPath))
  add(query_607993, "TemplateData", newJString(TemplateData))
  add(query_607993, "Source", newJString(Source))
  if Tags != nil:
    query_607993.add "Tags", Tags
  add(query_607993, "ConfigurationSetName", newJString(ConfigurationSetName))
  if DestinationCcAddresses != nil:
    query_607993.add "Destination.CcAddresses", DestinationCcAddresses
  add(query_607993, "Template", newJString(Template))
  add(query_607993, "Action", newJString(Action))
  if DestinationToAddresses != nil:
    query_607993.add "Destination.ToAddresses", DestinationToAddresses
  if DestinationBccAddresses != nil:
    query_607993.add "Destination.BccAddresses", DestinationBccAddresses
  add(query_607993, "Version", newJString(Version))
  add(query_607993, "ReturnPathArn", newJString(ReturnPathArn))
  if ReplyToAddresses != nil:
    query_607993.add "ReplyToAddresses", ReplyToAddresses
  add(query_607993, "TemplateArn", newJString(TemplateArn))
  result = call_607992.call(nil, query_607993, nil, nil, nil)

var getSendTemplatedEmail* = Call_GetSendTemplatedEmail_607966(
    name: "getSendTemplatedEmail", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SendTemplatedEmail",
    validator: validate_GetSendTemplatedEmail_607967, base: "/",
    url: url_GetSendTemplatedEmail_607968, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetActiveReceiptRuleSet_608039 = ref object of OpenApiRestCall_605589
proc url_PostSetActiveReceiptRuleSet_608041(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetActiveReceiptRuleSet_608040(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the specified receipt rule set as the active receipt rule set.</p> <note> <p>To disable your email-receiving through Amazon SES completely, you can call this API with RuleSetName set to null.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608042 = query.getOrDefault("Action")
  valid_608042 = validateParameter(valid_608042, JString, required = true, default = newJString(
      "SetActiveReceiptRuleSet"))
  if valid_608042 != nil:
    section.add "Action", valid_608042
  var valid_608043 = query.getOrDefault("Version")
  valid_608043 = validateParameter(valid_608043, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_608043 != nil:
    section.add "Version", valid_608043
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608044 = header.getOrDefault("X-Amz-Signature")
  valid_608044 = validateParameter(valid_608044, JString, required = false,
                                 default = nil)
  if valid_608044 != nil:
    section.add "X-Amz-Signature", valid_608044
  var valid_608045 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608045 = validateParameter(valid_608045, JString, required = false,
                                 default = nil)
  if valid_608045 != nil:
    section.add "X-Amz-Content-Sha256", valid_608045
  var valid_608046 = header.getOrDefault("X-Amz-Date")
  valid_608046 = validateParameter(valid_608046, JString, required = false,
                                 default = nil)
  if valid_608046 != nil:
    section.add "X-Amz-Date", valid_608046
  var valid_608047 = header.getOrDefault("X-Amz-Credential")
  valid_608047 = validateParameter(valid_608047, JString, required = false,
                                 default = nil)
  if valid_608047 != nil:
    section.add "X-Amz-Credential", valid_608047
  var valid_608048 = header.getOrDefault("X-Amz-Security-Token")
  valid_608048 = validateParameter(valid_608048, JString, required = false,
                                 default = nil)
  if valid_608048 != nil:
    section.add "X-Amz-Security-Token", valid_608048
  var valid_608049 = header.getOrDefault("X-Amz-Algorithm")
  valid_608049 = validateParameter(valid_608049, JString, required = false,
                                 default = nil)
  if valid_608049 != nil:
    section.add "X-Amz-Algorithm", valid_608049
  var valid_608050 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608050 = validateParameter(valid_608050, JString, required = false,
                                 default = nil)
  if valid_608050 != nil:
    section.add "X-Amz-SignedHeaders", valid_608050
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleSetName: JString
  ##              : The name of the receipt rule set to make active. Setting this value to null disables all email receiving.
  section = newJObject()
  var valid_608051 = formData.getOrDefault("RuleSetName")
  valid_608051 = validateParameter(valid_608051, JString, required = false,
                                 default = nil)
  if valid_608051 != nil:
    section.add "RuleSetName", valid_608051
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608052: Call_PostSetActiveReceiptRuleSet_608039; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the specified receipt rule set as the active receipt rule set.</p> <note> <p>To disable your email-receiving through Amazon SES completely, you can call this API with RuleSetName set to null.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_608052.validator(path, query, header, formData, body)
  let scheme = call_608052.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608052.url(scheme.get, call_608052.host, call_608052.base,
                         call_608052.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608052, url, valid)

proc call*(call_608053: Call_PostSetActiveReceiptRuleSet_608039;
          RuleSetName: string = ""; Action: string = "SetActiveReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## postSetActiveReceiptRuleSet
  ## <p>Sets the specified receipt rule set as the active receipt rule set.</p> <note> <p>To disable your email-receiving through Amazon SES completely, you can call this API with RuleSetName set to null.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string
  ##              : The name of the receipt rule set to make active. Setting this value to null disables all email receiving.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608054 = newJObject()
  var formData_608055 = newJObject()
  add(formData_608055, "RuleSetName", newJString(RuleSetName))
  add(query_608054, "Action", newJString(Action))
  add(query_608054, "Version", newJString(Version))
  result = call_608053.call(nil, query_608054, nil, formData_608055, nil)

var postSetActiveReceiptRuleSet* = Call_PostSetActiveReceiptRuleSet_608039(
    name: "postSetActiveReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SetActiveReceiptRuleSet",
    validator: validate_PostSetActiveReceiptRuleSet_608040, base: "/",
    url: url_PostSetActiveReceiptRuleSet_608041,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetActiveReceiptRuleSet_608023 = ref object of OpenApiRestCall_605589
proc url_GetSetActiveReceiptRuleSet_608025(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetActiveReceiptRuleSet_608024(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the specified receipt rule set as the active receipt rule set.</p> <note> <p>To disable your email-receiving through Amazon SES completely, you can call this API with RuleSetName set to null.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   RuleSetName: JString
  ##              : The name of the receipt rule set to make active. Setting this value to null disables all email receiving.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608026 = query.getOrDefault("Action")
  valid_608026 = validateParameter(valid_608026, JString, required = true, default = newJString(
      "SetActiveReceiptRuleSet"))
  if valid_608026 != nil:
    section.add "Action", valid_608026
  var valid_608027 = query.getOrDefault("RuleSetName")
  valid_608027 = validateParameter(valid_608027, JString, required = false,
                                 default = nil)
  if valid_608027 != nil:
    section.add "RuleSetName", valid_608027
  var valid_608028 = query.getOrDefault("Version")
  valid_608028 = validateParameter(valid_608028, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_608028 != nil:
    section.add "Version", valid_608028
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608029 = header.getOrDefault("X-Amz-Signature")
  valid_608029 = validateParameter(valid_608029, JString, required = false,
                                 default = nil)
  if valid_608029 != nil:
    section.add "X-Amz-Signature", valid_608029
  var valid_608030 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608030 = validateParameter(valid_608030, JString, required = false,
                                 default = nil)
  if valid_608030 != nil:
    section.add "X-Amz-Content-Sha256", valid_608030
  var valid_608031 = header.getOrDefault("X-Amz-Date")
  valid_608031 = validateParameter(valid_608031, JString, required = false,
                                 default = nil)
  if valid_608031 != nil:
    section.add "X-Amz-Date", valid_608031
  var valid_608032 = header.getOrDefault("X-Amz-Credential")
  valid_608032 = validateParameter(valid_608032, JString, required = false,
                                 default = nil)
  if valid_608032 != nil:
    section.add "X-Amz-Credential", valid_608032
  var valid_608033 = header.getOrDefault("X-Amz-Security-Token")
  valid_608033 = validateParameter(valid_608033, JString, required = false,
                                 default = nil)
  if valid_608033 != nil:
    section.add "X-Amz-Security-Token", valid_608033
  var valid_608034 = header.getOrDefault("X-Amz-Algorithm")
  valid_608034 = validateParameter(valid_608034, JString, required = false,
                                 default = nil)
  if valid_608034 != nil:
    section.add "X-Amz-Algorithm", valid_608034
  var valid_608035 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608035 = validateParameter(valid_608035, JString, required = false,
                                 default = nil)
  if valid_608035 != nil:
    section.add "X-Amz-SignedHeaders", valid_608035
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608036: Call_GetSetActiveReceiptRuleSet_608023; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the specified receipt rule set as the active receipt rule set.</p> <note> <p>To disable your email-receiving through Amazon SES completely, you can call this API with RuleSetName set to null.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_608036.validator(path, query, header, formData, body)
  let scheme = call_608036.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608036.url(scheme.get, call_608036.host, call_608036.base,
                         call_608036.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608036, url, valid)

proc call*(call_608037: Call_GetSetActiveReceiptRuleSet_608023;
          Action: string = "SetActiveReceiptRuleSet"; RuleSetName: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## getSetActiveReceiptRuleSet
  ## <p>Sets the specified receipt rule set as the active receipt rule set.</p> <note> <p>To disable your email-receiving through Amazon SES completely, you can call this API with RuleSetName set to null.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   RuleSetName: string
  ##              : The name of the receipt rule set to make active. Setting this value to null disables all email receiving.
  ##   Version: string (required)
  var query_608038 = newJObject()
  add(query_608038, "Action", newJString(Action))
  add(query_608038, "RuleSetName", newJString(RuleSetName))
  add(query_608038, "Version", newJString(Version))
  result = call_608037.call(nil, query_608038, nil, nil, nil)

var getSetActiveReceiptRuleSet* = Call_GetSetActiveReceiptRuleSet_608023(
    name: "getSetActiveReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SetActiveReceiptRuleSet",
    validator: validate_GetSetActiveReceiptRuleSet_608024, base: "/",
    url: url_GetSetActiveReceiptRuleSet_608025,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetIdentityDkimEnabled_608073 = ref object of OpenApiRestCall_605589
proc url_PostSetIdentityDkimEnabled_608075(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetIdentityDkimEnabled_608074(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends from addresses on that domain. If Easy DKIM signing is enabled for an email address, then Amazon SES uses DKIM to sign all email it sends from that address.</p> <note> <p>For email addresses (for example, <code>user@example.com</code>), you can only enable DKIM signing if the corresponding domain (in this case, <code>example.com</code>) has been set up to use Easy DKIM.</p> </note> <p>You can enable DKIM signing for an identity at any time after you start the verification process for the identity, even if the verification process isn't complete. </p> <p>You can execute this operation no more than once per second.</p> <p>For more information about Easy DKIM signing, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608076 = query.getOrDefault("Action")
  valid_608076 = validateParameter(valid_608076, JString, required = true,
                                 default = newJString("SetIdentityDkimEnabled"))
  if valid_608076 != nil:
    section.add "Action", valid_608076
  var valid_608077 = query.getOrDefault("Version")
  valid_608077 = validateParameter(valid_608077, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_608077 != nil:
    section.add "Version", valid_608077
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608078 = header.getOrDefault("X-Amz-Signature")
  valid_608078 = validateParameter(valid_608078, JString, required = false,
                                 default = nil)
  if valid_608078 != nil:
    section.add "X-Amz-Signature", valid_608078
  var valid_608079 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608079 = validateParameter(valid_608079, JString, required = false,
                                 default = nil)
  if valid_608079 != nil:
    section.add "X-Amz-Content-Sha256", valid_608079
  var valid_608080 = header.getOrDefault("X-Amz-Date")
  valid_608080 = validateParameter(valid_608080, JString, required = false,
                                 default = nil)
  if valid_608080 != nil:
    section.add "X-Amz-Date", valid_608080
  var valid_608081 = header.getOrDefault("X-Amz-Credential")
  valid_608081 = validateParameter(valid_608081, JString, required = false,
                                 default = nil)
  if valid_608081 != nil:
    section.add "X-Amz-Credential", valid_608081
  var valid_608082 = header.getOrDefault("X-Amz-Security-Token")
  valid_608082 = validateParameter(valid_608082, JString, required = false,
                                 default = nil)
  if valid_608082 != nil:
    section.add "X-Amz-Security-Token", valid_608082
  var valid_608083 = header.getOrDefault("X-Amz-Algorithm")
  valid_608083 = validateParameter(valid_608083, JString, required = false,
                                 default = nil)
  if valid_608083 != nil:
    section.add "X-Amz-Algorithm", valid_608083
  var valid_608084 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608084 = validateParameter(valid_608084, JString, required = false,
                                 default = nil)
  if valid_608084 != nil:
    section.add "X-Amz-SignedHeaders", valid_608084
  result.add "header", section
  ## parameters in `formData` object:
  ##   DkimEnabled: JBool (required)
  ##              : Sets whether DKIM signing is enabled for an identity. Set to <code>true</code> to enable DKIM signing for this identity; <code>false</code> to disable it. 
  ##   Identity: JString (required)
  ##           : The identity for which DKIM signing should be enabled or disabled.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `DkimEnabled` field"
  var valid_608085 = formData.getOrDefault("DkimEnabled")
  valid_608085 = validateParameter(valid_608085, JBool, required = true, default = nil)
  if valid_608085 != nil:
    section.add "DkimEnabled", valid_608085
  var valid_608086 = formData.getOrDefault("Identity")
  valid_608086 = validateParameter(valid_608086, JString, required = true,
                                 default = nil)
  if valid_608086 != nil:
    section.add "Identity", valid_608086
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608087: Call_PostSetIdentityDkimEnabled_608073; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends from addresses on that domain. If Easy DKIM signing is enabled for an email address, then Amazon SES uses DKIM to sign all email it sends from that address.</p> <note> <p>For email addresses (for example, <code>user@example.com</code>), you can only enable DKIM signing if the corresponding domain (in this case, <code>example.com</code>) has been set up to use Easy DKIM.</p> </note> <p>You can enable DKIM signing for an identity at any time after you start the verification process for the identity, even if the verification process isn't complete. </p> <p>You can execute this operation no more than once per second.</p> <p>For more information about Easy DKIM signing, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_608087.validator(path, query, header, formData, body)
  let scheme = call_608087.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608087.url(scheme.get, call_608087.host, call_608087.base,
                         call_608087.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608087, url, valid)

proc call*(call_608088: Call_PostSetIdentityDkimEnabled_608073; DkimEnabled: bool;
          Identity: string; Action: string = "SetIdentityDkimEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## postSetIdentityDkimEnabled
  ## <p>Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends from addresses on that domain. If Easy DKIM signing is enabled for an email address, then Amazon SES uses DKIM to sign all email it sends from that address.</p> <note> <p>For email addresses (for example, <code>user@example.com</code>), you can only enable DKIM signing if the corresponding domain (in this case, <code>example.com</code>) has been set up to use Easy DKIM.</p> </note> <p>You can enable DKIM signing for an identity at any time after you start the verification process for the identity, even if the verification process isn't complete. </p> <p>You can execute this operation no more than once per second.</p> <p>For more information about Easy DKIM signing, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
  ##   DkimEnabled: bool (required)
  ##              : Sets whether DKIM signing is enabled for an identity. Set to <code>true</code> to enable DKIM signing for this identity; <code>false</code> to disable it. 
  ##   Identity: string (required)
  ##           : The identity for which DKIM signing should be enabled or disabled.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608089 = newJObject()
  var formData_608090 = newJObject()
  add(formData_608090, "DkimEnabled", newJBool(DkimEnabled))
  add(formData_608090, "Identity", newJString(Identity))
  add(query_608089, "Action", newJString(Action))
  add(query_608089, "Version", newJString(Version))
  result = call_608088.call(nil, query_608089, nil, formData_608090, nil)

var postSetIdentityDkimEnabled* = Call_PostSetIdentityDkimEnabled_608073(
    name: "postSetIdentityDkimEnabled", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SetIdentityDkimEnabled",
    validator: validate_PostSetIdentityDkimEnabled_608074, base: "/",
    url: url_PostSetIdentityDkimEnabled_608075,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetIdentityDkimEnabled_608056 = ref object of OpenApiRestCall_605589
proc url_GetSetIdentityDkimEnabled_608058(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetIdentityDkimEnabled_608057(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends from addresses on that domain. If Easy DKIM signing is enabled for an email address, then Amazon SES uses DKIM to sign all email it sends from that address.</p> <note> <p>For email addresses (for example, <code>user@example.com</code>), you can only enable DKIM signing if the corresponding domain (in this case, <code>example.com</code>) has been set up to use Easy DKIM.</p> </note> <p>You can enable DKIM signing for an identity at any time after you start the verification process for the identity, even if the verification process isn't complete. </p> <p>You can execute this operation no more than once per second.</p> <p>For more information about Easy DKIM signing, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : The identity for which DKIM signing should be enabled or disabled.
  ##   Action: JString (required)
  ##   DkimEnabled: JBool (required)
  ##              : Sets whether DKIM signing is enabled for an identity. Set to <code>true</code> to enable DKIM signing for this identity; <code>false</code> to disable it. 
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_608059 = query.getOrDefault("Identity")
  valid_608059 = validateParameter(valid_608059, JString, required = true,
                                 default = nil)
  if valid_608059 != nil:
    section.add "Identity", valid_608059
  var valid_608060 = query.getOrDefault("Action")
  valid_608060 = validateParameter(valid_608060, JString, required = true,
                                 default = newJString("SetIdentityDkimEnabled"))
  if valid_608060 != nil:
    section.add "Action", valid_608060
  var valid_608061 = query.getOrDefault("DkimEnabled")
  valid_608061 = validateParameter(valid_608061, JBool, required = true, default = nil)
  if valid_608061 != nil:
    section.add "DkimEnabled", valid_608061
  var valid_608062 = query.getOrDefault("Version")
  valid_608062 = validateParameter(valid_608062, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_608062 != nil:
    section.add "Version", valid_608062
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608063 = header.getOrDefault("X-Amz-Signature")
  valid_608063 = validateParameter(valid_608063, JString, required = false,
                                 default = nil)
  if valid_608063 != nil:
    section.add "X-Amz-Signature", valid_608063
  var valid_608064 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608064 = validateParameter(valid_608064, JString, required = false,
                                 default = nil)
  if valid_608064 != nil:
    section.add "X-Amz-Content-Sha256", valid_608064
  var valid_608065 = header.getOrDefault("X-Amz-Date")
  valid_608065 = validateParameter(valid_608065, JString, required = false,
                                 default = nil)
  if valid_608065 != nil:
    section.add "X-Amz-Date", valid_608065
  var valid_608066 = header.getOrDefault("X-Amz-Credential")
  valid_608066 = validateParameter(valid_608066, JString, required = false,
                                 default = nil)
  if valid_608066 != nil:
    section.add "X-Amz-Credential", valid_608066
  var valid_608067 = header.getOrDefault("X-Amz-Security-Token")
  valid_608067 = validateParameter(valid_608067, JString, required = false,
                                 default = nil)
  if valid_608067 != nil:
    section.add "X-Amz-Security-Token", valid_608067
  var valid_608068 = header.getOrDefault("X-Amz-Algorithm")
  valid_608068 = validateParameter(valid_608068, JString, required = false,
                                 default = nil)
  if valid_608068 != nil:
    section.add "X-Amz-Algorithm", valid_608068
  var valid_608069 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608069 = validateParameter(valid_608069, JString, required = false,
                                 default = nil)
  if valid_608069 != nil:
    section.add "X-Amz-SignedHeaders", valid_608069
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608070: Call_GetSetIdentityDkimEnabled_608056; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends from addresses on that domain. If Easy DKIM signing is enabled for an email address, then Amazon SES uses DKIM to sign all email it sends from that address.</p> <note> <p>For email addresses (for example, <code>user@example.com</code>), you can only enable DKIM signing if the corresponding domain (in this case, <code>example.com</code>) has been set up to use Easy DKIM.</p> </note> <p>You can enable DKIM signing for an identity at any time after you start the verification process for the identity, even if the verification process isn't complete. </p> <p>You can execute this operation no more than once per second.</p> <p>For more information about Easy DKIM signing, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_608070.validator(path, query, header, formData, body)
  let scheme = call_608070.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608070.url(scheme.get, call_608070.host, call_608070.base,
                         call_608070.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608070, url, valid)

proc call*(call_608071: Call_GetSetIdentityDkimEnabled_608056; Identity: string;
          DkimEnabled: bool; Action: string = "SetIdentityDkimEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## getSetIdentityDkimEnabled
  ## <p>Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends from addresses on that domain. If Easy DKIM signing is enabled for an email address, then Amazon SES uses DKIM to sign all email it sends from that address.</p> <note> <p>For email addresses (for example, <code>user@example.com</code>), you can only enable DKIM signing if the corresponding domain (in this case, <code>example.com</code>) has been set up to use Easy DKIM.</p> </note> <p>You can enable DKIM signing for an identity at any time after you start the verification process for the identity, even if the verification process isn't complete. </p> <p>You can execute this operation no more than once per second.</p> <p>For more information about Easy DKIM signing, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
  ##   Identity: string (required)
  ##           : The identity for which DKIM signing should be enabled or disabled.
  ##   Action: string (required)
  ##   DkimEnabled: bool (required)
  ##              : Sets whether DKIM signing is enabled for an identity. Set to <code>true</code> to enable DKIM signing for this identity; <code>false</code> to disable it. 
  ##   Version: string (required)
  var query_608072 = newJObject()
  add(query_608072, "Identity", newJString(Identity))
  add(query_608072, "Action", newJString(Action))
  add(query_608072, "DkimEnabled", newJBool(DkimEnabled))
  add(query_608072, "Version", newJString(Version))
  result = call_608071.call(nil, query_608072, nil, nil, nil)

var getSetIdentityDkimEnabled* = Call_GetSetIdentityDkimEnabled_608056(
    name: "getSetIdentityDkimEnabled", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SetIdentityDkimEnabled",
    validator: validate_GetSetIdentityDkimEnabled_608057, base: "/",
    url: url_GetSetIdentityDkimEnabled_608058,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetIdentityFeedbackForwardingEnabled_608108 = ref object of OpenApiRestCall_605589
proc url_PostSetIdentityFeedbackForwardingEnabled_608110(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetIdentityFeedbackForwardingEnabled_608109(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given an identity (an email address or a domain), enables or disables whether Amazon SES forwards bounce and complaint notifications as email. Feedback forwarding can only be disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and complaints.</p> <note> <p>Feedback forwarding does not apply to delivery notifications. Delivery notifications are only available through Amazon SNS.</p> </note> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608111 = query.getOrDefault("Action")
  valid_608111 = validateParameter(valid_608111, JString, required = true, default = newJString(
      "SetIdentityFeedbackForwardingEnabled"))
  if valid_608111 != nil:
    section.add "Action", valid_608111
  var valid_608112 = query.getOrDefault("Version")
  valid_608112 = validateParameter(valid_608112, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_608112 != nil:
    section.add "Version", valid_608112
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608113 = header.getOrDefault("X-Amz-Signature")
  valid_608113 = validateParameter(valid_608113, JString, required = false,
                                 default = nil)
  if valid_608113 != nil:
    section.add "X-Amz-Signature", valid_608113
  var valid_608114 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608114 = validateParameter(valid_608114, JString, required = false,
                                 default = nil)
  if valid_608114 != nil:
    section.add "X-Amz-Content-Sha256", valid_608114
  var valid_608115 = header.getOrDefault("X-Amz-Date")
  valid_608115 = validateParameter(valid_608115, JString, required = false,
                                 default = nil)
  if valid_608115 != nil:
    section.add "X-Amz-Date", valid_608115
  var valid_608116 = header.getOrDefault("X-Amz-Credential")
  valid_608116 = validateParameter(valid_608116, JString, required = false,
                                 default = nil)
  if valid_608116 != nil:
    section.add "X-Amz-Credential", valid_608116
  var valid_608117 = header.getOrDefault("X-Amz-Security-Token")
  valid_608117 = validateParameter(valid_608117, JString, required = false,
                                 default = nil)
  if valid_608117 != nil:
    section.add "X-Amz-Security-Token", valid_608117
  var valid_608118 = header.getOrDefault("X-Amz-Algorithm")
  valid_608118 = validateParameter(valid_608118, JString, required = false,
                                 default = nil)
  if valid_608118 != nil:
    section.add "X-Amz-Algorithm", valid_608118
  var valid_608119 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608119 = validateParameter(valid_608119, JString, required = false,
                                 default = nil)
  if valid_608119 != nil:
    section.add "X-Amz-SignedHeaders", valid_608119
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identity: JString (required)
  ##           : The identity for which to set bounce and complaint notification forwarding. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   ForwardingEnabled: JBool (required)
  ##                    : Sets whether Amazon SES will forward bounce and complaint notifications as email. <code>true</code> specifies that Amazon SES will forward bounce and complaint notifications as email, in addition to any Amazon SNS topic publishing otherwise specified. <code>false</code> specifies that Amazon SES will publish bounce and complaint notifications only through Amazon SNS. This value can only be set to <code>false</code> when Amazon SNS topics are set for both <code>Bounce</code> and <code>Complaint</code> notification types.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identity` field"
  var valid_608120 = formData.getOrDefault("Identity")
  valid_608120 = validateParameter(valid_608120, JString, required = true,
                                 default = nil)
  if valid_608120 != nil:
    section.add "Identity", valid_608120
  var valid_608121 = formData.getOrDefault("ForwardingEnabled")
  valid_608121 = validateParameter(valid_608121, JBool, required = true, default = nil)
  if valid_608121 != nil:
    section.add "ForwardingEnabled", valid_608121
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608122: Call_PostSetIdentityFeedbackForwardingEnabled_608108;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given an identity (an email address or a domain), enables or disables whether Amazon SES forwards bounce and complaint notifications as email. Feedback forwarding can only be disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and complaints.</p> <note> <p>Feedback forwarding does not apply to delivery notifications. Delivery notifications are only available through Amazon SNS.</p> </note> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_608122.validator(path, query, header, formData, body)
  let scheme = call_608122.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608122.url(scheme.get, call_608122.host, call_608122.base,
                         call_608122.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608122, url, valid)

proc call*(call_608123: Call_PostSetIdentityFeedbackForwardingEnabled_608108;
          Identity: string; ForwardingEnabled: bool;
          Action: string = "SetIdentityFeedbackForwardingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## postSetIdentityFeedbackForwardingEnabled
  ## <p>Given an identity (an email address or a domain), enables or disables whether Amazon SES forwards bounce and complaint notifications as email. Feedback forwarding can only be disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and complaints.</p> <note> <p>Feedback forwarding does not apply to delivery notifications. Delivery notifications are only available through Amazon SNS.</p> </note> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Identity: string (required)
  ##           : The identity for which to set bounce and complaint notification forwarding. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   Action: string (required)
  ##   ForwardingEnabled: bool (required)
  ##                    : Sets whether Amazon SES will forward bounce and complaint notifications as email. <code>true</code> specifies that Amazon SES will forward bounce and complaint notifications as email, in addition to any Amazon SNS topic publishing otherwise specified. <code>false</code> specifies that Amazon SES will publish bounce and complaint notifications only through Amazon SNS. This value can only be set to <code>false</code> when Amazon SNS topics are set for both <code>Bounce</code> and <code>Complaint</code> notification types.
  ##   Version: string (required)
  var query_608124 = newJObject()
  var formData_608125 = newJObject()
  add(formData_608125, "Identity", newJString(Identity))
  add(query_608124, "Action", newJString(Action))
  add(formData_608125, "ForwardingEnabled", newJBool(ForwardingEnabled))
  add(query_608124, "Version", newJString(Version))
  result = call_608123.call(nil, query_608124, nil, formData_608125, nil)

var postSetIdentityFeedbackForwardingEnabled* = Call_PostSetIdentityFeedbackForwardingEnabled_608108(
    name: "postSetIdentityFeedbackForwardingEnabled", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=SetIdentityFeedbackForwardingEnabled",
    validator: validate_PostSetIdentityFeedbackForwardingEnabled_608109,
    base: "/", url: url_PostSetIdentityFeedbackForwardingEnabled_608110,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetIdentityFeedbackForwardingEnabled_608091 = ref object of OpenApiRestCall_605589
proc url_GetSetIdentityFeedbackForwardingEnabled_608093(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetIdentityFeedbackForwardingEnabled_608092(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given an identity (an email address or a domain), enables or disables whether Amazon SES forwards bounce and complaint notifications as email. Feedback forwarding can only be disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and complaints.</p> <note> <p>Feedback forwarding does not apply to delivery notifications. Delivery notifications are only available through Amazon SNS.</p> </note> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : The identity for which to set bounce and complaint notification forwarding. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   ForwardingEnabled: JBool (required)
  ##                    : Sets whether Amazon SES will forward bounce and complaint notifications as email. <code>true</code> specifies that Amazon SES will forward bounce and complaint notifications as email, in addition to any Amazon SNS topic publishing otherwise specified. <code>false</code> specifies that Amazon SES will publish bounce and complaint notifications only through Amazon SNS. This value can only be set to <code>false</code> when Amazon SNS topics are set for both <code>Bounce</code> and <code>Complaint</code> notification types.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_608094 = query.getOrDefault("Identity")
  valid_608094 = validateParameter(valid_608094, JString, required = true,
                                 default = nil)
  if valid_608094 != nil:
    section.add "Identity", valid_608094
  var valid_608095 = query.getOrDefault("Action")
  valid_608095 = validateParameter(valid_608095, JString, required = true, default = newJString(
      "SetIdentityFeedbackForwardingEnabled"))
  if valid_608095 != nil:
    section.add "Action", valid_608095
  var valid_608096 = query.getOrDefault("Version")
  valid_608096 = validateParameter(valid_608096, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_608096 != nil:
    section.add "Version", valid_608096
  var valid_608097 = query.getOrDefault("ForwardingEnabled")
  valid_608097 = validateParameter(valid_608097, JBool, required = true, default = nil)
  if valid_608097 != nil:
    section.add "ForwardingEnabled", valid_608097
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608098 = header.getOrDefault("X-Amz-Signature")
  valid_608098 = validateParameter(valid_608098, JString, required = false,
                                 default = nil)
  if valid_608098 != nil:
    section.add "X-Amz-Signature", valid_608098
  var valid_608099 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608099 = validateParameter(valid_608099, JString, required = false,
                                 default = nil)
  if valid_608099 != nil:
    section.add "X-Amz-Content-Sha256", valid_608099
  var valid_608100 = header.getOrDefault("X-Amz-Date")
  valid_608100 = validateParameter(valid_608100, JString, required = false,
                                 default = nil)
  if valid_608100 != nil:
    section.add "X-Amz-Date", valid_608100
  var valid_608101 = header.getOrDefault("X-Amz-Credential")
  valid_608101 = validateParameter(valid_608101, JString, required = false,
                                 default = nil)
  if valid_608101 != nil:
    section.add "X-Amz-Credential", valid_608101
  var valid_608102 = header.getOrDefault("X-Amz-Security-Token")
  valid_608102 = validateParameter(valid_608102, JString, required = false,
                                 default = nil)
  if valid_608102 != nil:
    section.add "X-Amz-Security-Token", valid_608102
  var valid_608103 = header.getOrDefault("X-Amz-Algorithm")
  valid_608103 = validateParameter(valid_608103, JString, required = false,
                                 default = nil)
  if valid_608103 != nil:
    section.add "X-Amz-Algorithm", valid_608103
  var valid_608104 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608104 = validateParameter(valid_608104, JString, required = false,
                                 default = nil)
  if valid_608104 != nil:
    section.add "X-Amz-SignedHeaders", valid_608104
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608105: Call_GetSetIdentityFeedbackForwardingEnabled_608091;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given an identity (an email address or a domain), enables or disables whether Amazon SES forwards bounce and complaint notifications as email. Feedback forwarding can only be disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and complaints.</p> <note> <p>Feedback forwarding does not apply to delivery notifications. Delivery notifications are only available through Amazon SNS.</p> </note> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_608105.validator(path, query, header, formData, body)
  let scheme = call_608105.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608105.url(scheme.get, call_608105.host, call_608105.base,
                         call_608105.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608105, url, valid)

proc call*(call_608106: Call_GetSetIdentityFeedbackForwardingEnabled_608091;
          Identity: string; ForwardingEnabled: bool;
          Action: string = "SetIdentityFeedbackForwardingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## getSetIdentityFeedbackForwardingEnabled
  ## <p>Given an identity (an email address or a domain), enables or disables whether Amazon SES forwards bounce and complaint notifications as email. Feedback forwarding can only be disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and complaints.</p> <note> <p>Feedback forwarding does not apply to delivery notifications. Delivery notifications are only available through Amazon SNS.</p> </note> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Identity: string (required)
  ##           : The identity for which to set bounce and complaint notification forwarding. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ForwardingEnabled: bool (required)
  ##                    : Sets whether Amazon SES will forward bounce and complaint notifications as email. <code>true</code> specifies that Amazon SES will forward bounce and complaint notifications as email, in addition to any Amazon SNS topic publishing otherwise specified. <code>false</code> specifies that Amazon SES will publish bounce and complaint notifications only through Amazon SNS. This value can only be set to <code>false</code> when Amazon SNS topics are set for both <code>Bounce</code> and <code>Complaint</code> notification types.
  var query_608107 = newJObject()
  add(query_608107, "Identity", newJString(Identity))
  add(query_608107, "Action", newJString(Action))
  add(query_608107, "Version", newJString(Version))
  add(query_608107, "ForwardingEnabled", newJBool(ForwardingEnabled))
  result = call_608106.call(nil, query_608107, nil, nil, nil)

var getSetIdentityFeedbackForwardingEnabled* = Call_GetSetIdentityFeedbackForwardingEnabled_608091(
    name: "getSetIdentityFeedbackForwardingEnabled", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=SetIdentityFeedbackForwardingEnabled",
    validator: validate_GetSetIdentityFeedbackForwardingEnabled_608092, base: "/",
    url: url_GetSetIdentityFeedbackForwardingEnabled_608093,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetIdentityHeadersInNotificationsEnabled_608144 = ref object of OpenApiRestCall_605589
proc url_PostSetIdentityHeadersInNotificationsEnabled_608146(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetIdentityHeadersInNotificationsEnabled_608145(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given an identity (an email address or a domain), sets whether Amazon SES includes the original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified type.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608147 = query.getOrDefault("Action")
  valid_608147 = validateParameter(valid_608147, JString, required = true, default = newJString(
      "SetIdentityHeadersInNotificationsEnabled"))
  if valid_608147 != nil:
    section.add "Action", valid_608147
  var valid_608148 = query.getOrDefault("Version")
  valid_608148 = validateParameter(valid_608148, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_608148 != nil:
    section.add "Version", valid_608148
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608149 = header.getOrDefault("X-Amz-Signature")
  valid_608149 = validateParameter(valid_608149, JString, required = false,
                                 default = nil)
  if valid_608149 != nil:
    section.add "X-Amz-Signature", valid_608149
  var valid_608150 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608150 = validateParameter(valid_608150, JString, required = false,
                                 default = nil)
  if valid_608150 != nil:
    section.add "X-Amz-Content-Sha256", valid_608150
  var valid_608151 = header.getOrDefault("X-Amz-Date")
  valid_608151 = validateParameter(valid_608151, JString, required = false,
                                 default = nil)
  if valid_608151 != nil:
    section.add "X-Amz-Date", valid_608151
  var valid_608152 = header.getOrDefault("X-Amz-Credential")
  valid_608152 = validateParameter(valid_608152, JString, required = false,
                                 default = nil)
  if valid_608152 != nil:
    section.add "X-Amz-Credential", valid_608152
  var valid_608153 = header.getOrDefault("X-Amz-Security-Token")
  valid_608153 = validateParameter(valid_608153, JString, required = false,
                                 default = nil)
  if valid_608153 != nil:
    section.add "X-Amz-Security-Token", valid_608153
  var valid_608154 = header.getOrDefault("X-Amz-Algorithm")
  valid_608154 = validateParameter(valid_608154, JString, required = false,
                                 default = nil)
  if valid_608154 != nil:
    section.add "X-Amz-Algorithm", valid_608154
  var valid_608155 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608155 = validateParameter(valid_608155, JString, required = false,
                                 default = nil)
  if valid_608155 != nil:
    section.add "X-Amz-SignedHeaders", valid_608155
  result.add "header", section
  ## parameters in `formData` object:
  ##   NotificationType: JString (required)
  ##                   : The notification type for which to enable or disable headers in notifications. 
  ##   Enabled: JBool (required)
  ##          : <p>Sets whether Amazon SES includes the original email headers in Amazon SNS notifications of the specified notification type. A value of <code>true</code> specifies that Amazon SES will include headers in notifications, and a value of <code>false</code> specifies that Amazon SES will not include headers in notifications.</p> <p>This value can only be set when <code>NotificationType</code> is already set to use a particular Amazon SNS topic.</p>
  ##   Identity: JString (required)
  ##           : The identity for which to enable or disable headers in notifications. Examples: <code>user@example.com</code>, <code>example.com</code>.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `NotificationType` field"
  var valid_608156 = formData.getOrDefault("NotificationType")
  valid_608156 = validateParameter(valid_608156, JString, required = true,
                                 default = newJString("Bounce"))
  if valid_608156 != nil:
    section.add "NotificationType", valid_608156
  var valid_608157 = formData.getOrDefault("Enabled")
  valid_608157 = validateParameter(valid_608157, JBool, required = true, default = nil)
  if valid_608157 != nil:
    section.add "Enabled", valid_608157
  var valid_608158 = formData.getOrDefault("Identity")
  valid_608158 = validateParameter(valid_608158, JString, required = true,
                                 default = nil)
  if valid_608158 != nil:
    section.add "Identity", valid_608158
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608159: Call_PostSetIdentityHeadersInNotificationsEnabled_608144;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given an identity (an email address or a domain), sets whether Amazon SES includes the original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified type.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_608159.validator(path, query, header, formData, body)
  let scheme = call_608159.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608159.url(scheme.get, call_608159.host, call_608159.base,
                         call_608159.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608159, url, valid)

proc call*(call_608160: Call_PostSetIdentityHeadersInNotificationsEnabled_608144;
          Enabled: bool; Identity: string; NotificationType: string = "Bounce";
          Action: string = "SetIdentityHeadersInNotificationsEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## postSetIdentityHeadersInNotificationsEnabled
  ## <p>Given an identity (an email address or a domain), sets whether Amazon SES includes the original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified type.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   NotificationType: string (required)
  ##                   : The notification type for which to enable or disable headers in notifications. 
  ##   Enabled: bool (required)
  ##          : <p>Sets whether Amazon SES includes the original email headers in Amazon SNS notifications of the specified notification type. A value of <code>true</code> specifies that Amazon SES will include headers in notifications, and a value of <code>false</code> specifies that Amazon SES will not include headers in notifications.</p> <p>This value can only be set when <code>NotificationType</code> is already set to use a particular Amazon SNS topic.</p>
  ##   Identity: string (required)
  ##           : The identity for which to enable or disable headers in notifications. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608161 = newJObject()
  var formData_608162 = newJObject()
  add(formData_608162, "NotificationType", newJString(NotificationType))
  add(formData_608162, "Enabled", newJBool(Enabled))
  add(formData_608162, "Identity", newJString(Identity))
  add(query_608161, "Action", newJString(Action))
  add(query_608161, "Version", newJString(Version))
  result = call_608160.call(nil, query_608161, nil, formData_608162, nil)

var postSetIdentityHeadersInNotificationsEnabled* = Call_PostSetIdentityHeadersInNotificationsEnabled_608144(
    name: "postSetIdentityHeadersInNotificationsEnabled",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=SetIdentityHeadersInNotificationsEnabled",
    validator: validate_PostSetIdentityHeadersInNotificationsEnabled_608145,
    base: "/", url: url_PostSetIdentityHeadersInNotificationsEnabled_608146,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetIdentityHeadersInNotificationsEnabled_608126 = ref object of OpenApiRestCall_605589
proc url_GetSetIdentityHeadersInNotificationsEnabled_608128(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetIdentityHeadersInNotificationsEnabled_608127(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given an identity (an email address or a domain), sets whether Amazon SES includes the original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified type.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NotificationType: JString (required)
  ##                   : The notification type for which to enable or disable headers in notifications. 
  ##   Enabled: JBool (required)
  ##          : <p>Sets whether Amazon SES includes the original email headers in Amazon SNS notifications of the specified notification type. A value of <code>true</code> specifies that Amazon SES will include headers in notifications, and a value of <code>false</code> specifies that Amazon SES will not include headers in notifications.</p> <p>This value can only be set when <code>NotificationType</code> is already set to use a particular Amazon SNS topic.</p>
  ##   Identity: JString (required)
  ##           : The identity for which to enable or disable headers in notifications. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `NotificationType` field"
  var valid_608129 = query.getOrDefault("NotificationType")
  valid_608129 = validateParameter(valid_608129, JString, required = true,
                                 default = newJString("Bounce"))
  if valid_608129 != nil:
    section.add "NotificationType", valid_608129
  var valid_608130 = query.getOrDefault("Enabled")
  valid_608130 = validateParameter(valid_608130, JBool, required = true, default = nil)
  if valid_608130 != nil:
    section.add "Enabled", valid_608130
  var valid_608131 = query.getOrDefault("Identity")
  valid_608131 = validateParameter(valid_608131, JString, required = true,
                                 default = nil)
  if valid_608131 != nil:
    section.add "Identity", valid_608131
  var valid_608132 = query.getOrDefault("Action")
  valid_608132 = validateParameter(valid_608132, JString, required = true, default = newJString(
      "SetIdentityHeadersInNotificationsEnabled"))
  if valid_608132 != nil:
    section.add "Action", valid_608132
  var valid_608133 = query.getOrDefault("Version")
  valid_608133 = validateParameter(valid_608133, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_608133 != nil:
    section.add "Version", valid_608133
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608134 = header.getOrDefault("X-Amz-Signature")
  valid_608134 = validateParameter(valid_608134, JString, required = false,
                                 default = nil)
  if valid_608134 != nil:
    section.add "X-Amz-Signature", valid_608134
  var valid_608135 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608135 = validateParameter(valid_608135, JString, required = false,
                                 default = nil)
  if valid_608135 != nil:
    section.add "X-Amz-Content-Sha256", valid_608135
  var valid_608136 = header.getOrDefault("X-Amz-Date")
  valid_608136 = validateParameter(valid_608136, JString, required = false,
                                 default = nil)
  if valid_608136 != nil:
    section.add "X-Amz-Date", valid_608136
  var valid_608137 = header.getOrDefault("X-Amz-Credential")
  valid_608137 = validateParameter(valid_608137, JString, required = false,
                                 default = nil)
  if valid_608137 != nil:
    section.add "X-Amz-Credential", valid_608137
  var valid_608138 = header.getOrDefault("X-Amz-Security-Token")
  valid_608138 = validateParameter(valid_608138, JString, required = false,
                                 default = nil)
  if valid_608138 != nil:
    section.add "X-Amz-Security-Token", valid_608138
  var valid_608139 = header.getOrDefault("X-Amz-Algorithm")
  valid_608139 = validateParameter(valid_608139, JString, required = false,
                                 default = nil)
  if valid_608139 != nil:
    section.add "X-Amz-Algorithm", valid_608139
  var valid_608140 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608140 = validateParameter(valid_608140, JString, required = false,
                                 default = nil)
  if valid_608140 != nil:
    section.add "X-Amz-SignedHeaders", valid_608140
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608141: Call_GetSetIdentityHeadersInNotificationsEnabled_608126;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given an identity (an email address or a domain), sets whether Amazon SES includes the original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified type.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_608141.validator(path, query, header, formData, body)
  let scheme = call_608141.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608141.url(scheme.get, call_608141.host, call_608141.base,
                         call_608141.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608141, url, valid)

proc call*(call_608142: Call_GetSetIdentityHeadersInNotificationsEnabled_608126;
          Enabled: bool; Identity: string; NotificationType: string = "Bounce";
          Action: string = "SetIdentityHeadersInNotificationsEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## getSetIdentityHeadersInNotificationsEnabled
  ## <p>Given an identity (an email address or a domain), sets whether Amazon SES includes the original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified type.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   NotificationType: string (required)
  ##                   : The notification type for which to enable or disable headers in notifications. 
  ##   Enabled: bool (required)
  ##          : <p>Sets whether Amazon SES includes the original email headers in Amazon SNS notifications of the specified notification type. A value of <code>true</code> specifies that Amazon SES will include headers in notifications, and a value of <code>false</code> specifies that Amazon SES will not include headers in notifications.</p> <p>This value can only be set when <code>NotificationType</code> is already set to use a particular Amazon SNS topic.</p>
  ##   Identity: string (required)
  ##           : The identity for which to enable or disable headers in notifications. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608143 = newJObject()
  add(query_608143, "NotificationType", newJString(NotificationType))
  add(query_608143, "Enabled", newJBool(Enabled))
  add(query_608143, "Identity", newJString(Identity))
  add(query_608143, "Action", newJString(Action))
  add(query_608143, "Version", newJString(Version))
  result = call_608142.call(nil, query_608143, nil, nil, nil)

var getSetIdentityHeadersInNotificationsEnabled* = Call_GetSetIdentityHeadersInNotificationsEnabled_608126(
    name: "getSetIdentityHeadersInNotificationsEnabled", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=SetIdentityHeadersInNotificationsEnabled",
    validator: validate_GetSetIdentityHeadersInNotificationsEnabled_608127,
    base: "/", url: url_GetSetIdentityHeadersInNotificationsEnabled_608128,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetIdentityMailFromDomain_608181 = ref object of OpenApiRestCall_605589
proc url_PostSetIdentityMailFromDomain_608183(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetIdentityMailFromDomain_608182(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables the custom MAIL FROM domain setup for a verified identity (an email address or a domain).</p> <important> <p>To send emails using the specified MAIL FROM domain, you must add an MX record to your MAIL FROM domain's DNS settings. If you want your emails to pass Sender Policy Framework (SPF) checks, you must also add or update an SPF record. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-set.html">Amazon SES Developer Guide</a>.</p> </important> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608184 = query.getOrDefault("Action")
  valid_608184 = validateParameter(valid_608184, JString, required = true, default = newJString(
      "SetIdentityMailFromDomain"))
  if valid_608184 != nil:
    section.add "Action", valid_608184
  var valid_608185 = query.getOrDefault("Version")
  valid_608185 = validateParameter(valid_608185, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_608185 != nil:
    section.add "Version", valid_608185
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608186 = header.getOrDefault("X-Amz-Signature")
  valid_608186 = validateParameter(valid_608186, JString, required = false,
                                 default = nil)
  if valid_608186 != nil:
    section.add "X-Amz-Signature", valid_608186
  var valid_608187 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608187 = validateParameter(valid_608187, JString, required = false,
                                 default = nil)
  if valid_608187 != nil:
    section.add "X-Amz-Content-Sha256", valid_608187
  var valid_608188 = header.getOrDefault("X-Amz-Date")
  valid_608188 = validateParameter(valid_608188, JString, required = false,
                                 default = nil)
  if valid_608188 != nil:
    section.add "X-Amz-Date", valid_608188
  var valid_608189 = header.getOrDefault("X-Amz-Credential")
  valid_608189 = validateParameter(valid_608189, JString, required = false,
                                 default = nil)
  if valid_608189 != nil:
    section.add "X-Amz-Credential", valid_608189
  var valid_608190 = header.getOrDefault("X-Amz-Security-Token")
  valid_608190 = validateParameter(valid_608190, JString, required = false,
                                 default = nil)
  if valid_608190 != nil:
    section.add "X-Amz-Security-Token", valid_608190
  var valid_608191 = header.getOrDefault("X-Amz-Algorithm")
  valid_608191 = validateParameter(valid_608191, JString, required = false,
                                 default = nil)
  if valid_608191 != nil:
    section.add "X-Amz-Algorithm", valid_608191
  var valid_608192 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608192 = validateParameter(valid_608192, JString, required = false,
                                 default = nil)
  if valid_608192 != nil:
    section.add "X-Amz-SignedHeaders", valid_608192
  result.add "header", section
  ## parameters in `formData` object:
  ##   BehaviorOnMXFailure: JString
  ##                      : <p>The action that you want Amazon SES to take if it cannot successfully read the required MX record when you send an email. If you choose <code>UseDefaultValue</code>, Amazon SES will use amazonses.com (or a subdomain of that) as the MAIL FROM domain. If you choose <code>RejectMessage</code>, Amazon SES will return a <code>MailFromDomainNotVerified</code> error and not send the email.</p> <p>The action specified in <code>BehaviorOnMXFailure</code> is taken when the custom MAIL FROM domain setup is in the <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code> states.</p>
  ##   Identity: JString (required)
  ##           : The verified identity for which you want to enable or disable the specified custom MAIL FROM domain.
  ##   MailFromDomain: JString
  ##                 : The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM domain must 1) be a subdomain of the verified identity, 2) not be used in a "From" address if the MAIL FROM domain is the destination of email feedback forwarding (for more information, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from.html">Amazon SES Developer Guide</a>), and 3) not be used to receive emails. A value of <code>null</code> disables the custom MAIL FROM setting for the identity.
  section = newJObject()
  var valid_608193 = formData.getOrDefault("BehaviorOnMXFailure")
  valid_608193 = validateParameter(valid_608193, JString, required = false,
                                 default = newJString("UseDefaultValue"))
  if valid_608193 != nil:
    section.add "BehaviorOnMXFailure", valid_608193
  assert formData != nil,
        "formData argument is necessary due to required `Identity` field"
  var valid_608194 = formData.getOrDefault("Identity")
  valid_608194 = validateParameter(valid_608194, JString, required = true,
                                 default = nil)
  if valid_608194 != nil:
    section.add "Identity", valid_608194
  var valid_608195 = formData.getOrDefault("MailFromDomain")
  valid_608195 = validateParameter(valid_608195, JString, required = false,
                                 default = nil)
  if valid_608195 != nil:
    section.add "MailFromDomain", valid_608195
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608196: Call_PostSetIdentityMailFromDomain_608181; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Enables or disables the custom MAIL FROM domain setup for a verified identity (an email address or a domain).</p> <important> <p>To send emails using the specified MAIL FROM domain, you must add an MX record to your MAIL FROM domain's DNS settings. If you want your emails to pass Sender Policy Framework (SPF) checks, you must also add or update an SPF record. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-set.html">Amazon SES Developer Guide</a>.</p> </important> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_608196.validator(path, query, header, formData, body)
  let scheme = call_608196.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608196.url(scheme.get, call_608196.host, call_608196.base,
                         call_608196.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608196, url, valid)

proc call*(call_608197: Call_PostSetIdentityMailFromDomain_608181;
          Identity: string; BehaviorOnMXFailure: string = "UseDefaultValue";
          MailFromDomain: string = ""; Action: string = "SetIdentityMailFromDomain";
          Version: string = "2010-12-01"): Recallable =
  ## postSetIdentityMailFromDomain
  ## <p>Enables or disables the custom MAIL FROM domain setup for a verified identity (an email address or a domain).</p> <important> <p>To send emails using the specified MAIL FROM domain, you must add an MX record to your MAIL FROM domain's DNS settings. If you want your emails to pass Sender Policy Framework (SPF) checks, you must also add or update an SPF record. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-set.html">Amazon SES Developer Guide</a>.</p> </important> <p>You can execute this operation no more than once per second.</p>
  ##   BehaviorOnMXFailure: string
  ##                      : <p>The action that you want Amazon SES to take if it cannot successfully read the required MX record when you send an email. If you choose <code>UseDefaultValue</code>, Amazon SES will use amazonses.com (or a subdomain of that) as the MAIL FROM domain. If you choose <code>RejectMessage</code>, Amazon SES will return a <code>MailFromDomainNotVerified</code> error and not send the email.</p> <p>The action specified in <code>BehaviorOnMXFailure</code> is taken when the custom MAIL FROM domain setup is in the <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code> states.</p>
  ##   Identity: string (required)
  ##           : The verified identity for which you want to enable or disable the specified custom MAIL FROM domain.
  ##   MailFromDomain: string
  ##                 : The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM domain must 1) be a subdomain of the verified identity, 2) not be used in a "From" address if the MAIL FROM domain is the destination of email feedback forwarding (for more information, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from.html">Amazon SES Developer Guide</a>), and 3) not be used to receive emails. A value of <code>null</code> disables the custom MAIL FROM setting for the identity.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608198 = newJObject()
  var formData_608199 = newJObject()
  add(formData_608199, "BehaviorOnMXFailure", newJString(BehaviorOnMXFailure))
  add(formData_608199, "Identity", newJString(Identity))
  add(formData_608199, "MailFromDomain", newJString(MailFromDomain))
  add(query_608198, "Action", newJString(Action))
  add(query_608198, "Version", newJString(Version))
  result = call_608197.call(nil, query_608198, nil, formData_608199, nil)

var postSetIdentityMailFromDomain* = Call_PostSetIdentityMailFromDomain_608181(
    name: "postSetIdentityMailFromDomain", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SetIdentityMailFromDomain",
    validator: validate_PostSetIdentityMailFromDomain_608182, base: "/",
    url: url_PostSetIdentityMailFromDomain_608183,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetIdentityMailFromDomain_608163 = ref object of OpenApiRestCall_605589
proc url_GetSetIdentityMailFromDomain_608165(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetIdentityMailFromDomain_608164(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables the custom MAIL FROM domain setup for a verified identity (an email address or a domain).</p> <important> <p>To send emails using the specified MAIL FROM domain, you must add an MX record to your MAIL FROM domain's DNS settings. If you want your emails to pass Sender Policy Framework (SPF) checks, you must also add or update an SPF record. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-set.html">Amazon SES Developer Guide</a>.</p> </important> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MailFromDomain: JString
  ##                 : The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM domain must 1) be a subdomain of the verified identity, 2) not be used in a "From" address if the MAIL FROM domain is the destination of email feedback forwarding (for more information, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from.html">Amazon SES Developer Guide</a>), and 3) not be used to receive emails. A value of <code>null</code> disables the custom MAIL FROM setting for the identity.
  ##   Identity: JString (required)
  ##           : The verified identity for which you want to enable or disable the specified custom MAIL FROM domain.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   BehaviorOnMXFailure: JString
  ##                      : <p>The action that you want Amazon SES to take if it cannot successfully read the required MX record when you send an email. If you choose <code>UseDefaultValue</code>, Amazon SES will use amazonses.com (or a subdomain of that) as the MAIL FROM domain. If you choose <code>RejectMessage</code>, Amazon SES will return a <code>MailFromDomainNotVerified</code> error and not send the email.</p> <p>The action specified in <code>BehaviorOnMXFailure</code> is taken when the custom MAIL FROM domain setup is in the <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code> states.</p>
  section = newJObject()
  var valid_608166 = query.getOrDefault("MailFromDomain")
  valid_608166 = validateParameter(valid_608166, JString, required = false,
                                 default = nil)
  if valid_608166 != nil:
    section.add "MailFromDomain", valid_608166
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_608167 = query.getOrDefault("Identity")
  valid_608167 = validateParameter(valid_608167, JString, required = true,
                                 default = nil)
  if valid_608167 != nil:
    section.add "Identity", valid_608167
  var valid_608168 = query.getOrDefault("Action")
  valid_608168 = validateParameter(valid_608168, JString, required = true, default = newJString(
      "SetIdentityMailFromDomain"))
  if valid_608168 != nil:
    section.add "Action", valid_608168
  var valid_608169 = query.getOrDefault("Version")
  valid_608169 = validateParameter(valid_608169, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_608169 != nil:
    section.add "Version", valid_608169
  var valid_608170 = query.getOrDefault("BehaviorOnMXFailure")
  valid_608170 = validateParameter(valid_608170, JString, required = false,
                                 default = newJString("UseDefaultValue"))
  if valid_608170 != nil:
    section.add "BehaviorOnMXFailure", valid_608170
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608171 = header.getOrDefault("X-Amz-Signature")
  valid_608171 = validateParameter(valid_608171, JString, required = false,
                                 default = nil)
  if valid_608171 != nil:
    section.add "X-Amz-Signature", valid_608171
  var valid_608172 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608172 = validateParameter(valid_608172, JString, required = false,
                                 default = nil)
  if valid_608172 != nil:
    section.add "X-Amz-Content-Sha256", valid_608172
  var valid_608173 = header.getOrDefault("X-Amz-Date")
  valid_608173 = validateParameter(valid_608173, JString, required = false,
                                 default = nil)
  if valid_608173 != nil:
    section.add "X-Amz-Date", valid_608173
  var valid_608174 = header.getOrDefault("X-Amz-Credential")
  valid_608174 = validateParameter(valid_608174, JString, required = false,
                                 default = nil)
  if valid_608174 != nil:
    section.add "X-Amz-Credential", valid_608174
  var valid_608175 = header.getOrDefault("X-Amz-Security-Token")
  valid_608175 = validateParameter(valid_608175, JString, required = false,
                                 default = nil)
  if valid_608175 != nil:
    section.add "X-Amz-Security-Token", valid_608175
  var valid_608176 = header.getOrDefault("X-Amz-Algorithm")
  valid_608176 = validateParameter(valid_608176, JString, required = false,
                                 default = nil)
  if valid_608176 != nil:
    section.add "X-Amz-Algorithm", valid_608176
  var valid_608177 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608177 = validateParameter(valid_608177, JString, required = false,
                                 default = nil)
  if valid_608177 != nil:
    section.add "X-Amz-SignedHeaders", valid_608177
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608178: Call_GetSetIdentityMailFromDomain_608163; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Enables or disables the custom MAIL FROM domain setup for a verified identity (an email address or a domain).</p> <important> <p>To send emails using the specified MAIL FROM domain, you must add an MX record to your MAIL FROM domain's DNS settings. If you want your emails to pass Sender Policy Framework (SPF) checks, you must also add or update an SPF record. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-set.html">Amazon SES Developer Guide</a>.</p> </important> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_608178.validator(path, query, header, formData, body)
  let scheme = call_608178.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608178.url(scheme.get, call_608178.host, call_608178.base,
                         call_608178.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608178, url, valid)

proc call*(call_608179: Call_GetSetIdentityMailFromDomain_608163; Identity: string;
          MailFromDomain: string = ""; Action: string = "SetIdentityMailFromDomain";
          Version: string = "2010-12-01";
          BehaviorOnMXFailure: string = "UseDefaultValue"): Recallable =
  ## getSetIdentityMailFromDomain
  ## <p>Enables or disables the custom MAIL FROM domain setup for a verified identity (an email address or a domain).</p> <important> <p>To send emails using the specified MAIL FROM domain, you must add an MX record to your MAIL FROM domain's DNS settings. If you want your emails to pass Sender Policy Framework (SPF) checks, you must also add or update an SPF record. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-set.html">Amazon SES Developer Guide</a>.</p> </important> <p>You can execute this operation no more than once per second.</p>
  ##   MailFromDomain: string
  ##                 : The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM domain must 1) be a subdomain of the verified identity, 2) not be used in a "From" address if the MAIL FROM domain is the destination of email feedback forwarding (for more information, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from.html">Amazon SES Developer Guide</a>), and 3) not be used to receive emails. A value of <code>null</code> disables the custom MAIL FROM setting for the identity.
  ##   Identity: string (required)
  ##           : The verified identity for which you want to enable or disable the specified custom MAIL FROM domain.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   BehaviorOnMXFailure: string
  ##                      : <p>The action that you want Amazon SES to take if it cannot successfully read the required MX record when you send an email. If you choose <code>UseDefaultValue</code>, Amazon SES will use amazonses.com (or a subdomain of that) as the MAIL FROM domain. If you choose <code>RejectMessage</code>, Amazon SES will return a <code>MailFromDomainNotVerified</code> error and not send the email.</p> <p>The action specified in <code>BehaviorOnMXFailure</code> is taken when the custom MAIL FROM domain setup is in the <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code> states.</p>
  var query_608180 = newJObject()
  add(query_608180, "MailFromDomain", newJString(MailFromDomain))
  add(query_608180, "Identity", newJString(Identity))
  add(query_608180, "Action", newJString(Action))
  add(query_608180, "Version", newJString(Version))
  add(query_608180, "BehaviorOnMXFailure", newJString(BehaviorOnMXFailure))
  result = call_608179.call(nil, query_608180, nil, nil, nil)

var getSetIdentityMailFromDomain* = Call_GetSetIdentityMailFromDomain_608163(
    name: "getSetIdentityMailFromDomain", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SetIdentityMailFromDomain",
    validator: validate_GetSetIdentityMailFromDomain_608164, base: "/",
    url: url_GetSetIdentityMailFromDomain_608165,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetIdentityNotificationTopic_608218 = ref object of OpenApiRestCall_605589
proc url_PostSetIdentityNotificationTopic_608220(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetIdentityNotificationTopic_608219(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use this operation, you specify a verified identity, such as an email address or domain. When you send an email that uses the chosen identity in the Source field, Amazon SES sends notifications to the topic you specified. You can send bounce, complaint, or delivery notifications (or any combination of the three) to the Amazon SNS topic that you specify.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about feedback notification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608221 = query.getOrDefault("Action")
  valid_608221 = validateParameter(valid_608221, JString, required = true, default = newJString(
      "SetIdentityNotificationTopic"))
  if valid_608221 != nil:
    section.add "Action", valid_608221
  var valid_608222 = query.getOrDefault("Version")
  valid_608222 = validateParameter(valid_608222, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_608222 != nil:
    section.add "Version", valid_608222
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608223 = header.getOrDefault("X-Amz-Signature")
  valid_608223 = validateParameter(valid_608223, JString, required = false,
                                 default = nil)
  if valid_608223 != nil:
    section.add "X-Amz-Signature", valid_608223
  var valid_608224 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608224 = validateParameter(valid_608224, JString, required = false,
                                 default = nil)
  if valid_608224 != nil:
    section.add "X-Amz-Content-Sha256", valid_608224
  var valid_608225 = header.getOrDefault("X-Amz-Date")
  valid_608225 = validateParameter(valid_608225, JString, required = false,
                                 default = nil)
  if valid_608225 != nil:
    section.add "X-Amz-Date", valid_608225
  var valid_608226 = header.getOrDefault("X-Amz-Credential")
  valid_608226 = validateParameter(valid_608226, JString, required = false,
                                 default = nil)
  if valid_608226 != nil:
    section.add "X-Amz-Credential", valid_608226
  var valid_608227 = header.getOrDefault("X-Amz-Security-Token")
  valid_608227 = validateParameter(valid_608227, JString, required = false,
                                 default = nil)
  if valid_608227 != nil:
    section.add "X-Amz-Security-Token", valid_608227
  var valid_608228 = header.getOrDefault("X-Amz-Algorithm")
  valid_608228 = validateParameter(valid_608228, JString, required = false,
                                 default = nil)
  if valid_608228 != nil:
    section.add "X-Amz-Algorithm", valid_608228
  var valid_608229 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608229 = validateParameter(valid_608229, JString, required = false,
                                 default = nil)
  if valid_608229 != nil:
    section.add "X-Amz-SignedHeaders", valid_608229
  result.add "header", section
  ## parameters in `formData` object:
  ##   NotificationType: JString (required)
  ##                   : The type of notifications that will be published to the specified Amazon SNS topic.
  ##   Identity: JString (required)
  ##           : <p>The identity (email address or domain) that you want to set the Amazon SNS topic for.</p> <important> <p>You can only specify a verified identity for this parameter.</p> </important> <p>You can specify an identity by using its name or by using its Amazon Resource Name (ARN). The following examples are all valid identities: <code>sender@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p>
  ##   SnsTopic: JString
  ##           : The Amazon Resource Name (ARN) of the Amazon SNS topic. If the parameter is omitted from the request or a null value is passed, <code>SnsTopic</code> is cleared and publishing is disabled.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `NotificationType` field"
  var valid_608230 = formData.getOrDefault("NotificationType")
  valid_608230 = validateParameter(valid_608230, JString, required = true,
                                 default = newJString("Bounce"))
  if valid_608230 != nil:
    section.add "NotificationType", valid_608230
  var valid_608231 = formData.getOrDefault("Identity")
  valid_608231 = validateParameter(valid_608231, JString, required = true,
                                 default = nil)
  if valid_608231 != nil:
    section.add "Identity", valid_608231
  var valid_608232 = formData.getOrDefault("SnsTopic")
  valid_608232 = validateParameter(valid_608232, JString, required = false,
                                 default = nil)
  if valid_608232 != nil:
    section.add "SnsTopic", valid_608232
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608233: Call_PostSetIdentityNotificationTopic_608218;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use this operation, you specify a verified identity, such as an email address or domain. When you send an email that uses the chosen identity in the Source field, Amazon SES sends notifications to the topic you specified. You can send bounce, complaint, or delivery notifications (or any combination of the three) to the Amazon SNS topic that you specify.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about feedback notification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_608233.validator(path, query, header, formData, body)
  let scheme = call_608233.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608233.url(scheme.get, call_608233.host, call_608233.base,
                         call_608233.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608233, url, valid)

proc call*(call_608234: Call_PostSetIdentityNotificationTopic_608218;
          Identity: string; NotificationType: string = "Bounce";
          SnsTopic: string = ""; Action: string = "SetIdentityNotificationTopic";
          Version: string = "2010-12-01"): Recallable =
  ## postSetIdentityNotificationTopic
  ## <p>Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use this operation, you specify a verified identity, such as an email address or domain. When you send an email that uses the chosen identity in the Source field, Amazon SES sends notifications to the topic you specified. You can send bounce, complaint, or delivery notifications (or any combination of the three) to the Amazon SNS topic that you specify.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about feedback notification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   NotificationType: string (required)
  ##                   : The type of notifications that will be published to the specified Amazon SNS topic.
  ##   Identity: string (required)
  ##           : <p>The identity (email address or domain) that you want to set the Amazon SNS topic for.</p> <important> <p>You can only specify a verified identity for this parameter.</p> </important> <p>You can specify an identity by using its name or by using its Amazon Resource Name (ARN). The following examples are all valid identities: <code>sender@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p>
  ##   SnsTopic: string
  ##           : The Amazon Resource Name (ARN) of the Amazon SNS topic. If the parameter is omitted from the request or a null value is passed, <code>SnsTopic</code> is cleared and publishing is disabled.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608235 = newJObject()
  var formData_608236 = newJObject()
  add(formData_608236, "NotificationType", newJString(NotificationType))
  add(formData_608236, "Identity", newJString(Identity))
  add(formData_608236, "SnsTopic", newJString(SnsTopic))
  add(query_608235, "Action", newJString(Action))
  add(query_608235, "Version", newJString(Version))
  result = call_608234.call(nil, query_608235, nil, formData_608236, nil)

var postSetIdentityNotificationTopic* = Call_PostSetIdentityNotificationTopic_608218(
    name: "postSetIdentityNotificationTopic", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SetIdentityNotificationTopic",
    validator: validate_PostSetIdentityNotificationTopic_608219, base: "/",
    url: url_PostSetIdentityNotificationTopic_608220,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetIdentityNotificationTopic_608200 = ref object of OpenApiRestCall_605589
proc url_GetSetIdentityNotificationTopic_608202(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetIdentityNotificationTopic_608201(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use this operation, you specify a verified identity, such as an email address or domain. When you send an email that uses the chosen identity in the Source field, Amazon SES sends notifications to the topic you specified. You can send bounce, complaint, or delivery notifications (or any combination of the three) to the Amazon SNS topic that you specify.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about feedback notification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NotificationType: JString (required)
  ##                   : The type of notifications that will be published to the specified Amazon SNS topic.
  ##   SnsTopic: JString
  ##           : The Amazon Resource Name (ARN) of the Amazon SNS topic. If the parameter is omitted from the request or a null value is passed, <code>SnsTopic</code> is cleared and publishing is disabled.
  ##   Identity: JString (required)
  ##           : <p>The identity (email address or domain) that you want to set the Amazon SNS topic for.</p> <important> <p>You can only specify a verified identity for this parameter.</p> </important> <p>You can specify an identity by using its name or by using its Amazon Resource Name (ARN). The following examples are all valid identities: <code>sender@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `NotificationType` field"
  var valid_608203 = query.getOrDefault("NotificationType")
  valid_608203 = validateParameter(valid_608203, JString, required = true,
                                 default = newJString("Bounce"))
  if valid_608203 != nil:
    section.add "NotificationType", valid_608203
  var valid_608204 = query.getOrDefault("SnsTopic")
  valid_608204 = validateParameter(valid_608204, JString, required = false,
                                 default = nil)
  if valid_608204 != nil:
    section.add "SnsTopic", valid_608204
  var valid_608205 = query.getOrDefault("Identity")
  valid_608205 = validateParameter(valid_608205, JString, required = true,
                                 default = nil)
  if valid_608205 != nil:
    section.add "Identity", valid_608205
  var valid_608206 = query.getOrDefault("Action")
  valid_608206 = validateParameter(valid_608206, JString, required = true, default = newJString(
      "SetIdentityNotificationTopic"))
  if valid_608206 != nil:
    section.add "Action", valid_608206
  var valid_608207 = query.getOrDefault("Version")
  valid_608207 = validateParameter(valid_608207, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_608207 != nil:
    section.add "Version", valid_608207
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608208 = header.getOrDefault("X-Amz-Signature")
  valid_608208 = validateParameter(valid_608208, JString, required = false,
                                 default = nil)
  if valid_608208 != nil:
    section.add "X-Amz-Signature", valid_608208
  var valid_608209 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608209 = validateParameter(valid_608209, JString, required = false,
                                 default = nil)
  if valid_608209 != nil:
    section.add "X-Amz-Content-Sha256", valid_608209
  var valid_608210 = header.getOrDefault("X-Amz-Date")
  valid_608210 = validateParameter(valid_608210, JString, required = false,
                                 default = nil)
  if valid_608210 != nil:
    section.add "X-Amz-Date", valid_608210
  var valid_608211 = header.getOrDefault("X-Amz-Credential")
  valid_608211 = validateParameter(valid_608211, JString, required = false,
                                 default = nil)
  if valid_608211 != nil:
    section.add "X-Amz-Credential", valid_608211
  var valid_608212 = header.getOrDefault("X-Amz-Security-Token")
  valid_608212 = validateParameter(valid_608212, JString, required = false,
                                 default = nil)
  if valid_608212 != nil:
    section.add "X-Amz-Security-Token", valid_608212
  var valid_608213 = header.getOrDefault("X-Amz-Algorithm")
  valid_608213 = validateParameter(valid_608213, JString, required = false,
                                 default = nil)
  if valid_608213 != nil:
    section.add "X-Amz-Algorithm", valid_608213
  var valid_608214 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608214 = validateParameter(valid_608214, JString, required = false,
                                 default = nil)
  if valid_608214 != nil:
    section.add "X-Amz-SignedHeaders", valid_608214
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608215: Call_GetSetIdentityNotificationTopic_608200;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use this operation, you specify a verified identity, such as an email address or domain. When you send an email that uses the chosen identity in the Source field, Amazon SES sends notifications to the topic you specified. You can send bounce, complaint, or delivery notifications (or any combination of the three) to the Amazon SNS topic that you specify.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about feedback notification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_608215.validator(path, query, header, formData, body)
  let scheme = call_608215.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608215.url(scheme.get, call_608215.host, call_608215.base,
                         call_608215.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608215, url, valid)

proc call*(call_608216: Call_GetSetIdentityNotificationTopic_608200;
          Identity: string; NotificationType: string = "Bounce";
          SnsTopic: string = ""; Action: string = "SetIdentityNotificationTopic";
          Version: string = "2010-12-01"): Recallable =
  ## getSetIdentityNotificationTopic
  ## <p>Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use this operation, you specify a verified identity, such as an email address or domain. When you send an email that uses the chosen identity in the Source field, Amazon SES sends notifications to the topic you specified. You can send bounce, complaint, or delivery notifications (or any combination of the three) to the Amazon SNS topic that you specify.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about feedback notification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   NotificationType: string (required)
  ##                   : The type of notifications that will be published to the specified Amazon SNS topic.
  ##   SnsTopic: string
  ##           : The Amazon Resource Name (ARN) of the Amazon SNS topic. If the parameter is omitted from the request or a null value is passed, <code>SnsTopic</code> is cleared and publishing is disabled.
  ##   Identity: string (required)
  ##           : <p>The identity (email address or domain) that you want to set the Amazon SNS topic for.</p> <important> <p>You can only specify a verified identity for this parameter.</p> </important> <p>You can specify an identity by using its name or by using its Amazon Resource Name (ARN). The following examples are all valid identities: <code>sender@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608217 = newJObject()
  add(query_608217, "NotificationType", newJString(NotificationType))
  add(query_608217, "SnsTopic", newJString(SnsTopic))
  add(query_608217, "Identity", newJString(Identity))
  add(query_608217, "Action", newJString(Action))
  add(query_608217, "Version", newJString(Version))
  result = call_608216.call(nil, query_608217, nil, nil, nil)

var getSetIdentityNotificationTopic* = Call_GetSetIdentityNotificationTopic_608200(
    name: "getSetIdentityNotificationTopic", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SetIdentityNotificationTopic",
    validator: validate_GetSetIdentityNotificationTopic_608201, base: "/",
    url: url_GetSetIdentityNotificationTopic_608202,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetReceiptRulePosition_608255 = ref object of OpenApiRestCall_605589
proc url_PostSetReceiptRulePosition_608257(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetReceiptRulePosition_608256(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the position of the specified receipt rule in the receipt rule set.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608258 = query.getOrDefault("Action")
  valid_608258 = validateParameter(valid_608258, JString, required = true,
                                 default = newJString("SetReceiptRulePosition"))
  if valid_608258 != nil:
    section.add "Action", valid_608258
  var valid_608259 = query.getOrDefault("Version")
  valid_608259 = validateParameter(valid_608259, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_608259 != nil:
    section.add "Version", valid_608259
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608260 = header.getOrDefault("X-Amz-Signature")
  valid_608260 = validateParameter(valid_608260, JString, required = false,
                                 default = nil)
  if valid_608260 != nil:
    section.add "X-Amz-Signature", valid_608260
  var valid_608261 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608261 = validateParameter(valid_608261, JString, required = false,
                                 default = nil)
  if valid_608261 != nil:
    section.add "X-Amz-Content-Sha256", valid_608261
  var valid_608262 = header.getOrDefault("X-Amz-Date")
  valid_608262 = validateParameter(valid_608262, JString, required = false,
                                 default = nil)
  if valid_608262 != nil:
    section.add "X-Amz-Date", valid_608262
  var valid_608263 = header.getOrDefault("X-Amz-Credential")
  valid_608263 = validateParameter(valid_608263, JString, required = false,
                                 default = nil)
  if valid_608263 != nil:
    section.add "X-Amz-Credential", valid_608263
  var valid_608264 = header.getOrDefault("X-Amz-Security-Token")
  valid_608264 = validateParameter(valid_608264, JString, required = false,
                                 default = nil)
  if valid_608264 != nil:
    section.add "X-Amz-Security-Token", valid_608264
  var valid_608265 = header.getOrDefault("X-Amz-Algorithm")
  valid_608265 = validateParameter(valid_608265, JString, required = false,
                                 default = nil)
  if valid_608265 != nil:
    section.add "X-Amz-Algorithm", valid_608265
  var valid_608266 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608266 = validateParameter(valid_608266, JString, required = false,
                                 default = nil)
  if valid_608266 != nil:
    section.add "X-Amz-SignedHeaders", valid_608266
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleName: JString (required)
  ##           : The name of the receipt rule to reposition.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that contains the receipt rule to reposition.
  ##   After: JString
  ##        : The name of the receipt rule after which to place the specified receipt rule.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleName` field"
  var valid_608267 = formData.getOrDefault("RuleName")
  valid_608267 = validateParameter(valid_608267, JString, required = true,
                                 default = nil)
  if valid_608267 != nil:
    section.add "RuleName", valid_608267
  var valid_608268 = formData.getOrDefault("RuleSetName")
  valid_608268 = validateParameter(valid_608268, JString, required = true,
                                 default = nil)
  if valid_608268 != nil:
    section.add "RuleSetName", valid_608268
  var valid_608269 = formData.getOrDefault("After")
  valid_608269 = validateParameter(valid_608269, JString, required = false,
                                 default = nil)
  if valid_608269 != nil:
    section.add "After", valid_608269
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608270: Call_PostSetReceiptRulePosition_608255; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the position of the specified receipt rule in the receipt rule set.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_608270.validator(path, query, header, formData, body)
  let scheme = call_608270.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608270.url(scheme.get, call_608270.host, call_608270.base,
                         call_608270.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608270, url, valid)

proc call*(call_608271: Call_PostSetReceiptRulePosition_608255; RuleName: string;
          RuleSetName: string; After: string = "";
          Action: string = "SetReceiptRulePosition"; Version: string = "2010-12-01"): Recallable =
  ## postSetReceiptRulePosition
  ## <p>Sets the position of the specified receipt rule in the receipt rule set.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleName: string (required)
  ##           : The name of the receipt rule to reposition.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that contains the receipt rule to reposition.
  ##   After: string
  ##        : The name of the receipt rule after which to place the specified receipt rule.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608272 = newJObject()
  var formData_608273 = newJObject()
  add(formData_608273, "RuleName", newJString(RuleName))
  add(formData_608273, "RuleSetName", newJString(RuleSetName))
  add(formData_608273, "After", newJString(After))
  add(query_608272, "Action", newJString(Action))
  add(query_608272, "Version", newJString(Version))
  result = call_608271.call(nil, query_608272, nil, formData_608273, nil)

var postSetReceiptRulePosition* = Call_PostSetReceiptRulePosition_608255(
    name: "postSetReceiptRulePosition", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SetReceiptRulePosition",
    validator: validate_PostSetReceiptRulePosition_608256, base: "/",
    url: url_PostSetReceiptRulePosition_608257,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetReceiptRulePosition_608237 = ref object of OpenApiRestCall_605589
proc url_GetSetReceiptRulePosition_608239(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetReceiptRulePosition_608238(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the position of the specified receipt rule in the receipt rule set.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleName: JString (required)
  ##           : The name of the receipt rule to reposition.
  ##   After: JString
  ##        : The name of the receipt rule after which to place the specified receipt rule.
  ##   Action: JString (required)
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that contains the receipt rule to reposition.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleName` field"
  var valid_608240 = query.getOrDefault("RuleName")
  valid_608240 = validateParameter(valid_608240, JString, required = true,
                                 default = nil)
  if valid_608240 != nil:
    section.add "RuleName", valid_608240
  var valid_608241 = query.getOrDefault("After")
  valid_608241 = validateParameter(valid_608241, JString, required = false,
                                 default = nil)
  if valid_608241 != nil:
    section.add "After", valid_608241
  var valid_608242 = query.getOrDefault("Action")
  valid_608242 = validateParameter(valid_608242, JString, required = true,
                                 default = newJString("SetReceiptRulePosition"))
  if valid_608242 != nil:
    section.add "Action", valid_608242
  var valid_608243 = query.getOrDefault("RuleSetName")
  valid_608243 = validateParameter(valid_608243, JString, required = true,
                                 default = nil)
  if valid_608243 != nil:
    section.add "RuleSetName", valid_608243
  var valid_608244 = query.getOrDefault("Version")
  valid_608244 = validateParameter(valid_608244, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_608244 != nil:
    section.add "Version", valid_608244
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608245 = header.getOrDefault("X-Amz-Signature")
  valid_608245 = validateParameter(valid_608245, JString, required = false,
                                 default = nil)
  if valid_608245 != nil:
    section.add "X-Amz-Signature", valid_608245
  var valid_608246 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608246 = validateParameter(valid_608246, JString, required = false,
                                 default = nil)
  if valid_608246 != nil:
    section.add "X-Amz-Content-Sha256", valid_608246
  var valid_608247 = header.getOrDefault("X-Amz-Date")
  valid_608247 = validateParameter(valid_608247, JString, required = false,
                                 default = nil)
  if valid_608247 != nil:
    section.add "X-Amz-Date", valid_608247
  var valid_608248 = header.getOrDefault("X-Amz-Credential")
  valid_608248 = validateParameter(valid_608248, JString, required = false,
                                 default = nil)
  if valid_608248 != nil:
    section.add "X-Amz-Credential", valid_608248
  var valid_608249 = header.getOrDefault("X-Amz-Security-Token")
  valid_608249 = validateParameter(valid_608249, JString, required = false,
                                 default = nil)
  if valid_608249 != nil:
    section.add "X-Amz-Security-Token", valid_608249
  var valid_608250 = header.getOrDefault("X-Amz-Algorithm")
  valid_608250 = validateParameter(valid_608250, JString, required = false,
                                 default = nil)
  if valid_608250 != nil:
    section.add "X-Amz-Algorithm", valid_608250
  var valid_608251 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608251 = validateParameter(valid_608251, JString, required = false,
                                 default = nil)
  if valid_608251 != nil:
    section.add "X-Amz-SignedHeaders", valid_608251
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608252: Call_GetSetReceiptRulePosition_608237; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the position of the specified receipt rule in the receipt rule set.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_608252.validator(path, query, header, formData, body)
  let scheme = call_608252.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608252.url(scheme.get, call_608252.host, call_608252.base,
                         call_608252.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608252, url, valid)

proc call*(call_608253: Call_GetSetReceiptRulePosition_608237; RuleName: string;
          RuleSetName: string; After: string = "";
          Action: string = "SetReceiptRulePosition"; Version: string = "2010-12-01"): Recallable =
  ## getSetReceiptRulePosition
  ## <p>Sets the position of the specified receipt rule in the receipt rule set.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleName: string (required)
  ##           : The name of the receipt rule to reposition.
  ##   After: string
  ##        : The name of the receipt rule after which to place the specified receipt rule.
  ##   Action: string (required)
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that contains the receipt rule to reposition.
  ##   Version: string (required)
  var query_608254 = newJObject()
  add(query_608254, "RuleName", newJString(RuleName))
  add(query_608254, "After", newJString(After))
  add(query_608254, "Action", newJString(Action))
  add(query_608254, "RuleSetName", newJString(RuleSetName))
  add(query_608254, "Version", newJString(Version))
  result = call_608253.call(nil, query_608254, nil, nil, nil)

var getSetReceiptRulePosition* = Call_GetSetReceiptRulePosition_608237(
    name: "getSetReceiptRulePosition", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SetReceiptRulePosition",
    validator: validate_GetSetReceiptRulePosition_608238, base: "/",
    url: url_GetSetReceiptRulePosition_608239,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostTestRenderTemplate_608291 = ref object of OpenApiRestCall_605589
proc url_PostTestRenderTemplate_608293(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostTestRenderTemplate_608292(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a preview of the MIME content of an email when provided with a template and a set of replacement data.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608294 = query.getOrDefault("Action")
  valid_608294 = validateParameter(valid_608294, JString, required = true,
                                 default = newJString("TestRenderTemplate"))
  if valid_608294 != nil:
    section.add "Action", valid_608294
  var valid_608295 = query.getOrDefault("Version")
  valid_608295 = validateParameter(valid_608295, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_608295 != nil:
    section.add "Version", valid_608295
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608296 = header.getOrDefault("X-Amz-Signature")
  valid_608296 = validateParameter(valid_608296, JString, required = false,
                                 default = nil)
  if valid_608296 != nil:
    section.add "X-Amz-Signature", valid_608296
  var valid_608297 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608297 = validateParameter(valid_608297, JString, required = false,
                                 default = nil)
  if valid_608297 != nil:
    section.add "X-Amz-Content-Sha256", valid_608297
  var valid_608298 = header.getOrDefault("X-Amz-Date")
  valid_608298 = validateParameter(valid_608298, JString, required = false,
                                 default = nil)
  if valid_608298 != nil:
    section.add "X-Amz-Date", valid_608298
  var valid_608299 = header.getOrDefault("X-Amz-Credential")
  valid_608299 = validateParameter(valid_608299, JString, required = false,
                                 default = nil)
  if valid_608299 != nil:
    section.add "X-Amz-Credential", valid_608299
  var valid_608300 = header.getOrDefault("X-Amz-Security-Token")
  valid_608300 = validateParameter(valid_608300, JString, required = false,
                                 default = nil)
  if valid_608300 != nil:
    section.add "X-Amz-Security-Token", valid_608300
  var valid_608301 = header.getOrDefault("X-Amz-Algorithm")
  valid_608301 = validateParameter(valid_608301, JString, required = false,
                                 default = nil)
  if valid_608301 != nil:
    section.add "X-Amz-Algorithm", valid_608301
  var valid_608302 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608302 = validateParameter(valid_608302, JString, required = false,
                                 default = nil)
  if valid_608302 != nil:
    section.add "X-Amz-SignedHeaders", valid_608302
  result.add "header", section
  ## parameters in `formData` object:
  ##   TemplateName: JString (required)
  ##               : The name of the template that you want to render.
  ##   TemplateData: JString (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TemplateName` field"
  var valid_608303 = formData.getOrDefault("TemplateName")
  valid_608303 = validateParameter(valid_608303, JString, required = true,
                                 default = nil)
  if valid_608303 != nil:
    section.add "TemplateName", valid_608303
  var valid_608304 = formData.getOrDefault("TemplateData")
  valid_608304 = validateParameter(valid_608304, JString, required = true,
                                 default = nil)
  if valid_608304 != nil:
    section.add "TemplateData", valid_608304
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608305: Call_PostTestRenderTemplate_608291; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a preview of the MIME content of an email when provided with a template and a set of replacement data.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_608305.validator(path, query, header, formData, body)
  let scheme = call_608305.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608305.url(scheme.get, call_608305.host, call_608305.base,
                         call_608305.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608305, url, valid)

proc call*(call_608306: Call_PostTestRenderTemplate_608291; TemplateName: string;
          TemplateData: string; Action: string = "TestRenderTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## postTestRenderTemplate
  ## <p>Creates a preview of the MIME content of an email when provided with a template and a set of replacement data.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateName: string (required)
  ##               : The name of the template that you want to render.
  ##   TemplateData: string (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608307 = newJObject()
  var formData_608308 = newJObject()
  add(formData_608308, "TemplateName", newJString(TemplateName))
  add(formData_608308, "TemplateData", newJString(TemplateData))
  add(query_608307, "Action", newJString(Action))
  add(query_608307, "Version", newJString(Version))
  result = call_608306.call(nil, query_608307, nil, formData_608308, nil)

var postTestRenderTemplate* = Call_PostTestRenderTemplate_608291(
    name: "postTestRenderTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=TestRenderTemplate",
    validator: validate_PostTestRenderTemplate_608292, base: "/",
    url: url_PostTestRenderTemplate_608293, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTestRenderTemplate_608274 = ref object of OpenApiRestCall_605589
proc url_GetTestRenderTemplate_608276(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetTestRenderTemplate_608275(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a preview of the MIME content of an email when provided with a template and a set of replacement data.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TemplateData: JString (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the template that you want to render.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `TemplateData` field"
  var valid_608277 = query.getOrDefault("TemplateData")
  valid_608277 = validateParameter(valid_608277, JString, required = true,
                                 default = nil)
  if valid_608277 != nil:
    section.add "TemplateData", valid_608277
  var valid_608278 = query.getOrDefault("Action")
  valid_608278 = validateParameter(valid_608278, JString, required = true,
                                 default = newJString("TestRenderTemplate"))
  if valid_608278 != nil:
    section.add "Action", valid_608278
  var valid_608279 = query.getOrDefault("Version")
  valid_608279 = validateParameter(valid_608279, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_608279 != nil:
    section.add "Version", valid_608279
  var valid_608280 = query.getOrDefault("TemplateName")
  valid_608280 = validateParameter(valid_608280, JString, required = true,
                                 default = nil)
  if valid_608280 != nil:
    section.add "TemplateName", valid_608280
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608281 = header.getOrDefault("X-Amz-Signature")
  valid_608281 = validateParameter(valid_608281, JString, required = false,
                                 default = nil)
  if valid_608281 != nil:
    section.add "X-Amz-Signature", valid_608281
  var valid_608282 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608282 = validateParameter(valid_608282, JString, required = false,
                                 default = nil)
  if valid_608282 != nil:
    section.add "X-Amz-Content-Sha256", valid_608282
  var valid_608283 = header.getOrDefault("X-Amz-Date")
  valid_608283 = validateParameter(valid_608283, JString, required = false,
                                 default = nil)
  if valid_608283 != nil:
    section.add "X-Amz-Date", valid_608283
  var valid_608284 = header.getOrDefault("X-Amz-Credential")
  valid_608284 = validateParameter(valid_608284, JString, required = false,
                                 default = nil)
  if valid_608284 != nil:
    section.add "X-Amz-Credential", valid_608284
  var valid_608285 = header.getOrDefault("X-Amz-Security-Token")
  valid_608285 = validateParameter(valid_608285, JString, required = false,
                                 default = nil)
  if valid_608285 != nil:
    section.add "X-Amz-Security-Token", valid_608285
  var valid_608286 = header.getOrDefault("X-Amz-Algorithm")
  valid_608286 = validateParameter(valid_608286, JString, required = false,
                                 default = nil)
  if valid_608286 != nil:
    section.add "X-Amz-Algorithm", valid_608286
  var valid_608287 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608287 = validateParameter(valid_608287, JString, required = false,
                                 default = nil)
  if valid_608287 != nil:
    section.add "X-Amz-SignedHeaders", valid_608287
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608288: Call_GetTestRenderTemplate_608274; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a preview of the MIME content of an email when provided with a template and a set of replacement data.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_608288.validator(path, query, header, formData, body)
  let scheme = call_608288.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608288.url(scheme.get, call_608288.host, call_608288.base,
                         call_608288.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608288, url, valid)

proc call*(call_608289: Call_GetTestRenderTemplate_608274; TemplateData: string;
          TemplateName: string; Action: string = "TestRenderTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## getTestRenderTemplate
  ## <p>Creates a preview of the MIME content of an email when provided with a template and a set of replacement data.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateData: string (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the template that you want to render.
  var query_608290 = newJObject()
  add(query_608290, "TemplateData", newJString(TemplateData))
  add(query_608290, "Action", newJString(Action))
  add(query_608290, "Version", newJString(Version))
  add(query_608290, "TemplateName", newJString(TemplateName))
  result = call_608289.call(nil, query_608290, nil, nil, nil)

var getTestRenderTemplate* = Call_GetTestRenderTemplate_608274(
    name: "getTestRenderTemplate", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=TestRenderTemplate",
    validator: validate_GetTestRenderTemplate_608275, base: "/",
    url: url_GetTestRenderTemplate_608276, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateAccountSendingEnabled_608325 = ref object of OpenApiRestCall_605589
proc url_PostUpdateAccountSendingEnabled_608327(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateAccountSendingEnabled_608326(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables email sending across your entire Amazon SES account in the current AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending across your Amazon SES account in a given AWS Region when reputation metrics (such as your bounce or complaint rates) reach certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608328 = query.getOrDefault("Action")
  valid_608328 = validateParameter(valid_608328, JString, required = true, default = newJString(
      "UpdateAccountSendingEnabled"))
  if valid_608328 != nil:
    section.add "Action", valid_608328
  var valid_608329 = query.getOrDefault("Version")
  valid_608329 = validateParameter(valid_608329, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_608329 != nil:
    section.add "Version", valid_608329
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608330 = header.getOrDefault("X-Amz-Signature")
  valid_608330 = validateParameter(valid_608330, JString, required = false,
                                 default = nil)
  if valid_608330 != nil:
    section.add "X-Amz-Signature", valid_608330
  var valid_608331 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608331 = validateParameter(valid_608331, JString, required = false,
                                 default = nil)
  if valid_608331 != nil:
    section.add "X-Amz-Content-Sha256", valid_608331
  var valid_608332 = header.getOrDefault("X-Amz-Date")
  valid_608332 = validateParameter(valid_608332, JString, required = false,
                                 default = nil)
  if valid_608332 != nil:
    section.add "X-Amz-Date", valid_608332
  var valid_608333 = header.getOrDefault("X-Amz-Credential")
  valid_608333 = validateParameter(valid_608333, JString, required = false,
                                 default = nil)
  if valid_608333 != nil:
    section.add "X-Amz-Credential", valid_608333
  var valid_608334 = header.getOrDefault("X-Amz-Security-Token")
  valid_608334 = validateParameter(valid_608334, JString, required = false,
                                 default = nil)
  if valid_608334 != nil:
    section.add "X-Amz-Security-Token", valid_608334
  var valid_608335 = header.getOrDefault("X-Amz-Algorithm")
  valid_608335 = validateParameter(valid_608335, JString, required = false,
                                 default = nil)
  if valid_608335 != nil:
    section.add "X-Amz-Algorithm", valid_608335
  var valid_608336 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608336 = validateParameter(valid_608336, JString, required = false,
                                 default = nil)
  if valid_608336 != nil:
    section.add "X-Amz-SignedHeaders", valid_608336
  result.add "header", section
  ## parameters in `formData` object:
  ##   Enabled: JBool
  ##          : Describes whether email sending is enabled or disabled for your Amazon SES account in the current AWS Region.
  section = newJObject()
  var valid_608337 = formData.getOrDefault("Enabled")
  valid_608337 = validateParameter(valid_608337, JBool, required = false, default = nil)
  if valid_608337 != nil:
    section.add "Enabled", valid_608337
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608338: Call_PostUpdateAccountSendingEnabled_608325;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables or disables email sending across your entire Amazon SES account in the current AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending across your Amazon SES account in a given AWS Region when reputation metrics (such as your bounce or complaint rates) reach certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_608338.validator(path, query, header, formData, body)
  let scheme = call_608338.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608338.url(scheme.get, call_608338.host, call_608338.base,
                         call_608338.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608338, url, valid)

proc call*(call_608339: Call_PostUpdateAccountSendingEnabled_608325;
          Enabled: bool = false; Action: string = "UpdateAccountSendingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## postUpdateAccountSendingEnabled
  ## <p>Enables or disables email sending across your entire Amazon SES account in the current AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending across your Amazon SES account in a given AWS Region when reputation metrics (such as your bounce or complaint rates) reach certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Enabled: bool
  ##          : Describes whether email sending is enabled or disabled for your Amazon SES account in the current AWS Region.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608340 = newJObject()
  var formData_608341 = newJObject()
  add(formData_608341, "Enabled", newJBool(Enabled))
  add(query_608340, "Action", newJString(Action))
  add(query_608340, "Version", newJString(Version))
  result = call_608339.call(nil, query_608340, nil, formData_608341, nil)

var postUpdateAccountSendingEnabled* = Call_PostUpdateAccountSendingEnabled_608325(
    name: "postUpdateAccountSendingEnabled", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=UpdateAccountSendingEnabled",
    validator: validate_PostUpdateAccountSendingEnabled_608326, base: "/",
    url: url_PostUpdateAccountSendingEnabled_608327,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateAccountSendingEnabled_608309 = ref object of OpenApiRestCall_605589
proc url_GetUpdateAccountSendingEnabled_608311(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateAccountSendingEnabled_608310(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables email sending across your entire Amazon SES account in the current AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending across your Amazon SES account in a given AWS Region when reputation metrics (such as your bounce or complaint rates) reach certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Enabled: JBool
  ##          : Describes whether email sending is enabled or disabled for your Amazon SES account in the current AWS Region.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_608312 = query.getOrDefault("Enabled")
  valid_608312 = validateParameter(valid_608312, JBool, required = false, default = nil)
  if valid_608312 != nil:
    section.add "Enabled", valid_608312
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608313 = query.getOrDefault("Action")
  valid_608313 = validateParameter(valid_608313, JString, required = true, default = newJString(
      "UpdateAccountSendingEnabled"))
  if valid_608313 != nil:
    section.add "Action", valid_608313
  var valid_608314 = query.getOrDefault("Version")
  valid_608314 = validateParameter(valid_608314, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_608314 != nil:
    section.add "Version", valid_608314
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608315 = header.getOrDefault("X-Amz-Signature")
  valid_608315 = validateParameter(valid_608315, JString, required = false,
                                 default = nil)
  if valid_608315 != nil:
    section.add "X-Amz-Signature", valid_608315
  var valid_608316 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608316 = validateParameter(valid_608316, JString, required = false,
                                 default = nil)
  if valid_608316 != nil:
    section.add "X-Amz-Content-Sha256", valid_608316
  var valid_608317 = header.getOrDefault("X-Amz-Date")
  valid_608317 = validateParameter(valid_608317, JString, required = false,
                                 default = nil)
  if valid_608317 != nil:
    section.add "X-Amz-Date", valid_608317
  var valid_608318 = header.getOrDefault("X-Amz-Credential")
  valid_608318 = validateParameter(valid_608318, JString, required = false,
                                 default = nil)
  if valid_608318 != nil:
    section.add "X-Amz-Credential", valid_608318
  var valid_608319 = header.getOrDefault("X-Amz-Security-Token")
  valid_608319 = validateParameter(valid_608319, JString, required = false,
                                 default = nil)
  if valid_608319 != nil:
    section.add "X-Amz-Security-Token", valid_608319
  var valid_608320 = header.getOrDefault("X-Amz-Algorithm")
  valid_608320 = validateParameter(valid_608320, JString, required = false,
                                 default = nil)
  if valid_608320 != nil:
    section.add "X-Amz-Algorithm", valid_608320
  var valid_608321 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608321 = validateParameter(valid_608321, JString, required = false,
                                 default = nil)
  if valid_608321 != nil:
    section.add "X-Amz-SignedHeaders", valid_608321
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608322: Call_GetUpdateAccountSendingEnabled_608309; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Enables or disables email sending across your entire Amazon SES account in the current AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending across your Amazon SES account in a given AWS Region when reputation metrics (such as your bounce or complaint rates) reach certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_608322.validator(path, query, header, formData, body)
  let scheme = call_608322.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608322.url(scheme.get, call_608322.host, call_608322.base,
                         call_608322.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608322, url, valid)

proc call*(call_608323: Call_GetUpdateAccountSendingEnabled_608309;
          Enabled: bool = false; Action: string = "UpdateAccountSendingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## getUpdateAccountSendingEnabled
  ## <p>Enables or disables email sending across your entire Amazon SES account in the current AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending across your Amazon SES account in a given AWS Region when reputation metrics (such as your bounce or complaint rates) reach certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Enabled: bool
  ##          : Describes whether email sending is enabled or disabled for your Amazon SES account in the current AWS Region.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608324 = newJObject()
  add(query_608324, "Enabled", newJBool(Enabled))
  add(query_608324, "Action", newJString(Action))
  add(query_608324, "Version", newJString(Version))
  result = call_608323.call(nil, query_608324, nil, nil, nil)

var getUpdateAccountSendingEnabled* = Call_GetUpdateAccountSendingEnabled_608309(
    name: "getUpdateAccountSendingEnabled", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=UpdateAccountSendingEnabled",
    validator: validate_GetUpdateAccountSendingEnabled_608310, base: "/",
    url: url_GetUpdateAccountSendingEnabled_608311,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateConfigurationSetEventDestination_608364 = ref object of OpenApiRestCall_605589
proc url_PostUpdateConfigurationSetEventDestination_608366(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateConfigurationSetEventDestination_608365(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the event destination of a configuration set. Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608367 = query.getOrDefault("Action")
  valid_608367 = validateParameter(valid_608367, JString, required = true, default = newJString(
      "UpdateConfigurationSetEventDestination"))
  if valid_608367 != nil:
    section.add "Action", valid_608367
  var valid_608368 = query.getOrDefault("Version")
  valid_608368 = validateParameter(valid_608368, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_608368 != nil:
    section.add "Version", valid_608368
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608369 = header.getOrDefault("X-Amz-Signature")
  valid_608369 = validateParameter(valid_608369, JString, required = false,
                                 default = nil)
  if valid_608369 != nil:
    section.add "X-Amz-Signature", valid_608369
  var valid_608370 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608370 = validateParameter(valid_608370, JString, required = false,
                                 default = nil)
  if valid_608370 != nil:
    section.add "X-Amz-Content-Sha256", valid_608370
  var valid_608371 = header.getOrDefault("X-Amz-Date")
  valid_608371 = validateParameter(valid_608371, JString, required = false,
                                 default = nil)
  if valid_608371 != nil:
    section.add "X-Amz-Date", valid_608371
  var valid_608372 = header.getOrDefault("X-Amz-Credential")
  valid_608372 = validateParameter(valid_608372, JString, required = false,
                                 default = nil)
  if valid_608372 != nil:
    section.add "X-Amz-Credential", valid_608372
  var valid_608373 = header.getOrDefault("X-Amz-Security-Token")
  valid_608373 = validateParameter(valid_608373, JString, required = false,
                                 default = nil)
  if valid_608373 != nil:
    section.add "X-Amz-Security-Token", valid_608373
  var valid_608374 = header.getOrDefault("X-Amz-Algorithm")
  valid_608374 = validateParameter(valid_608374, JString, required = false,
                                 default = nil)
  if valid_608374 != nil:
    section.add "X-Amz-Algorithm", valid_608374
  var valid_608375 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608375 = validateParameter(valid_608375, JString, required = false,
                                 default = nil)
  if valid_608375 != nil:
    section.add "X-Amz-SignedHeaders", valid_608375
  result.add "header", section
  ## parameters in `formData` object:
  ##   EventDestination.Name: JString
  ##                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestination.MatchingEventTypes: JArray
  ##                                      : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   EventDestination.Enabled: JString
  ##                           : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that contains the event destination that you want to update.
  ##   EventDestination.CloudWatchDestination: JString
  ##                                         : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   EventDestination.KinesisFirehoseDestination: JString
  ##                                              : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   EventDestination.SNSDestination: JString
  ##                                  : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  section = newJObject()
  var valid_608376 = formData.getOrDefault("EventDestination.Name")
  valid_608376 = validateParameter(valid_608376, JString, required = false,
                                 default = nil)
  if valid_608376 != nil:
    section.add "EventDestination.Name", valid_608376
  var valid_608377 = formData.getOrDefault("EventDestination.MatchingEventTypes")
  valid_608377 = validateParameter(valid_608377, JArray, required = false,
                                 default = nil)
  if valid_608377 != nil:
    section.add "EventDestination.MatchingEventTypes", valid_608377
  var valid_608378 = formData.getOrDefault("EventDestination.Enabled")
  valid_608378 = validateParameter(valid_608378, JString, required = false,
                                 default = nil)
  if valid_608378 != nil:
    section.add "EventDestination.Enabled", valid_608378
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_608379 = formData.getOrDefault("ConfigurationSetName")
  valid_608379 = validateParameter(valid_608379, JString, required = true,
                                 default = nil)
  if valid_608379 != nil:
    section.add "ConfigurationSetName", valid_608379
  var valid_608380 = formData.getOrDefault("EventDestination.CloudWatchDestination")
  valid_608380 = validateParameter(valid_608380, JString, required = false,
                                 default = nil)
  if valid_608380 != nil:
    section.add "EventDestination.CloudWatchDestination", valid_608380
  var valid_608381 = formData.getOrDefault("EventDestination.KinesisFirehoseDestination")
  valid_608381 = validateParameter(valid_608381, JString, required = false,
                                 default = nil)
  if valid_608381 != nil:
    section.add "EventDestination.KinesisFirehoseDestination", valid_608381
  var valid_608382 = formData.getOrDefault("EventDestination.SNSDestination")
  valid_608382 = validateParameter(valid_608382, JString, required = false,
                                 default = nil)
  if valid_608382 != nil:
    section.add "EventDestination.SNSDestination", valid_608382
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608383: Call_PostUpdateConfigurationSetEventDestination_608364;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Updates the event destination of a configuration set. Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_608383.validator(path, query, header, formData, body)
  let scheme = call_608383.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608383.url(scheme.get, call_608383.host, call_608383.base,
                         call_608383.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608383, url, valid)

proc call*(call_608384: Call_PostUpdateConfigurationSetEventDestination_608364;
          ConfigurationSetName: string; EventDestinationName: string = "";
          EventDestinationMatchingEventTypes: JsonNode = nil;
          EventDestinationEnabled: string = "";
          Action: string = "UpdateConfigurationSetEventDestination";
          Version: string = "2010-12-01";
          EventDestinationCloudWatchDestination: string = "";
          EventDestinationKinesisFirehoseDestination: string = "";
          EventDestinationSNSDestination: string = ""): Recallable =
  ## postUpdateConfigurationSetEventDestination
  ## <p>Updates the event destination of a configuration set. Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>You can execute this operation no more than once per second.</p>
  ##   EventDestinationName: string
  ##                       : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestinationMatchingEventTypes: JArray
  ##                                     : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   EventDestinationEnabled: string
  ##                          : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that contains the event destination that you want to update.
  ##   Version: string (required)
  ##   EventDestinationCloudWatchDestination: string
  ##                                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   EventDestinationKinesisFirehoseDestination: string
  ##                                             : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   EventDestinationSNSDestination: string
  ##                                 : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  var query_608385 = newJObject()
  var formData_608386 = newJObject()
  add(formData_608386, "EventDestination.Name", newJString(EventDestinationName))
  if EventDestinationMatchingEventTypes != nil:
    formData_608386.add "EventDestination.MatchingEventTypes",
                       EventDestinationMatchingEventTypes
  add(formData_608386, "EventDestination.Enabled",
      newJString(EventDestinationEnabled))
  add(query_608385, "Action", newJString(Action))
  add(formData_608386, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_608385, "Version", newJString(Version))
  add(formData_608386, "EventDestination.CloudWatchDestination",
      newJString(EventDestinationCloudWatchDestination))
  add(formData_608386, "EventDestination.KinesisFirehoseDestination",
      newJString(EventDestinationKinesisFirehoseDestination))
  add(formData_608386, "EventDestination.SNSDestination",
      newJString(EventDestinationSNSDestination))
  result = call_608384.call(nil, query_608385, nil, formData_608386, nil)

var postUpdateConfigurationSetEventDestination* = Call_PostUpdateConfigurationSetEventDestination_608364(
    name: "postUpdateConfigurationSetEventDestination", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetEventDestination",
    validator: validate_PostUpdateConfigurationSetEventDestination_608365,
    base: "/", url: url_PostUpdateConfigurationSetEventDestination_608366,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateConfigurationSetEventDestination_608342 = ref object of OpenApiRestCall_605589
proc url_GetUpdateConfigurationSetEventDestination_608344(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateConfigurationSetEventDestination_608343(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the event destination of a configuration set. Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EventDestination.Enabled: JString
  ##                           : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestination.SNSDestination: JString
  ##                                  : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that contains the event destination that you want to update.
  ##   Action: JString (required)
  ##   EventDestination.Name: JString
  ##                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestination.KinesisFirehoseDestination: JString
  ##                                              : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   EventDestination.CloudWatchDestination: JString
  ##                                         : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   Version: JString (required)
  ##   EventDestination.MatchingEventTypes: JArray
  ##                                      : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  section = newJObject()
  var valid_608345 = query.getOrDefault("EventDestination.Enabled")
  valid_608345 = validateParameter(valid_608345, JString, required = false,
                                 default = nil)
  if valid_608345 != nil:
    section.add "EventDestination.Enabled", valid_608345
  var valid_608346 = query.getOrDefault("EventDestination.SNSDestination")
  valid_608346 = validateParameter(valid_608346, JString, required = false,
                                 default = nil)
  if valid_608346 != nil:
    section.add "EventDestination.SNSDestination", valid_608346
  assert query != nil, "query argument is necessary due to required `ConfigurationSetName` field"
  var valid_608347 = query.getOrDefault("ConfigurationSetName")
  valid_608347 = validateParameter(valid_608347, JString, required = true,
                                 default = nil)
  if valid_608347 != nil:
    section.add "ConfigurationSetName", valid_608347
  var valid_608348 = query.getOrDefault("Action")
  valid_608348 = validateParameter(valid_608348, JString, required = true, default = newJString(
      "UpdateConfigurationSetEventDestination"))
  if valid_608348 != nil:
    section.add "Action", valid_608348
  var valid_608349 = query.getOrDefault("EventDestination.Name")
  valid_608349 = validateParameter(valid_608349, JString, required = false,
                                 default = nil)
  if valid_608349 != nil:
    section.add "EventDestination.Name", valid_608349
  var valid_608350 = query.getOrDefault("EventDestination.KinesisFirehoseDestination")
  valid_608350 = validateParameter(valid_608350, JString, required = false,
                                 default = nil)
  if valid_608350 != nil:
    section.add "EventDestination.KinesisFirehoseDestination", valid_608350
  var valid_608351 = query.getOrDefault("EventDestination.CloudWatchDestination")
  valid_608351 = validateParameter(valid_608351, JString, required = false,
                                 default = nil)
  if valid_608351 != nil:
    section.add "EventDestination.CloudWatchDestination", valid_608351
  var valid_608352 = query.getOrDefault("Version")
  valid_608352 = validateParameter(valid_608352, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_608352 != nil:
    section.add "Version", valid_608352
  var valid_608353 = query.getOrDefault("EventDestination.MatchingEventTypes")
  valid_608353 = validateParameter(valid_608353, JArray, required = false,
                                 default = nil)
  if valid_608353 != nil:
    section.add "EventDestination.MatchingEventTypes", valid_608353
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608354 = header.getOrDefault("X-Amz-Signature")
  valid_608354 = validateParameter(valid_608354, JString, required = false,
                                 default = nil)
  if valid_608354 != nil:
    section.add "X-Amz-Signature", valid_608354
  var valid_608355 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608355 = validateParameter(valid_608355, JString, required = false,
                                 default = nil)
  if valid_608355 != nil:
    section.add "X-Amz-Content-Sha256", valid_608355
  var valid_608356 = header.getOrDefault("X-Amz-Date")
  valid_608356 = validateParameter(valid_608356, JString, required = false,
                                 default = nil)
  if valid_608356 != nil:
    section.add "X-Amz-Date", valid_608356
  var valid_608357 = header.getOrDefault("X-Amz-Credential")
  valid_608357 = validateParameter(valid_608357, JString, required = false,
                                 default = nil)
  if valid_608357 != nil:
    section.add "X-Amz-Credential", valid_608357
  var valid_608358 = header.getOrDefault("X-Amz-Security-Token")
  valid_608358 = validateParameter(valid_608358, JString, required = false,
                                 default = nil)
  if valid_608358 != nil:
    section.add "X-Amz-Security-Token", valid_608358
  var valid_608359 = header.getOrDefault("X-Amz-Algorithm")
  valid_608359 = validateParameter(valid_608359, JString, required = false,
                                 default = nil)
  if valid_608359 != nil:
    section.add "X-Amz-Algorithm", valid_608359
  var valid_608360 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608360 = validateParameter(valid_608360, JString, required = false,
                                 default = nil)
  if valid_608360 != nil:
    section.add "X-Amz-SignedHeaders", valid_608360
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608361: Call_GetUpdateConfigurationSetEventDestination_608342;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Updates the event destination of a configuration set. Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_608361.validator(path, query, header, formData, body)
  let scheme = call_608361.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608361.url(scheme.get, call_608361.host, call_608361.base,
                         call_608361.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608361, url, valid)

proc call*(call_608362: Call_GetUpdateConfigurationSetEventDestination_608342;
          ConfigurationSetName: string; EventDestinationEnabled: string = "";
          EventDestinationSNSDestination: string = "";
          Action: string = "UpdateConfigurationSetEventDestination";
          EventDestinationName: string = "";
          EventDestinationKinesisFirehoseDestination: string = "";
          EventDestinationCloudWatchDestination: string = "";
          Version: string = "2010-12-01";
          EventDestinationMatchingEventTypes: JsonNode = nil): Recallable =
  ## getUpdateConfigurationSetEventDestination
  ## <p>Updates the event destination of a configuration set. Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>You can execute this operation no more than once per second.</p>
  ##   EventDestinationEnabled: string
  ##                          : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestinationSNSDestination: string
  ##                                 : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that contains the event destination that you want to update.
  ##   Action: string (required)
  ##   EventDestinationName: string
  ##                       : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestinationKinesisFirehoseDestination: string
  ##                                             : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   EventDestinationCloudWatchDestination: string
  ##                                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   Version: string (required)
  ##   EventDestinationMatchingEventTypes: JArray
  ##                                     : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  var query_608363 = newJObject()
  add(query_608363, "EventDestination.Enabled",
      newJString(EventDestinationEnabled))
  add(query_608363, "EventDestination.SNSDestination",
      newJString(EventDestinationSNSDestination))
  add(query_608363, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_608363, "Action", newJString(Action))
  add(query_608363, "EventDestination.Name", newJString(EventDestinationName))
  add(query_608363, "EventDestination.KinesisFirehoseDestination",
      newJString(EventDestinationKinesisFirehoseDestination))
  add(query_608363, "EventDestination.CloudWatchDestination",
      newJString(EventDestinationCloudWatchDestination))
  add(query_608363, "Version", newJString(Version))
  if EventDestinationMatchingEventTypes != nil:
    query_608363.add "EventDestination.MatchingEventTypes",
                    EventDestinationMatchingEventTypes
  result = call_608362.call(nil, query_608363, nil, nil, nil)

var getUpdateConfigurationSetEventDestination* = Call_GetUpdateConfigurationSetEventDestination_608342(
    name: "getUpdateConfigurationSetEventDestination", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetEventDestination",
    validator: validate_GetUpdateConfigurationSetEventDestination_608343,
    base: "/", url: url_GetUpdateConfigurationSetEventDestination_608344,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateConfigurationSetReputationMetricsEnabled_608404 = ref object of OpenApiRestCall_605589
proc url_PostUpdateConfigurationSetReputationMetricsEnabled_608406(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateConfigurationSetReputationMetricsEnabled_608405(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## <p>Enables or disables the publishing of reputation metrics for emails sent using a specific configuration set in a given AWS Region. Reputation metrics include bounce and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can create alarms when bounce or complaint rates exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608407 = query.getOrDefault("Action")
  valid_608407 = validateParameter(valid_608407, JString, required = true, default = newJString(
      "UpdateConfigurationSetReputationMetricsEnabled"))
  if valid_608407 != nil:
    section.add "Action", valid_608407
  var valid_608408 = query.getOrDefault("Version")
  valid_608408 = validateParameter(valid_608408, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_608408 != nil:
    section.add "Version", valid_608408
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608409 = header.getOrDefault("X-Amz-Signature")
  valid_608409 = validateParameter(valid_608409, JString, required = false,
                                 default = nil)
  if valid_608409 != nil:
    section.add "X-Amz-Signature", valid_608409
  var valid_608410 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608410 = validateParameter(valid_608410, JString, required = false,
                                 default = nil)
  if valid_608410 != nil:
    section.add "X-Amz-Content-Sha256", valid_608410
  var valid_608411 = header.getOrDefault("X-Amz-Date")
  valid_608411 = validateParameter(valid_608411, JString, required = false,
                                 default = nil)
  if valid_608411 != nil:
    section.add "X-Amz-Date", valid_608411
  var valid_608412 = header.getOrDefault("X-Amz-Credential")
  valid_608412 = validateParameter(valid_608412, JString, required = false,
                                 default = nil)
  if valid_608412 != nil:
    section.add "X-Amz-Credential", valid_608412
  var valid_608413 = header.getOrDefault("X-Amz-Security-Token")
  valid_608413 = validateParameter(valid_608413, JString, required = false,
                                 default = nil)
  if valid_608413 != nil:
    section.add "X-Amz-Security-Token", valid_608413
  var valid_608414 = header.getOrDefault("X-Amz-Algorithm")
  valid_608414 = validateParameter(valid_608414, JString, required = false,
                                 default = nil)
  if valid_608414 != nil:
    section.add "X-Amz-Algorithm", valid_608414
  var valid_608415 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608415 = validateParameter(valid_608415, JString, required = false,
                                 default = nil)
  if valid_608415 != nil:
    section.add "X-Amz-SignedHeaders", valid_608415
  result.add "header", section
  ## parameters in `formData` object:
  ##   Enabled: JBool (required)
  ##          : Describes whether or not Amazon SES will publish reputation metrics for the configuration set, such as bounce and complaint rates, to Amazon CloudWatch.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that you want to update.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Enabled` field"
  var valid_608416 = formData.getOrDefault("Enabled")
  valid_608416 = validateParameter(valid_608416, JBool, required = true, default = nil)
  if valid_608416 != nil:
    section.add "Enabled", valid_608416
  var valid_608417 = formData.getOrDefault("ConfigurationSetName")
  valid_608417 = validateParameter(valid_608417, JString, required = true,
                                 default = nil)
  if valid_608417 != nil:
    section.add "ConfigurationSetName", valid_608417
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608418: Call_PostUpdateConfigurationSetReputationMetricsEnabled_608404;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables or disables the publishing of reputation metrics for emails sent using a specific configuration set in a given AWS Region. Reputation metrics include bounce and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can create alarms when bounce or complaint rates exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_608418.validator(path, query, header, formData, body)
  let scheme = call_608418.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608418.url(scheme.get, call_608418.host, call_608418.base,
                         call_608418.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608418, url, valid)

proc call*(call_608419: Call_PostUpdateConfigurationSetReputationMetricsEnabled_608404;
          Enabled: bool; ConfigurationSetName: string;
          Action: string = "UpdateConfigurationSetReputationMetricsEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## postUpdateConfigurationSetReputationMetricsEnabled
  ## <p>Enables or disables the publishing of reputation metrics for emails sent using a specific configuration set in a given AWS Region. Reputation metrics include bounce and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can create alarms when bounce or complaint rates exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Enabled: bool (required)
  ##          : Describes whether or not Amazon SES will publish reputation metrics for the configuration set, such as bounce and complaint rates, to Amazon CloudWatch.
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Version: string (required)
  var query_608420 = newJObject()
  var formData_608421 = newJObject()
  add(formData_608421, "Enabled", newJBool(Enabled))
  add(query_608420, "Action", newJString(Action))
  add(formData_608421, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_608420, "Version", newJString(Version))
  result = call_608419.call(nil, query_608420, nil, formData_608421, nil)

var postUpdateConfigurationSetReputationMetricsEnabled* = Call_PostUpdateConfigurationSetReputationMetricsEnabled_608404(
    name: "postUpdateConfigurationSetReputationMetricsEnabled",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetReputationMetricsEnabled",
    validator: validate_PostUpdateConfigurationSetReputationMetricsEnabled_608405,
    base: "/", url: url_PostUpdateConfigurationSetReputationMetricsEnabled_608406,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateConfigurationSetReputationMetricsEnabled_608387 = ref object of OpenApiRestCall_605589
proc url_GetUpdateConfigurationSetReputationMetricsEnabled_608389(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateConfigurationSetReputationMetricsEnabled_608388(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## <p>Enables or disables the publishing of reputation metrics for emails sent using a specific configuration set in a given AWS Region. Reputation metrics include bounce and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can create alarms when bounce or complaint rates exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Enabled: JBool (required)
  ##          : Describes whether or not Amazon SES will publish reputation metrics for the configuration set, such as bounce and complaint rates, to Amazon CloudWatch.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ConfigurationSetName` field"
  var valid_608390 = query.getOrDefault("ConfigurationSetName")
  valid_608390 = validateParameter(valid_608390, JString, required = true,
                                 default = nil)
  if valid_608390 != nil:
    section.add "ConfigurationSetName", valid_608390
  var valid_608391 = query.getOrDefault("Enabled")
  valid_608391 = validateParameter(valid_608391, JBool, required = true, default = nil)
  if valid_608391 != nil:
    section.add "Enabled", valid_608391
  var valid_608392 = query.getOrDefault("Action")
  valid_608392 = validateParameter(valid_608392, JString, required = true, default = newJString(
      "UpdateConfigurationSetReputationMetricsEnabled"))
  if valid_608392 != nil:
    section.add "Action", valid_608392
  var valid_608393 = query.getOrDefault("Version")
  valid_608393 = validateParameter(valid_608393, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_608393 != nil:
    section.add "Version", valid_608393
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608394 = header.getOrDefault("X-Amz-Signature")
  valid_608394 = validateParameter(valid_608394, JString, required = false,
                                 default = nil)
  if valid_608394 != nil:
    section.add "X-Amz-Signature", valid_608394
  var valid_608395 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608395 = validateParameter(valid_608395, JString, required = false,
                                 default = nil)
  if valid_608395 != nil:
    section.add "X-Amz-Content-Sha256", valid_608395
  var valid_608396 = header.getOrDefault("X-Amz-Date")
  valid_608396 = validateParameter(valid_608396, JString, required = false,
                                 default = nil)
  if valid_608396 != nil:
    section.add "X-Amz-Date", valid_608396
  var valid_608397 = header.getOrDefault("X-Amz-Credential")
  valid_608397 = validateParameter(valid_608397, JString, required = false,
                                 default = nil)
  if valid_608397 != nil:
    section.add "X-Amz-Credential", valid_608397
  var valid_608398 = header.getOrDefault("X-Amz-Security-Token")
  valid_608398 = validateParameter(valid_608398, JString, required = false,
                                 default = nil)
  if valid_608398 != nil:
    section.add "X-Amz-Security-Token", valid_608398
  var valid_608399 = header.getOrDefault("X-Amz-Algorithm")
  valid_608399 = validateParameter(valid_608399, JString, required = false,
                                 default = nil)
  if valid_608399 != nil:
    section.add "X-Amz-Algorithm", valid_608399
  var valid_608400 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608400 = validateParameter(valid_608400, JString, required = false,
                                 default = nil)
  if valid_608400 != nil:
    section.add "X-Amz-SignedHeaders", valid_608400
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608401: Call_GetUpdateConfigurationSetReputationMetricsEnabled_608387;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables or disables the publishing of reputation metrics for emails sent using a specific configuration set in a given AWS Region. Reputation metrics include bounce and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can create alarms when bounce or complaint rates exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_608401.validator(path, query, header, formData, body)
  let scheme = call_608401.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608401.url(scheme.get, call_608401.host, call_608401.base,
                         call_608401.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608401, url, valid)

proc call*(call_608402: Call_GetUpdateConfigurationSetReputationMetricsEnabled_608387;
          ConfigurationSetName: string; Enabled: bool;
          Action: string = "UpdateConfigurationSetReputationMetricsEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## getUpdateConfigurationSetReputationMetricsEnabled
  ## <p>Enables or disables the publishing of reputation metrics for emails sent using a specific configuration set in a given AWS Region. Reputation metrics include bounce and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can create alarms when bounce or complaint rates exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Enabled: bool (required)
  ##          : Describes whether or not Amazon SES will publish reputation metrics for the configuration set, such as bounce and complaint rates, to Amazon CloudWatch.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608403 = newJObject()
  add(query_608403, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_608403, "Enabled", newJBool(Enabled))
  add(query_608403, "Action", newJString(Action))
  add(query_608403, "Version", newJString(Version))
  result = call_608402.call(nil, query_608403, nil, nil, nil)

var getUpdateConfigurationSetReputationMetricsEnabled* = Call_GetUpdateConfigurationSetReputationMetricsEnabled_608387(
    name: "getUpdateConfigurationSetReputationMetricsEnabled",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetReputationMetricsEnabled",
    validator: validate_GetUpdateConfigurationSetReputationMetricsEnabled_608388,
    base: "/", url: url_GetUpdateConfigurationSetReputationMetricsEnabled_608389,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateConfigurationSetSendingEnabled_608439 = ref object of OpenApiRestCall_605589
proc url_PostUpdateConfigurationSetSendingEnabled_608441(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateConfigurationSetSendingEnabled_608440(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables email sending for messages sent using a specific configuration set in a given AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending for a configuration set when the reputation metrics for that configuration set (such as your bounce on complaint rate) exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608442 = query.getOrDefault("Action")
  valid_608442 = validateParameter(valid_608442, JString, required = true, default = newJString(
      "UpdateConfigurationSetSendingEnabled"))
  if valid_608442 != nil:
    section.add "Action", valid_608442
  var valid_608443 = query.getOrDefault("Version")
  valid_608443 = validateParameter(valid_608443, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_608443 != nil:
    section.add "Version", valid_608443
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608444 = header.getOrDefault("X-Amz-Signature")
  valid_608444 = validateParameter(valid_608444, JString, required = false,
                                 default = nil)
  if valid_608444 != nil:
    section.add "X-Amz-Signature", valid_608444
  var valid_608445 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608445 = validateParameter(valid_608445, JString, required = false,
                                 default = nil)
  if valid_608445 != nil:
    section.add "X-Amz-Content-Sha256", valid_608445
  var valid_608446 = header.getOrDefault("X-Amz-Date")
  valid_608446 = validateParameter(valid_608446, JString, required = false,
                                 default = nil)
  if valid_608446 != nil:
    section.add "X-Amz-Date", valid_608446
  var valid_608447 = header.getOrDefault("X-Amz-Credential")
  valid_608447 = validateParameter(valid_608447, JString, required = false,
                                 default = nil)
  if valid_608447 != nil:
    section.add "X-Amz-Credential", valid_608447
  var valid_608448 = header.getOrDefault("X-Amz-Security-Token")
  valid_608448 = validateParameter(valid_608448, JString, required = false,
                                 default = nil)
  if valid_608448 != nil:
    section.add "X-Amz-Security-Token", valid_608448
  var valid_608449 = header.getOrDefault("X-Amz-Algorithm")
  valid_608449 = validateParameter(valid_608449, JString, required = false,
                                 default = nil)
  if valid_608449 != nil:
    section.add "X-Amz-Algorithm", valid_608449
  var valid_608450 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608450 = validateParameter(valid_608450, JString, required = false,
                                 default = nil)
  if valid_608450 != nil:
    section.add "X-Amz-SignedHeaders", valid_608450
  result.add "header", section
  ## parameters in `formData` object:
  ##   Enabled: JBool (required)
  ##          : Describes whether email sending is enabled or disabled for the configuration set. 
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that you want to update.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Enabled` field"
  var valid_608451 = formData.getOrDefault("Enabled")
  valid_608451 = validateParameter(valid_608451, JBool, required = true, default = nil)
  if valid_608451 != nil:
    section.add "Enabled", valid_608451
  var valid_608452 = formData.getOrDefault("ConfigurationSetName")
  valid_608452 = validateParameter(valid_608452, JString, required = true,
                                 default = nil)
  if valid_608452 != nil:
    section.add "ConfigurationSetName", valid_608452
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608453: Call_PostUpdateConfigurationSetSendingEnabled_608439;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables or disables email sending for messages sent using a specific configuration set in a given AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending for a configuration set when the reputation metrics for that configuration set (such as your bounce on complaint rate) exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_608453.validator(path, query, header, formData, body)
  let scheme = call_608453.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608453.url(scheme.get, call_608453.host, call_608453.base,
                         call_608453.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608453, url, valid)

proc call*(call_608454: Call_PostUpdateConfigurationSetSendingEnabled_608439;
          Enabled: bool; ConfigurationSetName: string;
          Action: string = "UpdateConfigurationSetSendingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## postUpdateConfigurationSetSendingEnabled
  ## <p>Enables or disables email sending for messages sent using a specific configuration set in a given AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending for a configuration set when the reputation metrics for that configuration set (such as your bounce on complaint rate) exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Enabled: bool (required)
  ##          : Describes whether email sending is enabled or disabled for the configuration set. 
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Version: string (required)
  var query_608455 = newJObject()
  var formData_608456 = newJObject()
  add(formData_608456, "Enabled", newJBool(Enabled))
  add(query_608455, "Action", newJString(Action))
  add(formData_608456, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_608455, "Version", newJString(Version))
  result = call_608454.call(nil, query_608455, nil, formData_608456, nil)

var postUpdateConfigurationSetSendingEnabled* = Call_PostUpdateConfigurationSetSendingEnabled_608439(
    name: "postUpdateConfigurationSetSendingEnabled", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetSendingEnabled",
    validator: validate_PostUpdateConfigurationSetSendingEnabled_608440,
    base: "/", url: url_PostUpdateConfigurationSetSendingEnabled_608441,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateConfigurationSetSendingEnabled_608422 = ref object of OpenApiRestCall_605589
proc url_GetUpdateConfigurationSetSendingEnabled_608424(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateConfigurationSetSendingEnabled_608423(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables email sending for messages sent using a specific configuration set in a given AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending for a configuration set when the reputation metrics for that configuration set (such as your bounce on complaint rate) exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Enabled: JBool (required)
  ##          : Describes whether email sending is enabled or disabled for the configuration set. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ConfigurationSetName` field"
  var valid_608425 = query.getOrDefault("ConfigurationSetName")
  valid_608425 = validateParameter(valid_608425, JString, required = true,
                                 default = nil)
  if valid_608425 != nil:
    section.add "ConfigurationSetName", valid_608425
  var valid_608426 = query.getOrDefault("Enabled")
  valid_608426 = validateParameter(valid_608426, JBool, required = true, default = nil)
  if valid_608426 != nil:
    section.add "Enabled", valid_608426
  var valid_608427 = query.getOrDefault("Action")
  valid_608427 = validateParameter(valid_608427, JString, required = true, default = newJString(
      "UpdateConfigurationSetSendingEnabled"))
  if valid_608427 != nil:
    section.add "Action", valid_608427
  var valid_608428 = query.getOrDefault("Version")
  valid_608428 = validateParameter(valid_608428, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_608428 != nil:
    section.add "Version", valid_608428
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608429 = header.getOrDefault("X-Amz-Signature")
  valid_608429 = validateParameter(valid_608429, JString, required = false,
                                 default = nil)
  if valid_608429 != nil:
    section.add "X-Amz-Signature", valid_608429
  var valid_608430 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608430 = validateParameter(valid_608430, JString, required = false,
                                 default = nil)
  if valid_608430 != nil:
    section.add "X-Amz-Content-Sha256", valid_608430
  var valid_608431 = header.getOrDefault("X-Amz-Date")
  valid_608431 = validateParameter(valid_608431, JString, required = false,
                                 default = nil)
  if valid_608431 != nil:
    section.add "X-Amz-Date", valid_608431
  var valid_608432 = header.getOrDefault("X-Amz-Credential")
  valid_608432 = validateParameter(valid_608432, JString, required = false,
                                 default = nil)
  if valid_608432 != nil:
    section.add "X-Amz-Credential", valid_608432
  var valid_608433 = header.getOrDefault("X-Amz-Security-Token")
  valid_608433 = validateParameter(valid_608433, JString, required = false,
                                 default = nil)
  if valid_608433 != nil:
    section.add "X-Amz-Security-Token", valid_608433
  var valid_608434 = header.getOrDefault("X-Amz-Algorithm")
  valid_608434 = validateParameter(valid_608434, JString, required = false,
                                 default = nil)
  if valid_608434 != nil:
    section.add "X-Amz-Algorithm", valid_608434
  var valid_608435 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608435 = validateParameter(valid_608435, JString, required = false,
                                 default = nil)
  if valid_608435 != nil:
    section.add "X-Amz-SignedHeaders", valid_608435
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608436: Call_GetUpdateConfigurationSetSendingEnabled_608422;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables or disables email sending for messages sent using a specific configuration set in a given AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending for a configuration set when the reputation metrics for that configuration set (such as your bounce on complaint rate) exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_608436.validator(path, query, header, formData, body)
  let scheme = call_608436.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608436.url(scheme.get, call_608436.host, call_608436.base,
                         call_608436.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608436, url, valid)

proc call*(call_608437: Call_GetUpdateConfigurationSetSendingEnabled_608422;
          ConfigurationSetName: string; Enabled: bool;
          Action: string = "UpdateConfigurationSetSendingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## getUpdateConfigurationSetSendingEnabled
  ## <p>Enables or disables email sending for messages sent using a specific configuration set in a given AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending for a configuration set when the reputation metrics for that configuration set (such as your bounce on complaint rate) exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Enabled: bool (required)
  ##          : Describes whether email sending is enabled or disabled for the configuration set. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608438 = newJObject()
  add(query_608438, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_608438, "Enabled", newJBool(Enabled))
  add(query_608438, "Action", newJString(Action))
  add(query_608438, "Version", newJString(Version))
  result = call_608437.call(nil, query_608438, nil, nil, nil)

var getUpdateConfigurationSetSendingEnabled* = Call_GetUpdateConfigurationSetSendingEnabled_608422(
    name: "getUpdateConfigurationSetSendingEnabled", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetSendingEnabled",
    validator: validate_GetUpdateConfigurationSetSendingEnabled_608423, base: "/",
    url: url_GetUpdateConfigurationSetSendingEnabled_608424,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateConfigurationSetTrackingOptions_608474 = ref object of OpenApiRestCall_605589
proc url_PostUpdateConfigurationSetTrackingOptions_608476(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateConfigurationSetTrackingOptions_608475(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608477 = query.getOrDefault("Action")
  valid_608477 = validateParameter(valid_608477, JString, required = true, default = newJString(
      "UpdateConfigurationSetTrackingOptions"))
  if valid_608477 != nil:
    section.add "Action", valid_608477
  var valid_608478 = query.getOrDefault("Version")
  valid_608478 = validateParameter(valid_608478, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_608478 != nil:
    section.add "Version", valid_608478
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608479 = header.getOrDefault("X-Amz-Signature")
  valid_608479 = validateParameter(valid_608479, JString, required = false,
                                 default = nil)
  if valid_608479 != nil:
    section.add "X-Amz-Signature", valid_608479
  var valid_608480 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608480 = validateParameter(valid_608480, JString, required = false,
                                 default = nil)
  if valid_608480 != nil:
    section.add "X-Amz-Content-Sha256", valid_608480
  var valid_608481 = header.getOrDefault("X-Amz-Date")
  valid_608481 = validateParameter(valid_608481, JString, required = false,
                                 default = nil)
  if valid_608481 != nil:
    section.add "X-Amz-Date", valid_608481
  var valid_608482 = header.getOrDefault("X-Amz-Credential")
  valid_608482 = validateParameter(valid_608482, JString, required = false,
                                 default = nil)
  if valid_608482 != nil:
    section.add "X-Amz-Credential", valid_608482
  var valid_608483 = header.getOrDefault("X-Amz-Security-Token")
  valid_608483 = validateParameter(valid_608483, JString, required = false,
                                 default = nil)
  if valid_608483 != nil:
    section.add "X-Amz-Security-Token", valid_608483
  var valid_608484 = header.getOrDefault("X-Amz-Algorithm")
  valid_608484 = validateParameter(valid_608484, JString, required = false,
                                 default = nil)
  if valid_608484 != nil:
    section.add "X-Amz-Algorithm", valid_608484
  var valid_608485 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608485 = validateParameter(valid_608485, JString, required = false,
                                 default = nil)
  if valid_608485 != nil:
    section.add "X-Amz-SignedHeaders", valid_608485
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set for which you want to update the custom tracking domain.
  ##   TrackingOptions.CustomRedirectDomain: JString
  ##                                       : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_608486 = formData.getOrDefault("ConfigurationSetName")
  valid_608486 = validateParameter(valid_608486, JString, required = true,
                                 default = nil)
  if valid_608486 != nil:
    section.add "ConfigurationSetName", valid_608486
  var valid_608487 = formData.getOrDefault("TrackingOptions.CustomRedirectDomain")
  valid_608487 = validateParameter(valid_608487, JString, required = false,
                                 default = nil)
  if valid_608487 != nil:
    section.add "TrackingOptions.CustomRedirectDomain", valid_608487
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608488: Call_PostUpdateConfigurationSetTrackingOptions_608474;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Modifies an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_608488.validator(path, query, header, formData, body)
  let scheme = call_608488.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608488.url(scheme.get, call_608488.host, call_608488.base,
                         call_608488.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608488, url, valid)

proc call*(call_608489: Call_PostUpdateConfigurationSetTrackingOptions_608474;
          ConfigurationSetName: string;
          Action: string = "UpdateConfigurationSetTrackingOptions";
          Version: string = "2010-12-01";
          TrackingOptionsCustomRedirectDomain: string = ""): Recallable =
  ## postUpdateConfigurationSetTrackingOptions
  ## <p>Modifies an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set for which you want to update the custom tracking domain.
  ##   Version: string (required)
  ##   TrackingOptionsCustomRedirectDomain: string
  ##                                      : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  var query_608490 = newJObject()
  var formData_608491 = newJObject()
  add(query_608490, "Action", newJString(Action))
  add(formData_608491, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_608490, "Version", newJString(Version))
  add(formData_608491, "TrackingOptions.CustomRedirectDomain",
      newJString(TrackingOptionsCustomRedirectDomain))
  result = call_608489.call(nil, query_608490, nil, formData_608491, nil)

var postUpdateConfigurationSetTrackingOptions* = Call_PostUpdateConfigurationSetTrackingOptions_608474(
    name: "postUpdateConfigurationSetTrackingOptions", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetTrackingOptions",
    validator: validate_PostUpdateConfigurationSetTrackingOptions_608475,
    base: "/", url: url_PostUpdateConfigurationSetTrackingOptions_608476,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateConfigurationSetTrackingOptions_608457 = ref object of OpenApiRestCall_605589
proc url_GetUpdateConfigurationSetTrackingOptions_608459(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateConfigurationSetTrackingOptions_608458(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TrackingOptions.CustomRedirectDomain: JString
  ##                                       : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set for which you want to update the custom tracking domain.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_608460 = query.getOrDefault("TrackingOptions.CustomRedirectDomain")
  valid_608460 = validateParameter(valid_608460, JString, required = false,
                                 default = nil)
  if valid_608460 != nil:
    section.add "TrackingOptions.CustomRedirectDomain", valid_608460
  assert query != nil, "query argument is necessary due to required `ConfigurationSetName` field"
  var valid_608461 = query.getOrDefault("ConfigurationSetName")
  valid_608461 = validateParameter(valid_608461, JString, required = true,
                                 default = nil)
  if valid_608461 != nil:
    section.add "ConfigurationSetName", valid_608461
  var valid_608462 = query.getOrDefault("Action")
  valid_608462 = validateParameter(valid_608462, JString, required = true, default = newJString(
      "UpdateConfigurationSetTrackingOptions"))
  if valid_608462 != nil:
    section.add "Action", valid_608462
  var valid_608463 = query.getOrDefault("Version")
  valid_608463 = validateParameter(valid_608463, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_608463 != nil:
    section.add "Version", valid_608463
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608464 = header.getOrDefault("X-Amz-Signature")
  valid_608464 = validateParameter(valid_608464, JString, required = false,
                                 default = nil)
  if valid_608464 != nil:
    section.add "X-Amz-Signature", valid_608464
  var valid_608465 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608465 = validateParameter(valid_608465, JString, required = false,
                                 default = nil)
  if valid_608465 != nil:
    section.add "X-Amz-Content-Sha256", valid_608465
  var valid_608466 = header.getOrDefault("X-Amz-Date")
  valid_608466 = validateParameter(valid_608466, JString, required = false,
                                 default = nil)
  if valid_608466 != nil:
    section.add "X-Amz-Date", valid_608466
  var valid_608467 = header.getOrDefault("X-Amz-Credential")
  valid_608467 = validateParameter(valid_608467, JString, required = false,
                                 default = nil)
  if valid_608467 != nil:
    section.add "X-Amz-Credential", valid_608467
  var valid_608468 = header.getOrDefault("X-Amz-Security-Token")
  valid_608468 = validateParameter(valid_608468, JString, required = false,
                                 default = nil)
  if valid_608468 != nil:
    section.add "X-Amz-Security-Token", valid_608468
  var valid_608469 = header.getOrDefault("X-Amz-Algorithm")
  valid_608469 = validateParameter(valid_608469, JString, required = false,
                                 default = nil)
  if valid_608469 != nil:
    section.add "X-Amz-Algorithm", valid_608469
  var valid_608470 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608470 = validateParameter(valid_608470, JString, required = false,
                                 default = nil)
  if valid_608470 != nil:
    section.add "X-Amz-SignedHeaders", valid_608470
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608471: Call_GetUpdateConfigurationSetTrackingOptions_608457;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Modifies an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_608471.validator(path, query, header, formData, body)
  let scheme = call_608471.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608471.url(scheme.get, call_608471.host, call_608471.base,
                         call_608471.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608471, url, valid)

proc call*(call_608472: Call_GetUpdateConfigurationSetTrackingOptions_608457;
          ConfigurationSetName: string;
          TrackingOptionsCustomRedirectDomain: string = "";
          Action: string = "UpdateConfigurationSetTrackingOptions";
          Version: string = "2010-12-01"): Recallable =
  ## getUpdateConfigurationSetTrackingOptions
  ## <p>Modifies an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ##   TrackingOptionsCustomRedirectDomain: string
  ##                                      : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set for which you want to update the custom tracking domain.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608473 = newJObject()
  add(query_608473, "TrackingOptions.CustomRedirectDomain",
      newJString(TrackingOptionsCustomRedirectDomain))
  add(query_608473, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_608473, "Action", newJString(Action))
  add(query_608473, "Version", newJString(Version))
  result = call_608472.call(nil, query_608473, nil, nil, nil)

var getUpdateConfigurationSetTrackingOptions* = Call_GetUpdateConfigurationSetTrackingOptions_608457(
    name: "getUpdateConfigurationSetTrackingOptions", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetTrackingOptions",
    validator: validate_GetUpdateConfigurationSetTrackingOptions_608458,
    base: "/", url: url_GetUpdateConfigurationSetTrackingOptions_608459,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateCustomVerificationEmailTemplate_608513 = ref object of OpenApiRestCall_605589
proc url_PostUpdateCustomVerificationEmailTemplate_608515(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateCustomVerificationEmailTemplate_608514(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates an existing custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608516 = query.getOrDefault("Action")
  valid_608516 = validateParameter(valid_608516, JString, required = true, default = newJString(
      "UpdateCustomVerificationEmailTemplate"))
  if valid_608516 != nil:
    section.add "Action", valid_608516
  var valid_608517 = query.getOrDefault("Version")
  valid_608517 = validateParameter(valid_608517, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_608517 != nil:
    section.add "Version", valid_608517
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608518 = header.getOrDefault("X-Amz-Signature")
  valid_608518 = validateParameter(valid_608518, JString, required = false,
                                 default = nil)
  if valid_608518 != nil:
    section.add "X-Amz-Signature", valid_608518
  var valid_608519 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608519 = validateParameter(valid_608519, JString, required = false,
                                 default = nil)
  if valid_608519 != nil:
    section.add "X-Amz-Content-Sha256", valid_608519
  var valid_608520 = header.getOrDefault("X-Amz-Date")
  valid_608520 = validateParameter(valid_608520, JString, required = false,
                                 default = nil)
  if valid_608520 != nil:
    section.add "X-Amz-Date", valid_608520
  var valid_608521 = header.getOrDefault("X-Amz-Credential")
  valid_608521 = validateParameter(valid_608521, JString, required = false,
                                 default = nil)
  if valid_608521 != nil:
    section.add "X-Amz-Credential", valid_608521
  var valid_608522 = header.getOrDefault("X-Amz-Security-Token")
  valid_608522 = validateParameter(valid_608522, JString, required = false,
                                 default = nil)
  if valid_608522 != nil:
    section.add "X-Amz-Security-Token", valid_608522
  var valid_608523 = header.getOrDefault("X-Amz-Algorithm")
  valid_608523 = validateParameter(valid_608523, JString, required = false,
                                 default = nil)
  if valid_608523 != nil:
    section.add "X-Amz-Algorithm", valid_608523
  var valid_608524 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608524 = validateParameter(valid_608524, JString, required = false,
                                 default = nil)
  if valid_608524 != nil:
    section.add "X-Amz-SignedHeaders", valid_608524
  result.add "header", section
  ## parameters in `formData` object:
  ##   TemplateSubject: JString
  ##                  : The subject line of the custom verification email.
  ##   FromEmailAddress: JString
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template that you want to update.
  ##   SuccessRedirectionURL: JString
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   TemplateContent: JString
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   FailureRedirectionURL: JString
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  section = newJObject()
  var valid_608525 = formData.getOrDefault("TemplateSubject")
  valid_608525 = validateParameter(valid_608525, JString, required = false,
                                 default = nil)
  if valid_608525 != nil:
    section.add "TemplateSubject", valid_608525
  var valid_608526 = formData.getOrDefault("FromEmailAddress")
  valid_608526 = validateParameter(valid_608526, JString, required = false,
                                 default = nil)
  if valid_608526 != nil:
    section.add "FromEmailAddress", valid_608526
  assert formData != nil,
        "formData argument is necessary due to required `TemplateName` field"
  var valid_608527 = formData.getOrDefault("TemplateName")
  valid_608527 = validateParameter(valid_608527, JString, required = true,
                                 default = nil)
  if valid_608527 != nil:
    section.add "TemplateName", valid_608527
  var valid_608528 = formData.getOrDefault("SuccessRedirectionURL")
  valid_608528 = validateParameter(valid_608528, JString, required = false,
                                 default = nil)
  if valid_608528 != nil:
    section.add "SuccessRedirectionURL", valid_608528
  var valid_608529 = formData.getOrDefault("TemplateContent")
  valid_608529 = validateParameter(valid_608529, JString, required = false,
                                 default = nil)
  if valid_608529 != nil:
    section.add "TemplateContent", valid_608529
  var valid_608530 = formData.getOrDefault("FailureRedirectionURL")
  valid_608530 = validateParameter(valid_608530, JString, required = false,
                                 default = nil)
  if valid_608530 != nil:
    section.add "FailureRedirectionURL", valid_608530
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608531: Call_PostUpdateCustomVerificationEmailTemplate_608513;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Updates an existing custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_608531.validator(path, query, header, formData, body)
  let scheme = call_608531.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608531.url(scheme.get, call_608531.host, call_608531.base,
                         call_608531.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608531, url, valid)

proc call*(call_608532: Call_PostUpdateCustomVerificationEmailTemplate_608513;
          TemplateName: string; TemplateSubject: string = "";
          FromEmailAddress: string = ""; SuccessRedirectionURL: string = "";
          TemplateContent: string = "";
          Action: string = "UpdateCustomVerificationEmailTemplate";
          FailureRedirectionURL: string = ""; Version: string = "2010-12-01"): Recallable =
  ## postUpdateCustomVerificationEmailTemplate
  ## <p>Updates an existing custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateSubject: string
  ##                  : The subject line of the custom verification email.
  ##   FromEmailAddress: string
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template that you want to update.
  ##   SuccessRedirectionURL: string
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   TemplateContent: string
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   Action: string (required)
  ##   FailureRedirectionURL: string
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   Version: string (required)
  var query_608533 = newJObject()
  var formData_608534 = newJObject()
  add(formData_608534, "TemplateSubject", newJString(TemplateSubject))
  add(formData_608534, "FromEmailAddress", newJString(FromEmailAddress))
  add(formData_608534, "TemplateName", newJString(TemplateName))
  add(formData_608534, "SuccessRedirectionURL", newJString(SuccessRedirectionURL))
  add(formData_608534, "TemplateContent", newJString(TemplateContent))
  add(query_608533, "Action", newJString(Action))
  add(formData_608534, "FailureRedirectionURL", newJString(FailureRedirectionURL))
  add(query_608533, "Version", newJString(Version))
  result = call_608532.call(nil, query_608533, nil, formData_608534, nil)

var postUpdateCustomVerificationEmailTemplate* = Call_PostUpdateCustomVerificationEmailTemplate_608513(
    name: "postUpdateCustomVerificationEmailTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateCustomVerificationEmailTemplate",
    validator: validate_PostUpdateCustomVerificationEmailTemplate_608514,
    base: "/", url: url_PostUpdateCustomVerificationEmailTemplate_608515,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateCustomVerificationEmailTemplate_608492 = ref object of OpenApiRestCall_605589
proc url_GetUpdateCustomVerificationEmailTemplate_608494(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateCustomVerificationEmailTemplate_608493(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates an existing custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TemplateSubject: JString
  ##                  : The subject line of the custom verification email.
  ##   FromEmailAddress: JString
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateContent: JString
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   SuccessRedirectionURL: JString
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   Action: JString (required)
  ##   FailureRedirectionURL: JString
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   Version: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template that you want to update.
  section = newJObject()
  var valid_608495 = query.getOrDefault("TemplateSubject")
  valid_608495 = validateParameter(valid_608495, JString, required = false,
                                 default = nil)
  if valid_608495 != nil:
    section.add "TemplateSubject", valid_608495
  var valid_608496 = query.getOrDefault("FromEmailAddress")
  valid_608496 = validateParameter(valid_608496, JString, required = false,
                                 default = nil)
  if valid_608496 != nil:
    section.add "FromEmailAddress", valid_608496
  var valid_608497 = query.getOrDefault("TemplateContent")
  valid_608497 = validateParameter(valid_608497, JString, required = false,
                                 default = nil)
  if valid_608497 != nil:
    section.add "TemplateContent", valid_608497
  var valid_608498 = query.getOrDefault("SuccessRedirectionURL")
  valid_608498 = validateParameter(valid_608498, JString, required = false,
                                 default = nil)
  if valid_608498 != nil:
    section.add "SuccessRedirectionURL", valid_608498
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608499 = query.getOrDefault("Action")
  valid_608499 = validateParameter(valid_608499, JString, required = true, default = newJString(
      "UpdateCustomVerificationEmailTemplate"))
  if valid_608499 != nil:
    section.add "Action", valid_608499
  var valid_608500 = query.getOrDefault("FailureRedirectionURL")
  valid_608500 = validateParameter(valid_608500, JString, required = false,
                                 default = nil)
  if valid_608500 != nil:
    section.add "FailureRedirectionURL", valid_608500
  var valid_608501 = query.getOrDefault("Version")
  valid_608501 = validateParameter(valid_608501, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_608501 != nil:
    section.add "Version", valid_608501
  var valid_608502 = query.getOrDefault("TemplateName")
  valid_608502 = validateParameter(valid_608502, JString, required = true,
                                 default = nil)
  if valid_608502 != nil:
    section.add "TemplateName", valid_608502
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608503 = header.getOrDefault("X-Amz-Signature")
  valid_608503 = validateParameter(valid_608503, JString, required = false,
                                 default = nil)
  if valid_608503 != nil:
    section.add "X-Amz-Signature", valid_608503
  var valid_608504 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608504 = validateParameter(valid_608504, JString, required = false,
                                 default = nil)
  if valid_608504 != nil:
    section.add "X-Amz-Content-Sha256", valid_608504
  var valid_608505 = header.getOrDefault("X-Amz-Date")
  valid_608505 = validateParameter(valid_608505, JString, required = false,
                                 default = nil)
  if valid_608505 != nil:
    section.add "X-Amz-Date", valid_608505
  var valid_608506 = header.getOrDefault("X-Amz-Credential")
  valid_608506 = validateParameter(valid_608506, JString, required = false,
                                 default = nil)
  if valid_608506 != nil:
    section.add "X-Amz-Credential", valid_608506
  var valid_608507 = header.getOrDefault("X-Amz-Security-Token")
  valid_608507 = validateParameter(valid_608507, JString, required = false,
                                 default = nil)
  if valid_608507 != nil:
    section.add "X-Amz-Security-Token", valid_608507
  var valid_608508 = header.getOrDefault("X-Amz-Algorithm")
  valid_608508 = validateParameter(valid_608508, JString, required = false,
                                 default = nil)
  if valid_608508 != nil:
    section.add "X-Amz-Algorithm", valid_608508
  var valid_608509 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608509 = validateParameter(valid_608509, JString, required = false,
                                 default = nil)
  if valid_608509 != nil:
    section.add "X-Amz-SignedHeaders", valid_608509
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608510: Call_GetUpdateCustomVerificationEmailTemplate_608492;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Updates an existing custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_608510.validator(path, query, header, formData, body)
  let scheme = call_608510.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608510.url(scheme.get, call_608510.host, call_608510.base,
                         call_608510.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608510, url, valid)

proc call*(call_608511: Call_GetUpdateCustomVerificationEmailTemplate_608492;
          TemplateName: string; TemplateSubject: string = "";
          FromEmailAddress: string = ""; TemplateContent: string = "";
          SuccessRedirectionURL: string = "";
          Action: string = "UpdateCustomVerificationEmailTemplate";
          FailureRedirectionURL: string = ""; Version: string = "2010-12-01"): Recallable =
  ## getUpdateCustomVerificationEmailTemplate
  ## <p>Updates an existing custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateSubject: string
  ##                  : The subject line of the custom verification email.
  ##   FromEmailAddress: string
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateContent: string
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   SuccessRedirectionURL: string
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   Action: string (required)
  ##   FailureRedirectionURL: string
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   Version: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template that you want to update.
  var query_608512 = newJObject()
  add(query_608512, "TemplateSubject", newJString(TemplateSubject))
  add(query_608512, "FromEmailAddress", newJString(FromEmailAddress))
  add(query_608512, "TemplateContent", newJString(TemplateContent))
  add(query_608512, "SuccessRedirectionURL", newJString(SuccessRedirectionURL))
  add(query_608512, "Action", newJString(Action))
  add(query_608512, "FailureRedirectionURL", newJString(FailureRedirectionURL))
  add(query_608512, "Version", newJString(Version))
  add(query_608512, "TemplateName", newJString(TemplateName))
  result = call_608511.call(nil, query_608512, nil, nil, nil)

var getUpdateCustomVerificationEmailTemplate* = Call_GetUpdateCustomVerificationEmailTemplate_608492(
    name: "getUpdateCustomVerificationEmailTemplate", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateCustomVerificationEmailTemplate",
    validator: validate_GetUpdateCustomVerificationEmailTemplate_608493,
    base: "/", url: url_GetUpdateCustomVerificationEmailTemplate_608494,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateReceiptRule_608557 = ref object of OpenApiRestCall_605589
proc url_PostUpdateReceiptRule_608559(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateReceiptRule_608558(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates a receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608560 = query.getOrDefault("Action")
  valid_608560 = validateParameter(valid_608560, JString, required = true,
                                 default = newJString("UpdateReceiptRule"))
  if valid_608560 != nil:
    section.add "Action", valid_608560
  var valid_608561 = query.getOrDefault("Version")
  valid_608561 = validateParameter(valid_608561, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_608561 != nil:
    section.add "Version", valid_608561
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608562 = header.getOrDefault("X-Amz-Signature")
  valid_608562 = validateParameter(valid_608562, JString, required = false,
                                 default = nil)
  if valid_608562 != nil:
    section.add "X-Amz-Signature", valid_608562
  var valid_608563 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608563 = validateParameter(valid_608563, JString, required = false,
                                 default = nil)
  if valid_608563 != nil:
    section.add "X-Amz-Content-Sha256", valid_608563
  var valid_608564 = header.getOrDefault("X-Amz-Date")
  valid_608564 = validateParameter(valid_608564, JString, required = false,
                                 default = nil)
  if valid_608564 != nil:
    section.add "X-Amz-Date", valid_608564
  var valid_608565 = header.getOrDefault("X-Amz-Credential")
  valid_608565 = validateParameter(valid_608565, JString, required = false,
                                 default = nil)
  if valid_608565 != nil:
    section.add "X-Amz-Credential", valid_608565
  var valid_608566 = header.getOrDefault("X-Amz-Security-Token")
  valid_608566 = validateParameter(valid_608566, JString, required = false,
                                 default = nil)
  if valid_608566 != nil:
    section.add "X-Amz-Security-Token", valid_608566
  var valid_608567 = header.getOrDefault("X-Amz-Algorithm")
  valid_608567 = validateParameter(valid_608567, JString, required = false,
                                 default = nil)
  if valid_608567 != nil:
    section.add "X-Amz-Algorithm", valid_608567
  var valid_608568 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608568 = validateParameter(valid_608568, JString, required = false,
                                 default = nil)
  if valid_608568 != nil:
    section.add "X-Amz-SignedHeaders", valid_608568
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   Rule.Recipients: JArray
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   Rule.Enabled: JString
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   Rule.Actions: JArray
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   Rule.TlsPolicy: JString
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   Rule.ScanEnabled: JString
  ##                   : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   Rule.Name: JString
  ##            : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleSetName` field"
  var valid_608569 = formData.getOrDefault("RuleSetName")
  valid_608569 = validateParameter(valid_608569, JString, required = true,
                                 default = nil)
  if valid_608569 != nil:
    section.add "RuleSetName", valid_608569
  var valid_608570 = formData.getOrDefault("Rule.Recipients")
  valid_608570 = validateParameter(valid_608570, JArray, required = false,
                                 default = nil)
  if valid_608570 != nil:
    section.add "Rule.Recipients", valid_608570
  var valid_608571 = formData.getOrDefault("Rule.Enabled")
  valid_608571 = validateParameter(valid_608571, JString, required = false,
                                 default = nil)
  if valid_608571 != nil:
    section.add "Rule.Enabled", valid_608571
  var valid_608572 = formData.getOrDefault("Rule.Actions")
  valid_608572 = validateParameter(valid_608572, JArray, required = false,
                                 default = nil)
  if valid_608572 != nil:
    section.add "Rule.Actions", valid_608572
  var valid_608573 = formData.getOrDefault("Rule.TlsPolicy")
  valid_608573 = validateParameter(valid_608573, JString, required = false,
                                 default = nil)
  if valid_608573 != nil:
    section.add "Rule.TlsPolicy", valid_608573
  var valid_608574 = formData.getOrDefault("Rule.ScanEnabled")
  valid_608574 = validateParameter(valid_608574, JString, required = false,
                                 default = nil)
  if valid_608574 != nil:
    section.add "Rule.ScanEnabled", valid_608574
  var valid_608575 = formData.getOrDefault("Rule.Name")
  valid_608575 = validateParameter(valid_608575, JString, required = false,
                                 default = nil)
  if valid_608575 != nil:
    section.add "Rule.Name", valid_608575
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608576: Call_PostUpdateReceiptRule_608557; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates a receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_608576.validator(path, query, header, formData, body)
  let scheme = call_608576.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608576.url(scheme.get, call_608576.host, call_608576.base,
                         call_608576.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608576, url, valid)

proc call*(call_608577: Call_PostUpdateReceiptRule_608557; RuleSetName: string;
          RuleRecipients: JsonNode = nil; RuleEnabled: string = "";
          RuleActions: JsonNode = nil; RuleTlsPolicy: string = "";
          Action: string = "UpdateReceiptRule"; Version: string = "2010-12-01";
          RuleScanEnabled: string = ""; RuleName: string = ""): Recallable =
  ## postUpdateReceiptRule
  ## <p>Updates a receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   RuleRecipients: JArray
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   RuleEnabled: string
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   RuleActions: JArray
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   RuleTlsPolicy: string
  ##                : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   RuleScanEnabled: string
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   RuleName: string
  ##           : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  var query_608578 = newJObject()
  var formData_608579 = newJObject()
  add(formData_608579, "RuleSetName", newJString(RuleSetName))
  if RuleRecipients != nil:
    formData_608579.add "Rule.Recipients", RuleRecipients
  add(formData_608579, "Rule.Enabled", newJString(RuleEnabled))
  if RuleActions != nil:
    formData_608579.add "Rule.Actions", RuleActions
  add(formData_608579, "Rule.TlsPolicy", newJString(RuleTlsPolicy))
  add(query_608578, "Action", newJString(Action))
  add(query_608578, "Version", newJString(Version))
  add(formData_608579, "Rule.ScanEnabled", newJString(RuleScanEnabled))
  add(formData_608579, "Rule.Name", newJString(RuleName))
  result = call_608577.call(nil, query_608578, nil, formData_608579, nil)

var postUpdateReceiptRule* = Call_PostUpdateReceiptRule_608557(
    name: "postUpdateReceiptRule", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=UpdateReceiptRule",
    validator: validate_PostUpdateReceiptRule_608558, base: "/",
    url: url_PostUpdateReceiptRule_608559, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateReceiptRule_608535 = ref object of OpenApiRestCall_605589
proc url_GetUpdateReceiptRule_608537(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateReceiptRule_608536(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates a receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Rule.Enabled: JString
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   Rule.Name: JString
  ##            : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Rule.ScanEnabled: JString
  ##                   : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   Rule.Recipients: JArray
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   Action: JString (required)
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   Rule.TlsPolicy: JString
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   Rule.Actions: JArray
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   Version: JString (required)
  section = newJObject()
  var valid_608538 = query.getOrDefault("Rule.Enabled")
  valid_608538 = validateParameter(valid_608538, JString, required = false,
                                 default = nil)
  if valid_608538 != nil:
    section.add "Rule.Enabled", valid_608538
  var valid_608539 = query.getOrDefault("Rule.Name")
  valid_608539 = validateParameter(valid_608539, JString, required = false,
                                 default = nil)
  if valid_608539 != nil:
    section.add "Rule.Name", valid_608539
  var valid_608540 = query.getOrDefault("Rule.ScanEnabled")
  valid_608540 = validateParameter(valid_608540, JString, required = false,
                                 default = nil)
  if valid_608540 != nil:
    section.add "Rule.ScanEnabled", valid_608540
  var valid_608541 = query.getOrDefault("Rule.Recipients")
  valid_608541 = validateParameter(valid_608541, JArray, required = false,
                                 default = nil)
  if valid_608541 != nil:
    section.add "Rule.Recipients", valid_608541
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608542 = query.getOrDefault("Action")
  valid_608542 = validateParameter(valid_608542, JString, required = true,
                                 default = newJString("UpdateReceiptRule"))
  if valid_608542 != nil:
    section.add "Action", valid_608542
  var valid_608543 = query.getOrDefault("RuleSetName")
  valid_608543 = validateParameter(valid_608543, JString, required = true,
                                 default = nil)
  if valid_608543 != nil:
    section.add "RuleSetName", valid_608543
  var valid_608544 = query.getOrDefault("Rule.TlsPolicy")
  valid_608544 = validateParameter(valid_608544, JString, required = false,
                                 default = nil)
  if valid_608544 != nil:
    section.add "Rule.TlsPolicy", valid_608544
  var valid_608545 = query.getOrDefault("Rule.Actions")
  valid_608545 = validateParameter(valid_608545, JArray, required = false,
                                 default = nil)
  if valid_608545 != nil:
    section.add "Rule.Actions", valid_608545
  var valid_608546 = query.getOrDefault("Version")
  valid_608546 = validateParameter(valid_608546, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_608546 != nil:
    section.add "Version", valid_608546
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608547 = header.getOrDefault("X-Amz-Signature")
  valid_608547 = validateParameter(valid_608547, JString, required = false,
                                 default = nil)
  if valid_608547 != nil:
    section.add "X-Amz-Signature", valid_608547
  var valid_608548 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608548 = validateParameter(valid_608548, JString, required = false,
                                 default = nil)
  if valid_608548 != nil:
    section.add "X-Amz-Content-Sha256", valid_608548
  var valid_608549 = header.getOrDefault("X-Amz-Date")
  valid_608549 = validateParameter(valid_608549, JString, required = false,
                                 default = nil)
  if valid_608549 != nil:
    section.add "X-Amz-Date", valid_608549
  var valid_608550 = header.getOrDefault("X-Amz-Credential")
  valid_608550 = validateParameter(valid_608550, JString, required = false,
                                 default = nil)
  if valid_608550 != nil:
    section.add "X-Amz-Credential", valid_608550
  var valid_608551 = header.getOrDefault("X-Amz-Security-Token")
  valid_608551 = validateParameter(valid_608551, JString, required = false,
                                 default = nil)
  if valid_608551 != nil:
    section.add "X-Amz-Security-Token", valid_608551
  var valid_608552 = header.getOrDefault("X-Amz-Algorithm")
  valid_608552 = validateParameter(valid_608552, JString, required = false,
                                 default = nil)
  if valid_608552 != nil:
    section.add "X-Amz-Algorithm", valid_608552
  var valid_608553 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608553 = validateParameter(valid_608553, JString, required = false,
                                 default = nil)
  if valid_608553 != nil:
    section.add "X-Amz-SignedHeaders", valid_608553
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608554: Call_GetUpdateReceiptRule_608535; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates a receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_608554.validator(path, query, header, formData, body)
  let scheme = call_608554.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608554.url(scheme.get, call_608554.host, call_608554.base,
                         call_608554.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608554, url, valid)

proc call*(call_608555: Call_GetUpdateReceiptRule_608535; RuleSetName: string;
          RuleEnabled: string = ""; RuleName: string = ""; RuleScanEnabled: string = "";
          RuleRecipients: JsonNode = nil; Action: string = "UpdateReceiptRule";
          RuleTlsPolicy: string = ""; RuleActions: JsonNode = nil;
          Version: string = "2010-12-01"): Recallable =
  ## getUpdateReceiptRule
  ## <p>Updates a receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleEnabled: string
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   RuleName: string
  ##           : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   RuleScanEnabled: string
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   RuleRecipients: JArray
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   Action: string (required)
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   RuleTlsPolicy: string
  ##                : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   RuleActions: JArray
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   Version: string (required)
  var query_608556 = newJObject()
  add(query_608556, "Rule.Enabled", newJString(RuleEnabled))
  add(query_608556, "Rule.Name", newJString(RuleName))
  add(query_608556, "Rule.ScanEnabled", newJString(RuleScanEnabled))
  if RuleRecipients != nil:
    query_608556.add "Rule.Recipients", RuleRecipients
  add(query_608556, "Action", newJString(Action))
  add(query_608556, "RuleSetName", newJString(RuleSetName))
  add(query_608556, "Rule.TlsPolicy", newJString(RuleTlsPolicy))
  if RuleActions != nil:
    query_608556.add "Rule.Actions", RuleActions
  add(query_608556, "Version", newJString(Version))
  result = call_608555.call(nil, query_608556, nil, nil, nil)

var getUpdateReceiptRule* = Call_GetUpdateReceiptRule_608535(
    name: "getUpdateReceiptRule", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=UpdateReceiptRule",
    validator: validate_GetUpdateReceiptRule_608536, base: "/",
    url: url_GetUpdateReceiptRule_608537, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateTemplate_608599 = ref object of OpenApiRestCall_605589
proc url_PostUpdateTemplate_608601(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateTemplate_608600(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608602 = query.getOrDefault("Action")
  valid_608602 = validateParameter(valid_608602, JString, required = true,
                                 default = newJString("UpdateTemplate"))
  if valid_608602 != nil:
    section.add "Action", valid_608602
  var valid_608603 = query.getOrDefault("Version")
  valid_608603 = validateParameter(valid_608603, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_608603 != nil:
    section.add "Version", valid_608603
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608604 = header.getOrDefault("X-Amz-Signature")
  valid_608604 = validateParameter(valid_608604, JString, required = false,
                                 default = nil)
  if valid_608604 != nil:
    section.add "X-Amz-Signature", valid_608604
  var valid_608605 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608605 = validateParameter(valid_608605, JString, required = false,
                                 default = nil)
  if valid_608605 != nil:
    section.add "X-Amz-Content-Sha256", valid_608605
  var valid_608606 = header.getOrDefault("X-Amz-Date")
  valid_608606 = validateParameter(valid_608606, JString, required = false,
                                 default = nil)
  if valid_608606 != nil:
    section.add "X-Amz-Date", valid_608606
  var valid_608607 = header.getOrDefault("X-Amz-Credential")
  valid_608607 = validateParameter(valid_608607, JString, required = false,
                                 default = nil)
  if valid_608607 != nil:
    section.add "X-Amz-Credential", valid_608607
  var valid_608608 = header.getOrDefault("X-Amz-Security-Token")
  valid_608608 = validateParameter(valid_608608, JString, required = false,
                                 default = nil)
  if valid_608608 != nil:
    section.add "X-Amz-Security-Token", valid_608608
  var valid_608609 = header.getOrDefault("X-Amz-Algorithm")
  valid_608609 = validateParameter(valid_608609, JString, required = false,
                                 default = nil)
  if valid_608609 != nil:
    section.add "X-Amz-Algorithm", valid_608609
  var valid_608610 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608610 = validateParameter(valid_608610, JString, required = false,
                                 default = nil)
  if valid_608610 != nil:
    section.add "X-Amz-SignedHeaders", valid_608610
  result.add "header", section
  ## parameters in `formData` object:
  ##   Template.TextPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Template.TemplateName: JString
  ##                        : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   Template.SubjectPart: JString
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  ##   Template.HtmlPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  section = newJObject()
  var valid_608611 = formData.getOrDefault("Template.TextPart")
  valid_608611 = validateParameter(valid_608611, JString, required = false,
                                 default = nil)
  if valid_608611 != nil:
    section.add "Template.TextPart", valid_608611
  var valid_608612 = formData.getOrDefault("Template.TemplateName")
  valid_608612 = validateParameter(valid_608612, JString, required = false,
                                 default = nil)
  if valid_608612 != nil:
    section.add "Template.TemplateName", valid_608612
  var valid_608613 = formData.getOrDefault("Template.SubjectPart")
  valid_608613 = validateParameter(valid_608613, JString, required = false,
                                 default = nil)
  if valid_608613 != nil:
    section.add "Template.SubjectPart", valid_608613
  var valid_608614 = formData.getOrDefault("Template.HtmlPart")
  valid_608614 = validateParameter(valid_608614, JString, required = false,
                                 default = nil)
  if valid_608614 != nil:
    section.add "Template.HtmlPart", valid_608614
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608615: Call_PostUpdateTemplate_608599; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_608615.validator(path, query, header, formData, body)
  let scheme = call_608615.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608615.url(scheme.get, call_608615.host, call_608615.base,
                         call_608615.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608615, url, valid)

proc call*(call_608616: Call_PostUpdateTemplate_608599;
          TemplateTextPart: string = ""; TemplateTemplateName: string = "";
          TemplateSubjectPart: string = ""; Action: string = "UpdateTemplate";
          Version: string = "2010-12-01"; TemplateHtmlPart: string = ""): Recallable =
  ## postUpdateTemplate
  ## <p>Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateTextPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   TemplateTemplateName: string
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   TemplateSubjectPart: string
  ##                      : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   TemplateHtmlPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  var query_608617 = newJObject()
  var formData_608618 = newJObject()
  add(formData_608618, "Template.TextPart", newJString(TemplateTextPart))
  add(formData_608618, "Template.TemplateName", newJString(TemplateTemplateName))
  add(formData_608618, "Template.SubjectPart", newJString(TemplateSubjectPart))
  add(query_608617, "Action", newJString(Action))
  add(query_608617, "Version", newJString(Version))
  add(formData_608618, "Template.HtmlPart", newJString(TemplateHtmlPart))
  result = call_608616.call(nil, query_608617, nil, formData_608618, nil)

var postUpdateTemplate* = Call_PostUpdateTemplate_608599(
    name: "postUpdateTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=UpdateTemplate",
    validator: validate_PostUpdateTemplate_608600, base: "/",
    url: url_PostUpdateTemplate_608601, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateTemplate_608580 = ref object of OpenApiRestCall_605589
proc url_GetUpdateTemplate_608582(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateTemplate_608581(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Template.HtmlPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   Template.TemplateName: JString
  ##                        : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   Template.TextPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Action: JString (required)
  ##   Template.SubjectPart: JString
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  ##   Version: JString (required)
  section = newJObject()
  var valid_608583 = query.getOrDefault("Template.HtmlPart")
  valid_608583 = validateParameter(valid_608583, JString, required = false,
                                 default = nil)
  if valid_608583 != nil:
    section.add "Template.HtmlPart", valid_608583
  var valid_608584 = query.getOrDefault("Template.TemplateName")
  valid_608584 = validateParameter(valid_608584, JString, required = false,
                                 default = nil)
  if valid_608584 != nil:
    section.add "Template.TemplateName", valid_608584
  var valid_608585 = query.getOrDefault("Template.TextPart")
  valid_608585 = validateParameter(valid_608585, JString, required = false,
                                 default = nil)
  if valid_608585 != nil:
    section.add "Template.TextPart", valid_608585
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608586 = query.getOrDefault("Action")
  valid_608586 = validateParameter(valid_608586, JString, required = true,
                                 default = newJString("UpdateTemplate"))
  if valid_608586 != nil:
    section.add "Action", valid_608586
  var valid_608587 = query.getOrDefault("Template.SubjectPart")
  valid_608587 = validateParameter(valid_608587, JString, required = false,
                                 default = nil)
  if valid_608587 != nil:
    section.add "Template.SubjectPart", valid_608587
  var valid_608588 = query.getOrDefault("Version")
  valid_608588 = validateParameter(valid_608588, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_608588 != nil:
    section.add "Version", valid_608588
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608589 = header.getOrDefault("X-Amz-Signature")
  valid_608589 = validateParameter(valid_608589, JString, required = false,
                                 default = nil)
  if valid_608589 != nil:
    section.add "X-Amz-Signature", valid_608589
  var valid_608590 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608590 = validateParameter(valid_608590, JString, required = false,
                                 default = nil)
  if valid_608590 != nil:
    section.add "X-Amz-Content-Sha256", valid_608590
  var valid_608591 = header.getOrDefault("X-Amz-Date")
  valid_608591 = validateParameter(valid_608591, JString, required = false,
                                 default = nil)
  if valid_608591 != nil:
    section.add "X-Amz-Date", valid_608591
  var valid_608592 = header.getOrDefault("X-Amz-Credential")
  valid_608592 = validateParameter(valid_608592, JString, required = false,
                                 default = nil)
  if valid_608592 != nil:
    section.add "X-Amz-Credential", valid_608592
  var valid_608593 = header.getOrDefault("X-Amz-Security-Token")
  valid_608593 = validateParameter(valid_608593, JString, required = false,
                                 default = nil)
  if valid_608593 != nil:
    section.add "X-Amz-Security-Token", valid_608593
  var valid_608594 = header.getOrDefault("X-Amz-Algorithm")
  valid_608594 = validateParameter(valid_608594, JString, required = false,
                                 default = nil)
  if valid_608594 != nil:
    section.add "X-Amz-Algorithm", valid_608594
  var valid_608595 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608595 = validateParameter(valid_608595, JString, required = false,
                                 default = nil)
  if valid_608595 != nil:
    section.add "X-Amz-SignedHeaders", valid_608595
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608596: Call_GetUpdateTemplate_608580; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_608596.validator(path, query, header, formData, body)
  let scheme = call_608596.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608596.url(scheme.get, call_608596.host, call_608596.base,
                         call_608596.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608596, url, valid)

proc call*(call_608597: Call_GetUpdateTemplate_608580;
          TemplateHtmlPart: string = ""; TemplateTemplateName: string = "";
          TemplateTextPart: string = ""; Action: string = "UpdateTemplate";
          TemplateSubjectPart: string = ""; Version: string = "2010-12-01"): Recallable =
  ## getUpdateTemplate
  ## <p>Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateHtmlPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   TemplateTemplateName: string
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   TemplateTextPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Action: string (required)
  ##   TemplateSubjectPart: string
  ##                      : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  ##   Version: string (required)
  var query_608598 = newJObject()
  add(query_608598, "Template.HtmlPart", newJString(TemplateHtmlPart))
  add(query_608598, "Template.TemplateName", newJString(TemplateTemplateName))
  add(query_608598, "Template.TextPart", newJString(TemplateTextPart))
  add(query_608598, "Action", newJString(Action))
  add(query_608598, "Template.SubjectPart", newJString(TemplateSubjectPart))
  add(query_608598, "Version", newJString(Version))
  result = call_608597.call(nil, query_608598, nil, nil, nil)

var getUpdateTemplate* = Call_GetUpdateTemplate_608580(name: "getUpdateTemplate",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=UpdateTemplate", validator: validate_GetUpdateTemplate_608581,
    base: "/", url: url_GetUpdateTemplate_608582,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostVerifyDomainDkim_608635 = ref object of OpenApiRestCall_605589
proc url_PostVerifyDomainDkim_608637(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostVerifyDomainDkim_608636(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a set of DKIM tokens for a domain identity.</p> <important> <p>When you execute the <code>VerifyDomainDkim</code> operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the <code>VerifyDomainIdentity</code> operation. However, you can't send email from the domain until you either successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">verify it</a> or you successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">set up DKIM for it</a>.</p> </important> <p>You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM.</p> <p>To create the CNAME records for DKIM authentication, use the following values:</p> <ul> <li> <p> <b>Name</b>: <i>token</i>._domainkey.<i>example.com</i> </p> </li> <li> <p> <b>Type</b>: CNAME</p> </li> <li> <p> <b>Value</b>: <i>token</i>.dkim.amazonses.com</p> </li> </ul> <p>In the preceding example, replace <i>token</i> with one of the tokens that are generated when you execute this operation. Replace <i>example.com</i> with your domain. Repeat this process for each token that's generated by this operation.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608638 = query.getOrDefault("Action")
  valid_608638 = validateParameter(valid_608638, JString, required = true,
                                 default = newJString("VerifyDomainDkim"))
  if valid_608638 != nil:
    section.add "Action", valid_608638
  var valid_608639 = query.getOrDefault("Version")
  valid_608639 = validateParameter(valid_608639, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_608639 != nil:
    section.add "Version", valid_608639
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608640 = header.getOrDefault("X-Amz-Signature")
  valid_608640 = validateParameter(valid_608640, JString, required = false,
                                 default = nil)
  if valid_608640 != nil:
    section.add "X-Amz-Signature", valid_608640
  var valid_608641 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608641 = validateParameter(valid_608641, JString, required = false,
                                 default = nil)
  if valid_608641 != nil:
    section.add "X-Amz-Content-Sha256", valid_608641
  var valid_608642 = header.getOrDefault("X-Amz-Date")
  valid_608642 = validateParameter(valid_608642, JString, required = false,
                                 default = nil)
  if valid_608642 != nil:
    section.add "X-Amz-Date", valid_608642
  var valid_608643 = header.getOrDefault("X-Amz-Credential")
  valid_608643 = validateParameter(valid_608643, JString, required = false,
                                 default = nil)
  if valid_608643 != nil:
    section.add "X-Amz-Credential", valid_608643
  var valid_608644 = header.getOrDefault("X-Amz-Security-Token")
  valid_608644 = validateParameter(valid_608644, JString, required = false,
                                 default = nil)
  if valid_608644 != nil:
    section.add "X-Amz-Security-Token", valid_608644
  var valid_608645 = header.getOrDefault("X-Amz-Algorithm")
  valid_608645 = validateParameter(valid_608645, JString, required = false,
                                 default = nil)
  if valid_608645 != nil:
    section.add "X-Amz-Algorithm", valid_608645
  var valid_608646 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608646 = validateParameter(valid_608646, JString, required = false,
                                 default = nil)
  if valid_608646 != nil:
    section.add "X-Amz-SignedHeaders", valid_608646
  result.add "header", section
  ## parameters in `formData` object:
  ##   Domain: JString (required)
  ##         : The name of the domain to be verified for Easy DKIM signing.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Domain` field"
  var valid_608647 = formData.getOrDefault("Domain")
  valid_608647 = validateParameter(valid_608647, JString, required = true,
                                 default = nil)
  if valid_608647 != nil:
    section.add "Domain", valid_608647
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608648: Call_PostVerifyDomainDkim_608635; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a set of DKIM tokens for a domain identity.</p> <important> <p>When you execute the <code>VerifyDomainDkim</code> operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the <code>VerifyDomainIdentity</code> operation. However, you can't send email from the domain until you either successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">verify it</a> or you successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">set up DKIM for it</a>.</p> </important> <p>You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM.</p> <p>To create the CNAME records for DKIM authentication, use the following values:</p> <ul> <li> <p> <b>Name</b>: <i>token</i>._domainkey.<i>example.com</i> </p> </li> <li> <p> <b>Type</b>: CNAME</p> </li> <li> <p> <b>Value</b>: <i>token</i>.dkim.amazonses.com</p> </li> </ul> <p>In the preceding example, replace <i>token</i> with one of the tokens that are generated when you execute this operation. Replace <i>example.com</i> with your domain. Repeat this process for each token that's generated by this operation.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_608648.validator(path, query, header, formData, body)
  let scheme = call_608648.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608648.url(scheme.get, call_608648.host, call_608648.base,
                         call_608648.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608648, url, valid)

proc call*(call_608649: Call_PostVerifyDomainDkim_608635; Domain: string;
          Action: string = "VerifyDomainDkim"; Version: string = "2010-12-01"): Recallable =
  ## postVerifyDomainDkim
  ## <p>Returns a set of DKIM tokens for a domain identity.</p> <important> <p>When you execute the <code>VerifyDomainDkim</code> operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the <code>VerifyDomainIdentity</code> operation. However, you can't send email from the domain until you either successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">verify it</a> or you successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">set up DKIM for it</a>.</p> </important> <p>You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM.</p> <p>To create the CNAME records for DKIM authentication, use the following values:</p> <ul> <li> <p> <b>Name</b>: <i>token</i>._domainkey.<i>example.com</i> </p> </li> <li> <p> <b>Type</b>: CNAME</p> </li> <li> <p> <b>Value</b>: <i>token</i>.dkim.amazonses.com</p> </li> </ul> <p>In the preceding example, replace <i>token</i> with one of the tokens that are generated when you execute this operation. Replace <i>example.com</i> with your domain. Repeat this process for each token that's generated by this operation.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Domain: string (required)
  ##         : The name of the domain to be verified for Easy DKIM signing.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608650 = newJObject()
  var formData_608651 = newJObject()
  add(formData_608651, "Domain", newJString(Domain))
  add(query_608650, "Action", newJString(Action))
  add(query_608650, "Version", newJString(Version))
  result = call_608649.call(nil, query_608650, nil, formData_608651, nil)

var postVerifyDomainDkim* = Call_PostVerifyDomainDkim_608635(
    name: "postVerifyDomainDkim", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=VerifyDomainDkim",
    validator: validate_PostVerifyDomainDkim_608636, base: "/",
    url: url_PostVerifyDomainDkim_608637, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetVerifyDomainDkim_608619 = ref object of OpenApiRestCall_605589
proc url_GetVerifyDomainDkim_608621(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetVerifyDomainDkim_608620(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Returns a set of DKIM tokens for a domain identity.</p> <important> <p>When you execute the <code>VerifyDomainDkim</code> operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the <code>VerifyDomainIdentity</code> operation. However, you can't send email from the domain until you either successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">verify it</a> or you successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">set up DKIM for it</a>.</p> </important> <p>You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM.</p> <p>To create the CNAME records for DKIM authentication, use the following values:</p> <ul> <li> <p> <b>Name</b>: <i>token</i>._domainkey.<i>example.com</i> </p> </li> <li> <p> <b>Type</b>: CNAME</p> </li> <li> <p> <b>Value</b>: <i>token</i>.dkim.amazonses.com</p> </li> </ul> <p>In the preceding example, replace <i>token</i> with one of the tokens that are generated when you execute this operation. Replace <i>example.com</i> with your domain. Repeat this process for each token that's generated by this operation.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Domain: JString (required)
  ##         : The name of the domain to be verified for Easy DKIM signing.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608622 = query.getOrDefault("Action")
  valid_608622 = validateParameter(valid_608622, JString, required = true,
                                 default = newJString("VerifyDomainDkim"))
  if valid_608622 != nil:
    section.add "Action", valid_608622
  var valid_608623 = query.getOrDefault("Domain")
  valid_608623 = validateParameter(valid_608623, JString, required = true,
                                 default = nil)
  if valid_608623 != nil:
    section.add "Domain", valid_608623
  var valid_608624 = query.getOrDefault("Version")
  valid_608624 = validateParameter(valid_608624, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_608624 != nil:
    section.add "Version", valid_608624
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608625 = header.getOrDefault("X-Amz-Signature")
  valid_608625 = validateParameter(valid_608625, JString, required = false,
                                 default = nil)
  if valid_608625 != nil:
    section.add "X-Amz-Signature", valid_608625
  var valid_608626 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608626 = validateParameter(valid_608626, JString, required = false,
                                 default = nil)
  if valid_608626 != nil:
    section.add "X-Amz-Content-Sha256", valid_608626
  var valid_608627 = header.getOrDefault("X-Amz-Date")
  valid_608627 = validateParameter(valid_608627, JString, required = false,
                                 default = nil)
  if valid_608627 != nil:
    section.add "X-Amz-Date", valid_608627
  var valid_608628 = header.getOrDefault("X-Amz-Credential")
  valid_608628 = validateParameter(valid_608628, JString, required = false,
                                 default = nil)
  if valid_608628 != nil:
    section.add "X-Amz-Credential", valid_608628
  var valid_608629 = header.getOrDefault("X-Amz-Security-Token")
  valid_608629 = validateParameter(valid_608629, JString, required = false,
                                 default = nil)
  if valid_608629 != nil:
    section.add "X-Amz-Security-Token", valid_608629
  var valid_608630 = header.getOrDefault("X-Amz-Algorithm")
  valid_608630 = validateParameter(valid_608630, JString, required = false,
                                 default = nil)
  if valid_608630 != nil:
    section.add "X-Amz-Algorithm", valid_608630
  var valid_608631 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608631 = validateParameter(valid_608631, JString, required = false,
                                 default = nil)
  if valid_608631 != nil:
    section.add "X-Amz-SignedHeaders", valid_608631
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608632: Call_GetVerifyDomainDkim_608619; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a set of DKIM tokens for a domain identity.</p> <important> <p>When you execute the <code>VerifyDomainDkim</code> operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the <code>VerifyDomainIdentity</code> operation. However, you can't send email from the domain until you either successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">verify it</a> or you successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">set up DKIM for it</a>.</p> </important> <p>You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM.</p> <p>To create the CNAME records for DKIM authentication, use the following values:</p> <ul> <li> <p> <b>Name</b>: <i>token</i>._domainkey.<i>example.com</i> </p> </li> <li> <p> <b>Type</b>: CNAME</p> </li> <li> <p> <b>Value</b>: <i>token</i>.dkim.amazonses.com</p> </li> </ul> <p>In the preceding example, replace <i>token</i> with one of the tokens that are generated when you execute this operation. Replace <i>example.com</i> with your domain. Repeat this process for each token that's generated by this operation.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_608632.validator(path, query, header, formData, body)
  let scheme = call_608632.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608632.url(scheme.get, call_608632.host, call_608632.base,
                         call_608632.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608632, url, valid)

proc call*(call_608633: Call_GetVerifyDomainDkim_608619; Domain: string;
          Action: string = "VerifyDomainDkim"; Version: string = "2010-12-01"): Recallable =
  ## getVerifyDomainDkim
  ## <p>Returns a set of DKIM tokens for a domain identity.</p> <important> <p>When you execute the <code>VerifyDomainDkim</code> operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the <code>VerifyDomainIdentity</code> operation. However, you can't send email from the domain until you either successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">verify it</a> or you successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">set up DKIM for it</a>.</p> </important> <p>You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM.</p> <p>To create the CNAME records for DKIM authentication, use the following values:</p> <ul> <li> <p> <b>Name</b>: <i>token</i>._domainkey.<i>example.com</i> </p> </li> <li> <p> <b>Type</b>: CNAME</p> </li> <li> <p> <b>Value</b>: <i>token</i>.dkim.amazonses.com</p> </li> </ul> <p>In the preceding example, replace <i>token</i> with one of the tokens that are generated when you execute this operation. Replace <i>example.com</i> with your domain. Repeat this process for each token that's generated by this operation.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Domain: string (required)
  ##         : The name of the domain to be verified for Easy DKIM signing.
  ##   Version: string (required)
  var query_608634 = newJObject()
  add(query_608634, "Action", newJString(Action))
  add(query_608634, "Domain", newJString(Domain))
  add(query_608634, "Version", newJString(Version))
  result = call_608633.call(nil, query_608634, nil, nil, nil)

var getVerifyDomainDkim* = Call_GetVerifyDomainDkim_608619(
    name: "getVerifyDomainDkim", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=VerifyDomainDkim",
    validator: validate_GetVerifyDomainDkim_608620, base: "/",
    url: url_GetVerifyDomainDkim_608621, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostVerifyDomainIdentity_608668 = ref object of OpenApiRestCall_605589
proc url_PostVerifyDomainIdentity_608670(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostVerifyDomainIdentity_608669(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds a domain to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. For more information about verifying domains, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608671 = query.getOrDefault("Action")
  valid_608671 = validateParameter(valid_608671, JString, required = true,
                                 default = newJString("VerifyDomainIdentity"))
  if valid_608671 != nil:
    section.add "Action", valid_608671
  var valid_608672 = query.getOrDefault("Version")
  valid_608672 = validateParameter(valid_608672, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_608672 != nil:
    section.add "Version", valid_608672
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608673 = header.getOrDefault("X-Amz-Signature")
  valid_608673 = validateParameter(valid_608673, JString, required = false,
                                 default = nil)
  if valid_608673 != nil:
    section.add "X-Amz-Signature", valid_608673
  var valid_608674 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608674 = validateParameter(valid_608674, JString, required = false,
                                 default = nil)
  if valid_608674 != nil:
    section.add "X-Amz-Content-Sha256", valid_608674
  var valid_608675 = header.getOrDefault("X-Amz-Date")
  valid_608675 = validateParameter(valid_608675, JString, required = false,
                                 default = nil)
  if valid_608675 != nil:
    section.add "X-Amz-Date", valid_608675
  var valid_608676 = header.getOrDefault("X-Amz-Credential")
  valid_608676 = validateParameter(valid_608676, JString, required = false,
                                 default = nil)
  if valid_608676 != nil:
    section.add "X-Amz-Credential", valid_608676
  var valid_608677 = header.getOrDefault("X-Amz-Security-Token")
  valid_608677 = validateParameter(valid_608677, JString, required = false,
                                 default = nil)
  if valid_608677 != nil:
    section.add "X-Amz-Security-Token", valid_608677
  var valid_608678 = header.getOrDefault("X-Amz-Algorithm")
  valid_608678 = validateParameter(valid_608678, JString, required = false,
                                 default = nil)
  if valid_608678 != nil:
    section.add "X-Amz-Algorithm", valid_608678
  var valid_608679 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608679 = validateParameter(valid_608679, JString, required = false,
                                 default = nil)
  if valid_608679 != nil:
    section.add "X-Amz-SignedHeaders", valid_608679
  result.add "header", section
  ## parameters in `formData` object:
  ##   Domain: JString (required)
  ##         : The domain to be verified.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Domain` field"
  var valid_608680 = formData.getOrDefault("Domain")
  valid_608680 = validateParameter(valid_608680, JString, required = true,
                                 default = nil)
  if valid_608680 != nil:
    section.add "Domain", valid_608680
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608681: Call_PostVerifyDomainIdentity_608668; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds a domain to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. For more information about verifying domains, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_608681.validator(path, query, header, formData, body)
  let scheme = call_608681.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608681.url(scheme.get, call_608681.host, call_608681.base,
                         call_608681.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608681, url, valid)

proc call*(call_608682: Call_PostVerifyDomainIdentity_608668; Domain: string;
          Action: string = "VerifyDomainIdentity"; Version: string = "2010-12-01"): Recallable =
  ## postVerifyDomainIdentity
  ## <p>Adds a domain to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. For more information about verifying domains, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second.</p>
  ##   Domain: string (required)
  ##         : The domain to be verified.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608683 = newJObject()
  var formData_608684 = newJObject()
  add(formData_608684, "Domain", newJString(Domain))
  add(query_608683, "Action", newJString(Action))
  add(query_608683, "Version", newJString(Version))
  result = call_608682.call(nil, query_608683, nil, formData_608684, nil)

var postVerifyDomainIdentity* = Call_PostVerifyDomainIdentity_608668(
    name: "postVerifyDomainIdentity", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=VerifyDomainIdentity",
    validator: validate_PostVerifyDomainIdentity_608669, base: "/",
    url: url_PostVerifyDomainIdentity_608670, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetVerifyDomainIdentity_608652 = ref object of OpenApiRestCall_605589
proc url_GetVerifyDomainIdentity_608654(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetVerifyDomainIdentity_608653(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds a domain to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. For more information about verifying domains, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Domain: JString (required)
  ##         : The domain to be verified.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608655 = query.getOrDefault("Action")
  valid_608655 = validateParameter(valid_608655, JString, required = true,
                                 default = newJString("VerifyDomainIdentity"))
  if valid_608655 != nil:
    section.add "Action", valid_608655
  var valid_608656 = query.getOrDefault("Domain")
  valid_608656 = validateParameter(valid_608656, JString, required = true,
                                 default = nil)
  if valid_608656 != nil:
    section.add "Domain", valid_608656
  var valid_608657 = query.getOrDefault("Version")
  valid_608657 = validateParameter(valid_608657, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_608657 != nil:
    section.add "Version", valid_608657
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608658 = header.getOrDefault("X-Amz-Signature")
  valid_608658 = validateParameter(valid_608658, JString, required = false,
                                 default = nil)
  if valid_608658 != nil:
    section.add "X-Amz-Signature", valid_608658
  var valid_608659 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608659 = validateParameter(valid_608659, JString, required = false,
                                 default = nil)
  if valid_608659 != nil:
    section.add "X-Amz-Content-Sha256", valid_608659
  var valid_608660 = header.getOrDefault("X-Amz-Date")
  valid_608660 = validateParameter(valid_608660, JString, required = false,
                                 default = nil)
  if valid_608660 != nil:
    section.add "X-Amz-Date", valid_608660
  var valid_608661 = header.getOrDefault("X-Amz-Credential")
  valid_608661 = validateParameter(valid_608661, JString, required = false,
                                 default = nil)
  if valid_608661 != nil:
    section.add "X-Amz-Credential", valid_608661
  var valid_608662 = header.getOrDefault("X-Amz-Security-Token")
  valid_608662 = validateParameter(valid_608662, JString, required = false,
                                 default = nil)
  if valid_608662 != nil:
    section.add "X-Amz-Security-Token", valid_608662
  var valid_608663 = header.getOrDefault("X-Amz-Algorithm")
  valid_608663 = validateParameter(valid_608663, JString, required = false,
                                 default = nil)
  if valid_608663 != nil:
    section.add "X-Amz-Algorithm", valid_608663
  var valid_608664 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608664 = validateParameter(valid_608664, JString, required = false,
                                 default = nil)
  if valid_608664 != nil:
    section.add "X-Amz-SignedHeaders", valid_608664
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608665: Call_GetVerifyDomainIdentity_608652; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds a domain to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. For more information about verifying domains, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_608665.validator(path, query, header, formData, body)
  let scheme = call_608665.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608665.url(scheme.get, call_608665.host, call_608665.base,
                         call_608665.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608665, url, valid)

proc call*(call_608666: Call_GetVerifyDomainIdentity_608652; Domain: string;
          Action: string = "VerifyDomainIdentity"; Version: string = "2010-12-01"): Recallable =
  ## getVerifyDomainIdentity
  ## <p>Adds a domain to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. For more information about verifying domains, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Domain: string (required)
  ##         : The domain to be verified.
  ##   Version: string (required)
  var query_608667 = newJObject()
  add(query_608667, "Action", newJString(Action))
  add(query_608667, "Domain", newJString(Domain))
  add(query_608667, "Version", newJString(Version))
  result = call_608666.call(nil, query_608667, nil, nil, nil)

var getVerifyDomainIdentity* = Call_GetVerifyDomainIdentity_608652(
    name: "getVerifyDomainIdentity", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=VerifyDomainIdentity",
    validator: validate_GetVerifyDomainIdentity_608653, base: "/",
    url: url_GetVerifyDomainIdentity_608654, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostVerifyEmailAddress_608701 = ref object of OpenApiRestCall_605589
proc url_PostVerifyEmailAddress_608703(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostVerifyEmailAddress_608702(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deprecated. Use the <code>VerifyEmailIdentity</code> operation to verify a new email address.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608704 = query.getOrDefault("Action")
  valid_608704 = validateParameter(valid_608704, JString, required = true,
                                 default = newJString("VerifyEmailAddress"))
  if valid_608704 != nil:
    section.add "Action", valid_608704
  var valid_608705 = query.getOrDefault("Version")
  valid_608705 = validateParameter(valid_608705, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_608705 != nil:
    section.add "Version", valid_608705
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608706 = header.getOrDefault("X-Amz-Signature")
  valid_608706 = validateParameter(valid_608706, JString, required = false,
                                 default = nil)
  if valid_608706 != nil:
    section.add "X-Amz-Signature", valid_608706
  var valid_608707 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608707 = validateParameter(valid_608707, JString, required = false,
                                 default = nil)
  if valid_608707 != nil:
    section.add "X-Amz-Content-Sha256", valid_608707
  var valid_608708 = header.getOrDefault("X-Amz-Date")
  valid_608708 = validateParameter(valid_608708, JString, required = false,
                                 default = nil)
  if valid_608708 != nil:
    section.add "X-Amz-Date", valid_608708
  var valid_608709 = header.getOrDefault("X-Amz-Credential")
  valid_608709 = validateParameter(valid_608709, JString, required = false,
                                 default = nil)
  if valid_608709 != nil:
    section.add "X-Amz-Credential", valid_608709
  var valid_608710 = header.getOrDefault("X-Amz-Security-Token")
  valid_608710 = validateParameter(valid_608710, JString, required = false,
                                 default = nil)
  if valid_608710 != nil:
    section.add "X-Amz-Security-Token", valid_608710
  var valid_608711 = header.getOrDefault("X-Amz-Algorithm")
  valid_608711 = validateParameter(valid_608711, JString, required = false,
                                 default = nil)
  if valid_608711 != nil:
    section.add "X-Amz-Algorithm", valid_608711
  var valid_608712 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608712 = validateParameter(valid_608712, JString, required = false,
                                 default = nil)
  if valid_608712 != nil:
    section.add "X-Amz-SignedHeaders", valid_608712
  result.add "header", section
  ## parameters in `formData` object:
  ##   EmailAddress: JString (required)
  ##               : The email address to be verified.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `EmailAddress` field"
  var valid_608713 = formData.getOrDefault("EmailAddress")
  valid_608713 = validateParameter(valid_608713, JString, required = true,
                                 default = nil)
  if valid_608713 != nil:
    section.add "EmailAddress", valid_608713
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608714: Call_PostVerifyEmailAddress_608701; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deprecated. Use the <code>VerifyEmailIdentity</code> operation to verify a new email address.
  ## 
  let valid = call_608714.validator(path, query, header, formData, body)
  let scheme = call_608714.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608714.url(scheme.get, call_608714.host, call_608714.base,
                         call_608714.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608714, url, valid)

proc call*(call_608715: Call_PostVerifyEmailAddress_608701; EmailAddress: string;
          Action: string = "VerifyEmailAddress"; Version: string = "2010-12-01"): Recallable =
  ## postVerifyEmailAddress
  ## Deprecated. Use the <code>VerifyEmailIdentity</code> operation to verify a new email address.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   EmailAddress: string (required)
  ##               : The email address to be verified.
  var query_608716 = newJObject()
  var formData_608717 = newJObject()
  add(query_608716, "Action", newJString(Action))
  add(query_608716, "Version", newJString(Version))
  add(formData_608717, "EmailAddress", newJString(EmailAddress))
  result = call_608715.call(nil, query_608716, nil, formData_608717, nil)

var postVerifyEmailAddress* = Call_PostVerifyEmailAddress_608701(
    name: "postVerifyEmailAddress", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=VerifyEmailAddress",
    validator: validate_PostVerifyEmailAddress_608702, base: "/",
    url: url_PostVerifyEmailAddress_608703, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetVerifyEmailAddress_608685 = ref object of OpenApiRestCall_605589
proc url_GetVerifyEmailAddress_608687(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetVerifyEmailAddress_608686(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deprecated. Use the <code>VerifyEmailIdentity</code> operation to verify a new email address.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   EmailAddress: JString (required)
  ##               : The email address to be verified.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608688 = query.getOrDefault("Action")
  valid_608688 = validateParameter(valid_608688, JString, required = true,
                                 default = newJString("VerifyEmailAddress"))
  if valid_608688 != nil:
    section.add "Action", valid_608688
  var valid_608689 = query.getOrDefault("EmailAddress")
  valid_608689 = validateParameter(valid_608689, JString, required = true,
                                 default = nil)
  if valid_608689 != nil:
    section.add "EmailAddress", valid_608689
  var valid_608690 = query.getOrDefault("Version")
  valid_608690 = validateParameter(valid_608690, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_608690 != nil:
    section.add "Version", valid_608690
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608691 = header.getOrDefault("X-Amz-Signature")
  valid_608691 = validateParameter(valid_608691, JString, required = false,
                                 default = nil)
  if valid_608691 != nil:
    section.add "X-Amz-Signature", valid_608691
  var valid_608692 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608692 = validateParameter(valid_608692, JString, required = false,
                                 default = nil)
  if valid_608692 != nil:
    section.add "X-Amz-Content-Sha256", valid_608692
  var valid_608693 = header.getOrDefault("X-Amz-Date")
  valid_608693 = validateParameter(valid_608693, JString, required = false,
                                 default = nil)
  if valid_608693 != nil:
    section.add "X-Amz-Date", valid_608693
  var valid_608694 = header.getOrDefault("X-Amz-Credential")
  valid_608694 = validateParameter(valid_608694, JString, required = false,
                                 default = nil)
  if valid_608694 != nil:
    section.add "X-Amz-Credential", valid_608694
  var valid_608695 = header.getOrDefault("X-Amz-Security-Token")
  valid_608695 = validateParameter(valid_608695, JString, required = false,
                                 default = nil)
  if valid_608695 != nil:
    section.add "X-Amz-Security-Token", valid_608695
  var valid_608696 = header.getOrDefault("X-Amz-Algorithm")
  valid_608696 = validateParameter(valid_608696, JString, required = false,
                                 default = nil)
  if valid_608696 != nil:
    section.add "X-Amz-Algorithm", valid_608696
  var valid_608697 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608697 = validateParameter(valid_608697, JString, required = false,
                                 default = nil)
  if valid_608697 != nil:
    section.add "X-Amz-SignedHeaders", valid_608697
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608698: Call_GetVerifyEmailAddress_608685; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deprecated. Use the <code>VerifyEmailIdentity</code> operation to verify a new email address.
  ## 
  let valid = call_608698.validator(path, query, header, formData, body)
  let scheme = call_608698.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608698.url(scheme.get, call_608698.host, call_608698.base,
                         call_608698.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608698, url, valid)

proc call*(call_608699: Call_GetVerifyEmailAddress_608685; EmailAddress: string;
          Action: string = "VerifyEmailAddress"; Version: string = "2010-12-01"): Recallable =
  ## getVerifyEmailAddress
  ## Deprecated. Use the <code>VerifyEmailIdentity</code> operation to verify a new email address.
  ##   Action: string (required)
  ##   EmailAddress: string (required)
  ##               : The email address to be verified.
  ##   Version: string (required)
  var query_608700 = newJObject()
  add(query_608700, "Action", newJString(Action))
  add(query_608700, "EmailAddress", newJString(EmailAddress))
  add(query_608700, "Version", newJString(Version))
  result = call_608699.call(nil, query_608700, nil, nil, nil)

var getVerifyEmailAddress* = Call_GetVerifyEmailAddress_608685(
    name: "getVerifyEmailAddress", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=VerifyEmailAddress",
    validator: validate_GetVerifyEmailAddress_608686, base: "/",
    url: url_GetVerifyEmailAddress_608687, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostVerifyEmailIdentity_608734 = ref object of OpenApiRestCall_605589
proc url_PostVerifyEmailIdentity_608736(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostVerifyEmailIdentity_608735(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS region and attempts to verify it. As a result of executing this operation, a verification email is sent to the specified address.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608737 = query.getOrDefault("Action")
  valid_608737 = validateParameter(valid_608737, JString, required = true,
                                 default = newJString("VerifyEmailIdentity"))
  if valid_608737 != nil:
    section.add "Action", valid_608737
  var valid_608738 = query.getOrDefault("Version")
  valid_608738 = validateParameter(valid_608738, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_608738 != nil:
    section.add "Version", valid_608738
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608739 = header.getOrDefault("X-Amz-Signature")
  valid_608739 = validateParameter(valid_608739, JString, required = false,
                                 default = nil)
  if valid_608739 != nil:
    section.add "X-Amz-Signature", valid_608739
  var valid_608740 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608740 = validateParameter(valid_608740, JString, required = false,
                                 default = nil)
  if valid_608740 != nil:
    section.add "X-Amz-Content-Sha256", valid_608740
  var valid_608741 = header.getOrDefault("X-Amz-Date")
  valid_608741 = validateParameter(valid_608741, JString, required = false,
                                 default = nil)
  if valid_608741 != nil:
    section.add "X-Amz-Date", valid_608741
  var valid_608742 = header.getOrDefault("X-Amz-Credential")
  valid_608742 = validateParameter(valid_608742, JString, required = false,
                                 default = nil)
  if valid_608742 != nil:
    section.add "X-Amz-Credential", valid_608742
  var valid_608743 = header.getOrDefault("X-Amz-Security-Token")
  valid_608743 = validateParameter(valid_608743, JString, required = false,
                                 default = nil)
  if valid_608743 != nil:
    section.add "X-Amz-Security-Token", valid_608743
  var valid_608744 = header.getOrDefault("X-Amz-Algorithm")
  valid_608744 = validateParameter(valid_608744, JString, required = false,
                                 default = nil)
  if valid_608744 != nil:
    section.add "X-Amz-Algorithm", valid_608744
  var valid_608745 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608745 = validateParameter(valid_608745, JString, required = false,
                                 default = nil)
  if valid_608745 != nil:
    section.add "X-Amz-SignedHeaders", valid_608745
  result.add "header", section
  ## parameters in `formData` object:
  ##   EmailAddress: JString (required)
  ##               : The email address to be verified.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `EmailAddress` field"
  var valid_608746 = formData.getOrDefault("EmailAddress")
  valid_608746 = validateParameter(valid_608746, JString, required = true,
                                 default = nil)
  if valid_608746 != nil:
    section.add "EmailAddress", valid_608746
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608747: Call_PostVerifyEmailIdentity_608734; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS region and attempts to verify it. As a result of executing this operation, a verification email is sent to the specified address.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_608747.validator(path, query, header, formData, body)
  let scheme = call_608747.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608747.url(scheme.get, call_608747.host, call_608747.base,
                         call_608747.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608747, url, valid)

proc call*(call_608748: Call_PostVerifyEmailIdentity_608734; EmailAddress: string;
          Action: string = "VerifyEmailIdentity"; Version: string = "2010-12-01"): Recallable =
  ## postVerifyEmailIdentity
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS region and attempts to verify it. As a result of executing this operation, a verification email is sent to the specified address.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   EmailAddress: string (required)
  ##               : The email address to be verified.
  var query_608749 = newJObject()
  var formData_608750 = newJObject()
  add(query_608749, "Action", newJString(Action))
  add(query_608749, "Version", newJString(Version))
  add(formData_608750, "EmailAddress", newJString(EmailAddress))
  result = call_608748.call(nil, query_608749, nil, formData_608750, nil)

var postVerifyEmailIdentity* = Call_PostVerifyEmailIdentity_608734(
    name: "postVerifyEmailIdentity", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=VerifyEmailIdentity",
    validator: validate_PostVerifyEmailIdentity_608735, base: "/",
    url: url_PostVerifyEmailIdentity_608736, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetVerifyEmailIdentity_608718 = ref object of OpenApiRestCall_605589
proc url_GetVerifyEmailIdentity_608720(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetVerifyEmailIdentity_608719(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS region and attempts to verify it. As a result of executing this operation, a verification email is sent to the specified address.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   EmailAddress: JString (required)
  ##               : The email address to be verified.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608721 = query.getOrDefault("Action")
  valid_608721 = validateParameter(valid_608721, JString, required = true,
                                 default = newJString("VerifyEmailIdentity"))
  if valid_608721 != nil:
    section.add "Action", valid_608721
  var valid_608722 = query.getOrDefault("EmailAddress")
  valid_608722 = validateParameter(valid_608722, JString, required = true,
                                 default = nil)
  if valid_608722 != nil:
    section.add "EmailAddress", valid_608722
  var valid_608723 = query.getOrDefault("Version")
  valid_608723 = validateParameter(valid_608723, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_608723 != nil:
    section.add "Version", valid_608723
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608724 = header.getOrDefault("X-Amz-Signature")
  valid_608724 = validateParameter(valid_608724, JString, required = false,
                                 default = nil)
  if valid_608724 != nil:
    section.add "X-Amz-Signature", valid_608724
  var valid_608725 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608725 = validateParameter(valid_608725, JString, required = false,
                                 default = nil)
  if valid_608725 != nil:
    section.add "X-Amz-Content-Sha256", valid_608725
  var valid_608726 = header.getOrDefault("X-Amz-Date")
  valid_608726 = validateParameter(valid_608726, JString, required = false,
                                 default = nil)
  if valid_608726 != nil:
    section.add "X-Amz-Date", valid_608726
  var valid_608727 = header.getOrDefault("X-Amz-Credential")
  valid_608727 = validateParameter(valid_608727, JString, required = false,
                                 default = nil)
  if valid_608727 != nil:
    section.add "X-Amz-Credential", valid_608727
  var valid_608728 = header.getOrDefault("X-Amz-Security-Token")
  valid_608728 = validateParameter(valid_608728, JString, required = false,
                                 default = nil)
  if valid_608728 != nil:
    section.add "X-Amz-Security-Token", valid_608728
  var valid_608729 = header.getOrDefault("X-Amz-Algorithm")
  valid_608729 = validateParameter(valid_608729, JString, required = false,
                                 default = nil)
  if valid_608729 != nil:
    section.add "X-Amz-Algorithm", valid_608729
  var valid_608730 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608730 = validateParameter(valid_608730, JString, required = false,
                                 default = nil)
  if valid_608730 != nil:
    section.add "X-Amz-SignedHeaders", valid_608730
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608731: Call_GetVerifyEmailIdentity_608718; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS region and attempts to verify it. As a result of executing this operation, a verification email is sent to the specified address.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_608731.validator(path, query, header, formData, body)
  let scheme = call_608731.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608731.url(scheme.get, call_608731.host, call_608731.base,
                         call_608731.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608731, url, valid)

proc call*(call_608732: Call_GetVerifyEmailIdentity_608718; EmailAddress: string;
          Action: string = "VerifyEmailIdentity"; Version: string = "2010-12-01"): Recallable =
  ## getVerifyEmailIdentity
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS region and attempts to verify it. As a result of executing this operation, a verification email is sent to the specified address.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   EmailAddress: string (required)
  ##               : The email address to be verified.
  ##   Version: string (required)
  var query_608733 = newJObject()
  add(query_608733, "Action", newJString(Action))
  add(query_608733, "EmailAddress", newJString(EmailAddress))
  add(query_608733, "Version", newJString(Version))
  result = call_608732.call(nil, query_608733, nil, nil, nil)

var getVerifyEmailIdentity* = Call_GetVerifyEmailIdentity_608718(
    name: "getVerifyEmailIdentity", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=VerifyEmailIdentity",
    validator: validate_GetVerifyEmailIdentity_608719, base: "/",
    url: url_GetVerifyEmailIdentity_608720, schemes: {Scheme.Https, Scheme.Http})
export
  rest

proc atozSign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", "")
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", "")
    region = os.getEnv("AWS_REGION", "")
  assert secret != "", "need secret key in env"
  assert access != "", "need access key in env"
  assert region != "", "need region in env"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  let
    algo = SHA256
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  recall.headers.del "Host"
  recall.url = $url

method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, $input.getOrDefault("body"))
  result.atozSign(input.getOrDefault("query"), SHA256)
