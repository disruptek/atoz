
import
  json, options, hashes, tables, openapi/rest, os, uri, strutils, httpcore, sigv4

## auto-generated via openapi macro
## title: Amazon Simple Email Service
## version: 2010-12-01
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>Amazon Simple Email Service</fullname> <p> This document contains reference information for the <a href="https://aws.amazon.com/ses/">Amazon Simple Email Service</a> (Amazon SES) API, version 2010-12-01. This document is best used in conjunction with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html">Amazon SES Developer Guide</a>. </p> <note> <p> For a list of Amazon SES endpoints to use in service requests, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/regions.html">Regions and Amazon SES</a> in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html">Amazon SES Developer Guide</a>.</p> </note>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/email/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode): string

  OpenApiRestCall_772597 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_772597](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_772597): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    if js.kind notin {JString, JInt, JFloat, JNull, JBool}:
      return
    head = $js
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get())

const
  awsServers = {Scheme.Http: {"ap-northeast-1": "email.ap-northeast-1.amazonaws.com", "ap-southeast-1": "email.ap-southeast-1.amazonaws.com",
                           "us-west-2": "email.us-west-2.amazonaws.com",
                           "eu-west-2": "email.eu-west-2.amazonaws.com", "ap-northeast-3": "email.ap-northeast-3.amazonaws.com",
                           "eu-central-1": "email.eu-central-1.amazonaws.com",
                           "us-east-2": "email.us-east-2.amazonaws.com",
                           "us-east-1": "email.us-east-1.amazonaws.com", "cn-northwest-1": "email.cn-northwest-1.amazonaws.com.cn",
                           "ap-south-1": "email.ap-south-1.amazonaws.com",
                           "eu-north-1": "email.eu-north-1.amazonaws.com", "ap-northeast-2": "email.ap-northeast-2.amazonaws.com",
                           "us-west-1": "email.us-west-1.amazonaws.com", "us-gov-east-1": "email.us-gov-east-1.amazonaws.com",
                           "eu-west-3": "email.eu-west-3.amazonaws.com",
                           "cn-north-1": "email.cn-north-1.amazonaws.com.cn",
                           "sa-east-1": "email.sa-east-1.amazonaws.com",
                           "eu-west-1": "email.eu-west-1.amazonaws.com", "us-gov-west-1": "email.us-gov-west-1.amazonaws.com", "ap-southeast-2": "email.ap-southeast-2.amazonaws.com",
                           "ca-central-1": "email.ca-central-1.amazonaws.com"}.toTable, Scheme.Https: {
      "ap-northeast-1": "email.ap-northeast-1.amazonaws.com",
      "ap-southeast-1": "email.ap-southeast-1.amazonaws.com",
      "us-west-2": "email.us-west-2.amazonaws.com",
      "eu-west-2": "email.eu-west-2.amazonaws.com",
      "ap-northeast-3": "email.ap-northeast-3.amazonaws.com",
      "eu-central-1": "email.eu-central-1.amazonaws.com",
      "us-east-2": "email.us-east-2.amazonaws.com",
      "us-east-1": "email.us-east-1.amazonaws.com",
      "cn-northwest-1": "email.cn-northwest-1.amazonaws.com.cn",
      "ap-south-1": "email.ap-south-1.amazonaws.com",
      "eu-north-1": "email.eu-north-1.amazonaws.com",
      "ap-northeast-2": "email.ap-northeast-2.amazonaws.com",
      "us-west-1": "email.us-west-1.amazonaws.com",
      "us-gov-east-1": "email.us-gov-east-1.amazonaws.com",
      "eu-west-3": "email.eu-west-3.amazonaws.com",
      "cn-north-1": "email.cn-north-1.amazonaws.com.cn",
      "sa-east-1": "email.sa-east-1.amazonaws.com",
      "eu-west-1": "email.eu-west-1.amazonaws.com",
      "us-gov-west-1": "email.us-gov-west-1.amazonaws.com",
      "ap-southeast-2": "email.ap-southeast-2.amazonaws.com",
      "ca-central-1": "email.ca-central-1.amazonaws.com"}.toTable}.toTable
const
  awsServiceName = "email"
method hook(call: OpenApiRestCall; url: string; input: JsonNode): Recallable {.base.}
type
  Call_PostCloneReceiptRuleSet_773205 = ref object of OpenApiRestCall_772597
proc url_PostCloneReceiptRuleSet_773207(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCloneReceiptRuleSet_773206(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a receipt rule set by cloning an existing one. All receipt rules and configurations are copied to the new receipt rule set and are completely independent of the source rule set.</p> <p>For information about setting up rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773208 = query.getOrDefault("Action")
  valid_773208 = validateParameter(valid_773208, JString, required = true,
                                 default = newJString("CloneReceiptRuleSet"))
  if valid_773208 != nil:
    section.add "Action", valid_773208
  var valid_773209 = query.getOrDefault("Version")
  valid_773209 = validateParameter(valid_773209, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773209 != nil:
    section.add "Version", valid_773209
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773210 = header.getOrDefault("X-Amz-Date")
  valid_773210 = validateParameter(valid_773210, JString, required = false,
                                 default = nil)
  if valid_773210 != nil:
    section.add "X-Amz-Date", valid_773210
  var valid_773211 = header.getOrDefault("X-Amz-Security-Token")
  valid_773211 = validateParameter(valid_773211, JString, required = false,
                                 default = nil)
  if valid_773211 != nil:
    section.add "X-Amz-Security-Token", valid_773211
  var valid_773212 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773212 = validateParameter(valid_773212, JString, required = false,
                                 default = nil)
  if valid_773212 != nil:
    section.add "X-Amz-Content-Sha256", valid_773212
  var valid_773213 = header.getOrDefault("X-Amz-Algorithm")
  valid_773213 = validateParameter(valid_773213, JString, required = false,
                                 default = nil)
  if valid_773213 != nil:
    section.add "X-Amz-Algorithm", valid_773213
  var valid_773214 = header.getOrDefault("X-Amz-Signature")
  valid_773214 = validateParameter(valid_773214, JString, required = false,
                                 default = nil)
  if valid_773214 != nil:
    section.add "X-Amz-Signature", valid_773214
  var valid_773215 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773215 = validateParameter(valid_773215, JString, required = false,
                                 default = nil)
  if valid_773215 != nil:
    section.add "X-Amz-SignedHeaders", valid_773215
  var valid_773216 = header.getOrDefault("X-Amz-Credential")
  valid_773216 = validateParameter(valid_773216, JString, required = false,
                                 default = nil)
  if valid_773216 != nil:
    section.add "X-Amz-Credential", valid_773216
  result.add "header", section
  ## parameters in `formData` object:
  ##   OriginalRuleSetName: JString (required)
  ##                      : The name of the rule set to clone.
  ##   RuleSetName: JString (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OriginalRuleSetName` field"
  var valid_773217 = formData.getOrDefault("OriginalRuleSetName")
  valid_773217 = validateParameter(valid_773217, JString, required = true,
                                 default = nil)
  if valid_773217 != nil:
    section.add "OriginalRuleSetName", valid_773217
  var valid_773218 = formData.getOrDefault("RuleSetName")
  valid_773218 = validateParameter(valid_773218, JString, required = true,
                                 default = nil)
  if valid_773218 != nil:
    section.add "RuleSetName", valid_773218
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773219: Call_PostCloneReceiptRuleSet_773205; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a receipt rule set by cloning an existing one. All receipt rules and configurations are copied to the new receipt rule set and are completely independent of the source rule set.</p> <p>For information about setting up rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_773219.validator(path, query, header, formData, body)
  let scheme = call_773219.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773219.url(scheme.get, call_773219.host, call_773219.base,
                         call_773219.route, valid.getOrDefault("path"))
  result = hook(call_773219, url, valid)

proc call*(call_773220: Call_PostCloneReceiptRuleSet_773205;
          OriginalRuleSetName: string; RuleSetName: string;
          Action: string = "CloneReceiptRuleSet"; Version: string = "2010-12-01"): Recallable =
  ## postCloneReceiptRuleSet
  ## <p>Creates a receipt rule set by cloning an existing one. All receipt rules and configurations are copied to the new receipt rule set and are completely independent of the source rule set.</p> <p>For information about setting up rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   OriginalRuleSetName: string (required)
  ##                      : The name of the rule set to clone.
  ##   RuleSetName: string (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773221 = newJObject()
  var formData_773222 = newJObject()
  add(formData_773222, "OriginalRuleSetName", newJString(OriginalRuleSetName))
  add(formData_773222, "RuleSetName", newJString(RuleSetName))
  add(query_773221, "Action", newJString(Action))
  add(query_773221, "Version", newJString(Version))
  result = call_773220.call(nil, query_773221, nil, formData_773222, nil)

var postCloneReceiptRuleSet* = Call_PostCloneReceiptRuleSet_773205(
    name: "postCloneReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=CloneReceiptRuleSet",
    validator: validate_PostCloneReceiptRuleSet_773206, base: "/",
    url: url_PostCloneReceiptRuleSet_773207, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCloneReceiptRuleSet_772933 = ref object of OpenApiRestCall_772597
proc url_GetCloneReceiptRuleSet_772935(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCloneReceiptRuleSet_772934(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a receipt rule set by cloning an existing one. All receipt rules and configurations are copied to the new receipt rule set and are completely independent of the source rule set.</p> <p>For information about setting up rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleSetName: JString (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Action: JString (required)
  ##   OriginalRuleSetName: JString (required)
  ##                      : The name of the rule set to clone.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleSetName` field"
  var valid_773047 = query.getOrDefault("RuleSetName")
  valid_773047 = validateParameter(valid_773047, JString, required = true,
                                 default = nil)
  if valid_773047 != nil:
    section.add "RuleSetName", valid_773047
  var valid_773061 = query.getOrDefault("Action")
  valid_773061 = validateParameter(valid_773061, JString, required = true,
                                 default = newJString("CloneReceiptRuleSet"))
  if valid_773061 != nil:
    section.add "Action", valid_773061
  var valid_773062 = query.getOrDefault("OriginalRuleSetName")
  valid_773062 = validateParameter(valid_773062, JString, required = true,
                                 default = nil)
  if valid_773062 != nil:
    section.add "OriginalRuleSetName", valid_773062
  var valid_773063 = query.getOrDefault("Version")
  valid_773063 = validateParameter(valid_773063, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773063 != nil:
    section.add "Version", valid_773063
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773064 = header.getOrDefault("X-Amz-Date")
  valid_773064 = validateParameter(valid_773064, JString, required = false,
                                 default = nil)
  if valid_773064 != nil:
    section.add "X-Amz-Date", valid_773064
  var valid_773065 = header.getOrDefault("X-Amz-Security-Token")
  valid_773065 = validateParameter(valid_773065, JString, required = false,
                                 default = nil)
  if valid_773065 != nil:
    section.add "X-Amz-Security-Token", valid_773065
  var valid_773066 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773066 = validateParameter(valid_773066, JString, required = false,
                                 default = nil)
  if valid_773066 != nil:
    section.add "X-Amz-Content-Sha256", valid_773066
  var valid_773067 = header.getOrDefault("X-Amz-Algorithm")
  valid_773067 = validateParameter(valid_773067, JString, required = false,
                                 default = nil)
  if valid_773067 != nil:
    section.add "X-Amz-Algorithm", valid_773067
  var valid_773068 = header.getOrDefault("X-Amz-Signature")
  valid_773068 = validateParameter(valid_773068, JString, required = false,
                                 default = nil)
  if valid_773068 != nil:
    section.add "X-Amz-Signature", valid_773068
  var valid_773069 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773069 = validateParameter(valid_773069, JString, required = false,
                                 default = nil)
  if valid_773069 != nil:
    section.add "X-Amz-SignedHeaders", valid_773069
  var valid_773070 = header.getOrDefault("X-Amz-Credential")
  valid_773070 = validateParameter(valid_773070, JString, required = false,
                                 default = nil)
  if valid_773070 != nil:
    section.add "X-Amz-Credential", valid_773070
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773093: Call_GetCloneReceiptRuleSet_772933; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a receipt rule set by cloning an existing one. All receipt rules and configurations are copied to the new receipt rule set and are completely independent of the source rule set.</p> <p>For information about setting up rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_773093.validator(path, query, header, formData, body)
  let scheme = call_773093.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773093.url(scheme.get, call_773093.host, call_773093.base,
                         call_773093.route, valid.getOrDefault("path"))
  result = hook(call_773093, url, valid)

proc call*(call_773164: Call_GetCloneReceiptRuleSet_772933; RuleSetName: string;
          OriginalRuleSetName: string; Action: string = "CloneReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## getCloneReceiptRuleSet
  ## <p>Creates a receipt rule set by cloning an existing one. All receipt rules and configurations are copied to the new receipt rule set and are completely independent of the source rule set.</p> <p>For information about setting up rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Action: string (required)
  ##   OriginalRuleSetName: string (required)
  ##                      : The name of the rule set to clone.
  ##   Version: string (required)
  var query_773165 = newJObject()
  add(query_773165, "RuleSetName", newJString(RuleSetName))
  add(query_773165, "Action", newJString(Action))
  add(query_773165, "OriginalRuleSetName", newJString(OriginalRuleSetName))
  add(query_773165, "Version", newJString(Version))
  result = call_773164.call(nil, query_773165, nil, nil, nil)

var getCloneReceiptRuleSet* = Call_GetCloneReceiptRuleSet_772933(
    name: "getCloneReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=CloneReceiptRuleSet",
    validator: validate_GetCloneReceiptRuleSet_772934, base: "/",
    url: url_GetCloneReceiptRuleSet_772935, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateConfigurationSet_773239 = ref object of OpenApiRestCall_772597
proc url_PostCreateConfigurationSet_773241(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateConfigurationSet_773240(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a configuration set.</p> <p>Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773242 = query.getOrDefault("Action")
  valid_773242 = validateParameter(valid_773242, JString, required = true,
                                 default = newJString("CreateConfigurationSet"))
  if valid_773242 != nil:
    section.add "Action", valid_773242
  var valid_773243 = query.getOrDefault("Version")
  valid_773243 = validateParameter(valid_773243, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773243 != nil:
    section.add "Version", valid_773243
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773244 = header.getOrDefault("X-Amz-Date")
  valid_773244 = validateParameter(valid_773244, JString, required = false,
                                 default = nil)
  if valid_773244 != nil:
    section.add "X-Amz-Date", valid_773244
  var valid_773245 = header.getOrDefault("X-Amz-Security-Token")
  valid_773245 = validateParameter(valid_773245, JString, required = false,
                                 default = nil)
  if valid_773245 != nil:
    section.add "X-Amz-Security-Token", valid_773245
  var valid_773246 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773246 = validateParameter(valid_773246, JString, required = false,
                                 default = nil)
  if valid_773246 != nil:
    section.add "X-Amz-Content-Sha256", valid_773246
  var valid_773247 = header.getOrDefault("X-Amz-Algorithm")
  valid_773247 = validateParameter(valid_773247, JString, required = false,
                                 default = nil)
  if valid_773247 != nil:
    section.add "X-Amz-Algorithm", valid_773247
  var valid_773248 = header.getOrDefault("X-Amz-Signature")
  valid_773248 = validateParameter(valid_773248, JString, required = false,
                                 default = nil)
  if valid_773248 != nil:
    section.add "X-Amz-Signature", valid_773248
  var valid_773249 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773249 = validateParameter(valid_773249, JString, required = false,
                                 default = nil)
  if valid_773249 != nil:
    section.add "X-Amz-SignedHeaders", valid_773249
  var valid_773250 = header.getOrDefault("X-Amz-Credential")
  valid_773250 = validateParameter(valid_773250, JString, required = false,
                                 default = nil)
  if valid_773250 != nil:
    section.add "X-Amz-Credential", valid_773250
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSet.Name: JString
  ##                        : <p>The name of the configuration set.</p> <p>Configuration sets let you create groups of rules that you can apply to the emails you send using Amazon SES. For more information about using configuration sets, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/using-configuration-sets.html">Using Amazon SES Configuration Sets</a> in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the configuration set. The name must meet the following requirements:</p> <ul> <li> <p>Contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain 64 characters or fewer.</p> </li> </ul>
  section = newJObject()
  var valid_773251 = formData.getOrDefault("ConfigurationSet.Name")
  valid_773251 = validateParameter(valid_773251, JString, required = false,
                                 default = nil)
  if valid_773251 != nil:
    section.add "ConfigurationSet.Name", valid_773251
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773252: Call_PostCreateConfigurationSet_773239; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a configuration set.</p> <p>Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_773252.validator(path, query, header, formData, body)
  let scheme = call_773252.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773252.url(scheme.get, call_773252.host, call_773252.base,
                         call_773252.route, valid.getOrDefault("path"))
  result = hook(call_773252, url, valid)

proc call*(call_773253: Call_PostCreateConfigurationSet_773239;
          ConfigurationSetName: string = "";
          Action: string = "CreateConfigurationSet"; Version: string = "2010-12-01"): Recallable =
  ## postCreateConfigurationSet
  ## <p>Creates a configuration set.</p> <p>Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string
  ##                       : <p>The name of the configuration set.</p> <p>Configuration sets let you create groups of rules that you can apply to the emails you send using Amazon SES. For more information about using configuration sets, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/using-configuration-sets.html">Using Amazon SES Configuration Sets</a> in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the configuration set. The name must meet the following requirements:</p> <ul> <li> <p>Contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain 64 characters or fewer.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773254 = newJObject()
  var formData_773255 = newJObject()
  add(formData_773255, "ConfigurationSet.Name", newJString(ConfigurationSetName))
  add(query_773254, "Action", newJString(Action))
  add(query_773254, "Version", newJString(Version))
  result = call_773253.call(nil, query_773254, nil, formData_773255, nil)

var postCreateConfigurationSet* = Call_PostCreateConfigurationSet_773239(
    name: "postCreateConfigurationSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=CreateConfigurationSet",
    validator: validate_PostCreateConfigurationSet_773240, base: "/",
    url: url_PostCreateConfigurationSet_773241,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateConfigurationSet_773223 = ref object of OpenApiRestCall_772597
proc url_GetCreateConfigurationSet_773225(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateConfigurationSet_773224(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a configuration set.</p> <p>Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ConfigurationSet.Name: JString
  ##                        : <p>The name of the configuration set.</p> <p>Configuration sets let you create groups of rules that you can apply to the emails you send using Amazon SES. For more information about using configuration sets, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/using-configuration-sets.html">Using Amazon SES Configuration Sets</a> in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the configuration set. The name must meet the following requirements:</p> <ul> <li> <p>Contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain 64 characters or fewer.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_773226 = query.getOrDefault("ConfigurationSet.Name")
  valid_773226 = validateParameter(valid_773226, JString, required = false,
                                 default = nil)
  if valid_773226 != nil:
    section.add "ConfigurationSet.Name", valid_773226
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773227 = query.getOrDefault("Action")
  valid_773227 = validateParameter(valid_773227, JString, required = true,
                                 default = newJString("CreateConfigurationSet"))
  if valid_773227 != nil:
    section.add "Action", valid_773227
  var valid_773228 = query.getOrDefault("Version")
  valid_773228 = validateParameter(valid_773228, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773228 != nil:
    section.add "Version", valid_773228
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773229 = header.getOrDefault("X-Amz-Date")
  valid_773229 = validateParameter(valid_773229, JString, required = false,
                                 default = nil)
  if valid_773229 != nil:
    section.add "X-Amz-Date", valid_773229
  var valid_773230 = header.getOrDefault("X-Amz-Security-Token")
  valid_773230 = validateParameter(valid_773230, JString, required = false,
                                 default = nil)
  if valid_773230 != nil:
    section.add "X-Amz-Security-Token", valid_773230
  var valid_773231 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773231 = validateParameter(valid_773231, JString, required = false,
                                 default = nil)
  if valid_773231 != nil:
    section.add "X-Amz-Content-Sha256", valid_773231
  var valid_773232 = header.getOrDefault("X-Amz-Algorithm")
  valid_773232 = validateParameter(valid_773232, JString, required = false,
                                 default = nil)
  if valid_773232 != nil:
    section.add "X-Amz-Algorithm", valid_773232
  var valid_773233 = header.getOrDefault("X-Amz-Signature")
  valid_773233 = validateParameter(valid_773233, JString, required = false,
                                 default = nil)
  if valid_773233 != nil:
    section.add "X-Amz-Signature", valid_773233
  var valid_773234 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773234 = validateParameter(valid_773234, JString, required = false,
                                 default = nil)
  if valid_773234 != nil:
    section.add "X-Amz-SignedHeaders", valid_773234
  var valid_773235 = header.getOrDefault("X-Amz-Credential")
  valid_773235 = validateParameter(valid_773235, JString, required = false,
                                 default = nil)
  if valid_773235 != nil:
    section.add "X-Amz-Credential", valid_773235
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773236: Call_GetCreateConfigurationSet_773223; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a configuration set.</p> <p>Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_773236.validator(path, query, header, formData, body)
  let scheme = call_773236.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773236.url(scheme.get, call_773236.host, call_773236.base,
                         call_773236.route, valid.getOrDefault("path"))
  result = hook(call_773236, url, valid)

proc call*(call_773237: Call_GetCreateConfigurationSet_773223;
          ConfigurationSetName: string = "";
          Action: string = "CreateConfigurationSet"; Version: string = "2010-12-01"): Recallable =
  ## getCreateConfigurationSet
  ## <p>Creates a configuration set.</p> <p>Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string
  ##                       : <p>The name of the configuration set.</p> <p>Configuration sets let you create groups of rules that you can apply to the emails you send using Amazon SES. For more information about using configuration sets, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/using-configuration-sets.html">Using Amazon SES Configuration Sets</a> in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the configuration set. The name must meet the following requirements:</p> <ul> <li> <p>Contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain 64 characters or fewer.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773238 = newJObject()
  add(query_773238, "ConfigurationSet.Name", newJString(ConfigurationSetName))
  add(query_773238, "Action", newJString(Action))
  add(query_773238, "Version", newJString(Version))
  result = call_773237.call(nil, query_773238, nil, nil, nil)

var getCreateConfigurationSet* = Call_GetCreateConfigurationSet_773223(
    name: "getCreateConfigurationSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=CreateConfigurationSet",
    validator: validate_GetCreateConfigurationSet_773224, base: "/",
    url: url_GetCreateConfigurationSet_773225,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateConfigurationSetEventDestination_773278 = ref object of OpenApiRestCall_772597
proc url_PostCreateConfigurationSetEventDestination_773280(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateConfigurationSetEventDestination_773279(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a configuration set event destination.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>An event destination is the AWS service to which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773281 = query.getOrDefault("Action")
  valid_773281 = validateParameter(valid_773281, JString, required = true, default = newJString(
      "CreateConfigurationSetEventDestination"))
  if valid_773281 != nil:
    section.add "Action", valid_773281
  var valid_773282 = query.getOrDefault("Version")
  valid_773282 = validateParameter(valid_773282, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773282 != nil:
    section.add "Version", valid_773282
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773283 = header.getOrDefault("X-Amz-Date")
  valid_773283 = validateParameter(valid_773283, JString, required = false,
                                 default = nil)
  if valid_773283 != nil:
    section.add "X-Amz-Date", valid_773283
  var valid_773284 = header.getOrDefault("X-Amz-Security-Token")
  valid_773284 = validateParameter(valid_773284, JString, required = false,
                                 default = nil)
  if valid_773284 != nil:
    section.add "X-Amz-Security-Token", valid_773284
  var valid_773285 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773285 = validateParameter(valid_773285, JString, required = false,
                                 default = nil)
  if valid_773285 != nil:
    section.add "X-Amz-Content-Sha256", valid_773285
  var valid_773286 = header.getOrDefault("X-Amz-Algorithm")
  valid_773286 = validateParameter(valid_773286, JString, required = false,
                                 default = nil)
  if valid_773286 != nil:
    section.add "X-Amz-Algorithm", valid_773286
  var valid_773287 = header.getOrDefault("X-Amz-Signature")
  valid_773287 = validateParameter(valid_773287, JString, required = false,
                                 default = nil)
  if valid_773287 != nil:
    section.add "X-Amz-Signature", valid_773287
  var valid_773288 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773288 = validateParameter(valid_773288, JString, required = false,
                                 default = nil)
  if valid_773288 != nil:
    section.add "X-Amz-SignedHeaders", valid_773288
  var valid_773289 = header.getOrDefault("X-Amz-Credential")
  valid_773289 = validateParameter(valid_773289, JString, required = false,
                                 default = nil)
  if valid_773289 != nil:
    section.add "X-Amz-Credential", valid_773289
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that the event destination should be associated with.
  ##   EventDestination.Name: JString
  ##                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestination.CloudWatchDestination: JString
  ##                                         : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   EventDestination.MatchingEventTypes: JArray
  ##                                      : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   EventDestination.KinesisFirehoseDestination: JString
  ##                                              : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   EventDestination.Enabled: JString
  ##                           : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestination.SNSDestination: JString
  ##                                  : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_773290 = formData.getOrDefault("ConfigurationSetName")
  valid_773290 = validateParameter(valid_773290, JString, required = true,
                                 default = nil)
  if valid_773290 != nil:
    section.add "ConfigurationSetName", valid_773290
  var valid_773291 = formData.getOrDefault("EventDestination.Name")
  valid_773291 = validateParameter(valid_773291, JString, required = false,
                                 default = nil)
  if valid_773291 != nil:
    section.add "EventDestination.Name", valid_773291
  var valid_773292 = formData.getOrDefault("EventDestination.CloudWatchDestination")
  valid_773292 = validateParameter(valid_773292, JString, required = false,
                                 default = nil)
  if valid_773292 != nil:
    section.add "EventDestination.CloudWatchDestination", valid_773292
  var valid_773293 = formData.getOrDefault("EventDestination.MatchingEventTypes")
  valid_773293 = validateParameter(valid_773293, JArray, required = false,
                                 default = nil)
  if valid_773293 != nil:
    section.add "EventDestination.MatchingEventTypes", valid_773293
  var valid_773294 = formData.getOrDefault("EventDestination.KinesisFirehoseDestination")
  valid_773294 = validateParameter(valid_773294, JString, required = false,
                                 default = nil)
  if valid_773294 != nil:
    section.add "EventDestination.KinesisFirehoseDestination", valid_773294
  var valid_773295 = formData.getOrDefault("EventDestination.Enabled")
  valid_773295 = validateParameter(valid_773295, JString, required = false,
                                 default = nil)
  if valid_773295 != nil:
    section.add "EventDestination.Enabled", valid_773295
  var valid_773296 = formData.getOrDefault("EventDestination.SNSDestination")
  valid_773296 = validateParameter(valid_773296, JString, required = false,
                                 default = nil)
  if valid_773296 != nil:
    section.add "EventDestination.SNSDestination", valid_773296
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773297: Call_PostCreateConfigurationSetEventDestination_773278;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a configuration set event destination.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>An event destination is the AWS service to which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_773297.validator(path, query, header, formData, body)
  let scheme = call_773297.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773297.url(scheme.get, call_773297.host, call_773297.base,
                         call_773297.route, valid.getOrDefault("path"))
  result = hook(call_773297, url, valid)

proc call*(call_773298: Call_PostCreateConfigurationSetEventDestination_773278;
          ConfigurationSetName: string; EventDestinationName: string = "";
          EventDestinationCloudWatchDestination: string = "";
          Action: string = "CreateConfigurationSetEventDestination";
          EventDestinationMatchingEventTypes: JsonNode = nil;
          EventDestinationKinesisFirehoseDestination: string = "";
          EventDestinationEnabled: string = "";
          EventDestinationSNSDestination: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## postCreateConfigurationSetEventDestination
  ## <p>Creates a configuration set event destination.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>An event destination is the AWS service to which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that the event destination should be associated with.
  ##   EventDestinationName: string
  ##                       : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestinationCloudWatchDestination: string
  ##                                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   Action: string (required)
  ##   EventDestinationMatchingEventTypes: JArray
  ##                                     : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   EventDestinationKinesisFirehoseDestination: string
  ##                                             : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   EventDestinationEnabled: string
  ##                          : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestinationSNSDestination: string
  ##                                 : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  ##   Version: string (required)
  var query_773299 = newJObject()
  var formData_773300 = newJObject()
  add(formData_773300, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_773300, "EventDestination.Name", newJString(EventDestinationName))
  add(formData_773300, "EventDestination.CloudWatchDestination",
      newJString(EventDestinationCloudWatchDestination))
  add(query_773299, "Action", newJString(Action))
  if EventDestinationMatchingEventTypes != nil:
    formData_773300.add "EventDestination.MatchingEventTypes",
                       EventDestinationMatchingEventTypes
  add(formData_773300, "EventDestination.KinesisFirehoseDestination",
      newJString(EventDestinationKinesisFirehoseDestination))
  add(formData_773300, "EventDestination.Enabled",
      newJString(EventDestinationEnabled))
  add(formData_773300, "EventDestination.SNSDestination",
      newJString(EventDestinationSNSDestination))
  add(query_773299, "Version", newJString(Version))
  result = call_773298.call(nil, query_773299, nil, formData_773300, nil)

var postCreateConfigurationSetEventDestination* = Call_PostCreateConfigurationSetEventDestination_773278(
    name: "postCreateConfigurationSetEventDestination", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=CreateConfigurationSetEventDestination",
    validator: validate_PostCreateConfigurationSetEventDestination_773279,
    base: "/", url: url_PostCreateConfigurationSetEventDestination_773280,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateConfigurationSetEventDestination_773256 = ref object of OpenApiRestCall_772597
proc url_GetCreateConfigurationSetEventDestination_773258(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateConfigurationSetEventDestination_773257(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a configuration set event destination.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>An event destination is the AWS service to which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EventDestination.Enabled: JString
  ##                           : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestination.KinesisFirehoseDestination: JString
  ##                                              : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   Action: JString (required)
  ##   EventDestination.Name: JString
  ##                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestination.CloudWatchDestination: JString
  ##                                         : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   EventDestination.SNSDestination: JString
  ##                                  : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  ##   EventDestination.MatchingEventTypes: JArray
  ##                                      : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that the event destination should be associated with.
  ##   Version: JString (required)
  section = newJObject()
  var valid_773259 = query.getOrDefault("EventDestination.Enabled")
  valid_773259 = validateParameter(valid_773259, JString, required = false,
                                 default = nil)
  if valid_773259 != nil:
    section.add "EventDestination.Enabled", valid_773259
  var valid_773260 = query.getOrDefault("EventDestination.KinesisFirehoseDestination")
  valid_773260 = validateParameter(valid_773260, JString, required = false,
                                 default = nil)
  if valid_773260 != nil:
    section.add "EventDestination.KinesisFirehoseDestination", valid_773260
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773261 = query.getOrDefault("Action")
  valid_773261 = validateParameter(valid_773261, JString, required = true, default = newJString(
      "CreateConfigurationSetEventDestination"))
  if valid_773261 != nil:
    section.add "Action", valid_773261
  var valid_773262 = query.getOrDefault("EventDestination.Name")
  valid_773262 = validateParameter(valid_773262, JString, required = false,
                                 default = nil)
  if valid_773262 != nil:
    section.add "EventDestination.Name", valid_773262
  var valid_773263 = query.getOrDefault("EventDestination.CloudWatchDestination")
  valid_773263 = validateParameter(valid_773263, JString, required = false,
                                 default = nil)
  if valid_773263 != nil:
    section.add "EventDestination.CloudWatchDestination", valid_773263
  var valid_773264 = query.getOrDefault("EventDestination.SNSDestination")
  valid_773264 = validateParameter(valid_773264, JString, required = false,
                                 default = nil)
  if valid_773264 != nil:
    section.add "EventDestination.SNSDestination", valid_773264
  var valid_773265 = query.getOrDefault("EventDestination.MatchingEventTypes")
  valid_773265 = validateParameter(valid_773265, JArray, required = false,
                                 default = nil)
  if valid_773265 != nil:
    section.add "EventDestination.MatchingEventTypes", valid_773265
  var valid_773266 = query.getOrDefault("ConfigurationSetName")
  valid_773266 = validateParameter(valid_773266, JString, required = true,
                                 default = nil)
  if valid_773266 != nil:
    section.add "ConfigurationSetName", valid_773266
  var valid_773267 = query.getOrDefault("Version")
  valid_773267 = validateParameter(valid_773267, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773267 != nil:
    section.add "Version", valid_773267
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773268 = header.getOrDefault("X-Amz-Date")
  valid_773268 = validateParameter(valid_773268, JString, required = false,
                                 default = nil)
  if valid_773268 != nil:
    section.add "X-Amz-Date", valid_773268
  var valid_773269 = header.getOrDefault("X-Amz-Security-Token")
  valid_773269 = validateParameter(valid_773269, JString, required = false,
                                 default = nil)
  if valid_773269 != nil:
    section.add "X-Amz-Security-Token", valid_773269
  var valid_773270 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773270 = validateParameter(valid_773270, JString, required = false,
                                 default = nil)
  if valid_773270 != nil:
    section.add "X-Amz-Content-Sha256", valid_773270
  var valid_773271 = header.getOrDefault("X-Amz-Algorithm")
  valid_773271 = validateParameter(valid_773271, JString, required = false,
                                 default = nil)
  if valid_773271 != nil:
    section.add "X-Amz-Algorithm", valid_773271
  var valid_773272 = header.getOrDefault("X-Amz-Signature")
  valid_773272 = validateParameter(valid_773272, JString, required = false,
                                 default = nil)
  if valid_773272 != nil:
    section.add "X-Amz-Signature", valid_773272
  var valid_773273 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773273 = validateParameter(valid_773273, JString, required = false,
                                 default = nil)
  if valid_773273 != nil:
    section.add "X-Amz-SignedHeaders", valid_773273
  var valid_773274 = header.getOrDefault("X-Amz-Credential")
  valid_773274 = validateParameter(valid_773274, JString, required = false,
                                 default = nil)
  if valid_773274 != nil:
    section.add "X-Amz-Credential", valid_773274
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773275: Call_GetCreateConfigurationSetEventDestination_773256;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a configuration set event destination.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>An event destination is the AWS service to which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_773275.validator(path, query, header, formData, body)
  let scheme = call_773275.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773275.url(scheme.get, call_773275.host, call_773275.base,
                         call_773275.route, valid.getOrDefault("path"))
  result = hook(call_773275, url, valid)

proc call*(call_773276: Call_GetCreateConfigurationSetEventDestination_773256;
          ConfigurationSetName: string; EventDestinationEnabled: string = "";
          EventDestinationKinesisFirehoseDestination: string = "";
          Action: string = "CreateConfigurationSetEventDestination";
          EventDestinationName: string = "";
          EventDestinationCloudWatchDestination: string = "";
          EventDestinationSNSDestination: string = "";
          EventDestinationMatchingEventTypes: JsonNode = nil;
          Version: string = "2010-12-01"): Recallable =
  ## getCreateConfigurationSetEventDestination
  ## <p>Creates a configuration set event destination.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>An event destination is the AWS service to which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   EventDestinationEnabled: string
  ##                          : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestinationKinesisFirehoseDestination: string
  ##                                             : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   Action: string (required)
  ##   EventDestinationName: string
  ##                       : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestinationCloudWatchDestination: string
  ##                                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   EventDestinationSNSDestination: string
  ##                                 : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  ##   EventDestinationMatchingEventTypes: JArray
  ##                                     : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that the event destination should be associated with.
  ##   Version: string (required)
  var query_773277 = newJObject()
  add(query_773277, "EventDestination.Enabled",
      newJString(EventDestinationEnabled))
  add(query_773277, "EventDestination.KinesisFirehoseDestination",
      newJString(EventDestinationKinesisFirehoseDestination))
  add(query_773277, "Action", newJString(Action))
  add(query_773277, "EventDestination.Name", newJString(EventDestinationName))
  add(query_773277, "EventDestination.CloudWatchDestination",
      newJString(EventDestinationCloudWatchDestination))
  add(query_773277, "EventDestination.SNSDestination",
      newJString(EventDestinationSNSDestination))
  if EventDestinationMatchingEventTypes != nil:
    query_773277.add "EventDestination.MatchingEventTypes",
                    EventDestinationMatchingEventTypes
  add(query_773277, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_773277, "Version", newJString(Version))
  result = call_773276.call(nil, query_773277, nil, nil, nil)

var getCreateConfigurationSetEventDestination* = Call_GetCreateConfigurationSetEventDestination_773256(
    name: "getCreateConfigurationSetEventDestination", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=CreateConfigurationSetEventDestination",
    validator: validate_GetCreateConfigurationSetEventDestination_773257,
    base: "/", url: url_GetCreateConfigurationSetEventDestination_773258,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateConfigurationSetTrackingOptions_773318 = ref object of OpenApiRestCall_772597
proc url_PostCreateConfigurationSetTrackingOptions_773320(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateConfigurationSetTrackingOptions_773319(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773321 = query.getOrDefault("Action")
  valid_773321 = validateParameter(valid_773321, JString, required = true, default = newJString(
      "CreateConfigurationSetTrackingOptions"))
  if valid_773321 != nil:
    section.add "Action", valid_773321
  var valid_773322 = query.getOrDefault("Version")
  valid_773322 = validateParameter(valid_773322, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773322 != nil:
    section.add "Version", valid_773322
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773323 = header.getOrDefault("X-Amz-Date")
  valid_773323 = validateParameter(valid_773323, JString, required = false,
                                 default = nil)
  if valid_773323 != nil:
    section.add "X-Amz-Date", valid_773323
  var valid_773324 = header.getOrDefault("X-Amz-Security-Token")
  valid_773324 = validateParameter(valid_773324, JString, required = false,
                                 default = nil)
  if valid_773324 != nil:
    section.add "X-Amz-Security-Token", valid_773324
  var valid_773325 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773325 = validateParameter(valid_773325, JString, required = false,
                                 default = nil)
  if valid_773325 != nil:
    section.add "X-Amz-Content-Sha256", valid_773325
  var valid_773326 = header.getOrDefault("X-Amz-Algorithm")
  valid_773326 = validateParameter(valid_773326, JString, required = false,
                                 default = nil)
  if valid_773326 != nil:
    section.add "X-Amz-Algorithm", valid_773326
  var valid_773327 = header.getOrDefault("X-Amz-Signature")
  valid_773327 = validateParameter(valid_773327, JString, required = false,
                                 default = nil)
  if valid_773327 != nil:
    section.add "X-Amz-Signature", valid_773327
  var valid_773328 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773328 = validateParameter(valid_773328, JString, required = false,
                                 default = nil)
  if valid_773328 != nil:
    section.add "X-Amz-SignedHeaders", valid_773328
  var valid_773329 = header.getOrDefault("X-Amz-Credential")
  valid_773329 = validateParameter(valid_773329, JString, required = false,
                                 default = nil)
  if valid_773329 != nil:
    section.add "X-Amz-Credential", valid_773329
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that the tracking options should be associated with.
  ##   TrackingOptions.CustomRedirectDomain: JString
  ##                                       : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_773330 = formData.getOrDefault("ConfigurationSetName")
  valid_773330 = validateParameter(valid_773330, JString, required = true,
                                 default = nil)
  if valid_773330 != nil:
    section.add "ConfigurationSetName", valid_773330
  var valid_773331 = formData.getOrDefault("TrackingOptions.CustomRedirectDomain")
  valid_773331 = validateParameter(valid_773331, JString, required = false,
                                 default = nil)
  if valid_773331 != nil:
    section.add "TrackingOptions.CustomRedirectDomain", valid_773331
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773332: Call_PostCreateConfigurationSetTrackingOptions_773318;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_773332.validator(path, query, header, formData, body)
  let scheme = call_773332.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773332.url(scheme.get, call_773332.host, call_773332.base,
                         call_773332.route, valid.getOrDefault("path"))
  result = hook(call_773332, url, valid)

proc call*(call_773333: Call_PostCreateConfigurationSetTrackingOptions_773318;
          ConfigurationSetName: string;
          Action: string = "CreateConfigurationSetTrackingOptions";
          TrackingOptionsCustomRedirectDomain: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## postCreateConfigurationSetTrackingOptions
  ## <p>Creates an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that the tracking options should be associated with.
  ##   Action: string (required)
  ##   TrackingOptionsCustomRedirectDomain: string
  ##                                      : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  ##   Version: string (required)
  var query_773334 = newJObject()
  var formData_773335 = newJObject()
  add(formData_773335, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_773334, "Action", newJString(Action))
  add(formData_773335, "TrackingOptions.CustomRedirectDomain",
      newJString(TrackingOptionsCustomRedirectDomain))
  add(query_773334, "Version", newJString(Version))
  result = call_773333.call(nil, query_773334, nil, formData_773335, nil)

var postCreateConfigurationSetTrackingOptions* = Call_PostCreateConfigurationSetTrackingOptions_773318(
    name: "postCreateConfigurationSetTrackingOptions", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=CreateConfigurationSetTrackingOptions",
    validator: validate_PostCreateConfigurationSetTrackingOptions_773319,
    base: "/", url: url_PostCreateConfigurationSetTrackingOptions_773320,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateConfigurationSetTrackingOptions_773301 = ref object of OpenApiRestCall_772597
proc url_GetCreateConfigurationSetTrackingOptions_773303(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateConfigurationSetTrackingOptions_773302(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TrackingOptions.CustomRedirectDomain: JString
  ##                                       : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  ##   Action: JString (required)
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that the tracking options should be associated with.
  ##   Version: JString (required)
  section = newJObject()
  var valid_773304 = query.getOrDefault("TrackingOptions.CustomRedirectDomain")
  valid_773304 = validateParameter(valid_773304, JString, required = false,
                                 default = nil)
  if valid_773304 != nil:
    section.add "TrackingOptions.CustomRedirectDomain", valid_773304
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773305 = query.getOrDefault("Action")
  valid_773305 = validateParameter(valid_773305, JString, required = true, default = newJString(
      "CreateConfigurationSetTrackingOptions"))
  if valid_773305 != nil:
    section.add "Action", valid_773305
  var valid_773306 = query.getOrDefault("ConfigurationSetName")
  valid_773306 = validateParameter(valid_773306, JString, required = true,
                                 default = nil)
  if valid_773306 != nil:
    section.add "ConfigurationSetName", valid_773306
  var valid_773307 = query.getOrDefault("Version")
  valid_773307 = validateParameter(valid_773307, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773307 != nil:
    section.add "Version", valid_773307
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773308 = header.getOrDefault("X-Amz-Date")
  valid_773308 = validateParameter(valid_773308, JString, required = false,
                                 default = nil)
  if valid_773308 != nil:
    section.add "X-Amz-Date", valid_773308
  var valid_773309 = header.getOrDefault("X-Amz-Security-Token")
  valid_773309 = validateParameter(valid_773309, JString, required = false,
                                 default = nil)
  if valid_773309 != nil:
    section.add "X-Amz-Security-Token", valid_773309
  var valid_773310 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773310 = validateParameter(valid_773310, JString, required = false,
                                 default = nil)
  if valid_773310 != nil:
    section.add "X-Amz-Content-Sha256", valid_773310
  var valid_773311 = header.getOrDefault("X-Amz-Algorithm")
  valid_773311 = validateParameter(valid_773311, JString, required = false,
                                 default = nil)
  if valid_773311 != nil:
    section.add "X-Amz-Algorithm", valid_773311
  var valid_773312 = header.getOrDefault("X-Amz-Signature")
  valid_773312 = validateParameter(valid_773312, JString, required = false,
                                 default = nil)
  if valid_773312 != nil:
    section.add "X-Amz-Signature", valid_773312
  var valid_773313 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773313 = validateParameter(valid_773313, JString, required = false,
                                 default = nil)
  if valid_773313 != nil:
    section.add "X-Amz-SignedHeaders", valid_773313
  var valid_773314 = header.getOrDefault("X-Amz-Credential")
  valid_773314 = validateParameter(valid_773314, JString, required = false,
                                 default = nil)
  if valid_773314 != nil:
    section.add "X-Amz-Credential", valid_773314
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773315: Call_GetCreateConfigurationSetTrackingOptions_773301;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_773315.validator(path, query, header, formData, body)
  let scheme = call_773315.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773315.url(scheme.get, call_773315.host, call_773315.base,
                         call_773315.route, valid.getOrDefault("path"))
  result = hook(call_773315, url, valid)

proc call*(call_773316: Call_GetCreateConfigurationSetTrackingOptions_773301;
          ConfigurationSetName: string;
          TrackingOptionsCustomRedirectDomain: string = "";
          Action: string = "CreateConfigurationSetTrackingOptions";
          Version: string = "2010-12-01"): Recallable =
  ## getCreateConfigurationSetTrackingOptions
  ## <p>Creates an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ##   TrackingOptionsCustomRedirectDomain: string
  ##                                      : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that the tracking options should be associated with.
  ##   Version: string (required)
  var query_773317 = newJObject()
  add(query_773317, "TrackingOptions.CustomRedirectDomain",
      newJString(TrackingOptionsCustomRedirectDomain))
  add(query_773317, "Action", newJString(Action))
  add(query_773317, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_773317, "Version", newJString(Version))
  result = call_773316.call(nil, query_773317, nil, nil, nil)

var getCreateConfigurationSetTrackingOptions* = Call_GetCreateConfigurationSetTrackingOptions_773301(
    name: "getCreateConfigurationSetTrackingOptions", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=CreateConfigurationSetTrackingOptions",
    validator: validate_GetCreateConfigurationSetTrackingOptions_773302,
    base: "/", url: url_GetCreateConfigurationSetTrackingOptions_773303,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCustomVerificationEmailTemplate_773357 = ref object of OpenApiRestCall_772597
proc url_PostCreateCustomVerificationEmailTemplate_773359(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateCustomVerificationEmailTemplate_773358(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773360 = query.getOrDefault("Action")
  valid_773360 = validateParameter(valid_773360, JString, required = true, default = newJString(
      "CreateCustomVerificationEmailTemplate"))
  if valid_773360 != nil:
    section.add "Action", valid_773360
  var valid_773361 = query.getOrDefault("Version")
  valid_773361 = validateParameter(valid_773361, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773361 != nil:
    section.add "Version", valid_773361
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773362 = header.getOrDefault("X-Amz-Date")
  valid_773362 = validateParameter(valid_773362, JString, required = false,
                                 default = nil)
  if valid_773362 != nil:
    section.add "X-Amz-Date", valid_773362
  var valid_773363 = header.getOrDefault("X-Amz-Security-Token")
  valid_773363 = validateParameter(valid_773363, JString, required = false,
                                 default = nil)
  if valid_773363 != nil:
    section.add "X-Amz-Security-Token", valid_773363
  var valid_773364 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773364 = validateParameter(valid_773364, JString, required = false,
                                 default = nil)
  if valid_773364 != nil:
    section.add "X-Amz-Content-Sha256", valid_773364
  var valid_773365 = header.getOrDefault("X-Amz-Algorithm")
  valid_773365 = validateParameter(valid_773365, JString, required = false,
                                 default = nil)
  if valid_773365 != nil:
    section.add "X-Amz-Algorithm", valid_773365
  var valid_773366 = header.getOrDefault("X-Amz-Signature")
  valid_773366 = validateParameter(valid_773366, JString, required = false,
                                 default = nil)
  if valid_773366 != nil:
    section.add "X-Amz-Signature", valid_773366
  var valid_773367 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773367 = validateParameter(valid_773367, JString, required = false,
                                 default = nil)
  if valid_773367 != nil:
    section.add "X-Amz-SignedHeaders", valid_773367
  var valid_773368 = header.getOrDefault("X-Amz-Credential")
  valid_773368 = validateParameter(valid_773368, JString, required = false,
                                 default = nil)
  if valid_773368 != nil:
    section.add "X-Amz-Credential", valid_773368
  result.add "header", section
  ## parameters in `formData` object:
  ##   SuccessRedirectionURL: JString (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   FailureRedirectionURL: JString (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   FromEmailAddress: JString (required)
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateContent: JString (required)
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template.
  ##   TemplateSubject: JString (required)
  ##                  : The subject line of the custom verification email.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SuccessRedirectionURL` field"
  var valid_773369 = formData.getOrDefault("SuccessRedirectionURL")
  valid_773369 = validateParameter(valid_773369, JString, required = true,
                                 default = nil)
  if valid_773369 != nil:
    section.add "SuccessRedirectionURL", valid_773369
  var valid_773370 = formData.getOrDefault("FailureRedirectionURL")
  valid_773370 = validateParameter(valid_773370, JString, required = true,
                                 default = nil)
  if valid_773370 != nil:
    section.add "FailureRedirectionURL", valid_773370
  var valid_773371 = formData.getOrDefault("FromEmailAddress")
  valid_773371 = validateParameter(valid_773371, JString, required = true,
                                 default = nil)
  if valid_773371 != nil:
    section.add "FromEmailAddress", valid_773371
  var valid_773372 = formData.getOrDefault("TemplateContent")
  valid_773372 = validateParameter(valid_773372, JString, required = true,
                                 default = nil)
  if valid_773372 != nil:
    section.add "TemplateContent", valid_773372
  var valid_773373 = formData.getOrDefault("TemplateName")
  valid_773373 = validateParameter(valid_773373, JString, required = true,
                                 default = nil)
  if valid_773373 != nil:
    section.add "TemplateName", valid_773373
  var valid_773374 = formData.getOrDefault("TemplateSubject")
  valid_773374 = validateParameter(valid_773374, JString, required = true,
                                 default = nil)
  if valid_773374 != nil:
    section.add "TemplateSubject", valid_773374
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773375: Call_PostCreateCustomVerificationEmailTemplate_773357;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_773375.validator(path, query, header, formData, body)
  let scheme = call_773375.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773375.url(scheme.get, call_773375.host, call_773375.base,
                         call_773375.route, valid.getOrDefault("path"))
  result = hook(call_773375, url, valid)

proc call*(call_773376: Call_PostCreateCustomVerificationEmailTemplate_773357;
          SuccessRedirectionURL: string; FailureRedirectionURL: string;
          FromEmailAddress: string; TemplateContent: string; TemplateName: string;
          TemplateSubject: string;
          Action: string = "CreateCustomVerificationEmailTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## postCreateCustomVerificationEmailTemplate
  ## <p>Creates a new custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   SuccessRedirectionURL: string (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   FailureRedirectionURL: string (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   FromEmailAddress: string (required)
  ##                   : The email address that the custom verification email is sent from.
  ##   Action: string (required)
  ##   TemplateContent: string (required)
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template.
  ##   TemplateSubject: string (required)
  ##                  : The subject line of the custom verification email.
  ##   Version: string (required)
  var query_773377 = newJObject()
  var formData_773378 = newJObject()
  add(formData_773378, "SuccessRedirectionURL", newJString(SuccessRedirectionURL))
  add(formData_773378, "FailureRedirectionURL", newJString(FailureRedirectionURL))
  add(formData_773378, "FromEmailAddress", newJString(FromEmailAddress))
  add(query_773377, "Action", newJString(Action))
  add(formData_773378, "TemplateContent", newJString(TemplateContent))
  add(formData_773378, "TemplateName", newJString(TemplateName))
  add(formData_773378, "TemplateSubject", newJString(TemplateSubject))
  add(query_773377, "Version", newJString(Version))
  result = call_773376.call(nil, query_773377, nil, formData_773378, nil)

var postCreateCustomVerificationEmailTemplate* = Call_PostCreateCustomVerificationEmailTemplate_773357(
    name: "postCreateCustomVerificationEmailTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=CreateCustomVerificationEmailTemplate",
    validator: validate_PostCreateCustomVerificationEmailTemplate_773358,
    base: "/", url: url_PostCreateCustomVerificationEmailTemplate_773359,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCustomVerificationEmailTemplate_773336 = ref object of OpenApiRestCall_772597
proc url_GetCreateCustomVerificationEmailTemplate_773338(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateCustomVerificationEmailTemplate_773337(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TemplateSubject: JString (required)
  ##                  : The subject line of the custom verification email.
  ##   FromEmailAddress: JString (required)
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateContent: JString (required)
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   Action: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template.
  ##   SuccessRedirectionURL: JString (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   FailureRedirectionURL: JString (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `TemplateSubject` field"
  var valid_773339 = query.getOrDefault("TemplateSubject")
  valid_773339 = validateParameter(valid_773339, JString, required = true,
                                 default = nil)
  if valid_773339 != nil:
    section.add "TemplateSubject", valid_773339
  var valid_773340 = query.getOrDefault("FromEmailAddress")
  valid_773340 = validateParameter(valid_773340, JString, required = true,
                                 default = nil)
  if valid_773340 != nil:
    section.add "FromEmailAddress", valid_773340
  var valid_773341 = query.getOrDefault("TemplateContent")
  valid_773341 = validateParameter(valid_773341, JString, required = true,
                                 default = nil)
  if valid_773341 != nil:
    section.add "TemplateContent", valid_773341
  var valid_773342 = query.getOrDefault("Action")
  valid_773342 = validateParameter(valid_773342, JString, required = true, default = newJString(
      "CreateCustomVerificationEmailTemplate"))
  if valid_773342 != nil:
    section.add "Action", valid_773342
  var valid_773343 = query.getOrDefault("TemplateName")
  valid_773343 = validateParameter(valid_773343, JString, required = true,
                                 default = nil)
  if valid_773343 != nil:
    section.add "TemplateName", valid_773343
  var valid_773344 = query.getOrDefault("SuccessRedirectionURL")
  valid_773344 = validateParameter(valid_773344, JString, required = true,
                                 default = nil)
  if valid_773344 != nil:
    section.add "SuccessRedirectionURL", valid_773344
  var valid_773345 = query.getOrDefault("FailureRedirectionURL")
  valid_773345 = validateParameter(valid_773345, JString, required = true,
                                 default = nil)
  if valid_773345 != nil:
    section.add "FailureRedirectionURL", valid_773345
  var valid_773346 = query.getOrDefault("Version")
  valid_773346 = validateParameter(valid_773346, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773346 != nil:
    section.add "Version", valid_773346
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773347 = header.getOrDefault("X-Amz-Date")
  valid_773347 = validateParameter(valid_773347, JString, required = false,
                                 default = nil)
  if valid_773347 != nil:
    section.add "X-Amz-Date", valid_773347
  var valid_773348 = header.getOrDefault("X-Amz-Security-Token")
  valid_773348 = validateParameter(valid_773348, JString, required = false,
                                 default = nil)
  if valid_773348 != nil:
    section.add "X-Amz-Security-Token", valid_773348
  var valid_773349 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773349 = validateParameter(valid_773349, JString, required = false,
                                 default = nil)
  if valid_773349 != nil:
    section.add "X-Amz-Content-Sha256", valid_773349
  var valid_773350 = header.getOrDefault("X-Amz-Algorithm")
  valid_773350 = validateParameter(valid_773350, JString, required = false,
                                 default = nil)
  if valid_773350 != nil:
    section.add "X-Amz-Algorithm", valid_773350
  var valid_773351 = header.getOrDefault("X-Amz-Signature")
  valid_773351 = validateParameter(valid_773351, JString, required = false,
                                 default = nil)
  if valid_773351 != nil:
    section.add "X-Amz-Signature", valid_773351
  var valid_773352 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773352 = validateParameter(valid_773352, JString, required = false,
                                 default = nil)
  if valid_773352 != nil:
    section.add "X-Amz-SignedHeaders", valid_773352
  var valid_773353 = header.getOrDefault("X-Amz-Credential")
  valid_773353 = validateParameter(valid_773353, JString, required = false,
                                 default = nil)
  if valid_773353 != nil:
    section.add "X-Amz-Credential", valid_773353
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773354: Call_GetCreateCustomVerificationEmailTemplate_773336;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_773354.validator(path, query, header, formData, body)
  let scheme = call_773354.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773354.url(scheme.get, call_773354.host, call_773354.base,
                         call_773354.route, valid.getOrDefault("path"))
  result = hook(call_773354, url, valid)

proc call*(call_773355: Call_GetCreateCustomVerificationEmailTemplate_773336;
          TemplateSubject: string; FromEmailAddress: string;
          TemplateContent: string; TemplateName: string;
          SuccessRedirectionURL: string; FailureRedirectionURL: string;
          Action: string = "CreateCustomVerificationEmailTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## getCreateCustomVerificationEmailTemplate
  ## <p>Creates a new custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateSubject: string (required)
  ##                  : The subject line of the custom verification email.
  ##   FromEmailAddress: string (required)
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateContent: string (required)
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template.
  ##   SuccessRedirectionURL: string (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   FailureRedirectionURL: string (required)
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   Version: string (required)
  var query_773356 = newJObject()
  add(query_773356, "TemplateSubject", newJString(TemplateSubject))
  add(query_773356, "FromEmailAddress", newJString(FromEmailAddress))
  add(query_773356, "TemplateContent", newJString(TemplateContent))
  add(query_773356, "Action", newJString(Action))
  add(query_773356, "TemplateName", newJString(TemplateName))
  add(query_773356, "SuccessRedirectionURL", newJString(SuccessRedirectionURL))
  add(query_773356, "FailureRedirectionURL", newJString(FailureRedirectionURL))
  add(query_773356, "Version", newJString(Version))
  result = call_773355.call(nil, query_773356, nil, nil, nil)

var getCreateCustomVerificationEmailTemplate* = Call_GetCreateCustomVerificationEmailTemplate_773336(
    name: "getCreateCustomVerificationEmailTemplate", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=CreateCustomVerificationEmailTemplate",
    validator: validate_GetCreateCustomVerificationEmailTemplate_773337,
    base: "/", url: url_GetCreateCustomVerificationEmailTemplate_773338,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateReceiptFilter_773396 = ref object of OpenApiRestCall_772597
proc url_PostCreateReceiptFilter_773398(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateReceiptFilter_773397(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new IP address filter.</p> <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773399 = query.getOrDefault("Action")
  valid_773399 = validateParameter(valid_773399, JString, required = true,
                                 default = newJString("CreateReceiptFilter"))
  if valid_773399 != nil:
    section.add "Action", valid_773399
  var valid_773400 = query.getOrDefault("Version")
  valid_773400 = validateParameter(valid_773400, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773400 != nil:
    section.add "Version", valid_773400
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773401 = header.getOrDefault("X-Amz-Date")
  valid_773401 = validateParameter(valid_773401, JString, required = false,
                                 default = nil)
  if valid_773401 != nil:
    section.add "X-Amz-Date", valid_773401
  var valid_773402 = header.getOrDefault("X-Amz-Security-Token")
  valid_773402 = validateParameter(valid_773402, JString, required = false,
                                 default = nil)
  if valid_773402 != nil:
    section.add "X-Amz-Security-Token", valid_773402
  var valid_773403 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773403 = validateParameter(valid_773403, JString, required = false,
                                 default = nil)
  if valid_773403 != nil:
    section.add "X-Amz-Content-Sha256", valid_773403
  var valid_773404 = header.getOrDefault("X-Amz-Algorithm")
  valid_773404 = validateParameter(valid_773404, JString, required = false,
                                 default = nil)
  if valid_773404 != nil:
    section.add "X-Amz-Algorithm", valid_773404
  var valid_773405 = header.getOrDefault("X-Amz-Signature")
  valid_773405 = validateParameter(valid_773405, JString, required = false,
                                 default = nil)
  if valid_773405 != nil:
    section.add "X-Amz-Signature", valid_773405
  var valid_773406 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773406 = validateParameter(valid_773406, JString, required = false,
                                 default = nil)
  if valid_773406 != nil:
    section.add "X-Amz-SignedHeaders", valid_773406
  var valid_773407 = header.getOrDefault("X-Amz-Credential")
  valid_773407 = validateParameter(valid_773407, JString, required = false,
                                 default = nil)
  if valid_773407 != nil:
    section.add "X-Amz-Credential", valid_773407
  result.add "header", section
  ## parameters in `formData` object:
  ##   Filter.IpFilter: JString
  ##                  : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## A structure that provides the IP addresses to block or allow, and whether to block or allow incoming mail from them.
  ##   Filter.Name: JString
  ##              : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the IP address filter. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  section = newJObject()
  var valid_773408 = formData.getOrDefault("Filter.IpFilter")
  valid_773408 = validateParameter(valid_773408, JString, required = false,
                                 default = nil)
  if valid_773408 != nil:
    section.add "Filter.IpFilter", valid_773408
  var valid_773409 = formData.getOrDefault("Filter.Name")
  valid_773409 = validateParameter(valid_773409, JString, required = false,
                                 default = nil)
  if valid_773409 != nil:
    section.add "Filter.Name", valid_773409
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773410: Call_PostCreateReceiptFilter_773396; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new IP address filter.</p> <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_773410.validator(path, query, header, formData, body)
  let scheme = call_773410.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773410.url(scheme.get, call_773410.host, call_773410.base,
                         call_773410.route, valid.getOrDefault("path"))
  result = hook(call_773410, url, valid)

proc call*(call_773411: Call_PostCreateReceiptFilter_773396;
          Action: string = "CreateReceiptFilter"; FilterIpFilter: string = "";
          FilterName: string = ""; Version: string = "2010-12-01"): Recallable =
  ## postCreateReceiptFilter
  ## <p>Creates a new IP address filter.</p> <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   FilterIpFilter: string
  ##                 : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## A structure that provides the IP addresses to block or allow, and whether to block or allow incoming mail from them.
  ##   FilterName: string
  ##             : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the IP address filter. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Version: string (required)
  var query_773412 = newJObject()
  var formData_773413 = newJObject()
  add(query_773412, "Action", newJString(Action))
  add(formData_773413, "Filter.IpFilter", newJString(FilterIpFilter))
  add(formData_773413, "Filter.Name", newJString(FilterName))
  add(query_773412, "Version", newJString(Version))
  result = call_773411.call(nil, query_773412, nil, formData_773413, nil)

var postCreateReceiptFilter* = Call_PostCreateReceiptFilter_773396(
    name: "postCreateReceiptFilter", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=CreateReceiptFilter",
    validator: validate_PostCreateReceiptFilter_773397, base: "/",
    url: url_PostCreateReceiptFilter_773398, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateReceiptFilter_773379 = ref object of OpenApiRestCall_772597
proc url_GetCreateReceiptFilter_773381(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateReceiptFilter_773380(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new IP address filter.</p> <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Filter.IpFilter: JString
  ##                  : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## A structure that provides the IP addresses to block or allow, and whether to block or allow incoming mail from them.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filter.Name: JString
  ##              : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the IP address filter. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  section = newJObject()
  var valid_773382 = query.getOrDefault("Filter.IpFilter")
  valid_773382 = validateParameter(valid_773382, JString, required = false,
                                 default = nil)
  if valid_773382 != nil:
    section.add "Filter.IpFilter", valid_773382
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773383 = query.getOrDefault("Action")
  valid_773383 = validateParameter(valid_773383, JString, required = true,
                                 default = newJString("CreateReceiptFilter"))
  if valid_773383 != nil:
    section.add "Action", valid_773383
  var valid_773384 = query.getOrDefault("Version")
  valid_773384 = validateParameter(valid_773384, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773384 != nil:
    section.add "Version", valid_773384
  var valid_773385 = query.getOrDefault("Filter.Name")
  valid_773385 = validateParameter(valid_773385, JString, required = false,
                                 default = nil)
  if valid_773385 != nil:
    section.add "Filter.Name", valid_773385
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773386 = header.getOrDefault("X-Amz-Date")
  valid_773386 = validateParameter(valid_773386, JString, required = false,
                                 default = nil)
  if valid_773386 != nil:
    section.add "X-Amz-Date", valid_773386
  var valid_773387 = header.getOrDefault("X-Amz-Security-Token")
  valid_773387 = validateParameter(valid_773387, JString, required = false,
                                 default = nil)
  if valid_773387 != nil:
    section.add "X-Amz-Security-Token", valid_773387
  var valid_773388 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773388 = validateParameter(valid_773388, JString, required = false,
                                 default = nil)
  if valid_773388 != nil:
    section.add "X-Amz-Content-Sha256", valid_773388
  var valid_773389 = header.getOrDefault("X-Amz-Algorithm")
  valid_773389 = validateParameter(valid_773389, JString, required = false,
                                 default = nil)
  if valid_773389 != nil:
    section.add "X-Amz-Algorithm", valid_773389
  var valid_773390 = header.getOrDefault("X-Amz-Signature")
  valid_773390 = validateParameter(valid_773390, JString, required = false,
                                 default = nil)
  if valid_773390 != nil:
    section.add "X-Amz-Signature", valid_773390
  var valid_773391 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773391 = validateParameter(valid_773391, JString, required = false,
                                 default = nil)
  if valid_773391 != nil:
    section.add "X-Amz-SignedHeaders", valid_773391
  var valid_773392 = header.getOrDefault("X-Amz-Credential")
  valid_773392 = validateParameter(valid_773392, JString, required = false,
                                 default = nil)
  if valid_773392 != nil:
    section.add "X-Amz-Credential", valid_773392
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773393: Call_GetCreateReceiptFilter_773379; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new IP address filter.</p> <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_773393.validator(path, query, header, formData, body)
  let scheme = call_773393.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773393.url(scheme.get, call_773393.host, call_773393.base,
                         call_773393.route, valid.getOrDefault("path"))
  result = hook(call_773393, url, valid)

proc call*(call_773394: Call_GetCreateReceiptFilter_773379;
          FilterIpFilter: string = ""; Action: string = "CreateReceiptFilter";
          Version: string = "2010-12-01"; FilterName: string = ""): Recallable =
  ## getCreateReceiptFilter
  ## <p>Creates a new IP address filter.</p> <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   FilterIpFilter: string
  ##                 : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## A structure that provides the IP addresses to block or allow, and whether to block or allow incoming mail from them.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   FilterName: string
  ##             : <p>A receipt IP address filter enables you to specify whether to accept or reject mail originating from an IP address or range of IP addresses.</p> <p>For information about setting up IP address filters, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the IP address filter. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  var query_773395 = newJObject()
  add(query_773395, "Filter.IpFilter", newJString(FilterIpFilter))
  add(query_773395, "Action", newJString(Action))
  add(query_773395, "Version", newJString(Version))
  add(query_773395, "Filter.Name", newJString(FilterName))
  result = call_773394.call(nil, query_773395, nil, nil, nil)

var getCreateReceiptFilter* = Call_GetCreateReceiptFilter_773379(
    name: "getCreateReceiptFilter", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=CreateReceiptFilter",
    validator: validate_GetCreateReceiptFilter_773380, base: "/",
    url: url_GetCreateReceiptFilter_773381, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateReceiptRule_773437 = ref object of OpenApiRestCall_772597
proc url_PostCreateReceiptRule_773439(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateReceiptRule_773438(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773440 = query.getOrDefault("Action")
  valid_773440 = validateParameter(valid_773440, JString, required = true,
                                 default = newJString("CreateReceiptRule"))
  if valid_773440 != nil:
    section.add "Action", valid_773440
  var valid_773441 = query.getOrDefault("Version")
  valid_773441 = validateParameter(valid_773441, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773441 != nil:
    section.add "Version", valid_773441
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773442 = header.getOrDefault("X-Amz-Date")
  valid_773442 = validateParameter(valid_773442, JString, required = false,
                                 default = nil)
  if valid_773442 != nil:
    section.add "X-Amz-Date", valid_773442
  var valid_773443 = header.getOrDefault("X-Amz-Security-Token")
  valid_773443 = validateParameter(valid_773443, JString, required = false,
                                 default = nil)
  if valid_773443 != nil:
    section.add "X-Amz-Security-Token", valid_773443
  var valid_773444 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773444 = validateParameter(valid_773444, JString, required = false,
                                 default = nil)
  if valid_773444 != nil:
    section.add "X-Amz-Content-Sha256", valid_773444
  var valid_773445 = header.getOrDefault("X-Amz-Algorithm")
  valid_773445 = validateParameter(valid_773445, JString, required = false,
                                 default = nil)
  if valid_773445 != nil:
    section.add "X-Amz-Algorithm", valid_773445
  var valid_773446 = header.getOrDefault("X-Amz-Signature")
  valid_773446 = validateParameter(valid_773446, JString, required = false,
                                 default = nil)
  if valid_773446 != nil:
    section.add "X-Amz-Signature", valid_773446
  var valid_773447 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773447 = validateParameter(valid_773447, JString, required = false,
                                 default = nil)
  if valid_773447 != nil:
    section.add "X-Amz-SignedHeaders", valid_773447
  var valid_773448 = header.getOrDefault("X-Amz-Credential")
  valid_773448 = validateParameter(valid_773448, JString, required = false,
                                 default = nil)
  if valid_773448 != nil:
    section.add "X-Amz-Credential", valid_773448
  result.add "header", section
  ## parameters in `formData` object:
  ##   Rule.Recipients: JArray
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   After: JString
  ##        : The name of an existing rule after which the new rule will be placed. If this parameter is null, the new rule will be inserted at the beginning of the rule list.
  ##   Rule.Enabled: JString
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   RuleSetName: JString (required)
  ##              : The name of the rule set that the receipt rule will be added to.
  ##   Rule.Actions: JArray
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   Rule.Name: JString
  ##            : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Rule.ScanEnabled: JString
  ##                   : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   Rule.TlsPolicy: JString
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  section = newJObject()
  var valid_773449 = formData.getOrDefault("Rule.Recipients")
  valid_773449 = validateParameter(valid_773449, JArray, required = false,
                                 default = nil)
  if valid_773449 != nil:
    section.add "Rule.Recipients", valid_773449
  var valid_773450 = formData.getOrDefault("After")
  valid_773450 = validateParameter(valid_773450, JString, required = false,
                                 default = nil)
  if valid_773450 != nil:
    section.add "After", valid_773450
  var valid_773451 = formData.getOrDefault("Rule.Enabled")
  valid_773451 = validateParameter(valid_773451, JString, required = false,
                                 default = nil)
  if valid_773451 != nil:
    section.add "Rule.Enabled", valid_773451
  assert formData != nil,
        "formData argument is necessary due to required `RuleSetName` field"
  var valid_773452 = formData.getOrDefault("RuleSetName")
  valid_773452 = validateParameter(valid_773452, JString, required = true,
                                 default = nil)
  if valid_773452 != nil:
    section.add "RuleSetName", valid_773452
  var valid_773453 = formData.getOrDefault("Rule.Actions")
  valid_773453 = validateParameter(valid_773453, JArray, required = false,
                                 default = nil)
  if valid_773453 != nil:
    section.add "Rule.Actions", valid_773453
  var valid_773454 = formData.getOrDefault("Rule.Name")
  valid_773454 = validateParameter(valid_773454, JString, required = false,
                                 default = nil)
  if valid_773454 != nil:
    section.add "Rule.Name", valid_773454
  var valid_773455 = formData.getOrDefault("Rule.ScanEnabled")
  valid_773455 = validateParameter(valid_773455, JString, required = false,
                                 default = nil)
  if valid_773455 != nil:
    section.add "Rule.ScanEnabled", valid_773455
  var valid_773456 = formData.getOrDefault("Rule.TlsPolicy")
  valid_773456 = validateParameter(valid_773456, JString, required = false,
                                 default = nil)
  if valid_773456 != nil:
    section.add "Rule.TlsPolicy", valid_773456
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773457: Call_PostCreateReceiptRule_773437; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_773457.validator(path, query, header, formData, body)
  let scheme = call_773457.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773457.url(scheme.get, call_773457.host, call_773457.base,
                         call_773457.route, valid.getOrDefault("path"))
  result = hook(call_773457, url, valid)

proc call*(call_773458: Call_PostCreateReceiptRule_773437; RuleSetName: string;
          RuleRecipients: JsonNode = nil; After: string = ""; RuleEnabled: string = "";
          Action: string = "CreateReceiptRule"; RuleActions: JsonNode = nil;
          RuleName: string = ""; RuleScanEnabled: string = "";
          RuleTlsPolicy: string = ""; Version: string = "2010-12-01"): Recallable =
  ## postCreateReceiptRule
  ## <p>Creates a receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleRecipients: JArray
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   After: string
  ##        : The name of an existing rule after which the new rule will be placed. If this parameter is null, the new rule will be inserted at the beginning of the rule list.
  ##   RuleEnabled: string
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   RuleSetName: string (required)
  ##              : The name of the rule set that the receipt rule will be added to.
  ##   Action: string (required)
  ##   RuleActions: JArray
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   RuleName: string
  ##           : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   RuleScanEnabled: string
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   RuleTlsPolicy: string
  ##                : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   Version: string (required)
  var query_773459 = newJObject()
  var formData_773460 = newJObject()
  if RuleRecipients != nil:
    formData_773460.add "Rule.Recipients", RuleRecipients
  add(formData_773460, "After", newJString(After))
  add(formData_773460, "Rule.Enabled", newJString(RuleEnabled))
  add(formData_773460, "RuleSetName", newJString(RuleSetName))
  add(query_773459, "Action", newJString(Action))
  if RuleActions != nil:
    formData_773460.add "Rule.Actions", RuleActions
  add(formData_773460, "Rule.Name", newJString(RuleName))
  add(formData_773460, "Rule.ScanEnabled", newJString(RuleScanEnabled))
  add(formData_773460, "Rule.TlsPolicy", newJString(RuleTlsPolicy))
  add(query_773459, "Version", newJString(Version))
  result = call_773458.call(nil, query_773459, nil, formData_773460, nil)

var postCreateReceiptRule* = Call_PostCreateReceiptRule_773437(
    name: "postCreateReceiptRule", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=CreateReceiptRule",
    validator: validate_PostCreateReceiptRule_773438, base: "/",
    url: url_PostCreateReceiptRule_773439, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateReceiptRule_773414 = ref object of OpenApiRestCall_772597
proc url_GetCreateReceiptRule_773416(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateReceiptRule_773415(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Rule.ScanEnabled: JString
  ##                   : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   Rule.Name: JString
  ##            : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Rule.Enabled: JString
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   After: JString
  ##        : The name of an existing rule after which the new rule will be placed. If this parameter is null, the new rule will be inserted at the beginning of the rule list.
  ##   Rule.TlsPolicy: JString
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   RuleSetName: JString (required)
  ##              : The name of the rule set that the receipt rule will be added to.
  ##   Action: JString (required)
  ##   Rule.Actions: JArray
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   Rule.Recipients: JArray
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   Version: JString (required)
  section = newJObject()
  var valid_773417 = query.getOrDefault("Rule.ScanEnabled")
  valid_773417 = validateParameter(valid_773417, JString, required = false,
                                 default = nil)
  if valid_773417 != nil:
    section.add "Rule.ScanEnabled", valid_773417
  var valid_773418 = query.getOrDefault("Rule.Name")
  valid_773418 = validateParameter(valid_773418, JString, required = false,
                                 default = nil)
  if valid_773418 != nil:
    section.add "Rule.Name", valid_773418
  var valid_773419 = query.getOrDefault("Rule.Enabled")
  valid_773419 = validateParameter(valid_773419, JString, required = false,
                                 default = nil)
  if valid_773419 != nil:
    section.add "Rule.Enabled", valid_773419
  var valid_773420 = query.getOrDefault("After")
  valid_773420 = validateParameter(valid_773420, JString, required = false,
                                 default = nil)
  if valid_773420 != nil:
    section.add "After", valid_773420
  var valid_773421 = query.getOrDefault("Rule.TlsPolicy")
  valid_773421 = validateParameter(valid_773421, JString, required = false,
                                 default = nil)
  if valid_773421 != nil:
    section.add "Rule.TlsPolicy", valid_773421
  assert query != nil,
        "query argument is necessary due to required `RuleSetName` field"
  var valid_773422 = query.getOrDefault("RuleSetName")
  valid_773422 = validateParameter(valid_773422, JString, required = true,
                                 default = nil)
  if valid_773422 != nil:
    section.add "RuleSetName", valid_773422
  var valid_773423 = query.getOrDefault("Action")
  valid_773423 = validateParameter(valid_773423, JString, required = true,
                                 default = newJString("CreateReceiptRule"))
  if valid_773423 != nil:
    section.add "Action", valid_773423
  var valid_773424 = query.getOrDefault("Rule.Actions")
  valid_773424 = validateParameter(valid_773424, JArray, required = false,
                                 default = nil)
  if valid_773424 != nil:
    section.add "Rule.Actions", valid_773424
  var valid_773425 = query.getOrDefault("Rule.Recipients")
  valid_773425 = validateParameter(valid_773425, JArray, required = false,
                                 default = nil)
  if valid_773425 != nil:
    section.add "Rule.Recipients", valid_773425
  var valid_773426 = query.getOrDefault("Version")
  valid_773426 = validateParameter(valid_773426, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773426 != nil:
    section.add "Version", valid_773426
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773427 = header.getOrDefault("X-Amz-Date")
  valid_773427 = validateParameter(valid_773427, JString, required = false,
                                 default = nil)
  if valid_773427 != nil:
    section.add "X-Amz-Date", valid_773427
  var valid_773428 = header.getOrDefault("X-Amz-Security-Token")
  valid_773428 = validateParameter(valid_773428, JString, required = false,
                                 default = nil)
  if valid_773428 != nil:
    section.add "X-Amz-Security-Token", valid_773428
  var valid_773429 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773429 = validateParameter(valid_773429, JString, required = false,
                                 default = nil)
  if valid_773429 != nil:
    section.add "X-Amz-Content-Sha256", valid_773429
  var valid_773430 = header.getOrDefault("X-Amz-Algorithm")
  valid_773430 = validateParameter(valid_773430, JString, required = false,
                                 default = nil)
  if valid_773430 != nil:
    section.add "X-Amz-Algorithm", valid_773430
  var valid_773431 = header.getOrDefault("X-Amz-Signature")
  valid_773431 = validateParameter(valid_773431, JString, required = false,
                                 default = nil)
  if valid_773431 != nil:
    section.add "X-Amz-Signature", valid_773431
  var valid_773432 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773432 = validateParameter(valid_773432, JString, required = false,
                                 default = nil)
  if valid_773432 != nil:
    section.add "X-Amz-SignedHeaders", valid_773432
  var valid_773433 = header.getOrDefault("X-Amz-Credential")
  valid_773433 = validateParameter(valid_773433, JString, required = false,
                                 default = nil)
  if valid_773433 != nil:
    section.add "X-Amz-Credential", valid_773433
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773434: Call_GetCreateReceiptRule_773414; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_773434.validator(path, query, header, formData, body)
  let scheme = call_773434.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773434.url(scheme.get, call_773434.host, call_773434.base,
                         call_773434.route, valid.getOrDefault("path"))
  result = hook(call_773434, url, valid)

proc call*(call_773435: Call_GetCreateReceiptRule_773414; RuleSetName: string;
          RuleScanEnabled: string = ""; RuleName: string = ""; RuleEnabled: string = "";
          After: string = ""; RuleTlsPolicy: string = "";
          Action: string = "CreateReceiptRule"; RuleActions: JsonNode = nil;
          RuleRecipients: JsonNode = nil; Version: string = "2010-12-01"): Recallable =
  ## getCreateReceiptRule
  ## <p>Creates a receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleScanEnabled: string
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   RuleName: string
  ##           : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   RuleEnabled: string
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   After: string
  ##        : The name of an existing rule after which the new rule will be placed. If this parameter is null, the new rule will be inserted at the beginning of the rule list.
  ##   RuleTlsPolicy: string
  ##                : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   RuleSetName: string (required)
  ##              : The name of the rule set that the receipt rule will be added to.
  ##   Action: string (required)
  ##   RuleActions: JArray
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   RuleRecipients: JArray
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   Version: string (required)
  var query_773436 = newJObject()
  add(query_773436, "Rule.ScanEnabled", newJString(RuleScanEnabled))
  add(query_773436, "Rule.Name", newJString(RuleName))
  add(query_773436, "Rule.Enabled", newJString(RuleEnabled))
  add(query_773436, "After", newJString(After))
  add(query_773436, "Rule.TlsPolicy", newJString(RuleTlsPolicy))
  add(query_773436, "RuleSetName", newJString(RuleSetName))
  add(query_773436, "Action", newJString(Action))
  if RuleActions != nil:
    query_773436.add "Rule.Actions", RuleActions
  if RuleRecipients != nil:
    query_773436.add "Rule.Recipients", RuleRecipients
  add(query_773436, "Version", newJString(Version))
  result = call_773435.call(nil, query_773436, nil, nil, nil)

var getCreateReceiptRule* = Call_GetCreateReceiptRule_773414(
    name: "getCreateReceiptRule", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=CreateReceiptRule",
    validator: validate_GetCreateReceiptRule_773415, base: "/",
    url: url_GetCreateReceiptRule_773416, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateReceiptRuleSet_773477 = ref object of OpenApiRestCall_772597
proc url_PostCreateReceiptRuleSet_773479(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateReceiptRuleSet_773478(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an empty receipt rule set.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773480 = query.getOrDefault("Action")
  valid_773480 = validateParameter(valid_773480, JString, required = true,
                                 default = newJString("CreateReceiptRuleSet"))
  if valid_773480 != nil:
    section.add "Action", valid_773480
  var valid_773481 = query.getOrDefault("Version")
  valid_773481 = validateParameter(valid_773481, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773481 != nil:
    section.add "Version", valid_773481
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773482 = header.getOrDefault("X-Amz-Date")
  valid_773482 = validateParameter(valid_773482, JString, required = false,
                                 default = nil)
  if valid_773482 != nil:
    section.add "X-Amz-Date", valid_773482
  var valid_773483 = header.getOrDefault("X-Amz-Security-Token")
  valid_773483 = validateParameter(valid_773483, JString, required = false,
                                 default = nil)
  if valid_773483 != nil:
    section.add "X-Amz-Security-Token", valid_773483
  var valid_773484 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773484 = validateParameter(valid_773484, JString, required = false,
                                 default = nil)
  if valid_773484 != nil:
    section.add "X-Amz-Content-Sha256", valid_773484
  var valid_773485 = header.getOrDefault("X-Amz-Algorithm")
  valid_773485 = validateParameter(valid_773485, JString, required = false,
                                 default = nil)
  if valid_773485 != nil:
    section.add "X-Amz-Algorithm", valid_773485
  var valid_773486 = header.getOrDefault("X-Amz-Signature")
  valid_773486 = validateParameter(valid_773486, JString, required = false,
                                 default = nil)
  if valid_773486 != nil:
    section.add "X-Amz-Signature", valid_773486
  var valid_773487 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773487 = validateParameter(valid_773487, JString, required = false,
                                 default = nil)
  if valid_773487 != nil:
    section.add "X-Amz-SignedHeaders", valid_773487
  var valid_773488 = header.getOrDefault("X-Amz-Credential")
  valid_773488 = validateParameter(valid_773488, JString, required = false,
                                 default = nil)
  if valid_773488 != nil:
    section.add "X-Amz-Credential", valid_773488
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleSetName: JString (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleSetName` field"
  var valid_773489 = formData.getOrDefault("RuleSetName")
  valid_773489 = validateParameter(valid_773489, JString, required = true,
                                 default = nil)
  if valid_773489 != nil:
    section.add "RuleSetName", valid_773489
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773490: Call_PostCreateReceiptRuleSet_773477; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an empty receipt rule set.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_773490.validator(path, query, header, formData, body)
  let scheme = call_773490.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773490.url(scheme.get, call_773490.host, call_773490.base,
                         call_773490.route, valid.getOrDefault("path"))
  result = hook(call_773490, url, valid)

proc call*(call_773491: Call_PostCreateReceiptRuleSet_773477; RuleSetName: string;
          Action: string = "CreateReceiptRuleSet"; Version: string = "2010-12-01"): Recallable =
  ## postCreateReceiptRuleSet
  ## <p>Creates an empty receipt rule set.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773492 = newJObject()
  var formData_773493 = newJObject()
  add(formData_773493, "RuleSetName", newJString(RuleSetName))
  add(query_773492, "Action", newJString(Action))
  add(query_773492, "Version", newJString(Version))
  result = call_773491.call(nil, query_773492, nil, formData_773493, nil)

var postCreateReceiptRuleSet* = Call_PostCreateReceiptRuleSet_773477(
    name: "postCreateReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=CreateReceiptRuleSet",
    validator: validate_PostCreateReceiptRuleSet_773478, base: "/",
    url: url_PostCreateReceiptRuleSet_773479, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateReceiptRuleSet_773461 = ref object of OpenApiRestCall_772597
proc url_GetCreateReceiptRuleSet_773463(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateReceiptRuleSet_773462(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an empty receipt rule set.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleSetName: JString (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleSetName` field"
  var valid_773464 = query.getOrDefault("RuleSetName")
  valid_773464 = validateParameter(valid_773464, JString, required = true,
                                 default = nil)
  if valid_773464 != nil:
    section.add "RuleSetName", valid_773464
  var valid_773465 = query.getOrDefault("Action")
  valid_773465 = validateParameter(valid_773465, JString, required = true,
                                 default = newJString("CreateReceiptRuleSet"))
  if valid_773465 != nil:
    section.add "Action", valid_773465
  var valid_773466 = query.getOrDefault("Version")
  valid_773466 = validateParameter(valid_773466, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773466 != nil:
    section.add "Version", valid_773466
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773467 = header.getOrDefault("X-Amz-Date")
  valid_773467 = validateParameter(valid_773467, JString, required = false,
                                 default = nil)
  if valid_773467 != nil:
    section.add "X-Amz-Date", valid_773467
  var valid_773468 = header.getOrDefault("X-Amz-Security-Token")
  valid_773468 = validateParameter(valid_773468, JString, required = false,
                                 default = nil)
  if valid_773468 != nil:
    section.add "X-Amz-Security-Token", valid_773468
  var valid_773469 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773469 = validateParameter(valid_773469, JString, required = false,
                                 default = nil)
  if valid_773469 != nil:
    section.add "X-Amz-Content-Sha256", valid_773469
  var valid_773470 = header.getOrDefault("X-Amz-Algorithm")
  valid_773470 = validateParameter(valid_773470, JString, required = false,
                                 default = nil)
  if valid_773470 != nil:
    section.add "X-Amz-Algorithm", valid_773470
  var valid_773471 = header.getOrDefault("X-Amz-Signature")
  valid_773471 = validateParameter(valid_773471, JString, required = false,
                                 default = nil)
  if valid_773471 != nil:
    section.add "X-Amz-Signature", valid_773471
  var valid_773472 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773472 = validateParameter(valid_773472, JString, required = false,
                                 default = nil)
  if valid_773472 != nil:
    section.add "X-Amz-SignedHeaders", valid_773472
  var valid_773473 = header.getOrDefault("X-Amz-Credential")
  valid_773473 = validateParameter(valid_773473, JString, required = false,
                                 default = nil)
  if valid_773473 != nil:
    section.add "X-Amz-Credential", valid_773473
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773474: Call_GetCreateReceiptRuleSet_773461; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an empty receipt rule set.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_773474.validator(path, query, header, formData, body)
  let scheme = call_773474.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773474.url(scheme.get, call_773474.host, call_773474.base,
                         call_773474.route, valid.getOrDefault("path"))
  result = hook(call_773474, url, valid)

proc call*(call_773475: Call_GetCreateReceiptRuleSet_773461; RuleSetName: string;
          Action: string = "CreateReceiptRuleSet"; Version: string = "2010-12-01"): Recallable =
  ## getCreateReceiptRuleSet
  ## <p>Creates an empty receipt rule set.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : <p>The name of the rule set to create. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773476 = newJObject()
  add(query_773476, "RuleSetName", newJString(RuleSetName))
  add(query_773476, "Action", newJString(Action))
  add(query_773476, "Version", newJString(Version))
  result = call_773475.call(nil, query_773476, nil, nil, nil)

var getCreateReceiptRuleSet* = Call_GetCreateReceiptRuleSet_773461(
    name: "getCreateReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=CreateReceiptRuleSet",
    validator: validate_GetCreateReceiptRuleSet_773462, base: "/",
    url: url_GetCreateReceiptRuleSet_773463, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateTemplate_773513 = ref object of OpenApiRestCall_772597
proc url_PostCreateTemplate_773515(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateTemplate_773514(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773516 = query.getOrDefault("Action")
  valid_773516 = validateParameter(valid_773516, JString, required = true,
                                 default = newJString("CreateTemplate"))
  if valid_773516 != nil:
    section.add "Action", valid_773516
  var valid_773517 = query.getOrDefault("Version")
  valid_773517 = validateParameter(valid_773517, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773517 != nil:
    section.add "Version", valid_773517
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773518 = header.getOrDefault("X-Amz-Date")
  valid_773518 = validateParameter(valid_773518, JString, required = false,
                                 default = nil)
  if valid_773518 != nil:
    section.add "X-Amz-Date", valid_773518
  var valid_773519 = header.getOrDefault("X-Amz-Security-Token")
  valid_773519 = validateParameter(valid_773519, JString, required = false,
                                 default = nil)
  if valid_773519 != nil:
    section.add "X-Amz-Security-Token", valid_773519
  var valid_773520 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773520 = validateParameter(valid_773520, JString, required = false,
                                 default = nil)
  if valid_773520 != nil:
    section.add "X-Amz-Content-Sha256", valid_773520
  var valid_773521 = header.getOrDefault("X-Amz-Algorithm")
  valid_773521 = validateParameter(valid_773521, JString, required = false,
                                 default = nil)
  if valid_773521 != nil:
    section.add "X-Amz-Algorithm", valid_773521
  var valid_773522 = header.getOrDefault("X-Amz-Signature")
  valid_773522 = validateParameter(valid_773522, JString, required = false,
                                 default = nil)
  if valid_773522 != nil:
    section.add "X-Amz-Signature", valid_773522
  var valid_773523 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773523 = validateParameter(valid_773523, JString, required = false,
                                 default = nil)
  if valid_773523 != nil:
    section.add "X-Amz-SignedHeaders", valid_773523
  var valid_773524 = header.getOrDefault("X-Amz-Credential")
  valid_773524 = validateParameter(valid_773524, JString, required = false,
                                 default = nil)
  if valid_773524 != nil:
    section.add "X-Amz-Credential", valid_773524
  result.add "header", section
  ## parameters in `formData` object:
  ##   Template.HtmlPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   Template.TemplateName: JString
  ##                        : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   Template.TextPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Template.SubjectPart: JString
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  section = newJObject()
  var valid_773525 = formData.getOrDefault("Template.HtmlPart")
  valid_773525 = validateParameter(valid_773525, JString, required = false,
                                 default = nil)
  if valid_773525 != nil:
    section.add "Template.HtmlPart", valid_773525
  var valid_773526 = formData.getOrDefault("Template.TemplateName")
  valid_773526 = validateParameter(valid_773526, JString, required = false,
                                 default = nil)
  if valid_773526 != nil:
    section.add "Template.TemplateName", valid_773526
  var valid_773527 = formData.getOrDefault("Template.TextPart")
  valid_773527 = validateParameter(valid_773527, JString, required = false,
                                 default = nil)
  if valid_773527 != nil:
    section.add "Template.TextPart", valid_773527
  var valid_773528 = formData.getOrDefault("Template.SubjectPart")
  valid_773528 = validateParameter(valid_773528, JString, required = false,
                                 default = nil)
  if valid_773528 != nil:
    section.add "Template.SubjectPart", valid_773528
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773529: Call_PostCreateTemplate_773513; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_773529.validator(path, query, header, formData, body)
  let scheme = call_773529.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773529.url(scheme.get, call_773529.host, call_773529.base,
                         call_773529.route, valid.getOrDefault("path"))
  result = hook(call_773529, url, valid)

proc call*(call_773530: Call_PostCreateTemplate_773513;
          Action: string = "CreateTemplate"; TemplateHtmlPart: string = "";
          TemplateTemplateName: string = ""; TemplateTextPart: string = "";
          Version: string = "2010-12-01"; TemplateSubjectPart: string = ""): Recallable =
  ## postCreateTemplate
  ## <p>Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateHtmlPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   TemplateTemplateName: string
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   TemplateTextPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Version: string (required)
  ##   TemplateSubjectPart: string
  ##                      : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  var query_773531 = newJObject()
  var formData_773532 = newJObject()
  add(query_773531, "Action", newJString(Action))
  add(formData_773532, "Template.HtmlPart", newJString(TemplateHtmlPart))
  add(formData_773532, "Template.TemplateName", newJString(TemplateTemplateName))
  add(formData_773532, "Template.TextPart", newJString(TemplateTextPart))
  add(query_773531, "Version", newJString(Version))
  add(formData_773532, "Template.SubjectPart", newJString(TemplateSubjectPart))
  result = call_773530.call(nil, query_773531, nil, formData_773532, nil)

var postCreateTemplate* = Call_PostCreateTemplate_773513(
    name: "postCreateTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=CreateTemplate",
    validator: validate_PostCreateTemplate_773514, base: "/",
    url: url_PostCreateTemplate_773515, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateTemplate_773494 = ref object of OpenApiRestCall_772597
proc url_GetCreateTemplate_773496(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateTemplate_773495(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Template.TemplateName: JString
  ##                        : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   Action: JString (required)
  ##   Template.SubjectPart: JString
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  ##   Template.HtmlPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   Template.TextPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Version: JString (required)
  section = newJObject()
  var valid_773497 = query.getOrDefault("Template.TemplateName")
  valid_773497 = validateParameter(valid_773497, JString, required = false,
                                 default = nil)
  if valid_773497 != nil:
    section.add "Template.TemplateName", valid_773497
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773498 = query.getOrDefault("Action")
  valid_773498 = validateParameter(valid_773498, JString, required = true,
                                 default = newJString("CreateTemplate"))
  if valid_773498 != nil:
    section.add "Action", valid_773498
  var valid_773499 = query.getOrDefault("Template.SubjectPart")
  valid_773499 = validateParameter(valid_773499, JString, required = false,
                                 default = nil)
  if valid_773499 != nil:
    section.add "Template.SubjectPart", valid_773499
  var valid_773500 = query.getOrDefault("Template.HtmlPart")
  valid_773500 = validateParameter(valid_773500, JString, required = false,
                                 default = nil)
  if valid_773500 != nil:
    section.add "Template.HtmlPart", valid_773500
  var valid_773501 = query.getOrDefault("Template.TextPart")
  valid_773501 = validateParameter(valid_773501, JString, required = false,
                                 default = nil)
  if valid_773501 != nil:
    section.add "Template.TextPart", valid_773501
  var valid_773502 = query.getOrDefault("Version")
  valid_773502 = validateParameter(valid_773502, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773502 != nil:
    section.add "Version", valid_773502
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773503 = header.getOrDefault("X-Amz-Date")
  valid_773503 = validateParameter(valid_773503, JString, required = false,
                                 default = nil)
  if valid_773503 != nil:
    section.add "X-Amz-Date", valid_773503
  var valid_773504 = header.getOrDefault("X-Amz-Security-Token")
  valid_773504 = validateParameter(valid_773504, JString, required = false,
                                 default = nil)
  if valid_773504 != nil:
    section.add "X-Amz-Security-Token", valid_773504
  var valid_773505 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773505 = validateParameter(valid_773505, JString, required = false,
                                 default = nil)
  if valid_773505 != nil:
    section.add "X-Amz-Content-Sha256", valid_773505
  var valid_773506 = header.getOrDefault("X-Amz-Algorithm")
  valid_773506 = validateParameter(valid_773506, JString, required = false,
                                 default = nil)
  if valid_773506 != nil:
    section.add "X-Amz-Algorithm", valid_773506
  var valid_773507 = header.getOrDefault("X-Amz-Signature")
  valid_773507 = validateParameter(valid_773507, JString, required = false,
                                 default = nil)
  if valid_773507 != nil:
    section.add "X-Amz-Signature", valid_773507
  var valid_773508 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773508 = validateParameter(valid_773508, JString, required = false,
                                 default = nil)
  if valid_773508 != nil:
    section.add "X-Amz-SignedHeaders", valid_773508
  var valid_773509 = header.getOrDefault("X-Amz-Credential")
  valid_773509 = validateParameter(valid_773509, JString, required = false,
                                 default = nil)
  if valid_773509 != nil:
    section.add "X-Amz-Credential", valid_773509
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773510: Call_GetCreateTemplate_773494; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_773510.validator(path, query, header, formData, body)
  let scheme = call_773510.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773510.url(scheme.get, call_773510.host, call_773510.base,
                         call_773510.route, valid.getOrDefault("path"))
  result = hook(call_773510, url, valid)

proc call*(call_773511: Call_GetCreateTemplate_773494;
          TemplateTemplateName: string = ""; Action: string = "CreateTemplate";
          TemplateSubjectPart: string = ""; TemplateHtmlPart: string = "";
          TemplateTextPart: string = ""; Version: string = "2010-12-01"): Recallable =
  ## getCreateTemplate
  ## <p>Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateTemplateName: string
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   Action: string (required)
  ##   TemplateSubjectPart: string
  ##                      : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  ##   TemplateHtmlPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   TemplateTextPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Version: string (required)
  var query_773512 = newJObject()
  add(query_773512, "Template.TemplateName", newJString(TemplateTemplateName))
  add(query_773512, "Action", newJString(Action))
  add(query_773512, "Template.SubjectPart", newJString(TemplateSubjectPart))
  add(query_773512, "Template.HtmlPart", newJString(TemplateHtmlPart))
  add(query_773512, "Template.TextPart", newJString(TemplateTextPart))
  add(query_773512, "Version", newJString(Version))
  result = call_773511.call(nil, query_773512, nil, nil, nil)

var getCreateTemplate* = Call_GetCreateTemplate_773494(name: "getCreateTemplate",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=CreateTemplate", validator: validate_GetCreateTemplate_773495,
    base: "/", url: url_GetCreateTemplate_773496,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteConfigurationSet_773549 = ref object of OpenApiRestCall_772597
proc url_PostDeleteConfigurationSet_773551(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteConfigurationSet_773550(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773552 = query.getOrDefault("Action")
  valid_773552 = validateParameter(valid_773552, JString, required = true,
                                 default = newJString("DeleteConfigurationSet"))
  if valid_773552 != nil:
    section.add "Action", valid_773552
  var valid_773553 = query.getOrDefault("Version")
  valid_773553 = validateParameter(valid_773553, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773553 != nil:
    section.add "Version", valid_773553
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773554 = header.getOrDefault("X-Amz-Date")
  valid_773554 = validateParameter(valid_773554, JString, required = false,
                                 default = nil)
  if valid_773554 != nil:
    section.add "X-Amz-Date", valid_773554
  var valid_773555 = header.getOrDefault("X-Amz-Security-Token")
  valid_773555 = validateParameter(valid_773555, JString, required = false,
                                 default = nil)
  if valid_773555 != nil:
    section.add "X-Amz-Security-Token", valid_773555
  var valid_773556 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773556 = validateParameter(valid_773556, JString, required = false,
                                 default = nil)
  if valid_773556 != nil:
    section.add "X-Amz-Content-Sha256", valid_773556
  var valid_773557 = header.getOrDefault("X-Amz-Algorithm")
  valid_773557 = validateParameter(valid_773557, JString, required = false,
                                 default = nil)
  if valid_773557 != nil:
    section.add "X-Amz-Algorithm", valid_773557
  var valid_773558 = header.getOrDefault("X-Amz-Signature")
  valid_773558 = validateParameter(valid_773558, JString, required = false,
                                 default = nil)
  if valid_773558 != nil:
    section.add "X-Amz-Signature", valid_773558
  var valid_773559 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773559 = validateParameter(valid_773559, JString, required = false,
                                 default = nil)
  if valid_773559 != nil:
    section.add "X-Amz-SignedHeaders", valid_773559
  var valid_773560 = header.getOrDefault("X-Amz-Credential")
  valid_773560 = validateParameter(valid_773560, JString, required = false,
                                 default = nil)
  if valid_773560 != nil:
    section.add "X-Amz-Credential", valid_773560
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set to delete.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_773561 = formData.getOrDefault("ConfigurationSetName")
  valid_773561 = validateParameter(valid_773561, JString, required = true,
                                 default = nil)
  if valid_773561 != nil:
    section.add "ConfigurationSetName", valid_773561
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773562: Call_PostDeleteConfigurationSet_773549; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_773562.validator(path, query, header, formData, body)
  let scheme = call_773562.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773562.url(scheme.get, call_773562.host, call_773562.base,
                         call_773562.route, valid.getOrDefault("path"))
  result = hook(call_773562, url, valid)

proc call*(call_773563: Call_PostDeleteConfigurationSet_773549;
          ConfigurationSetName: string; Action: string = "DeleteConfigurationSet";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteConfigurationSet
  ## <p>Deletes a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773564 = newJObject()
  var formData_773565 = newJObject()
  add(formData_773565, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_773564, "Action", newJString(Action))
  add(query_773564, "Version", newJString(Version))
  result = call_773563.call(nil, query_773564, nil, formData_773565, nil)

var postDeleteConfigurationSet* = Call_PostDeleteConfigurationSet_773549(
    name: "postDeleteConfigurationSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteConfigurationSet",
    validator: validate_PostDeleteConfigurationSet_773550, base: "/",
    url: url_PostDeleteConfigurationSet_773551,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteConfigurationSet_773533 = ref object of OpenApiRestCall_772597
proc url_GetDeleteConfigurationSet_773535(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteConfigurationSet_773534(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set to delete.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773536 = query.getOrDefault("Action")
  valid_773536 = validateParameter(valid_773536, JString, required = true,
                                 default = newJString("DeleteConfigurationSet"))
  if valid_773536 != nil:
    section.add "Action", valid_773536
  var valid_773537 = query.getOrDefault("ConfigurationSetName")
  valid_773537 = validateParameter(valid_773537, JString, required = true,
                                 default = nil)
  if valid_773537 != nil:
    section.add "ConfigurationSetName", valid_773537
  var valid_773538 = query.getOrDefault("Version")
  valid_773538 = validateParameter(valid_773538, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773538 != nil:
    section.add "Version", valid_773538
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773539 = header.getOrDefault("X-Amz-Date")
  valid_773539 = validateParameter(valid_773539, JString, required = false,
                                 default = nil)
  if valid_773539 != nil:
    section.add "X-Amz-Date", valid_773539
  var valid_773540 = header.getOrDefault("X-Amz-Security-Token")
  valid_773540 = validateParameter(valid_773540, JString, required = false,
                                 default = nil)
  if valid_773540 != nil:
    section.add "X-Amz-Security-Token", valid_773540
  var valid_773541 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773541 = validateParameter(valid_773541, JString, required = false,
                                 default = nil)
  if valid_773541 != nil:
    section.add "X-Amz-Content-Sha256", valid_773541
  var valid_773542 = header.getOrDefault("X-Amz-Algorithm")
  valid_773542 = validateParameter(valid_773542, JString, required = false,
                                 default = nil)
  if valid_773542 != nil:
    section.add "X-Amz-Algorithm", valid_773542
  var valid_773543 = header.getOrDefault("X-Amz-Signature")
  valid_773543 = validateParameter(valid_773543, JString, required = false,
                                 default = nil)
  if valid_773543 != nil:
    section.add "X-Amz-Signature", valid_773543
  var valid_773544 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773544 = validateParameter(valid_773544, JString, required = false,
                                 default = nil)
  if valid_773544 != nil:
    section.add "X-Amz-SignedHeaders", valid_773544
  var valid_773545 = header.getOrDefault("X-Amz-Credential")
  valid_773545 = validateParameter(valid_773545, JString, required = false,
                                 default = nil)
  if valid_773545 != nil:
    section.add "X-Amz-Credential", valid_773545
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773546: Call_GetDeleteConfigurationSet_773533; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_773546.validator(path, query, header, formData, body)
  let scheme = call_773546.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773546.url(scheme.get, call_773546.host, call_773546.base,
                         call_773546.route, valid.getOrDefault("path"))
  result = hook(call_773546, url, valid)

proc call*(call_773547: Call_GetDeleteConfigurationSet_773533;
          ConfigurationSetName: string; Action: string = "DeleteConfigurationSet";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteConfigurationSet
  ## <p>Deletes a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set to delete.
  ##   Version: string (required)
  var query_773548 = newJObject()
  add(query_773548, "Action", newJString(Action))
  add(query_773548, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_773548, "Version", newJString(Version))
  result = call_773547.call(nil, query_773548, nil, nil, nil)

var getDeleteConfigurationSet* = Call_GetDeleteConfigurationSet_773533(
    name: "getDeleteConfigurationSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DeleteConfigurationSet",
    validator: validate_GetDeleteConfigurationSet_773534, base: "/",
    url: url_GetDeleteConfigurationSet_773535,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteConfigurationSetEventDestination_773583 = ref object of OpenApiRestCall_772597
proc url_PostDeleteConfigurationSetEventDestination_773585(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteConfigurationSetEventDestination_773584(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773586 = query.getOrDefault("Action")
  valid_773586 = validateParameter(valid_773586, JString, required = true, default = newJString(
      "DeleteConfigurationSetEventDestination"))
  if valid_773586 != nil:
    section.add "Action", valid_773586
  var valid_773587 = query.getOrDefault("Version")
  valid_773587 = validateParameter(valid_773587, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773587 != nil:
    section.add "Version", valid_773587
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773588 = header.getOrDefault("X-Amz-Date")
  valid_773588 = validateParameter(valid_773588, JString, required = false,
                                 default = nil)
  if valid_773588 != nil:
    section.add "X-Amz-Date", valid_773588
  var valid_773589 = header.getOrDefault("X-Amz-Security-Token")
  valid_773589 = validateParameter(valid_773589, JString, required = false,
                                 default = nil)
  if valid_773589 != nil:
    section.add "X-Amz-Security-Token", valid_773589
  var valid_773590 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773590 = validateParameter(valid_773590, JString, required = false,
                                 default = nil)
  if valid_773590 != nil:
    section.add "X-Amz-Content-Sha256", valid_773590
  var valid_773591 = header.getOrDefault("X-Amz-Algorithm")
  valid_773591 = validateParameter(valid_773591, JString, required = false,
                                 default = nil)
  if valid_773591 != nil:
    section.add "X-Amz-Algorithm", valid_773591
  var valid_773592 = header.getOrDefault("X-Amz-Signature")
  valid_773592 = validateParameter(valid_773592, JString, required = false,
                                 default = nil)
  if valid_773592 != nil:
    section.add "X-Amz-Signature", valid_773592
  var valid_773593 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773593 = validateParameter(valid_773593, JString, required = false,
                                 default = nil)
  if valid_773593 != nil:
    section.add "X-Amz-SignedHeaders", valid_773593
  var valid_773594 = header.getOrDefault("X-Amz-Credential")
  valid_773594 = validateParameter(valid_773594, JString, required = false,
                                 default = nil)
  if valid_773594 != nil:
    section.add "X-Amz-Credential", valid_773594
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set from which to delete the event destination.
  ##   EventDestinationName: JString (required)
  ##                       : The name of the event destination to delete.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_773595 = formData.getOrDefault("ConfigurationSetName")
  valid_773595 = validateParameter(valid_773595, JString, required = true,
                                 default = nil)
  if valid_773595 != nil:
    section.add "ConfigurationSetName", valid_773595
  var valid_773596 = formData.getOrDefault("EventDestinationName")
  valid_773596 = validateParameter(valid_773596, JString, required = true,
                                 default = nil)
  if valid_773596 != nil:
    section.add "EventDestinationName", valid_773596
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773597: Call_PostDeleteConfigurationSetEventDestination_773583;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_773597.validator(path, query, header, formData, body)
  let scheme = call_773597.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773597.url(scheme.get, call_773597.host, call_773597.base,
                         call_773597.route, valid.getOrDefault("path"))
  result = hook(call_773597, url, valid)

proc call*(call_773598: Call_PostDeleteConfigurationSetEventDestination_773583;
          ConfigurationSetName: string; EventDestinationName: string;
          Action: string = "DeleteConfigurationSetEventDestination";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteConfigurationSetEventDestination
  ## <p>Deletes a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set from which to delete the event destination.
  ##   EventDestinationName: string (required)
  ##                       : The name of the event destination to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773599 = newJObject()
  var formData_773600 = newJObject()
  add(formData_773600, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_773600, "EventDestinationName", newJString(EventDestinationName))
  add(query_773599, "Action", newJString(Action))
  add(query_773599, "Version", newJString(Version))
  result = call_773598.call(nil, query_773599, nil, formData_773600, nil)

var postDeleteConfigurationSetEventDestination* = Call_PostDeleteConfigurationSetEventDestination_773583(
    name: "postDeleteConfigurationSetEventDestination", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=DeleteConfigurationSetEventDestination",
    validator: validate_PostDeleteConfigurationSetEventDestination_773584,
    base: "/", url: url_PostDeleteConfigurationSetEventDestination_773585,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteConfigurationSetEventDestination_773566 = ref object of OpenApiRestCall_772597
proc url_GetDeleteConfigurationSetEventDestination_773568(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteConfigurationSetEventDestination_773567(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   EventDestinationName: JString (required)
  ##                       : The name of the event destination to delete.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set from which to delete the event destination.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773569 = query.getOrDefault("Action")
  valid_773569 = validateParameter(valid_773569, JString, required = true, default = newJString(
      "DeleteConfigurationSetEventDestination"))
  if valid_773569 != nil:
    section.add "Action", valid_773569
  var valid_773570 = query.getOrDefault("EventDestinationName")
  valid_773570 = validateParameter(valid_773570, JString, required = true,
                                 default = nil)
  if valid_773570 != nil:
    section.add "EventDestinationName", valid_773570
  var valid_773571 = query.getOrDefault("ConfigurationSetName")
  valid_773571 = validateParameter(valid_773571, JString, required = true,
                                 default = nil)
  if valid_773571 != nil:
    section.add "ConfigurationSetName", valid_773571
  var valid_773572 = query.getOrDefault("Version")
  valid_773572 = validateParameter(valid_773572, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773572 != nil:
    section.add "Version", valid_773572
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773573 = header.getOrDefault("X-Amz-Date")
  valid_773573 = validateParameter(valid_773573, JString, required = false,
                                 default = nil)
  if valid_773573 != nil:
    section.add "X-Amz-Date", valid_773573
  var valid_773574 = header.getOrDefault("X-Amz-Security-Token")
  valid_773574 = validateParameter(valid_773574, JString, required = false,
                                 default = nil)
  if valid_773574 != nil:
    section.add "X-Amz-Security-Token", valid_773574
  var valid_773575 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773575 = validateParameter(valid_773575, JString, required = false,
                                 default = nil)
  if valid_773575 != nil:
    section.add "X-Amz-Content-Sha256", valid_773575
  var valid_773576 = header.getOrDefault("X-Amz-Algorithm")
  valid_773576 = validateParameter(valid_773576, JString, required = false,
                                 default = nil)
  if valid_773576 != nil:
    section.add "X-Amz-Algorithm", valid_773576
  var valid_773577 = header.getOrDefault("X-Amz-Signature")
  valid_773577 = validateParameter(valid_773577, JString, required = false,
                                 default = nil)
  if valid_773577 != nil:
    section.add "X-Amz-Signature", valid_773577
  var valid_773578 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773578 = validateParameter(valid_773578, JString, required = false,
                                 default = nil)
  if valid_773578 != nil:
    section.add "X-Amz-SignedHeaders", valid_773578
  var valid_773579 = header.getOrDefault("X-Amz-Credential")
  valid_773579 = validateParameter(valid_773579, JString, required = false,
                                 default = nil)
  if valid_773579 != nil:
    section.add "X-Amz-Credential", valid_773579
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773580: Call_GetDeleteConfigurationSetEventDestination_773566;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_773580.validator(path, query, header, formData, body)
  let scheme = call_773580.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773580.url(scheme.get, call_773580.host, call_773580.base,
                         call_773580.route, valid.getOrDefault("path"))
  result = hook(call_773580, url, valid)

proc call*(call_773581: Call_GetDeleteConfigurationSetEventDestination_773566;
          EventDestinationName: string; ConfigurationSetName: string;
          Action: string = "DeleteConfigurationSetEventDestination";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteConfigurationSetEventDestination
  ## <p>Deletes a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   EventDestinationName: string (required)
  ##                       : The name of the event destination to delete.
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set from which to delete the event destination.
  ##   Version: string (required)
  var query_773582 = newJObject()
  add(query_773582, "Action", newJString(Action))
  add(query_773582, "EventDestinationName", newJString(EventDestinationName))
  add(query_773582, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_773582, "Version", newJString(Version))
  result = call_773581.call(nil, query_773582, nil, nil, nil)

var getDeleteConfigurationSetEventDestination* = Call_GetDeleteConfigurationSetEventDestination_773566(
    name: "getDeleteConfigurationSetEventDestination", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=DeleteConfigurationSetEventDestination",
    validator: validate_GetDeleteConfigurationSetEventDestination_773567,
    base: "/", url: url_GetDeleteConfigurationSetEventDestination_773568,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteConfigurationSetTrackingOptions_773617 = ref object of OpenApiRestCall_772597
proc url_PostDeleteConfigurationSetTrackingOptions_773619(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteConfigurationSetTrackingOptions_773618(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an association between a configuration set and a custom domain for open and click event tracking.</p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p> <note> <p>Deleting this kind of association will result in emails sent using the specified configuration set to capture open and click events using the standard, Amazon SES-operated domains.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773620 = query.getOrDefault("Action")
  valid_773620 = validateParameter(valid_773620, JString, required = true, default = newJString(
      "DeleteConfigurationSetTrackingOptions"))
  if valid_773620 != nil:
    section.add "Action", valid_773620
  var valid_773621 = query.getOrDefault("Version")
  valid_773621 = validateParameter(valid_773621, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773621 != nil:
    section.add "Version", valid_773621
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773622 = header.getOrDefault("X-Amz-Date")
  valid_773622 = validateParameter(valid_773622, JString, required = false,
                                 default = nil)
  if valid_773622 != nil:
    section.add "X-Amz-Date", valid_773622
  var valid_773623 = header.getOrDefault("X-Amz-Security-Token")
  valid_773623 = validateParameter(valid_773623, JString, required = false,
                                 default = nil)
  if valid_773623 != nil:
    section.add "X-Amz-Security-Token", valid_773623
  var valid_773624 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773624 = validateParameter(valid_773624, JString, required = false,
                                 default = nil)
  if valid_773624 != nil:
    section.add "X-Amz-Content-Sha256", valid_773624
  var valid_773625 = header.getOrDefault("X-Amz-Algorithm")
  valid_773625 = validateParameter(valid_773625, JString, required = false,
                                 default = nil)
  if valid_773625 != nil:
    section.add "X-Amz-Algorithm", valid_773625
  var valid_773626 = header.getOrDefault("X-Amz-Signature")
  valid_773626 = validateParameter(valid_773626, JString, required = false,
                                 default = nil)
  if valid_773626 != nil:
    section.add "X-Amz-Signature", valid_773626
  var valid_773627 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773627 = validateParameter(valid_773627, JString, required = false,
                                 default = nil)
  if valid_773627 != nil:
    section.add "X-Amz-SignedHeaders", valid_773627
  var valid_773628 = header.getOrDefault("X-Amz-Credential")
  valid_773628 = validateParameter(valid_773628, JString, required = false,
                                 default = nil)
  if valid_773628 != nil:
    section.add "X-Amz-Credential", valid_773628
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set from which you want to delete the tracking options.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_773629 = formData.getOrDefault("ConfigurationSetName")
  valid_773629 = validateParameter(valid_773629, JString, required = true,
                                 default = nil)
  if valid_773629 != nil:
    section.add "ConfigurationSetName", valid_773629
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773630: Call_PostDeleteConfigurationSetTrackingOptions_773617;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes an association between a configuration set and a custom domain for open and click event tracking.</p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p> <note> <p>Deleting this kind of association will result in emails sent using the specified configuration set to capture open and click events using the standard, Amazon SES-operated domains.</p> </note>
  ## 
  let valid = call_773630.validator(path, query, header, formData, body)
  let scheme = call_773630.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773630.url(scheme.get, call_773630.host, call_773630.base,
                         call_773630.route, valid.getOrDefault("path"))
  result = hook(call_773630, url, valid)

proc call*(call_773631: Call_PostDeleteConfigurationSetTrackingOptions_773617;
          ConfigurationSetName: string;
          Action: string = "DeleteConfigurationSetTrackingOptions";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteConfigurationSetTrackingOptions
  ## <p>Deletes an association between a configuration set and a custom domain for open and click event tracking.</p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p> <note> <p>Deleting this kind of association will result in emails sent using the specified configuration set to capture open and click events using the standard, Amazon SES-operated domains.</p> </note>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set from which you want to delete the tracking options.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773632 = newJObject()
  var formData_773633 = newJObject()
  add(formData_773633, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_773632, "Action", newJString(Action))
  add(query_773632, "Version", newJString(Version))
  result = call_773631.call(nil, query_773632, nil, formData_773633, nil)

var postDeleteConfigurationSetTrackingOptions* = Call_PostDeleteConfigurationSetTrackingOptions_773617(
    name: "postDeleteConfigurationSetTrackingOptions", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=DeleteConfigurationSetTrackingOptions",
    validator: validate_PostDeleteConfigurationSetTrackingOptions_773618,
    base: "/", url: url_PostDeleteConfigurationSetTrackingOptions_773619,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteConfigurationSetTrackingOptions_773601 = ref object of OpenApiRestCall_772597
proc url_GetDeleteConfigurationSetTrackingOptions_773603(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteConfigurationSetTrackingOptions_773602(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an association between a configuration set and a custom domain for open and click event tracking.</p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p> <note> <p>Deleting this kind of association will result in emails sent using the specified configuration set to capture open and click events using the standard, Amazon SES-operated domains.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set from which you want to delete the tracking options.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773604 = query.getOrDefault("Action")
  valid_773604 = validateParameter(valid_773604, JString, required = true, default = newJString(
      "DeleteConfigurationSetTrackingOptions"))
  if valid_773604 != nil:
    section.add "Action", valid_773604
  var valid_773605 = query.getOrDefault("ConfigurationSetName")
  valid_773605 = validateParameter(valid_773605, JString, required = true,
                                 default = nil)
  if valid_773605 != nil:
    section.add "ConfigurationSetName", valid_773605
  var valid_773606 = query.getOrDefault("Version")
  valid_773606 = validateParameter(valid_773606, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773606 != nil:
    section.add "Version", valid_773606
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773607 = header.getOrDefault("X-Amz-Date")
  valid_773607 = validateParameter(valid_773607, JString, required = false,
                                 default = nil)
  if valid_773607 != nil:
    section.add "X-Amz-Date", valid_773607
  var valid_773608 = header.getOrDefault("X-Amz-Security-Token")
  valid_773608 = validateParameter(valid_773608, JString, required = false,
                                 default = nil)
  if valid_773608 != nil:
    section.add "X-Amz-Security-Token", valid_773608
  var valid_773609 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773609 = validateParameter(valid_773609, JString, required = false,
                                 default = nil)
  if valid_773609 != nil:
    section.add "X-Amz-Content-Sha256", valid_773609
  var valid_773610 = header.getOrDefault("X-Amz-Algorithm")
  valid_773610 = validateParameter(valid_773610, JString, required = false,
                                 default = nil)
  if valid_773610 != nil:
    section.add "X-Amz-Algorithm", valid_773610
  var valid_773611 = header.getOrDefault("X-Amz-Signature")
  valid_773611 = validateParameter(valid_773611, JString, required = false,
                                 default = nil)
  if valid_773611 != nil:
    section.add "X-Amz-Signature", valid_773611
  var valid_773612 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773612 = validateParameter(valid_773612, JString, required = false,
                                 default = nil)
  if valid_773612 != nil:
    section.add "X-Amz-SignedHeaders", valid_773612
  var valid_773613 = header.getOrDefault("X-Amz-Credential")
  valid_773613 = validateParameter(valid_773613, JString, required = false,
                                 default = nil)
  if valid_773613 != nil:
    section.add "X-Amz-Credential", valid_773613
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773614: Call_GetDeleteConfigurationSetTrackingOptions_773601;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes an association between a configuration set and a custom domain for open and click event tracking.</p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p> <note> <p>Deleting this kind of association will result in emails sent using the specified configuration set to capture open and click events using the standard, Amazon SES-operated domains.</p> </note>
  ## 
  let valid = call_773614.validator(path, query, header, formData, body)
  let scheme = call_773614.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773614.url(scheme.get, call_773614.host, call_773614.base,
                         call_773614.route, valid.getOrDefault("path"))
  result = hook(call_773614, url, valid)

proc call*(call_773615: Call_GetDeleteConfigurationSetTrackingOptions_773601;
          ConfigurationSetName: string;
          Action: string = "DeleteConfigurationSetTrackingOptions";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteConfigurationSetTrackingOptions
  ## <p>Deletes an association between a configuration set and a custom domain for open and click event tracking.</p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p> <note> <p>Deleting this kind of association will result in emails sent using the specified configuration set to capture open and click events using the standard, Amazon SES-operated domains.</p> </note>
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set from which you want to delete the tracking options.
  ##   Version: string (required)
  var query_773616 = newJObject()
  add(query_773616, "Action", newJString(Action))
  add(query_773616, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_773616, "Version", newJString(Version))
  result = call_773615.call(nil, query_773616, nil, nil, nil)

var getDeleteConfigurationSetTrackingOptions* = Call_GetDeleteConfigurationSetTrackingOptions_773601(
    name: "getDeleteConfigurationSetTrackingOptions", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=DeleteConfigurationSetTrackingOptions",
    validator: validate_GetDeleteConfigurationSetTrackingOptions_773602,
    base: "/", url: url_GetDeleteConfigurationSetTrackingOptions_773603,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCustomVerificationEmailTemplate_773650 = ref object of OpenApiRestCall_772597
proc url_PostDeleteCustomVerificationEmailTemplate_773652(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteCustomVerificationEmailTemplate_773651(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an existing custom verification email template. </p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773653 = query.getOrDefault("Action")
  valid_773653 = validateParameter(valid_773653, JString, required = true, default = newJString(
      "DeleteCustomVerificationEmailTemplate"))
  if valid_773653 != nil:
    section.add "Action", valid_773653
  var valid_773654 = query.getOrDefault("Version")
  valid_773654 = validateParameter(valid_773654, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773654 != nil:
    section.add "Version", valid_773654
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773655 = header.getOrDefault("X-Amz-Date")
  valid_773655 = validateParameter(valid_773655, JString, required = false,
                                 default = nil)
  if valid_773655 != nil:
    section.add "X-Amz-Date", valid_773655
  var valid_773656 = header.getOrDefault("X-Amz-Security-Token")
  valid_773656 = validateParameter(valid_773656, JString, required = false,
                                 default = nil)
  if valid_773656 != nil:
    section.add "X-Amz-Security-Token", valid_773656
  var valid_773657 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773657 = validateParameter(valid_773657, JString, required = false,
                                 default = nil)
  if valid_773657 != nil:
    section.add "X-Amz-Content-Sha256", valid_773657
  var valid_773658 = header.getOrDefault("X-Amz-Algorithm")
  valid_773658 = validateParameter(valid_773658, JString, required = false,
                                 default = nil)
  if valid_773658 != nil:
    section.add "X-Amz-Algorithm", valid_773658
  var valid_773659 = header.getOrDefault("X-Amz-Signature")
  valid_773659 = validateParameter(valid_773659, JString, required = false,
                                 default = nil)
  if valid_773659 != nil:
    section.add "X-Amz-Signature", valid_773659
  var valid_773660 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773660 = validateParameter(valid_773660, JString, required = false,
                                 default = nil)
  if valid_773660 != nil:
    section.add "X-Amz-SignedHeaders", valid_773660
  var valid_773661 = header.getOrDefault("X-Amz-Credential")
  valid_773661 = validateParameter(valid_773661, JString, required = false,
                                 default = nil)
  if valid_773661 != nil:
    section.add "X-Amz-Credential", valid_773661
  result.add "header", section
  ## parameters in `formData` object:
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template that you want to delete.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TemplateName` field"
  var valid_773662 = formData.getOrDefault("TemplateName")
  valid_773662 = validateParameter(valid_773662, JString, required = true,
                                 default = nil)
  if valid_773662 != nil:
    section.add "TemplateName", valid_773662
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773663: Call_PostDeleteCustomVerificationEmailTemplate_773650;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes an existing custom verification email template. </p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_773663.validator(path, query, header, formData, body)
  let scheme = call_773663.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773663.url(scheme.get, call_773663.host, call_773663.base,
                         call_773663.route, valid.getOrDefault("path"))
  result = hook(call_773663, url, valid)

proc call*(call_773664: Call_PostDeleteCustomVerificationEmailTemplate_773650;
          TemplateName: string;
          Action: string = "DeleteCustomVerificationEmailTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteCustomVerificationEmailTemplate
  ## <p>Deletes an existing custom verification email template. </p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template that you want to delete.
  ##   Version: string (required)
  var query_773665 = newJObject()
  var formData_773666 = newJObject()
  add(query_773665, "Action", newJString(Action))
  add(formData_773666, "TemplateName", newJString(TemplateName))
  add(query_773665, "Version", newJString(Version))
  result = call_773664.call(nil, query_773665, nil, formData_773666, nil)

var postDeleteCustomVerificationEmailTemplate* = Call_PostDeleteCustomVerificationEmailTemplate_773650(
    name: "postDeleteCustomVerificationEmailTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=DeleteCustomVerificationEmailTemplate",
    validator: validate_PostDeleteCustomVerificationEmailTemplate_773651,
    base: "/", url: url_PostDeleteCustomVerificationEmailTemplate_773652,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCustomVerificationEmailTemplate_773634 = ref object of OpenApiRestCall_772597
proc url_GetDeleteCustomVerificationEmailTemplate_773636(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteCustomVerificationEmailTemplate_773635(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an existing custom verification email template. </p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template that you want to delete.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773637 = query.getOrDefault("Action")
  valid_773637 = validateParameter(valid_773637, JString, required = true, default = newJString(
      "DeleteCustomVerificationEmailTemplate"))
  if valid_773637 != nil:
    section.add "Action", valid_773637
  var valid_773638 = query.getOrDefault("TemplateName")
  valid_773638 = validateParameter(valid_773638, JString, required = true,
                                 default = nil)
  if valid_773638 != nil:
    section.add "TemplateName", valid_773638
  var valid_773639 = query.getOrDefault("Version")
  valid_773639 = validateParameter(valid_773639, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773639 != nil:
    section.add "Version", valid_773639
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773640 = header.getOrDefault("X-Amz-Date")
  valid_773640 = validateParameter(valid_773640, JString, required = false,
                                 default = nil)
  if valid_773640 != nil:
    section.add "X-Amz-Date", valid_773640
  var valid_773641 = header.getOrDefault("X-Amz-Security-Token")
  valid_773641 = validateParameter(valid_773641, JString, required = false,
                                 default = nil)
  if valid_773641 != nil:
    section.add "X-Amz-Security-Token", valid_773641
  var valid_773642 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773642 = validateParameter(valid_773642, JString, required = false,
                                 default = nil)
  if valid_773642 != nil:
    section.add "X-Amz-Content-Sha256", valid_773642
  var valid_773643 = header.getOrDefault("X-Amz-Algorithm")
  valid_773643 = validateParameter(valid_773643, JString, required = false,
                                 default = nil)
  if valid_773643 != nil:
    section.add "X-Amz-Algorithm", valid_773643
  var valid_773644 = header.getOrDefault("X-Amz-Signature")
  valid_773644 = validateParameter(valid_773644, JString, required = false,
                                 default = nil)
  if valid_773644 != nil:
    section.add "X-Amz-Signature", valid_773644
  var valid_773645 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773645 = validateParameter(valid_773645, JString, required = false,
                                 default = nil)
  if valid_773645 != nil:
    section.add "X-Amz-SignedHeaders", valid_773645
  var valid_773646 = header.getOrDefault("X-Amz-Credential")
  valid_773646 = validateParameter(valid_773646, JString, required = false,
                                 default = nil)
  if valid_773646 != nil:
    section.add "X-Amz-Credential", valid_773646
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773647: Call_GetDeleteCustomVerificationEmailTemplate_773634;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes an existing custom verification email template. </p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_773647.validator(path, query, header, formData, body)
  let scheme = call_773647.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773647.url(scheme.get, call_773647.host, call_773647.base,
                         call_773647.route, valid.getOrDefault("path"))
  result = hook(call_773647, url, valid)

proc call*(call_773648: Call_GetDeleteCustomVerificationEmailTemplate_773634;
          TemplateName: string;
          Action: string = "DeleteCustomVerificationEmailTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteCustomVerificationEmailTemplate
  ## <p>Deletes an existing custom verification email template. </p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template that you want to delete.
  ##   Version: string (required)
  var query_773649 = newJObject()
  add(query_773649, "Action", newJString(Action))
  add(query_773649, "TemplateName", newJString(TemplateName))
  add(query_773649, "Version", newJString(Version))
  result = call_773648.call(nil, query_773649, nil, nil, nil)

var getDeleteCustomVerificationEmailTemplate* = Call_GetDeleteCustomVerificationEmailTemplate_773634(
    name: "getDeleteCustomVerificationEmailTemplate", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=DeleteCustomVerificationEmailTemplate",
    validator: validate_GetDeleteCustomVerificationEmailTemplate_773635,
    base: "/", url: url_GetDeleteCustomVerificationEmailTemplate_773636,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteIdentity_773683 = ref object of OpenApiRestCall_772597
proc url_PostDeleteIdentity_773685(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteIdentity_773684(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Deletes the specified identity (an email address or a domain) from the list of verified identities.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773686 = query.getOrDefault("Action")
  valid_773686 = validateParameter(valid_773686, JString, required = true,
                                 default = newJString("DeleteIdentity"))
  if valid_773686 != nil:
    section.add "Action", valid_773686
  var valid_773687 = query.getOrDefault("Version")
  valid_773687 = validateParameter(valid_773687, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773687 != nil:
    section.add "Version", valid_773687
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773688 = header.getOrDefault("X-Amz-Date")
  valid_773688 = validateParameter(valid_773688, JString, required = false,
                                 default = nil)
  if valid_773688 != nil:
    section.add "X-Amz-Date", valid_773688
  var valid_773689 = header.getOrDefault("X-Amz-Security-Token")
  valid_773689 = validateParameter(valid_773689, JString, required = false,
                                 default = nil)
  if valid_773689 != nil:
    section.add "X-Amz-Security-Token", valid_773689
  var valid_773690 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773690 = validateParameter(valid_773690, JString, required = false,
                                 default = nil)
  if valid_773690 != nil:
    section.add "X-Amz-Content-Sha256", valid_773690
  var valid_773691 = header.getOrDefault("X-Amz-Algorithm")
  valid_773691 = validateParameter(valid_773691, JString, required = false,
                                 default = nil)
  if valid_773691 != nil:
    section.add "X-Amz-Algorithm", valid_773691
  var valid_773692 = header.getOrDefault("X-Amz-Signature")
  valid_773692 = validateParameter(valid_773692, JString, required = false,
                                 default = nil)
  if valid_773692 != nil:
    section.add "X-Amz-Signature", valid_773692
  var valid_773693 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773693 = validateParameter(valid_773693, JString, required = false,
                                 default = nil)
  if valid_773693 != nil:
    section.add "X-Amz-SignedHeaders", valid_773693
  var valid_773694 = header.getOrDefault("X-Amz-Credential")
  valid_773694 = validateParameter(valid_773694, JString, required = false,
                                 default = nil)
  if valid_773694 != nil:
    section.add "X-Amz-Credential", valid_773694
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identity: JString (required)
  ##           : The identity to be removed from the list of identities for the AWS Account.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identity` field"
  var valid_773695 = formData.getOrDefault("Identity")
  valid_773695 = validateParameter(valid_773695, JString, required = true,
                                 default = nil)
  if valid_773695 != nil:
    section.add "Identity", valid_773695
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773696: Call_PostDeleteIdentity_773683; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified identity (an email address or a domain) from the list of verified identities.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_773696.validator(path, query, header, formData, body)
  let scheme = call_773696.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773696.url(scheme.get, call_773696.host, call_773696.base,
                         call_773696.route, valid.getOrDefault("path"))
  result = hook(call_773696, url, valid)

proc call*(call_773697: Call_PostDeleteIdentity_773683; Identity: string;
          Action: string = "DeleteIdentity"; Version: string = "2010-12-01"): Recallable =
  ## postDeleteIdentity
  ## <p>Deletes the specified identity (an email address or a domain) from the list of verified identities.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : The identity to be removed from the list of identities for the AWS Account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773698 = newJObject()
  var formData_773699 = newJObject()
  add(formData_773699, "Identity", newJString(Identity))
  add(query_773698, "Action", newJString(Action))
  add(query_773698, "Version", newJString(Version))
  result = call_773697.call(nil, query_773698, nil, formData_773699, nil)

var postDeleteIdentity* = Call_PostDeleteIdentity_773683(
    name: "postDeleteIdentity", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteIdentity",
    validator: validate_PostDeleteIdentity_773684, base: "/",
    url: url_PostDeleteIdentity_773685, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteIdentity_773667 = ref object of OpenApiRestCall_772597
proc url_GetDeleteIdentity_773669(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteIdentity_773668(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Deletes the specified identity (an email address or a domain) from the list of verified identities.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : The identity to be removed from the list of identities for the AWS Account.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_773670 = query.getOrDefault("Identity")
  valid_773670 = validateParameter(valid_773670, JString, required = true,
                                 default = nil)
  if valid_773670 != nil:
    section.add "Identity", valid_773670
  var valid_773671 = query.getOrDefault("Action")
  valid_773671 = validateParameter(valid_773671, JString, required = true,
                                 default = newJString("DeleteIdentity"))
  if valid_773671 != nil:
    section.add "Action", valid_773671
  var valid_773672 = query.getOrDefault("Version")
  valid_773672 = validateParameter(valid_773672, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773672 != nil:
    section.add "Version", valid_773672
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773673 = header.getOrDefault("X-Amz-Date")
  valid_773673 = validateParameter(valid_773673, JString, required = false,
                                 default = nil)
  if valid_773673 != nil:
    section.add "X-Amz-Date", valid_773673
  var valid_773674 = header.getOrDefault("X-Amz-Security-Token")
  valid_773674 = validateParameter(valid_773674, JString, required = false,
                                 default = nil)
  if valid_773674 != nil:
    section.add "X-Amz-Security-Token", valid_773674
  var valid_773675 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773675 = validateParameter(valid_773675, JString, required = false,
                                 default = nil)
  if valid_773675 != nil:
    section.add "X-Amz-Content-Sha256", valid_773675
  var valid_773676 = header.getOrDefault("X-Amz-Algorithm")
  valid_773676 = validateParameter(valid_773676, JString, required = false,
                                 default = nil)
  if valid_773676 != nil:
    section.add "X-Amz-Algorithm", valid_773676
  var valid_773677 = header.getOrDefault("X-Amz-Signature")
  valid_773677 = validateParameter(valid_773677, JString, required = false,
                                 default = nil)
  if valid_773677 != nil:
    section.add "X-Amz-Signature", valid_773677
  var valid_773678 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773678 = validateParameter(valid_773678, JString, required = false,
                                 default = nil)
  if valid_773678 != nil:
    section.add "X-Amz-SignedHeaders", valid_773678
  var valid_773679 = header.getOrDefault("X-Amz-Credential")
  valid_773679 = validateParameter(valid_773679, JString, required = false,
                                 default = nil)
  if valid_773679 != nil:
    section.add "X-Amz-Credential", valid_773679
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773680: Call_GetDeleteIdentity_773667; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified identity (an email address or a domain) from the list of verified identities.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_773680.validator(path, query, header, formData, body)
  let scheme = call_773680.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773680.url(scheme.get, call_773680.host, call_773680.base,
                         call_773680.route, valid.getOrDefault("path"))
  result = hook(call_773680, url, valid)

proc call*(call_773681: Call_GetDeleteIdentity_773667; Identity: string;
          Action: string = "DeleteIdentity"; Version: string = "2010-12-01"): Recallable =
  ## getDeleteIdentity
  ## <p>Deletes the specified identity (an email address or a domain) from the list of verified identities.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : The identity to be removed from the list of identities for the AWS Account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773682 = newJObject()
  add(query_773682, "Identity", newJString(Identity))
  add(query_773682, "Action", newJString(Action))
  add(query_773682, "Version", newJString(Version))
  result = call_773681.call(nil, query_773682, nil, nil, nil)

var getDeleteIdentity* = Call_GetDeleteIdentity_773667(name: "getDeleteIdentity",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=DeleteIdentity", validator: validate_GetDeleteIdentity_773668,
    base: "/", url: url_GetDeleteIdentity_773669,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteIdentityPolicy_773717 = ref object of OpenApiRestCall_772597
proc url_PostDeleteIdentityPolicy_773719(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteIdentityPolicy_773718(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773720 = query.getOrDefault("Action")
  valid_773720 = validateParameter(valid_773720, JString, required = true,
                                 default = newJString("DeleteIdentityPolicy"))
  if valid_773720 != nil:
    section.add "Action", valid_773720
  var valid_773721 = query.getOrDefault("Version")
  valid_773721 = validateParameter(valid_773721, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773721 != nil:
    section.add "Version", valid_773721
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773722 = header.getOrDefault("X-Amz-Date")
  valid_773722 = validateParameter(valid_773722, JString, required = false,
                                 default = nil)
  if valid_773722 != nil:
    section.add "X-Amz-Date", valid_773722
  var valid_773723 = header.getOrDefault("X-Amz-Security-Token")
  valid_773723 = validateParameter(valid_773723, JString, required = false,
                                 default = nil)
  if valid_773723 != nil:
    section.add "X-Amz-Security-Token", valid_773723
  var valid_773724 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773724 = validateParameter(valid_773724, JString, required = false,
                                 default = nil)
  if valid_773724 != nil:
    section.add "X-Amz-Content-Sha256", valid_773724
  var valid_773725 = header.getOrDefault("X-Amz-Algorithm")
  valid_773725 = validateParameter(valid_773725, JString, required = false,
                                 default = nil)
  if valid_773725 != nil:
    section.add "X-Amz-Algorithm", valid_773725
  var valid_773726 = header.getOrDefault("X-Amz-Signature")
  valid_773726 = validateParameter(valid_773726, JString, required = false,
                                 default = nil)
  if valid_773726 != nil:
    section.add "X-Amz-Signature", valid_773726
  var valid_773727 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773727 = validateParameter(valid_773727, JString, required = false,
                                 default = nil)
  if valid_773727 != nil:
    section.add "X-Amz-SignedHeaders", valid_773727
  var valid_773728 = header.getOrDefault("X-Amz-Credential")
  valid_773728 = validateParameter(valid_773728, JString, required = false,
                                 default = nil)
  if valid_773728 != nil:
    section.add "X-Amz-Credential", valid_773728
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : The name of the policy to be deleted.
  ##   Identity: JString (required)
  ##           : <p>The identity that is associated with the policy that you want to delete. You can specify the identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_773729 = formData.getOrDefault("PolicyName")
  valid_773729 = validateParameter(valid_773729, JString, required = true,
                                 default = nil)
  if valid_773729 != nil:
    section.add "PolicyName", valid_773729
  var valid_773730 = formData.getOrDefault("Identity")
  valid_773730 = validateParameter(valid_773730, JString, required = true,
                                 default = nil)
  if valid_773730 != nil:
    section.add "Identity", valid_773730
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773731: Call_PostDeleteIdentityPolicy_773717; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_773731.validator(path, query, header, formData, body)
  let scheme = call_773731.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773731.url(scheme.get, call_773731.host, call_773731.base,
                         call_773731.route, valid.getOrDefault("path"))
  result = hook(call_773731, url, valid)

proc call*(call_773732: Call_PostDeleteIdentityPolicy_773717; PolicyName: string;
          Identity: string; Action: string = "DeleteIdentityPolicy";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteIdentityPolicy
  ## <p>Deletes the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   PolicyName: string (required)
  ##             : The name of the policy to be deleted.
  ##   Identity: string (required)
  ##           : <p>The identity that is associated with the policy that you want to delete. You can specify the identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773733 = newJObject()
  var formData_773734 = newJObject()
  add(formData_773734, "PolicyName", newJString(PolicyName))
  add(formData_773734, "Identity", newJString(Identity))
  add(query_773733, "Action", newJString(Action))
  add(query_773733, "Version", newJString(Version))
  result = call_773732.call(nil, query_773733, nil, formData_773734, nil)

var postDeleteIdentityPolicy* = Call_PostDeleteIdentityPolicy_773717(
    name: "postDeleteIdentityPolicy", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteIdentityPolicy",
    validator: validate_PostDeleteIdentityPolicy_773718, base: "/",
    url: url_PostDeleteIdentityPolicy_773719, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteIdentityPolicy_773700 = ref object of OpenApiRestCall_772597
proc url_GetDeleteIdentityPolicy_773702(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteIdentityPolicy_773701(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : <p>The identity that is associated with the policy that you want to delete. You can specify the identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : The name of the policy to be deleted.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_773703 = query.getOrDefault("Identity")
  valid_773703 = validateParameter(valid_773703, JString, required = true,
                                 default = nil)
  if valid_773703 != nil:
    section.add "Identity", valid_773703
  var valid_773704 = query.getOrDefault("Action")
  valid_773704 = validateParameter(valid_773704, JString, required = true,
                                 default = newJString("DeleteIdentityPolicy"))
  if valid_773704 != nil:
    section.add "Action", valid_773704
  var valid_773705 = query.getOrDefault("Version")
  valid_773705 = validateParameter(valid_773705, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773705 != nil:
    section.add "Version", valid_773705
  var valid_773706 = query.getOrDefault("PolicyName")
  valid_773706 = validateParameter(valid_773706, JString, required = true,
                                 default = nil)
  if valid_773706 != nil:
    section.add "PolicyName", valid_773706
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773707 = header.getOrDefault("X-Amz-Date")
  valid_773707 = validateParameter(valid_773707, JString, required = false,
                                 default = nil)
  if valid_773707 != nil:
    section.add "X-Amz-Date", valid_773707
  var valid_773708 = header.getOrDefault("X-Amz-Security-Token")
  valid_773708 = validateParameter(valid_773708, JString, required = false,
                                 default = nil)
  if valid_773708 != nil:
    section.add "X-Amz-Security-Token", valid_773708
  var valid_773709 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773709 = validateParameter(valid_773709, JString, required = false,
                                 default = nil)
  if valid_773709 != nil:
    section.add "X-Amz-Content-Sha256", valid_773709
  var valid_773710 = header.getOrDefault("X-Amz-Algorithm")
  valid_773710 = validateParameter(valid_773710, JString, required = false,
                                 default = nil)
  if valid_773710 != nil:
    section.add "X-Amz-Algorithm", valid_773710
  var valid_773711 = header.getOrDefault("X-Amz-Signature")
  valid_773711 = validateParameter(valid_773711, JString, required = false,
                                 default = nil)
  if valid_773711 != nil:
    section.add "X-Amz-Signature", valid_773711
  var valid_773712 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773712 = validateParameter(valid_773712, JString, required = false,
                                 default = nil)
  if valid_773712 != nil:
    section.add "X-Amz-SignedHeaders", valid_773712
  var valid_773713 = header.getOrDefault("X-Amz-Credential")
  valid_773713 = validateParameter(valid_773713, JString, required = false,
                                 default = nil)
  if valid_773713 != nil:
    section.add "X-Amz-Credential", valid_773713
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773714: Call_GetDeleteIdentityPolicy_773700; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_773714.validator(path, query, header, formData, body)
  let scheme = call_773714.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773714.url(scheme.get, call_773714.host, call_773714.base,
                         call_773714.route, valid.getOrDefault("path"))
  result = hook(call_773714, url, valid)

proc call*(call_773715: Call_GetDeleteIdentityPolicy_773700; Identity: string;
          PolicyName: string; Action: string = "DeleteIdentityPolicy";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteIdentityPolicy
  ## <p>Deletes the specified sending authorization policy for the given identity (an email address or a domain). This API returns successfully even if a policy with the specified name does not exist.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : <p>The identity that is associated with the policy that you want to delete. You can specify the identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : The name of the policy to be deleted.
  var query_773716 = newJObject()
  add(query_773716, "Identity", newJString(Identity))
  add(query_773716, "Action", newJString(Action))
  add(query_773716, "Version", newJString(Version))
  add(query_773716, "PolicyName", newJString(PolicyName))
  result = call_773715.call(nil, query_773716, nil, nil, nil)

var getDeleteIdentityPolicy* = Call_GetDeleteIdentityPolicy_773700(
    name: "getDeleteIdentityPolicy", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DeleteIdentityPolicy",
    validator: validate_GetDeleteIdentityPolicy_773701, base: "/",
    url: url_GetDeleteIdentityPolicy_773702, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteReceiptFilter_773751 = ref object of OpenApiRestCall_772597
proc url_PostDeleteReceiptFilter_773753(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteReceiptFilter_773752(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified IP address filter.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773754 = query.getOrDefault("Action")
  valid_773754 = validateParameter(valid_773754, JString, required = true,
                                 default = newJString("DeleteReceiptFilter"))
  if valid_773754 != nil:
    section.add "Action", valid_773754
  var valid_773755 = query.getOrDefault("Version")
  valid_773755 = validateParameter(valid_773755, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773755 != nil:
    section.add "Version", valid_773755
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773756 = header.getOrDefault("X-Amz-Date")
  valid_773756 = validateParameter(valid_773756, JString, required = false,
                                 default = nil)
  if valid_773756 != nil:
    section.add "X-Amz-Date", valid_773756
  var valid_773757 = header.getOrDefault("X-Amz-Security-Token")
  valid_773757 = validateParameter(valid_773757, JString, required = false,
                                 default = nil)
  if valid_773757 != nil:
    section.add "X-Amz-Security-Token", valid_773757
  var valid_773758 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773758 = validateParameter(valid_773758, JString, required = false,
                                 default = nil)
  if valid_773758 != nil:
    section.add "X-Amz-Content-Sha256", valid_773758
  var valid_773759 = header.getOrDefault("X-Amz-Algorithm")
  valid_773759 = validateParameter(valid_773759, JString, required = false,
                                 default = nil)
  if valid_773759 != nil:
    section.add "X-Amz-Algorithm", valid_773759
  var valid_773760 = header.getOrDefault("X-Amz-Signature")
  valid_773760 = validateParameter(valid_773760, JString, required = false,
                                 default = nil)
  if valid_773760 != nil:
    section.add "X-Amz-Signature", valid_773760
  var valid_773761 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773761 = validateParameter(valid_773761, JString, required = false,
                                 default = nil)
  if valid_773761 != nil:
    section.add "X-Amz-SignedHeaders", valid_773761
  var valid_773762 = header.getOrDefault("X-Amz-Credential")
  valid_773762 = validateParameter(valid_773762, JString, required = false,
                                 default = nil)
  if valid_773762 != nil:
    section.add "X-Amz-Credential", valid_773762
  result.add "header", section
  ## parameters in `formData` object:
  ##   FilterName: JString (required)
  ##             : The name of the IP address filter to delete.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `FilterName` field"
  var valid_773763 = formData.getOrDefault("FilterName")
  valid_773763 = validateParameter(valid_773763, JString, required = true,
                                 default = nil)
  if valid_773763 != nil:
    section.add "FilterName", valid_773763
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773764: Call_PostDeleteReceiptFilter_773751; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified IP address filter.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_773764.validator(path, query, header, formData, body)
  let scheme = call_773764.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773764.url(scheme.get, call_773764.host, call_773764.base,
                         call_773764.route, valid.getOrDefault("path"))
  result = hook(call_773764, url, valid)

proc call*(call_773765: Call_PostDeleteReceiptFilter_773751; FilterName: string;
          Action: string = "DeleteReceiptFilter"; Version: string = "2010-12-01"): Recallable =
  ## postDeleteReceiptFilter
  ## <p>Deletes the specified IP address filter.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   FilterName: string (required)
  ##             : The name of the IP address filter to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773766 = newJObject()
  var formData_773767 = newJObject()
  add(formData_773767, "FilterName", newJString(FilterName))
  add(query_773766, "Action", newJString(Action))
  add(query_773766, "Version", newJString(Version))
  result = call_773765.call(nil, query_773766, nil, formData_773767, nil)

var postDeleteReceiptFilter* = Call_PostDeleteReceiptFilter_773751(
    name: "postDeleteReceiptFilter", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteReceiptFilter",
    validator: validate_PostDeleteReceiptFilter_773752, base: "/",
    url: url_PostDeleteReceiptFilter_773753, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteReceiptFilter_773735 = ref object of OpenApiRestCall_772597
proc url_GetDeleteReceiptFilter_773737(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteReceiptFilter_773736(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified IP address filter.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   FilterName: JString (required)
  ##             : The name of the IP address filter to delete.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773738 = query.getOrDefault("Action")
  valid_773738 = validateParameter(valid_773738, JString, required = true,
                                 default = newJString("DeleteReceiptFilter"))
  if valid_773738 != nil:
    section.add "Action", valid_773738
  var valid_773739 = query.getOrDefault("Version")
  valid_773739 = validateParameter(valid_773739, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773739 != nil:
    section.add "Version", valid_773739
  var valid_773740 = query.getOrDefault("FilterName")
  valid_773740 = validateParameter(valid_773740, JString, required = true,
                                 default = nil)
  if valid_773740 != nil:
    section.add "FilterName", valid_773740
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773741 = header.getOrDefault("X-Amz-Date")
  valid_773741 = validateParameter(valid_773741, JString, required = false,
                                 default = nil)
  if valid_773741 != nil:
    section.add "X-Amz-Date", valid_773741
  var valid_773742 = header.getOrDefault("X-Amz-Security-Token")
  valid_773742 = validateParameter(valid_773742, JString, required = false,
                                 default = nil)
  if valid_773742 != nil:
    section.add "X-Amz-Security-Token", valid_773742
  var valid_773743 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773743 = validateParameter(valid_773743, JString, required = false,
                                 default = nil)
  if valid_773743 != nil:
    section.add "X-Amz-Content-Sha256", valid_773743
  var valid_773744 = header.getOrDefault("X-Amz-Algorithm")
  valid_773744 = validateParameter(valid_773744, JString, required = false,
                                 default = nil)
  if valid_773744 != nil:
    section.add "X-Amz-Algorithm", valid_773744
  var valid_773745 = header.getOrDefault("X-Amz-Signature")
  valid_773745 = validateParameter(valid_773745, JString, required = false,
                                 default = nil)
  if valid_773745 != nil:
    section.add "X-Amz-Signature", valid_773745
  var valid_773746 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773746 = validateParameter(valid_773746, JString, required = false,
                                 default = nil)
  if valid_773746 != nil:
    section.add "X-Amz-SignedHeaders", valid_773746
  var valid_773747 = header.getOrDefault("X-Amz-Credential")
  valid_773747 = validateParameter(valid_773747, JString, required = false,
                                 default = nil)
  if valid_773747 != nil:
    section.add "X-Amz-Credential", valid_773747
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773748: Call_GetDeleteReceiptFilter_773735; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified IP address filter.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_773748.validator(path, query, header, formData, body)
  let scheme = call_773748.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773748.url(scheme.get, call_773748.host, call_773748.base,
                         call_773748.route, valid.getOrDefault("path"))
  result = hook(call_773748, url, valid)

proc call*(call_773749: Call_GetDeleteReceiptFilter_773735; FilterName: string;
          Action: string = "DeleteReceiptFilter"; Version: string = "2010-12-01"): Recallable =
  ## getDeleteReceiptFilter
  ## <p>Deletes the specified IP address filter.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   FilterName: string (required)
  ##             : The name of the IP address filter to delete.
  var query_773750 = newJObject()
  add(query_773750, "Action", newJString(Action))
  add(query_773750, "Version", newJString(Version))
  add(query_773750, "FilterName", newJString(FilterName))
  result = call_773749.call(nil, query_773750, nil, nil, nil)

var getDeleteReceiptFilter* = Call_GetDeleteReceiptFilter_773735(
    name: "getDeleteReceiptFilter", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DeleteReceiptFilter",
    validator: validate_GetDeleteReceiptFilter_773736, base: "/",
    url: url_GetDeleteReceiptFilter_773737, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteReceiptRule_773785 = ref object of OpenApiRestCall_772597
proc url_PostDeleteReceiptRule_773787(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteReceiptRule_773786(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773788 = query.getOrDefault("Action")
  valid_773788 = validateParameter(valid_773788, JString, required = true,
                                 default = newJString("DeleteReceiptRule"))
  if valid_773788 != nil:
    section.add "Action", valid_773788
  var valid_773789 = query.getOrDefault("Version")
  valid_773789 = validateParameter(valid_773789, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773789 != nil:
    section.add "Version", valid_773789
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773790 = header.getOrDefault("X-Amz-Date")
  valid_773790 = validateParameter(valid_773790, JString, required = false,
                                 default = nil)
  if valid_773790 != nil:
    section.add "X-Amz-Date", valid_773790
  var valid_773791 = header.getOrDefault("X-Amz-Security-Token")
  valid_773791 = validateParameter(valid_773791, JString, required = false,
                                 default = nil)
  if valid_773791 != nil:
    section.add "X-Amz-Security-Token", valid_773791
  var valid_773792 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773792 = validateParameter(valid_773792, JString, required = false,
                                 default = nil)
  if valid_773792 != nil:
    section.add "X-Amz-Content-Sha256", valid_773792
  var valid_773793 = header.getOrDefault("X-Amz-Algorithm")
  valid_773793 = validateParameter(valid_773793, JString, required = false,
                                 default = nil)
  if valid_773793 != nil:
    section.add "X-Amz-Algorithm", valid_773793
  var valid_773794 = header.getOrDefault("X-Amz-Signature")
  valid_773794 = validateParameter(valid_773794, JString, required = false,
                                 default = nil)
  if valid_773794 != nil:
    section.add "X-Amz-Signature", valid_773794
  var valid_773795 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773795 = validateParameter(valid_773795, JString, required = false,
                                 default = nil)
  if valid_773795 != nil:
    section.add "X-Amz-SignedHeaders", valid_773795
  var valid_773796 = header.getOrDefault("X-Amz-Credential")
  valid_773796 = validateParameter(valid_773796, JString, required = false,
                                 default = nil)
  if valid_773796 != nil:
    section.add "X-Amz-Credential", valid_773796
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleName: JString (required)
  ##           : The name of the receipt rule to delete.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that contains the receipt rule to delete.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleName` field"
  var valid_773797 = formData.getOrDefault("RuleName")
  valid_773797 = validateParameter(valid_773797, JString, required = true,
                                 default = nil)
  if valid_773797 != nil:
    section.add "RuleName", valid_773797
  var valid_773798 = formData.getOrDefault("RuleSetName")
  valid_773798 = validateParameter(valid_773798, JString, required = true,
                                 default = nil)
  if valid_773798 != nil:
    section.add "RuleSetName", valid_773798
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773799: Call_PostDeleteReceiptRule_773785; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_773799.validator(path, query, header, formData, body)
  let scheme = call_773799.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773799.url(scheme.get, call_773799.host, call_773799.base,
                         call_773799.route, valid.getOrDefault("path"))
  result = hook(call_773799, url, valid)

proc call*(call_773800: Call_PostDeleteReceiptRule_773785; RuleName: string;
          RuleSetName: string; Action: string = "DeleteReceiptRule";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteReceiptRule
  ## <p>Deletes the specified receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleName: string (required)
  ##           : The name of the receipt rule to delete.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that contains the receipt rule to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773801 = newJObject()
  var formData_773802 = newJObject()
  add(formData_773802, "RuleName", newJString(RuleName))
  add(formData_773802, "RuleSetName", newJString(RuleSetName))
  add(query_773801, "Action", newJString(Action))
  add(query_773801, "Version", newJString(Version))
  result = call_773800.call(nil, query_773801, nil, formData_773802, nil)

var postDeleteReceiptRule* = Call_PostDeleteReceiptRule_773785(
    name: "postDeleteReceiptRule", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteReceiptRule",
    validator: validate_PostDeleteReceiptRule_773786, base: "/",
    url: url_PostDeleteReceiptRule_773787, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteReceiptRule_773768 = ref object of OpenApiRestCall_772597
proc url_GetDeleteReceiptRule_773770(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteReceiptRule_773769(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleName: JString (required)
  ##           : The name of the receipt rule to delete.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that contains the receipt rule to delete.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleName` field"
  var valid_773771 = query.getOrDefault("RuleName")
  valid_773771 = validateParameter(valid_773771, JString, required = true,
                                 default = nil)
  if valid_773771 != nil:
    section.add "RuleName", valid_773771
  var valid_773772 = query.getOrDefault("RuleSetName")
  valid_773772 = validateParameter(valid_773772, JString, required = true,
                                 default = nil)
  if valid_773772 != nil:
    section.add "RuleSetName", valid_773772
  var valid_773773 = query.getOrDefault("Action")
  valid_773773 = validateParameter(valid_773773, JString, required = true,
                                 default = newJString("DeleteReceiptRule"))
  if valid_773773 != nil:
    section.add "Action", valid_773773
  var valid_773774 = query.getOrDefault("Version")
  valid_773774 = validateParameter(valid_773774, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773774 != nil:
    section.add "Version", valid_773774
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773775 = header.getOrDefault("X-Amz-Date")
  valid_773775 = validateParameter(valid_773775, JString, required = false,
                                 default = nil)
  if valid_773775 != nil:
    section.add "X-Amz-Date", valid_773775
  var valid_773776 = header.getOrDefault("X-Amz-Security-Token")
  valid_773776 = validateParameter(valid_773776, JString, required = false,
                                 default = nil)
  if valid_773776 != nil:
    section.add "X-Amz-Security-Token", valid_773776
  var valid_773777 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773777 = validateParameter(valid_773777, JString, required = false,
                                 default = nil)
  if valid_773777 != nil:
    section.add "X-Amz-Content-Sha256", valid_773777
  var valid_773778 = header.getOrDefault("X-Amz-Algorithm")
  valid_773778 = validateParameter(valid_773778, JString, required = false,
                                 default = nil)
  if valid_773778 != nil:
    section.add "X-Amz-Algorithm", valid_773778
  var valid_773779 = header.getOrDefault("X-Amz-Signature")
  valid_773779 = validateParameter(valid_773779, JString, required = false,
                                 default = nil)
  if valid_773779 != nil:
    section.add "X-Amz-Signature", valid_773779
  var valid_773780 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773780 = validateParameter(valid_773780, JString, required = false,
                                 default = nil)
  if valid_773780 != nil:
    section.add "X-Amz-SignedHeaders", valid_773780
  var valid_773781 = header.getOrDefault("X-Amz-Credential")
  valid_773781 = validateParameter(valid_773781, JString, required = false,
                                 default = nil)
  if valid_773781 != nil:
    section.add "X-Amz-Credential", valid_773781
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773782: Call_GetDeleteReceiptRule_773768; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_773782.validator(path, query, header, formData, body)
  let scheme = call_773782.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773782.url(scheme.get, call_773782.host, call_773782.base,
                         call_773782.route, valid.getOrDefault("path"))
  result = hook(call_773782, url, valid)

proc call*(call_773783: Call_GetDeleteReceiptRule_773768; RuleName: string;
          RuleSetName: string; Action: string = "DeleteReceiptRule";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteReceiptRule
  ## <p>Deletes the specified receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleName: string (required)
  ##           : The name of the receipt rule to delete.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that contains the receipt rule to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773784 = newJObject()
  add(query_773784, "RuleName", newJString(RuleName))
  add(query_773784, "RuleSetName", newJString(RuleSetName))
  add(query_773784, "Action", newJString(Action))
  add(query_773784, "Version", newJString(Version))
  result = call_773783.call(nil, query_773784, nil, nil, nil)

var getDeleteReceiptRule* = Call_GetDeleteReceiptRule_773768(
    name: "getDeleteReceiptRule", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DeleteReceiptRule",
    validator: validate_GetDeleteReceiptRule_773769, base: "/",
    url: url_GetDeleteReceiptRule_773770, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteReceiptRuleSet_773819 = ref object of OpenApiRestCall_772597
proc url_PostDeleteReceiptRuleSet_773821(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteReceiptRuleSet_773820(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified receipt rule set and all of the receipt rules it contains.</p> <note> <p>The currently active rule set cannot be deleted.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773822 = query.getOrDefault("Action")
  valid_773822 = validateParameter(valid_773822, JString, required = true,
                                 default = newJString("DeleteReceiptRuleSet"))
  if valid_773822 != nil:
    section.add "Action", valid_773822
  var valid_773823 = query.getOrDefault("Version")
  valid_773823 = validateParameter(valid_773823, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773823 != nil:
    section.add "Version", valid_773823
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773824 = header.getOrDefault("X-Amz-Date")
  valid_773824 = validateParameter(valid_773824, JString, required = false,
                                 default = nil)
  if valid_773824 != nil:
    section.add "X-Amz-Date", valid_773824
  var valid_773825 = header.getOrDefault("X-Amz-Security-Token")
  valid_773825 = validateParameter(valid_773825, JString, required = false,
                                 default = nil)
  if valid_773825 != nil:
    section.add "X-Amz-Security-Token", valid_773825
  var valid_773826 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773826 = validateParameter(valid_773826, JString, required = false,
                                 default = nil)
  if valid_773826 != nil:
    section.add "X-Amz-Content-Sha256", valid_773826
  var valid_773827 = header.getOrDefault("X-Amz-Algorithm")
  valid_773827 = validateParameter(valid_773827, JString, required = false,
                                 default = nil)
  if valid_773827 != nil:
    section.add "X-Amz-Algorithm", valid_773827
  var valid_773828 = header.getOrDefault("X-Amz-Signature")
  valid_773828 = validateParameter(valid_773828, JString, required = false,
                                 default = nil)
  if valid_773828 != nil:
    section.add "X-Amz-Signature", valid_773828
  var valid_773829 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773829 = validateParameter(valid_773829, JString, required = false,
                                 default = nil)
  if valid_773829 != nil:
    section.add "X-Amz-SignedHeaders", valid_773829
  var valid_773830 = header.getOrDefault("X-Amz-Credential")
  valid_773830 = validateParameter(valid_773830, JString, required = false,
                                 default = nil)
  if valid_773830 != nil:
    section.add "X-Amz-Credential", valid_773830
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set to delete.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleSetName` field"
  var valid_773831 = formData.getOrDefault("RuleSetName")
  valid_773831 = validateParameter(valid_773831, JString, required = true,
                                 default = nil)
  if valid_773831 != nil:
    section.add "RuleSetName", valid_773831
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773832: Call_PostDeleteReceiptRuleSet_773819; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified receipt rule set and all of the receipt rules it contains.</p> <note> <p>The currently active rule set cannot be deleted.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_773832.validator(path, query, header, formData, body)
  let scheme = call_773832.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773832.url(scheme.get, call_773832.host, call_773832.base,
                         call_773832.route, valid.getOrDefault("path"))
  result = hook(call_773832, url, valid)

proc call*(call_773833: Call_PostDeleteReceiptRuleSet_773819; RuleSetName: string;
          Action: string = "DeleteReceiptRuleSet"; Version: string = "2010-12-01"): Recallable =
  ## postDeleteReceiptRuleSet
  ## <p>Deletes the specified receipt rule set and all of the receipt rules it contains.</p> <note> <p>The currently active rule set cannot be deleted.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773834 = newJObject()
  var formData_773835 = newJObject()
  add(formData_773835, "RuleSetName", newJString(RuleSetName))
  add(query_773834, "Action", newJString(Action))
  add(query_773834, "Version", newJString(Version))
  result = call_773833.call(nil, query_773834, nil, formData_773835, nil)

var postDeleteReceiptRuleSet* = Call_PostDeleteReceiptRuleSet_773819(
    name: "postDeleteReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteReceiptRuleSet",
    validator: validate_PostDeleteReceiptRuleSet_773820, base: "/",
    url: url_PostDeleteReceiptRuleSet_773821, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteReceiptRuleSet_773803 = ref object of OpenApiRestCall_772597
proc url_GetDeleteReceiptRuleSet_773805(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteReceiptRuleSet_773804(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified receipt rule set and all of the receipt rules it contains.</p> <note> <p>The currently active rule set cannot be deleted.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set to delete.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleSetName` field"
  var valid_773806 = query.getOrDefault("RuleSetName")
  valid_773806 = validateParameter(valid_773806, JString, required = true,
                                 default = nil)
  if valid_773806 != nil:
    section.add "RuleSetName", valid_773806
  var valid_773807 = query.getOrDefault("Action")
  valid_773807 = validateParameter(valid_773807, JString, required = true,
                                 default = newJString("DeleteReceiptRuleSet"))
  if valid_773807 != nil:
    section.add "Action", valid_773807
  var valid_773808 = query.getOrDefault("Version")
  valid_773808 = validateParameter(valid_773808, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773808 != nil:
    section.add "Version", valid_773808
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773809 = header.getOrDefault("X-Amz-Date")
  valid_773809 = validateParameter(valid_773809, JString, required = false,
                                 default = nil)
  if valid_773809 != nil:
    section.add "X-Amz-Date", valid_773809
  var valid_773810 = header.getOrDefault("X-Amz-Security-Token")
  valid_773810 = validateParameter(valid_773810, JString, required = false,
                                 default = nil)
  if valid_773810 != nil:
    section.add "X-Amz-Security-Token", valid_773810
  var valid_773811 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773811 = validateParameter(valid_773811, JString, required = false,
                                 default = nil)
  if valid_773811 != nil:
    section.add "X-Amz-Content-Sha256", valid_773811
  var valid_773812 = header.getOrDefault("X-Amz-Algorithm")
  valid_773812 = validateParameter(valid_773812, JString, required = false,
                                 default = nil)
  if valid_773812 != nil:
    section.add "X-Amz-Algorithm", valid_773812
  var valid_773813 = header.getOrDefault("X-Amz-Signature")
  valid_773813 = validateParameter(valid_773813, JString, required = false,
                                 default = nil)
  if valid_773813 != nil:
    section.add "X-Amz-Signature", valid_773813
  var valid_773814 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773814 = validateParameter(valid_773814, JString, required = false,
                                 default = nil)
  if valid_773814 != nil:
    section.add "X-Amz-SignedHeaders", valid_773814
  var valid_773815 = header.getOrDefault("X-Amz-Credential")
  valid_773815 = validateParameter(valid_773815, JString, required = false,
                                 default = nil)
  if valid_773815 != nil:
    section.add "X-Amz-Credential", valid_773815
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773816: Call_GetDeleteReceiptRuleSet_773803; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified receipt rule set and all of the receipt rules it contains.</p> <note> <p>The currently active rule set cannot be deleted.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_773816.validator(path, query, header, formData, body)
  let scheme = call_773816.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773816.url(scheme.get, call_773816.host, call_773816.base,
                         call_773816.route, valid.getOrDefault("path"))
  result = hook(call_773816, url, valid)

proc call*(call_773817: Call_GetDeleteReceiptRuleSet_773803; RuleSetName: string;
          Action: string = "DeleteReceiptRuleSet"; Version: string = "2010-12-01"): Recallable =
  ## getDeleteReceiptRuleSet
  ## <p>Deletes the specified receipt rule set and all of the receipt rules it contains.</p> <note> <p>The currently active rule set cannot be deleted.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773818 = newJObject()
  add(query_773818, "RuleSetName", newJString(RuleSetName))
  add(query_773818, "Action", newJString(Action))
  add(query_773818, "Version", newJString(Version))
  result = call_773817.call(nil, query_773818, nil, nil, nil)

var getDeleteReceiptRuleSet* = Call_GetDeleteReceiptRuleSet_773803(
    name: "getDeleteReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DeleteReceiptRuleSet",
    validator: validate_GetDeleteReceiptRuleSet_773804, base: "/",
    url: url_GetDeleteReceiptRuleSet_773805, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteTemplate_773852 = ref object of OpenApiRestCall_772597
proc url_PostDeleteTemplate_773854(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteTemplate_773853(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Deletes an email template.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773855 = query.getOrDefault("Action")
  valid_773855 = validateParameter(valid_773855, JString, required = true,
                                 default = newJString("DeleteTemplate"))
  if valid_773855 != nil:
    section.add "Action", valid_773855
  var valid_773856 = query.getOrDefault("Version")
  valid_773856 = validateParameter(valid_773856, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773856 != nil:
    section.add "Version", valid_773856
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773857 = header.getOrDefault("X-Amz-Date")
  valid_773857 = validateParameter(valid_773857, JString, required = false,
                                 default = nil)
  if valid_773857 != nil:
    section.add "X-Amz-Date", valid_773857
  var valid_773858 = header.getOrDefault("X-Amz-Security-Token")
  valid_773858 = validateParameter(valid_773858, JString, required = false,
                                 default = nil)
  if valid_773858 != nil:
    section.add "X-Amz-Security-Token", valid_773858
  var valid_773859 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773859 = validateParameter(valid_773859, JString, required = false,
                                 default = nil)
  if valid_773859 != nil:
    section.add "X-Amz-Content-Sha256", valid_773859
  var valid_773860 = header.getOrDefault("X-Amz-Algorithm")
  valid_773860 = validateParameter(valid_773860, JString, required = false,
                                 default = nil)
  if valid_773860 != nil:
    section.add "X-Amz-Algorithm", valid_773860
  var valid_773861 = header.getOrDefault("X-Amz-Signature")
  valid_773861 = validateParameter(valid_773861, JString, required = false,
                                 default = nil)
  if valid_773861 != nil:
    section.add "X-Amz-Signature", valid_773861
  var valid_773862 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773862 = validateParameter(valid_773862, JString, required = false,
                                 default = nil)
  if valid_773862 != nil:
    section.add "X-Amz-SignedHeaders", valid_773862
  var valid_773863 = header.getOrDefault("X-Amz-Credential")
  valid_773863 = validateParameter(valid_773863, JString, required = false,
                                 default = nil)
  if valid_773863 != nil:
    section.add "X-Amz-Credential", valid_773863
  result.add "header", section
  ## parameters in `formData` object:
  ##   TemplateName: JString (required)
  ##               : The name of the template to be deleted.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TemplateName` field"
  var valid_773864 = formData.getOrDefault("TemplateName")
  valid_773864 = validateParameter(valid_773864, JString, required = true,
                                 default = nil)
  if valid_773864 != nil:
    section.add "TemplateName", valid_773864
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773865: Call_PostDeleteTemplate_773852; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an email template.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_773865.validator(path, query, header, formData, body)
  let scheme = call_773865.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773865.url(scheme.get, call_773865.host, call_773865.base,
                         call_773865.route, valid.getOrDefault("path"))
  result = hook(call_773865, url, valid)

proc call*(call_773866: Call_PostDeleteTemplate_773852; TemplateName: string;
          Action: string = "DeleteTemplate"; Version: string = "2010-12-01"): Recallable =
  ## postDeleteTemplate
  ## <p>Deletes an email template.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the template to be deleted.
  ##   Version: string (required)
  var query_773867 = newJObject()
  var formData_773868 = newJObject()
  add(query_773867, "Action", newJString(Action))
  add(formData_773868, "TemplateName", newJString(TemplateName))
  add(query_773867, "Version", newJString(Version))
  result = call_773866.call(nil, query_773867, nil, formData_773868, nil)

var postDeleteTemplate* = Call_PostDeleteTemplate_773852(
    name: "postDeleteTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteTemplate",
    validator: validate_PostDeleteTemplate_773853, base: "/",
    url: url_PostDeleteTemplate_773854, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteTemplate_773836 = ref object of OpenApiRestCall_772597
proc url_GetDeleteTemplate_773838(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteTemplate_773837(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Deletes an email template.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the template to be deleted.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773839 = query.getOrDefault("Action")
  valid_773839 = validateParameter(valid_773839, JString, required = true,
                                 default = newJString("DeleteTemplate"))
  if valid_773839 != nil:
    section.add "Action", valid_773839
  var valid_773840 = query.getOrDefault("TemplateName")
  valid_773840 = validateParameter(valid_773840, JString, required = true,
                                 default = nil)
  if valid_773840 != nil:
    section.add "TemplateName", valid_773840
  var valid_773841 = query.getOrDefault("Version")
  valid_773841 = validateParameter(valid_773841, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773841 != nil:
    section.add "Version", valid_773841
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773842 = header.getOrDefault("X-Amz-Date")
  valid_773842 = validateParameter(valid_773842, JString, required = false,
                                 default = nil)
  if valid_773842 != nil:
    section.add "X-Amz-Date", valid_773842
  var valid_773843 = header.getOrDefault("X-Amz-Security-Token")
  valid_773843 = validateParameter(valid_773843, JString, required = false,
                                 default = nil)
  if valid_773843 != nil:
    section.add "X-Amz-Security-Token", valid_773843
  var valid_773844 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773844 = validateParameter(valid_773844, JString, required = false,
                                 default = nil)
  if valid_773844 != nil:
    section.add "X-Amz-Content-Sha256", valid_773844
  var valid_773845 = header.getOrDefault("X-Amz-Algorithm")
  valid_773845 = validateParameter(valid_773845, JString, required = false,
                                 default = nil)
  if valid_773845 != nil:
    section.add "X-Amz-Algorithm", valid_773845
  var valid_773846 = header.getOrDefault("X-Amz-Signature")
  valid_773846 = validateParameter(valid_773846, JString, required = false,
                                 default = nil)
  if valid_773846 != nil:
    section.add "X-Amz-Signature", valid_773846
  var valid_773847 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773847 = validateParameter(valid_773847, JString, required = false,
                                 default = nil)
  if valid_773847 != nil:
    section.add "X-Amz-SignedHeaders", valid_773847
  var valid_773848 = header.getOrDefault("X-Amz-Credential")
  valid_773848 = validateParameter(valid_773848, JString, required = false,
                                 default = nil)
  if valid_773848 != nil:
    section.add "X-Amz-Credential", valid_773848
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773849: Call_GetDeleteTemplate_773836; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an email template.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_773849.validator(path, query, header, formData, body)
  let scheme = call_773849.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773849.url(scheme.get, call_773849.host, call_773849.base,
                         call_773849.route, valid.getOrDefault("path"))
  result = hook(call_773849, url, valid)

proc call*(call_773850: Call_GetDeleteTemplate_773836; TemplateName: string;
          Action: string = "DeleteTemplate"; Version: string = "2010-12-01"): Recallable =
  ## getDeleteTemplate
  ## <p>Deletes an email template.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the template to be deleted.
  ##   Version: string (required)
  var query_773851 = newJObject()
  add(query_773851, "Action", newJString(Action))
  add(query_773851, "TemplateName", newJString(TemplateName))
  add(query_773851, "Version", newJString(Version))
  result = call_773850.call(nil, query_773851, nil, nil, nil)

var getDeleteTemplate* = Call_GetDeleteTemplate_773836(name: "getDeleteTemplate",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=DeleteTemplate", validator: validate_GetDeleteTemplate_773837,
    base: "/", url: url_GetDeleteTemplate_773838,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteVerifiedEmailAddress_773885 = ref object of OpenApiRestCall_772597
proc url_PostDeleteVerifiedEmailAddress_773887(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteVerifiedEmailAddress_773886(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deprecated. Use the <code>DeleteIdentity</code> operation to delete email addresses and domains.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773888 = query.getOrDefault("Action")
  valid_773888 = validateParameter(valid_773888, JString, required = true, default = newJString(
      "DeleteVerifiedEmailAddress"))
  if valid_773888 != nil:
    section.add "Action", valid_773888
  var valid_773889 = query.getOrDefault("Version")
  valid_773889 = validateParameter(valid_773889, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773889 != nil:
    section.add "Version", valid_773889
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773890 = header.getOrDefault("X-Amz-Date")
  valid_773890 = validateParameter(valid_773890, JString, required = false,
                                 default = nil)
  if valid_773890 != nil:
    section.add "X-Amz-Date", valid_773890
  var valid_773891 = header.getOrDefault("X-Amz-Security-Token")
  valid_773891 = validateParameter(valid_773891, JString, required = false,
                                 default = nil)
  if valid_773891 != nil:
    section.add "X-Amz-Security-Token", valid_773891
  var valid_773892 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773892 = validateParameter(valid_773892, JString, required = false,
                                 default = nil)
  if valid_773892 != nil:
    section.add "X-Amz-Content-Sha256", valid_773892
  var valid_773893 = header.getOrDefault("X-Amz-Algorithm")
  valid_773893 = validateParameter(valid_773893, JString, required = false,
                                 default = nil)
  if valid_773893 != nil:
    section.add "X-Amz-Algorithm", valid_773893
  var valid_773894 = header.getOrDefault("X-Amz-Signature")
  valid_773894 = validateParameter(valid_773894, JString, required = false,
                                 default = nil)
  if valid_773894 != nil:
    section.add "X-Amz-Signature", valid_773894
  var valid_773895 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773895 = validateParameter(valid_773895, JString, required = false,
                                 default = nil)
  if valid_773895 != nil:
    section.add "X-Amz-SignedHeaders", valid_773895
  var valid_773896 = header.getOrDefault("X-Amz-Credential")
  valid_773896 = validateParameter(valid_773896, JString, required = false,
                                 default = nil)
  if valid_773896 != nil:
    section.add "X-Amz-Credential", valid_773896
  result.add "header", section
  ## parameters in `formData` object:
  ##   EmailAddress: JString (required)
  ##               : An email address to be removed from the list of verified addresses.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `EmailAddress` field"
  var valid_773897 = formData.getOrDefault("EmailAddress")
  valid_773897 = validateParameter(valid_773897, JString, required = true,
                                 default = nil)
  if valid_773897 != nil:
    section.add "EmailAddress", valid_773897
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773898: Call_PostDeleteVerifiedEmailAddress_773885; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deprecated. Use the <code>DeleteIdentity</code> operation to delete email addresses and domains.
  ## 
  let valid = call_773898.validator(path, query, header, formData, body)
  let scheme = call_773898.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773898.url(scheme.get, call_773898.host, call_773898.base,
                         call_773898.route, valid.getOrDefault("path"))
  result = hook(call_773898, url, valid)

proc call*(call_773899: Call_PostDeleteVerifiedEmailAddress_773885;
          EmailAddress: string; Action: string = "DeleteVerifiedEmailAddress";
          Version: string = "2010-12-01"): Recallable =
  ## postDeleteVerifiedEmailAddress
  ## Deprecated. Use the <code>DeleteIdentity</code> operation to delete email addresses and domains.
  ##   EmailAddress: string (required)
  ##               : An email address to be removed from the list of verified addresses.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773900 = newJObject()
  var formData_773901 = newJObject()
  add(formData_773901, "EmailAddress", newJString(EmailAddress))
  add(query_773900, "Action", newJString(Action))
  add(query_773900, "Version", newJString(Version))
  result = call_773899.call(nil, query_773900, nil, formData_773901, nil)

var postDeleteVerifiedEmailAddress* = Call_PostDeleteVerifiedEmailAddress_773885(
    name: "postDeleteVerifiedEmailAddress", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DeleteVerifiedEmailAddress",
    validator: validate_PostDeleteVerifiedEmailAddress_773886, base: "/",
    url: url_PostDeleteVerifiedEmailAddress_773887,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteVerifiedEmailAddress_773869 = ref object of OpenApiRestCall_772597
proc url_GetDeleteVerifiedEmailAddress_773871(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteVerifiedEmailAddress_773870(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deprecated. Use the <code>DeleteIdentity</code> operation to delete email addresses and domains.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   EmailAddress: JString (required)
  ##               : An email address to be removed from the list of verified addresses.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773872 = query.getOrDefault("Action")
  valid_773872 = validateParameter(valid_773872, JString, required = true, default = newJString(
      "DeleteVerifiedEmailAddress"))
  if valid_773872 != nil:
    section.add "Action", valid_773872
  var valid_773873 = query.getOrDefault("EmailAddress")
  valid_773873 = validateParameter(valid_773873, JString, required = true,
                                 default = nil)
  if valid_773873 != nil:
    section.add "EmailAddress", valid_773873
  var valid_773874 = query.getOrDefault("Version")
  valid_773874 = validateParameter(valid_773874, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773874 != nil:
    section.add "Version", valid_773874
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773875 = header.getOrDefault("X-Amz-Date")
  valid_773875 = validateParameter(valid_773875, JString, required = false,
                                 default = nil)
  if valid_773875 != nil:
    section.add "X-Amz-Date", valid_773875
  var valid_773876 = header.getOrDefault("X-Amz-Security-Token")
  valid_773876 = validateParameter(valid_773876, JString, required = false,
                                 default = nil)
  if valid_773876 != nil:
    section.add "X-Amz-Security-Token", valid_773876
  var valid_773877 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773877 = validateParameter(valid_773877, JString, required = false,
                                 default = nil)
  if valid_773877 != nil:
    section.add "X-Amz-Content-Sha256", valid_773877
  var valid_773878 = header.getOrDefault("X-Amz-Algorithm")
  valid_773878 = validateParameter(valid_773878, JString, required = false,
                                 default = nil)
  if valid_773878 != nil:
    section.add "X-Amz-Algorithm", valid_773878
  var valid_773879 = header.getOrDefault("X-Amz-Signature")
  valid_773879 = validateParameter(valid_773879, JString, required = false,
                                 default = nil)
  if valid_773879 != nil:
    section.add "X-Amz-Signature", valid_773879
  var valid_773880 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773880 = validateParameter(valid_773880, JString, required = false,
                                 default = nil)
  if valid_773880 != nil:
    section.add "X-Amz-SignedHeaders", valid_773880
  var valid_773881 = header.getOrDefault("X-Amz-Credential")
  valid_773881 = validateParameter(valid_773881, JString, required = false,
                                 default = nil)
  if valid_773881 != nil:
    section.add "X-Amz-Credential", valid_773881
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773882: Call_GetDeleteVerifiedEmailAddress_773869; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deprecated. Use the <code>DeleteIdentity</code> operation to delete email addresses and domains.
  ## 
  let valid = call_773882.validator(path, query, header, formData, body)
  let scheme = call_773882.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773882.url(scheme.get, call_773882.host, call_773882.base,
                         call_773882.route, valid.getOrDefault("path"))
  result = hook(call_773882, url, valid)

proc call*(call_773883: Call_GetDeleteVerifiedEmailAddress_773869;
          EmailAddress: string; Action: string = "DeleteVerifiedEmailAddress";
          Version: string = "2010-12-01"): Recallable =
  ## getDeleteVerifiedEmailAddress
  ## Deprecated. Use the <code>DeleteIdentity</code> operation to delete email addresses and domains.
  ##   Action: string (required)
  ##   EmailAddress: string (required)
  ##               : An email address to be removed from the list of verified addresses.
  ##   Version: string (required)
  var query_773884 = newJObject()
  add(query_773884, "Action", newJString(Action))
  add(query_773884, "EmailAddress", newJString(EmailAddress))
  add(query_773884, "Version", newJString(Version))
  result = call_773883.call(nil, query_773884, nil, nil, nil)

var getDeleteVerifiedEmailAddress* = Call_GetDeleteVerifiedEmailAddress_773869(
    name: "getDeleteVerifiedEmailAddress", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DeleteVerifiedEmailAddress",
    validator: validate_GetDeleteVerifiedEmailAddress_773870, base: "/",
    url: url_GetDeleteVerifiedEmailAddress_773871,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeActiveReceiptRuleSet_773917 = ref object of OpenApiRestCall_772597
proc url_PostDescribeActiveReceiptRuleSet_773919(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeActiveReceiptRuleSet_773918(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the metadata and receipt rules for the receipt rule set that is currently active.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773920 = query.getOrDefault("Action")
  valid_773920 = validateParameter(valid_773920, JString, required = true, default = newJString(
      "DescribeActiveReceiptRuleSet"))
  if valid_773920 != nil:
    section.add "Action", valid_773920
  var valid_773921 = query.getOrDefault("Version")
  valid_773921 = validateParameter(valid_773921, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773921 != nil:
    section.add "Version", valid_773921
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773922 = header.getOrDefault("X-Amz-Date")
  valid_773922 = validateParameter(valid_773922, JString, required = false,
                                 default = nil)
  if valid_773922 != nil:
    section.add "X-Amz-Date", valid_773922
  var valid_773923 = header.getOrDefault("X-Amz-Security-Token")
  valid_773923 = validateParameter(valid_773923, JString, required = false,
                                 default = nil)
  if valid_773923 != nil:
    section.add "X-Amz-Security-Token", valid_773923
  var valid_773924 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773924 = validateParameter(valid_773924, JString, required = false,
                                 default = nil)
  if valid_773924 != nil:
    section.add "X-Amz-Content-Sha256", valid_773924
  var valid_773925 = header.getOrDefault("X-Amz-Algorithm")
  valid_773925 = validateParameter(valid_773925, JString, required = false,
                                 default = nil)
  if valid_773925 != nil:
    section.add "X-Amz-Algorithm", valid_773925
  var valid_773926 = header.getOrDefault("X-Amz-Signature")
  valid_773926 = validateParameter(valid_773926, JString, required = false,
                                 default = nil)
  if valid_773926 != nil:
    section.add "X-Amz-Signature", valid_773926
  var valid_773927 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773927 = validateParameter(valid_773927, JString, required = false,
                                 default = nil)
  if valid_773927 != nil:
    section.add "X-Amz-SignedHeaders", valid_773927
  var valid_773928 = header.getOrDefault("X-Amz-Credential")
  valid_773928 = validateParameter(valid_773928, JString, required = false,
                                 default = nil)
  if valid_773928 != nil:
    section.add "X-Amz-Credential", valid_773928
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773929: Call_PostDescribeActiveReceiptRuleSet_773917;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the metadata and receipt rules for the receipt rule set that is currently active.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_773929.validator(path, query, header, formData, body)
  let scheme = call_773929.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773929.url(scheme.get, call_773929.host, call_773929.base,
                         call_773929.route, valid.getOrDefault("path"))
  result = hook(call_773929, url, valid)

proc call*(call_773930: Call_PostDescribeActiveReceiptRuleSet_773917;
          Action: string = "DescribeActiveReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## postDescribeActiveReceiptRuleSet
  ## <p>Returns the metadata and receipt rules for the receipt rule set that is currently active.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773931 = newJObject()
  add(query_773931, "Action", newJString(Action))
  add(query_773931, "Version", newJString(Version))
  result = call_773930.call(nil, query_773931, nil, nil, nil)

var postDescribeActiveReceiptRuleSet* = Call_PostDescribeActiveReceiptRuleSet_773917(
    name: "postDescribeActiveReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DescribeActiveReceiptRuleSet",
    validator: validate_PostDescribeActiveReceiptRuleSet_773918, base: "/",
    url: url_PostDescribeActiveReceiptRuleSet_773919,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeActiveReceiptRuleSet_773902 = ref object of OpenApiRestCall_772597
proc url_GetDescribeActiveReceiptRuleSet_773904(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeActiveReceiptRuleSet_773903(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the metadata and receipt rules for the receipt rule set that is currently active.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773905 = query.getOrDefault("Action")
  valid_773905 = validateParameter(valid_773905, JString, required = true, default = newJString(
      "DescribeActiveReceiptRuleSet"))
  if valid_773905 != nil:
    section.add "Action", valid_773905
  var valid_773906 = query.getOrDefault("Version")
  valid_773906 = validateParameter(valid_773906, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773906 != nil:
    section.add "Version", valid_773906
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773907 = header.getOrDefault("X-Amz-Date")
  valid_773907 = validateParameter(valid_773907, JString, required = false,
                                 default = nil)
  if valid_773907 != nil:
    section.add "X-Amz-Date", valid_773907
  var valid_773908 = header.getOrDefault("X-Amz-Security-Token")
  valid_773908 = validateParameter(valid_773908, JString, required = false,
                                 default = nil)
  if valid_773908 != nil:
    section.add "X-Amz-Security-Token", valid_773908
  var valid_773909 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773909 = validateParameter(valid_773909, JString, required = false,
                                 default = nil)
  if valid_773909 != nil:
    section.add "X-Amz-Content-Sha256", valid_773909
  var valid_773910 = header.getOrDefault("X-Amz-Algorithm")
  valid_773910 = validateParameter(valid_773910, JString, required = false,
                                 default = nil)
  if valid_773910 != nil:
    section.add "X-Amz-Algorithm", valid_773910
  var valid_773911 = header.getOrDefault("X-Amz-Signature")
  valid_773911 = validateParameter(valid_773911, JString, required = false,
                                 default = nil)
  if valid_773911 != nil:
    section.add "X-Amz-Signature", valid_773911
  var valid_773912 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773912 = validateParameter(valid_773912, JString, required = false,
                                 default = nil)
  if valid_773912 != nil:
    section.add "X-Amz-SignedHeaders", valid_773912
  var valid_773913 = header.getOrDefault("X-Amz-Credential")
  valid_773913 = validateParameter(valid_773913, JString, required = false,
                                 default = nil)
  if valid_773913 != nil:
    section.add "X-Amz-Credential", valid_773913
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773914: Call_GetDescribeActiveReceiptRuleSet_773902;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the metadata and receipt rules for the receipt rule set that is currently active.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_773914.validator(path, query, header, formData, body)
  let scheme = call_773914.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773914.url(scheme.get, call_773914.host, call_773914.base,
                         call_773914.route, valid.getOrDefault("path"))
  result = hook(call_773914, url, valid)

proc call*(call_773915: Call_GetDescribeActiveReceiptRuleSet_773902;
          Action: string = "DescribeActiveReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## getDescribeActiveReceiptRuleSet
  ## <p>Returns the metadata and receipt rules for the receipt rule set that is currently active.</p> <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773916 = newJObject()
  add(query_773916, "Action", newJString(Action))
  add(query_773916, "Version", newJString(Version))
  result = call_773915.call(nil, query_773916, nil, nil, nil)

var getDescribeActiveReceiptRuleSet* = Call_GetDescribeActiveReceiptRuleSet_773902(
    name: "getDescribeActiveReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DescribeActiveReceiptRuleSet",
    validator: validate_GetDescribeActiveReceiptRuleSet_773903, base: "/",
    url: url_GetDescribeActiveReceiptRuleSet_773904,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeConfigurationSet_773949 = ref object of OpenApiRestCall_772597
proc url_PostDescribeConfigurationSet_773951(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeConfigurationSet_773950(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the details of the specified configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773952 = query.getOrDefault("Action")
  valid_773952 = validateParameter(valid_773952, JString, required = true, default = newJString(
      "DescribeConfigurationSet"))
  if valid_773952 != nil:
    section.add "Action", valid_773952
  var valid_773953 = query.getOrDefault("Version")
  valid_773953 = validateParameter(valid_773953, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773953 != nil:
    section.add "Version", valid_773953
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773954 = header.getOrDefault("X-Amz-Date")
  valid_773954 = validateParameter(valid_773954, JString, required = false,
                                 default = nil)
  if valid_773954 != nil:
    section.add "X-Amz-Date", valid_773954
  var valid_773955 = header.getOrDefault("X-Amz-Security-Token")
  valid_773955 = validateParameter(valid_773955, JString, required = false,
                                 default = nil)
  if valid_773955 != nil:
    section.add "X-Amz-Security-Token", valid_773955
  var valid_773956 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773956 = validateParameter(valid_773956, JString, required = false,
                                 default = nil)
  if valid_773956 != nil:
    section.add "X-Amz-Content-Sha256", valid_773956
  var valid_773957 = header.getOrDefault("X-Amz-Algorithm")
  valid_773957 = validateParameter(valid_773957, JString, required = false,
                                 default = nil)
  if valid_773957 != nil:
    section.add "X-Amz-Algorithm", valid_773957
  var valid_773958 = header.getOrDefault("X-Amz-Signature")
  valid_773958 = validateParameter(valid_773958, JString, required = false,
                                 default = nil)
  if valid_773958 != nil:
    section.add "X-Amz-Signature", valid_773958
  var valid_773959 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773959 = validateParameter(valid_773959, JString, required = false,
                                 default = nil)
  if valid_773959 != nil:
    section.add "X-Amz-SignedHeaders", valid_773959
  var valid_773960 = header.getOrDefault("X-Amz-Credential")
  valid_773960 = validateParameter(valid_773960, JString, required = false,
                                 default = nil)
  if valid_773960 != nil:
    section.add "X-Amz-Credential", valid_773960
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetAttributeNames: JArray
  ##                                 : A list of configuration set attributes to return.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set to describe.
  section = newJObject()
  var valid_773961 = formData.getOrDefault("ConfigurationSetAttributeNames")
  valid_773961 = validateParameter(valid_773961, JArray, required = false,
                                 default = nil)
  if valid_773961 != nil:
    section.add "ConfigurationSetAttributeNames", valid_773961
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_773962 = formData.getOrDefault("ConfigurationSetName")
  valid_773962 = validateParameter(valid_773962, JString, required = true,
                                 default = nil)
  if valid_773962 != nil:
    section.add "ConfigurationSetName", valid_773962
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773963: Call_PostDescribeConfigurationSet_773949; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the details of the specified configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_773963.validator(path, query, header, formData, body)
  let scheme = call_773963.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773963.url(scheme.get, call_773963.host, call_773963.base,
                         call_773963.route, valid.getOrDefault("path"))
  result = hook(call_773963, url, valid)

proc call*(call_773964: Call_PostDescribeConfigurationSet_773949;
          ConfigurationSetName: string;
          ConfigurationSetAttributeNames: JsonNode = nil;
          Action: string = "DescribeConfigurationSet";
          Version: string = "2010-12-01"): Recallable =
  ## postDescribeConfigurationSet
  ## <p>Returns the details of the specified configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetAttributeNames: JArray
  ##                                 : A list of configuration set attributes to return.
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set to describe.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773965 = newJObject()
  var formData_773966 = newJObject()
  if ConfigurationSetAttributeNames != nil:
    formData_773966.add "ConfigurationSetAttributeNames",
                       ConfigurationSetAttributeNames
  add(formData_773966, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_773965, "Action", newJString(Action))
  add(query_773965, "Version", newJString(Version))
  result = call_773964.call(nil, query_773965, nil, formData_773966, nil)

var postDescribeConfigurationSet* = Call_PostDescribeConfigurationSet_773949(
    name: "postDescribeConfigurationSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DescribeConfigurationSet",
    validator: validate_PostDescribeConfigurationSet_773950, base: "/",
    url: url_PostDescribeConfigurationSet_773951,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeConfigurationSet_773932 = ref object of OpenApiRestCall_772597
proc url_GetDescribeConfigurationSet_773934(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeConfigurationSet_773933(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the details of the specified configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ConfigurationSetAttributeNames: JArray
  ##                                 : A list of configuration set attributes to return.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set to describe.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773935 = query.getOrDefault("Action")
  valid_773935 = validateParameter(valid_773935, JString, required = true, default = newJString(
      "DescribeConfigurationSet"))
  if valid_773935 != nil:
    section.add "Action", valid_773935
  var valid_773936 = query.getOrDefault("ConfigurationSetAttributeNames")
  valid_773936 = validateParameter(valid_773936, JArray, required = false,
                                 default = nil)
  if valid_773936 != nil:
    section.add "ConfigurationSetAttributeNames", valid_773936
  var valid_773937 = query.getOrDefault("ConfigurationSetName")
  valid_773937 = validateParameter(valid_773937, JString, required = true,
                                 default = nil)
  if valid_773937 != nil:
    section.add "ConfigurationSetName", valid_773937
  var valid_773938 = query.getOrDefault("Version")
  valid_773938 = validateParameter(valid_773938, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773938 != nil:
    section.add "Version", valid_773938
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773939 = header.getOrDefault("X-Amz-Date")
  valid_773939 = validateParameter(valid_773939, JString, required = false,
                                 default = nil)
  if valid_773939 != nil:
    section.add "X-Amz-Date", valid_773939
  var valid_773940 = header.getOrDefault("X-Amz-Security-Token")
  valid_773940 = validateParameter(valid_773940, JString, required = false,
                                 default = nil)
  if valid_773940 != nil:
    section.add "X-Amz-Security-Token", valid_773940
  var valid_773941 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773941 = validateParameter(valid_773941, JString, required = false,
                                 default = nil)
  if valid_773941 != nil:
    section.add "X-Amz-Content-Sha256", valid_773941
  var valid_773942 = header.getOrDefault("X-Amz-Algorithm")
  valid_773942 = validateParameter(valid_773942, JString, required = false,
                                 default = nil)
  if valid_773942 != nil:
    section.add "X-Amz-Algorithm", valid_773942
  var valid_773943 = header.getOrDefault("X-Amz-Signature")
  valid_773943 = validateParameter(valid_773943, JString, required = false,
                                 default = nil)
  if valid_773943 != nil:
    section.add "X-Amz-Signature", valid_773943
  var valid_773944 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773944 = validateParameter(valid_773944, JString, required = false,
                                 default = nil)
  if valid_773944 != nil:
    section.add "X-Amz-SignedHeaders", valid_773944
  var valid_773945 = header.getOrDefault("X-Amz-Credential")
  valid_773945 = validateParameter(valid_773945, JString, required = false,
                                 default = nil)
  if valid_773945 != nil:
    section.add "X-Amz-Credential", valid_773945
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773946: Call_GetDescribeConfigurationSet_773932; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the details of the specified configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_773946.validator(path, query, header, formData, body)
  let scheme = call_773946.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773946.url(scheme.get, call_773946.host, call_773946.base,
                         call_773946.route, valid.getOrDefault("path"))
  result = hook(call_773946, url, valid)

proc call*(call_773947: Call_GetDescribeConfigurationSet_773932;
          ConfigurationSetName: string;
          Action: string = "DescribeConfigurationSet";
          ConfigurationSetAttributeNames: JsonNode = nil;
          Version: string = "2010-12-01"): Recallable =
  ## getDescribeConfigurationSet
  ## <p>Returns the details of the specified configuration set. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   ConfigurationSetAttributeNames: JArray
  ##                                 : A list of configuration set attributes to return.
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set to describe.
  ##   Version: string (required)
  var query_773948 = newJObject()
  add(query_773948, "Action", newJString(Action))
  if ConfigurationSetAttributeNames != nil:
    query_773948.add "ConfigurationSetAttributeNames",
                    ConfigurationSetAttributeNames
  add(query_773948, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_773948, "Version", newJString(Version))
  result = call_773947.call(nil, query_773948, nil, nil, nil)

var getDescribeConfigurationSet* = Call_GetDescribeConfigurationSet_773932(
    name: "getDescribeConfigurationSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DescribeConfigurationSet",
    validator: validate_GetDescribeConfigurationSet_773933, base: "/",
    url: url_GetDescribeConfigurationSet_773934,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReceiptRule_773984 = ref object of OpenApiRestCall_772597
proc url_PostDescribeReceiptRule_773986(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeReceiptRule_773985(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the details of the specified receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773987 = query.getOrDefault("Action")
  valid_773987 = validateParameter(valid_773987, JString, required = true,
                                 default = newJString("DescribeReceiptRule"))
  if valid_773987 != nil:
    section.add "Action", valid_773987
  var valid_773988 = query.getOrDefault("Version")
  valid_773988 = validateParameter(valid_773988, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773988 != nil:
    section.add "Version", valid_773988
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773989 = header.getOrDefault("X-Amz-Date")
  valid_773989 = validateParameter(valid_773989, JString, required = false,
                                 default = nil)
  if valid_773989 != nil:
    section.add "X-Amz-Date", valid_773989
  var valid_773990 = header.getOrDefault("X-Amz-Security-Token")
  valid_773990 = validateParameter(valid_773990, JString, required = false,
                                 default = nil)
  if valid_773990 != nil:
    section.add "X-Amz-Security-Token", valid_773990
  var valid_773991 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773991 = validateParameter(valid_773991, JString, required = false,
                                 default = nil)
  if valid_773991 != nil:
    section.add "X-Amz-Content-Sha256", valid_773991
  var valid_773992 = header.getOrDefault("X-Amz-Algorithm")
  valid_773992 = validateParameter(valid_773992, JString, required = false,
                                 default = nil)
  if valid_773992 != nil:
    section.add "X-Amz-Algorithm", valid_773992
  var valid_773993 = header.getOrDefault("X-Amz-Signature")
  valid_773993 = validateParameter(valid_773993, JString, required = false,
                                 default = nil)
  if valid_773993 != nil:
    section.add "X-Amz-Signature", valid_773993
  var valid_773994 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773994 = validateParameter(valid_773994, JString, required = false,
                                 default = nil)
  if valid_773994 != nil:
    section.add "X-Amz-SignedHeaders", valid_773994
  var valid_773995 = header.getOrDefault("X-Amz-Credential")
  valid_773995 = validateParameter(valid_773995, JString, required = false,
                                 default = nil)
  if valid_773995 != nil:
    section.add "X-Amz-Credential", valid_773995
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleName: JString (required)
  ##           : The name of the receipt rule.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleName` field"
  var valid_773996 = formData.getOrDefault("RuleName")
  valid_773996 = validateParameter(valid_773996, JString, required = true,
                                 default = nil)
  if valid_773996 != nil:
    section.add "RuleName", valid_773996
  var valid_773997 = formData.getOrDefault("RuleSetName")
  valid_773997 = validateParameter(valid_773997, JString, required = true,
                                 default = nil)
  if valid_773997 != nil:
    section.add "RuleSetName", valid_773997
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773998: Call_PostDescribeReceiptRule_773984; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the details of the specified receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_773998.validator(path, query, header, formData, body)
  let scheme = call_773998.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773998.url(scheme.get, call_773998.host, call_773998.base,
                         call_773998.route, valid.getOrDefault("path"))
  result = hook(call_773998, url, valid)

proc call*(call_773999: Call_PostDescribeReceiptRule_773984; RuleName: string;
          RuleSetName: string; Action: string = "DescribeReceiptRule";
          Version: string = "2010-12-01"): Recallable =
  ## postDescribeReceiptRule
  ## <p>Returns the details of the specified receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleName: string (required)
  ##           : The name of the receipt rule.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774000 = newJObject()
  var formData_774001 = newJObject()
  add(formData_774001, "RuleName", newJString(RuleName))
  add(formData_774001, "RuleSetName", newJString(RuleSetName))
  add(query_774000, "Action", newJString(Action))
  add(query_774000, "Version", newJString(Version))
  result = call_773999.call(nil, query_774000, nil, formData_774001, nil)

var postDescribeReceiptRule* = Call_PostDescribeReceiptRule_773984(
    name: "postDescribeReceiptRule", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DescribeReceiptRule",
    validator: validate_PostDescribeReceiptRule_773985, base: "/",
    url: url_PostDescribeReceiptRule_773986, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReceiptRule_773967 = ref object of OpenApiRestCall_772597
proc url_GetDescribeReceiptRule_773969(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeReceiptRule_773968(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the details of the specified receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleName: JString (required)
  ##           : The name of the receipt rule.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleName` field"
  var valid_773970 = query.getOrDefault("RuleName")
  valid_773970 = validateParameter(valid_773970, JString, required = true,
                                 default = nil)
  if valid_773970 != nil:
    section.add "RuleName", valid_773970
  var valid_773971 = query.getOrDefault("RuleSetName")
  valid_773971 = validateParameter(valid_773971, JString, required = true,
                                 default = nil)
  if valid_773971 != nil:
    section.add "RuleSetName", valid_773971
  var valid_773972 = query.getOrDefault("Action")
  valid_773972 = validateParameter(valid_773972, JString, required = true,
                                 default = newJString("DescribeReceiptRule"))
  if valid_773972 != nil:
    section.add "Action", valid_773972
  var valid_773973 = query.getOrDefault("Version")
  valid_773973 = validateParameter(valid_773973, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_773973 != nil:
    section.add "Version", valid_773973
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773974 = header.getOrDefault("X-Amz-Date")
  valid_773974 = validateParameter(valid_773974, JString, required = false,
                                 default = nil)
  if valid_773974 != nil:
    section.add "X-Amz-Date", valid_773974
  var valid_773975 = header.getOrDefault("X-Amz-Security-Token")
  valid_773975 = validateParameter(valid_773975, JString, required = false,
                                 default = nil)
  if valid_773975 != nil:
    section.add "X-Amz-Security-Token", valid_773975
  var valid_773976 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773976 = validateParameter(valid_773976, JString, required = false,
                                 default = nil)
  if valid_773976 != nil:
    section.add "X-Amz-Content-Sha256", valid_773976
  var valid_773977 = header.getOrDefault("X-Amz-Algorithm")
  valid_773977 = validateParameter(valid_773977, JString, required = false,
                                 default = nil)
  if valid_773977 != nil:
    section.add "X-Amz-Algorithm", valid_773977
  var valid_773978 = header.getOrDefault("X-Amz-Signature")
  valid_773978 = validateParameter(valid_773978, JString, required = false,
                                 default = nil)
  if valid_773978 != nil:
    section.add "X-Amz-Signature", valid_773978
  var valid_773979 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773979 = validateParameter(valid_773979, JString, required = false,
                                 default = nil)
  if valid_773979 != nil:
    section.add "X-Amz-SignedHeaders", valid_773979
  var valid_773980 = header.getOrDefault("X-Amz-Credential")
  valid_773980 = validateParameter(valid_773980, JString, required = false,
                                 default = nil)
  if valid_773980 != nil:
    section.add "X-Amz-Credential", valid_773980
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773981: Call_GetDescribeReceiptRule_773967; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the details of the specified receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_773981.validator(path, query, header, formData, body)
  let scheme = call_773981.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773981.url(scheme.get, call_773981.host, call_773981.base,
                         call_773981.route, valid.getOrDefault("path"))
  result = hook(call_773981, url, valid)

proc call*(call_773982: Call_GetDescribeReceiptRule_773967; RuleName: string;
          RuleSetName: string; Action: string = "DescribeReceiptRule";
          Version: string = "2010-12-01"): Recallable =
  ## getDescribeReceiptRule
  ## <p>Returns the details of the specified receipt rule.</p> <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleName: string (required)
  ##           : The name of the receipt rule.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773983 = newJObject()
  add(query_773983, "RuleName", newJString(RuleName))
  add(query_773983, "RuleSetName", newJString(RuleSetName))
  add(query_773983, "Action", newJString(Action))
  add(query_773983, "Version", newJString(Version))
  result = call_773982.call(nil, query_773983, nil, nil, nil)

var getDescribeReceiptRule* = Call_GetDescribeReceiptRule_773967(
    name: "getDescribeReceiptRule", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DescribeReceiptRule",
    validator: validate_GetDescribeReceiptRule_773968, base: "/",
    url: url_GetDescribeReceiptRule_773969, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReceiptRuleSet_774018 = ref object of OpenApiRestCall_772597
proc url_PostDescribeReceiptRuleSet_774020(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeReceiptRuleSet_774019(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the details of the specified receipt rule set.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774021 = query.getOrDefault("Action")
  valid_774021 = validateParameter(valid_774021, JString, required = true,
                                 default = newJString("DescribeReceiptRuleSet"))
  if valid_774021 != nil:
    section.add "Action", valid_774021
  var valid_774022 = query.getOrDefault("Version")
  valid_774022 = validateParameter(valid_774022, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774022 != nil:
    section.add "Version", valid_774022
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774023 = header.getOrDefault("X-Amz-Date")
  valid_774023 = validateParameter(valid_774023, JString, required = false,
                                 default = nil)
  if valid_774023 != nil:
    section.add "X-Amz-Date", valid_774023
  var valid_774024 = header.getOrDefault("X-Amz-Security-Token")
  valid_774024 = validateParameter(valid_774024, JString, required = false,
                                 default = nil)
  if valid_774024 != nil:
    section.add "X-Amz-Security-Token", valid_774024
  var valid_774025 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774025 = validateParameter(valid_774025, JString, required = false,
                                 default = nil)
  if valid_774025 != nil:
    section.add "X-Amz-Content-Sha256", valid_774025
  var valid_774026 = header.getOrDefault("X-Amz-Algorithm")
  valid_774026 = validateParameter(valid_774026, JString, required = false,
                                 default = nil)
  if valid_774026 != nil:
    section.add "X-Amz-Algorithm", valid_774026
  var valid_774027 = header.getOrDefault("X-Amz-Signature")
  valid_774027 = validateParameter(valid_774027, JString, required = false,
                                 default = nil)
  if valid_774027 != nil:
    section.add "X-Amz-Signature", valid_774027
  var valid_774028 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774028 = validateParameter(valid_774028, JString, required = false,
                                 default = nil)
  if valid_774028 != nil:
    section.add "X-Amz-SignedHeaders", valid_774028
  var valid_774029 = header.getOrDefault("X-Amz-Credential")
  valid_774029 = validateParameter(valid_774029, JString, required = false,
                                 default = nil)
  if valid_774029 != nil:
    section.add "X-Amz-Credential", valid_774029
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set to describe.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleSetName` field"
  var valid_774030 = formData.getOrDefault("RuleSetName")
  valid_774030 = validateParameter(valid_774030, JString, required = true,
                                 default = nil)
  if valid_774030 != nil:
    section.add "RuleSetName", valid_774030
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774031: Call_PostDescribeReceiptRuleSet_774018; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the details of the specified receipt rule set.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_774031.validator(path, query, header, formData, body)
  let scheme = call_774031.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774031.url(scheme.get, call_774031.host, call_774031.base,
                         call_774031.route, valid.getOrDefault("path"))
  result = hook(call_774031, url, valid)

proc call*(call_774032: Call_PostDescribeReceiptRuleSet_774018;
          RuleSetName: string; Action: string = "DescribeReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## postDescribeReceiptRuleSet
  ## <p>Returns the details of the specified receipt rule set.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set to describe.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774033 = newJObject()
  var formData_774034 = newJObject()
  add(formData_774034, "RuleSetName", newJString(RuleSetName))
  add(query_774033, "Action", newJString(Action))
  add(query_774033, "Version", newJString(Version))
  result = call_774032.call(nil, query_774033, nil, formData_774034, nil)

var postDescribeReceiptRuleSet* = Call_PostDescribeReceiptRuleSet_774018(
    name: "postDescribeReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=DescribeReceiptRuleSet",
    validator: validate_PostDescribeReceiptRuleSet_774019, base: "/",
    url: url_PostDescribeReceiptRuleSet_774020,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReceiptRuleSet_774002 = ref object of OpenApiRestCall_772597
proc url_GetDescribeReceiptRuleSet_774004(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeReceiptRuleSet_774003(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the details of the specified receipt rule set.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set to describe.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleSetName` field"
  var valid_774005 = query.getOrDefault("RuleSetName")
  valid_774005 = validateParameter(valid_774005, JString, required = true,
                                 default = nil)
  if valid_774005 != nil:
    section.add "RuleSetName", valid_774005
  var valid_774006 = query.getOrDefault("Action")
  valid_774006 = validateParameter(valid_774006, JString, required = true,
                                 default = newJString("DescribeReceiptRuleSet"))
  if valid_774006 != nil:
    section.add "Action", valid_774006
  var valid_774007 = query.getOrDefault("Version")
  valid_774007 = validateParameter(valid_774007, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774007 != nil:
    section.add "Version", valid_774007
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774008 = header.getOrDefault("X-Amz-Date")
  valid_774008 = validateParameter(valid_774008, JString, required = false,
                                 default = nil)
  if valid_774008 != nil:
    section.add "X-Amz-Date", valid_774008
  var valid_774009 = header.getOrDefault("X-Amz-Security-Token")
  valid_774009 = validateParameter(valid_774009, JString, required = false,
                                 default = nil)
  if valid_774009 != nil:
    section.add "X-Amz-Security-Token", valid_774009
  var valid_774010 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774010 = validateParameter(valid_774010, JString, required = false,
                                 default = nil)
  if valid_774010 != nil:
    section.add "X-Amz-Content-Sha256", valid_774010
  var valid_774011 = header.getOrDefault("X-Amz-Algorithm")
  valid_774011 = validateParameter(valid_774011, JString, required = false,
                                 default = nil)
  if valid_774011 != nil:
    section.add "X-Amz-Algorithm", valid_774011
  var valid_774012 = header.getOrDefault("X-Amz-Signature")
  valid_774012 = validateParameter(valid_774012, JString, required = false,
                                 default = nil)
  if valid_774012 != nil:
    section.add "X-Amz-Signature", valid_774012
  var valid_774013 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774013 = validateParameter(valid_774013, JString, required = false,
                                 default = nil)
  if valid_774013 != nil:
    section.add "X-Amz-SignedHeaders", valid_774013
  var valid_774014 = header.getOrDefault("X-Amz-Credential")
  valid_774014 = validateParameter(valid_774014, JString, required = false,
                                 default = nil)
  if valid_774014 != nil:
    section.add "X-Amz-Credential", valid_774014
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774015: Call_GetDescribeReceiptRuleSet_774002; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the details of the specified receipt rule set.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_774015.validator(path, query, header, formData, body)
  let scheme = call_774015.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774015.url(scheme.get, call_774015.host, call_774015.base,
                         call_774015.route, valid.getOrDefault("path"))
  result = hook(call_774015, url, valid)

proc call*(call_774016: Call_GetDescribeReceiptRuleSet_774002; RuleSetName: string;
          Action: string = "DescribeReceiptRuleSet"; Version: string = "2010-12-01"): Recallable =
  ## getDescribeReceiptRuleSet
  ## <p>Returns the details of the specified receipt rule set.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set to describe.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774017 = newJObject()
  add(query_774017, "RuleSetName", newJString(RuleSetName))
  add(query_774017, "Action", newJString(Action))
  add(query_774017, "Version", newJString(Version))
  result = call_774016.call(nil, query_774017, nil, nil, nil)

var getDescribeReceiptRuleSet* = Call_GetDescribeReceiptRuleSet_774002(
    name: "getDescribeReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=DescribeReceiptRuleSet",
    validator: validate_GetDescribeReceiptRuleSet_774003, base: "/",
    url: url_GetDescribeReceiptRuleSet_774004,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetAccountSendingEnabled_774050 = ref object of OpenApiRestCall_772597
proc url_PostGetAccountSendingEnabled_774052(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetAccountSendingEnabled_774051(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the email sending status of the Amazon SES account for the current region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774053 = query.getOrDefault("Action")
  valid_774053 = validateParameter(valid_774053, JString, required = true, default = newJString(
      "GetAccountSendingEnabled"))
  if valid_774053 != nil:
    section.add "Action", valid_774053
  var valid_774054 = query.getOrDefault("Version")
  valid_774054 = validateParameter(valid_774054, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774054 != nil:
    section.add "Version", valid_774054
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774055 = header.getOrDefault("X-Amz-Date")
  valid_774055 = validateParameter(valid_774055, JString, required = false,
                                 default = nil)
  if valid_774055 != nil:
    section.add "X-Amz-Date", valid_774055
  var valid_774056 = header.getOrDefault("X-Amz-Security-Token")
  valid_774056 = validateParameter(valid_774056, JString, required = false,
                                 default = nil)
  if valid_774056 != nil:
    section.add "X-Amz-Security-Token", valid_774056
  var valid_774057 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774057 = validateParameter(valid_774057, JString, required = false,
                                 default = nil)
  if valid_774057 != nil:
    section.add "X-Amz-Content-Sha256", valid_774057
  var valid_774058 = header.getOrDefault("X-Amz-Algorithm")
  valid_774058 = validateParameter(valid_774058, JString, required = false,
                                 default = nil)
  if valid_774058 != nil:
    section.add "X-Amz-Algorithm", valid_774058
  var valid_774059 = header.getOrDefault("X-Amz-Signature")
  valid_774059 = validateParameter(valid_774059, JString, required = false,
                                 default = nil)
  if valid_774059 != nil:
    section.add "X-Amz-Signature", valid_774059
  var valid_774060 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774060 = validateParameter(valid_774060, JString, required = false,
                                 default = nil)
  if valid_774060 != nil:
    section.add "X-Amz-SignedHeaders", valid_774060
  var valid_774061 = header.getOrDefault("X-Amz-Credential")
  valid_774061 = validateParameter(valid_774061, JString, required = false,
                                 default = nil)
  if valid_774061 != nil:
    section.add "X-Amz-Credential", valid_774061
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774062: Call_PostGetAccountSendingEnabled_774050; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the email sending status of the Amazon SES account for the current region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_774062.validator(path, query, header, formData, body)
  let scheme = call_774062.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774062.url(scheme.get, call_774062.host, call_774062.base,
                         call_774062.route, valid.getOrDefault("path"))
  result = hook(call_774062, url, valid)

proc call*(call_774063: Call_PostGetAccountSendingEnabled_774050;
          Action: string = "GetAccountSendingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## postGetAccountSendingEnabled
  ## <p>Returns the email sending status of the Amazon SES account for the current region.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774064 = newJObject()
  add(query_774064, "Action", newJString(Action))
  add(query_774064, "Version", newJString(Version))
  result = call_774063.call(nil, query_774064, nil, nil, nil)

var postGetAccountSendingEnabled* = Call_PostGetAccountSendingEnabled_774050(
    name: "postGetAccountSendingEnabled", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=GetAccountSendingEnabled",
    validator: validate_PostGetAccountSendingEnabled_774051, base: "/",
    url: url_PostGetAccountSendingEnabled_774052,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetAccountSendingEnabled_774035 = ref object of OpenApiRestCall_772597
proc url_GetGetAccountSendingEnabled_774037(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetAccountSendingEnabled_774036(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the email sending status of the Amazon SES account for the current region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774038 = query.getOrDefault("Action")
  valid_774038 = validateParameter(valid_774038, JString, required = true, default = newJString(
      "GetAccountSendingEnabled"))
  if valid_774038 != nil:
    section.add "Action", valid_774038
  var valid_774039 = query.getOrDefault("Version")
  valid_774039 = validateParameter(valid_774039, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774039 != nil:
    section.add "Version", valid_774039
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774040 = header.getOrDefault("X-Amz-Date")
  valid_774040 = validateParameter(valid_774040, JString, required = false,
                                 default = nil)
  if valid_774040 != nil:
    section.add "X-Amz-Date", valid_774040
  var valid_774041 = header.getOrDefault("X-Amz-Security-Token")
  valid_774041 = validateParameter(valid_774041, JString, required = false,
                                 default = nil)
  if valid_774041 != nil:
    section.add "X-Amz-Security-Token", valid_774041
  var valid_774042 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774042 = validateParameter(valid_774042, JString, required = false,
                                 default = nil)
  if valid_774042 != nil:
    section.add "X-Amz-Content-Sha256", valid_774042
  var valid_774043 = header.getOrDefault("X-Amz-Algorithm")
  valid_774043 = validateParameter(valid_774043, JString, required = false,
                                 default = nil)
  if valid_774043 != nil:
    section.add "X-Amz-Algorithm", valid_774043
  var valid_774044 = header.getOrDefault("X-Amz-Signature")
  valid_774044 = validateParameter(valid_774044, JString, required = false,
                                 default = nil)
  if valid_774044 != nil:
    section.add "X-Amz-Signature", valid_774044
  var valid_774045 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774045 = validateParameter(valid_774045, JString, required = false,
                                 default = nil)
  if valid_774045 != nil:
    section.add "X-Amz-SignedHeaders", valid_774045
  var valid_774046 = header.getOrDefault("X-Amz-Credential")
  valid_774046 = validateParameter(valid_774046, JString, required = false,
                                 default = nil)
  if valid_774046 != nil:
    section.add "X-Amz-Credential", valid_774046
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774047: Call_GetGetAccountSendingEnabled_774035; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the email sending status of the Amazon SES account for the current region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_774047.validator(path, query, header, formData, body)
  let scheme = call_774047.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774047.url(scheme.get, call_774047.host, call_774047.base,
                         call_774047.route, valid.getOrDefault("path"))
  result = hook(call_774047, url, valid)

proc call*(call_774048: Call_GetGetAccountSendingEnabled_774035;
          Action: string = "GetAccountSendingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## getGetAccountSendingEnabled
  ## <p>Returns the email sending status of the Amazon SES account for the current region.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774049 = newJObject()
  add(query_774049, "Action", newJString(Action))
  add(query_774049, "Version", newJString(Version))
  result = call_774048.call(nil, query_774049, nil, nil, nil)

var getGetAccountSendingEnabled* = Call_GetGetAccountSendingEnabled_774035(
    name: "getGetAccountSendingEnabled", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=GetAccountSendingEnabled",
    validator: validate_GetGetAccountSendingEnabled_774036, base: "/",
    url: url_GetGetAccountSendingEnabled_774037,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetCustomVerificationEmailTemplate_774081 = ref object of OpenApiRestCall_772597
proc url_PostGetCustomVerificationEmailTemplate_774083(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetCustomVerificationEmailTemplate_774082(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the custom email verification template for the template name you specify.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774084 = query.getOrDefault("Action")
  valid_774084 = validateParameter(valid_774084, JString, required = true, default = newJString(
      "GetCustomVerificationEmailTemplate"))
  if valid_774084 != nil:
    section.add "Action", valid_774084
  var valid_774085 = query.getOrDefault("Version")
  valid_774085 = validateParameter(valid_774085, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774085 != nil:
    section.add "Version", valid_774085
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774086 = header.getOrDefault("X-Amz-Date")
  valid_774086 = validateParameter(valid_774086, JString, required = false,
                                 default = nil)
  if valid_774086 != nil:
    section.add "X-Amz-Date", valid_774086
  var valid_774087 = header.getOrDefault("X-Amz-Security-Token")
  valid_774087 = validateParameter(valid_774087, JString, required = false,
                                 default = nil)
  if valid_774087 != nil:
    section.add "X-Amz-Security-Token", valid_774087
  var valid_774088 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774088 = validateParameter(valid_774088, JString, required = false,
                                 default = nil)
  if valid_774088 != nil:
    section.add "X-Amz-Content-Sha256", valid_774088
  var valid_774089 = header.getOrDefault("X-Amz-Algorithm")
  valid_774089 = validateParameter(valid_774089, JString, required = false,
                                 default = nil)
  if valid_774089 != nil:
    section.add "X-Amz-Algorithm", valid_774089
  var valid_774090 = header.getOrDefault("X-Amz-Signature")
  valid_774090 = validateParameter(valid_774090, JString, required = false,
                                 default = nil)
  if valid_774090 != nil:
    section.add "X-Amz-Signature", valid_774090
  var valid_774091 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774091 = validateParameter(valid_774091, JString, required = false,
                                 default = nil)
  if valid_774091 != nil:
    section.add "X-Amz-SignedHeaders", valid_774091
  var valid_774092 = header.getOrDefault("X-Amz-Credential")
  valid_774092 = validateParameter(valid_774092, JString, required = false,
                                 default = nil)
  if valid_774092 != nil:
    section.add "X-Amz-Credential", valid_774092
  result.add "header", section
  ## parameters in `formData` object:
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template that you want to retrieve.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TemplateName` field"
  var valid_774093 = formData.getOrDefault("TemplateName")
  valid_774093 = validateParameter(valid_774093, JString, required = true,
                                 default = nil)
  if valid_774093 != nil:
    section.add "TemplateName", valid_774093
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774094: Call_PostGetCustomVerificationEmailTemplate_774081;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the custom email verification template for the template name you specify.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_774094.validator(path, query, header, formData, body)
  let scheme = call_774094.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774094.url(scheme.get, call_774094.host, call_774094.base,
                         call_774094.route, valid.getOrDefault("path"))
  result = hook(call_774094, url, valid)

proc call*(call_774095: Call_PostGetCustomVerificationEmailTemplate_774081;
          TemplateName: string;
          Action: string = "GetCustomVerificationEmailTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## postGetCustomVerificationEmailTemplate
  ## <p>Returns the custom email verification template for the template name you specify.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template that you want to retrieve.
  ##   Version: string (required)
  var query_774096 = newJObject()
  var formData_774097 = newJObject()
  add(query_774096, "Action", newJString(Action))
  add(formData_774097, "TemplateName", newJString(TemplateName))
  add(query_774096, "Version", newJString(Version))
  result = call_774095.call(nil, query_774096, nil, formData_774097, nil)

var postGetCustomVerificationEmailTemplate* = Call_PostGetCustomVerificationEmailTemplate_774081(
    name: "postGetCustomVerificationEmailTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=GetCustomVerificationEmailTemplate",
    validator: validate_PostGetCustomVerificationEmailTemplate_774082, base: "/",
    url: url_PostGetCustomVerificationEmailTemplate_774083,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetCustomVerificationEmailTemplate_774065 = ref object of OpenApiRestCall_772597
proc url_GetGetCustomVerificationEmailTemplate_774067(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetCustomVerificationEmailTemplate_774066(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the custom email verification template for the template name you specify.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template that you want to retrieve.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774068 = query.getOrDefault("Action")
  valid_774068 = validateParameter(valid_774068, JString, required = true, default = newJString(
      "GetCustomVerificationEmailTemplate"))
  if valid_774068 != nil:
    section.add "Action", valid_774068
  var valid_774069 = query.getOrDefault("TemplateName")
  valid_774069 = validateParameter(valid_774069, JString, required = true,
                                 default = nil)
  if valid_774069 != nil:
    section.add "TemplateName", valid_774069
  var valid_774070 = query.getOrDefault("Version")
  valid_774070 = validateParameter(valid_774070, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774070 != nil:
    section.add "Version", valid_774070
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774071 = header.getOrDefault("X-Amz-Date")
  valid_774071 = validateParameter(valid_774071, JString, required = false,
                                 default = nil)
  if valid_774071 != nil:
    section.add "X-Amz-Date", valid_774071
  var valid_774072 = header.getOrDefault("X-Amz-Security-Token")
  valid_774072 = validateParameter(valid_774072, JString, required = false,
                                 default = nil)
  if valid_774072 != nil:
    section.add "X-Amz-Security-Token", valid_774072
  var valid_774073 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774073 = validateParameter(valid_774073, JString, required = false,
                                 default = nil)
  if valid_774073 != nil:
    section.add "X-Amz-Content-Sha256", valid_774073
  var valid_774074 = header.getOrDefault("X-Amz-Algorithm")
  valid_774074 = validateParameter(valid_774074, JString, required = false,
                                 default = nil)
  if valid_774074 != nil:
    section.add "X-Amz-Algorithm", valid_774074
  var valid_774075 = header.getOrDefault("X-Amz-Signature")
  valid_774075 = validateParameter(valid_774075, JString, required = false,
                                 default = nil)
  if valid_774075 != nil:
    section.add "X-Amz-Signature", valid_774075
  var valid_774076 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774076 = validateParameter(valid_774076, JString, required = false,
                                 default = nil)
  if valid_774076 != nil:
    section.add "X-Amz-SignedHeaders", valid_774076
  var valid_774077 = header.getOrDefault("X-Amz-Credential")
  valid_774077 = validateParameter(valid_774077, JString, required = false,
                                 default = nil)
  if valid_774077 != nil:
    section.add "X-Amz-Credential", valid_774077
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774078: Call_GetGetCustomVerificationEmailTemplate_774065;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the custom email verification template for the template name you specify.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_774078.validator(path, query, header, formData, body)
  let scheme = call_774078.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774078.url(scheme.get, call_774078.host, call_774078.base,
                         call_774078.route, valid.getOrDefault("path"))
  result = hook(call_774078, url, valid)

proc call*(call_774079: Call_GetGetCustomVerificationEmailTemplate_774065;
          TemplateName: string;
          Action: string = "GetCustomVerificationEmailTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## getGetCustomVerificationEmailTemplate
  ## <p>Returns the custom email verification template for the template name you specify.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template that you want to retrieve.
  ##   Version: string (required)
  var query_774080 = newJObject()
  add(query_774080, "Action", newJString(Action))
  add(query_774080, "TemplateName", newJString(TemplateName))
  add(query_774080, "Version", newJString(Version))
  result = call_774079.call(nil, query_774080, nil, nil, nil)

var getGetCustomVerificationEmailTemplate* = Call_GetGetCustomVerificationEmailTemplate_774065(
    name: "getGetCustomVerificationEmailTemplate", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=GetCustomVerificationEmailTemplate",
    validator: validate_GetGetCustomVerificationEmailTemplate_774066, base: "/",
    url: url_GetGetCustomVerificationEmailTemplate_774067,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetIdentityDkimAttributes_774114 = ref object of OpenApiRestCall_772597
proc url_PostGetIdentityDkimAttributes_774116(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetIdentityDkimAttributes_774115(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the current status of Easy DKIM signing for an entity. For domain name identities, this operation also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES has successfully verified that these tokens have been published.</p> <p>This operation takes a list of identities as input and returns the following information for each:</p> <ul> <li> <p>Whether Easy DKIM signing is enabled or disabled.</p> </li> <li> <p>A set of DKIM tokens that represent the identity. If the identity is an email address, the tokens represent the domain of that address.</p> </li> <li> <p>Whether Amazon SES has successfully verified the DKIM tokens published in the domain's DNS. This information is only returned for domain name identities, not for email addresses.</p> </li> </ul> <p>This operation is throttled at one request per second and can only get DKIM attributes for up to 100 identities at a time.</p> <p>For more information about creating DNS records using DKIM tokens, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774117 = query.getOrDefault("Action")
  valid_774117 = validateParameter(valid_774117, JString, required = true, default = newJString(
      "GetIdentityDkimAttributes"))
  if valid_774117 != nil:
    section.add "Action", valid_774117
  var valid_774118 = query.getOrDefault("Version")
  valid_774118 = validateParameter(valid_774118, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774118 != nil:
    section.add "Version", valid_774118
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774119 = header.getOrDefault("X-Amz-Date")
  valid_774119 = validateParameter(valid_774119, JString, required = false,
                                 default = nil)
  if valid_774119 != nil:
    section.add "X-Amz-Date", valid_774119
  var valid_774120 = header.getOrDefault("X-Amz-Security-Token")
  valid_774120 = validateParameter(valid_774120, JString, required = false,
                                 default = nil)
  if valid_774120 != nil:
    section.add "X-Amz-Security-Token", valid_774120
  var valid_774121 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774121 = validateParameter(valid_774121, JString, required = false,
                                 default = nil)
  if valid_774121 != nil:
    section.add "X-Amz-Content-Sha256", valid_774121
  var valid_774122 = header.getOrDefault("X-Amz-Algorithm")
  valid_774122 = validateParameter(valid_774122, JString, required = false,
                                 default = nil)
  if valid_774122 != nil:
    section.add "X-Amz-Algorithm", valid_774122
  var valid_774123 = header.getOrDefault("X-Amz-Signature")
  valid_774123 = validateParameter(valid_774123, JString, required = false,
                                 default = nil)
  if valid_774123 != nil:
    section.add "X-Amz-Signature", valid_774123
  var valid_774124 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774124 = validateParameter(valid_774124, JString, required = false,
                                 default = nil)
  if valid_774124 != nil:
    section.add "X-Amz-SignedHeaders", valid_774124
  var valid_774125 = header.getOrDefault("X-Amz-Credential")
  valid_774125 = validateParameter(valid_774125, JString, required = false,
                                 default = nil)
  if valid_774125 != nil:
    section.add "X-Amz-Credential", valid_774125
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identities: JArray (required)
  ##             : A list of one or more verified identities - email addresses, domains, or both.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identities` field"
  var valid_774126 = formData.getOrDefault("Identities")
  valid_774126 = validateParameter(valid_774126, JArray, required = true, default = nil)
  if valid_774126 != nil:
    section.add "Identities", valid_774126
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774127: Call_PostGetIdentityDkimAttributes_774114; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the current status of Easy DKIM signing for an entity. For domain name identities, this operation also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES has successfully verified that these tokens have been published.</p> <p>This operation takes a list of identities as input and returns the following information for each:</p> <ul> <li> <p>Whether Easy DKIM signing is enabled or disabled.</p> </li> <li> <p>A set of DKIM tokens that represent the identity. If the identity is an email address, the tokens represent the domain of that address.</p> </li> <li> <p>Whether Amazon SES has successfully verified the DKIM tokens published in the domain's DNS. This information is only returned for domain name identities, not for email addresses.</p> </li> </ul> <p>This operation is throttled at one request per second and can only get DKIM attributes for up to 100 identities at a time.</p> <p>For more information about creating DNS records using DKIM tokens, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_774127.validator(path, query, header, formData, body)
  let scheme = call_774127.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774127.url(scheme.get, call_774127.host, call_774127.base,
                         call_774127.route, valid.getOrDefault("path"))
  result = hook(call_774127, url, valid)

proc call*(call_774128: Call_PostGetIdentityDkimAttributes_774114;
          Identities: JsonNode; Action: string = "GetIdentityDkimAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## postGetIdentityDkimAttributes
  ## <p>Returns the current status of Easy DKIM signing for an entity. For domain name identities, this operation also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES has successfully verified that these tokens have been published.</p> <p>This operation takes a list of identities as input and returns the following information for each:</p> <ul> <li> <p>Whether Easy DKIM signing is enabled or disabled.</p> </li> <li> <p>A set of DKIM tokens that represent the identity. If the identity is an email address, the tokens represent the domain of that address.</p> </li> <li> <p>Whether Amazon SES has successfully verified the DKIM tokens published in the domain's DNS. This information is only returned for domain name identities, not for email addresses.</p> </li> </ul> <p>This operation is throttled at one request per second and can only get DKIM attributes for up to 100 identities at a time.</p> <p>For more information about creating DNS records using DKIM tokens, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html">Amazon SES Developer Guide</a>.</p>
  ##   Identities: JArray (required)
  ##             : A list of one or more verified identities - email addresses, domains, or both.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774129 = newJObject()
  var formData_774130 = newJObject()
  if Identities != nil:
    formData_774130.add "Identities", Identities
  add(query_774129, "Action", newJString(Action))
  add(query_774129, "Version", newJString(Version))
  result = call_774128.call(nil, query_774129, nil, formData_774130, nil)

var postGetIdentityDkimAttributes* = Call_PostGetIdentityDkimAttributes_774114(
    name: "postGetIdentityDkimAttributes", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=GetIdentityDkimAttributes",
    validator: validate_PostGetIdentityDkimAttributes_774115, base: "/",
    url: url_PostGetIdentityDkimAttributes_774116,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetIdentityDkimAttributes_774098 = ref object of OpenApiRestCall_772597
proc url_GetGetIdentityDkimAttributes_774100(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetIdentityDkimAttributes_774099(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the current status of Easy DKIM signing for an entity. For domain name identities, this operation also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES has successfully verified that these tokens have been published.</p> <p>This operation takes a list of identities as input and returns the following information for each:</p> <ul> <li> <p>Whether Easy DKIM signing is enabled or disabled.</p> </li> <li> <p>A set of DKIM tokens that represent the identity. If the identity is an email address, the tokens represent the domain of that address.</p> </li> <li> <p>Whether Amazon SES has successfully verified the DKIM tokens published in the domain's DNS. This information is only returned for domain name identities, not for email addresses.</p> </li> </ul> <p>This operation is throttled at one request per second and can only get DKIM attributes for up to 100 identities at a time.</p> <p>For more information about creating DNS records using DKIM tokens, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identities: JArray (required)
  ##             : A list of one or more verified identities - email addresses, domains, or both.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identities` field"
  var valid_774101 = query.getOrDefault("Identities")
  valid_774101 = validateParameter(valid_774101, JArray, required = true, default = nil)
  if valid_774101 != nil:
    section.add "Identities", valid_774101
  var valid_774102 = query.getOrDefault("Action")
  valid_774102 = validateParameter(valid_774102, JString, required = true, default = newJString(
      "GetIdentityDkimAttributes"))
  if valid_774102 != nil:
    section.add "Action", valid_774102
  var valid_774103 = query.getOrDefault("Version")
  valid_774103 = validateParameter(valid_774103, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774103 != nil:
    section.add "Version", valid_774103
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774104 = header.getOrDefault("X-Amz-Date")
  valid_774104 = validateParameter(valid_774104, JString, required = false,
                                 default = nil)
  if valid_774104 != nil:
    section.add "X-Amz-Date", valid_774104
  var valid_774105 = header.getOrDefault("X-Amz-Security-Token")
  valid_774105 = validateParameter(valid_774105, JString, required = false,
                                 default = nil)
  if valid_774105 != nil:
    section.add "X-Amz-Security-Token", valid_774105
  var valid_774106 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774106 = validateParameter(valid_774106, JString, required = false,
                                 default = nil)
  if valid_774106 != nil:
    section.add "X-Amz-Content-Sha256", valid_774106
  var valid_774107 = header.getOrDefault("X-Amz-Algorithm")
  valid_774107 = validateParameter(valid_774107, JString, required = false,
                                 default = nil)
  if valid_774107 != nil:
    section.add "X-Amz-Algorithm", valid_774107
  var valid_774108 = header.getOrDefault("X-Amz-Signature")
  valid_774108 = validateParameter(valid_774108, JString, required = false,
                                 default = nil)
  if valid_774108 != nil:
    section.add "X-Amz-Signature", valid_774108
  var valid_774109 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774109 = validateParameter(valid_774109, JString, required = false,
                                 default = nil)
  if valid_774109 != nil:
    section.add "X-Amz-SignedHeaders", valid_774109
  var valid_774110 = header.getOrDefault("X-Amz-Credential")
  valid_774110 = validateParameter(valid_774110, JString, required = false,
                                 default = nil)
  if valid_774110 != nil:
    section.add "X-Amz-Credential", valid_774110
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774111: Call_GetGetIdentityDkimAttributes_774098; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the current status of Easy DKIM signing for an entity. For domain name identities, this operation also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES has successfully verified that these tokens have been published.</p> <p>This operation takes a list of identities as input and returns the following information for each:</p> <ul> <li> <p>Whether Easy DKIM signing is enabled or disabled.</p> </li> <li> <p>A set of DKIM tokens that represent the identity. If the identity is an email address, the tokens represent the domain of that address.</p> </li> <li> <p>Whether Amazon SES has successfully verified the DKIM tokens published in the domain's DNS. This information is only returned for domain name identities, not for email addresses.</p> </li> </ul> <p>This operation is throttled at one request per second and can only get DKIM attributes for up to 100 identities at a time.</p> <p>For more information about creating DNS records using DKIM tokens, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_774111.validator(path, query, header, formData, body)
  let scheme = call_774111.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774111.url(scheme.get, call_774111.host, call_774111.base,
                         call_774111.route, valid.getOrDefault("path"))
  result = hook(call_774111, url, valid)

proc call*(call_774112: Call_GetGetIdentityDkimAttributes_774098;
          Identities: JsonNode; Action: string = "GetIdentityDkimAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## getGetIdentityDkimAttributes
  ## <p>Returns the current status of Easy DKIM signing for an entity. For domain name identities, this operation also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES has successfully verified that these tokens have been published.</p> <p>This operation takes a list of identities as input and returns the following information for each:</p> <ul> <li> <p>Whether Easy DKIM signing is enabled or disabled.</p> </li> <li> <p>A set of DKIM tokens that represent the identity. If the identity is an email address, the tokens represent the domain of that address.</p> </li> <li> <p>Whether Amazon SES has successfully verified the DKIM tokens published in the domain's DNS. This information is only returned for domain name identities, not for email addresses.</p> </li> </ul> <p>This operation is throttled at one request per second and can only get DKIM attributes for up to 100 identities at a time.</p> <p>For more information about creating DNS records using DKIM tokens, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html">Amazon SES Developer Guide</a>.</p>
  ##   Identities: JArray (required)
  ##             : A list of one or more verified identities - email addresses, domains, or both.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774113 = newJObject()
  if Identities != nil:
    query_774113.add "Identities", Identities
  add(query_774113, "Action", newJString(Action))
  add(query_774113, "Version", newJString(Version))
  result = call_774112.call(nil, query_774113, nil, nil, nil)

var getGetIdentityDkimAttributes* = Call_GetGetIdentityDkimAttributes_774098(
    name: "getGetIdentityDkimAttributes", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=GetIdentityDkimAttributes",
    validator: validate_GetGetIdentityDkimAttributes_774099, base: "/",
    url: url_GetGetIdentityDkimAttributes_774100,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetIdentityMailFromDomainAttributes_774147 = ref object of OpenApiRestCall_772597
proc url_PostGetIdentityMailFromDomainAttributes_774149(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetIdentityMailFromDomainAttributes_774148(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the custom MAIL FROM attributes for a list of identities (email addresses : domains).</p> <p>This operation is throttled at one request per second and can only get custom MAIL FROM attributes for up to 100 identities at a time.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774150 = query.getOrDefault("Action")
  valid_774150 = validateParameter(valid_774150, JString, required = true, default = newJString(
      "GetIdentityMailFromDomainAttributes"))
  if valid_774150 != nil:
    section.add "Action", valid_774150
  var valid_774151 = query.getOrDefault("Version")
  valid_774151 = validateParameter(valid_774151, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774151 != nil:
    section.add "Version", valid_774151
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774152 = header.getOrDefault("X-Amz-Date")
  valid_774152 = validateParameter(valid_774152, JString, required = false,
                                 default = nil)
  if valid_774152 != nil:
    section.add "X-Amz-Date", valid_774152
  var valid_774153 = header.getOrDefault("X-Amz-Security-Token")
  valid_774153 = validateParameter(valid_774153, JString, required = false,
                                 default = nil)
  if valid_774153 != nil:
    section.add "X-Amz-Security-Token", valid_774153
  var valid_774154 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774154 = validateParameter(valid_774154, JString, required = false,
                                 default = nil)
  if valid_774154 != nil:
    section.add "X-Amz-Content-Sha256", valid_774154
  var valid_774155 = header.getOrDefault("X-Amz-Algorithm")
  valid_774155 = validateParameter(valid_774155, JString, required = false,
                                 default = nil)
  if valid_774155 != nil:
    section.add "X-Amz-Algorithm", valid_774155
  var valid_774156 = header.getOrDefault("X-Amz-Signature")
  valid_774156 = validateParameter(valid_774156, JString, required = false,
                                 default = nil)
  if valid_774156 != nil:
    section.add "X-Amz-Signature", valid_774156
  var valid_774157 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774157 = validateParameter(valid_774157, JString, required = false,
                                 default = nil)
  if valid_774157 != nil:
    section.add "X-Amz-SignedHeaders", valid_774157
  var valid_774158 = header.getOrDefault("X-Amz-Credential")
  valid_774158 = validateParameter(valid_774158, JString, required = false,
                                 default = nil)
  if valid_774158 != nil:
    section.add "X-Amz-Credential", valid_774158
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identities: JArray (required)
  ##             : A list of one or more identities.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identities` field"
  var valid_774159 = formData.getOrDefault("Identities")
  valid_774159 = validateParameter(valid_774159, JArray, required = true, default = nil)
  if valid_774159 != nil:
    section.add "Identities", valid_774159
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774160: Call_PostGetIdentityMailFromDomainAttributes_774147;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the custom MAIL FROM attributes for a list of identities (email addresses : domains).</p> <p>This operation is throttled at one request per second and can only get custom MAIL FROM attributes for up to 100 identities at a time.</p>
  ## 
  let valid = call_774160.validator(path, query, header, formData, body)
  let scheme = call_774160.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774160.url(scheme.get, call_774160.host, call_774160.base,
                         call_774160.route, valid.getOrDefault("path"))
  result = hook(call_774160, url, valid)

proc call*(call_774161: Call_PostGetIdentityMailFromDomainAttributes_774147;
          Identities: JsonNode;
          Action: string = "GetIdentityMailFromDomainAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## postGetIdentityMailFromDomainAttributes
  ## <p>Returns the custom MAIL FROM attributes for a list of identities (email addresses : domains).</p> <p>This operation is throttled at one request per second and can only get custom MAIL FROM attributes for up to 100 identities at a time.</p>
  ##   Identities: JArray (required)
  ##             : A list of one or more identities.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774162 = newJObject()
  var formData_774163 = newJObject()
  if Identities != nil:
    formData_774163.add "Identities", Identities
  add(query_774162, "Action", newJString(Action))
  add(query_774162, "Version", newJString(Version))
  result = call_774161.call(nil, query_774162, nil, formData_774163, nil)

var postGetIdentityMailFromDomainAttributes* = Call_PostGetIdentityMailFromDomainAttributes_774147(
    name: "postGetIdentityMailFromDomainAttributes", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=GetIdentityMailFromDomainAttributes",
    validator: validate_PostGetIdentityMailFromDomainAttributes_774148, base: "/",
    url: url_PostGetIdentityMailFromDomainAttributes_774149,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetIdentityMailFromDomainAttributes_774131 = ref object of OpenApiRestCall_772597
proc url_GetGetIdentityMailFromDomainAttributes_774133(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetIdentityMailFromDomainAttributes_774132(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the custom MAIL FROM attributes for a list of identities (email addresses : domains).</p> <p>This operation is throttled at one request per second and can only get custom MAIL FROM attributes for up to 100 identities at a time.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identities: JArray (required)
  ##             : A list of one or more identities.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identities` field"
  var valid_774134 = query.getOrDefault("Identities")
  valid_774134 = validateParameter(valid_774134, JArray, required = true, default = nil)
  if valid_774134 != nil:
    section.add "Identities", valid_774134
  var valid_774135 = query.getOrDefault("Action")
  valid_774135 = validateParameter(valid_774135, JString, required = true, default = newJString(
      "GetIdentityMailFromDomainAttributes"))
  if valid_774135 != nil:
    section.add "Action", valid_774135
  var valid_774136 = query.getOrDefault("Version")
  valid_774136 = validateParameter(valid_774136, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774136 != nil:
    section.add "Version", valid_774136
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774137 = header.getOrDefault("X-Amz-Date")
  valid_774137 = validateParameter(valid_774137, JString, required = false,
                                 default = nil)
  if valid_774137 != nil:
    section.add "X-Amz-Date", valid_774137
  var valid_774138 = header.getOrDefault("X-Amz-Security-Token")
  valid_774138 = validateParameter(valid_774138, JString, required = false,
                                 default = nil)
  if valid_774138 != nil:
    section.add "X-Amz-Security-Token", valid_774138
  var valid_774139 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774139 = validateParameter(valid_774139, JString, required = false,
                                 default = nil)
  if valid_774139 != nil:
    section.add "X-Amz-Content-Sha256", valid_774139
  var valid_774140 = header.getOrDefault("X-Amz-Algorithm")
  valid_774140 = validateParameter(valid_774140, JString, required = false,
                                 default = nil)
  if valid_774140 != nil:
    section.add "X-Amz-Algorithm", valid_774140
  var valid_774141 = header.getOrDefault("X-Amz-Signature")
  valid_774141 = validateParameter(valid_774141, JString, required = false,
                                 default = nil)
  if valid_774141 != nil:
    section.add "X-Amz-Signature", valid_774141
  var valid_774142 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774142 = validateParameter(valid_774142, JString, required = false,
                                 default = nil)
  if valid_774142 != nil:
    section.add "X-Amz-SignedHeaders", valid_774142
  var valid_774143 = header.getOrDefault("X-Amz-Credential")
  valid_774143 = validateParameter(valid_774143, JString, required = false,
                                 default = nil)
  if valid_774143 != nil:
    section.add "X-Amz-Credential", valid_774143
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774144: Call_GetGetIdentityMailFromDomainAttributes_774131;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the custom MAIL FROM attributes for a list of identities (email addresses : domains).</p> <p>This operation is throttled at one request per second and can only get custom MAIL FROM attributes for up to 100 identities at a time.</p>
  ## 
  let valid = call_774144.validator(path, query, header, formData, body)
  let scheme = call_774144.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774144.url(scheme.get, call_774144.host, call_774144.base,
                         call_774144.route, valid.getOrDefault("path"))
  result = hook(call_774144, url, valid)

proc call*(call_774145: Call_GetGetIdentityMailFromDomainAttributes_774131;
          Identities: JsonNode;
          Action: string = "GetIdentityMailFromDomainAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## getGetIdentityMailFromDomainAttributes
  ## <p>Returns the custom MAIL FROM attributes for a list of identities (email addresses : domains).</p> <p>This operation is throttled at one request per second and can only get custom MAIL FROM attributes for up to 100 identities at a time.</p>
  ##   Identities: JArray (required)
  ##             : A list of one or more identities.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774146 = newJObject()
  if Identities != nil:
    query_774146.add "Identities", Identities
  add(query_774146, "Action", newJString(Action))
  add(query_774146, "Version", newJString(Version))
  result = call_774145.call(nil, query_774146, nil, nil, nil)

var getGetIdentityMailFromDomainAttributes* = Call_GetGetIdentityMailFromDomainAttributes_774131(
    name: "getGetIdentityMailFromDomainAttributes", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=GetIdentityMailFromDomainAttributes",
    validator: validate_GetGetIdentityMailFromDomainAttributes_774132, base: "/",
    url: url_GetGetIdentityMailFromDomainAttributes_774133,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetIdentityNotificationAttributes_774180 = ref object of OpenApiRestCall_772597
proc url_PostGetIdentityNotificationAttributes_774182(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetIdentityNotificationAttributes_774181(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given a list of verified identities (email addresses and/or domains), returns a structure describing identity notification attributes.</p> <p>This operation is throttled at one request per second and can only get notification attributes for up to 100 identities at a time.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774183 = query.getOrDefault("Action")
  valid_774183 = validateParameter(valid_774183, JString, required = true, default = newJString(
      "GetIdentityNotificationAttributes"))
  if valid_774183 != nil:
    section.add "Action", valid_774183
  var valid_774184 = query.getOrDefault("Version")
  valid_774184 = validateParameter(valid_774184, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774184 != nil:
    section.add "Version", valid_774184
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774185 = header.getOrDefault("X-Amz-Date")
  valid_774185 = validateParameter(valid_774185, JString, required = false,
                                 default = nil)
  if valid_774185 != nil:
    section.add "X-Amz-Date", valid_774185
  var valid_774186 = header.getOrDefault("X-Amz-Security-Token")
  valid_774186 = validateParameter(valid_774186, JString, required = false,
                                 default = nil)
  if valid_774186 != nil:
    section.add "X-Amz-Security-Token", valid_774186
  var valid_774187 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774187 = validateParameter(valid_774187, JString, required = false,
                                 default = nil)
  if valid_774187 != nil:
    section.add "X-Amz-Content-Sha256", valid_774187
  var valid_774188 = header.getOrDefault("X-Amz-Algorithm")
  valid_774188 = validateParameter(valid_774188, JString, required = false,
                                 default = nil)
  if valid_774188 != nil:
    section.add "X-Amz-Algorithm", valid_774188
  var valid_774189 = header.getOrDefault("X-Amz-Signature")
  valid_774189 = validateParameter(valid_774189, JString, required = false,
                                 default = nil)
  if valid_774189 != nil:
    section.add "X-Amz-Signature", valid_774189
  var valid_774190 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774190 = validateParameter(valid_774190, JString, required = false,
                                 default = nil)
  if valid_774190 != nil:
    section.add "X-Amz-SignedHeaders", valid_774190
  var valid_774191 = header.getOrDefault("X-Amz-Credential")
  valid_774191 = validateParameter(valid_774191, JString, required = false,
                                 default = nil)
  if valid_774191 != nil:
    section.add "X-Amz-Credential", valid_774191
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identities: JArray (required)
  ##             : A list of one or more identities. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identities` field"
  var valid_774192 = formData.getOrDefault("Identities")
  valid_774192 = validateParameter(valid_774192, JArray, required = true, default = nil)
  if valid_774192 != nil:
    section.add "Identities", valid_774192
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774193: Call_PostGetIdentityNotificationAttributes_774180;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given a list of verified identities (email addresses and/or domains), returns a structure describing identity notification attributes.</p> <p>This operation is throttled at one request per second and can only get notification attributes for up to 100 identities at a time.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_774193.validator(path, query, header, formData, body)
  let scheme = call_774193.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774193.url(scheme.get, call_774193.host, call_774193.base,
                         call_774193.route, valid.getOrDefault("path"))
  result = hook(call_774193, url, valid)

proc call*(call_774194: Call_PostGetIdentityNotificationAttributes_774180;
          Identities: JsonNode;
          Action: string = "GetIdentityNotificationAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## postGetIdentityNotificationAttributes
  ## <p>Given a list of verified identities (email addresses and/or domains), returns a structure describing identity notification attributes.</p> <p>This operation is throttled at one request per second and can only get notification attributes for up to 100 identities at a time.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Identities: JArray (required)
  ##             : A list of one or more identities. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774195 = newJObject()
  var formData_774196 = newJObject()
  if Identities != nil:
    formData_774196.add "Identities", Identities
  add(query_774195, "Action", newJString(Action))
  add(query_774195, "Version", newJString(Version))
  result = call_774194.call(nil, query_774195, nil, formData_774196, nil)

var postGetIdentityNotificationAttributes* = Call_PostGetIdentityNotificationAttributes_774180(
    name: "postGetIdentityNotificationAttributes", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=GetIdentityNotificationAttributes",
    validator: validate_PostGetIdentityNotificationAttributes_774181, base: "/",
    url: url_PostGetIdentityNotificationAttributes_774182,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetIdentityNotificationAttributes_774164 = ref object of OpenApiRestCall_772597
proc url_GetGetIdentityNotificationAttributes_774166(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetIdentityNotificationAttributes_774165(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given a list of verified identities (email addresses and/or domains), returns a structure describing identity notification attributes.</p> <p>This operation is throttled at one request per second and can only get notification attributes for up to 100 identities at a time.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identities: JArray (required)
  ##             : A list of one or more identities. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identities` field"
  var valid_774167 = query.getOrDefault("Identities")
  valid_774167 = validateParameter(valid_774167, JArray, required = true, default = nil)
  if valid_774167 != nil:
    section.add "Identities", valid_774167
  var valid_774168 = query.getOrDefault("Action")
  valid_774168 = validateParameter(valid_774168, JString, required = true, default = newJString(
      "GetIdentityNotificationAttributes"))
  if valid_774168 != nil:
    section.add "Action", valid_774168
  var valid_774169 = query.getOrDefault("Version")
  valid_774169 = validateParameter(valid_774169, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774169 != nil:
    section.add "Version", valid_774169
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774170 = header.getOrDefault("X-Amz-Date")
  valid_774170 = validateParameter(valid_774170, JString, required = false,
                                 default = nil)
  if valid_774170 != nil:
    section.add "X-Amz-Date", valid_774170
  var valid_774171 = header.getOrDefault("X-Amz-Security-Token")
  valid_774171 = validateParameter(valid_774171, JString, required = false,
                                 default = nil)
  if valid_774171 != nil:
    section.add "X-Amz-Security-Token", valid_774171
  var valid_774172 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774172 = validateParameter(valid_774172, JString, required = false,
                                 default = nil)
  if valid_774172 != nil:
    section.add "X-Amz-Content-Sha256", valid_774172
  var valid_774173 = header.getOrDefault("X-Amz-Algorithm")
  valid_774173 = validateParameter(valid_774173, JString, required = false,
                                 default = nil)
  if valid_774173 != nil:
    section.add "X-Amz-Algorithm", valid_774173
  var valid_774174 = header.getOrDefault("X-Amz-Signature")
  valid_774174 = validateParameter(valid_774174, JString, required = false,
                                 default = nil)
  if valid_774174 != nil:
    section.add "X-Amz-Signature", valid_774174
  var valid_774175 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774175 = validateParameter(valid_774175, JString, required = false,
                                 default = nil)
  if valid_774175 != nil:
    section.add "X-Amz-SignedHeaders", valid_774175
  var valid_774176 = header.getOrDefault("X-Amz-Credential")
  valid_774176 = validateParameter(valid_774176, JString, required = false,
                                 default = nil)
  if valid_774176 != nil:
    section.add "X-Amz-Credential", valid_774176
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774177: Call_GetGetIdentityNotificationAttributes_774164;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given a list of verified identities (email addresses and/or domains), returns a structure describing identity notification attributes.</p> <p>This operation is throttled at one request per second and can only get notification attributes for up to 100 identities at a time.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_774177.validator(path, query, header, formData, body)
  let scheme = call_774177.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774177.url(scheme.get, call_774177.host, call_774177.base,
                         call_774177.route, valid.getOrDefault("path"))
  result = hook(call_774177, url, valid)

proc call*(call_774178: Call_GetGetIdentityNotificationAttributes_774164;
          Identities: JsonNode;
          Action: string = "GetIdentityNotificationAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## getGetIdentityNotificationAttributes
  ## <p>Given a list of verified identities (email addresses and/or domains), returns a structure describing identity notification attributes.</p> <p>This operation is throttled at one request per second and can only get notification attributes for up to 100 identities at a time.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Identities: JArray (required)
  ##             : A list of one or more identities. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774179 = newJObject()
  if Identities != nil:
    query_774179.add "Identities", Identities
  add(query_774179, "Action", newJString(Action))
  add(query_774179, "Version", newJString(Version))
  result = call_774178.call(nil, query_774179, nil, nil, nil)

var getGetIdentityNotificationAttributes* = Call_GetGetIdentityNotificationAttributes_774164(
    name: "getGetIdentityNotificationAttributes", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=GetIdentityNotificationAttributes",
    validator: validate_GetGetIdentityNotificationAttributes_774165, base: "/",
    url: url_GetGetIdentityNotificationAttributes_774166,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetIdentityPolicies_774214 = ref object of OpenApiRestCall_772597
proc url_PostGetIdentityPolicies_774216(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetIdentityPolicies_774215(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774217 = query.getOrDefault("Action")
  valid_774217 = validateParameter(valid_774217, JString, required = true,
                                 default = newJString("GetIdentityPolicies"))
  if valid_774217 != nil:
    section.add "Action", valid_774217
  var valid_774218 = query.getOrDefault("Version")
  valid_774218 = validateParameter(valid_774218, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774218 != nil:
    section.add "Version", valid_774218
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774219 = header.getOrDefault("X-Amz-Date")
  valid_774219 = validateParameter(valid_774219, JString, required = false,
                                 default = nil)
  if valid_774219 != nil:
    section.add "X-Amz-Date", valid_774219
  var valid_774220 = header.getOrDefault("X-Amz-Security-Token")
  valid_774220 = validateParameter(valid_774220, JString, required = false,
                                 default = nil)
  if valid_774220 != nil:
    section.add "X-Amz-Security-Token", valid_774220
  var valid_774221 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774221 = validateParameter(valid_774221, JString, required = false,
                                 default = nil)
  if valid_774221 != nil:
    section.add "X-Amz-Content-Sha256", valid_774221
  var valid_774222 = header.getOrDefault("X-Amz-Algorithm")
  valid_774222 = validateParameter(valid_774222, JString, required = false,
                                 default = nil)
  if valid_774222 != nil:
    section.add "X-Amz-Algorithm", valid_774222
  var valid_774223 = header.getOrDefault("X-Amz-Signature")
  valid_774223 = validateParameter(valid_774223, JString, required = false,
                                 default = nil)
  if valid_774223 != nil:
    section.add "X-Amz-Signature", valid_774223
  var valid_774224 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774224 = validateParameter(valid_774224, JString, required = false,
                                 default = nil)
  if valid_774224 != nil:
    section.add "X-Amz-SignedHeaders", valid_774224
  var valid_774225 = header.getOrDefault("X-Amz-Credential")
  valid_774225 = validateParameter(valid_774225, JString, required = false,
                                 default = nil)
  if valid_774225 != nil:
    section.add "X-Amz-Credential", valid_774225
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyNames: JArray (required)
  ##              : A list of the names of policies to be retrieved. You can retrieve a maximum of 20 policies at a time. If you do not know the names of the policies that are attached to the identity, you can use <code>ListIdentityPolicies</code>.
  ##   Identity: JString (required)
  ##           : <p>The identity for which the policies will be retrieved. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyNames` field"
  var valid_774226 = formData.getOrDefault("PolicyNames")
  valid_774226 = validateParameter(valid_774226, JArray, required = true, default = nil)
  if valid_774226 != nil:
    section.add "PolicyNames", valid_774226
  var valid_774227 = formData.getOrDefault("Identity")
  valid_774227 = validateParameter(valid_774227, JString, required = true,
                                 default = nil)
  if valid_774227 != nil:
    section.add "Identity", valid_774227
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774228: Call_PostGetIdentityPolicies_774214; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_774228.validator(path, query, header, formData, body)
  let scheme = call_774228.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774228.url(scheme.get, call_774228.host, call_774228.base,
                         call_774228.route, valid.getOrDefault("path"))
  result = hook(call_774228, url, valid)

proc call*(call_774229: Call_PostGetIdentityPolicies_774214; PolicyNames: JsonNode;
          Identity: string; Action: string = "GetIdentityPolicies";
          Version: string = "2010-12-01"): Recallable =
  ## postGetIdentityPolicies
  ## <p>Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   PolicyNames: JArray (required)
  ##              : A list of the names of policies to be retrieved. You can retrieve a maximum of 20 policies at a time. If you do not know the names of the policies that are attached to the identity, you can use <code>ListIdentityPolicies</code>.
  ##   Identity: string (required)
  ##           : <p>The identity for which the policies will be retrieved. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774230 = newJObject()
  var formData_774231 = newJObject()
  if PolicyNames != nil:
    formData_774231.add "PolicyNames", PolicyNames
  add(formData_774231, "Identity", newJString(Identity))
  add(query_774230, "Action", newJString(Action))
  add(query_774230, "Version", newJString(Version))
  result = call_774229.call(nil, query_774230, nil, formData_774231, nil)

var postGetIdentityPolicies* = Call_PostGetIdentityPolicies_774214(
    name: "postGetIdentityPolicies", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=GetIdentityPolicies",
    validator: validate_PostGetIdentityPolicies_774215, base: "/",
    url: url_PostGetIdentityPolicies_774216, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetIdentityPolicies_774197 = ref object of OpenApiRestCall_772597
proc url_GetGetIdentityPolicies_774199(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetIdentityPolicies_774198(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : <p>The identity for which the policies will be retrieved. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: JString (required)
  ##   PolicyNames: JArray (required)
  ##              : A list of the names of policies to be retrieved. You can retrieve a maximum of 20 policies at a time. If you do not know the names of the policies that are attached to the identity, you can use <code>ListIdentityPolicies</code>.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_774200 = query.getOrDefault("Identity")
  valid_774200 = validateParameter(valid_774200, JString, required = true,
                                 default = nil)
  if valid_774200 != nil:
    section.add "Identity", valid_774200
  var valid_774201 = query.getOrDefault("Action")
  valid_774201 = validateParameter(valid_774201, JString, required = true,
                                 default = newJString("GetIdentityPolicies"))
  if valid_774201 != nil:
    section.add "Action", valid_774201
  var valid_774202 = query.getOrDefault("PolicyNames")
  valid_774202 = validateParameter(valid_774202, JArray, required = true, default = nil)
  if valid_774202 != nil:
    section.add "PolicyNames", valid_774202
  var valid_774203 = query.getOrDefault("Version")
  valid_774203 = validateParameter(valid_774203, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774203 != nil:
    section.add "Version", valid_774203
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774204 = header.getOrDefault("X-Amz-Date")
  valid_774204 = validateParameter(valid_774204, JString, required = false,
                                 default = nil)
  if valid_774204 != nil:
    section.add "X-Amz-Date", valid_774204
  var valid_774205 = header.getOrDefault("X-Amz-Security-Token")
  valid_774205 = validateParameter(valid_774205, JString, required = false,
                                 default = nil)
  if valid_774205 != nil:
    section.add "X-Amz-Security-Token", valid_774205
  var valid_774206 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774206 = validateParameter(valid_774206, JString, required = false,
                                 default = nil)
  if valid_774206 != nil:
    section.add "X-Amz-Content-Sha256", valid_774206
  var valid_774207 = header.getOrDefault("X-Amz-Algorithm")
  valid_774207 = validateParameter(valid_774207, JString, required = false,
                                 default = nil)
  if valid_774207 != nil:
    section.add "X-Amz-Algorithm", valid_774207
  var valid_774208 = header.getOrDefault("X-Amz-Signature")
  valid_774208 = validateParameter(valid_774208, JString, required = false,
                                 default = nil)
  if valid_774208 != nil:
    section.add "X-Amz-Signature", valid_774208
  var valid_774209 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774209 = validateParameter(valid_774209, JString, required = false,
                                 default = nil)
  if valid_774209 != nil:
    section.add "X-Amz-SignedHeaders", valid_774209
  var valid_774210 = header.getOrDefault("X-Amz-Credential")
  valid_774210 = validateParameter(valid_774210, JString, required = false,
                                 default = nil)
  if valid_774210 != nil:
    section.add "X-Amz-Credential", valid_774210
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774211: Call_GetGetIdentityPolicies_774197; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_774211.validator(path, query, header, formData, body)
  let scheme = call_774211.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774211.url(scheme.get, call_774211.host, call_774211.base,
                         call_774211.route, valid.getOrDefault("path"))
  result = hook(call_774211, url, valid)

proc call*(call_774212: Call_GetGetIdentityPolicies_774197; Identity: string;
          PolicyNames: JsonNode; Action: string = "GetIdentityPolicies";
          Version: string = "2010-12-01"): Recallable =
  ## getGetIdentityPolicies
  ## <p>Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : <p>The identity for which the policies will be retrieved. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   PolicyNames: JArray (required)
  ##              : A list of the names of policies to be retrieved. You can retrieve a maximum of 20 policies at a time. If you do not know the names of the policies that are attached to the identity, you can use <code>ListIdentityPolicies</code>.
  ##   Version: string (required)
  var query_774213 = newJObject()
  add(query_774213, "Identity", newJString(Identity))
  add(query_774213, "Action", newJString(Action))
  if PolicyNames != nil:
    query_774213.add "PolicyNames", PolicyNames
  add(query_774213, "Version", newJString(Version))
  result = call_774212.call(nil, query_774213, nil, nil, nil)

var getGetIdentityPolicies* = Call_GetGetIdentityPolicies_774197(
    name: "getGetIdentityPolicies", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=GetIdentityPolicies",
    validator: validate_GetGetIdentityPolicies_774198, base: "/",
    url: url_GetGetIdentityPolicies_774199, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetIdentityVerificationAttributes_774248 = ref object of OpenApiRestCall_772597
proc url_PostGetIdentityVerificationAttributes_774250(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetIdentityVerificationAttributes_774249(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given a list of identities (email addresses and/or domains), returns the verification status and (for domain identities) the verification token for each identity.</p> <p>The verification status of an email address is "Pending" until the email address owner clicks the link within the verification email that Amazon SES sent to that address. If the email address owner clicks the link within 24 hours, the verification status of the email address changes to "Success". If the link is not clicked within 24 hours, the verification status changes to "Failed." In that case, if you still want to verify the email address, you must restart the verification process from the beginning.</p> <p>For domain identities, the domain's verification status is "Pending" as Amazon SES searches for the required TXT record in the DNS settings of the domain. When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p> <p>This operation is throttled at one request per second and can only get verification attributes for up to 100 identities at a time.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774251 = query.getOrDefault("Action")
  valid_774251 = validateParameter(valid_774251, JString, required = true, default = newJString(
      "GetIdentityVerificationAttributes"))
  if valid_774251 != nil:
    section.add "Action", valid_774251
  var valid_774252 = query.getOrDefault("Version")
  valid_774252 = validateParameter(valid_774252, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774252 != nil:
    section.add "Version", valid_774252
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774253 = header.getOrDefault("X-Amz-Date")
  valid_774253 = validateParameter(valid_774253, JString, required = false,
                                 default = nil)
  if valid_774253 != nil:
    section.add "X-Amz-Date", valid_774253
  var valid_774254 = header.getOrDefault("X-Amz-Security-Token")
  valid_774254 = validateParameter(valid_774254, JString, required = false,
                                 default = nil)
  if valid_774254 != nil:
    section.add "X-Amz-Security-Token", valid_774254
  var valid_774255 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774255 = validateParameter(valid_774255, JString, required = false,
                                 default = nil)
  if valid_774255 != nil:
    section.add "X-Amz-Content-Sha256", valid_774255
  var valid_774256 = header.getOrDefault("X-Amz-Algorithm")
  valid_774256 = validateParameter(valid_774256, JString, required = false,
                                 default = nil)
  if valid_774256 != nil:
    section.add "X-Amz-Algorithm", valid_774256
  var valid_774257 = header.getOrDefault("X-Amz-Signature")
  valid_774257 = validateParameter(valid_774257, JString, required = false,
                                 default = nil)
  if valid_774257 != nil:
    section.add "X-Amz-Signature", valid_774257
  var valid_774258 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774258 = validateParameter(valid_774258, JString, required = false,
                                 default = nil)
  if valid_774258 != nil:
    section.add "X-Amz-SignedHeaders", valid_774258
  var valid_774259 = header.getOrDefault("X-Amz-Credential")
  valid_774259 = validateParameter(valid_774259, JString, required = false,
                                 default = nil)
  if valid_774259 != nil:
    section.add "X-Amz-Credential", valid_774259
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identities: JArray (required)
  ##             : A list of identities.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identities` field"
  var valid_774260 = formData.getOrDefault("Identities")
  valid_774260 = validateParameter(valid_774260, JArray, required = true, default = nil)
  if valid_774260 != nil:
    section.add "Identities", valid_774260
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774261: Call_PostGetIdentityVerificationAttributes_774248;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given a list of identities (email addresses and/or domains), returns the verification status and (for domain identities) the verification token for each identity.</p> <p>The verification status of an email address is "Pending" until the email address owner clicks the link within the verification email that Amazon SES sent to that address. If the email address owner clicks the link within 24 hours, the verification status of the email address changes to "Success". If the link is not clicked within 24 hours, the verification status changes to "Failed." In that case, if you still want to verify the email address, you must restart the verification process from the beginning.</p> <p>For domain identities, the domain's verification status is "Pending" as Amazon SES searches for the required TXT record in the DNS settings of the domain. When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p> <p>This operation is throttled at one request per second and can only get verification attributes for up to 100 identities at a time.</p>
  ## 
  let valid = call_774261.validator(path, query, header, formData, body)
  let scheme = call_774261.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774261.url(scheme.get, call_774261.host, call_774261.base,
                         call_774261.route, valid.getOrDefault("path"))
  result = hook(call_774261, url, valid)

proc call*(call_774262: Call_PostGetIdentityVerificationAttributes_774248;
          Identities: JsonNode;
          Action: string = "GetIdentityVerificationAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## postGetIdentityVerificationAttributes
  ## <p>Given a list of identities (email addresses and/or domains), returns the verification status and (for domain identities) the verification token for each identity.</p> <p>The verification status of an email address is "Pending" until the email address owner clicks the link within the verification email that Amazon SES sent to that address. If the email address owner clicks the link within 24 hours, the verification status of the email address changes to "Success". If the link is not clicked within 24 hours, the verification status changes to "Failed." In that case, if you still want to verify the email address, you must restart the verification process from the beginning.</p> <p>For domain identities, the domain's verification status is "Pending" as Amazon SES searches for the required TXT record in the DNS settings of the domain. When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p> <p>This operation is throttled at one request per second and can only get verification attributes for up to 100 identities at a time.</p>
  ##   Identities: JArray (required)
  ##             : A list of identities.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774263 = newJObject()
  var formData_774264 = newJObject()
  if Identities != nil:
    formData_774264.add "Identities", Identities
  add(query_774263, "Action", newJString(Action))
  add(query_774263, "Version", newJString(Version))
  result = call_774262.call(nil, query_774263, nil, formData_774264, nil)

var postGetIdentityVerificationAttributes* = Call_PostGetIdentityVerificationAttributes_774248(
    name: "postGetIdentityVerificationAttributes", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=GetIdentityVerificationAttributes",
    validator: validate_PostGetIdentityVerificationAttributes_774249, base: "/",
    url: url_PostGetIdentityVerificationAttributes_774250,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetIdentityVerificationAttributes_774232 = ref object of OpenApiRestCall_772597
proc url_GetGetIdentityVerificationAttributes_774234(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetIdentityVerificationAttributes_774233(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given a list of identities (email addresses and/or domains), returns the verification status and (for domain identities) the verification token for each identity.</p> <p>The verification status of an email address is "Pending" until the email address owner clicks the link within the verification email that Amazon SES sent to that address. If the email address owner clicks the link within 24 hours, the verification status of the email address changes to "Success". If the link is not clicked within 24 hours, the verification status changes to "Failed." In that case, if you still want to verify the email address, you must restart the verification process from the beginning.</p> <p>For domain identities, the domain's verification status is "Pending" as Amazon SES searches for the required TXT record in the DNS settings of the domain. When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p> <p>This operation is throttled at one request per second and can only get verification attributes for up to 100 identities at a time.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identities: JArray (required)
  ##             : A list of identities.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identities` field"
  var valid_774235 = query.getOrDefault("Identities")
  valid_774235 = validateParameter(valid_774235, JArray, required = true, default = nil)
  if valid_774235 != nil:
    section.add "Identities", valid_774235
  var valid_774236 = query.getOrDefault("Action")
  valid_774236 = validateParameter(valid_774236, JString, required = true, default = newJString(
      "GetIdentityVerificationAttributes"))
  if valid_774236 != nil:
    section.add "Action", valid_774236
  var valid_774237 = query.getOrDefault("Version")
  valid_774237 = validateParameter(valid_774237, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774237 != nil:
    section.add "Version", valid_774237
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774238 = header.getOrDefault("X-Amz-Date")
  valid_774238 = validateParameter(valid_774238, JString, required = false,
                                 default = nil)
  if valid_774238 != nil:
    section.add "X-Amz-Date", valid_774238
  var valid_774239 = header.getOrDefault("X-Amz-Security-Token")
  valid_774239 = validateParameter(valid_774239, JString, required = false,
                                 default = nil)
  if valid_774239 != nil:
    section.add "X-Amz-Security-Token", valid_774239
  var valid_774240 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774240 = validateParameter(valid_774240, JString, required = false,
                                 default = nil)
  if valid_774240 != nil:
    section.add "X-Amz-Content-Sha256", valid_774240
  var valid_774241 = header.getOrDefault("X-Amz-Algorithm")
  valid_774241 = validateParameter(valid_774241, JString, required = false,
                                 default = nil)
  if valid_774241 != nil:
    section.add "X-Amz-Algorithm", valid_774241
  var valid_774242 = header.getOrDefault("X-Amz-Signature")
  valid_774242 = validateParameter(valid_774242, JString, required = false,
                                 default = nil)
  if valid_774242 != nil:
    section.add "X-Amz-Signature", valid_774242
  var valid_774243 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774243 = validateParameter(valid_774243, JString, required = false,
                                 default = nil)
  if valid_774243 != nil:
    section.add "X-Amz-SignedHeaders", valid_774243
  var valid_774244 = header.getOrDefault("X-Amz-Credential")
  valid_774244 = validateParameter(valid_774244, JString, required = false,
                                 default = nil)
  if valid_774244 != nil:
    section.add "X-Amz-Credential", valid_774244
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774245: Call_GetGetIdentityVerificationAttributes_774232;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given a list of identities (email addresses and/or domains), returns the verification status and (for domain identities) the verification token for each identity.</p> <p>The verification status of an email address is "Pending" until the email address owner clicks the link within the verification email that Amazon SES sent to that address. If the email address owner clicks the link within 24 hours, the verification status of the email address changes to "Success". If the link is not clicked within 24 hours, the verification status changes to "Failed." In that case, if you still want to verify the email address, you must restart the verification process from the beginning.</p> <p>For domain identities, the domain's verification status is "Pending" as Amazon SES searches for the required TXT record in the DNS settings of the domain. When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p> <p>This operation is throttled at one request per second and can only get verification attributes for up to 100 identities at a time.</p>
  ## 
  let valid = call_774245.validator(path, query, header, formData, body)
  let scheme = call_774245.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774245.url(scheme.get, call_774245.host, call_774245.base,
                         call_774245.route, valid.getOrDefault("path"))
  result = hook(call_774245, url, valid)

proc call*(call_774246: Call_GetGetIdentityVerificationAttributes_774232;
          Identities: JsonNode;
          Action: string = "GetIdentityVerificationAttributes";
          Version: string = "2010-12-01"): Recallable =
  ## getGetIdentityVerificationAttributes
  ## <p>Given a list of identities (email addresses and/or domains), returns the verification status and (for domain identities) the verification token for each identity.</p> <p>The verification status of an email address is "Pending" until the email address owner clicks the link within the verification email that Amazon SES sent to that address. If the email address owner clicks the link within 24 hours, the verification status of the email address changes to "Success". If the link is not clicked within 24 hours, the verification status changes to "Failed." In that case, if you still want to verify the email address, you must restart the verification process from the beginning.</p> <p>For domain identities, the domain's verification status is "Pending" as Amazon SES searches for the required TXT record in the DNS settings of the domain. When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p> <p>This operation is throttled at one request per second and can only get verification attributes for up to 100 identities at a time.</p>
  ##   Identities: JArray (required)
  ##             : A list of identities.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774247 = newJObject()
  if Identities != nil:
    query_774247.add "Identities", Identities
  add(query_774247, "Action", newJString(Action))
  add(query_774247, "Version", newJString(Version))
  result = call_774246.call(nil, query_774247, nil, nil, nil)

var getGetIdentityVerificationAttributes* = Call_GetGetIdentityVerificationAttributes_774232(
    name: "getGetIdentityVerificationAttributes", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=GetIdentityVerificationAttributes",
    validator: validate_GetGetIdentityVerificationAttributes_774233, base: "/",
    url: url_GetGetIdentityVerificationAttributes_774234,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetSendQuota_774280 = ref object of OpenApiRestCall_772597
proc url_PostGetSendQuota_774282(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetSendQuota_774281(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Provides the sending limits for the Amazon SES account. </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774283 = query.getOrDefault("Action")
  valid_774283 = validateParameter(valid_774283, JString, required = true,
                                 default = newJString("GetSendQuota"))
  if valid_774283 != nil:
    section.add "Action", valid_774283
  var valid_774284 = query.getOrDefault("Version")
  valid_774284 = validateParameter(valid_774284, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774284 != nil:
    section.add "Version", valid_774284
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774285 = header.getOrDefault("X-Amz-Date")
  valid_774285 = validateParameter(valid_774285, JString, required = false,
                                 default = nil)
  if valid_774285 != nil:
    section.add "X-Amz-Date", valid_774285
  var valid_774286 = header.getOrDefault("X-Amz-Security-Token")
  valid_774286 = validateParameter(valid_774286, JString, required = false,
                                 default = nil)
  if valid_774286 != nil:
    section.add "X-Amz-Security-Token", valid_774286
  var valid_774287 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774287 = validateParameter(valid_774287, JString, required = false,
                                 default = nil)
  if valid_774287 != nil:
    section.add "X-Amz-Content-Sha256", valid_774287
  var valid_774288 = header.getOrDefault("X-Amz-Algorithm")
  valid_774288 = validateParameter(valid_774288, JString, required = false,
                                 default = nil)
  if valid_774288 != nil:
    section.add "X-Amz-Algorithm", valid_774288
  var valid_774289 = header.getOrDefault("X-Amz-Signature")
  valid_774289 = validateParameter(valid_774289, JString, required = false,
                                 default = nil)
  if valid_774289 != nil:
    section.add "X-Amz-Signature", valid_774289
  var valid_774290 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774290 = validateParameter(valid_774290, JString, required = false,
                                 default = nil)
  if valid_774290 != nil:
    section.add "X-Amz-SignedHeaders", valid_774290
  var valid_774291 = header.getOrDefault("X-Amz-Credential")
  valid_774291 = validateParameter(valid_774291, JString, required = false,
                                 default = nil)
  if valid_774291 != nil:
    section.add "X-Amz-Credential", valid_774291
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774292: Call_PostGetSendQuota_774280; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Provides the sending limits for the Amazon SES account. </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_774292.validator(path, query, header, formData, body)
  let scheme = call_774292.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774292.url(scheme.get, call_774292.host, call_774292.base,
                         call_774292.route, valid.getOrDefault("path"))
  result = hook(call_774292, url, valid)

proc call*(call_774293: Call_PostGetSendQuota_774280;
          Action: string = "GetSendQuota"; Version: string = "2010-12-01"): Recallable =
  ## postGetSendQuota
  ## <p>Provides the sending limits for the Amazon SES account. </p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774294 = newJObject()
  add(query_774294, "Action", newJString(Action))
  add(query_774294, "Version", newJString(Version))
  result = call_774293.call(nil, query_774294, nil, nil, nil)

var postGetSendQuota* = Call_PostGetSendQuota_774280(name: "postGetSendQuota",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=GetSendQuota", validator: validate_PostGetSendQuota_774281,
    base: "/", url: url_PostGetSendQuota_774282,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetSendQuota_774265 = ref object of OpenApiRestCall_772597
proc url_GetGetSendQuota_774267(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetSendQuota_774266(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Provides the sending limits for the Amazon SES account. </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774268 = query.getOrDefault("Action")
  valid_774268 = validateParameter(valid_774268, JString, required = true,
                                 default = newJString("GetSendQuota"))
  if valid_774268 != nil:
    section.add "Action", valid_774268
  var valid_774269 = query.getOrDefault("Version")
  valid_774269 = validateParameter(valid_774269, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774269 != nil:
    section.add "Version", valid_774269
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774270 = header.getOrDefault("X-Amz-Date")
  valid_774270 = validateParameter(valid_774270, JString, required = false,
                                 default = nil)
  if valid_774270 != nil:
    section.add "X-Amz-Date", valid_774270
  var valid_774271 = header.getOrDefault("X-Amz-Security-Token")
  valid_774271 = validateParameter(valid_774271, JString, required = false,
                                 default = nil)
  if valid_774271 != nil:
    section.add "X-Amz-Security-Token", valid_774271
  var valid_774272 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774272 = validateParameter(valid_774272, JString, required = false,
                                 default = nil)
  if valid_774272 != nil:
    section.add "X-Amz-Content-Sha256", valid_774272
  var valid_774273 = header.getOrDefault("X-Amz-Algorithm")
  valid_774273 = validateParameter(valid_774273, JString, required = false,
                                 default = nil)
  if valid_774273 != nil:
    section.add "X-Amz-Algorithm", valid_774273
  var valid_774274 = header.getOrDefault("X-Amz-Signature")
  valid_774274 = validateParameter(valid_774274, JString, required = false,
                                 default = nil)
  if valid_774274 != nil:
    section.add "X-Amz-Signature", valid_774274
  var valid_774275 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774275 = validateParameter(valid_774275, JString, required = false,
                                 default = nil)
  if valid_774275 != nil:
    section.add "X-Amz-SignedHeaders", valid_774275
  var valid_774276 = header.getOrDefault("X-Amz-Credential")
  valid_774276 = validateParameter(valid_774276, JString, required = false,
                                 default = nil)
  if valid_774276 != nil:
    section.add "X-Amz-Credential", valid_774276
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774277: Call_GetGetSendQuota_774265; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Provides the sending limits for the Amazon SES account. </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_774277.validator(path, query, header, formData, body)
  let scheme = call_774277.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774277.url(scheme.get, call_774277.host, call_774277.base,
                         call_774277.route, valid.getOrDefault("path"))
  result = hook(call_774277, url, valid)

proc call*(call_774278: Call_GetGetSendQuota_774265;
          Action: string = "GetSendQuota"; Version: string = "2010-12-01"): Recallable =
  ## getGetSendQuota
  ## <p>Provides the sending limits for the Amazon SES account. </p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774279 = newJObject()
  add(query_774279, "Action", newJString(Action))
  add(query_774279, "Version", newJString(Version))
  result = call_774278.call(nil, query_774279, nil, nil, nil)

var getGetSendQuota* = Call_GetGetSendQuota_774265(name: "getGetSendQuota",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=GetSendQuota", validator: validate_GetGetSendQuota_774266,
    base: "/", url: url_GetGetSendQuota_774267, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetSendStatistics_774310 = ref object of OpenApiRestCall_772597
proc url_PostGetSendStatistics_774312(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetSendStatistics_774311(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Provides sending statistics for the current AWS Region. The result is a list of data points, representing the last two weeks of sending activity. Each data point in the list contains statistics for a 15-minute period of time.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774313 = query.getOrDefault("Action")
  valid_774313 = validateParameter(valid_774313, JString, required = true,
                                 default = newJString("GetSendStatistics"))
  if valid_774313 != nil:
    section.add "Action", valid_774313
  var valid_774314 = query.getOrDefault("Version")
  valid_774314 = validateParameter(valid_774314, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774314 != nil:
    section.add "Version", valid_774314
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774315 = header.getOrDefault("X-Amz-Date")
  valid_774315 = validateParameter(valid_774315, JString, required = false,
                                 default = nil)
  if valid_774315 != nil:
    section.add "X-Amz-Date", valid_774315
  var valid_774316 = header.getOrDefault("X-Amz-Security-Token")
  valid_774316 = validateParameter(valid_774316, JString, required = false,
                                 default = nil)
  if valid_774316 != nil:
    section.add "X-Amz-Security-Token", valid_774316
  var valid_774317 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774317 = validateParameter(valid_774317, JString, required = false,
                                 default = nil)
  if valid_774317 != nil:
    section.add "X-Amz-Content-Sha256", valid_774317
  var valid_774318 = header.getOrDefault("X-Amz-Algorithm")
  valid_774318 = validateParameter(valid_774318, JString, required = false,
                                 default = nil)
  if valid_774318 != nil:
    section.add "X-Amz-Algorithm", valid_774318
  var valid_774319 = header.getOrDefault("X-Amz-Signature")
  valid_774319 = validateParameter(valid_774319, JString, required = false,
                                 default = nil)
  if valid_774319 != nil:
    section.add "X-Amz-Signature", valid_774319
  var valid_774320 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774320 = validateParameter(valid_774320, JString, required = false,
                                 default = nil)
  if valid_774320 != nil:
    section.add "X-Amz-SignedHeaders", valid_774320
  var valid_774321 = header.getOrDefault("X-Amz-Credential")
  valid_774321 = validateParameter(valid_774321, JString, required = false,
                                 default = nil)
  if valid_774321 != nil:
    section.add "X-Amz-Credential", valid_774321
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774322: Call_PostGetSendStatistics_774310; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Provides sending statistics for the current AWS Region. The result is a list of data points, representing the last two weeks of sending activity. Each data point in the list contains statistics for a 15-minute period of time.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_774322.validator(path, query, header, formData, body)
  let scheme = call_774322.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774322.url(scheme.get, call_774322.host, call_774322.base,
                         call_774322.route, valid.getOrDefault("path"))
  result = hook(call_774322, url, valid)

proc call*(call_774323: Call_PostGetSendStatistics_774310;
          Action: string = "GetSendStatistics"; Version: string = "2010-12-01"): Recallable =
  ## postGetSendStatistics
  ## <p>Provides sending statistics for the current AWS Region. The result is a list of data points, representing the last two weeks of sending activity. Each data point in the list contains statistics for a 15-minute period of time.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774324 = newJObject()
  add(query_774324, "Action", newJString(Action))
  add(query_774324, "Version", newJString(Version))
  result = call_774323.call(nil, query_774324, nil, nil, nil)

var postGetSendStatistics* = Call_PostGetSendStatistics_774310(
    name: "postGetSendStatistics", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=GetSendStatistics",
    validator: validate_PostGetSendStatistics_774311, base: "/",
    url: url_PostGetSendStatistics_774312, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetSendStatistics_774295 = ref object of OpenApiRestCall_772597
proc url_GetGetSendStatistics_774297(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetSendStatistics_774296(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Provides sending statistics for the current AWS Region. The result is a list of data points, representing the last two weeks of sending activity. Each data point in the list contains statistics for a 15-minute period of time.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774298 = query.getOrDefault("Action")
  valid_774298 = validateParameter(valid_774298, JString, required = true,
                                 default = newJString("GetSendStatistics"))
  if valid_774298 != nil:
    section.add "Action", valid_774298
  var valid_774299 = query.getOrDefault("Version")
  valid_774299 = validateParameter(valid_774299, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774299 != nil:
    section.add "Version", valid_774299
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774300 = header.getOrDefault("X-Amz-Date")
  valid_774300 = validateParameter(valid_774300, JString, required = false,
                                 default = nil)
  if valid_774300 != nil:
    section.add "X-Amz-Date", valid_774300
  var valid_774301 = header.getOrDefault("X-Amz-Security-Token")
  valid_774301 = validateParameter(valid_774301, JString, required = false,
                                 default = nil)
  if valid_774301 != nil:
    section.add "X-Amz-Security-Token", valid_774301
  var valid_774302 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774302 = validateParameter(valid_774302, JString, required = false,
                                 default = nil)
  if valid_774302 != nil:
    section.add "X-Amz-Content-Sha256", valid_774302
  var valid_774303 = header.getOrDefault("X-Amz-Algorithm")
  valid_774303 = validateParameter(valid_774303, JString, required = false,
                                 default = nil)
  if valid_774303 != nil:
    section.add "X-Amz-Algorithm", valid_774303
  var valid_774304 = header.getOrDefault("X-Amz-Signature")
  valid_774304 = validateParameter(valid_774304, JString, required = false,
                                 default = nil)
  if valid_774304 != nil:
    section.add "X-Amz-Signature", valid_774304
  var valid_774305 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774305 = validateParameter(valid_774305, JString, required = false,
                                 default = nil)
  if valid_774305 != nil:
    section.add "X-Amz-SignedHeaders", valid_774305
  var valid_774306 = header.getOrDefault("X-Amz-Credential")
  valid_774306 = validateParameter(valid_774306, JString, required = false,
                                 default = nil)
  if valid_774306 != nil:
    section.add "X-Amz-Credential", valid_774306
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774307: Call_GetGetSendStatistics_774295; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Provides sending statistics for the current AWS Region. The result is a list of data points, representing the last two weeks of sending activity. Each data point in the list contains statistics for a 15-minute period of time.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_774307.validator(path, query, header, formData, body)
  let scheme = call_774307.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774307.url(scheme.get, call_774307.host, call_774307.base,
                         call_774307.route, valid.getOrDefault("path"))
  result = hook(call_774307, url, valid)

proc call*(call_774308: Call_GetGetSendStatistics_774295;
          Action: string = "GetSendStatistics"; Version: string = "2010-12-01"): Recallable =
  ## getGetSendStatistics
  ## <p>Provides sending statistics for the current AWS Region. The result is a list of data points, representing the last two weeks of sending activity. Each data point in the list contains statistics for a 15-minute period of time.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774309 = newJObject()
  add(query_774309, "Action", newJString(Action))
  add(query_774309, "Version", newJString(Version))
  result = call_774308.call(nil, query_774309, nil, nil, nil)

var getGetSendStatistics* = Call_GetGetSendStatistics_774295(
    name: "getGetSendStatistics", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=GetSendStatistics",
    validator: validate_GetGetSendStatistics_774296, base: "/",
    url: url_GetGetSendStatistics_774297, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetTemplate_774341 = ref object of OpenApiRestCall_772597
proc url_PostGetTemplate_774343(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetTemplate_774342(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Displays the template object (which includes the Subject line, HTML part and text part) for the template you specify.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774344 = query.getOrDefault("Action")
  valid_774344 = validateParameter(valid_774344, JString, required = true,
                                 default = newJString("GetTemplate"))
  if valid_774344 != nil:
    section.add "Action", valid_774344
  var valid_774345 = query.getOrDefault("Version")
  valid_774345 = validateParameter(valid_774345, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774345 != nil:
    section.add "Version", valid_774345
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774346 = header.getOrDefault("X-Amz-Date")
  valid_774346 = validateParameter(valid_774346, JString, required = false,
                                 default = nil)
  if valid_774346 != nil:
    section.add "X-Amz-Date", valid_774346
  var valid_774347 = header.getOrDefault("X-Amz-Security-Token")
  valid_774347 = validateParameter(valid_774347, JString, required = false,
                                 default = nil)
  if valid_774347 != nil:
    section.add "X-Amz-Security-Token", valid_774347
  var valid_774348 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774348 = validateParameter(valid_774348, JString, required = false,
                                 default = nil)
  if valid_774348 != nil:
    section.add "X-Amz-Content-Sha256", valid_774348
  var valid_774349 = header.getOrDefault("X-Amz-Algorithm")
  valid_774349 = validateParameter(valid_774349, JString, required = false,
                                 default = nil)
  if valid_774349 != nil:
    section.add "X-Amz-Algorithm", valid_774349
  var valid_774350 = header.getOrDefault("X-Amz-Signature")
  valid_774350 = validateParameter(valid_774350, JString, required = false,
                                 default = nil)
  if valid_774350 != nil:
    section.add "X-Amz-Signature", valid_774350
  var valid_774351 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774351 = validateParameter(valid_774351, JString, required = false,
                                 default = nil)
  if valid_774351 != nil:
    section.add "X-Amz-SignedHeaders", valid_774351
  var valid_774352 = header.getOrDefault("X-Amz-Credential")
  valid_774352 = validateParameter(valid_774352, JString, required = false,
                                 default = nil)
  if valid_774352 != nil:
    section.add "X-Amz-Credential", valid_774352
  result.add "header", section
  ## parameters in `formData` object:
  ##   TemplateName: JString (required)
  ##               : The name of the template you want to retrieve.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TemplateName` field"
  var valid_774353 = formData.getOrDefault("TemplateName")
  valid_774353 = validateParameter(valid_774353, JString, required = true,
                                 default = nil)
  if valid_774353 != nil:
    section.add "TemplateName", valid_774353
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774354: Call_PostGetTemplate_774341; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Displays the template object (which includes the Subject line, HTML part and text part) for the template you specify.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_774354.validator(path, query, header, formData, body)
  let scheme = call_774354.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774354.url(scheme.get, call_774354.host, call_774354.base,
                         call_774354.route, valid.getOrDefault("path"))
  result = hook(call_774354, url, valid)

proc call*(call_774355: Call_PostGetTemplate_774341; TemplateName: string;
          Action: string = "GetTemplate"; Version: string = "2010-12-01"): Recallable =
  ## postGetTemplate
  ## <p>Displays the template object (which includes the Subject line, HTML part and text part) for the template you specify.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the template you want to retrieve.
  ##   Version: string (required)
  var query_774356 = newJObject()
  var formData_774357 = newJObject()
  add(query_774356, "Action", newJString(Action))
  add(formData_774357, "TemplateName", newJString(TemplateName))
  add(query_774356, "Version", newJString(Version))
  result = call_774355.call(nil, query_774356, nil, formData_774357, nil)

var postGetTemplate* = Call_PostGetTemplate_774341(name: "postGetTemplate",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=GetTemplate", validator: validate_PostGetTemplate_774342,
    base: "/", url: url_PostGetTemplate_774343, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetTemplate_774325 = ref object of OpenApiRestCall_772597
proc url_GetGetTemplate_774327(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetTemplate_774326(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Displays the template object (which includes the Subject line, HTML part and text part) for the template you specify.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the template you want to retrieve.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774328 = query.getOrDefault("Action")
  valid_774328 = validateParameter(valid_774328, JString, required = true,
                                 default = newJString("GetTemplate"))
  if valid_774328 != nil:
    section.add "Action", valid_774328
  var valid_774329 = query.getOrDefault("TemplateName")
  valid_774329 = validateParameter(valid_774329, JString, required = true,
                                 default = nil)
  if valid_774329 != nil:
    section.add "TemplateName", valid_774329
  var valid_774330 = query.getOrDefault("Version")
  valid_774330 = validateParameter(valid_774330, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774330 != nil:
    section.add "Version", valid_774330
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774331 = header.getOrDefault("X-Amz-Date")
  valid_774331 = validateParameter(valid_774331, JString, required = false,
                                 default = nil)
  if valid_774331 != nil:
    section.add "X-Amz-Date", valid_774331
  var valid_774332 = header.getOrDefault("X-Amz-Security-Token")
  valid_774332 = validateParameter(valid_774332, JString, required = false,
                                 default = nil)
  if valid_774332 != nil:
    section.add "X-Amz-Security-Token", valid_774332
  var valid_774333 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774333 = validateParameter(valid_774333, JString, required = false,
                                 default = nil)
  if valid_774333 != nil:
    section.add "X-Amz-Content-Sha256", valid_774333
  var valid_774334 = header.getOrDefault("X-Amz-Algorithm")
  valid_774334 = validateParameter(valid_774334, JString, required = false,
                                 default = nil)
  if valid_774334 != nil:
    section.add "X-Amz-Algorithm", valid_774334
  var valid_774335 = header.getOrDefault("X-Amz-Signature")
  valid_774335 = validateParameter(valid_774335, JString, required = false,
                                 default = nil)
  if valid_774335 != nil:
    section.add "X-Amz-Signature", valid_774335
  var valid_774336 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774336 = validateParameter(valid_774336, JString, required = false,
                                 default = nil)
  if valid_774336 != nil:
    section.add "X-Amz-SignedHeaders", valid_774336
  var valid_774337 = header.getOrDefault("X-Amz-Credential")
  valid_774337 = validateParameter(valid_774337, JString, required = false,
                                 default = nil)
  if valid_774337 != nil:
    section.add "X-Amz-Credential", valid_774337
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774338: Call_GetGetTemplate_774325; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Displays the template object (which includes the Subject line, HTML part and text part) for the template you specify.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_774338.validator(path, query, header, formData, body)
  let scheme = call_774338.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774338.url(scheme.get, call_774338.host, call_774338.base,
                         call_774338.route, valid.getOrDefault("path"))
  result = hook(call_774338, url, valid)

proc call*(call_774339: Call_GetGetTemplate_774325; TemplateName: string;
          Action: string = "GetTemplate"; Version: string = "2010-12-01"): Recallable =
  ## getGetTemplate
  ## <p>Displays the template object (which includes the Subject line, HTML part and text part) for the template you specify.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the template you want to retrieve.
  ##   Version: string (required)
  var query_774340 = newJObject()
  add(query_774340, "Action", newJString(Action))
  add(query_774340, "TemplateName", newJString(TemplateName))
  add(query_774340, "Version", newJString(Version))
  result = call_774339.call(nil, query_774340, nil, nil, nil)

var getGetTemplate* = Call_GetGetTemplate_774325(name: "getGetTemplate",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=GetTemplate", validator: validate_GetGetTemplate_774326,
    base: "/", url: url_GetGetTemplate_774327, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListConfigurationSets_774375 = ref object of OpenApiRestCall_772597
proc url_PostListConfigurationSets_774377(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListConfigurationSets_774376(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Provides a list of the configuration sets associated with your Amazon SES account in the current AWS Region. For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second. This operation will return up to 1,000 configuration sets each time it is run. If your Amazon SES account has more than 1,000 configuration sets, this operation will also return a NextToken element. You can then execute the <code>ListConfigurationSets</code> operation again, passing the <code>NextToken</code> parameter and the value of the NextToken element to retrieve additional results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774378 = query.getOrDefault("Action")
  valid_774378 = validateParameter(valid_774378, JString, required = true,
                                 default = newJString("ListConfigurationSets"))
  if valid_774378 != nil:
    section.add "Action", valid_774378
  var valid_774379 = query.getOrDefault("Version")
  valid_774379 = validateParameter(valid_774379, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774379 != nil:
    section.add "Version", valid_774379
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774380 = header.getOrDefault("X-Amz-Date")
  valid_774380 = validateParameter(valid_774380, JString, required = false,
                                 default = nil)
  if valid_774380 != nil:
    section.add "X-Amz-Date", valid_774380
  var valid_774381 = header.getOrDefault("X-Amz-Security-Token")
  valid_774381 = validateParameter(valid_774381, JString, required = false,
                                 default = nil)
  if valid_774381 != nil:
    section.add "X-Amz-Security-Token", valid_774381
  var valid_774382 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774382 = validateParameter(valid_774382, JString, required = false,
                                 default = nil)
  if valid_774382 != nil:
    section.add "X-Amz-Content-Sha256", valid_774382
  var valid_774383 = header.getOrDefault("X-Amz-Algorithm")
  valid_774383 = validateParameter(valid_774383, JString, required = false,
                                 default = nil)
  if valid_774383 != nil:
    section.add "X-Amz-Algorithm", valid_774383
  var valid_774384 = header.getOrDefault("X-Amz-Signature")
  valid_774384 = validateParameter(valid_774384, JString, required = false,
                                 default = nil)
  if valid_774384 != nil:
    section.add "X-Amz-Signature", valid_774384
  var valid_774385 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774385 = validateParameter(valid_774385, JString, required = false,
                                 default = nil)
  if valid_774385 != nil:
    section.add "X-Amz-SignedHeaders", valid_774385
  var valid_774386 = header.getOrDefault("X-Amz-Credential")
  valid_774386 = validateParameter(valid_774386, JString, required = false,
                                 default = nil)
  if valid_774386 != nil:
    section.add "X-Amz-Credential", valid_774386
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : A token returned from a previous call to <code>ListConfigurationSets</code> to indicate the position of the configuration set in the configuration set list.
  ##   MaxItems: JInt
  ##           : The number of configuration sets to return.
  section = newJObject()
  var valid_774387 = formData.getOrDefault("NextToken")
  valid_774387 = validateParameter(valid_774387, JString, required = false,
                                 default = nil)
  if valid_774387 != nil:
    section.add "NextToken", valid_774387
  var valid_774388 = formData.getOrDefault("MaxItems")
  valid_774388 = validateParameter(valid_774388, JInt, required = false, default = nil)
  if valid_774388 != nil:
    section.add "MaxItems", valid_774388
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774389: Call_PostListConfigurationSets_774375; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Provides a list of the configuration sets associated with your Amazon SES account in the current AWS Region. For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second. This operation will return up to 1,000 configuration sets each time it is run. If your Amazon SES account has more than 1,000 configuration sets, this operation will also return a NextToken element. You can then execute the <code>ListConfigurationSets</code> operation again, passing the <code>NextToken</code> parameter and the value of the NextToken element to retrieve additional results.</p>
  ## 
  let valid = call_774389.validator(path, query, header, formData, body)
  let scheme = call_774389.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774389.url(scheme.get, call_774389.host, call_774389.base,
                         call_774389.route, valid.getOrDefault("path"))
  result = hook(call_774389, url, valid)

proc call*(call_774390: Call_PostListConfigurationSets_774375;
          NextToken: string = ""; Action: string = "ListConfigurationSets";
          MaxItems: int = 0; Version: string = "2010-12-01"): Recallable =
  ## postListConfigurationSets
  ## <p>Provides a list of the configuration sets associated with your Amazon SES account in the current AWS Region. For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second. This operation will return up to 1,000 configuration sets each time it is run. If your Amazon SES account has more than 1,000 configuration sets, this operation will also return a NextToken element. You can then execute the <code>ListConfigurationSets</code> operation again, passing the <code>NextToken</code> parameter and the value of the NextToken element to retrieve additional results.</p>
  ##   NextToken: string
  ##            : A token returned from a previous call to <code>ListConfigurationSets</code> to indicate the position of the configuration set in the configuration set list.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : The number of configuration sets to return.
  ##   Version: string (required)
  var query_774391 = newJObject()
  var formData_774392 = newJObject()
  add(formData_774392, "NextToken", newJString(NextToken))
  add(query_774391, "Action", newJString(Action))
  add(formData_774392, "MaxItems", newJInt(MaxItems))
  add(query_774391, "Version", newJString(Version))
  result = call_774390.call(nil, query_774391, nil, formData_774392, nil)

var postListConfigurationSets* = Call_PostListConfigurationSets_774375(
    name: "postListConfigurationSets", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ListConfigurationSets",
    validator: validate_PostListConfigurationSets_774376, base: "/",
    url: url_PostListConfigurationSets_774377,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListConfigurationSets_774358 = ref object of OpenApiRestCall_772597
proc url_GetListConfigurationSets_774360(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListConfigurationSets_774359(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Provides a list of the configuration sets associated with your Amazon SES account in the current AWS Region. For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second. This operation will return up to 1,000 configuration sets each time it is run. If your Amazon SES account has more than 1,000 configuration sets, this operation will also return a NextToken element. You can then execute the <code>ListConfigurationSets</code> operation again, passing the <code>NextToken</code> parameter and the value of the NextToken element to retrieve additional results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : A token returned from a previous call to <code>ListConfigurationSets</code> to indicate the position of the configuration set in the configuration set list.
  ##   Action: JString (required)
  ##   MaxItems: JInt
  ##           : The number of configuration sets to return.
  ##   Version: JString (required)
  section = newJObject()
  var valid_774361 = query.getOrDefault("NextToken")
  valid_774361 = validateParameter(valid_774361, JString, required = false,
                                 default = nil)
  if valid_774361 != nil:
    section.add "NextToken", valid_774361
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774362 = query.getOrDefault("Action")
  valid_774362 = validateParameter(valid_774362, JString, required = true,
                                 default = newJString("ListConfigurationSets"))
  if valid_774362 != nil:
    section.add "Action", valid_774362
  var valid_774363 = query.getOrDefault("MaxItems")
  valid_774363 = validateParameter(valid_774363, JInt, required = false, default = nil)
  if valid_774363 != nil:
    section.add "MaxItems", valid_774363
  var valid_774364 = query.getOrDefault("Version")
  valid_774364 = validateParameter(valid_774364, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774364 != nil:
    section.add "Version", valid_774364
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774365 = header.getOrDefault("X-Amz-Date")
  valid_774365 = validateParameter(valid_774365, JString, required = false,
                                 default = nil)
  if valid_774365 != nil:
    section.add "X-Amz-Date", valid_774365
  var valid_774366 = header.getOrDefault("X-Amz-Security-Token")
  valid_774366 = validateParameter(valid_774366, JString, required = false,
                                 default = nil)
  if valid_774366 != nil:
    section.add "X-Amz-Security-Token", valid_774366
  var valid_774367 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774367 = validateParameter(valid_774367, JString, required = false,
                                 default = nil)
  if valid_774367 != nil:
    section.add "X-Amz-Content-Sha256", valid_774367
  var valid_774368 = header.getOrDefault("X-Amz-Algorithm")
  valid_774368 = validateParameter(valid_774368, JString, required = false,
                                 default = nil)
  if valid_774368 != nil:
    section.add "X-Amz-Algorithm", valid_774368
  var valid_774369 = header.getOrDefault("X-Amz-Signature")
  valid_774369 = validateParameter(valid_774369, JString, required = false,
                                 default = nil)
  if valid_774369 != nil:
    section.add "X-Amz-Signature", valid_774369
  var valid_774370 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774370 = validateParameter(valid_774370, JString, required = false,
                                 default = nil)
  if valid_774370 != nil:
    section.add "X-Amz-SignedHeaders", valid_774370
  var valid_774371 = header.getOrDefault("X-Amz-Credential")
  valid_774371 = validateParameter(valid_774371, JString, required = false,
                                 default = nil)
  if valid_774371 != nil:
    section.add "X-Amz-Credential", valid_774371
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774372: Call_GetListConfigurationSets_774358; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Provides a list of the configuration sets associated with your Amazon SES account in the current AWS Region. For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second. This operation will return up to 1,000 configuration sets each time it is run. If your Amazon SES account has more than 1,000 configuration sets, this operation will also return a NextToken element. You can then execute the <code>ListConfigurationSets</code> operation again, passing the <code>NextToken</code> parameter and the value of the NextToken element to retrieve additional results.</p>
  ## 
  let valid = call_774372.validator(path, query, header, formData, body)
  let scheme = call_774372.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774372.url(scheme.get, call_774372.host, call_774372.base,
                         call_774372.route, valid.getOrDefault("path"))
  result = hook(call_774372, url, valid)

proc call*(call_774373: Call_GetListConfigurationSets_774358;
          NextToken: string = ""; Action: string = "ListConfigurationSets";
          MaxItems: int = 0; Version: string = "2010-12-01"): Recallable =
  ## getListConfigurationSets
  ## <p>Provides a list of the configuration sets associated with your Amazon SES account in the current AWS Region. For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second. This operation will return up to 1,000 configuration sets each time it is run. If your Amazon SES account has more than 1,000 configuration sets, this operation will also return a NextToken element. You can then execute the <code>ListConfigurationSets</code> operation again, passing the <code>NextToken</code> parameter and the value of the NextToken element to retrieve additional results.</p>
  ##   NextToken: string
  ##            : A token returned from a previous call to <code>ListConfigurationSets</code> to indicate the position of the configuration set in the configuration set list.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : The number of configuration sets to return.
  ##   Version: string (required)
  var query_774374 = newJObject()
  add(query_774374, "NextToken", newJString(NextToken))
  add(query_774374, "Action", newJString(Action))
  add(query_774374, "MaxItems", newJInt(MaxItems))
  add(query_774374, "Version", newJString(Version))
  result = call_774373.call(nil, query_774374, nil, nil, nil)

var getListConfigurationSets* = Call_GetListConfigurationSets_774358(
    name: "getListConfigurationSets", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=ListConfigurationSets",
    validator: validate_GetListConfigurationSets_774359, base: "/",
    url: url_GetListConfigurationSets_774360, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListCustomVerificationEmailTemplates_774410 = ref object of OpenApiRestCall_772597
proc url_PostListCustomVerificationEmailTemplates_774412(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListCustomVerificationEmailTemplates_774411(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the existing custom verification email templates for your account in the current AWS Region.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774413 = query.getOrDefault("Action")
  valid_774413 = validateParameter(valid_774413, JString, required = true, default = newJString(
      "ListCustomVerificationEmailTemplates"))
  if valid_774413 != nil:
    section.add "Action", valid_774413
  var valid_774414 = query.getOrDefault("Version")
  valid_774414 = validateParameter(valid_774414, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774414 != nil:
    section.add "Version", valid_774414
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774415 = header.getOrDefault("X-Amz-Date")
  valid_774415 = validateParameter(valid_774415, JString, required = false,
                                 default = nil)
  if valid_774415 != nil:
    section.add "X-Amz-Date", valid_774415
  var valid_774416 = header.getOrDefault("X-Amz-Security-Token")
  valid_774416 = validateParameter(valid_774416, JString, required = false,
                                 default = nil)
  if valid_774416 != nil:
    section.add "X-Amz-Security-Token", valid_774416
  var valid_774417 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774417 = validateParameter(valid_774417, JString, required = false,
                                 default = nil)
  if valid_774417 != nil:
    section.add "X-Amz-Content-Sha256", valid_774417
  var valid_774418 = header.getOrDefault("X-Amz-Algorithm")
  valid_774418 = validateParameter(valid_774418, JString, required = false,
                                 default = nil)
  if valid_774418 != nil:
    section.add "X-Amz-Algorithm", valid_774418
  var valid_774419 = header.getOrDefault("X-Amz-Signature")
  valid_774419 = validateParameter(valid_774419, JString, required = false,
                                 default = nil)
  if valid_774419 != nil:
    section.add "X-Amz-Signature", valid_774419
  var valid_774420 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774420 = validateParameter(valid_774420, JString, required = false,
                                 default = nil)
  if valid_774420 != nil:
    section.add "X-Amz-SignedHeaders", valid_774420
  var valid_774421 = header.getOrDefault("X-Amz-Credential")
  valid_774421 = validateParameter(valid_774421, JString, required = false,
                                 default = nil)
  if valid_774421 != nil:
    section.add "X-Amz-Credential", valid_774421
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : An array the contains the name and creation time stamp for each template in your Amazon SES account.
  ##   MaxResults: JInt
  ##             : The maximum number of custom verification email templates to return. This value must be at least 1 and less than or equal to 50. If you do not specify a value, or if you specify a value less than 1 or greater than 50, the operation will return up to 50 results.
  section = newJObject()
  var valid_774422 = formData.getOrDefault("NextToken")
  valid_774422 = validateParameter(valid_774422, JString, required = false,
                                 default = nil)
  if valid_774422 != nil:
    section.add "NextToken", valid_774422
  var valid_774423 = formData.getOrDefault("MaxResults")
  valid_774423 = validateParameter(valid_774423, JInt, required = false, default = nil)
  if valid_774423 != nil:
    section.add "MaxResults", valid_774423
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774424: Call_PostListCustomVerificationEmailTemplates_774410;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Lists the existing custom verification email templates for your account in the current AWS Region.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_774424.validator(path, query, header, formData, body)
  let scheme = call_774424.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774424.url(scheme.get, call_774424.host, call_774424.base,
                         call_774424.route, valid.getOrDefault("path"))
  result = hook(call_774424, url, valid)

proc call*(call_774425: Call_PostListCustomVerificationEmailTemplates_774410;
          NextToken: string = ""; MaxResults: int = 0;
          Action: string = "ListCustomVerificationEmailTemplates";
          Version: string = "2010-12-01"): Recallable =
  ## postListCustomVerificationEmailTemplates
  ## <p>Lists the existing custom verification email templates for your account in the current AWS Region.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : An array the contains the name and creation time stamp for each template in your Amazon SES account.
  ##   MaxResults: int
  ##             : The maximum number of custom verification email templates to return. This value must be at least 1 and less than or equal to 50. If you do not specify a value, or if you specify a value less than 1 or greater than 50, the operation will return up to 50 results.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774426 = newJObject()
  var formData_774427 = newJObject()
  add(formData_774427, "NextToken", newJString(NextToken))
  add(formData_774427, "MaxResults", newJInt(MaxResults))
  add(query_774426, "Action", newJString(Action))
  add(query_774426, "Version", newJString(Version))
  result = call_774425.call(nil, query_774426, nil, formData_774427, nil)

var postListCustomVerificationEmailTemplates* = Call_PostListCustomVerificationEmailTemplates_774410(
    name: "postListCustomVerificationEmailTemplates", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=ListCustomVerificationEmailTemplates",
    validator: validate_PostListCustomVerificationEmailTemplates_774411,
    base: "/", url: url_PostListCustomVerificationEmailTemplates_774412,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListCustomVerificationEmailTemplates_774393 = ref object of OpenApiRestCall_772597
proc url_GetListCustomVerificationEmailTemplates_774395(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListCustomVerificationEmailTemplates_774394(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the existing custom verification email templates for your account in the current AWS Region.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : An array the contains the name and creation time stamp for each template in your Amazon SES account.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxResults: JInt
  ##             : The maximum number of custom verification email templates to return. This value must be at least 1 and less than or equal to 50. If you do not specify a value, or if you specify a value less than 1 or greater than 50, the operation will return up to 50 results.
  section = newJObject()
  var valid_774396 = query.getOrDefault("NextToken")
  valid_774396 = validateParameter(valid_774396, JString, required = false,
                                 default = nil)
  if valid_774396 != nil:
    section.add "NextToken", valid_774396
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774397 = query.getOrDefault("Action")
  valid_774397 = validateParameter(valid_774397, JString, required = true, default = newJString(
      "ListCustomVerificationEmailTemplates"))
  if valid_774397 != nil:
    section.add "Action", valid_774397
  var valid_774398 = query.getOrDefault("Version")
  valid_774398 = validateParameter(valid_774398, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774398 != nil:
    section.add "Version", valid_774398
  var valid_774399 = query.getOrDefault("MaxResults")
  valid_774399 = validateParameter(valid_774399, JInt, required = false, default = nil)
  if valid_774399 != nil:
    section.add "MaxResults", valid_774399
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774400 = header.getOrDefault("X-Amz-Date")
  valid_774400 = validateParameter(valid_774400, JString, required = false,
                                 default = nil)
  if valid_774400 != nil:
    section.add "X-Amz-Date", valid_774400
  var valid_774401 = header.getOrDefault("X-Amz-Security-Token")
  valid_774401 = validateParameter(valid_774401, JString, required = false,
                                 default = nil)
  if valid_774401 != nil:
    section.add "X-Amz-Security-Token", valid_774401
  var valid_774402 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774402 = validateParameter(valid_774402, JString, required = false,
                                 default = nil)
  if valid_774402 != nil:
    section.add "X-Amz-Content-Sha256", valid_774402
  var valid_774403 = header.getOrDefault("X-Amz-Algorithm")
  valid_774403 = validateParameter(valid_774403, JString, required = false,
                                 default = nil)
  if valid_774403 != nil:
    section.add "X-Amz-Algorithm", valid_774403
  var valid_774404 = header.getOrDefault("X-Amz-Signature")
  valid_774404 = validateParameter(valid_774404, JString, required = false,
                                 default = nil)
  if valid_774404 != nil:
    section.add "X-Amz-Signature", valid_774404
  var valid_774405 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774405 = validateParameter(valid_774405, JString, required = false,
                                 default = nil)
  if valid_774405 != nil:
    section.add "X-Amz-SignedHeaders", valid_774405
  var valid_774406 = header.getOrDefault("X-Amz-Credential")
  valid_774406 = validateParameter(valid_774406, JString, required = false,
                                 default = nil)
  if valid_774406 != nil:
    section.add "X-Amz-Credential", valid_774406
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774407: Call_GetListCustomVerificationEmailTemplates_774393;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Lists the existing custom verification email templates for your account in the current AWS Region.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_774407.validator(path, query, header, formData, body)
  let scheme = call_774407.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774407.url(scheme.get, call_774407.host, call_774407.base,
                         call_774407.route, valid.getOrDefault("path"))
  result = hook(call_774407, url, valid)

proc call*(call_774408: Call_GetListCustomVerificationEmailTemplates_774393;
          NextToken: string = "";
          Action: string = "ListCustomVerificationEmailTemplates";
          Version: string = "2010-12-01"; MaxResults: int = 0): Recallable =
  ## getListCustomVerificationEmailTemplates
  ## <p>Lists the existing custom verification email templates for your account in the current AWS Region.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : An array the contains the name and creation time stamp for each template in your Amazon SES account.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxResults: int
  ##             : The maximum number of custom verification email templates to return. This value must be at least 1 and less than or equal to 50. If you do not specify a value, or if you specify a value less than 1 or greater than 50, the operation will return up to 50 results.
  var query_774409 = newJObject()
  add(query_774409, "NextToken", newJString(NextToken))
  add(query_774409, "Action", newJString(Action))
  add(query_774409, "Version", newJString(Version))
  add(query_774409, "MaxResults", newJInt(MaxResults))
  result = call_774408.call(nil, query_774409, nil, nil, nil)

var getListCustomVerificationEmailTemplates* = Call_GetListCustomVerificationEmailTemplates_774393(
    name: "getListCustomVerificationEmailTemplates", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=ListCustomVerificationEmailTemplates",
    validator: validate_GetListCustomVerificationEmailTemplates_774394, base: "/",
    url: url_GetListCustomVerificationEmailTemplates_774395,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListIdentities_774446 = ref object of OpenApiRestCall_772597
proc url_PostListIdentities_774448(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListIdentities_774447(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Returns a list containing all of the identities (email addresses and domains) for your AWS account in the current AWS Region, regardless of verification status.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774449 = query.getOrDefault("Action")
  valid_774449 = validateParameter(valid_774449, JString, required = true,
                                 default = newJString("ListIdentities"))
  if valid_774449 != nil:
    section.add "Action", valid_774449
  var valid_774450 = query.getOrDefault("Version")
  valid_774450 = validateParameter(valid_774450, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774450 != nil:
    section.add "Version", valid_774450
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774451 = header.getOrDefault("X-Amz-Date")
  valid_774451 = validateParameter(valid_774451, JString, required = false,
                                 default = nil)
  if valid_774451 != nil:
    section.add "X-Amz-Date", valid_774451
  var valid_774452 = header.getOrDefault("X-Amz-Security-Token")
  valid_774452 = validateParameter(valid_774452, JString, required = false,
                                 default = nil)
  if valid_774452 != nil:
    section.add "X-Amz-Security-Token", valid_774452
  var valid_774453 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774453 = validateParameter(valid_774453, JString, required = false,
                                 default = nil)
  if valid_774453 != nil:
    section.add "X-Amz-Content-Sha256", valid_774453
  var valid_774454 = header.getOrDefault("X-Amz-Algorithm")
  valid_774454 = validateParameter(valid_774454, JString, required = false,
                                 default = nil)
  if valid_774454 != nil:
    section.add "X-Amz-Algorithm", valid_774454
  var valid_774455 = header.getOrDefault("X-Amz-Signature")
  valid_774455 = validateParameter(valid_774455, JString, required = false,
                                 default = nil)
  if valid_774455 != nil:
    section.add "X-Amz-Signature", valid_774455
  var valid_774456 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774456 = validateParameter(valid_774456, JString, required = false,
                                 default = nil)
  if valid_774456 != nil:
    section.add "X-Amz-SignedHeaders", valid_774456
  var valid_774457 = header.getOrDefault("X-Amz-Credential")
  valid_774457 = validateParameter(valid_774457, JString, required = false,
                                 default = nil)
  if valid_774457 != nil:
    section.add "X-Amz-Credential", valid_774457
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : The token to use for pagination.
  ##   IdentityType: JString
  ##               : The type of the identities to list. Possible values are "EmailAddress" and "Domain". If this parameter is omitted, then all identities will be listed.
  ##   MaxItems: JInt
  ##           : The maximum number of identities per page. Possible values are 1-1000 inclusive.
  section = newJObject()
  var valid_774458 = formData.getOrDefault("NextToken")
  valid_774458 = validateParameter(valid_774458, JString, required = false,
                                 default = nil)
  if valid_774458 != nil:
    section.add "NextToken", valid_774458
  var valid_774459 = formData.getOrDefault("IdentityType")
  valid_774459 = validateParameter(valid_774459, JString, required = false,
                                 default = newJString("EmailAddress"))
  if valid_774459 != nil:
    section.add "IdentityType", valid_774459
  var valid_774460 = formData.getOrDefault("MaxItems")
  valid_774460 = validateParameter(valid_774460, JInt, required = false, default = nil)
  if valid_774460 != nil:
    section.add "MaxItems", valid_774460
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774461: Call_PostListIdentities_774446; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list containing all of the identities (email addresses and domains) for your AWS account in the current AWS Region, regardless of verification status.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_774461.validator(path, query, header, formData, body)
  let scheme = call_774461.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774461.url(scheme.get, call_774461.host, call_774461.base,
                         call_774461.route, valid.getOrDefault("path"))
  result = hook(call_774461, url, valid)

proc call*(call_774462: Call_PostListIdentities_774446; NextToken: string = "";
          IdentityType: string = "EmailAddress"; Action: string = "ListIdentities";
          MaxItems: int = 0; Version: string = "2010-12-01"): Recallable =
  ## postListIdentities
  ## <p>Returns a list containing all of the identities (email addresses and domains) for your AWS account in the current AWS Region, regardless of verification status.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : The token to use for pagination.
  ##   IdentityType: string
  ##               : The type of the identities to list. Possible values are "EmailAddress" and "Domain". If this parameter is omitted, then all identities will be listed.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : The maximum number of identities per page. Possible values are 1-1000 inclusive.
  ##   Version: string (required)
  var query_774463 = newJObject()
  var formData_774464 = newJObject()
  add(formData_774464, "NextToken", newJString(NextToken))
  add(formData_774464, "IdentityType", newJString(IdentityType))
  add(query_774463, "Action", newJString(Action))
  add(formData_774464, "MaxItems", newJInt(MaxItems))
  add(query_774463, "Version", newJString(Version))
  result = call_774462.call(nil, query_774463, nil, formData_774464, nil)

var postListIdentities* = Call_PostListIdentities_774446(
    name: "postListIdentities", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ListIdentities",
    validator: validate_PostListIdentities_774447, base: "/",
    url: url_PostListIdentities_774448, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListIdentities_774428 = ref object of OpenApiRestCall_772597
proc url_GetListIdentities_774430(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListIdentities_774429(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Returns a list containing all of the identities (email addresses and domains) for your AWS account in the current AWS Region, regardless of verification status.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : The token to use for pagination.
  ##   Action: JString (required)
  ##   IdentityType: JString
  ##               : The type of the identities to list. Possible values are "EmailAddress" and "Domain". If this parameter is omitted, then all identities will be listed.
  ##   MaxItems: JInt
  ##           : The maximum number of identities per page. Possible values are 1-1000 inclusive.
  ##   Version: JString (required)
  section = newJObject()
  var valid_774431 = query.getOrDefault("NextToken")
  valid_774431 = validateParameter(valid_774431, JString, required = false,
                                 default = nil)
  if valid_774431 != nil:
    section.add "NextToken", valid_774431
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774432 = query.getOrDefault("Action")
  valid_774432 = validateParameter(valid_774432, JString, required = true,
                                 default = newJString("ListIdentities"))
  if valid_774432 != nil:
    section.add "Action", valid_774432
  var valid_774433 = query.getOrDefault("IdentityType")
  valid_774433 = validateParameter(valid_774433, JString, required = false,
                                 default = newJString("EmailAddress"))
  if valid_774433 != nil:
    section.add "IdentityType", valid_774433
  var valid_774434 = query.getOrDefault("MaxItems")
  valid_774434 = validateParameter(valid_774434, JInt, required = false, default = nil)
  if valid_774434 != nil:
    section.add "MaxItems", valid_774434
  var valid_774435 = query.getOrDefault("Version")
  valid_774435 = validateParameter(valid_774435, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774435 != nil:
    section.add "Version", valid_774435
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774436 = header.getOrDefault("X-Amz-Date")
  valid_774436 = validateParameter(valid_774436, JString, required = false,
                                 default = nil)
  if valid_774436 != nil:
    section.add "X-Amz-Date", valid_774436
  var valid_774437 = header.getOrDefault("X-Amz-Security-Token")
  valid_774437 = validateParameter(valid_774437, JString, required = false,
                                 default = nil)
  if valid_774437 != nil:
    section.add "X-Amz-Security-Token", valid_774437
  var valid_774438 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774438 = validateParameter(valid_774438, JString, required = false,
                                 default = nil)
  if valid_774438 != nil:
    section.add "X-Amz-Content-Sha256", valid_774438
  var valid_774439 = header.getOrDefault("X-Amz-Algorithm")
  valid_774439 = validateParameter(valid_774439, JString, required = false,
                                 default = nil)
  if valid_774439 != nil:
    section.add "X-Amz-Algorithm", valid_774439
  var valid_774440 = header.getOrDefault("X-Amz-Signature")
  valid_774440 = validateParameter(valid_774440, JString, required = false,
                                 default = nil)
  if valid_774440 != nil:
    section.add "X-Amz-Signature", valid_774440
  var valid_774441 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774441 = validateParameter(valid_774441, JString, required = false,
                                 default = nil)
  if valid_774441 != nil:
    section.add "X-Amz-SignedHeaders", valid_774441
  var valid_774442 = header.getOrDefault("X-Amz-Credential")
  valid_774442 = validateParameter(valid_774442, JString, required = false,
                                 default = nil)
  if valid_774442 != nil:
    section.add "X-Amz-Credential", valid_774442
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774443: Call_GetListIdentities_774428; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list containing all of the identities (email addresses and domains) for your AWS account in the current AWS Region, regardless of verification status.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_774443.validator(path, query, header, formData, body)
  let scheme = call_774443.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774443.url(scheme.get, call_774443.host, call_774443.base,
                         call_774443.route, valid.getOrDefault("path"))
  result = hook(call_774443, url, valid)

proc call*(call_774444: Call_GetListIdentities_774428; NextToken: string = "";
          Action: string = "ListIdentities"; IdentityType: string = "EmailAddress";
          MaxItems: int = 0; Version: string = "2010-12-01"): Recallable =
  ## getListIdentities
  ## <p>Returns a list containing all of the identities (email addresses and domains) for your AWS account in the current AWS Region, regardless of verification status.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : The token to use for pagination.
  ##   Action: string (required)
  ##   IdentityType: string
  ##               : The type of the identities to list. Possible values are "EmailAddress" and "Domain". If this parameter is omitted, then all identities will be listed.
  ##   MaxItems: int
  ##           : The maximum number of identities per page. Possible values are 1-1000 inclusive.
  ##   Version: string (required)
  var query_774445 = newJObject()
  add(query_774445, "NextToken", newJString(NextToken))
  add(query_774445, "Action", newJString(Action))
  add(query_774445, "IdentityType", newJString(IdentityType))
  add(query_774445, "MaxItems", newJInt(MaxItems))
  add(query_774445, "Version", newJString(Version))
  result = call_774444.call(nil, query_774445, nil, nil, nil)

var getListIdentities* = Call_GetListIdentities_774428(name: "getListIdentities",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=ListIdentities", validator: validate_GetListIdentities_774429,
    base: "/", url: url_GetListIdentities_774430,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListIdentityPolicies_774481 = ref object of OpenApiRestCall_772597
proc url_PostListIdentityPolicies_774483(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListIdentityPolicies_774482(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of sending authorization policies that are attached to the given identity (an email address or a domain). This API returns only a list. If you want the actual policy content, you can use <code>GetIdentityPolicies</code>.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774484 = query.getOrDefault("Action")
  valid_774484 = validateParameter(valid_774484, JString, required = true,
                                 default = newJString("ListIdentityPolicies"))
  if valid_774484 != nil:
    section.add "Action", valid_774484
  var valid_774485 = query.getOrDefault("Version")
  valid_774485 = validateParameter(valid_774485, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774485 != nil:
    section.add "Version", valid_774485
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774486 = header.getOrDefault("X-Amz-Date")
  valid_774486 = validateParameter(valid_774486, JString, required = false,
                                 default = nil)
  if valid_774486 != nil:
    section.add "X-Amz-Date", valid_774486
  var valid_774487 = header.getOrDefault("X-Amz-Security-Token")
  valid_774487 = validateParameter(valid_774487, JString, required = false,
                                 default = nil)
  if valid_774487 != nil:
    section.add "X-Amz-Security-Token", valid_774487
  var valid_774488 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774488 = validateParameter(valid_774488, JString, required = false,
                                 default = nil)
  if valid_774488 != nil:
    section.add "X-Amz-Content-Sha256", valid_774488
  var valid_774489 = header.getOrDefault("X-Amz-Algorithm")
  valid_774489 = validateParameter(valid_774489, JString, required = false,
                                 default = nil)
  if valid_774489 != nil:
    section.add "X-Amz-Algorithm", valid_774489
  var valid_774490 = header.getOrDefault("X-Amz-Signature")
  valid_774490 = validateParameter(valid_774490, JString, required = false,
                                 default = nil)
  if valid_774490 != nil:
    section.add "X-Amz-Signature", valid_774490
  var valid_774491 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774491 = validateParameter(valid_774491, JString, required = false,
                                 default = nil)
  if valid_774491 != nil:
    section.add "X-Amz-SignedHeaders", valid_774491
  var valid_774492 = header.getOrDefault("X-Amz-Credential")
  valid_774492 = validateParameter(valid_774492, JString, required = false,
                                 default = nil)
  if valid_774492 != nil:
    section.add "X-Amz-Credential", valid_774492
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identity: JString (required)
  ##           : <p>The identity that is associated with the policy for which the policies will be listed. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identity` field"
  var valid_774493 = formData.getOrDefault("Identity")
  valid_774493 = validateParameter(valid_774493, JString, required = true,
                                 default = nil)
  if valid_774493 != nil:
    section.add "Identity", valid_774493
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774494: Call_PostListIdentityPolicies_774481; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list of sending authorization policies that are attached to the given identity (an email address or a domain). This API returns only a list. If you want the actual policy content, you can use <code>GetIdentityPolicies</code>.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_774494.validator(path, query, header, formData, body)
  let scheme = call_774494.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774494.url(scheme.get, call_774494.host, call_774494.base,
                         call_774494.route, valid.getOrDefault("path"))
  result = hook(call_774494, url, valid)

proc call*(call_774495: Call_PostListIdentityPolicies_774481; Identity: string;
          Action: string = "ListIdentityPolicies"; Version: string = "2010-12-01"): Recallable =
  ## postListIdentityPolicies
  ## <p>Returns a list of sending authorization policies that are attached to the given identity (an email address or a domain). This API returns only a list. If you want the actual policy content, you can use <code>GetIdentityPolicies</code>.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : <p>The identity that is associated with the policy for which the policies will be listed. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774496 = newJObject()
  var formData_774497 = newJObject()
  add(formData_774497, "Identity", newJString(Identity))
  add(query_774496, "Action", newJString(Action))
  add(query_774496, "Version", newJString(Version))
  result = call_774495.call(nil, query_774496, nil, formData_774497, nil)

var postListIdentityPolicies* = Call_PostListIdentityPolicies_774481(
    name: "postListIdentityPolicies", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ListIdentityPolicies",
    validator: validate_PostListIdentityPolicies_774482, base: "/",
    url: url_PostListIdentityPolicies_774483, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListIdentityPolicies_774465 = ref object of OpenApiRestCall_772597
proc url_GetListIdentityPolicies_774467(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListIdentityPolicies_774466(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of sending authorization policies that are attached to the given identity (an email address or a domain). This API returns only a list. If you want the actual policy content, you can use <code>GetIdentityPolicies</code>.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : <p>The identity that is associated with the policy for which the policies will be listed. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_774468 = query.getOrDefault("Identity")
  valid_774468 = validateParameter(valid_774468, JString, required = true,
                                 default = nil)
  if valid_774468 != nil:
    section.add "Identity", valid_774468
  var valid_774469 = query.getOrDefault("Action")
  valid_774469 = validateParameter(valid_774469, JString, required = true,
                                 default = newJString("ListIdentityPolicies"))
  if valid_774469 != nil:
    section.add "Action", valid_774469
  var valid_774470 = query.getOrDefault("Version")
  valid_774470 = validateParameter(valid_774470, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774470 != nil:
    section.add "Version", valid_774470
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774471 = header.getOrDefault("X-Amz-Date")
  valid_774471 = validateParameter(valid_774471, JString, required = false,
                                 default = nil)
  if valid_774471 != nil:
    section.add "X-Amz-Date", valid_774471
  var valid_774472 = header.getOrDefault("X-Amz-Security-Token")
  valid_774472 = validateParameter(valid_774472, JString, required = false,
                                 default = nil)
  if valid_774472 != nil:
    section.add "X-Amz-Security-Token", valid_774472
  var valid_774473 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774473 = validateParameter(valid_774473, JString, required = false,
                                 default = nil)
  if valid_774473 != nil:
    section.add "X-Amz-Content-Sha256", valid_774473
  var valid_774474 = header.getOrDefault("X-Amz-Algorithm")
  valid_774474 = validateParameter(valid_774474, JString, required = false,
                                 default = nil)
  if valid_774474 != nil:
    section.add "X-Amz-Algorithm", valid_774474
  var valid_774475 = header.getOrDefault("X-Amz-Signature")
  valid_774475 = validateParameter(valid_774475, JString, required = false,
                                 default = nil)
  if valid_774475 != nil:
    section.add "X-Amz-Signature", valid_774475
  var valid_774476 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774476 = validateParameter(valid_774476, JString, required = false,
                                 default = nil)
  if valid_774476 != nil:
    section.add "X-Amz-SignedHeaders", valid_774476
  var valid_774477 = header.getOrDefault("X-Amz-Credential")
  valid_774477 = validateParameter(valid_774477, JString, required = false,
                                 default = nil)
  if valid_774477 != nil:
    section.add "X-Amz-Credential", valid_774477
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774478: Call_GetListIdentityPolicies_774465; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list of sending authorization policies that are attached to the given identity (an email address or a domain). This API returns only a list. If you want the actual policy content, you can use <code>GetIdentityPolicies</code>.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_774478.validator(path, query, header, formData, body)
  let scheme = call_774478.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774478.url(scheme.get, call_774478.host, call_774478.base,
                         call_774478.route, valid.getOrDefault("path"))
  result = hook(call_774478, url, valid)

proc call*(call_774479: Call_GetListIdentityPolicies_774465; Identity: string;
          Action: string = "ListIdentityPolicies"; Version: string = "2010-12-01"): Recallable =
  ## getListIdentityPolicies
  ## <p>Returns a list of sending authorization policies that are attached to the given identity (an email address or a domain). This API returns only a list. If you want the actual policy content, you can use <code>GetIdentityPolicies</code>.</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : <p>The identity that is associated with the policy for which the policies will be listed. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774480 = newJObject()
  add(query_774480, "Identity", newJString(Identity))
  add(query_774480, "Action", newJString(Action))
  add(query_774480, "Version", newJString(Version))
  result = call_774479.call(nil, query_774480, nil, nil, nil)

var getListIdentityPolicies* = Call_GetListIdentityPolicies_774465(
    name: "getListIdentityPolicies", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=ListIdentityPolicies",
    validator: validate_GetListIdentityPolicies_774466, base: "/",
    url: url_GetListIdentityPolicies_774467, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListReceiptFilters_774513 = ref object of OpenApiRestCall_772597
proc url_PostListReceiptFilters_774515(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListReceiptFilters_774514(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IP address filters associated with your AWS account in the current AWS Region.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774516 = query.getOrDefault("Action")
  valid_774516 = validateParameter(valid_774516, JString, required = true,
                                 default = newJString("ListReceiptFilters"))
  if valid_774516 != nil:
    section.add "Action", valid_774516
  var valid_774517 = query.getOrDefault("Version")
  valid_774517 = validateParameter(valid_774517, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774517 != nil:
    section.add "Version", valid_774517
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774518 = header.getOrDefault("X-Amz-Date")
  valid_774518 = validateParameter(valid_774518, JString, required = false,
                                 default = nil)
  if valid_774518 != nil:
    section.add "X-Amz-Date", valid_774518
  var valid_774519 = header.getOrDefault("X-Amz-Security-Token")
  valid_774519 = validateParameter(valid_774519, JString, required = false,
                                 default = nil)
  if valid_774519 != nil:
    section.add "X-Amz-Security-Token", valid_774519
  var valid_774520 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774520 = validateParameter(valid_774520, JString, required = false,
                                 default = nil)
  if valid_774520 != nil:
    section.add "X-Amz-Content-Sha256", valid_774520
  var valid_774521 = header.getOrDefault("X-Amz-Algorithm")
  valid_774521 = validateParameter(valid_774521, JString, required = false,
                                 default = nil)
  if valid_774521 != nil:
    section.add "X-Amz-Algorithm", valid_774521
  var valid_774522 = header.getOrDefault("X-Amz-Signature")
  valid_774522 = validateParameter(valid_774522, JString, required = false,
                                 default = nil)
  if valid_774522 != nil:
    section.add "X-Amz-Signature", valid_774522
  var valid_774523 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774523 = validateParameter(valid_774523, JString, required = false,
                                 default = nil)
  if valid_774523 != nil:
    section.add "X-Amz-SignedHeaders", valid_774523
  var valid_774524 = header.getOrDefault("X-Amz-Credential")
  valid_774524 = validateParameter(valid_774524, JString, required = false,
                                 default = nil)
  if valid_774524 != nil:
    section.add "X-Amz-Credential", valid_774524
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774525: Call_PostListReceiptFilters_774513; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IP address filters associated with your AWS account in the current AWS Region.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_774525.validator(path, query, header, formData, body)
  let scheme = call_774525.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774525.url(scheme.get, call_774525.host, call_774525.base,
                         call_774525.route, valid.getOrDefault("path"))
  result = hook(call_774525, url, valid)

proc call*(call_774526: Call_PostListReceiptFilters_774513;
          Action: string = "ListReceiptFilters"; Version: string = "2010-12-01"): Recallable =
  ## postListReceiptFilters
  ## <p>Lists the IP address filters associated with your AWS account in the current AWS Region.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774527 = newJObject()
  add(query_774527, "Action", newJString(Action))
  add(query_774527, "Version", newJString(Version))
  result = call_774526.call(nil, query_774527, nil, nil, nil)

var postListReceiptFilters* = Call_PostListReceiptFilters_774513(
    name: "postListReceiptFilters", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ListReceiptFilters",
    validator: validate_PostListReceiptFilters_774514, base: "/",
    url: url_PostListReceiptFilters_774515, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListReceiptFilters_774498 = ref object of OpenApiRestCall_772597
proc url_GetListReceiptFilters_774500(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListReceiptFilters_774499(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IP address filters associated with your AWS account in the current AWS Region.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774501 = query.getOrDefault("Action")
  valid_774501 = validateParameter(valid_774501, JString, required = true,
                                 default = newJString("ListReceiptFilters"))
  if valid_774501 != nil:
    section.add "Action", valid_774501
  var valid_774502 = query.getOrDefault("Version")
  valid_774502 = validateParameter(valid_774502, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774502 != nil:
    section.add "Version", valid_774502
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774503 = header.getOrDefault("X-Amz-Date")
  valid_774503 = validateParameter(valid_774503, JString, required = false,
                                 default = nil)
  if valid_774503 != nil:
    section.add "X-Amz-Date", valid_774503
  var valid_774504 = header.getOrDefault("X-Amz-Security-Token")
  valid_774504 = validateParameter(valid_774504, JString, required = false,
                                 default = nil)
  if valid_774504 != nil:
    section.add "X-Amz-Security-Token", valid_774504
  var valid_774505 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774505 = validateParameter(valid_774505, JString, required = false,
                                 default = nil)
  if valid_774505 != nil:
    section.add "X-Amz-Content-Sha256", valid_774505
  var valid_774506 = header.getOrDefault("X-Amz-Algorithm")
  valid_774506 = validateParameter(valid_774506, JString, required = false,
                                 default = nil)
  if valid_774506 != nil:
    section.add "X-Amz-Algorithm", valid_774506
  var valid_774507 = header.getOrDefault("X-Amz-Signature")
  valid_774507 = validateParameter(valid_774507, JString, required = false,
                                 default = nil)
  if valid_774507 != nil:
    section.add "X-Amz-Signature", valid_774507
  var valid_774508 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774508 = validateParameter(valid_774508, JString, required = false,
                                 default = nil)
  if valid_774508 != nil:
    section.add "X-Amz-SignedHeaders", valid_774508
  var valid_774509 = header.getOrDefault("X-Amz-Credential")
  valid_774509 = validateParameter(valid_774509, JString, required = false,
                                 default = nil)
  if valid_774509 != nil:
    section.add "X-Amz-Credential", valid_774509
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774510: Call_GetListReceiptFilters_774498; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IP address filters associated with your AWS account in the current AWS Region.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_774510.validator(path, query, header, formData, body)
  let scheme = call_774510.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774510.url(scheme.get, call_774510.host, call_774510.base,
                         call_774510.route, valid.getOrDefault("path"))
  result = hook(call_774510, url, valid)

proc call*(call_774511: Call_GetListReceiptFilters_774498;
          Action: string = "ListReceiptFilters"; Version: string = "2010-12-01"): Recallable =
  ## getListReceiptFilters
  ## <p>Lists the IP address filters associated with your AWS account in the current AWS Region.</p> <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774512 = newJObject()
  add(query_774512, "Action", newJString(Action))
  add(query_774512, "Version", newJString(Version))
  result = call_774511.call(nil, query_774512, nil, nil, nil)

var getListReceiptFilters* = Call_GetListReceiptFilters_774498(
    name: "getListReceiptFilters", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=ListReceiptFilters",
    validator: validate_GetListReceiptFilters_774499, base: "/",
    url: url_GetListReceiptFilters_774500, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListReceiptRuleSets_774544 = ref object of OpenApiRestCall_772597
proc url_PostListReceiptRuleSets_774546(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListReceiptRuleSets_774545(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the receipt rule sets that exist under your AWS account in the current AWS Region. If there are additional receipt rule sets to be retrieved, you will receive a <code>NextToken</code> that you can provide to the next call to <code>ListReceiptRuleSets</code> to retrieve the additional entries.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774547 = query.getOrDefault("Action")
  valid_774547 = validateParameter(valid_774547, JString, required = true,
                                 default = newJString("ListReceiptRuleSets"))
  if valid_774547 != nil:
    section.add "Action", valid_774547
  var valid_774548 = query.getOrDefault("Version")
  valid_774548 = validateParameter(valid_774548, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774548 != nil:
    section.add "Version", valid_774548
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774549 = header.getOrDefault("X-Amz-Date")
  valid_774549 = validateParameter(valid_774549, JString, required = false,
                                 default = nil)
  if valid_774549 != nil:
    section.add "X-Amz-Date", valid_774549
  var valid_774550 = header.getOrDefault("X-Amz-Security-Token")
  valid_774550 = validateParameter(valid_774550, JString, required = false,
                                 default = nil)
  if valid_774550 != nil:
    section.add "X-Amz-Security-Token", valid_774550
  var valid_774551 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774551 = validateParameter(valid_774551, JString, required = false,
                                 default = nil)
  if valid_774551 != nil:
    section.add "X-Amz-Content-Sha256", valid_774551
  var valid_774552 = header.getOrDefault("X-Amz-Algorithm")
  valid_774552 = validateParameter(valid_774552, JString, required = false,
                                 default = nil)
  if valid_774552 != nil:
    section.add "X-Amz-Algorithm", valid_774552
  var valid_774553 = header.getOrDefault("X-Amz-Signature")
  valid_774553 = validateParameter(valid_774553, JString, required = false,
                                 default = nil)
  if valid_774553 != nil:
    section.add "X-Amz-Signature", valid_774553
  var valid_774554 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774554 = validateParameter(valid_774554, JString, required = false,
                                 default = nil)
  if valid_774554 != nil:
    section.add "X-Amz-SignedHeaders", valid_774554
  var valid_774555 = header.getOrDefault("X-Amz-Credential")
  valid_774555 = validateParameter(valid_774555, JString, required = false,
                                 default = nil)
  if valid_774555 != nil:
    section.add "X-Amz-Credential", valid_774555
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : A token returned from a previous call to <code>ListReceiptRuleSets</code> to indicate the position in the receipt rule set list.
  section = newJObject()
  var valid_774556 = formData.getOrDefault("NextToken")
  valid_774556 = validateParameter(valid_774556, JString, required = false,
                                 default = nil)
  if valid_774556 != nil:
    section.add "NextToken", valid_774556
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774557: Call_PostListReceiptRuleSets_774544; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the receipt rule sets that exist under your AWS account in the current AWS Region. If there are additional receipt rule sets to be retrieved, you will receive a <code>NextToken</code> that you can provide to the next call to <code>ListReceiptRuleSets</code> to retrieve the additional entries.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_774557.validator(path, query, header, formData, body)
  let scheme = call_774557.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774557.url(scheme.get, call_774557.host, call_774557.base,
                         call_774557.route, valid.getOrDefault("path"))
  result = hook(call_774557, url, valid)

proc call*(call_774558: Call_PostListReceiptRuleSets_774544;
          NextToken: string = ""; Action: string = "ListReceiptRuleSets";
          Version: string = "2010-12-01"): Recallable =
  ## postListReceiptRuleSets
  ## <p>Lists the receipt rule sets that exist under your AWS account in the current AWS Region. If there are additional receipt rule sets to be retrieved, you will receive a <code>NextToken</code> that you can provide to the next call to <code>ListReceiptRuleSets</code> to retrieve the additional entries.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : A token returned from a previous call to <code>ListReceiptRuleSets</code> to indicate the position in the receipt rule set list.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774559 = newJObject()
  var formData_774560 = newJObject()
  add(formData_774560, "NextToken", newJString(NextToken))
  add(query_774559, "Action", newJString(Action))
  add(query_774559, "Version", newJString(Version))
  result = call_774558.call(nil, query_774559, nil, formData_774560, nil)

var postListReceiptRuleSets* = Call_PostListReceiptRuleSets_774544(
    name: "postListReceiptRuleSets", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ListReceiptRuleSets",
    validator: validate_PostListReceiptRuleSets_774545, base: "/",
    url: url_PostListReceiptRuleSets_774546, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListReceiptRuleSets_774528 = ref object of OpenApiRestCall_772597
proc url_GetListReceiptRuleSets_774530(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListReceiptRuleSets_774529(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the receipt rule sets that exist under your AWS account in the current AWS Region. If there are additional receipt rule sets to be retrieved, you will receive a <code>NextToken</code> that you can provide to the next call to <code>ListReceiptRuleSets</code> to retrieve the additional entries.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : A token returned from a previous call to <code>ListReceiptRuleSets</code> to indicate the position in the receipt rule set list.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_774531 = query.getOrDefault("NextToken")
  valid_774531 = validateParameter(valid_774531, JString, required = false,
                                 default = nil)
  if valid_774531 != nil:
    section.add "NextToken", valid_774531
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774532 = query.getOrDefault("Action")
  valid_774532 = validateParameter(valid_774532, JString, required = true,
                                 default = newJString("ListReceiptRuleSets"))
  if valid_774532 != nil:
    section.add "Action", valid_774532
  var valid_774533 = query.getOrDefault("Version")
  valid_774533 = validateParameter(valid_774533, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774533 != nil:
    section.add "Version", valid_774533
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774534 = header.getOrDefault("X-Amz-Date")
  valid_774534 = validateParameter(valid_774534, JString, required = false,
                                 default = nil)
  if valid_774534 != nil:
    section.add "X-Amz-Date", valid_774534
  var valid_774535 = header.getOrDefault("X-Amz-Security-Token")
  valid_774535 = validateParameter(valid_774535, JString, required = false,
                                 default = nil)
  if valid_774535 != nil:
    section.add "X-Amz-Security-Token", valid_774535
  var valid_774536 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774536 = validateParameter(valid_774536, JString, required = false,
                                 default = nil)
  if valid_774536 != nil:
    section.add "X-Amz-Content-Sha256", valid_774536
  var valid_774537 = header.getOrDefault("X-Amz-Algorithm")
  valid_774537 = validateParameter(valid_774537, JString, required = false,
                                 default = nil)
  if valid_774537 != nil:
    section.add "X-Amz-Algorithm", valid_774537
  var valid_774538 = header.getOrDefault("X-Amz-Signature")
  valid_774538 = validateParameter(valid_774538, JString, required = false,
                                 default = nil)
  if valid_774538 != nil:
    section.add "X-Amz-Signature", valid_774538
  var valid_774539 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774539 = validateParameter(valid_774539, JString, required = false,
                                 default = nil)
  if valid_774539 != nil:
    section.add "X-Amz-SignedHeaders", valid_774539
  var valid_774540 = header.getOrDefault("X-Amz-Credential")
  valid_774540 = validateParameter(valid_774540, JString, required = false,
                                 default = nil)
  if valid_774540 != nil:
    section.add "X-Amz-Credential", valid_774540
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774541: Call_GetListReceiptRuleSets_774528; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the receipt rule sets that exist under your AWS account in the current AWS Region. If there are additional receipt rule sets to be retrieved, you will receive a <code>NextToken</code> that you can provide to the next call to <code>ListReceiptRuleSets</code> to retrieve the additional entries.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_774541.validator(path, query, header, formData, body)
  let scheme = call_774541.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774541.url(scheme.get, call_774541.host, call_774541.base,
                         call_774541.route, valid.getOrDefault("path"))
  result = hook(call_774541, url, valid)

proc call*(call_774542: Call_GetListReceiptRuleSets_774528; NextToken: string = "";
          Action: string = "ListReceiptRuleSets"; Version: string = "2010-12-01"): Recallable =
  ## getListReceiptRuleSets
  ## <p>Lists the receipt rule sets that exist under your AWS account in the current AWS Region. If there are additional receipt rule sets to be retrieved, you will receive a <code>NextToken</code> that you can provide to the next call to <code>ListReceiptRuleSets</code> to retrieve the additional entries.</p> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : A token returned from a previous call to <code>ListReceiptRuleSets</code> to indicate the position in the receipt rule set list.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774543 = newJObject()
  add(query_774543, "NextToken", newJString(NextToken))
  add(query_774543, "Action", newJString(Action))
  add(query_774543, "Version", newJString(Version))
  result = call_774542.call(nil, query_774543, nil, nil, nil)

var getListReceiptRuleSets* = Call_GetListReceiptRuleSets_774528(
    name: "getListReceiptRuleSets", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=ListReceiptRuleSets",
    validator: validate_GetListReceiptRuleSets_774529, base: "/",
    url: url_GetListReceiptRuleSets_774530, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListTemplates_774578 = ref object of OpenApiRestCall_772597
proc url_PostListTemplates_774580(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListTemplates_774579(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Lists the email templates present in your Amazon SES account in the current AWS Region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774581 = query.getOrDefault("Action")
  valid_774581 = validateParameter(valid_774581, JString, required = true,
                                 default = newJString("ListTemplates"))
  if valid_774581 != nil:
    section.add "Action", valid_774581
  var valid_774582 = query.getOrDefault("Version")
  valid_774582 = validateParameter(valid_774582, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774582 != nil:
    section.add "Version", valid_774582
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774583 = header.getOrDefault("X-Amz-Date")
  valid_774583 = validateParameter(valid_774583, JString, required = false,
                                 default = nil)
  if valid_774583 != nil:
    section.add "X-Amz-Date", valid_774583
  var valid_774584 = header.getOrDefault("X-Amz-Security-Token")
  valid_774584 = validateParameter(valid_774584, JString, required = false,
                                 default = nil)
  if valid_774584 != nil:
    section.add "X-Amz-Security-Token", valid_774584
  var valid_774585 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774585 = validateParameter(valid_774585, JString, required = false,
                                 default = nil)
  if valid_774585 != nil:
    section.add "X-Amz-Content-Sha256", valid_774585
  var valid_774586 = header.getOrDefault("X-Amz-Algorithm")
  valid_774586 = validateParameter(valid_774586, JString, required = false,
                                 default = nil)
  if valid_774586 != nil:
    section.add "X-Amz-Algorithm", valid_774586
  var valid_774587 = header.getOrDefault("X-Amz-Signature")
  valid_774587 = validateParameter(valid_774587, JString, required = false,
                                 default = nil)
  if valid_774587 != nil:
    section.add "X-Amz-Signature", valid_774587
  var valid_774588 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774588 = validateParameter(valid_774588, JString, required = false,
                                 default = nil)
  if valid_774588 != nil:
    section.add "X-Amz-SignedHeaders", valid_774588
  var valid_774589 = header.getOrDefault("X-Amz-Credential")
  valid_774589 = validateParameter(valid_774589, JString, required = false,
                                 default = nil)
  if valid_774589 != nil:
    section.add "X-Amz-Credential", valid_774589
  result.add "header", section
  ## parameters in `formData` object:
  ##   NextToken: JString
  ##            : A token returned from a previous call to <code>ListTemplates</code> to indicate the position in the list of email templates.
  ##   MaxItems: JInt
  ##           : The maximum number of templates to return. This value must be at least 1 and less than or equal to 10. If you do not specify a value, or if you specify a value less than 1 or greater than 10, the operation will return up to 10 results.
  section = newJObject()
  var valid_774590 = formData.getOrDefault("NextToken")
  valid_774590 = validateParameter(valid_774590, JString, required = false,
                                 default = nil)
  if valid_774590 != nil:
    section.add "NextToken", valid_774590
  var valid_774591 = formData.getOrDefault("MaxItems")
  valid_774591 = validateParameter(valid_774591, JInt, required = false, default = nil)
  if valid_774591 != nil:
    section.add "MaxItems", valid_774591
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774592: Call_PostListTemplates_774578; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the email templates present in your Amazon SES account in the current AWS Region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_774592.validator(path, query, header, formData, body)
  let scheme = call_774592.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774592.url(scheme.get, call_774592.host, call_774592.base,
                         call_774592.route, valid.getOrDefault("path"))
  result = hook(call_774592, url, valid)

proc call*(call_774593: Call_PostListTemplates_774578; NextToken: string = "";
          Action: string = "ListTemplates"; MaxItems: int = 0;
          Version: string = "2010-12-01"): Recallable =
  ## postListTemplates
  ## <p>Lists the email templates present in your Amazon SES account in the current AWS Region.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : A token returned from a previous call to <code>ListTemplates</code> to indicate the position in the list of email templates.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : The maximum number of templates to return. This value must be at least 1 and less than or equal to 10. If you do not specify a value, or if you specify a value less than 1 or greater than 10, the operation will return up to 10 results.
  ##   Version: string (required)
  var query_774594 = newJObject()
  var formData_774595 = newJObject()
  add(formData_774595, "NextToken", newJString(NextToken))
  add(query_774594, "Action", newJString(Action))
  add(formData_774595, "MaxItems", newJInt(MaxItems))
  add(query_774594, "Version", newJString(Version))
  result = call_774593.call(nil, query_774594, nil, formData_774595, nil)

var postListTemplates* = Call_PostListTemplates_774578(name: "postListTemplates",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=ListTemplates", validator: validate_PostListTemplates_774579,
    base: "/", url: url_PostListTemplates_774580,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListTemplates_774561 = ref object of OpenApiRestCall_772597
proc url_GetListTemplates_774563(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListTemplates_774562(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Lists the email templates present in your Amazon SES account in the current AWS Region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NextToken: JString
  ##            : A token returned from a previous call to <code>ListTemplates</code> to indicate the position in the list of email templates.
  ##   Action: JString (required)
  ##   MaxItems: JInt
  ##           : The maximum number of templates to return. This value must be at least 1 and less than or equal to 10. If you do not specify a value, or if you specify a value less than 1 or greater than 10, the operation will return up to 10 results.
  ##   Version: JString (required)
  section = newJObject()
  var valid_774564 = query.getOrDefault("NextToken")
  valid_774564 = validateParameter(valid_774564, JString, required = false,
                                 default = nil)
  if valid_774564 != nil:
    section.add "NextToken", valid_774564
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774565 = query.getOrDefault("Action")
  valid_774565 = validateParameter(valid_774565, JString, required = true,
                                 default = newJString("ListTemplates"))
  if valid_774565 != nil:
    section.add "Action", valid_774565
  var valid_774566 = query.getOrDefault("MaxItems")
  valid_774566 = validateParameter(valid_774566, JInt, required = false, default = nil)
  if valid_774566 != nil:
    section.add "MaxItems", valid_774566
  var valid_774567 = query.getOrDefault("Version")
  valid_774567 = validateParameter(valid_774567, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774567 != nil:
    section.add "Version", valid_774567
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774568 = header.getOrDefault("X-Amz-Date")
  valid_774568 = validateParameter(valid_774568, JString, required = false,
                                 default = nil)
  if valid_774568 != nil:
    section.add "X-Amz-Date", valid_774568
  var valid_774569 = header.getOrDefault("X-Amz-Security-Token")
  valid_774569 = validateParameter(valid_774569, JString, required = false,
                                 default = nil)
  if valid_774569 != nil:
    section.add "X-Amz-Security-Token", valid_774569
  var valid_774570 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774570 = validateParameter(valid_774570, JString, required = false,
                                 default = nil)
  if valid_774570 != nil:
    section.add "X-Amz-Content-Sha256", valid_774570
  var valid_774571 = header.getOrDefault("X-Amz-Algorithm")
  valid_774571 = validateParameter(valid_774571, JString, required = false,
                                 default = nil)
  if valid_774571 != nil:
    section.add "X-Amz-Algorithm", valid_774571
  var valid_774572 = header.getOrDefault("X-Amz-Signature")
  valid_774572 = validateParameter(valid_774572, JString, required = false,
                                 default = nil)
  if valid_774572 != nil:
    section.add "X-Amz-Signature", valid_774572
  var valid_774573 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774573 = validateParameter(valid_774573, JString, required = false,
                                 default = nil)
  if valid_774573 != nil:
    section.add "X-Amz-SignedHeaders", valid_774573
  var valid_774574 = header.getOrDefault("X-Amz-Credential")
  valid_774574 = validateParameter(valid_774574, JString, required = false,
                                 default = nil)
  if valid_774574 != nil:
    section.add "X-Amz-Credential", valid_774574
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774575: Call_GetListTemplates_774561; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the email templates present in your Amazon SES account in the current AWS Region.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_774575.validator(path, query, header, formData, body)
  let scheme = call_774575.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774575.url(scheme.get, call_774575.host, call_774575.base,
                         call_774575.route, valid.getOrDefault("path"))
  result = hook(call_774575, url, valid)

proc call*(call_774576: Call_GetListTemplates_774561; NextToken: string = "";
          Action: string = "ListTemplates"; MaxItems: int = 0;
          Version: string = "2010-12-01"): Recallable =
  ## getListTemplates
  ## <p>Lists the email templates present in your Amazon SES account in the current AWS Region.</p> <p>You can execute this operation no more than once per second.</p>
  ##   NextToken: string
  ##            : A token returned from a previous call to <code>ListTemplates</code> to indicate the position in the list of email templates.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : The maximum number of templates to return. This value must be at least 1 and less than or equal to 10. If you do not specify a value, or if you specify a value less than 1 or greater than 10, the operation will return up to 10 results.
  ##   Version: string (required)
  var query_774577 = newJObject()
  add(query_774577, "NextToken", newJString(NextToken))
  add(query_774577, "Action", newJString(Action))
  add(query_774577, "MaxItems", newJInt(MaxItems))
  add(query_774577, "Version", newJString(Version))
  result = call_774576.call(nil, query_774577, nil, nil, nil)

var getListTemplates* = Call_GetListTemplates_774561(name: "getListTemplates",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=ListTemplates", validator: validate_GetListTemplates_774562,
    base: "/", url: url_GetListTemplates_774563,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListVerifiedEmailAddresses_774611 = ref object of OpenApiRestCall_772597
proc url_PostListVerifiedEmailAddresses_774613(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListVerifiedEmailAddresses_774612(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deprecated. Use the <code>ListIdentities</code> operation to list the email addresses and domains associated with your account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774614 = query.getOrDefault("Action")
  valid_774614 = validateParameter(valid_774614, JString, required = true, default = newJString(
      "ListVerifiedEmailAddresses"))
  if valid_774614 != nil:
    section.add "Action", valid_774614
  var valid_774615 = query.getOrDefault("Version")
  valid_774615 = validateParameter(valid_774615, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774615 != nil:
    section.add "Version", valid_774615
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774616 = header.getOrDefault("X-Amz-Date")
  valid_774616 = validateParameter(valid_774616, JString, required = false,
                                 default = nil)
  if valid_774616 != nil:
    section.add "X-Amz-Date", valid_774616
  var valid_774617 = header.getOrDefault("X-Amz-Security-Token")
  valid_774617 = validateParameter(valid_774617, JString, required = false,
                                 default = nil)
  if valid_774617 != nil:
    section.add "X-Amz-Security-Token", valid_774617
  var valid_774618 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774618 = validateParameter(valid_774618, JString, required = false,
                                 default = nil)
  if valid_774618 != nil:
    section.add "X-Amz-Content-Sha256", valid_774618
  var valid_774619 = header.getOrDefault("X-Amz-Algorithm")
  valid_774619 = validateParameter(valid_774619, JString, required = false,
                                 default = nil)
  if valid_774619 != nil:
    section.add "X-Amz-Algorithm", valid_774619
  var valid_774620 = header.getOrDefault("X-Amz-Signature")
  valid_774620 = validateParameter(valid_774620, JString, required = false,
                                 default = nil)
  if valid_774620 != nil:
    section.add "X-Amz-Signature", valid_774620
  var valid_774621 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774621 = validateParameter(valid_774621, JString, required = false,
                                 default = nil)
  if valid_774621 != nil:
    section.add "X-Amz-SignedHeaders", valid_774621
  var valid_774622 = header.getOrDefault("X-Amz-Credential")
  valid_774622 = validateParameter(valid_774622, JString, required = false,
                                 default = nil)
  if valid_774622 != nil:
    section.add "X-Amz-Credential", valid_774622
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774623: Call_PostListVerifiedEmailAddresses_774611; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deprecated. Use the <code>ListIdentities</code> operation to list the email addresses and domains associated with your account.
  ## 
  let valid = call_774623.validator(path, query, header, formData, body)
  let scheme = call_774623.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774623.url(scheme.get, call_774623.host, call_774623.base,
                         call_774623.route, valid.getOrDefault("path"))
  result = hook(call_774623, url, valid)

proc call*(call_774624: Call_PostListVerifiedEmailAddresses_774611;
          Action: string = "ListVerifiedEmailAddresses";
          Version: string = "2010-12-01"): Recallable =
  ## postListVerifiedEmailAddresses
  ## Deprecated. Use the <code>ListIdentities</code> operation to list the email addresses and domains associated with your account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774625 = newJObject()
  add(query_774625, "Action", newJString(Action))
  add(query_774625, "Version", newJString(Version))
  result = call_774624.call(nil, query_774625, nil, nil, nil)

var postListVerifiedEmailAddresses* = Call_PostListVerifiedEmailAddresses_774611(
    name: "postListVerifiedEmailAddresses", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ListVerifiedEmailAddresses",
    validator: validate_PostListVerifiedEmailAddresses_774612, base: "/",
    url: url_PostListVerifiedEmailAddresses_774613,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListVerifiedEmailAddresses_774596 = ref object of OpenApiRestCall_772597
proc url_GetListVerifiedEmailAddresses_774598(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListVerifiedEmailAddresses_774597(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deprecated. Use the <code>ListIdentities</code> operation to list the email addresses and domains associated with your account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774599 = query.getOrDefault("Action")
  valid_774599 = validateParameter(valid_774599, JString, required = true, default = newJString(
      "ListVerifiedEmailAddresses"))
  if valid_774599 != nil:
    section.add "Action", valid_774599
  var valid_774600 = query.getOrDefault("Version")
  valid_774600 = validateParameter(valid_774600, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774600 != nil:
    section.add "Version", valid_774600
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774601 = header.getOrDefault("X-Amz-Date")
  valid_774601 = validateParameter(valid_774601, JString, required = false,
                                 default = nil)
  if valid_774601 != nil:
    section.add "X-Amz-Date", valid_774601
  var valid_774602 = header.getOrDefault("X-Amz-Security-Token")
  valid_774602 = validateParameter(valid_774602, JString, required = false,
                                 default = nil)
  if valid_774602 != nil:
    section.add "X-Amz-Security-Token", valid_774602
  var valid_774603 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774603 = validateParameter(valid_774603, JString, required = false,
                                 default = nil)
  if valid_774603 != nil:
    section.add "X-Amz-Content-Sha256", valid_774603
  var valid_774604 = header.getOrDefault("X-Amz-Algorithm")
  valid_774604 = validateParameter(valid_774604, JString, required = false,
                                 default = nil)
  if valid_774604 != nil:
    section.add "X-Amz-Algorithm", valid_774604
  var valid_774605 = header.getOrDefault("X-Amz-Signature")
  valid_774605 = validateParameter(valid_774605, JString, required = false,
                                 default = nil)
  if valid_774605 != nil:
    section.add "X-Amz-Signature", valid_774605
  var valid_774606 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774606 = validateParameter(valid_774606, JString, required = false,
                                 default = nil)
  if valid_774606 != nil:
    section.add "X-Amz-SignedHeaders", valid_774606
  var valid_774607 = header.getOrDefault("X-Amz-Credential")
  valid_774607 = validateParameter(valid_774607, JString, required = false,
                                 default = nil)
  if valid_774607 != nil:
    section.add "X-Amz-Credential", valid_774607
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774608: Call_GetListVerifiedEmailAddresses_774596; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deprecated. Use the <code>ListIdentities</code> operation to list the email addresses and domains associated with your account.
  ## 
  let valid = call_774608.validator(path, query, header, formData, body)
  let scheme = call_774608.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774608.url(scheme.get, call_774608.host, call_774608.base,
                         call_774608.route, valid.getOrDefault("path"))
  result = hook(call_774608, url, valid)

proc call*(call_774609: Call_GetListVerifiedEmailAddresses_774596;
          Action: string = "ListVerifiedEmailAddresses";
          Version: string = "2010-12-01"): Recallable =
  ## getListVerifiedEmailAddresses
  ## Deprecated. Use the <code>ListIdentities</code> operation to list the email addresses and domains associated with your account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774610 = newJObject()
  add(query_774610, "Action", newJString(Action))
  add(query_774610, "Version", newJString(Version))
  result = call_774609.call(nil, query_774610, nil, nil, nil)

var getListVerifiedEmailAddresses* = Call_GetListVerifiedEmailAddresses_774596(
    name: "getListVerifiedEmailAddresses", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=ListVerifiedEmailAddresses",
    validator: validate_GetListVerifiedEmailAddresses_774597, base: "/",
    url: url_GetListVerifiedEmailAddresses_774598,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutConfigurationSetDeliveryOptions_774643 = ref object of OpenApiRestCall_772597
proc url_PostPutConfigurationSetDeliveryOptions_774645(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostPutConfigurationSetDeliveryOptions_774644(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds or updates the delivery options for a configuration set.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774646 = query.getOrDefault("Action")
  valid_774646 = validateParameter(valid_774646, JString, required = true, default = newJString(
      "PutConfigurationSetDeliveryOptions"))
  if valid_774646 != nil:
    section.add "Action", valid_774646
  var valid_774647 = query.getOrDefault("Version")
  valid_774647 = validateParameter(valid_774647, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774647 != nil:
    section.add "Version", valid_774647
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774648 = header.getOrDefault("X-Amz-Date")
  valid_774648 = validateParameter(valid_774648, JString, required = false,
                                 default = nil)
  if valid_774648 != nil:
    section.add "X-Amz-Date", valid_774648
  var valid_774649 = header.getOrDefault("X-Amz-Security-Token")
  valid_774649 = validateParameter(valid_774649, JString, required = false,
                                 default = nil)
  if valid_774649 != nil:
    section.add "X-Amz-Security-Token", valid_774649
  var valid_774650 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774650 = validateParameter(valid_774650, JString, required = false,
                                 default = nil)
  if valid_774650 != nil:
    section.add "X-Amz-Content-Sha256", valid_774650
  var valid_774651 = header.getOrDefault("X-Amz-Algorithm")
  valid_774651 = validateParameter(valid_774651, JString, required = false,
                                 default = nil)
  if valid_774651 != nil:
    section.add "X-Amz-Algorithm", valid_774651
  var valid_774652 = header.getOrDefault("X-Amz-Signature")
  valid_774652 = validateParameter(valid_774652, JString, required = false,
                                 default = nil)
  if valid_774652 != nil:
    section.add "X-Amz-Signature", valid_774652
  var valid_774653 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774653 = validateParameter(valid_774653, JString, required = false,
                                 default = nil)
  if valid_774653 != nil:
    section.add "X-Amz-SignedHeaders", valid_774653
  var valid_774654 = header.getOrDefault("X-Amz-Credential")
  valid_774654 = validateParameter(valid_774654, JString, required = false,
                                 default = nil)
  if valid_774654 != nil:
    section.add "X-Amz-Credential", valid_774654
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that you want to specify the delivery options for.
  ##   DeliveryOptions.TlsPolicy: JString
  ##                            : Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS).
  ## Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only delivered if a TLS connection can be established. If the value is <code>Optional</code>, messages can be delivered in plain text if a TLS connection can't be established.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_774655 = formData.getOrDefault("ConfigurationSetName")
  valid_774655 = validateParameter(valid_774655, JString, required = true,
                                 default = nil)
  if valid_774655 != nil:
    section.add "ConfigurationSetName", valid_774655
  var valid_774656 = formData.getOrDefault("DeliveryOptions.TlsPolicy")
  valid_774656 = validateParameter(valid_774656, JString, required = false,
                                 default = nil)
  if valid_774656 != nil:
    section.add "DeliveryOptions.TlsPolicy", valid_774656
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774657: Call_PostPutConfigurationSetDeliveryOptions_774643;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds or updates the delivery options for a configuration set.
  ## 
  let valid = call_774657.validator(path, query, header, formData, body)
  let scheme = call_774657.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774657.url(scheme.get, call_774657.host, call_774657.base,
                         call_774657.route, valid.getOrDefault("path"))
  result = hook(call_774657, url, valid)

proc call*(call_774658: Call_PostPutConfigurationSetDeliveryOptions_774643;
          ConfigurationSetName: string;
          Action: string = "PutConfigurationSetDeliveryOptions";
          DeliveryOptionsTlsPolicy: string = ""; Version: string = "2010-12-01"): Recallable =
  ## postPutConfigurationSetDeliveryOptions
  ## Adds or updates the delivery options for a configuration set.
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that you want to specify the delivery options for.
  ##   Action: string (required)
  ##   DeliveryOptionsTlsPolicy: string
  ##                           : Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS).
  ## Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only delivered if a TLS connection can be established. If the value is <code>Optional</code>, messages can be delivered in plain text if a TLS connection can't be established.
  ##   Version: string (required)
  var query_774659 = newJObject()
  var formData_774660 = newJObject()
  add(formData_774660, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_774659, "Action", newJString(Action))
  add(formData_774660, "DeliveryOptions.TlsPolicy",
      newJString(DeliveryOptionsTlsPolicy))
  add(query_774659, "Version", newJString(Version))
  result = call_774658.call(nil, query_774659, nil, formData_774660, nil)

var postPutConfigurationSetDeliveryOptions* = Call_PostPutConfigurationSetDeliveryOptions_774643(
    name: "postPutConfigurationSetDeliveryOptions", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=PutConfigurationSetDeliveryOptions",
    validator: validate_PostPutConfigurationSetDeliveryOptions_774644, base: "/",
    url: url_PostPutConfigurationSetDeliveryOptions_774645,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutConfigurationSetDeliveryOptions_774626 = ref object of OpenApiRestCall_772597
proc url_GetPutConfigurationSetDeliveryOptions_774628(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetPutConfigurationSetDeliveryOptions_774627(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds or updates the delivery options for a configuration set.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DeliveryOptions.TlsPolicy: JString
  ##                            : Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS).
  ## Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only delivered if a TLS connection can be established. If the value is <code>Optional</code>, messages can be delivered in plain text if a TLS connection can't be established.
  ##   Action: JString (required)
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that you want to specify the delivery options for.
  ##   Version: JString (required)
  section = newJObject()
  var valid_774629 = query.getOrDefault("DeliveryOptions.TlsPolicy")
  valid_774629 = validateParameter(valid_774629, JString, required = false,
                                 default = nil)
  if valid_774629 != nil:
    section.add "DeliveryOptions.TlsPolicy", valid_774629
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774630 = query.getOrDefault("Action")
  valid_774630 = validateParameter(valid_774630, JString, required = true, default = newJString(
      "PutConfigurationSetDeliveryOptions"))
  if valid_774630 != nil:
    section.add "Action", valid_774630
  var valid_774631 = query.getOrDefault("ConfigurationSetName")
  valid_774631 = validateParameter(valid_774631, JString, required = true,
                                 default = nil)
  if valid_774631 != nil:
    section.add "ConfigurationSetName", valid_774631
  var valid_774632 = query.getOrDefault("Version")
  valid_774632 = validateParameter(valid_774632, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774632 != nil:
    section.add "Version", valid_774632
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774633 = header.getOrDefault("X-Amz-Date")
  valid_774633 = validateParameter(valid_774633, JString, required = false,
                                 default = nil)
  if valid_774633 != nil:
    section.add "X-Amz-Date", valid_774633
  var valid_774634 = header.getOrDefault("X-Amz-Security-Token")
  valid_774634 = validateParameter(valid_774634, JString, required = false,
                                 default = nil)
  if valid_774634 != nil:
    section.add "X-Amz-Security-Token", valid_774634
  var valid_774635 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774635 = validateParameter(valid_774635, JString, required = false,
                                 default = nil)
  if valid_774635 != nil:
    section.add "X-Amz-Content-Sha256", valid_774635
  var valid_774636 = header.getOrDefault("X-Amz-Algorithm")
  valid_774636 = validateParameter(valid_774636, JString, required = false,
                                 default = nil)
  if valid_774636 != nil:
    section.add "X-Amz-Algorithm", valid_774636
  var valid_774637 = header.getOrDefault("X-Amz-Signature")
  valid_774637 = validateParameter(valid_774637, JString, required = false,
                                 default = nil)
  if valid_774637 != nil:
    section.add "X-Amz-Signature", valid_774637
  var valid_774638 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774638 = validateParameter(valid_774638, JString, required = false,
                                 default = nil)
  if valid_774638 != nil:
    section.add "X-Amz-SignedHeaders", valid_774638
  var valid_774639 = header.getOrDefault("X-Amz-Credential")
  valid_774639 = validateParameter(valid_774639, JString, required = false,
                                 default = nil)
  if valid_774639 != nil:
    section.add "X-Amz-Credential", valid_774639
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774640: Call_GetPutConfigurationSetDeliveryOptions_774626;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds or updates the delivery options for a configuration set.
  ## 
  let valid = call_774640.validator(path, query, header, formData, body)
  let scheme = call_774640.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774640.url(scheme.get, call_774640.host, call_774640.base,
                         call_774640.route, valid.getOrDefault("path"))
  result = hook(call_774640, url, valid)

proc call*(call_774641: Call_GetPutConfigurationSetDeliveryOptions_774626;
          ConfigurationSetName: string; DeliveryOptionsTlsPolicy: string = "";
          Action: string = "PutConfigurationSetDeliveryOptions";
          Version: string = "2010-12-01"): Recallable =
  ## getPutConfigurationSetDeliveryOptions
  ## Adds or updates the delivery options for a configuration set.
  ##   DeliveryOptionsTlsPolicy: string
  ##                           : Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS).
  ## Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only delivered if a TLS connection can be established. If the value is <code>Optional</code>, messages can be delivered in plain text if a TLS connection can't be established.
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that you want to specify the delivery options for.
  ##   Version: string (required)
  var query_774642 = newJObject()
  add(query_774642, "DeliveryOptions.TlsPolicy",
      newJString(DeliveryOptionsTlsPolicy))
  add(query_774642, "Action", newJString(Action))
  add(query_774642, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_774642, "Version", newJString(Version))
  result = call_774641.call(nil, query_774642, nil, nil, nil)

var getPutConfigurationSetDeliveryOptions* = Call_GetPutConfigurationSetDeliveryOptions_774626(
    name: "getPutConfigurationSetDeliveryOptions", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=PutConfigurationSetDeliveryOptions",
    validator: validate_GetPutConfigurationSetDeliveryOptions_774627, base: "/",
    url: url_GetPutConfigurationSetDeliveryOptions_774628,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutIdentityPolicy_774679 = ref object of OpenApiRestCall_772597
proc url_PostPutIdentityPolicy_774681(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostPutIdentityPolicy_774680(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds or updates a sending authorization policy for the specified identity (an email address or a domain).</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774682 = query.getOrDefault("Action")
  valid_774682 = validateParameter(valid_774682, JString, required = true,
                                 default = newJString("PutIdentityPolicy"))
  if valid_774682 != nil:
    section.add "Action", valid_774682
  var valid_774683 = query.getOrDefault("Version")
  valid_774683 = validateParameter(valid_774683, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774683 != nil:
    section.add "Version", valid_774683
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774684 = header.getOrDefault("X-Amz-Date")
  valid_774684 = validateParameter(valid_774684, JString, required = false,
                                 default = nil)
  if valid_774684 != nil:
    section.add "X-Amz-Date", valid_774684
  var valid_774685 = header.getOrDefault("X-Amz-Security-Token")
  valid_774685 = validateParameter(valid_774685, JString, required = false,
                                 default = nil)
  if valid_774685 != nil:
    section.add "X-Amz-Security-Token", valid_774685
  var valid_774686 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774686 = validateParameter(valid_774686, JString, required = false,
                                 default = nil)
  if valid_774686 != nil:
    section.add "X-Amz-Content-Sha256", valid_774686
  var valid_774687 = header.getOrDefault("X-Amz-Algorithm")
  valid_774687 = validateParameter(valid_774687, JString, required = false,
                                 default = nil)
  if valid_774687 != nil:
    section.add "X-Amz-Algorithm", valid_774687
  var valid_774688 = header.getOrDefault("X-Amz-Signature")
  valid_774688 = validateParameter(valid_774688, JString, required = false,
                                 default = nil)
  if valid_774688 != nil:
    section.add "X-Amz-Signature", valid_774688
  var valid_774689 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774689 = validateParameter(valid_774689, JString, required = false,
                                 default = nil)
  if valid_774689 != nil:
    section.add "X-Amz-SignedHeaders", valid_774689
  var valid_774690 = header.getOrDefault("X-Amz-Credential")
  valid_774690 = validateParameter(valid_774690, JString, required = false,
                                 default = nil)
  if valid_774690 != nil:
    section.add "X-Amz-Credential", valid_774690
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy.</p> <p>The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.</p>
  ##   Identity: JString (required)
  ##           : <p>The identity that the policy will apply to. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Policy: JString (required)
  ##         : <p>The text of the policy in JSON format. The policy cannot exceed 4 KB.</p> <p>For information about the syntax of sending authorization policies, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-policies.html">Amazon SES Developer Guide</a>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_774691 = formData.getOrDefault("PolicyName")
  valid_774691 = validateParameter(valid_774691, JString, required = true,
                                 default = nil)
  if valid_774691 != nil:
    section.add "PolicyName", valid_774691
  var valid_774692 = formData.getOrDefault("Identity")
  valid_774692 = validateParameter(valid_774692, JString, required = true,
                                 default = nil)
  if valid_774692 != nil:
    section.add "Identity", valid_774692
  var valid_774693 = formData.getOrDefault("Policy")
  valid_774693 = validateParameter(valid_774693, JString, required = true,
                                 default = nil)
  if valid_774693 != nil:
    section.add "Policy", valid_774693
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774694: Call_PostPutIdentityPolicy_774679; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates a sending authorization policy for the specified identity (an email address or a domain).</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_774694.validator(path, query, header, formData, body)
  let scheme = call_774694.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774694.url(scheme.get, call_774694.host, call_774694.base,
                         call_774694.route, valid.getOrDefault("path"))
  result = hook(call_774694, url, valid)

proc call*(call_774695: Call_PostPutIdentityPolicy_774679; PolicyName: string;
          Identity: string; Policy: string; Action: string = "PutIdentityPolicy";
          Version: string = "2010-12-01"): Recallable =
  ## postPutIdentityPolicy
  ## <p>Adds or updates a sending authorization policy for the specified identity (an email address or a domain).</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy.</p> <p>The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.</p>
  ##   Identity: string (required)
  ##           : <p>The identity that the policy will apply to. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Policy: string (required)
  ##         : <p>The text of the policy in JSON format. The policy cannot exceed 4 KB.</p> <p>For information about the syntax of sending authorization policies, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-policies.html">Amazon SES Developer Guide</a>. </p>
  ##   Version: string (required)
  var query_774696 = newJObject()
  var formData_774697 = newJObject()
  add(formData_774697, "PolicyName", newJString(PolicyName))
  add(formData_774697, "Identity", newJString(Identity))
  add(query_774696, "Action", newJString(Action))
  add(formData_774697, "Policy", newJString(Policy))
  add(query_774696, "Version", newJString(Version))
  result = call_774695.call(nil, query_774696, nil, formData_774697, nil)

var postPutIdentityPolicy* = Call_PostPutIdentityPolicy_774679(
    name: "postPutIdentityPolicy", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=PutIdentityPolicy",
    validator: validate_PostPutIdentityPolicy_774680, base: "/",
    url: url_PostPutIdentityPolicy_774681, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutIdentityPolicy_774661 = ref object of OpenApiRestCall_772597
proc url_GetPutIdentityPolicy_774663(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetPutIdentityPolicy_774662(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds or updates a sending authorization policy for the specified identity (an email address or a domain).</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : <p>The identity that the policy will apply to. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: JString (required)
  ##   Policy: JString (required)
  ##         : <p>The text of the policy in JSON format. The policy cannot exceed 4 KB.</p> <p>For information about the syntax of sending authorization policies, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-policies.html">Amazon SES Developer Guide</a>. </p>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy.</p> <p>The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.</p>
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_774664 = query.getOrDefault("Identity")
  valid_774664 = validateParameter(valid_774664, JString, required = true,
                                 default = nil)
  if valid_774664 != nil:
    section.add "Identity", valid_774664
  var valid_774665 = query.getOrDefault("Action")
  valid_774665 = validateParameter(valid_774665, JString, required = true,
                                 default = newJString("PutIdentityPolicy"))
  if valid_774665 != nil:
    section.add "Action", valid_774665
  var valid_774666 = query.getOrDefault("Policy")
  valid_774666 = validateParameter(valid_774666, JString, required = true,
                                 default = nil)
  if valid_774666 != nil:
    section.add "Policy", valid_774666
  var valid_774667 = query.getOrDefault("Version")
  valid_774667 = validateParameter(valid_774667, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774667 != nil:
    section.add "Version", valid_774667
  var valid_774668 = query.getOrDefault("PolicyName")
  valid_774668 = validateParameter(valid_774668, JString, required = true,
                                 default = nil)
  if valid_774668 != nil:
    section.add "PolicyName", valid_774668
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774669 = header.getOrDefault("X-Amz-Date")
  valid_774669 = validateParameter(valid_774669, JString, required = false,
                                 default = nil)
  if valid_774669 != nil:
    section.add "X-Amz-Date", valid_774669
  var valid_774670 = header.getOrDefault("X-Amz-Security-Token")
  valid_774670 = validateParameter(valid_774670, JString, required = false,
                                 default = nil)
  if valid_774670 != nil:
    section.add "X-Amz-Security-Token", valid_774670
  var valid_774671 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774671 = validateParameter(valid_774671, JString, required = false,
                                 default = nil)
  if valid_774671 != nil:
    section.add "X-Amz-Content-Sha256", valid_774671
  var valid_774672 = header.getOrDefault("X-Amz-Algorithm")
  valid_774672 = validateParameter(valid_774672, JString, required = false,
                                 default = nil)
  if valid_774672 != nil:
    section.add "X-Amz-Algorithm", valid_774672
  var valid_774673 = header.getOrDefault("X-Amz-Signature")
  valid_774673 = validateParameter(valid_774673, JString, required = false,
                                 default = nil)
  if valid_774673 != nil:
    section.add "X-Amz-Signature", valid_774673
  var valid_774674 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774674 = validateParameter(valid_774674, JString, required = false,
                                 default = nil)
  if valid_774674 != nil:
    section.add "X-Amz-SignedHeaders", valid_774674
  var valid_774675 = header.getOrDefault("X-Amz-Credential")
  valid_774675 = validateParameter(valid_774675, JString, required = false,
                                 default = nil)
  if valid_774675 != nil:
    section.add "X-Amz-Credential", valid_774675
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774676: Call_GetPutIdentityPolicy_774661; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates a sending authorization policy for the specified identity (an email address or a domain).</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_774676.validator(path, query, header, formData, body)
  let scheme = call_774676.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774676.url(scheme.get, call_774676.host, call_774676.base,
                         call_774676.route, valid.getOrDefault("path"))
  result = hook(call_774676, url, valid)

proc call*(call_774677: Call_GetPutIdentityPolicy_774661; Identity: string;
          Policy: string; PolicyName: string; Action: string = "PutIdentityPolicy";
          Version: string = "2010-12-01"): Recallable =
  ## getPutIdentityPolicy
  ## <p>Adds or updates a sending authorization policy for the specified identity (an email address or a domain).</p> <note> <p>This API is for the identity owner only. If you have not verified the identity, this API will return an error.</p> </note> <p>Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : <p>The identity that the policy will apply to. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p> <p>To successfully call this API, you must own the identity.</p>
  ##   Action: string (required)
  ##   Policy: string (required)
  ##         : <p>The text of the policy in JSON format. The policy cannot exceed 4 KB.</p> <p>For information about the syntax of sending authorization policies, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-policies.html">Amazon SES Developer Guide</a>. </p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy.</p> <p>The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.</p>
  var query_774678 = newJObject()
  add(query_774678, "Identity", newJString(Identity))
  add(query_774678, "Action", newJString(Action))
  add(query_774678, "Policy", newJString(Policy))
  add(query_774678, "Version", newJString(Version))
  add(query_774678, "PolicyName", newJString(PolicyName))
  result = call_774677.call(nil, query_774678, nil, nil, nil)

var getPutIdentityPolicy* = Call_GetPutIdentityPolicy_774661(
    name: "getPutIdentityPolicy", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=PutIdentityPolicy",
    validator: validate_GetPutIdentityPolicy_774662, base: "/",
    url: url_GetPutIdentityPolicy_774663, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostReorderReceiptRuleSet_774715 = ref object of OpenApiRestCall_772597
proc url_PostReorderReceiptRuleSet_774717(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostReorderReceiptRuleSet_774716(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Reorders the receipt rules within a receipt rule set.</p> <note> <p>All of the rules in the rule set must be represented in this request. That is, this API will return an error if the reorder request doesn't explicitly position all of the rules.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774718 = query.getOrDefault("Action")
  valid_774718 = validateParameter(valid_774718, JString, required = true,
                                 default = newJString("ReorderReceiptRuleSet"))
  if valid_774718 != nil:
    section.add "Action", valid_774718
  var valid_774719 = query.getOrDefault("Version")
  valid_774719 = validateParameter(valid_774719, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774719 != nil:
    section.add "Version", valid_774719
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774720 = header.getOrDefault("X-Amz-Date")
  valid_774720 = validateParameter(valid_774720, JString, required = false,
                                 default = nil)
  if valid_774720 != nil:
    section.add "X-Amz-Date", valid_774720
  var valid_774721 = header.getOrDefault("X-Amz-Security-Token")
  valid_774721 = validateParameter(valid_774721, JString, required = false,
                                 default = nil)
  if valid_774721 != nil:
    section.add "X-Amz-Security-Token", valid_774721
  var valid_774722 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774722 = validateParameter(valid_774722, JString, required = false,
                                 default = nil)
  if valid_774722 != nil:
    section.add "X-Amz-Content-Sha256", valid_774722
  var valid_774723 = header.getOrDefault("X-Amz-Algorithm")
  valid_774723 = validateParameter(valid_774723, JString, required = false,
                                 default = nil)
  if valid_774723 != nil:
    section.add "X-Amz-Algorithm", valid_774723
  var valid_774724 = header.getOrDefault("X-Amz-Signature")
  valid_774724 = validateParameter(valid_774724, JString, required = false,
                                 default = nil)
  if valid_774724 != nil:
    section.add "X-Amz-Signature", valid_774724
  var valid_774725 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774725 = validateParameter(valid_774725, JString, required = false,
                                 default = nil)
  if valid_774725 != nil:
    section.add "X-Amz-SignedHeaders", valid_774725
  var valid_774726 = header.getOrDefault("X-Amz-Credential")
  valid_774726 = validateParameter(valid_774726, JString, required = false,
                                 default = nil)
  if valid_774726 != nil:
    section.add "X-Amz-Credential", valid_774726
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleNames: JArray (required)
  ##            : A list of the specified receipt rule set's receipt rules in the order that you want to put them.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set to reorder.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RuleNames` field"
  var valid_774727 = formData.getOrDefault("RuleNames")
  valid_774727 = validateParameter(valid_774727, JArray, required = true, default = nil)
  if valid_774727 != nil:
    section.add "RuleNames", valid_774727
  var valid_774728 = formData.getOrDefault("RuleSetName")
  valid_774728 = validateParameter(valid_774728, JString, required = true,
                                 default = nil)
  if valid_774728 != nil:
    section.add "RuleSetName", valid_774728
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774729: Call_PostReorderReceiptRuleSet_774715; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Reorders the receipt rules within a receipt rule set.</p> <note> <p>All of the rules in the rule set must be represented in this request. That is, this API will return an error if the reorder request doesn't explicitly position all of the rules.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_774729.validator(path, query, header, formData, body)
  let scheme = call_774729.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774729.url(scheme.get, call_774729.host, call_774729.base,
                         call_774729.route, valid.getOrDefault("path"))
  result = hook(call_774729, url, valid)

proc call*(call_774730: Call_PostReorderReceiptRuleSet_774715; RuleNames: JsonNode;
          RuleSetName: string; Action: string = "ReorderReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## postReorderReceiptRuleSet
  ## <p>Reorders the receipt rules within a receipt rule set.</p> <note> <p>All of the rules in the rule set must be represented in this request. That is, this API will return an error if the reorder request doesn't explicitly position all of the rules.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleNames: JArray (required)
  ##            : A list of the specified receipt rule set's receipt rules in the order that you want to put them.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set to reorder.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774731 = newJObject()
  var formData_774732 = newJObject()
  if RuleNames != nil:
    formData_774732.add "RuleNames", RuleNames
  add(formData_774732, "RuleSetName", newJString(RuleSetName))
  add(query_774731, "Action", newJString(Action))
  add(query_774731, "Version", newJString(Version))
  result = call_774730.call(nil, query_774731, nil, formData_774732, nil)

var postReorderReceiptRuleSet* = Call_PostReorderReceiptRuleSet_774715(
    name: "postReorderReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=ReorderReceiptRuleSet",
    validator: validate_PostReorderReceiptRuleSet_774716, base: "/",
    url: url_PostReorderReceiptRuleSet_774717,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetReorderReceiptRuleSet_774698 = ref object of OpenApiRestCall_772597
proc url_GetReorderReceiptRuleSet_774700(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetReorderReceiptRuleSet_774699(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Reorders the receipt rules within a receipt rule set.</p> <note> <p>All of the rules in the rule set must be represented in this request. That is, this API will return an error if the reorder request doesn't explicitly position all of the rules.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set to reorder.
  ##   Action: JString (required)
  ##   RuleNames: JArray (required)
  ##            : A list of the specified receipt rule set's receipt rules in the order that you want to put them.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleSetName` field"
  var valid_774701 = query.getOrDefault("RuleSetName")
  valid_774701 = validateParameter(valid_774701, JString, required = true,
                                 default = nil)
  if valid_774701 != nil:
    section.add "RuleSetName", valid_774701
  var valid_774702 = query.getOrDefault("Action")
  valid_774702 = validateParameter(valid_774702, JString, required = true,
                                 default = newJString("ReorderReceiptRuleSet"))
  if valid_774702 != nil:
    section.add "Action", valid_774702
  var valid_774703 = query.getOrDefault("RuleNames")
  valid_774703 = validateParameter(valid_774703, JArray, required = true, default = nil)
  if valid_774703 != nil:
    section.add "RuleNames", valid_774703
  var valid_774704 = query.getOrDefault("Version")
  valid_774704 = validateParameter(valid_774704, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774704 != nil:
    section.add "Version", valid_774704
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774705 = header.getOrDefault("X-Amz-Date")
  valid_774705 = validateParameter(valid_774705, JString, required = false,
                                 default = nil)
  if valid_774705 != nil:
    section.add "X-Amz-Date", valid_774705
  var valid_774706 = header.getOrDefault("X-Amz-Security-Token")
  valid_774706 = validateParameter(valid_774706, JString, required = false,
                                 default = nil)
  if valid_774706 != nil:
    section.add "X-Amz-Security-Token", valid_774706
  var valid_774707 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774707 = validateParameter(valid_774707, JString, required = false,
                                 default = nil)
  if valid_774707 != nil:
    section.add "X-Amz-Content-Sha256", valid_774707
  var valid_774708 = header.getOrDefault("X-Amz-Algorithm")
  valid_774708 = validateParameter(valid_774708, JString, required = false,
                                 default = nil)
  if valid_774708 != nil:
    section.add "X-Amz-Algorithm", valid_774708
  var valid_774709 = header.getOrDefault("X-Amz-Signature")
  valid_774709 = validateParameter(valid_774709, JString, required = false,
                                 default = nil)
  if valid_774709 != nil:
    section.add "X-Amz-Signature", valid_774709
  var valid_774710 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774710 = validateParameter(valid_774710, JString, required = false,
                                 default = nil)
  if valid_774710 != nil:
    section.add "X-Amz-SignedHeaders", valid_774710
  var valid_774711 = header.getOrDefault("X-Amz-Credential")
  valid_774711 = validateParameter(valid_774711, JString, required = false,
                                 default = nil)
  if valid_774711 != nil:
    section.add "X-Amz-Credential", valid_774711
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774712: Call_GetReorderReceiptRuleSet_774698; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Reorders the receipt rules within a receipt rule set.</p> <note> <p>All of the rules in the rule set must be represented in this request. That is, this API will return an error if the reorder request doesn't explicitly position all of the rules.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_774712.validator(path, query, header, formData, body)
  let scheme = call_774712.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774712.url(scheme.get, call_774712.host, call_774712.base,
                         call_774712.route, valid.getOrDefault("path"))
  result = hook(call_774712, url, valid)

proc call*(call_774713: Call_GetReorderReceiptRuleSet_774698; RuleSetName: string;
          RuleNames: JsonNode; Action: string = "ReorderReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## getReorderReceiptRuleSet
  ## <p>Reorders the receipt rules within a receipt rule set.</p> <note> <p>All of the rules in the rule set must be represented in this request. That is, this API will return an error if the reorder request doesn't explicitly position all of the rules.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set to reorder.
  ##   Action: string (required)
  ##   RuleNames: JArray (required)
  ##            : A list of the specified receipt rule set's receipt rules in the order that you want to put them.
  ##   Version: string (required)
  var query_774714 = newJObject()
  add(query_774714, "RuleSetName", newJString(RuleSetName))
  add(query_774714, "Action", newJString(Action))
  if RuleNames != nil:
    query_774714.add "RuleNames", RuleNames
  add(query_774714, "Version", newJString(Version))
  result = call_774713.call(nil, query_774714, nil, nil, nil)

var getReorderReceiptRuleSet* = Call_GetReorderReceiptRuleSet_774698(
    name: "getReorderReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=ReorderReceiptRuleSet",
    validator: validate_GetReorderReceiptRuleSet_774699, base: "/",
    url: url_GetReorderReceiptRuleSet_774700, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSendBounce_774756 = ref object of OpenApiRestCall_772597
proc url_PostSendBounce_774758(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSendBounce_774757(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Generates and sends a bounce message to the sender of an email you received through Amazon SES. You can only use this API on an email up to 24 hours after you receive it.</p> <note> <p>You cannot use this API to send generic bounces for mail that was not received by Amazon SES.</p> </note> <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774759 = query.getOrDefault("Action")
  valid_774759 = validateParameter(valid_774759, JString, required = true,
                                 default = newJString("SendBounce"))
  if valid_774759 != nil:
    section.add "Action", valid_774759
  var valid_774760 = query.getOrDefault("Version")
  valid_774760 = validateParameter(valid_774760, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774760 != nil:
    section.add "Version", valid_774760
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774761 = header.getOrDefault("X-Amz-Date")
  valid_774761 = validateParameter(valid_774761, JString, required = false,
                                 default = nil)
  if valid_774761 != nil:
    section.add "X-Amz-Date", valid_774761
  var valid_774762 = header.getOrDefault("X-Amz-Security-Token")
  valid_774762 = validateParameter(valid_774762, JString, required = false,
                                 default = nil)
  if valid_774762 != nil:
    section.add "X-Amz-Security-Token", valid_774762
  var valid_774763 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774763 = validateParameter(valid_774763, JString, required = false,
                                 default = nil)
  if valid_774763 != nil:
    section.add "X-Amz-Content-Sha256", valid_774763
  var valid_774764 = header.getOrDefault("X-Amz-Algorithm")
  valid_774764 = validateParameter(valid_774764, JString, required = false,
                                 default = nil)
  if valid_774764 != nil:
    section.add "X-Amz-Algorithm", valid_774764
  var valid_774765 = header.getOrDefault("X-Amz-Signature")
  valid_774765 = validateParameter(valid_774765, JString, required = false,
                                 default = nil)
  if valid_774765 != nil:
    section.add "X-Amz-Signature", valid_774765
  var valid_774766 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774766 = validateParameter(valid_774766, JString, required = false,
                                 default = nil)
  if valid_774766 != nil:
    section.add "X-Amz-SignedHeaders", valid_774766
  var valid_774767 = header.getOrDefault("X-Amz-Credential")
  valid_774767 = validateParameter(valid_774767, JString, required = false,
                                 default = nil)
  if valid_774767 != nil:
    section.add "X-Amz-Credential", valid_774767
  result.add "header", section
  ## parameters in `formData` object:
  ##   OriginalMessageId: JString (required)
  ##                    : The message ID of the message to be bounced.
  ##   BounceSenderArn: JString
  ##                  : This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the address in the "From" header of the bounce. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.
  ##   MessageDsn.ReportingMta: JString
  ##                          : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## The reporting MTA that attempted to deliver the message, formatted as specified in <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a> (<code>mta-name-type; mta-name</code>). The default value is <code>dns; inbound-smtp.[region].amazonaws.com</code>.
  ##   MessageDsn.ExtensionFields: JArray
  ##                             : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## Additional X-headers to include in the DSN.
  ##   BounceSender: JString (required)
  ##               : The address to use in the "From" header of the bounce message. This must be an identity that you have verified with Amazon SES.
  ##   Explanation: JString
  ##              : Human-readable text for the bounce message to explain the failure. If not specified, the text will be auto-generated based on the bounced recipient information.
  ##   MessageDsn.ArrivalDate: JString
  ##                         : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## When the message was received by the reporting mail transfer agent (MTA), in <a href="https://www.ietf.org/rfc/rfc0822.txt">RFC 822</a> date-time format.
  ##   BouncedRecipientInfoList: JArray (required)
  ##                           : A list of recipients of the bounced message, including the information required to create the Delivery Status Notifications (DSNs) for the recipients. You must specify at least one <code>BouncedRecipientInfo</code> in the list.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OriginalMessageId` field"
  var valid_774768 = formData.getOrDefault("OriginalMessageId")
  valid_774768 = validateParameter(valid_774768, JString, required = true,
                                 default = nil)
  if valid_774768 != nil:
    section.add "OriginalMessageId", valid_774768
  var valid_774769 = formData.getOrDefault("BounceSenderArn")
  valid_774769 = validateParameter(valid_774769, JString, required = false,
                                 default = nil)
  if valid_774769 != nil:
    section.add "BounceSenderArn", valid_774769
  var valid_774770 = formData.getOrDefault("MessageDsn.ReportingMta")
  valid_774770 = validateParameter(valid_774770, JString, required = false,
                                 default = nil)
  if valid_774770 != nil:
    section.add "MessageDsn.ReportingMta", valid_774770
  var valid_774771 = formData.getOrDefault("MessageDsn.ExtensionFields")
  valid_774771 = validateParameter(valid_774771, JArray, required = false,
                                 default = nil)
  if valid_774771 != nil:
    section.add "MessageDsn.ExtensionFields", valid_774771
  var valid_774772 = formData.getOrDefault("BounceSender")
  valid_774772 = validateParameter(valid_774772, JString, required = true,
                                 default = nil)
  if valid_774772 != nil:
    section.add "BounceSender", valid_774772
  var valid_774773 = formData.getOrDefault("Explanation")
  valid_774773 = validateParameter(valid_774773, JString, required = false,
                                 default = nil)
  if valid_774773 != nil:
    section.add "Explanation", valid_774773
  var valid_774774 = formData.getOrDefault("MessageDsn.ArrivalDate")
  valid_774774 = validateParameter(valid_774774, JString, required = false,
                                 default = nil)
  if valid_774774 != nil:
    section.add "MessageDsn.ArrivalDate", valid_774774
  var valid_774775 = formData.getOrDefault("BouncedRecipientInfoList")
  valid_774775 = validateParameter(valid_774775, JArray, required = true, default = nil)
  if valid_774775 != nil:
    section.add "BouncedRecipientInfoList", valid_774775
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774776: Call_PostSendBounce_774756; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Generates and sends a bounce message to the sender of an email you received through Amazon SES. You can only use this API on an email up to 24 hours after you receive it.</p> <note> <p>You cannot use this API to send generic bounces for mail that was not received by Amazon SES.</p> </note> <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_774776.validator(path, query, header, formData, body)
  let scheme = call_774776.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774776.url(scheme.get, call_774776.host, call_774776.base,
                         call_774776.route, valid.getOrDefault("path"))
  result = hook(call_774776, url, valid)

proc call*(call_774777: Call_PostSendBounce_774756; OriginalMessageId: string;
          BounceSender: string; BouncedRecipientInfoList: JsonNode;
          BounceSenderArn: string = ""; MessageDsnReportingMta: string = "";
          MessageDsnExtensionFields: JsonNode = nil; Explanation: string = "";
          Action: string = "SendBounce"; MessageDsnArrivalDate: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## postSendBounce
  ## <p>Generates and sends a bounce message to the sender of an email you received through Amazon SES. You can only use this API on an email up to 24 hours after you receive it.</p> <note> <p>You cannot use this API to send generic bounces for mail that was not received by Amazon SES.</p> </note> <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   OriginalMessageId: string (required)
  ##                    : The message ID of the message to be bounced.
  ##   BounceSenderArn: string
  ##                  : This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the address in the "From" header of the bounce. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.
  ##   MessageDsnReportingMta: string
  ##                         : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## The reporting MTA that attempted to deliver the message, formatted as specified in <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a> (<code>mta-name-type; mta-name</code>). The default value is <code>dns; inbound-smtp.[region].amazonaws.com</code>.
  ##   MessageDsnExtensionFields: JArray
  ##                            : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## Additional X-headers to include in the DSN.
  ##   BounceSender: string (required)
  ##               : The address to use in the "From" header of the bounce message. This must be an identity that you have verified with Amazon SES.
  ##   Explanation: string
  ##              : Human-readable text for the bounce message to explain the failure. If not specified, the text will be auto-generated based on the bounced recipient information.
  ##   Action: string (required)
  ##   MessageDsnArrivalDate: string
  ##                        : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## When the message was received by the reporting mail transfer agent (MTA), in <a href="https://www.ietf.org/rfc/rfc0822.txt">RFC 822</a> date-time format.
  ##   BouncedRecipientInfoList: JArray (required)
  ##                           : A list of recipients of the bounced message, including the information required to create the Delivery Status Notifications (DSNs) for the recipients. You must specify at least one <code>BouncedRecipientInfo</code> in the list.
  ##   Version: string (required)
  var query_774778 = newJObject()
  var formData_774779 = newJObject()
  add(formData_774779, "OriginalMessageId", newJString(OriginalMessageId))
  add(formData_774779, "BounceSenderArn", newJString(BounceSenderArn))
  add(formData_774779, "MessageDsn.ReportingMta",
      newJString(MessageDsnReportingMta))
  if MessageDsnExtensionFields != nil:
    formData_774779.add "MessageDsn.ExtensionFields", MessageDsnExtensionFields
  add(formData_774779, "BounceSender", newJString(BounceSender))
  add(formData_774779, "Explanation", newJString(Explanation))
  add(query_774778, "Action", newJString(Action))
  add(formData_774779, "MessageDsn.ArrivalDate", newJString(MessageDsnArrivalDate))
  if BouncedRecipientInfoList != nil:
    formData_774779.add "BouncedRecipientInfoList", BouncedRecipientInfoList
  add(query_774778, "Version", newJString(Version))
  result = call_774777.call(nil, query_774778, nil, formData_774779, nil)

var postSendBounce* = Call_PostSendBounce_774756(name: "postSendBounce",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=SendBounce", validator: validate_PostSendBounce_774757,
    base: "/", url: url_PostSendBounce_774758, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSendBounce_774733 = ref object of OpenApiRestCall_772597
proc url_GetSendBounce_774735(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSendBounce_774734(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates and sends a bounce message to the sender of an email you received through Amazon SES. You can only use this API on an email up to 24 hours after you receive it.</p> <note> <p>You cannot use this API to send generic bounces for mail that was not received by Amazon SES.</p> </note> <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Explanation: JString
  ##              : Human-readable text for the bounce message to explain the failure. If not specified, the text will be auto-generated based on the bounced recipient information.
  ##   BounceSender: JString (required)
  ##               : The address to use in the "From" header of the bounce message. This must be an identity that you have verified with Amazon SES.
  ##   OriginalMessageId: JString (required)
  ##                    : The message ID of the message to be bounced.
  ##   BouncedRecipientInfoList: JArray (required)
  ##                           : A list of recipients of the bounced message, including the information required to create the Delivery Status Notifications (DSNs) for the recipients. You must specify at least one <code>BouncedRecipientInfo</code> in the list.
  ##   Action: JString (required)
  ##   BounceSenderArn: JString
  ##                  : This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the address in the "From" header of the bounce. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.
  ##   MessageDsn.ArrivalDate: JString
  ##                         : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## When the message was received by the reporting mail transfer agent (MTA), in <a href="https://www.ietf.org/rfc/rfc0822.txt">RFC 822</a> date-time format.
  ##   MessageDsn.ReportingMta: JString
  ##                          : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## The reporting MTA that attempted to deliver the message, formatted as specified in <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a> (<code>mta-name-type; mta-name</code>). The default value is <code>dns; inbound-smtp.[region].amazonaws.com</code>.
  ##   Version: JString (required)
  ##   MessageDsn.ExtensionFields: JArray
  ##                             : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## Additional X-headers to include in the DSN.
  section = newJObject()
  var valid_774736 = query.getOrDefault("Explanation")
  valid_774736 = validateParameter(valid_774736, JString, required = false,
                                 default = nil)
  if valid_774736 != nil:
    section.add "Explanation", valid_774736
  assert query != nil,
        "query argument is necessary due to required `BounceSender` field"
  var valid_774737 = query.getOrDefault("BounceSender")
  valid_774737 = validateParameter(valid_774737, JString, required = true,
                                 default = nil)
  if valid_774737 != nil:
    section.add "BounceSender", valid_774737
  var valid_774738 = query.getOrDefault("OriginalMessageId")
  valid_774738 = validateParameter(valid_774738, JString, required = true,
                                 default = nil)
  if valid_774738 != nil:
    section.add "OriginalMessageId", valid_774738
  var valid_774739 = query.getOrDefault("BouncedRecipientInfoList")
  valid_774739 = validateParameter(valid_774739, JArray, required = true, default = nil)
  if valid_774739 != nil:
    section.add "BouncedRecipientInfoList", valid_774739
  var valid_774740 = query.getOrDefault("Action")
  valid_774740 = validateParameter(valid_774740, JString, required = true,
                                 default = newJString("SendBounce"))
  if valid_774740 != nil:
    section.add "Action", valid_774740
  var valid_774741 = query.getOrDefault("BounceSenderArn")
  valid_774741 = validateParameter(valid_774741, JString, required = false,
                                 default = nil)
  if valid_774741 != nil:
    section.add "BounceSenderArn", valid_774741
  var valid_774742 = query.getOrDefault("MessageDsn.ArrivalDate")
  valid_774742 = validateParameter(valid_774742, JString, required = false,
                                 default = nil)
  if valid_774742 != nil:
    section.add "MessageDsn.ArrivalDate", valid_774742
  var valid_774743 = query.getOrDefault("MessageDsn.ReportingMta")
  valid_774743 = validateParameter(valid_774743, JString, required = false,
                                 default = nil)
  if valid_774743 != nil:
    section.add "MessageDsn.ReportingMta", valid_774743
  var valid_774744 = query.getOrDefault("Version")
  valid_774744 = validateParameter(valid_774744, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774744 != nil:
    section.add "Version", valid_774744
  var valid_774745 = query.getOrDefault("MessageDsn.ExtensionFields")
  valid_774745 = validateParameter(valid_774745, JArray, required = false,
                                 default = nil)
  if valid_774745 != nil:
    section.add "MessageDsn.ExtensionFields", valid_774745
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774746 = header.getOrDefault("X-Amz-Date")
  valid_774746 = validateParameter(valid_774746, JString, required = false,
                                 default = nil)
  if valid_774746 != nil:
    section.add "X-Amz-Date", valid_774746
  var valid_774747 = header.getOrDefault("X-Amz-Security-Token")
  valid_774747 = validateParameter(valid_774747, JString, required = false,
                                 default = nil)
  if valid_774747 != nil:
    section.add "X-Amz-Security-Token", valid_774747
  var valid_774748 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774748 = validateParameter(valid_774748, JString, required = false,
                                 default = nil)
  if valid_774748 != nil:
    section.add "X-Amz-Content-Sha256", valid_774748
  var valid_774749 = header.getOrDefault("X-Amz-Algorithm")
  valid_774749 = validateParameter(valid_774749, JString, required = false,
                                 default = nil)
  if valid_774749 != nil:
    section.add "X-Amz-Algorithm", valid_774749
  var valid_774750 = header.getOrDefault("X-Amz-Signature")
  valid_774750 = validateParameter(valid_774750, JString, required = false,
                                 default = nil)
  if valid_774750 != nil:
    section.add "X-Amz-Signature", valid_774750
  var valid_774751 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774751 = validateParameter(valid_774751, JString, required = false,
                                 default = nil)
  if valid_774751 != nil:
    section.add "X-Amz-SignedHeaders", valid_774751
  var valid_774752 = header.getOrDefault("X-Amz-Credential")
  valid_774752 = validateParameter(valid_774752, JString, required = false,
                                 default = nil)
  if valid_774752 != nil:
    section.add "X-Amz-Credential", valid_774752
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774753: Call_GetSendBounce_774733; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Generates and sends a bounce message to the sender of an email you received through Amazon SES. You can only use this API on an email up to 24 hours after you receive it.</p> <note> <p>You cannot use this API to send generic bounces for mail that was not received by Amazon SES.</p> </note> <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_774753.validator(path, query, header, formData, body)
  let scheme = call_774753.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774753.url(scheme.get, call_774753.host, call_774753.base,
                         call_774753.route, valid.getOrDefault("path"))
  result = hook(call_774753, url, valid)

proc call*(call_774754: Call_GetSendBounce_774733; BounceSender: string;
          OriginalMessageId: string; BouncedRecipientInfoList: JsonNode;
          Explanation: string = ""; Action: string = "SendBounce";
          BounceSenderArn: string = ""; MessageDsnArrivalDate: string = "";
          MessageDsnReportingMta: string = ""; Version: string = "2010-12-01";
          MessageDsnExtensionFields: JsonNode = nil): Recallable =
  ## getSendBounce
  ## <p>Generates and sends a bounce message to the sender of an email you received through Amazon SES. You can only use this API on an email up to 24 hours after you receive it.</p> <note> <p>You cannot use this API to send generic bounces for mail that was not received by Amazon SES.</p> </note> <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Explanation: string
  ##              : Human-readable text for the bounce message to explain the failure. If not specified, the text will be auto-generated based on the bounced recipient information.
  ##   BounceSender: string (required)
  ##               : The address to use in the "From" header of the bounce message. This must be an identity that you have verified with Amazon SES.
  ##   OriginalMessageId: string (required)
  ##                    : The message ID of the message to be bounced.
  ##   BouncedRecipientInfoList: JArray (required)
  ##                           : A list of recipients of the bounced message, including the information required to create the Delivery Status Notifications (DSNs) for the recipients. You must specify at least one <code>BouncedRecipientInfo</code> in the list.
  ##   Action: string (required)
  ##   BounceSenderArn: string
  ##                  : This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the address in the "From" header of the bounce. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.
  ##   MessageDsnArrivalDate: string
  ##                        : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## When the message was received by the reporting mail transfer agent (MTA), in <a href="https://www.ietf.org/rfc/rfc0822.txt">RFC 822</a> date-time format.
  ##   MessageDsnReportingMta: string
  ##                         : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## The reporting MTA that attempted to deliver the message, formatted as specified in <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a> (<code>mta-name-type; mta-name</code>). The default value is <code>dns; inbound-smtp.[region].amazonaws.com</code>.
  ##   Version: string (required)
  ##   MessageDsnExtensionFields: JArray
  ##                            : <p>Message-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p> <p>For information about receiving email through Amazon SES, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES Developer Guide</a>.</p>
  ## Additional X-headers to include in the DSN.
  var query_774755 = newJObject()
  add(query_774755, "Explanation", newJString(Explanation))
  add(query_774755, "BounceSender", newJString(BounceSender))
  add(query_774755, "OriginalMessageId", newJString(OriginalMessageId))
  if BouncedRecipientInfoList != nil:
    query_774755.add "BouncedRecipientInfoList", BouncedRecipientInfoList
  add(query_774755, "Action", newJString(Action))
  add(query_774755, "BounceSenderArn", newJString(BounceSenderArn))
  add(query_774755, "MessageDsn.ArrivalDate", newJString(MessageDsnArrivalDate))
  add(query_774755, "MessageDsn.ReportingMta", newJString(MessageDsnReportingMta))
  add(query_774755, "Version", newJString(Version))
  if MessageDsnExtensionFields != nil:
    query_774755.add "MessageDsn.ExtensionFields", MessageDsnExtensionFields
  result = call_774754.call(nil, query_774755, nil, nil, nil)

var getSendBounce* = Call_GetSendBounce_774733(name: "getSendBounce",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=SendBounce", validator: validate_GetSendBounce_774734,
    base: "/", url: url_GetSendBounce_774735, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSendBulkTemplatedEmail_774806 = ref object of OpenApiRestCall_772597
proc url_PostSendBulkTemplatedEmail_774808(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSendBulkTemplatedEmail_774807(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Composes an email message to multiple destinations. The message body is created using an email template.</p> <p>In order to send email using the <code>SendBulkTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Each <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendBulkTemplatedEmail</code> operation several times to send the message to each group.</p> </li> <li> <p>The number of destinations you can contact in a single call to the API may be limited by your account's maximum sending rate.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774809 = query.getOrDefault("Action")
  valid_774809 = validateParameter(valid_774809, JString, required = true,
                                 default = newJString("SendBulkTemplatedEmail"))
  if valid_774809 != nil:
    section.add "Action", valid_774809
  var valid_774810 = query.getOrDefault("Version")
  valid_774810 = validateParameter(valid_774810, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774810 != nil:
    section.add "Version", valid_774810
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774811 = header.getOrDefault("X-Amz-Date")
  valid_774811 = validateParameter(valid_774811, JString, required = false,
                                 default = nil)
  if valid_774811 != nil:
    section.add "X-Amz-Date", valid_774811
  var valid_774812 = header.getOrDefault("X-Amz-Security-Token")
  valid_774812 = validateParameter(valid_774812, JString, required = false,
                                 default = nil)
  if valid_774812 != nil:
    section.add "X-Amz-Security-Token", valid_774812
  var valid_774813 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774813 = validateParameter(valid_774813, JString, required = false,
                                 default = nil)
  if valid_774813 != nil:
    section.add "X-Amz-Content-Sha256", valid_774813
  var valid_774814 = header.getOrDefault("X-Amz-Algorithm")
  valid_774814 = validateParameter(valid_774814, JString, required = false,
                                 default = nil)
  if valid_774814 != nil:
    section.add "X-Amz-Algorithm", valid_774814
  var valid_774815 = header.getOrDefault("X-Amz-Signature")
  valid_774815 = validateParameter(valid_774815, JString, required = false,
                                 default = nil)
  if valid_774815 != nil:
    section.add "X-Amz-Signature", valid_774815
  var valid_774816 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774816 = validateParameter(valid_774816, JString, required = false,
                                 default = nil)
  if valid_774816 != nil:
    section.add "X-Amz-SignedHeaders", valid_774816
  var valid_774817 = header.getOrDefault("X-Amz-Credential")
  valid_774817 = validateParameter(valid_774817, JString, required = false,
                                 default = nil)
  if valid_774817 != nil:
    section.add "X-Amz-Credential", valid_774817
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendBulkTemplatedEmail</code>.
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Destinations: JArray (required)
  ##               : One or more <code>Destination</code> objects. All of the recipients in a <code>Destination</code> will receive the same version of the email. You can specify up to 50 <code>Destination</code> objects within a <code>Destinations</code> array.
  ##   DefaultTags: JArray
  ##              : A list of tags, in the form of name/value pairs, to apply to an email that you send to a destination using <code>SendBulkTemplatedEmail</code>.
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Template: JString (required)
  ##           : The template to use when sending this email.
  ##   ReturnPath: JString
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   DefaultTemplateData: JString
  ##                      : <p>A list of replacement values to apply to the template when replacement data is not specified in a Destination object. These values act as a default or fallback option when no other data is available.</p> <p>The template data is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.</p>
  ##   TemplateArn: JString
  ##              : The ARN of the template to use when sending this email.
  ##   Source: JString (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  section = newJObject()
  var valid_774818 = formData.getOrDefault("ConfigurationSetName")
  valid_774818 = validateParameter(valid_774818, JString, required = false,
                                 default = nil)
  if valid_774818 != nil:
    section.add "ConfigurationSetName", valid_774818
  var valid_774819 = formData.getOrDefault("SourceArn")
  valid_774819 = validateParameter(valid_774819, JString, required = false,
                                 default = nil)
  if valid_774819 != nil:
    section.add "SourceArn", valid_774819
  assert formData != nil,
        "formData argument is necessary due to required `Destinations` field"
  var valid_774820 = formData.getOrDefault("Destinations")
  valid_774820 = validateParameter(valid_774820, JArray, required = true, default = nil)
  if valid_774820 != nil:
    section.add "Destinations", valid_774820
  var valid_774821 = formData.getOrDefault("DefaultTags")
  valid_774821 = validateParameter(valid_774821, JArray, required = false,
                                 default = nil)
  if valid_774821 != nil:
    section.add "DefaultTags", valid_774821
  var valid_774822 = formData.getOrDefault("ReplyToAddresses")
  valid_774822 = validateParameter(valid_774822, JArray, required = false,
                                 default = nil)
  if valid_774822 != nil:
    section.add "ReplyToAddresses", valid_774822
  var valid_774823 = formData.getOrDefault("Template")
  valid_774823 = validateParameter(valid_774823, JString, required = true,
                                 default = nil)
  if valid_774823 != nil:
    section.add "Template", valid_774823
  var valid_774824 = formData.getOrDefault("ReturnPath")
  valid_774824 = validateParameter(valid_774824, JString, required = false,
                                 default = nil)
  if valid_774824 != nil:
    section.add "ReturnPath", valid_774824
  var valid_774825 = formData.getOrDefault("ReturnPathArn")
  valid_774825 = validateParameter(valid_774825, JString, required = false,
                                 default = nil)
  if valid_774825 != nil:
    section.add "ReturnPathArn", valid_774825
  var valid_774826 = formData.getOrDefault("DefaultTemplateData")
  valid_774826 = validateParameter(valid_774826, JString, required = false,
                                 default = nil)
  if valid_774826 != nil:
    section.add "DefaultTemplateData", valid_774826
  var valid_774827 = formData.getOrDefault("TemplateArn")
  valid_774827 = validateParameter(valid_774827, JString, required = false,
                                 default = nil)
  if valid_774827 != nil:
    section.add "TemplateArn", valid_774827
  var valid_774828 = formData.getOrDefault("Source")
  valid_774828 = validateParameter(valid_774828, JString, required = true,
                                 default = nil)
  if valid_774828 != nil:
    section.add "Source", valid_774828
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774829: Call_PostSendBulkTemplatedEmail_774806; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message to multiple destinations. The message body is created using an email template.</p> <p>In order to send email using the <code>SendBulkTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Each <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendBulkTemplatedEmail</code> operation several times to send the message to each group.</p> </li> <li> <p>The number of destinations you can contact in a single call to the API may be limited by your account's maximum sending rate.</p> </li> </ul>
  ## 
  let valid = call_774829.validator(path, query, header, formData, body)
  let scheme = call_774829.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774829.url(scheme.get, call_774829.host, call_774829.base,
                         call_774829.route, valid.getOrDefault("path"))
  result = hook(call_774829, url, valid)

proc call*(call_774830: Call_PostSendBulkTemplatedEmail_774806;
          Destinations: JsonNode; Template: string; Source: string;
          ConfigurationSetName: string = ""; SourceArn: string = "";
          DefaultTags: JsonNode = nil; ReplyToAddresses: JsonNode = nil;
          ReturnPath: string = ""; ReturnPathArn: string = "";
          Action: string = "SendBulkTemplatedEmail";
          DefaultTemplateData: string = ""; TemplateArn: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## postSendBulkTemplatedEmail
  ## <p>Composes an email message to multiple destinations. The message body is created using an email template.</p> <p>In order to send email using the <code>SendBulkTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Each <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendBulkTemplatedEmail</code> operation several times to send the message to each group.</p> </li> <li> <p>The number of destinations you can contact in a single call to the API may be limited by your account's maximum sending rate.</p> </li> </ul>
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendBulkTemplatedEmail</code>.
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Destinations: JArray (required)
  ##               : One or more <code>Destination</code> objects. All of the recipients in a <code>Destination</code> will receive the same version of the email. You can specify up to 50 <code>Destination</code> objects within a <code>Destinations</code> array.
  ##   DefaultTags: JArray
  ##              : A list of tags, in the form of name/value pairs, to apply to an email that you send to a destination using <code>SendBulkTemplatedEmail</code>.
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Template: string (required)
  ##           : The template to use when sending this email.
  ##   ReturnPath: string
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Action: string (required)
  ##   DefaultTemplateData: string
  ##                      : <p>A list of replacement values to apply to the template when replacement data is not specified in a Destination object. These values act as a default or fallback option when no other data is available.</p> <p>The template data is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.</p>
  ##   TemplateArn: string
  ##              : The ARN of the template to use when sending this email.
  ##   Version: string (required)
  ##   Source: string (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  var query_774831 = newJObject()
  var formData_774832 = newJObject()
  add(formData_774832, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_774832, "SourceArn", newJString(SourceArn))
  if Destinations != nil:
    formData_774832.add "Destinations", Destinations
  if DefaultTags != nil:
    formData_774832.add "DefaultTags", DefaultTags
  if ReplyToAddresses != nil:
    formData_774832.add "ReplyToAddresses", ReplyToAddresses
  add(formData_774832, "Template", newJString(Template))
  add(formData_774832, "ReturnPath", newJString(ReturnPath))
  add(formData_774832, "ReturnPathArn", newJString(ReturnPathArn))
  add(query_774831, "Action", newJString(Action))
  add(formData_774832, "DefaultTemplateData", newJString(DefaultTemplateData))
  add(formData_774832, "TemplateArn", newJString(TemplateArn))
  add(query_774831, "Version", newJString(Version))
  add(formData_774832, "Source", newJString(Source))
  result = call_774830.call(nil, query_774831, nil, formData_774832, nil)

var postSendBulkTemplatedEmail* = Call_PostSendBulkTemplatedEmail_774806(
    name: "postSendBulkTemplatedEmail", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SendBulkTemplatedEmail",
    validator: validate_PostSendBulkTemplatedEmail_774807, base: "/",
    url: url_PostSendBulkTemplatedEmail_774808,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSendBulkTemplatedEmail_774780 = ref object of OpenApiRestCall_772597
proc url_GetSendBulkTemplatedEmail_774782(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSendBulkTemplatedEmail_774781(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Composes an email message to multiple destinations. The message body is created using an email template.</p> <p>In order to send email using the <code>SendBulkTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Each <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendBulkTemplatedEmail</code> operation several times to send the message to each group.</p> </li> <li> <p>The number of destinations you can contact in a single call to the API may be limited by your account's maximum sending rate.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Template: JString (required)
  ##           : The template to use when sending this email.
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   TemplateArn: JString
  ##              : The ARN of the template to use when sending this email.
  ##   DefaultTemplateData: JString
  ##                      : <p>A list of replacement values to apply to the template when replacement data is not specified in a Destination object. These values act as a default or fallback option when no other data is available.</p> <p>The template data is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.</p>
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   DefaultTags: JArray
  ##              : A list of tags, in the form of name/value pairs, to apply to an email that you send to a destination using <code>SendBulkTemplatedEmail</code>.
  ##   Action: JString (required)
  ##   Destinations: JArray (required)
  ##               : One or more <code>Destination</code> objects. All of the recipients in a <code>Destination</code> will receive the same version of the email. You can specify up to 50 <code>Destination</code> objects within a <code>Destinations</code> array.
  ##   Source: JString (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   ReturnPath: JString
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendBulkTemplatedEmail</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_774783 = query.getOrDefault("ReplyToAddresses")
  valid_774783 = validateParameter(valid_774783, JArray, required = false,
                                 default = nil)
  if valid_774783 != nil:
    section.add "ReplyToAddresses", valid_774783
  assert query != nil,
        "query argument is necessary due to required `Template` field"
  var valid_774784 = query.getOrDefault("Template")
  valid_774784 = validateParameter(valid_774784, JString, required = true,
                                 default = nil)
  if valid_774784 != nil:
    section.add "Template", valid_774784
  var valid_774785 = query.getOrDefault("ReturnPathArn")
  valid_774785 = validateParameter(valid_774785, JString, required = false,
                                 default = nil)
  if valid_774785 != nil:
    section.add "ReturnPathArn", valid_774785
  var valid_774786 = query.getOrDefault("TemplateArn")
  valid_774786 = validateParameter(valid_774786, JString, required = false,
                                 default = nil)
  if valid_774786 != nil:
    section.add "TemplateArn", valid_774786
  var valid_774787 = query.getOrDefault("DefaultTemplateData")
  valid_774787 = validateParameter(valid_774787, JString, required = false,
                                 default = nil)
  if valid_774787 != nil:
    section.add "DefaultTemplateData", valid_774787
  var valid_774788 = query.getOrDefault("SourceArn")
  valid_774788 = validateParameter(valid_774788, JString, required = false,
                                 default = nil)
  if valid_774788 != nil:
    section.add "SourceArn", valid_774788
  var valid_774789 = query.getOrDefault("DefaultTags")
  valid_774789 = validateParameter(valid_774789, JArray, required = false,
                                 default = nil)
  if valid_774789 != nil:
    section.add "DefaultTags", valid_774789
  var valid_774790 = query.getOrDefault("Action")
  valid_774790 = validateParameter(valid_774790, JString, required = true,
                                 default = newJString("SendBulkTemplatedEmail"))
  if valid_774790 != nil:
    section.add "Action", valid_774790
  var valid_774791 = query.getOrDefault("Destinations")
  valid_774791 = validateParameter(valid_774791, JArray, required = true, default = nil)
  if valid_774791 != nil:
    section.add "Destinations", valid_774791
  var valid_774792 = query.getOrDefault("Source")
  valid_774792 = validateParameter(valid_774792, JString, required = true,
                                 default = nil)
  if valid_774792 != nil:
    section.add "Source", valid_774792
  var valid_774793 = query.getOrDefault("ReturnPath")
  valid_774793 = validateParameter(valid_774793, JString, required = false,
                                 default = nil)
  if valid_774793 != nil:
    section.add "ReturnPath", valid_774793
  var valid_774794 = query.getOrDefault("ConfigurationSetName")
  valid_774794 = validateParameter(valid_774794, JString, required = false,
                                 default = nil)
  if valid_774794 != nil:
    section.add "ConfigurationSetName", valid_774794
  var valid_774795 = query.getOrDefault("Version")
  valid_774795 = validateParameter(valid_774795, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774795 != nil:
    section.add "Version", valid_774795
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774796 = header.getOrDefault("X-Amz-Date")
  valid_774796 = validateParameter(valid_774796, JString, required = false,
                                 default = nil)
  if valid_774796 != nil:
    section.add "X-Amz-Date", valid_774796
  var valid_774797 = header.getOrDefault("X-Amz-Security-Token")
  valid_774797 = validateParameter(valid_774797, JString, required = false,
                                 default = nil)
  if valid_774797 != nil:
    section.add "X-Amz-Security-Token", valid_774797
  var valid_774798 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774798 = validateParameter(valid_774798, JString, required = false,
                                 default = nil)
  if valid_774798 != nil:
    section.add "X-Amz-Content-Sha256", valid_774798
  var valid_774799 = header.getOrDefault("X-Amz-Algorithm")
  valid_774799 = validateParameter(valid_774799, JString, required = false,
                                 default = nil)
  if valid_774799 != nil:
    section.add "X-Amz-Algorithm", valid_774799
  var valid_774800 = header.getOrDefault("X-Amz-Signature")
  valid_774800 = validateParameter(valid_774800, JString, required = false,
                                 default = nil)
  if valid_774800 != nil:
    section.add "X-Amz-Signature", valid_774800
  var valid_774801 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774801 = validateParameter(valid_774801, JString, required = false,
                                 default = nil)
  if valid_774801 != nil:
    section.add "X-Amz-SignedHeaders", valid_774801
  var valid_774802 = header.getOrDefault("X-Amz-Credential")
  valid_774802 = validateParameter(valid_774802, JString, required = false,
                                 default = nil)
  if valid_774802 != nil:
    section.add "X-Amz-Credential", valid_774802
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774803: Call_GetSendBulkTemplatedEmail_774780; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message to multiple destinations. The message body is created using an email template.</p> <p>In order to send email using the <code>SendBulkTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Each <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendBulkTemplatedEmail</code> operation several times to send the message to each group.</p> </li> <li> <p>The number of destinations you can contact in a single call to the API may be limited by your account's maximum sending rate.</p> </li> </ul>
  ## 
  let valid = call_774803.validator(path, query, header, formData, body)
  let scheme = call_774803.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774803.url(scheme.get, call_774803.host, call_774803.base,
                         call_774803.route, valid.getOrDefault("path"))
  result = hook(call_774803, url, valid)

proc call*(call_774804: Call_GetSendBulkTemplatedEmail_774780; Template: string;
          Destinations: JsonNode; Source: string; ReplyToAddresses: JsonNode = nil;
          ReturnPathArn: string = ""; TemplateArn: string = "";
          DefaultTemplateData: string = ""; SourceArn: string = "";
          DefaultTags: JsonNode = nil; Action: string = "SendBulkTemplatedEmail";
          ReturnPath: string = ""; ConfigurationSetName: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## getSendBulkTemplatedEmail
  ## <p>Composes an email message to multiple destinations. The message body is created using an email template.</p> <p>In order to send email using the <code>SendBulkTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Each <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendBulkTemplatedEmail</code> operation several times to send the message to each group.</p> </li> <li> <p>The number of destinations you can contact in a single call to the API may be limited by your account's maximum sending rate.</p> </li> </ul>
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Template: string (required)
  ##           : The template to use when sending this email.
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   TemplateArn: string
  ##              : The ARN of the template to use when sending this email.
  ##   DefaultTemplateData: string
  ##                      : <p>A list of replacement values to apply to the template when replacement data is not specified in a Destination object. These values act as a default or fallback option when no other data is available.</p> <p>The template data is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.</p>
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   DefaultTags: JArray
  ##              : A list of tags, in the form of name/value pairs, to apply to an email that you send to a destination using <code>SendBulkTemplatedEmail</code>.
  ##   Action: string (required)
  ##   Destinations: JArray (required)
  ##               : One or more <code>Destination</code> objects. All of the recipients in a <code>Destination</code> will receive the same version of the email. You can specify up to 50 <code>Destination</code> objects within a <code>Destinations</code> array.
  ##   Source: string (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   ReturnPath: string
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendBulkTemplatedEmail</code>.
  ##   Version: string (required)
  var query_774805 = newJObject()
  if ReplyToAddresses != nil:
    query_774805.add "ReplyToAddresses", ReplyToAddresses
  add(query_774805, "Template", newJString(Template))
  add(query_774805, "ReturnPathArn", newJString(ReturnPathArn))
  add(query_774805, "TemplateArn", newJString(TemplateArn))
  add(query_774805, "DefaultTemplateData", newJString(DefaultTemplateData))
  add(query_774805, "SourceArn", newJString(SourceArn))
  if DefaultTags != nil:
    query_774805.add "DefaultTags", DefaultTags
  add(query_774805, "Action", newJString(Action))
  if Destinations != nil:
    query_774805.add "Destinations", Destinations
  add(query_774805, "Source", newJString(Source))
  add(query_774805, "ReturnPath", newJString(ReturnPath))
  add(query_774805, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_774805, "Version", newJString(Version))
  result = call_774804.call(nil, query_774805, nil, nil, nil)

var getSendBulkTemplatedEmail* = Call_GetSendBulkTemplatedEmail_774780(
    name: "getSendBulkTemplatedEmail", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SendBulkTemplatedEmail",
    validator: validate_GetSendBulkTemplatedEmail_774781, base: "/",
    url: url_GetSendBulkTemplatedEmail_774782,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSendCustomVerificationEmail_774851 = ref object of OpenApiRestCall_772597
proc url_PostSendCustomVerificationEmail_774853(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSendCustomVerificationEmail_774852(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address.</p> <p>To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774854 = query.getOrDefault("Action")
  valid_774854 = validateParameter(valid_774854, JString, required = true, default = newJString(
      "SendCustomVerificationEmail"))
  if valid_774854 != nil:
    section.add "Action", valid_774854
  var valid_774855 = query.getOrDefault("Version")
  valid_774855 = validateParameter(valid_774855, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774855 != nil:
    section.add "Version", valid_774855
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774856 = header.getOrDefault("X-Amz-Date")
  valid_774856 = validateParameter(valid_774856, JString, required = false,
                                 default = nil)
  if valid_774856 != nil:
    section.add "X-Amz-Date", valid_774856
  var valid_774857 = header.getOrDefault("X-Amz-Security-Token")
  valid_774857 = validateParameter(valid_774857, JString, required = false,
                                 default = nil)
  if valid_774857 != nil:
    section.add "X-Amz-Security-Token", valid_774857
  var valid_774858 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774858 = validateParameter(valid_774858, JString, required = false,
                                 default = nil)
  if valid_774858 != nil:
    section.add "X-Amz-Content-Sha256", valid_774858
  var valid_774859 = header.getOrDefault("X-Amz-Algorithm")
  valid_774859 = validateParameter(valid_774859, JString, required = false,
                                 default = nil)
  if valid_774859 != nil:
    section.add "X-Amz-Algorithm", valid_774859
  var valid_774860 = header.getOrDefault("X-Amz-Signature")
  valid_774860 = validateParameter(valid_774860, JString, required = false,
                                 default = nil)
  if valid_774860 != nil:
    section.add "X-Amz-Signature", valid_774860
  var valid_774861 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774861 = validateParameter(valid_774861, JString, required = false,
                                 default = nil)
  if valid_774861 != nil:
    section.add "X-Amz-SignedHeaders", valid_774861
  var valid_774862 = header.getOrDefault("X-Amz-Credential")
  valid_774862 = validateParameter(valid_774862, JString, required = false,
                                 default = nil)
  if valid_774862 != nil:
    section.add "X-Amz-Credential", valid_774862
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString
  ##                       : Name of a configuration set to use when sending the verification email.
  ##   EmailAddress: JString (required)
  ##               : The email address to verify.
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template to use when sending the verification email.
  section = newJObject()
  var valid_774863 = formData.getOrDefault("ConfigurationSetName")
  valid_774863 = validateParameter(valid_774863, JString, required = false,
                                 default = nil)
  if valid_774863 != nil:
    section.add "ConfigurationSetName", valid_774863
  assert formData != nil,
        "formData argument is necessary due to required `EmailAddress` field"
  var valid_774864 = formData.getOrDefault("EmailAddress")
  valid_774864 = validateParameter(valid_774864, JString, required = true,
                                 default = nil)
  if valid_774864 != nil:
    section.add "EmailAddress", valid_774864
  var valid_774865 = formData.getOrDefault("TemplateName")
  valid_774865 = validateParameter(valid_774865, JString, required = true,
                                 default = nil)
  if valid_774865 != nil:
    section.add "TemplateName", valid_774865
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774866: Call_PostSendCustomVerificationEmail_774851;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address.</p> <p>To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_774866.validator(path, query, header, formData, body)
  let scheme = call_774866.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774866.url(scheme.get, call_774866.host, call_774866.base,
                         call_774866.route, valid.getOrDefault("path"))
  result = hook(call_774866, url, valid)

proc call*(call_774867: Call_PostSendCustomVerificationEmail_774851;
          EmailAddress: string; TemplateName: string;
          ConfigurationSetName: string = "";
          Action: string = "SendCustomVerificationEmail";
          Version: string = "2010-12-01"): Recallable =
  ## postSendCustomVerificationEmail
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address.</p> <p>To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string
  ##                       : Name of a configuration set to use when sending the verification email.
  ##   EmailAddress: string (required)
  ##               : The email address to verify.
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template to use when sending the verification email.
  ##   Version: string (required)
  var query_774868 = newJObject()
  var formData_774869 = newJObject()
  add(formData_774869, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_774869, "EmailAddress", newJString(EmailAddress))
  add(query_774868, "Action", newJString(Action))
  add(formData_774869, "TemplateName", newJString(TemplateName))
  add(query_774868, "Version", newJString(Version))
  result = call_774867.call(nil, query_774868, nil, formData_774869, nil)

var postSendCustomVerificationEmail* = Call_PostSendCustomVerificationEmail_774851(
    name: "postSendCustomVerificationEmail", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SendCustomVerificationEmail",
    validator: validate_PostSendCustomVerificationEmail_774852, base: "/",
    url: url_PostSendCustomVerificationEmail_774853,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSendCustomVerificationEmail_774833 = ref object of OpenApiRestCall_772597
proc url_GetSendCustomVerificationEmail_774835(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSendCustomVerificationEmail_774834(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address.</p> <p>To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template to use when sending the verification email.
  ##   EmailAddress: JString (required)
  ##               : The email address to verify.
  ##   ConfigurationSetName: JString
  ##                       : Name of a configuration set to use when sending the verification email.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774836 = query.getOrDefault("Action")
  valid_774836 = validateParameter(valid_774836, JString, required = true, default = newJString(
      "SendCustomVerificationEmail"))
  if valid_774836 != nil:
    section.add "Action", valid_774836
  var valid_774837 = query.getOrDefault("TemplateName")
  valid_774837 = validateParameter(valid_774837, JString, required = true,
                                 default = nil)
  if valid_774837 != nil:
    section.add "TemplateName", valid_774837
  var valid_774838 = query.getOrDefault("EmailAddress")
  valid_774838 = validateParameter(valid_774838, JString, required = true,
                                 default = nil)
  if valid_774838 != nil:
    section.add "EmailAddress", valid_774838
  var valid_774839 = query.getOrDefault("ConfigurationSetName")
  valid_774839 = validateParameter(valid_774839, JString, required = false,
                                 default = nil)
  if valid_774839 != nil:
    section.add "ConfigurationSetName", valid_774839
  var valid_774840 = query.getOrDefault("Version")
  valid_774840 = validateParameter(valid_774840, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774840 != nil:
    section.add "Version", valid_774840
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774841 = header.getOrDefault("X-Amz-Date")
  valid_774841 = validateParameter(valid_774841, JString, required = false,
                                 default = nil)
  if valid_774841 != nil:
    section.add "X-Amz-Date", valid_774841
  var valid_774842 = header.getOrDefault("X-Amz-Security-Token")
  valid_774842 = validateParameter(valid_774842, JString, required = false,
                                 default = nil)
  if valid_774842 != nil:
    section.add "X-Amz-Security-Token", valid_774842
  var valid_774843 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774843 = validateParameter(valid_774843, JString, required = false,
                                 default = nil)
  if valid_774843 != nil:
    section.add "X-Amz-Content-Sha256", valid_774843
  var valid_774844 = header.getOrDefault("X-Amz-Algorithm")
  valid_774844 = validateParameter(valid_774844, JString, required = false,
                                 default = nil)
  if valid_774844 != nil:
    section.add "X-Amz-Algorithm", valid_774844
  var valid_774845 = header.getOrDefault("X-Amz-Signature")
  valid_774845 = validateParameter(valid_774845, JString, required = false,
                                 default = nil)
  if valid_774845 != nil:
    section.add "X-Amz-Signature", valid_774845
  var valid_774846 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774846 = validateParameter(valid_774846, JString, required = false,
                                 default = nil)
  if valid_774846 != nil:
    section.add "X-Amz-SignedHeaders", valid_774846
  var valid_774847 = header.getOrDefault("X-Amz-Credential")
  valid_774847 = validateParameter(valid_774847, JString, required = false,
                                 default = nil)
  if valid_774847 != nil:
    section.add "X-Amz-Credential", valid_774847
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774848: Call_GetSendCustomVerificationEmail_774833; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address.</p> <p>To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_774848.validator(path, query, header, formData, body)
  let scheme = call_774848.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774848.url(scheme.get, call_774848.host, call_774848.base,
                         call_774848.route, valid.getOrDefault("path"))
  result = hook(call_774848, url, valid)

proc call*(call_774849: Call_GetSendCustomVerificationEmail_774833;
          TemplateName: string; EmailAddress: string;
          Action: string = "SendCustomVerificationEmail";
          ConfigurationSetName: string = ""; Version: string = "2010-12-01"): Recallable =
  ## getSendCustomVerificationEmail
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address.</p> <p>To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template to use when sending the verification email.
  ##   EmailAddress: string (required)
  ##               : The email address to verify.
  ##   ConfigurationSetName: string
  ##                       : Name of a configuration set to use when sending the verification email.
  ##   Version: string (required)
  var query_774850 = newJObject()
  add(query_774850, "Action", newJString(Action))
  add(query_774850, "TemplateName", newJString(TemplateName))
  add(query_774850, "EmailAddress", newJString(EmailAddress))
  add(query_774850, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_774850, "Version", newJString(Version))
  result = call_774849.call(nil, query_774850, nil, nil, nil)

var getSendCustomVerificationEmail* = Call_GetSendCustomVerificationEmail_774833(
    name: "getSendCustomVerificationEmail", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SendCustomVerificationEmail",
    validator: validate_GetSendCustomVerificationEmail_774834, base: "/",
    url: url_GetSendCustomVerificationEmail_774835,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSendEmail_774897 = ref object of OpenApiRestCall_772597
proc url_PostSendEmail_774899(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSendEmail_774898(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Composes an email message and immediately queues it for sending. In order to send email using the <code>SendEmail</code> operation, your message must meet the following requirements:</p> <ul> <li> <p>The message must be sent from a verified email address or domain. If you attempt to send email using a non-verified address or domain, the operation will result in an "Email address not verified" error. </p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>The message must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendEmail</code> operation several times to send the message to each group.</p> </li> </ul> <important> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774900 = query.getOrDefault("Action")
  valid_774900 = validateParameter(valid_774900, JString, required = true,
                                 default = newJString("SendEmail"))
  if valid_774900 != nil:
    section.add "Action", valid_774900
  var valid_774901 = query.getOrDefault("Version")
  valid_774901 = validateParameter(valid_774901, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774901 != nil:
    section.add "Version", valid_774901
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774902 = header.getOrDefault("X-Amz-Date")
  valid_774902 = validateParameter(valid_774902, JString, required = false,
                                 default = nil)
  if valid_774902 != nil:
    section.add "X-Amz-Date", valid_774902
  var valid_774903 = header.getOrDefault("X-Amz-Security-Token")
  valid_774903 = validateParameter(valid_774903, JString, required = false,
                                 default = nil)
  if valid_774903 != nil:
    section.add "X-Amz-Security-Token", valid_774903
  var valid_774904 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774904 = validateParameter(valid_774904, JString, required = false,
                                 default = nil)
  if valid_774904 != nil:
    section.add "X-Amz-Content-Sha256", valid_774904
  var valid_774905 = header.getOrDefault("X-Amz-Algorithm")
  valid_774905 = validateParameter(valid_774905, JString, required = false,
                                 default = nil)
  if valid_774905 != nil:
    section.add "X-Amz-Algorithm", valid_774905
  var valid_774906 = header.getOrDefault("X-Amz-Signature")
  valid_774906 = validateParameter(valid_774906, JString, required = false,
                                 default = nil)
  if valid_774906 != nil:
    section.add "X-Amz-Signature", valid_774906
  var valid_774907 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774907 = validateParameter(valid_774907, JString, required = false,
                                 default = nil)
  if valid_774907 != nil:
    section.add "X-Amz-SignedHeaders", valid_774907
  var valid_774908 = header.getOrDefault("X-Amz-Credential")
  valid_774908 = validateParameter(valid_774908, JString, required = false,
                                 default = nil)
  if valid_774908 != nil:
    section.add "X-Amz-Credential", valid_774908
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendEmail</code>.
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Destination.BccAddresses: JArray
  ##                           : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Message.Body: JString
  ##               : Represents the message to be sent, composed of a subject and a body.
  ## The message body.
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ReturnPath: JString
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Destination.CcAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   Message.Subject: JString
  ##                  : Represents the message to be sent, composed of a subject and a body.
  ## The subject of the message: A short summary of the content, which will appear in the recipient's inbox.
  ##   Source: JString (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   Destination.ToAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  section = newJObject()
  var valid_774909 = formData.getOrDefault("ConfigurationSetName")
  valid_774909 = validateParameter(valid_774909, JString, required = false,
                                 default = nil)
  if valid_774909 != nil:
    section.add "ConfigurationSetName", valid_774909
  var valid_774910 = formData.getOrDefault("SourceArn")
  valid_774910 = validateParameter(valid_774910, JString, required = false,
                                 default = nil)
  if valid_774910 != nil:
    section.add "SourceArn", valid_774910
  var valid_774911 = formData.getOrDefault("Destination.BccAddresses")
  valid_774911 = validateParameter(valid_774911, JArray, required = false,
                                 default = nil)
  if valid_774911 != nil:
    section.add "Destination.BccAddresses", valid_774911
  var valid_774912 = formData.getOrDefault("ReplyToAddresses")
  valid_774912 = validateParameter(valid_774912, JArray, required = false,
                                 default = nil)
  if valid_774912 != nil:
    section.add "ReplyToAddresses", valid_774912
  var valid_774913 = formData.getOrDefault("Message.Body")
  valid_774913 = validateParameter(valid_774913, JString, required = false,
                                 default = nil)
  if valid_774913 != nil:
    section.add "Message.Body", valid_774913
  var valid_774914 = formData.getOrDefault("Tags")
  valid_774914 = validateParameter(valid_774914, JArray, required = false,
                                 default = nil)
  if valid_774914 != nil:
    section.add "Tags", valid_774914
  var valid_774915 = formData.getOrDefault("ReturnPath")
  valid_774915 = validateParameter(valid_774915, JString, required = false,
                                 default = nil)
  if valid_774915 != nil:
    section.add "ReturnPath", valid_774915
  var valid_774916 = formData.getOrDefault("ReturnPathArn")
  valid_774916 = validateParameter(valid_774916, JString, required = false,
                                 default = nil)
  if valid_774916 != nil:
    section.add "ReturnPathArn", valid_774916
  var valid_774917 = formData.getOrDefault("Destination.CcAddresses")
  valid_774917 = validateParameter(valid_774917, JArray, required = false,
                                 default = nil)
  if valid_774917 != nil:
    section.add "Destination.CcAddresses", valid_774917
  var valid_774918 = formData.getOrDefault("Message.Subject")
  valid_774918 = validateParameter(valid_774918, JString, required = false,
                                 default = nil)
  if valid_774918 != nil:
    section.add "Message.Subject", valid_774918
  assert formData != nil,
        "formData argument is necessary due to required `Source` field"
  var valid_774919 = formData.getOrDefault("Source")
  valid_774919 = validateParameter(valid_774919, JString, required = true,
                                 default = nil)
  if valid_774919 != nil:
    section.add "Source", valid_774919
  var valid_774920 = formData.getOrDefault("Destination.ToAddresses")
  valid_774920 = validateParameter(valid_774920, JArray, required = false,
                                 default = nil)
  if valid_774920 != nil:
    section.add "Destination.ToAddresses", valid_774920
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774921: Call_PostSendEmail_774897; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message and immediately queues it for sending. In order to send email using the <code>SendEmail</code> operation, your message must meet the following requirements:</p> <ul> <li> <p>The message must be sent from a verified email address or domain. If you attempt to send email using a non-verified address or domain, the operation will result in an "Email address not verified" error. </p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>The message must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendEmail</code> operation several times to send the message to each group.</p> </li> </ul> <important> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </important>
  ## 
  let valid = call_774921.validator(path, query, header, formData, body)
  let scheme = call_774921.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774921.url(scheme.get, call_774921.host, call_774921.base,
                         call_774921.route, valid.getOrDefault("path"))
  result = hook(call_774921, url, valid)

proc call*(call_774922: Call_PostSendEmail_774897; Source: string;
          ConfigurationSetName: string = ""; SourceArn: string = "";
          DestinationBccAddresses: JsonNode = nil; ReplyToAddresses: JsonNode = nil;
          MessageBody: string = ""; Tags: JsonNode = nil; ReturnPath: string = "";
          ReturnPathArn: string = ""; Action: string = "SendEmail";
          DestinationCcAddresses: JsonNode = nil; MessageSubject: string = "";
          Version: string = "2010-12-01"; DestinationToAddresses: JsonNode = nil): Recallable =
  ## postSendEmail
  ## <p>Composes an email message and immediately queues it for sending. In order to send email using the <code>SendEmail</code> operation, your message must meet the following requirements:</p> <ul> <li> <p>The message must be sent from a verified email address or domain. If you attempt to send email using a non-verified address or domain, the operation will result in an "Email address not verified" error. </p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>The message must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendEmail</code> operation several times to send the message to each group.</p> </li> </ul> <important> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </important>
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendEmail</code>.
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   DestinationBccAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   MessageBody: string
  ##              : Represents the message to be sent, composed of a subject and a body.
  ## The message body.
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ReturnPath: string
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Action: string (required)
  ##   DestinationCcAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   MessageSubject: string
  ##                 : Represents the message to be sent, composed of a subject and a body.
  ## The subject of the message: A short summary of the content, which will appear in the recipient's inbox.
  ##   Version: string (required)
  ##   Source: string (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   DestinationToAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  var query_774923 = newJObject()
  var formData_774924 = newJObject()
  add(formData_774924, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_774924, "SourceArn", newJString(SourceArn))
  if DestinationBccAddresses != nil:
    formData_774924.add "Destination.BccAddresses", DestinationBccAddresses
  if ReplyToAddresses != nil:
    formData_774924.add "ReplyToAddresses", ReplyToAddresses
  add(formData_774924, "Message.Body", newJString(MessageBody))
  if Tags != nil:
    formData_774924.add "Tags", Tags
  add(formData_774924, "ReturnPath", newJString(ReturnPath))
  add(formData_774924, "ReturnPathArn", newJString(ReturnPathArn))
  add(query_774923, "Action", newJString(Action))
  if DestinationCcAddresses != nil:
    formData_774924.add "Destination.CcAddresses", DestinationCcAddresses
  add(formData_774924, "Message.Subject", newJString(MessageSubject))
  add(query_774923, "Version", newJString(Version))
  add(formData_774924, "Source", newJString(Source))
  if DestinationToAddresses != nil:
    formData_774924.add "Destination.ToAddresses", DestinationToAddresses
  result = call_774922.call(nil, query_774923, nil, formData_774924, nil)

var postSendEmail* = Call_PostSendEmail_774897(name: "postSendEmail",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=SendEmail", validator: validate_PostSendEmail_774898,
    base: "/", url: url_PostSendEmail_774899, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSendEmail_774870 = ref object of OpenApiRestCall_772597
proc url_GetSendEmail_774872(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSendEmail_774871(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Composes an email message and immediately queues it for sending. In order to send email using the <code>SendEmail</code> operation, your message must meet the following requirements:</p> <ul> <li> <p>The message must be sent from a verified email address or domain. If you attempt to send email using a non-verified address or domain, the operation will result in an "Email address not verified" error. </p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>The message must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendEmail</code> operation several times to send the message to each group.</p> </li> </ul> <important> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Destination.BccAddresses: JArray
  ##                           : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Destination.ToAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Action: JString (required)
  ##   Destination.CcAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   Message.Subject: JString
  ##                  : Represents the message to be sent, composed of a subject and a body.
  ## The subject of the message: A short summary of the content, which will appear in the recipient's inbox.
  ##   Source: JString (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   ReturnPath: JString
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   Message.Body: JString
  ##               : Represents the message to be sent, composed of a subject and a body.
  ## The message body.
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendEmail</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_774873 = query.getOrDefault("ReplyToAddresses")
  valid_774873 = validateParameter(valid_774873, JArray, required = false,
                                 default = nil)
  if valid_774873 != nil:
    section.add "ReplyToAddresses", valid_774873
  var valid_774874 = query.getOrDefault("Destination.BccAddresses")
  valid_774874 = validateParameter(valid_774874, JArray, required = false,
                                 default = nil)
  if valid_774874 != nil:
    section.add "Destination.BccAddresses", valid_774874
  var valid_774875 = query.getOrDefault("ReturnPathArn")
  valid_774875 = validateParameter(valid_774875, JString, required = false,
                                 default = nil)
  if valid_774875 != nil:
    section.add "ReturnPathArn", valid_774875
  var valid_774876 = query.getOrDefault("Destination.ToAddresses")
  valid_774876 = validateParameter(valid_774876, JArray, required = false,
                                 default = nil)
  if valid_774876 != nil:
    section.add "Destination.ToAddresses", valid_774876
  var valid_774877 = query.getOrDefault("Tags")
  valid_774877 = validateParameter(valid_774877, JArray, required = false,
                                 default = nil)
  if valid_774877 != nil:
    section.add "Tags", valid_774877
  var valid_774878 = query.getOrDefault("SourceArn")
  valid_774878 = validateParameter(valid_774878, JString, required = false,
                                 default = nil)
  if valid_774878 != nil:
    section.add "SourceArn", valid_774878
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774879 = query.getOrDefault("Action")
  valid_774879 = validateParameter(valid_774879, JString, required = true,
                                 default = newJString("SendEmail"))
  if valid_774879 != nil:
    section.add "Action", valid_774879
  var valid_774880 = query.getOrDefault("Destination.CcAddresses")
  valid_774880 = validateParameter(valid_774880, JArray, required = false,
                                 default = nil)
  if valid_774880 != nil:
    section.add "Destination.CcAddresses", valid_774880
  var valid_774881 = query.getOrDefault("Message.Subject")
  valid_774881 = validateParameter(valid_774881, JString, required = false,
                                 default = nil)
  if valid_774881 != nil:
    section.add "Message.Subject", valid_774881
  var valid_774882 = query.getOrDefault("Source")
  valid_774882 = validateParameter(valid_774882, JString, required = true,
                                 default = nil)
  if valid_774882 != nil:
    section.add "Source", valid_774882
  var valid_774883 = query.getOrDefault("ReturnPath")
  valid_774883 = validateParameter(valid_774883, JString, required = false,
                                 default = nil)
  if valid_774883 != nil:
    section.add "ReturnPath", valid_774883
  var valid_774884 = query.getOrDefault("Message.Body")
  valid_774884 = validateParameter(valid_774884, JString, required = false,
                                 default = nil)
  if valid_774884 != nil:
    section.add "Message.Body", valid_774884
  var valid_774885 = query.getOrDefault("ConfigurationSetName")
  valid_774885 = validateParameter(valid_774885, JString, required = false,
                                 default = nil)
  if valid_774885 != nil:
    section.add "ConfigurationSetName", valid_774885
  var valid_774886 = query.getOrDefault("Version")
  valid_774886 = validateParameter(valid_774886, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774886 != nil:
    section.add "Version", valid_774886
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774887 = header.getOrDefault("X-Amz-Date")
  valid_774887 = validateParameter(valid_774887, JString, required = false,
                                 default = nil)
  if valid_774887 != nil:
    section.add "X-Amz-Date", valid_774887
  var valid_774888 = header.getOrDefault("X-Amz-Security-Token")
  valid_774888 = validateParameter(valid_774888, JString, required = false,
                                 default = nil)
  if valid_774888 != nil:
    section.add "X-Amz-Security-Token", valid_774888
  var valid_774889 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774889 = validateParameter(valid_774889, JString, required = false,
                                 default = nil)
  if valid_774889 != nil:
    section.add "X-Amz-Content-Sha256", valid_774889
  var valid_774890 = header.getOrDefault("X-Amz-Algorithm")
  valid_774890 = validateParameter(valid_774890, JString, required = false,
                                 default = nil)
  if valid_774890 != nil:
    section.add "X-Amz-Algorithm", valid_774890
  var valid_774891 = header.getOrDefault("X-Amz-Signature")
  valid_774891 = validateParameter(valid_774891, JString, required = false,
                                 default = nil)
  if valid_774891 != nil:
    section.add "X-Amz-Signature", valid_774891
  var valid_774892 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774892 = validateParameter(valid_774892, JString, required = false,
                                 default = nil)
  if valid_774892 != nil:
    section.add "X-Amz-SignedHeaders", valid_774892
  var valid_774893 = header.getOrDefault("X-Amz-Credential")
  valid_774893 = validateParameter(valid_774893, JString, required = false,
                                 default = nil)
  if valid_774893 != nil:
    section.add "X-Amz-Credential", valid_774893
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774894: Call_GetSendEmail_774870; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message and immediately queues it for sending. In order to send email using the <code>SendEmail</code> operation, your message must meet the following requirements:</p> <ul> <li> <p>The message must be sent from a verified email address or domain. If you attempt to send email using a non-verified address or domain, the operation will result in an "Email address not verified" error. </p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>The message must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendEmail</code> operation several times to send the message to each group.</p> </li> </ul> <important> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </important>
  ## 
  let valid = call_774894.validator(path, query, header, formData, body)
  let scheme = call_774894.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774894.url(scheme.get, call_774894.host, call_774894.base,
                         call_774894.route, valid.getOrDefault("path"))
  result = hook(call_774894, url, valid)

proc call*(call_774895: Call_GetSendEmail_774870; Source: string;
          ReplyToAddresses: JsonNode = nil; DestinationBccAddresses: JsonNode = nil;
          ReturnPathArn: string = ""; DestinationToAddresses: JsonNode = nil;
          Tags: JsonNode = nil; SourceArn: string = ""; Action: string = "SendEmail";
          DestinationCcAddresses: JsonNode = nil; MessageSubject: string = "";
          ReturnPath: string = ""; MessageBody: string = "";
          ConfigurationSetName: string = ""; Version: string = "2010-12-01"): Recallable =
  ## getSendEmail
  ## <p>Composes an email message and immediately queues it for sending. In order to send email using the <code>SendEmail</code> operation, your message must meet the following requirements:</p> <ul> <li> <p>The message must be sent from a verified email address or domain. If you attempt to send email using a non-verified address or domain, the operation will result in an "Email address not verified" error. </p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>The message must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> <li> <p>The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the <code>SendEmail</code> operation several times to send the message to each group.</p> </li> </ul> <important> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </important>
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   DestinationBccAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   DestinationToAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Action: string (required)
  ##   DestinationCcAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   MessageSubject: string
  ##                 : Represents the message to be sent, composed of a subject and a body.
  ## The subject of the message: A short summary of the content, which will appear in the recipient's inbox.
  ##   Source: string (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   ReturnPath: string
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   MessageBody: string
  ##              : Represents the message to be sent, composed of a subject and a body.
  ## The message body.
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendEmail</code>.
  ##   Version: string (required)
  var query_774896 = newJObject()
  if ReplyToAddresses != nil:
    query_774896.add "ReplyToAddresses", ReplyToAddresses
  if DestinationBccAddresses != nil:
    query_774896.add "Destination.BccAddresses", DestinationBccAddresses
  add(query_774896, "ReturnPathArn", newJString(ReturnPathArn))
  if DestinationToAddresses != nil:
    query_774896.add "Destination.ToAddresses", DestinationToAddresses
  if Tags != nil:
    query_774896.add "Tags", Tags
  add(query_774896, "SourceArn", newJString(SourceArn))
  add(query_774896, "Action", newJString(Action))
  if DestinationCcAddresses != nil:
    query_774896.add "Destination.CcAddresses", DestinationCcAddresses
  add(query_774896, "Message.Subject", newJString(MessageSubject))
  add(query_774896, "Source", newJString(Source))
  add(query_774896, "ReturnPath", newJString(ReturnPath))
  add(query_774896, "Message.Body", newJString(MessageBody))
  add(query_774896, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_774896, "Version", newJString(Version))
  result = call_774895.call(nil, query_774896, nil, nil, nil)

var getSendEmail* = Call_GetSendEmail_774870(name: "getSendEmail",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=SendEmail", validator: validate_GetSendEmail_774871, base: "/",
    url: url_GetSendEmail_774872, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSendRawEmail_774948 = ref object of OpenApiRestCall_772597
proc url_PostSendRawEmail_774950(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSendRawEmail_774949(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Composes an email message and immediately queues it for sending.</p> <p>This operation is more flexible than the <code>SendEmail</code> API operation. When you use the <code>SendRawEmail</code> operation, you can specify the headers of the message as well as its content. This flexibility is useful, for example, when you want to send a multipart MIME email (such a message that contains both a text and an HTML version). You can also use this operation to send messages that include attachments.</p> <p>The <code>SendRawEmail</code> operation has the following requirements:</p> <ul> <li> <p>You can only send email from <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified email addresses or domains</a>. If you try to send email from an address that isn't verified, the operation results in an "Email address not verified" error.</p> </li> <li> <p>If your account is still in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon SES sandbox</a>, you can only send email to other verified addresses in your account, or to addresses that are associated with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon SES mailbox simulator</a>.</p> </li> <li> <p>The maximum message size, including attachments, is 10 MB.</p> </li> <li> <p>Each message has to include at least one recipient address. A recipient address includes any address on the To:, CC:, or BCC: lines.</p> </li> <li> <p>If you send a single message to more than one recipient address, and one of the recipient addresses isn't in a valid format (that is, it's not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), Amazon SES rejects the entire message, even if the other addresses are valid.</p> </li> <li> <p>Each message can include up to 50 recipient addresses across the To:, CC:, or BCC: lines. If you need to send a single message to more than 50 recipients, you have to split the list of recipient addresses into groups of less than 50 recipients, and send separate messages to each group.</p> </li> <li> <p>Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message parts. However, if Amazon SES has to modify the contents of your message (for example, if you use open and click tracking), 8-bit content isn't preserved. For this reason, we highly recommend that you encode all content that isn't 7-bit ASCII. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME Encoding</a> in the <i>Amazon SES Developer Guide</i>.</p> </li> </ul> <p>Additionally, keep the following considerations in mind when using the <code>SendRawEmail</code> operation:</p> <ul> <li> <p>Although you can customize the message headers when using the <code>SendRawEmail</code> operation, Amazon SES will automatically apply its own <code>Message-ID</code> and <code>Date</code> headers; if you passed these headers when creating the message, they will be overwritten by the values that Amazon SES provides.</p> </li> <li> <p>If you are using sending authorization to send on behalf of another user, <code>SendRawEmail</code> enables you to specify the cross-account identity for the email's Source, From, and Return-Path parameters in one of two ways: you can pass optional parameters <code>SourceArn</code>, <code>FromArn</code>, and/or <code>ReturnPathArn</code> to the API, or you can include the following X-headers in the header of your raw email:</p> <ul> <li> <p> <code>X-SES-SOURCE-ARN</code> </p> </li> <li> <p> <code>X-SES-FROM-ARN</code> </p> </li> <li> <p> <code>X-SES-RETURN-PATH-ARN</code> </p> </li> </ul> <important> <p>Don't include these X-headers in the DKIM signature. Amazon SES removes these before it sends the email.</p> </important> <p>If you only specify the <code>SourceIdentityArn</code> parameter, Amazon SES sets the From and Return-Path addresses to the same identity that you specified.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using Sending Authorization with Amazon SES</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774951 = query.getOrDefault("Action")
  valid_774951 = validateParameter(valid_774951, JString, required = true,
                                 default = newJString("SendRawEmail"))
  if valid_774951 != nil:
    section.add "Action", valid_774951
  var valid_774952 = query.getOrDefault("Version")
  valid_774952 = validateParameter(valid_774952, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774952 != nil:
    section.add "Version", valid_774952
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774953 = header.getOrDefault("X-Amz-Date")
  valid_774953 = validateParameter(valid_774953, JString, required = false,
                                 default = nil)
  if valid_774953 != nil:
    section.add "X-Amz-Date", valid_774953
  var valid_774954 = header.getOrDefault("X-Amz-Security-Token")
  valid_774954 = validateParameter(valid_774954, JString, required = false,
                                 default = nil)
  if valid_774954 != nil:
    section.add "X-Amz-Security-Token", valid_774954
  var valid_774955 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774955 = validateParameter(valid_774955, JString, required = false,
                                 default = nil)
  if valid_774955 != nil:
    section.add "X-Amz-Content-Sha256", valid_774955
  var valid_774956 = header.getOrDefault("X-Amz-Algorithm")
  valid_774956 = validateParameter(valid_774956, JString, required = false,
                                 default = nil)
  if valid_774956 != nil:
    section.add "X-Amz-Algorithm", valid_774956
  var valid_774957 = header.getOrDefault("X-Amz-Signature")
  valid_774957 = validateParameter(valid_774957, JString, required = false,
                                 default = nil)
  if valid_774957 != nil:
    section.add "X-Amz-Signature", valid_774957
  var valid_774958 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774958 = validateParameter(valid_774958, JString, required = false,
                                 default = nil)
  if valid_774958 != nil:
    section.add "X-Amz-SignedHeaders", valid_774958
  var valid_774959 = header.getOrDefault("X-Amz-Credential")
  valid_774959 = validateParameter(valid_774959, JString, required = false,
                                 default = nil)
  if valid_774959 != nil:
    section.add "X-Amz-Credential", valid_774959
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendRawEmail</code>.
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-SOURCE-ARN</code> in the raw message of the email. If you use both the <code>SourceArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>SourceArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Destinations: JArray
  ##               : A list of destinations for the message, consisting of To:, CC:, and BCC: addresses.
  ##   FromArn: JString
  ##          : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to specify a particular "From" address in the header of the raw email.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-FROM-ARN</code> in the raw message of the email. If you use both the <code>FromArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>FromArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendRawEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-RETURN-PATH-ARN</code> in the raw message of the email. If you use both the <code>ReturnPathArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>ReturnPathArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Source: JString
  ##         : <p>The identity's email address. If you do not provide a value for this parameter, you must specify a "From" address in the raw text of the message. (You can also specify both.)</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in<a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note> <p>If you specify the <code>Source</code> parameter and have feedback forwarding enabled, then bounces and complaints will be sent to this email address. This takes precedence over any Return-Path header that you might include in the raw text of the message.</p>
  ##   RawMessage.Data: JString
  ##                  : Represents the raw data of the message.
  ## <p>The raw data of the message. This data needs to base64-encoded if you are accessing Amazon SES directly through the HTTPS interface. If you are accessing Amazon SES using an AWS SDK, the SDK takes care of the base 64-encoding for you. In all cases, the client must ensure that the message format complies with Internet email standards regarding email header fields, MIME types, and MIME encoding.</p> <p>The To:, CC:, and BCC: headers in the raw message can contain a group list.</p> <p>If you are using <code>SendRawEmail</code> with sending authorization, you can include X-headers in the raw message to specify the "Source," "From," and "Return-Path" addresses. For more information, see the documentation for <code>SendRawEmail</code>. </p> <important> <p>Do not include these X-headers in the DKIM signature, because they are removed by Amazon SES before sending the email.</p> </important> <p>For more information, go to the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html">Amazon SES Developer Guide</a>.</p>
  section = newJObject()
  var valid_774960 = formData.getOrDefault("ConfigurationSetName")
  valid_774960 = validateParameter(valid_774960, JString, required = false,
                                 default = nil)
  if valid_774960 != nil:
    section.add "ConfigurationSetName", valid_774960
  var valid_774961 = formData.getOrDefault("SourceArn")
  valid_774961 = validateParameter(valid_774961, JString, required = false,
                                 default = nil)
  if valid_774961 != nil:
    section.add "SourceArn", valid_774961
  var valid_774962 = formData.getOrDefault("Destinations")
  valid_774962 = validateParameter(valid_774962, JArray, required = false,
                                 default = nil)
  if valid_774962 != nil:
    section.add "Destinations", valid_774962
  var valid_774963 = formData.getOrDefault("FromArn")
  valid_774963 = validateParameter(valid_774963, JString, required = false,
                                 default = nil)
  if valid_774963 != nil:
    section.add "FromArn", valid_774963
  var valid_774964 = formData.getOrDefault("Tags")
  valid_774964 = validateParameter(valid_774964, JArray, required = false,
                                 default = nil)
  if valid_774964 != nil:
    section.add "Tags", valid_774964
  var valid_774965 = formData.getOrDefault("ReturnPathArn")
  valid_774965 = validateParameter(valid_774965, JString, required = false,
                                 default = nil)
  if valid_774965 != nil:
    section.add "ReturnPathArn", valid_774965
  var valid_774966 = formData.getOrDefault("Source")
  valid_774966 = validateParameter(valid_774966, JString, required = false,
                                 default = nil)
  if valid_774966 != nil:
    section.add "Source", valid_774966
  var valid_774967 = formData.getOrDefault("RawMessage.Data")
  valid_774967 = validateParameter(valid_774967, JString, required = false,
                                 default = nil)
  if valid_774967 != nil:
    section.add "RawMessage.Data", valid_774967
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774968: Call_PostSendRawEmail_774948; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message and immediately queues it for sending.</p> <p>This operation is more flexible than the <code>SendEmail</code> API operation. When you use the <code>SendRawEmail</code> operation, you can specify the headers of the message as well as its content. This flexibility is useful, for example, when you want to send a multipart MIME email (such a message that contains both a text and an HTML version). You can also use this operation to send messages that include attachments.</p> <p>The <code>SendRawEmail</code> operation has the following requirements:</p> <ul> <li> <p>You can only send email from <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified email addresses or domains</a>. If you try to send email from an address that isn't verified, the operation results in an "Email address not verified" error.</p> </li> <li> <p>If your account is still in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon SES sandbox</a>, you can only send email to other verified addresses in your account, or to addresses that are associated with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon SES mailbox simulator</a>.</p> </li> <li> <p>The maximum message size, including attachments, is 10 MB.</p> </li> <li> <p>Each message has to include at least one recipient address. A recipient address includes any address on the To:, CC:, or BCC: lines.</p> </li> <li> <p>If you send a single message to more than one recipient address, and one of the recipient addresses isn't in a valid format (that is, it's not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), Amazon SES rejects the entire message, even if the other addresses are valid.</p> </li> <li> <p>Each message can include up to 50 recipient addresses across the To:, CC:, or BCC: lines. If you need to send a single message to more than 50 recipients, you have to split the list of recipient addresses into groups of less than 50 recipients, and send separate messages to each group.</p> </li> <li> <p>Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message parts. However, if Amazon SES has to modify the contents of your message (for example, if you use open and click tracking), 8-bit content isn't preserved. For this reason, we highly recommend that you encode all content that isn't 7-bit ASCII. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME Encoding</a> in the <i>Amazon SES Developer Guide</i>.</p> </li> </ul> <p>Additionally, keep the following considerations in mind when using the <code>SendRawEmail</code> operation:</p> <ul> <li> <p>Although you can customize the message headers when using the <code>SendRawEmail</code> operation, Amazon SES will automatically apply its own <code>Message-ID</code> and <code>Date</code> headers; if you passed these headers when creating the message, they will be overwritten by the values that Amazon SES provides.</p> </li> <li> <p>If you are using sending authorization to send on behalf of another user, <code>SendRawEmail</code> enables you to specify the cross-account identity for the email's Source, From, and Return-Path parameters in one of two ways: you can pass optional parameters <code>SourceArn</code>, <code>FromArn</code>, and/or <code>ReturnPathArn</code> to the API, or you can include the following X-headers in the header of your raw email:</p> <ul> <li> <p> <code>X-SES-SOURCE-ARN</code> </p> </li> <li> <p> <code>X-SES-FROM-ARN</code> </p> </li> <li> <p> <code>X-SES-RETURN-PATH-ARN</code> </p> </li> </ul> <important> <p>Don't include these X-headers in the DKIM signature. Amazon SES removes these before it sends the email.</p> </important> <p>If you only specify the <code>SourceIdentityArn</code> parameter, Amazon SES sets the From and Return-Path addresses to the same identity that you specified.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using Sending Authorization with Amazon SES</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> </ul>
  ## 
  let valid = call_774968.validator(path, query, header, formData, body)
  let scheme = call_774968.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774968.url(scheme.get, call_774968.host, call_774968.base,
                         call_774968.route, valid.getOrDefault("path"))
  result = hook(call_774968, url, valid)

proc call*(call_774969: Call_PostSendRawEmail_774948;
          ConfigurationSetName: string = ""; SourceArn: string = "";
          Destinations: JsonNode = nil; FromArn: string = ""; Tags: JsonNode = nil;
          ReturnPathArn: string = ""; Action: string = "SendRawEmail";
          Version: string = "2010-12-01"; Source: string = "";
          RawMessageData: string = ""): Recallable =
  ## postSendRawEmail
  ## <p>Composes an email message and immediately queues it for sending.</p> <p>This operation is more flexible than the <code>SendEmail</code> API operation. When you use the <code>SendRawEmail</code> operation, you can specify the headers of the message as well as its content. This flexibility is useful, for example, when you want to send a multipart MIME email (such a message that contains both a text and an HTML version). You can also use this operation to send messages that include attachments.</p> <p>The <code>SendRawEmail</code> operation has the following requirements:</p> <ul> <li> <p>You can only send email from <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified email addresses or domains</a>. If you try to send email from an address that isn't verified, the operation results in an "Email address not verified" error.</p> </li> <li> <p>If your account is still in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon SES sandbox</a>, you can only send email to other verified addresses in your account, or to addresses that are associated with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon SES mailbox simulator</a>.</p> </li> <li> <p>The maximum message size, including attachments, is 10 MB.</p> </li> <li> <p>Each message has to include at least one recipient address. A recipient address includes any address on the To:, CC:, or BCC: lines.</p> </li> <li> <p>If you send a single message to more than one recipient address, and one of the recipient addresses isn't in a valid format (that is, it's not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), Amazon SES rejects the entire message, even if the other addresses are valid.</p> </li> <li> <p>Each message can include up to 50 recipient addresses across the To:, CC:, or BCC: lines. If you need to send a single message to more than 50 recipients, you have to split the list of recipient addresses into groups of less than 50 recipients, and send separate messages to each group.</p> </li> <li> <p>Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message parts. However, if Amazon SES has to modify the contents of your message (for example, if you use open and click tracking), 8-bit content isn't preserved. For this reason, we highly recommend that you encode all content that isn't 7-bit ASCII. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME Encoding</a> in the <i>Amazon SES Developer Guide</i>.</p> </li> </ul> <p>Additionally, keep the following considerations in mind when using the <code>SendRawEmail</code> operation:</p> <ul> <li> <p>Although you can customize the message headers when using the <code>SendRawEmail</code> operation, Amazon SES will automatically apply its own <code>Message-ID</code> and <code>Date</code> headers; if you passed these headers when creating the message, they will be overwritten by the values that Amazon SES provides.</p> </li> <li> <p>If you are using sending authorization to send on behalf of another user, <code>SendRawEmail</code> enables you to specify the cross-account identity for the email's Source, From, and Return-Path parameters in one of two ways: you can pass optional parameters <code>SourceArn</code>, <code>FromArn</code>, and/or <code>ReturnPathArn</code> to the API, or you can include the following X-headers in the header of your raw email:</p> <ul> <li> <p> <code>X-SES-SOURCE-ARN</code> </p> </li> <li> <p> <code>X-SES-FROM-ARN</code> </p> </li> <li> <p> <code>X-SES-RETURN-PATH-ARN</code> </p> </li> </ul> <important> <p>Don't include these X-headers in the DKIM signature. Amazon SES removes these before it sends the email.</p> </important> <p>If you only specify the <code>SourceIdentityArn</code> parameter, Amazon SES sets the From and Return-Path addresses to the same identity that you specified.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using Sending Authorization with Amazon SES</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> </ul>
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendRawEmail</code>.
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-SOURCE-ARN</code> in the raw message of the email. If you use both the <code>SourceArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>SourceArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Destinations: JArray
  ##               : A list of destinations for the message, consisting of To:, CC:, and BCC: addresses.
  ##   FromArn: string
  ##          : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to specify a particular "From" address in the header of the raw email.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-FROM-ARN</code> in the raw message of the email. If you use both the <code>FromArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>FromArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendRawEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-RETURN-PATH-ARN</code> in the raw message of the email. If you use both the <code>ReturnPathArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>ReturnPathArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Source: string
  ##         : <p>The identity's email address. If you do not provide a value for this parameter, you must specify a "From" address in the raw text of the message. (You can also specify both.)</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in<a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note> <p>If you specify the <code>Source</code> parameter and have feedback forwarding enabled, then bounces and complaints will be sent to this email address. This takes precedence over any Return-Path header that you might include in the raw text of the message.</p>
  ##   RawMessageData: string
  ##                 : Represents the raw data of the message.
  ## <p>The raw data of the message. This data needs to base64-encoded if you are accessing Amazon SES directly through the HTTPS interface. If you are accessing Amazon SES using an AWS SDK, the SDK takes care of the base 64-encoding for you. In all cases, the client must ensure that the message format complies with Internet email standards regarding email header fields, MIME types, and MIME encoding.</p> <p>The To:, CC:, and BCC: headers in the raw message can contain a group list.</p> <p>If you are using <code>SendRawEmail</code> with sending authorization, you can include X-headers in the raw message to specify the "Source," "From," and "Return-Path" addresses. For more information, see the documentation for <code>SendRawEmail</code>. </p> <important> <p>Do not include these X-headers in the DKIM signature, because they are removed by Amazon SES before sending the email.</p> </important> <p>For more information, go to the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html">Amazon SES Developer Guide</a>.</p>
  var query_774970 = newJObject()
  var formData_774971 = newJObject()
  add(formData_774971, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_774971, "SourceArn", newJString(SourceArn))
  if Destinations != nil:
    formData_774971.add "Destinations", Destinations
  add(formData_774971, "FromArn", newJString(FromArn))
  if Tags != nil:
    formData_774971.add "Tags", Tags
  add(formData_774971, "ReturnPathArn", newJString(ReturnPathArn))
  add(query_774970, "Action", newJString(Action))
  add(query_774970, "Version", newJString(Version))
  add(formData_774971, "Source", newJString(Source))
  add(formData_774971, "RawMessage.Data", newJString(RawMessageData))
  result = call_774969.call(nil, query_774970, nil, formData_774971, nil)

var postSendRawEmail* = Call_PostSendRawEmail_774948(name: "postSendRawEmail",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=SendRawEmail", validator: validate_PostSendRawEmail_774949,
    base: "/", url: url_PostSendRawEmail_774950,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSendRawEmail_774925 = ref object of OpenApiRestCall_772597
proc url_GetSendRawEmail_774927(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSendRawEmail_774926(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Composes an email message and immediately queues it for sending.</p> <p>This operation is more flexible than the <code>SendEmail</code> API operation. When you use the <code>SendRawEmail</code> operation, you can specify the headers of the message as well as its content. This flexibility is useful, for example, when you want to send a multipart MIME email (such a message that contains both a text and an HTML version). You can also use this operation to send messages that include attachments.</p> <p>The <code>SendRawEmail</code> operation has the following requirements:</p> <ul> <li> <p>You can only send email from <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified email addresses or domains</a>. If you try to send email from an address that isn't verified, the operation results in an "Email address not verified" error.</p> </li> <li> <p>If your account is still in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon SES sandbox</a>, you can only send email to other verified addresses in your account, or to addresses that are associated with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon SES mailbox simulator</a>.</p> </li> <li> <p>The maximum message size, including attachments, is 10 MB.</p> </li> <li> <p>Each message has to include at least one recipient address. A recipient address includes any address on the To:, CC:, or BCC: lines.</p> </li> <li> <p>If you send a single message to more than one recipient address, and one of the recipient addresses isn't in a valid format (that is, it's not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), Amazon SES rejects the entire message, even if the other addresses are valid.</p> </li> <li> <p>Each message can include up to 50 recipient addresses across the To:, CC:, or BCC: lines. If you need to send a single message to more than 50 recipients, you have to split the list of recipient addresses into groups of less than 50 recipients, and send separate messages to each group.</p> </li> <li> <p>Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message parts. However, if Amazon SES has to modify the contents of your message (for example, if you use open and click tracking), 8-bit content isn't preserved. For this reason, we highly recommend that you encode all content that isn't 7-bit ASCII. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME Encoding</a> in the <i>Amazon SES Developer Guide</i>.</p> </li> </ul> <p>Additionally, keep the following considerations in mind when using the <code>SendRawEmail</code> operation:</p> <ul> <li> <p>Although you can customize the message headers when using the <code>SendRawEmail</code> operation, Amazon SES will automatically apply its own <code>Message-ID</code> and <code>Date</code> headers; if you passed these headers when creating the message, they will be overwritten by the values that Amazon SES provides.</p> </li> <li> <p>If you are using sending authorization to send on behalf of another user, <code>SendRawEmail</code> enables you to specify the cross-account identity for the email's Source, From, and Return-Path parameters in one of two ways: you can pass optional parameters <code>SourceArn</code>, <code>FromArn</code>, and/or <code>ReturnPathArn</code> to the API, or you can include the following X-headers in the header of your raw email:</p> <ul> <li> <p> <code>X-SES-SOURCE-ARN</code> </p> </li> <li> <p> <code>X-SES-FROM-ARN</code> </p> </li> <li> <p> <code>X-SES-RETURN-PATH-ARN</code> </p> </li> </ul> <important> <p>Don't include these X-headers in the DKIM signature. Amazon SES removes these before it sends the email.</p> </important> <p>If you only specify the <code>SourceIdentityArn</code> parameter, Amazon SES sets the From and Return-Path addresses to the same identity that you specified.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using Sending Authorization with Amazon SES</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   FromArn: JString
  ##          : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to specify a particular "From" address in the header of the raw email.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-FROM-ARN</code> in the raw message of the email. If you use both the <code>FromArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>FromArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   RawMessage.Data: JString
  ##                  : Represents the raw data of the message.
  ## <p>The raw data of the message. This data needs to base64-encoded if you are accessing Amazon SES directly through the HTTPS interface. If you are accessing Amazon SES using an AWS SDK, the SDK takes care of the base 64-encoding for you. In all cases, the client must ensure that the message format complies with Internet email standards regarding email header fields, MIME types, and MIME encoding.</p> <p>The To:, CC:, and BCC: headers in the raw message can contain a group list.</p> <p>If you are using <code>SendRawEmail</code> with sending authorization, you can include X-headers in the raw message to specify the "Source," "From," and "Return-Path" addresses. For more information, see the documentation for <code>SendRawEmail</code>. </p> <important> <p>Do not include these X-headers in the DKIM signature, because they are removed by Amazon SES before sending the email.</p> </important> <p>For more information, go to the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html">Amazon SES Developer Guide</a>.</p>
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-RETURN-PATH-ARN</code> in the raw message of the email. If you use both the <code>ReturnPathArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>ReturnPathArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendRawEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-SOURCE-ARN</code> in the raw message of the email. If you use both the <code>SourceArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>SourceArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Action: JString (required)
  ##   Destinations: JArray
  ##               : A list of destinations for the message, consisting of To:, CC:, and BCC: addresses.
  ##   Source: JString
  ##         : <p>The identity's email address. If you do not provide a value for this parameter, you must specify a "From" address in the raw text of the message. (You can also specify both.)</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in<a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note> <p>If you specify the <code>Source</code> parameter and have feedback forwarding enabled, then bounces and complaints will be sent to this email address. This takes precedence over any Return-Path header that you might include in the raw text of the message.</p>
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendRawEmail</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_774928 = query.getOrDefault("FromArn")
  valid_774928 = validateParameter(valid_774928, JString, required = false,
                                 default = nil)
  if valid_774928 != nil:
    section.add "FromArn", valid_774928
  var valid_774929 = query.getOrDefault("RawMessage.Data")
  valid_774929 = validateParameter(valid_774929, JString, required = false,
                                 default = nil)
  if valid_774929 != nil:
    section.add "RawMessage.Data", valid_774929
  var valid_774930 = query.getOrDefault("ReturnPathArn")
  valid_774930 = validateParameter(valid_774930, JString, required = false,
                                 default = nil)
  if valid_774930 != nil:
    section.add "ReturnPathArn", valid_774930
  var valid_774931 = query.getOrDefault("Tags")
  valid_774931 = validateParameter(valid_774931, JArray, required = false,
                                 default = nil)
  if valid_774931 != nil:
    section.add "Tags", valid_774931
  var valid_774932 = query.getOrDefault("SourceArn")
  valid_774932 = validateParameter(valid_774932, JString, required = false,
                                 default = nil)
  if valid_774932 != nil:
    section.add "SourceArn", valid_774932
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774933 = query.getOrDefault("Action")
  valid_774933 = validateParameter(valid_774933, JString, required = true,
                                 default = newJString("SendRawEmail"))
  if valid_774933 != nil:
    section.add "Action", valid_774933
  var valid_774934 = query.getOrDefault("Destinations")
  valid_774934 = validateParameter(valid_774934, JArray, required = false,
                                 default = nil)
  if valid_774934 != nil:
    section.add "Destinations", valid_774934
  var valid_774935 = query.getOrDefault("Source")
  valid_774935 = validateParameter(valid_774935, JString, required = false,
                                 default = nil)
  if valid_774935 != nil:
    section.add "Source", valid_774935
  var valid_774936 = query.getOrDefault("ConfigurationSetName")
  valid_774936 = validateParameter(valid_774936, JString, required = false,
                                 default = nil)
  if valid_774936 != nil:
    section.add "ConfigurationSetName", valid_774936
  var valid_774937 = query.getOrDefault("Version")
  valid_774937 = validateParameter(valid_774937, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774937 != nil:
    section.add "Version", valid_774937
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774938 = header.getOrDefault("X-Amz-Date")
  valid_774938 = validateParameter(valid_774938, JString, required = false,
                                 default = nil)
  if valid_774938 != nil:
    section.add "X-Amz-Date", valid_774938
  var valid_774939 = header.getOrDefault("X-Amz-Security-Token")
  valid_774939 = validateParameter(valid_774939, JString, required = false,
                                 default = nil)
  if valid_774939 != nil:
    section.add "X-Amz-Security-Token", valid_774939
  var valid_774940 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774940 = validateParameter(valid_774940, JString, required = false,
                                 default = nil)
  if valid_774940 != nil:
    section.add "X-Amz-Content-Sha256", valid_774940
  var valid_774941 = header.getOrDefault("X-Amz-Algorithm")
  valid_774941 = validateParameter(valid_774941, JString, required = false,
                                 default = nil)
  if valid_774941 != nil:
    section.add "X-Amz-Algorithm", valid_774941
  var valid_774942 = header.getOrDefault("X-Amz-Signature")
  valid_774942 = validateParameter(valid_774942, JString, required = false,
                                 default = nil)
  if valid_774942 != nil:
    section.add "X-Amz-Signature", valid_774942
  var valid_774943 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774943 = validateParameter(valid_774943, JString, required = false,
                                 default = nil)
  if valid_774943 != nil:
    section.add "X-Amz-SignedHeaders", valid_774943
  var valid_774944 = header.getOrDefault("X-Amz-Credential")
  valid_774944 = validateParameter(valid_774944, JString, required = false,
                                 default = nil)
  if valid_774944 != nil:
    section.add "X-Amz-Credential", valid_774944
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774945: Call_GetSendRawEmail_774925; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message and immediately queues it for sending.</p> <p>This operation is more flexible than the <code>SendEmail</code> API operation. When you use the <code>SendRawEmail</code> operation, you can specify the headers of the message as well as its content. This flexibility is useful, for example, when you want to send a multipart MIME email (such a message that contains both a text and an HTML version). You can also use this operation to send messages that include attachments.</p> <p>The <code>SendRawEmail</code> operation has the following requirements:</p> <ul> <li> <p>You can only send email from <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified email addresses or domains</a>. If you try to send email from an address that isn't verified, the operation results in an "Email address not verified" error.</p> </li> <li> <p>If your account is still in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon SES sandbox</a>, you can only send email to other verified addresses in your account, or to addresses that are associated with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon SES mailbox simulator</a>.</p> </li> <li> <p>The maximum message size, including attachments, is 10 MB.</p> </li> <li> <p>Each message has to include at least one recipient address. A recipient address includes any address on the To:, CC:, or BCC: lines.</p> </li> <li> <p>If you send a single message to more than one recipient address, and one of the recipient addresses isn't in a valid format (that is, it's not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), Amazon SES rejects the entire message, even if the other addresses are valid.</p> </li> <li> <p>Each message can include up to 50 recipient addresses across the To:, CC:, or BCC: lines. If you need to send a single message to more than 50 recipients, you have to split the list of recipient addresses into groups of less than 50 recipients, and send separate messages to each group.</p> </li> <li> <p>Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message parts. However, if Amazon SES has to modify the contents of your message (for example, if you use open and click tracking), 8-bit content isn't preserved. For this reason, we highly recommend that you encode all content that isn't 7-bit ASCII. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME Encoding</a> in the <i>Amazon SES Developer Guide</i>.</p> </li> </ul> <p>Additionally, keep the following considerations in mind when using the <code>SendRawEmail</code> operation:</p> <ul> <li> <p>Although you can customize the message headers when using the <code>SendRawEmail</code> operation, Amazon SES will automatically apply its own <code>Message-ID</code> and <code>Date</code> headers; if you passed these headers when creating the message, they will be overwritten by the values that Amazon SES provides.</p> </li> <li> <p>If you are using sending authorization to send on behalf of another user, <code>SendRawEmail</code> enables you to specify the cross-account identity for the email's Source, From, and Return-Path parameters in one of two ways: you can pass optional parameters <code>SourceArn</code>, <code>FromArn</code>, and/or <code>ReturnPathArn</code> to the API, or you can include the following X-headers in the header of your raw email:</p> <ul> <li> <p> <code>X-SES-SOURCE-ARN</code> </p> </li> <li> <p> <code>X-SES-FROM-ARN</code> </p> </li> <li> <p> <code>X-SES-RETURN-PATH-ARN</code> </p> </li> </ul> <important> <p>Don't include these X-headers in the DKIM signature. Amazon SES removes these before it sends the email.</p> </important> <p>If you only specify the <code>SourceIdentityArn</code> parameter, Amazon SES sets the From and Return-Path addresses to the same identity that you specified.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using Sending Authorization with Amazon SES</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> </ul>
  ## 
  let valid = call_774945.validator(path, query, header, formData, body)
  let scheme = call_774945.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774945.url(scheme.get, call_774945.host, call_774945.base,
                         call_774945.route, valid.getOrDefault("path"))
  result = hook(call_774945, url, valid)

proc call*(call_774946: Call_GetSendRawEmail_774925; FromArn: string = "";
          RawMessageData: string = ""; ReturnPathArn: string = ""; Tags: JsonNode = nil;
          SourceArn: string = ""; Action: string = "SendRawEmail";
          Destinations: JsonNode = nil; Source: string = "";
          ConfigurationSetName: string = ""; Version: string = "2010-12-01"): Recallable =
  ## getSendRawEmail
  ## <p>Composes an email message and immediately queues it for sending.</p> <p>This operation is more flexible than the <code>SendEmail</code> API operation. When you use the <code>SendRawEmail</code> operation, you can specify the headers of the message as well as its content. This flexibility is useful, for example, when you want to send a multipart MIME email (such a message that contains both a text and an HTML version). You can also use this operation to send messages that include attachments.</p> <p>The <code>SendRawEmail</code> operation has the following requirements:</p> <ul> <li> <p>You can only send email from <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified email addresses or domains</a>. If you try to send email from an address that isn't verified, the operation results in an "Email address not verified" error.</p> </li> <li> <p>If your account is still in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon SES sandbox</a>, you can only send email to other verified addresses in your account, or to addresses that are associated with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon SES mailbox simulator</a>.</p> </li> <li> <p>The maximum message size, including attachments, is 10 MB.</p> </li> <li> <p>Each message has to include at least one recipient address. A recipient address includes any address on the To:, CC:, or BCC: lines.</p> </li> <li> <p>If you send a single message to more than one recipient address, and one of the recipient addresses isn't in a valid format (that is, it's not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), Amazon SES rejects the entire message, even if the other addresses are valid.</p> </li> <li> <p>Each message can include up to 50 recipient addresses across the To:, CC:, or BCC: lines. If you need to send a single message to more than 50 recipients, you have to split the list of recipient addresses into groups of less than 50 recipients, and send separate messages to each group.</p> </li> <li> <p>Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message parts. However, if Amazon SES has to modify the contents of your message (for example, if you use open and click tracking), 8-bit content isn't preserved. For this reason, we highly recommend that you encode all content that isn't 7-bit ASCII. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME Encoding</a> in the <i>Amazon SES Developer Guide</i>.</p> </li> </ul> <p>Additionally, keep the following considerations in mind when using the <code>SendRawEmail</code> operation:</p> <ul> <li> <p>Although you can customize the message headers when using the <code>SendRawEmail</code> operation, Amazon SES will automatically apply its own <code>Message-ID</code> and <code>Date</code> headers; if you passed these headers when creating the message, they will be overwritten by the values that Amazon SES provides.</p> </li> <li> <p>If you are using sending authorization to send on behalf of another user, <code>SendRawEmail</code> enables you to specify the cross-account identity for the email's Source, From, and Return-Path parameters in one of two ways: you can pass optional parameters <code>SourceArn</code>, <code>FromArn</code>, and/or <code>ReturnPathArn</code> to the API, or you can include the following X-headers in the header of your raw email:</p> <ul> <li> <p> <code>X-SES-SOURCE-ARN</code> </p> </li> <li> <p> <code>X-SES-FROM-ARN</code> </p> </li> <li> <p> <code>X-SES-RETURN-PATH-ARN</code> </p> </li> </ul> <important> <p>Don't include these X-headers in the DKIM signature. Amazon SES removes these before it sends the email.</p> </important> <p>If you only specify the <code>SourceIdentityArn</code> parameter, Amazon SES sets the From and Return-Path addresses to the same identity that you specified.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using Sending Authorization with Amazon SES</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your <i>sending quota</i>). For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES Sending Limits</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> </ul>
  ##   FromArn: string
  ##          : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to specify a particular "From" address in the header of the raw email.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-FROM-ARN</code> in the raw message of the email. If you use both the <code>FromArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>FromArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   RawMessageData: string
  ##                 : Represents the raw data of the message.
  ## <p>The raw data of the message. This data needs to base64-encoded if you are accessing Amazon SES directly through the HTTPS interface. If you are accessing Amazon SES using an AWS SDK, the SDK takes care of the base 64-encoding for you. In all cases, the client must ensure that the message format complies with Internet email standards regarding email header fields, MIME types, and MIME encoding.</p> <p>The To:, CC:, and BCC: headers in the raw message can contain a group list.</p> <p>If you are using <code>SendRawEmail</code> with sending authorization, you can include X-headers in the raw message to specify the "Source," "From," and "Return-Path" addresses. For more information, see the documentation for <code>SendRawEmail</code>. </p> <important> <p>Do not include these X-headers in the DKIM signature, because they are removed by Amazon SES before sending the email.</p> </important> <p>For more information, go to the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html">Amazon SES Developer Guide</a>.</p>
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-RETURN-PATH-ARN</code> in the raw message of the email. If you use both the <code>ReturnPathArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>ReturnPathArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendRawEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>Instead of using this parameter, you can use the X-header <code>X-SES-SOURCE-ARN</code> in the raw message of the email. If you use both the <code>SourceArn</code> parameter and the corresponding X-header, Amazon SES uses the value of the <code>SourceArn</code> parameter.</p> <note> <p>For information about when to use this parameter, see the description of <code>SendRawEmail</code> in this guide, or see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p> </note>
  ##   Action: string (required)
  ##   Destinations: JArray
  ##               : A list of destinations for the message, consisting of To:, CC:, and BCC: addresses.
  ##   Source: string
  ##         : <p>The identity's email address. If you do not provide a value for this parameter, you must specify a "From" address in the raw text of the message. (You can also specify both.)</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in<a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note> <p>If you specify the <code>Source</code> parameter and have feedback forwarding enabled, then bounces and complaints will be sent to this email address. This takes precedence over any Return-Path header that you might include in the raw text of the message.</p>
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendRawEmail</code>.
  ##   Version: string (required)
  var query_774947 = newJObject()
  add(query_774947, "FromArn", newJString(FromArn))
  add(query_774947, "RawMessage.Data", newJString(RawMessageData))
  add(query_774947, "ReturnPathArn", newJString(ReturnPathArn))
  if Tags != nil:
    query_774947.add "Tags", Tags
  add(query_774947, "SourceArn", newJString(SourceArn))
  add(query_774947, "Action", newJString(Action))
  if Destinations != nil:
    query_774947.add "Destinations", Destinations
  add(query_774947, "Source", newJString(Source))
  add(query_774947, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_774947, "Version", newJString(Version))
  result = call_774946.call(nil, query_774947, nil, nil, nil)

var getSendRawEmail* = Call_GetSendRawEmail_774925(name: "getSendRawEmail",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=SendRawEmail", validator: validate_GetSendRawEmail_774926,
    base: "/", url: url_GetSendRawEmail_774927, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSendTemplatedEmail_775000 = ref object of OpenApiRestCall_772597
proc url_PostSendTemplatedEmail_775002(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSendTemplatedEmail_775001(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Composes an email message using an email template and immediately queues it for sending.</p> <p>In order to send email using the <code>SendTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Calls to the <code>SendTemplatedEmail</code> operation may only include one <code>Destination</code> parameter. A destination is a set of recipients who will receive the same version of the email. The <code>Destination</code> parameter can include up to 50 recipients, across the To:, CC: and BCC: fields.</p> </li> <li> <p>The <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> </ul> <important> <p>If your call to the <code>SendTemplatedEmail</code> operation includes all of the required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES can't render the email because the template contains errors, it doesn't send the email. Additionally, because it already accepted the message, Amazon SES doesn't return a message stating that it was unable to send the email.</p> <p>For these reasons, we highly recommend that you set up Amazon SES to send you notifications when Rendering Failure events occur. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Sending Personalized Email Using the Amazon SES API</a> in the <i>Amazon Simple Email Service Developer Guide</i>.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775003 = query.getOrDefault("Action")
  valid_775003 = validateParameter(valid_775003, JString, required = true,
                                 default = newJString("SendTemplatedEmail"))
  if valid_775003 != nil:
    section.add "Action", valid_775003
  var valid_775004 = query.getOrDefault("Version")
  valid_775004 = validateParameter(valid_775004, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_775004 != nil:
    section.add "Version", valid_775004
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775005 = header.getOrDefault("X-Amz-Date")
  valid_775005 = validateParameter(valid_775005, JString, required = false,
                                 default = nil)
  if valid_775005 != nil:
    section.add "X-Amz-Date", valid_775005
  var valid_775006 = header.getOrDefault("X-Amz-Security-Token")
  valid_775006 = validateParameter(valid_775006, JString, required = false,
                                 default = nil)
  if valid_775006 != nil:
    section.add "X-Amz-Security-Token", valid_775006
  var valid_775007 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775007 = validateParameter(valid_775007, JString, required = false,
                                 default = nil)
  if valid_775007 != nil:
    section.add "X-Amz-Content-Sha256", valid_775007
  var valid_775008 = header.getOrDefault("X-Amz-Algorithm")
  valid_775008 = validateParameter(valid_775008, JString, required = false,
                                 default = nil)
  if valid_775008 != nil:
    section.add "X-Amz-Algorithm", valid_775008
  var valid_775009 = header.getOrDefault("X-Amz-Signature")
  valid_775009 = validateParameter(valid_775009, JString, required = false,
                                 default = nil)
  if valid_775009 != nil:
    section.add "X-Amz-Signature", valid_775009
  var valid_775010 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775010 = validateParameter(valid_775010, JString, required = false,
                                 default = nil)
  if valid_775010 != nil:
    section.add "X-Amz-SignedHeaders", valid_775010
  var valid_775011 = header.getOrDefault("X-Amz-Credential")
  valid_775011 = validateParameter(valid_775011, JString, required = false,
                                 default = nil)
  if valid_775011 != nil:
    section.add "X-Amz-Credential", valid_775011
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendTemplatedEmail</code>.
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Destination.BccAddresses: JArray
  ##                           : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Template: JString (required)
  ##           : The template to use when sending this email.
  ##   TemplateData: JString (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendTemplatedEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ReturnPath: JString
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   TemplateArn: JString
  ##              : The ARN of the template to use when sending this email.
  ##   Destination.CcAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   Source: JString (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in<a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   Destination.ToAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  section = newJObject()
  var valid_775012 = formData.getOrDefault("ConfigurationSetName")
  valid_775012 = validateParameter(valid_775012, JString, required = false,
                                 default = nil)
  if valid_775012 != nil:
    section.add "ConfigurationSetName", valid_775012
  var valid_775013 = formData.getOrDefault("SourceArn")
  valid_775013 = validateParameter(valid_775013, JString, required = false,
                                 default = nil)
  if valid_775013 != nil:
    section.add "SourceArn", valid_775013
  var valid_775014 = formData.getOrDefault("Destination.BccAddresses")
  valid_775014 = validateParameter(valid_775014, JArray, required = false,
                                 default = nil)
  if valid_775014 != nil:
    section.add "Destination.BccAddresses", valid_775014
  var valid_775015 = formData.getOrDefault("ReplyToAddresses")
  valid_775015 = validateParameter(valid_775015, JArray, required = false,
                                 default = nil)
  if valid_775015 != nil:
    section.add "ReplyToAddresses", valid_775015
  assert formData != nil,
        "formData argument is necessary due to required `Template` field"
  var valid_775016 = formData.getOrDefault("Template")
  valid_775016 = validateParameter(valid_775016, JString, required = true,
                                 default = nil)
  if valid_775016 != nil:
    section.add "Template", valid_775016
  var valid_775017 = formData.getOrDefault("TemplateData")
  valid_775017 = validateParameter(valid_775017, JString, required = true,
                                 default = nil)
  if valid_775017 != nil:
    section.add "TemplateData", valid_775017
  var valid_775018 = formData.getOrDefault("Tags")
  valid_775018 = validateParameter(valid_775018, JArray, required = false,
                                 default = nil)
  if valid_775018 != nil:
    section.add "Tags", valid_775018
  var valid_775019 = formData.getOrDefault("ReturnPath")
  valid_775019 = validateParameter(valid_775019, JString, required = false,
                                 default = nil)
  if valid_775019 != nil:
    section.add "ReturnPath", valid_775019
  var valid_775020 = formData.getOrDefault("ReturnPathArn")
  valid_775020 = validateParameter(valid_775020, JString, required = false,
                                 default = nil)
  if valid_775020 != nil:
    section.add "ReturnPathArn", valid_775020
  var valid_775021 = formData.getOrDefault("TemplateArn")
  valid_775021 = validateParameter(valid_775021, JString, required = false,
                                 default = nil)
  if valid_775021 != nil:
    section.add "TemplateArn", valid_775021
  var valid_775022 = formData.getOrDefault("Destination.CcAddresses")
  valid_775022 = validateParameter(valid_775022, JArray, required = false,
                                 default = nil)
  if valid_775022 != nil:
    section.add "Destination.CcAddresses", valid_775022
  var valid_775023 = formData.getOrDefault("Source")
  valid_775023 = validateParameter(valid_775023, JString, required = true,
                                 default = nil)
  if valid_775023 != nil:
    section.add "Source", valid_775023
  var valid_775024 = formData.getOrDefault("Destination.ToAddresses")
  valid_775024 = validateParameter(valid_775024, JArray, required = false,
                                 default = nil)
  if valid_775024 != nil:
    section.add "Destination.ToAddresses", valid_775024
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775025: Call_PostSendTemplatedEmail_775000; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message using an email template and immediately queues it for sending.</p> <p>In order to send email using the <code>SendTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Calls to the <code>SendTemplatedEmail</code> operation may only include one <code>Destination</code> parameter. A destination is a set of recipients who will receive the same version of the email. The <code>Destination</code> parameter can include up to 50 recipients, across the To:, CC: and BCC: fields.</p> </li> <li> <p>The <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> </ul> <important> <p>If your call to the <code>SendTemplatedEmail</code> operation includes all of the required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES can't render the email because the template contains errors, it doesn't send the email. Additionally, because it already accepted the message, Amazon SES doesn't return a message stating that it was unable to send the email.</p> <p>For these reasons, we highly recommend that you set up Amazon SES to send you notifications when Rendering Failure events occur. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Sending Personalized Email Using the Amazon SES API</a> in the <i>Amazon Simple Email Service Developer Guide</i>.</p> </important>
  ## 
  let valid = call_775025.validator(path, query, header, formData, body)
  let scheme = call_775025.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775025.url(scheme.get, call_775025.host, call_775025.base,
                         call_775025.route, valid.getOrDefault("path"))
  result = hook(call_775025, url, valid)

proc call*(call_775026: Call_PostSendTemplatedEmail_775000; Template: string;
          TemplateData: string; Source: string; ConfigurationSetName: string = "";
          SourceArn: string = ""; DestinationBccAddresses: JsonNode = nil;
          ReplyToAddresses: JsonNode = nil; Tags: JsonNode = nil;
          ReturnPath: string = ""; ReturnPathArn: string = "";
          Action: string = "SendTemplatedEmail"; TemplateArn: string = "";
          DestinationCcAddresses: JsonNode = nil; Version: string = "2010-12-01";
          DestinationToAddresses: JsonNode = nil): Recallable =
  ## postSendTemplatedEmail
  ## <p>Composes an email message using an email template and immediately queues it for sending.</p> <p>In order to send email using the <code>SendTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Calls to the <code>SendTemplatedEmail</code> operation may only include one <code>Destination</code> parameter. A destination is a set of recipients who will receive the same version of the email. The <code>Destination</code> parameter can include up to 50 recipients, across the To:, CC: and BCC: fields.</p> </li> <li> <p>The <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> </ul> <important> <p>If your call to the <code>SendTemplatedEmail</code> operation includes all of the required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES can't render the email because the template contains errors, it doesn't send the email. Additionally, because it already accepted the message, Amazon SES doesn't return a message stating that it was unable to send the email.</p> <p>For these reasons, we highly recommend that you set up Amazon SES to send you notifications when Rendering Failure events occur. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Sending Personalized Email Using the Amazon SES API</a> in the <i>Amazon Simple Email Service Developer Guide</i>.</p> </important>
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendTemplatedEmail</code>.
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   DestinationBccAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Template: string (required)
  ##           : The template to use when sending this email.
  ##   TemplateData: string (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendTemplatedEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   ReturnPath: string
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Action: string (required)
  ##   TemplateArn: string
  ##              : The ARN of the template to use when sending this email.
  ##   DestinationCcAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   Version: string (required)
  ##   Source: string (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in<a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   DestinationToAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  var query_775027 = newJObject()
  var formData_775028 = newJObject()
  add(formData_775028, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_775028, "SourceArn", newJString(SourceArn))
  if DestinationBccAddresses != nil:
    formData_775028.add "Destination.BccAddresses", DestinationBccAddresses
  if ReplyToAddresses != nil:
    formData_775028.add "ReplyToAddresses", ReplyToAddresses
  add(formData_775028, "Template", newJString(Template))
  add(formData_775028, "TemplateData", newJString(TemplateData))
  if Tags != nil:
    formData_775028.add "Tags", Tags
  add(formData_775028, "ReturnPath", newJString(ReturnPath))
  add(formData_775028, "ReturnPathArn", newJString(ReturnPathArn))
  add(query_775027, "Action", newJString(Action))
  add(formData_775028, "TemplateArn", newJString(TemplateArn))
  if DestinationCcAddresses != nil:
    formData_775028.add "Destination.CcAddresses", DestinationCcAddresses
  add(query_775027, "Version", newJString(Version))
  add(formData_775028, "Source", newJString(Source))
  if DestinationToAddresses != nil:
    formData_775028.add "Destination.ToAddresses", DestinationToAddresses
  result = call_775026.call(nil, query_775027, nil, formData_775028, nil)

var postSendTemplatedEmail* = Call_PostSendTemplatedEmail_775000(
    name: "postSendTemplatedEmail", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SendTemplatedEmail",
    validator: validate_PostSendTemplatedEmail_775001, base: "/",
    url: url_PostSendTemplatedEmail_775002, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSendTemplatedEmail_774972 = ref object of OpenApiRestCall_772597
proc url_GetSendTemplatedEmail_774974(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSendTemplatedEmail_774973(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Composes an email message using an email template and immediately queues it for sending.</p> <p>In order to send email using the <code>SendTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Calls to the <code>SendTemplatedEmail</code> operation may only include one <code>Destination</code> parameter. A destination is a set of recipients who will receive the same version of the email. The <code>Destination</code> parameter can include up to 50 recipients, across the To:, CC: and BCC: fields.</p> </li> <li> <p>The <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> </ul> <important> <p>If your call to the <code>SendTemplatedEmail</code> operation includes all of the required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES can't render the email because the template contains errors, it doesn't send the email. Additionally, because it already accepted the message, Amazon SES doesn't return a message stating that it was unable to send the email.</p> <p>For these reasons, we highly recommend that you set up Amazon SES to send you notifications when Rendering Failure events occur. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Sending Personalized Email Using the Amazon SES API</a> in the <i>Amazon Simple Email Service Developer Guide</i>.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Template: JString (required)
  ##           : The template to use when sending this email.
  ##   Destination.BccAddresses: JArray
  ##                           : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   ReturnPathArn: JString
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   Destination.ToAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  ##   TemplateArn: JString
  ##              : The ARN of the template to use when sending this email.
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendTemplatedEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   SourceArn: JString
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   TemplateData: JString (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   Action: JString (required)
  ##   Destination.CcAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   Source: JString (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in<a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   ReturnPath: JString
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ConfigurationSetName: JString
  ##                       : The name of the configuration set to use when you send an email using <code>SendTemplatedEmail</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_774975 = query.getOrDefault("ReplyToAddresses")
  valid_774975 = validateParameter(valid_774975, JArray, required = false,
                                 default = nil)
  if valid_774975 != nil:
    section.add "ReplyToAddresses", valid_774975
  assert query != nil,
        "query argument is necessary due to required `Template` field"
  var valid_774976 = query.getOrDefault("Template")
  valid_774976 = validateParameter(valid_774976, JString, required = true,
                                 default = nil)
  if valid_774976 != nil:
    section.add "Template", valid_774976
  var valid_774977 = query.getOrDefault("Destination.BccAddresses")
  valid_774977 = validateParameter(valid_774977, JArray, required = false,
                                 default = nil)
  if valid_774977 != nil:
    section.add "Destination.BccAddresses", valid_774977
  var valid_774978 = query.getOrDefault("ReturnPathArn")
  valid_774978 = validateParameter(valid_774978, JString, required = false,
                                 default = nil)
  if valid_774978 != nil:
    section.add "ReturnPathArn", valid_774978
  var valid_774979 = query.getOrDefault("Destination.ToAddresses")
  valid_774979 = validateParameter(valid_774979, JArray, required = false,
                                 default = nil)
  if valid_774979 != nil:
    section.add "Destination.ToAddresses", valid_774979
  var valid_774980 = query.getOrDefault("TemplateArn")
  valid_774980 = validateParameter(valid_774980, JString, required = false,
                                 default = nil)
  if valid_774980 != nil:
    section.add "TemplateArn", valid_774980
  var valid_774981 = query.getOrDefault("Tags")
  valid_774981 = validateParameter(valid_774981, JArray, required = false,
                                 default = nil)
  if valid_774981 != nil:
    section.add "Tags", valid_774981
  var valid_774982 = query.getOrDefault("SourceArn")
  valid_774982 = validateParameter(valid_774982, JString, required = false,
                                 default = nil)
  if valid_774982 != nil:
    section.add "SourceArn", valid_774982
  var valid_774983 = query.getOrDefault("TemplateData")
  valid_774983 = validateParameter(valid_774983, JString, required = true,
                                 default = nil)
  if valid_774983 != nil:
    section.add "TemplateData", valid_774983
  var valid_774984 = query.getOrDefault("Action")
  valid_774984 = validateParameter(valid_774984, JString, required = true,
                                 default = newJString("SendTemplatedEmail"))
  if valid_774984 != nil:
    section.add "Action", valid_774984
  var valid_774985 = query.getOrDefault("Destination.CcAddresses")
  valid_774985 = validateParameter(valid_774985, JArray, required = false,
                                 default = nil)
  if valid_774985 != nil:
    section.add "Destination.CcAddresses", valid_774985
  var valid_774986 = query.getOrDefault("Source")
  valid_774986 = validateParameter(valid_774986, JString, required = true,
                                 default = nil)
  if valid_774986 != nil:
    section.add "Source", valid_774986
  var valid_774987 = query.getOrDefault("ReturnPath")
  valid_774987 = validateParameter(valid_774987, JString, required = false,
                                 default = nil)
  if valid_774987 != nil:
    section.add "ReturnPath", valid_774987
  var valid_774988 = query.getOrDefault("ConfigurationSetName")
  valid_774988 = validateParameter(valid_774988, JString, required = false,
                                 default = nil)
  if valid_774988 != nil:
    section.add "ConfigurationSetName", valid_774988
  var valid_774989 = query.getOrDefault("Version")
  valid_774989 = validateParameter(valid_774989, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_774989 != nil:
    section.add "Version", valid_774989
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774990 = header.getOrDefault("X-Amz-Date")
  valid_774990 = validateParameter(valid_774990, JString, required = false,
                                 default = nil)
  if valid_774990 != nil:
    section.add "X-Amz-Date", valid_774990
  var valid_774991 = header.getOrDefault("X-Amz-Security-Token")
  valid_774991 = validateParameter(valid_774991, JString, required = false,
                                 default = nil)
  if valid_774991 != nil:
    section.add "X-Amz-Security-Token", valid_774991
  var valid_774992 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774992 = validateParameter(valid_774992, JString, required = false,
                                 default = nil)
  if valid_774992 != nil:
    section.add "X-Amz-Content-Sha256", valid_774992
  var valid_774993 = header.getOrDefault("X-Amz-Algorithm")
  valid_774993 = validateParameter(valid_774993, JString, required = false,
                                 default = nil)
  if valid_774993 != nil:
    section.add "X-Amz-Algorithm", valid_774993
  var valid_774994 = header.getOrDefault("X-Amz-Signature")
  valid_774994 = validateParameter(valid_774994, JString, required = false,
                                 default = nil)
  if valid_774994 != nil:
    section.add "X-Amz-Signature", valid_774994
  var valid_774995 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774995 = validateParameter(valid_774995, JString, required = false,
                                 default = nil)
  if valid_774995 != nil:
    section.add "X-Amz-SignedHeaders", valid_774995
  var valid_774996 = header.getOrDefault("X-Amz-Credential")
  valid_774996 = validateParameter(valid_774996, JString, required = false,
                                 default = nil)
  if valid_774996 != nil:
    section.add "X-Amz-Credential", valid_774996
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774997: Call_GetSendTemplatedEmail_774972; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Composes an email message using an email template and immediately queues it for sending.</p> <p>In order to send email using the <code>SendTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Calls to the <code>SendTemplatedEmail</code> operation may only include one <code>Destination</code> parameter. A destination is a set of recipients who will receive the same version of the email. The <code>Destination</code> parameter can include up to 50 recipients, across the To:, CC: and BCC: fields.</p> </li> <li> <p>The <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> </ul> <important> <p>If your call to the <code>SendTemplatedEmail</code> operation includes all of the required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES can't render the email because the template contains errors, it doesn't send the email. Additionally, because it already accepted the message, Amazon SES doesn't return a message stating that it was unable to send the email.</p> <p>For these reasons, we highly recommend that you set up Amazon SES to send you notifications when Rendering Failure events occur. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Sending Personalized Email Using the Amazon SES API</a> in the <i>Amazon Simple Email Service Developer Guide</i>.</p> </important>
  ## 
  let valid = call_774997.validator(path, query, header, formData, body)
  let scheme = call_774997.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774997.url(scheme.get, call_774997.host, call_774997.base,
                         call_774997.route, valid.getOrDefault("path"))
  result = hook(call_774997, url, valid)

proc call*(call_774998: Call_GetSendTemplatedEmail_774972; Template: string;
          TemplateData: string; Source: string; ReplyToAddresses: JsonNode = nil;
          DestinationBccAddresses: JsonNode = nil; ReturnPathArn: string = "";
          DestinationToAddresses: JsonNode = nil; TemplateArn: string = "";
          Tags: JsonNode = nil; SourceArn: string = "";
          Action: string = "SendTemplatedEmail";
          DestinationCcAddresses: JsonNode = nil; ReturnPath: string = "";
          ConfigurationSetName: string = ""; Version: string = "2010-12-01"): Recallable =
  ## getSendTemplatedEmail
  ## <p>Composes an email message using an email template and immediately queues it for sending.</p> <p>In order to send email using the <code>SendTemplatedEmail</code> operation, your call to the API must meet the following requirements:</p> <ul> <li> <p>The call must refer to an existing email template. You can create email templates using the <a>CreateTemplate</a> operation.</p> </li> <li> <p>The message must be sent from a verified email address or domain.</p> </li> <li> <p>If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> </li> <li> <p>The maximum message size is 10 MB.</p> </li> <li> <p>Calls to the <code>SendTemplatedEmail</code> operation may only include one <code>Destination</code> parameter. A destination is a set of recipients who will receive the same version of the email. The <code>Destination</code> parameter can include up to 50 recipients, across the To:, CC: and BCC: fields.</p> </li> <li> <p>The <code>Destination</code> parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire message will be rejected, even if the message contains other recipients that are valid.</p> </li> </ul> <important> <p>If your call to the <code>SendTemplatedEmail</code> operation includes all of the required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES can't render the email because the template contains errors, it doesn't send the email. Additionally, because it already accepted the message, Amazon SES doesn't return a message stating that it was unable to send the email.</p> <p>For these reasons, we highly recommend that you set up Amazon SES to send you notifications when Rendering Failure events occur. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Sending Personalized Email Using the Amazon SES API</a> in the <i>Amazon Simple Email Service Developer Guide</i>.</p> </important>
  ##   ReplyToAddresses: JArray
  ##                   : The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address will receive the reply.
  ##   Template: string (required)
  ##           : The template to use when sending this email.
  ##   DestinationBccAddresses: JArray
  ##                          : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the BCC: line of the message.
  ##   ReturnPathArn: string
  ##                : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>ReturnPath</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to use <code>feedback@example.com</code>, then you would specify the <code>ReturnPathArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   DestinationToAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the To: line of the message.
  ##   TemplateArn: string
  ##              : The ARN of the template to use when sending this email.
  ##   Tags: JArray
  ##       : A list of tags, in the form of name/value pairs, to apply to an email that you send using <code>SendTemplatedEmail</code>. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
  ##   SourceArn: string
  ##            : <p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the <code>Source</code> parameter.</p> <p>For example, if the owner of <code>example.com</code> (which has ARN <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a policy to it that authorizes you to send from <code>user@example.com</code>, then you would specify the <code>SourceArn</code> to be <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the <code>Source</code> to be <code>user@example.com</code>.</p> <p>For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
  ##   TemplateData: string (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   Action: string (required)
  ##   DestinationCcAddresses: JArray
  ##                         : <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>
  ## The recipients to place on the CC: line of the message.
  ##   Source: string (required)
  ##         : <p>The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer Guide</a>.</p> <p>If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the <code>SourceArn</code> parameter. For more information about sending authorization, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a source email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly name</i>) may contain non-ASCII characters. These characters must be encoded using MIME encoded-word syntax, as described in<a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word syntax uses the following form: <code>=?charset?encoding?encoded-text?=</code>.</p> </note>
  ##   ReturnPath: string
  ##             : The email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message will be returned from the recipient's ISP; this message will then be forwarded to the email address specified by the <code>ReturnPath</code> parameter. The <code>ReturnPath</code> parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. 
  ##   ConfigurationSetName: string
  ##                       : The name of the configuration set to use when you send an email using <code>SendTemplatedEmail</code>.
  ##   Version: string (required)
  var query_774999 = newJObject()
  if ReplyToAddresses != nil:
    query_774999.add "ReplyToAddresses", ReplyToAddresses
  add(query_774999, "Template", newJString(Template))
  if DestinationBccAddresses != nil:
    query_774999.add "Destination.BccAddresses", DestinationBccAddresses
  add(query_774999, "ReturnPathArn", newJString(ReturnPathArn))
  if DestinationToAddresses != nil:
    query_774999.add "Destination.ToAddresses", DestinationToAddresses
  add(query_774999, "TemplateArn", newJString(TemplateArn))
  if Tags != nil:
    query_774999.add "Tags", Tags
  add(query_774999, "SourceArn", newJString(SourceArn))
  add(query_774999, "TemplateData", newJString(TemplateData))
  add(query_774999, "Action", newJString(Action))
  if DestinationCcAddresses != nil:
    query_774999.add "Destination.CcAddresses", DestinationCcAddresses
  add(query_774999, "Source", newJString(Source))
  add(query_774999, "ReturnPath", newJString(ReturnPath))
  add(query_774999, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_774999, "Version", newJString(Version))
  result = call_774998.call(nil, query_774999, nil, nil, nil)

var getSendTemplatedEmail* = Call_GetSendTemplatedEmail_774972(
    name: "getSendTemplatedEmail", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SendTemplatedEmail",
    validator: validate_GetSendTemplatedEmail_774973, base: "/",
    url: url_GetSendTemplatedEmail_774974, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetActiveReceiptRuleSet_775045 = ref object of OpenApiRestCall_772597
proc url_PostSetActiveReceiptRuleSet_775047(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSetActiveReceiptRuleSet_775046(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the specified receipt rule set as the active receipt rule set.</p> <note> <p>To disable your email-receiving through Amazon SES completely, you can call this API with RuleSetName set to null.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775048 = query.getOrDefault("Action")
  valid_775048 = validateParameter(valid_775048, JString, required = true, default = newJString(
      "SetActiveReceiptRuleSet"))
  if valid_775048 != nil:
    section.add "Action", valid_775048
  var valid_775049 = query.getOrDefault("Version")
  valid_775049 = validateParameter(valid_775049, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_775049 != nil:
    section.add "Version", valid_775049
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775050 = header.getOrDefault("X-Amz-Date")
  valid_775050 = validateParameter(valid_775050, JString, required = false,
                                 default = nil)
  if valid_775050 != nil:
    section.add "X-Amz-Date", valid_775050
  var valid_775051 = header.getOrDefault("X-Amz-Security-Token")
  valid_775051 = validateParameter(valid_775051, JString, required = false,
                                 default = nil)
  if valid_775051 != nil:
    section.add "X-Amz-Security-Token", valid_775051
  var valid_775052 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775052 = validateParameter(valid_775052, JString, required = false,
                                 default = nil)
  if valid_775052 != nil:
    section.add "X-Amz-Content-Sha256", valid_775052
  var valid_775053 = header.getOrDefault("X-Amz-Algorithm")
  valid_775053 = validateParameter(valid_775053, JString, required = false,
                                 default = nil)
  if valid_775053 != nil:
    section.add "X-Amz-Algorithm", valid_775053
  var valid_775054 = header.getOrDefault("X-Amz-Signature")
  valid_775054 = validateParameter(valid_775054, JString, required = false,
                                 default = nil)
  if valid_775054 != nil:
    section.add "X-Amz-Signature", valid_775054
  var valid_775055 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775055 = validateParameter(valid_775055, JString, required = false,
                                 default = nil)
  if valid_775055 != nil:
    section.add "X-Amz-SignedHeaders", valid_775055
  var valid_775056 = header.getOrDefault("X-Amz-Credential")
  valid_775056 = validateParameter(valid_775056, JString, required = false,
                                 default = nil)
  if valid_775056 != nil:
    section.add "X-Amz-Credential", valid_775056
  result.add "header", section
  ## parameters in `formData` object:
  ##   RuleSetName: JString
  ##              : The name of the receipt rule set to make active. Setting this value to null disables all email receiving.
  section = newJObject()
  var valid_775057 = formData.getOrDefault("RuleSetName")
  valid_775057 = validateParameter(valid_775057, JString, required = false,
                                 default = nil)
  if valid_775057 != nil:
    section.add "RuleSetName", valid_775057
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775058: Call_PostSetActiveReceiptRuleSet_775045; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the specified receipt rule set as the active receipt rule set.</p> <note> <p>To disable your email-receiving through Amazon SES completely, you can call this API with RuleSetName set to null.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_775058.validator(path, query, header, formData, body)
  let scheme = call_775058.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775058.url(scheme.get, call_775058.host, call_775058.base,
                         call_775058.route, valid.getOrDefault("path"))
  result = hook(call_775058, url, valid)

proc call*(call_775059: Call_PostSetActiveReceiptRuleSet_775045;
          RuleSetName: string = ""; Action: string = "SetActiveReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## postSetActiveReceiptRuleSet
  ## <p>Sets the specified receipt rule set as the active receipt rule set.</p> <note> <p>To disable your email-receiving through Amazon SES completely, you can call this API with RuleSetName set to null.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string
  ##              : The name of the receipt rule set to make active. Setting this value to null disables all email receiving.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775060 = newJObject()
  var formData_775061 = newJObject()
  add(formData_775061, "RuleSetName", newJString(RuleSetName))
  add(query_775060, "Action", newJString(Action))
  add(query_775060, "Version", newJString(Version))
  result = call_775059.call(nil, query_775060, nil, formData_775061, nil)

var postSetActiveReceiptRuleSet* = Call_PostSetActiveReceiptRuleSet_775045(
    name: "postSetActiveReceiptRuleSet", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SetActiveReceiptRuleSet",
    validator: validate_PostSetActiveReceiptRuleSet_775046, base: "/",
    url: url_PostSetActiveReceiptRuleSet_775047,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetActiveReceiptRuleSet_775029 = ref object of OpenApiRestCall_772597
proc url_GetSetActiveReceiptRuleSet_775031(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSetActiveReceiptRuleSet_775030(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the specified receipt rule set as the active receipt rule set.</p> <note> <p>To disable your email-receiving through Amazon SES completely, you can call this API with RuleSetName set to null.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleSetName: JString
  ##              : The name of the receipt rule set to make active. Setting this value to null disables all email receiving.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_775032 = query.getOrDefault("RuleSetName")
  valid_775032 = validateParameter(valid_775032, JString, required = false,
                                 default = nil)
  if valid_775032 != nil:
    section.add "RuleSetName", valid_775032
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775033 = query.getOrDefault("Action")
  valid_775033 = validateParameter(valid_775033, JString, required = true, default = newJString(
      "SetActiveReceiptRuleSet"))
  if valid_775033 != nil:
    section.add "Action", valid_775033
  var valid_775034 = query.getOrDefault("Version")
  valid_775034 = validateParameter(valid_775034, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_775034 != nil:
    section.add "Version", valid_775034
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775035 = header.getOrDefault("X-Amz-Date")
  valid_775035 = validateParameter(valid_775035, JString, required = false,
                                 default = nil)
  if valid_775035 != nil:
    section.add "X-Amz-Date", valid_775035
  var valid_775036 = header.getOrDefault("X-Amz-Security-Token")
  valid_775036 = validateParameter(valid_775036, JString, required = false,
                                 default = nil)
  if valid_775036 != nil:
    section.add "X-Amz-Security-Token", valid_775036
  var valid_775037 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775037 = validateParameter(valid_775037, JString, required = false,
                                 default = nil)
  if valid_775037 != nil:
    section.add "X-Amz-Content-Sha256", valid_775037
  var valid_775038 = header.getOrDefault("X-Amz-Algorithm")
  valid_775038 = validateParameter(valid_775038, JString, required = false,
                                 default = nil)
  if valid_775038 != nil:
    section.add "X-Amz-Algorithm", valid_775038
  var valid_775039 = header.getOrDefault("X-Amz-Signature")
  valid_775039 = validateParameter(valid_775039, JString, required = false,
                                 default = nil)
  if valid_775039 != nil:
    section.add "X-Amz-Signature", valid_775039
  var valid_775040 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775040 = validateParameter(valid_775040, JString, required = false,
                                 default = nil)
  if valid_775040 != nil:
    section.add "X-Amz-SignedHeaders", valid_775040
  var valid_775041 = header.getOrDefault("X-Amz-Credential")
  valid_775041 = validateParameter(valid_775041, JString, required = false,
                                 default = nil)
  if valid_775041 != nil:
    section.add "X-Amz-Credential", valid_775041
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775042: Call_GetSetActiveReceiptRuleSet_775029; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the specified receipt rule set as the active receipt rule set.</p> <note> <p>To disable your email-receiving through Amazon SES completely, you can call this API with RuleSetName set to null.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_775042.validator(path, query, header, formData, body)
  let scheme = call_775042.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775042.url(scheme.get, call_775042.host, call_775042.base,
                         call_775042.route, valid.getOrDefault("path"))
  result = hook(call_775042, url, valid)

proc call*(call_775043: Call_GetSetActiveReceiptRuleSet_775029;
          RuleSetName: string = ""; Action: string = "SetActiveReceiptRuleSet";
          Version: string = "2010-12-01"): Recallable =
  ## getSetActiveReceiptRuleSet
  ## <p>Sets the specified receipt rule set as the active receipt rule set.</p> <note> <p>To disable your email-receiving through Amazon SES completely, you can call this API with RuleSetName set to null.</p> </note> <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleSetName: string
  ##              : The name of the receipt rule set to make active. Setting this value to null disables all email receiving.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775044 = newJObject()
  add(query_775044, "RuleSetName", newJString(RuleSetName))
  add(query_775044, "Action", newJString(Action))
  add(query_775044, "Version", newJString(Version))
  result = call_775043.call(nil, query_775044, nil, nil, nil)

var getSetActiveReceiptRuleSet* = Call_GetSetActiveReceiptRuleSet_775029(
    name: "getSetActiveReceiptRuleSet", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SetActiveReceiptRuleSet",
    validator: validate_GetSetActiveReceiptRuleSet_775030, base: "/",
    url: url_GetSetActiveReceiptRuleSet_775031,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetIdentityDkimEnabled_775079 = ref object of OpenApiRestCall_772597
proc url_PostSetIdentityDkimEnabled_775081(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSetIdentityDkimEnabled_775080(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends from addresses on that domain. If Easy DKIM signing is enabled for an email address, then Amazon SES uses DKIM to sign all email it sends from that address.</p> <note> <p>For email addresses (for example, <code>user@example.com</code>), you can only enable DKIM signing if the corresponding domain (in this case, <code>example.com</code>) has been set up to use Easy DKIM.</p> </note> <p>You can enable DKIM signing for an identity at any time after you start the verification process for the identity, even if the verification process isn't complete. </p> <p>You can execute this operation no more than once per second.</p> <p>For more information about Easy DKIM signing, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775082 = query.getOrDefault("Action")
  valid_775082 = validateParameter(valid_775082, JString, required = true,
                                 default = newJString("SetIdentityDkimEnabled"))
  if valid_775082 != nil:
    section.add "Action", valid_775082
  var valid_775083 = query.getOrDefault("Version")
  valid_775083 = validateParameter(valid_775083, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_775083 != nil:
    section.add "Version", valid_775083
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775084 = header.getOrDefault("X-Amz-Date")
  valid_775084 = validateParameter(valid_775084, JString, required = false,
                                 default = nil)
  if valid_775084 != nil:
    section.add "X-Amz-Date", valid_775084
  var valid_775085 = header.getOrDefault("X-Amz-Security-Token")
  valid_775085 = validateParameter(valid_775085, JString, required = false,
                                 default = nil)
  if valid_775085 != nil:
    section.add "X-Amz-Security-Token", valid_775085
  var valid_775086 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775086 = validateParameter(valid_775086, JString, required = false,
                                 default = nil)
  if valid_775086 != nil:
    section.add "X-Amz-Content-Sha256", valid_775086
  var valid_775087 = header.getOrDefault("X-Amz-Algorithm")
  valid_775087 = validateParameter(valid_775087, JString, required = false,
                                 default = nil)
  if valid_775087 != nil:
    section.add "X-Amz-Algorithm", valid_775087
  var valid_775088 = header.getOrDefault("X-Amz-Signature")
  valid_775088 = validateParameter(valid_775088, JString, required = false,
                                 default = nil)
  if valid_775088 != nil:
    section.add "X-Amz-Signature", valid_775088
  var valid_775089 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775089 = validateParameter(valid_775089, JString, required = false,
                                 default = nil)
  if valid_775089 != nil:
    section.add "X-Amz-SignedHeaders", valid_775089
  var valid_775090 = header.getOrDefault("X-Amz-Credential")
  valid_775090 = validateParameter(valid_775090, JString, required = false,
                                 default = nil)
  if valid_775090 != nil:
    section.add "X-Amz-Credential", valid_775090
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identity: JString (required)
  ##           : The identity for which DKIM signing should be enabled or disabled.
  ##   DkimEnabled: JBool (required)
  ##              : Sets whether DKIM signing is enabled for an identity. Set to <code>true</code> to enable DKIM signing for this identity; <code>false</code> to disable it. 
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identity` field"
  var valid_775091 = formData.getOrDefault("Identity")
  valid_775091 = validateParameter(valid_775091, JString, required = true,
                                 default = nil)
  if valid_775091 != nil:
    section.add "Identity", valid_775091
  var valid_775092 = formData.getOrDefault("DkimEnabled")
  valid_775092 = validateParameter(valid_775092, JBool, required = true, default = nil)
  if valid_775092 != nil:
    section.add "DkimEnabled", valid_775092
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775093: Call_PostSetIdentityDkimEnabled_775079; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends from addresses on that domain. If Easy DKIM signing is enabled for an email address, then Amazon SES uses DKIM to sign all email it sends from that address.</p> <note> <p>For email addresses (for example, <code>user@example.com</code>), you can only enable DKIM signing if the corresponding domain (in this case, <code>example.com</code>) has been set up to use Easy DKIM.</p> </note> <p>You can enable DKIM signing for an identity at any time after you start the verification process for the identity, even if the verification process isn't complete. </p> <p>You can execute this operation no more than once per second.</p> <p>For more information about Easy DKIM signing, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_775093.validator(path, query, header, formData, body)
  let scheme = call_775093.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775093.url(scheme.get, call_775093.host, call_775093.base,
                         call_775093.route, valid.getOrDefault("path"))
  result = hook(call_775093, url, valid)

proc call*(call_775094: Call_PostSetIdentityDkimEnabled_775079; Identity: string;
          DkimEnabled: bool; Action: string = "SetIdentityDkimEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## postSetIdentityDkimEnabled
  ## <p>Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends from addresses on that domain. If Easy DKIM signing is enabled for an email address, then Amazon SES uses DKIM to sign all email it sends from that address.</p> <note> <p>For email addresses (for example, <code>user@example.com</code>), you can only enable DKIM signing if the corresponding domain (in this case, <code>example.com</code>) has been set up to use Easy DKIM.</p> </note> <p>You can enable DKIM signing for an identity at any time after you start the verification process for the identity, even if the verification process isn't complete. </p> <p>You can execute this operation no more than once per second.</p> <p>For more information about Easy DKIM signing, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
  ##   Identity: string (required)
  ##           : The identity for which DKIM signing should be enabled or disabled.
  ##   Action: string (required)
  ##   DkimEnabled: bool (required)
  ##              : Sets whether DKIM signing is enabled for an identity. Set to <code>true</code> to enable DKIM signing for this identity; <code>false</code> to disable it. 
  ##   Version: string (required)
  var query_775095 = newJObject()
  var formData_775096 = newJObject()
  add(formData_775096, "Identity", newJString(Identity))
  add(query_775095, "Action", newJString(Action))
  add(formData_775096, "DkimEnabled", newJBool(DkimEnabled))
  add(query_775095, "Version", newJString(Version))
  result = call_775094.call(nil, query_775095, nil, formData_775096, nil)

var postSetIdentityDkimEnabled* = Call_PostSetIdentityDkimEnabled_775079(
    name: "postSetIdentityDkimEnabled", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SetIdentityDkimEnabled",
    validator: validate_PostSetIdentityDkimEnabled_775080, base: "/",
    url: url_PostSetIdentityDkimEnabled_775081,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetIdentityDkimEnabled_775062 = ref object of OpenApiRestCall_772597
proc url_GetSetIdentityDkimEnabled_775064(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSetIdentityDkimEnabled_775063(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends from addresses on that domain. If Easy DKIM signing is enabled for an email address, then Amazon SES uses DKIM to sign all email it sends from that address.</p> <note> <p>For email addresses (for example, <code>user@example.com</code>), you can only enable DKIM signing if the corresponding domain (in this case, <code>example.com</code>) has been set up to use Easy DKIM.</p> </note> <p>You can enable DKIM signing for an identity at any time after you start the verification process for the identity, even if the verification process isn't complete. </p> <p>You can execute this operation no more than once per second.</p> <p>For more information about Easy DKIM signing, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : The identity for which DKIM signing should be enabled or disabled.
  ##   DkimEnabled: JBool (required)
  ##              : Sets whether DKIM signing is enabled for an identity. Set to <code>true</code> to enable DKIM signing for this identity; <code>false</code> to disable it. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_775065 = query.getOrDefault("Identity")
  valid_775065 = validateParameter(valid_775065, JString, required = true,
                                 default = nil)
  if valid_775065 != nil:
    section.add "Identity", valid_775065
  var valid_775066 = query.getOrDefault("DkimEnabled")
  valid_775066 = validateParameter(valid_775066, JBool, required = true, default = nil)
  if valid_775066 != nil:
    section.add "DkimEnabled", valid_775066
  var valid_775067 = query.getOrDefault("Action")
  valid_775067 = validateParameter(valid_775067, JString, required = true,
                                 default = newJString("SetIdentityDkimEnabled"))
  if valid_775067 != nil:
    section.add "Action", valid_775067
  var valid_775068 = query.getOrDefault("Version")
  valid_775068 = validateParameter(valid_775068, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_775068 != nil:
    section.add "Version", valid_775068
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775069 = header.getOrDefault("X-Amz-Date")
  valid_775069 = validateParameter(valid_775069, JString, required = false,
                                 default = nil)
  if valid_775069 != nil:
    section.add "X-Amz-Date", valid_775069
  var valid_775070 = header.getOrDefault("X-Amz-Security-Token")
  valid_775070 = validateParameter(valid_775070, JString, required = false,
                                 default = nil)
  if valid_775070 != nil:
    section.add "X-Amz-Security-Token", valid_775070
  var valid_775071 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775071 = validateParameter(valid_775071, JString, required = false,
                                 default = nil)
  if valid_775071 != nil:
    section.add "X-Amz-Content-Sha256", valid_775071
  var valid_775072 = header.getOrDefault("X-Amz-Algorithm")
  valid_775072 = validateParameter(valid_775072, JString, required = false,
                                 default = nil)
  if valid_775072 != nil:
    section.add "X-Amz-Algorithm", valid_775072
  var valid_775073 = header.getOrDefault("X-Amz-Signature")
  valid_775073 = validateParameter(valid_775073, JString, required = false,
                                 default = nil)
  if valid_775073 != nil:
    section.add "X-Amz-Signature", valid_775073
  var valid_775074 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775074 = validateParameter(valid_775074, JString, required = false,
                                 default = nil)
  if valid_775074 != nil:
    section.add "X-Amz-SignedHeaders", valid_775074
  var valid_775075 = header.getOrDefault("X-Amz-Credential")
  valid_775075 = validateParameter(valid_775075, JString, required = false,
                                 default = nil)
  if valid_775075 != nil:
    section.add "X-Amz-Credential", valid_775075
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775076: Call_GetSetIdentityDkimEnabled_775062; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends from addresses on that domain. If Easy DKIM signing is enabled for an email address, then Amazon SES uses DKIM to sign all email it sends from that address.</p> <note> <p>For email addresses (for example, <code>user@example.com</code>), you can only enable DKIM signing if the corresponding domain (in this case, <code>example.com</code>) has been set up to use Easy DKIM.</p> </note> <p>You can enable DKIM signing for an identity at any time after you start the verification process for the identity, even if the verification process isn't complete. </p> <p>You can execute this operation no more than once per second.</p> <p>For more information about Easy DKIM signing, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_775076.validator(path, query, header, formData, body)
  let scheme = call_775076.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775076.url(scheme.get, call_775076.host, call_775076.base,
                         call_775076.route, valid.getOrDefault("path"))
  result = hook(call_775076, url, valid)

proc call*(call_775077: Call_GetSetIdentityDkimEnabled_775062; Identity: string;
          DkimEnabled: bool; Action: string = "SetIdentityDkimEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## getSetIdentityDkimEnabled
  ## <p>Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends from addresses on that domain. If Easy DKIM signing is enabled for an email address, then Amazon SES uses DKIM to sign all email it sends from that address.</p> <note> <p>For email addresses (for example, <code>user@example.com</code>), you can only enable DKIM signing if the corresponding domain (in this case, <code>example.com</code>) has been set up to use Easy DKIM.</p> </note> <p>You can enable DKIM signing for an identity at any time after you start the verification process for the identity, even if the verification process isn't complete. </p> <p>You can execute this operation no more than once per second.</p> <p>For more information about Easy DKIM signing, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
  ##   Identity: string (required)
  ##           : The identity for which DKIM signing should be enabled or disabled.
  ##   DkimEnabled: bool (required)
  ##              : Sets whether DKIM signing is enabled for an identity. Set to <code>true</code> to enable DKIM signing for this identity; <code>false</code> to disable it. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775078 = newJObject()
  add(query_775078, "Identity", newJString(Identity))
  add(query_775078, "DkimEnabled", newJBool(DkimEnabled))
  add(query_775078, "Action", newJString(Action))
  add(query_775078, "Version", newJString(Version))
  result = call_775077.call(nil, query_775078, nil, nil, nil)

var getSetIdentityDkimEnabled* = Call_GetSetIdentityDkimEnabled_775062(
    name: "getSetIdentityDkimEnabled", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SetIdentityDkimEnabled",
    validator: validate_GetSetIdentityDkimEnabled_775063, base: "/",
    url: url_GetSetIdentityDkimEnabled_775064,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetIdentityFeedbackForwardingEnabled_775114 = ref object of OpenApiRestCall_772597
proc url_PostSetIdentityFeedbackForwardingEnabled_775116(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSetIdentityFeedbackForwardingEnabled_775115(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given an identity (an email address or a domain), enables or disables whether Amazon SES forwards bounce and complaint notifications as email. Feedback forwarding can only be disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and complaints.</p> <note> <p>Feedback forwarding does not apply to delivery notifications. Delivery notifications are only available through Amazon SNS.</p> </note> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775117 = query.getOrDefault("Action")
  valid_775117 = validateParameter(valid_775117, JString, required = true, default = newJString(
      "SetIdentityFeedbackForwardingEnabled"))
  if valid_775117 != nil:
    section.add "Action", valid_775117
  var valid_775118 = query.getOrDefault("Version")
  valid_775118 = validateParameter(valid_775118, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_775118 != nil:
    section.add "Version", valid_775118
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775119 = header.getOrDefault("X-Amz-Date")
  valid_775119 = validateParameter(valid_775119, JString, required = false,
                                 default = nil)
  if valid_775119 != nil:
    section.add "X-Amz-Date", valid_775119
  var valid_775120 = header.getOrDefault("X-Amz-Security-Token")
  valid_775120 = validateParameter(valid_775120, JString, required = false,
                                 default = nil)
  if valid_775120 != nil:
    section.add "X-Amz-Security-Token", valid_775120
  var valid_775121 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775121 = validateParameter(valid_775121, JString, required = false,
                                 default = nil)
  if valid_775121 != nil:
    section.add "X-Amz-Content-Sha256", valid_775121
  var valid_775122 = header.getOrDefault("X-Amz-Algorithm")
  valid_775122 = validateParameter(valid_775122, JString, required = false,
                                 default = nil)
  if valid_775122 != nil:
    section.add "X-Amz-Algorithm", valid_775122
  var valid_775123 = header.getOrDefault("X-Amz-Signature")
  valid_775123 = validateParameter(valid_775123, JString, required = false,
                                 default = nil)
  if valid_775123 != nil:
    section.add "X-Amz-Signature", valid_775123
  var valid_775124 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775124 = validateParameter(valid_775124, JString, required = false,
                                 default = nil)
  if valid_775124 != nil:
    section.add "X-Amz-SignedHeaders", valid_775124
  var valid_775125 = header.getOrDefault("X-Amz-Credential")
  valid_775125 = validateParameter(valid_775125, JString, required = false,
                                 default = nil)
  if valid_775125 != nil:
    section.add "X-Amz-Credential", valid_775125
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identity: JString (required)
  ##           : The identity for which to set bounce and complaint notification forwarding. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   ForwardingEnabled: JBool (required)
  ##                    : Sets whether Amazon SES will forward bounce and complaint notifications as email. <code>true</code> specifies that Amazon SES will forward bounce and complaint notifications as email, in addition to any Amazon SNS topic publishing otherwise specified. <code>false</code> specifies that Amazon SES will publish bounce and complaint notifications only through Amazon SNS. This value can only be set to <code>false</code> when Amazon SNS topics are set for both <code>Bounce</code> and <code>Complaint</code> notification types.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identity` field"
  var valid_775126 = formData.getOrDefault("Identity")
  valid_775126 = validateParameter(valid_775126, JString, required = true,
                                 default = nil)
  if valid_775126 != nil:
    section.add "Identity", valid_775126
  var valid_775127 = formData.getOrDefault("ForwardingEnabled")
  valid_775127 = validateParameter(valid_775127, JBool, required = true, default = nil)
  if valid_775127 != nil:
    section.add "ForwardingEnabled", valid_775127
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775128: Call_PostSetIdentityFeedbackForwardingEnabled_775114;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given an identity (an email address or a domain), enables or disables whether Amazon SES forwards bounce and complaint notifications as email. Feedback forwarding can only be disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and complaints.</p> <note> <p>Feedback forwarding does not apply to delivery notifications. Delivery notifications are only available through Amazon SNS.</p> </note> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_775128.validator(path, query, header, formData, body)
  let scheme = call_775128.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775128.url(scheme.get, call_775128.host, call_775128.base,
                         call_775128.route, valid.getOrDefault("path"))
  result = hook(call_775128, url, valid)

proc call*(call_775129: Call_PostSetIdentityFeedbackForwardingEnabled_775114;
          Identity: string; ForwardingEnabled: bool;
          Action: string = "SetIdentityFeedbackForwardingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## postSetIdentityFeedbackForwardingEnabled
  ## <p>Given an identity (an email address or a domain), enables or disables whether Amazon SES forwards bounce and complaint notifications as email. Feedback forwarding can only be disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and complaints.</p> <note> <p>Feedback forwarding does not apply to delivery notifications. Delivery notifications are only available through Amazon SNS.</p> </note> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Identity: string (required)
  ##           : The identity for which to set bounce and complaint notification forwarding. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ForwardingEnabled: bool (required)
  ##                    : Sets whether Amazon SES will forward bounce and complaint notifications as email. <code>true</code> specifies that Amazon SES will forward bounce and complaint notifications as email, in addition to any Amazon SNS topic publishing otherwise specified. <code>false</code> specifies that Amazon SES will publish bounce and complaint notifications only through Amazon SNS. This value can only be set to <code>false</code> when Amazon SNS topics are set for both <code>Bounce</code> and <code>Complaint</code> notification types.
  var query_775130 = newJObject()
  var formData_775131 = newJObject()
  add(formData_775131, "Identity", newJString(Identity))
  add(query_775130, "Action", newJString(Action))
  add(query_775130, "Version", newJString(Version))
  add(formData_775131, "ForwardingEnabled", newJBool(ForwardingEnabled))
  result = call_775129.call(nil, query_775130, nil, formData_775131, nil)

var postSetIdentityFeedbackForwardingEnabled* = Call_PostSetIdentityFeedbackForwardingEnabled_775114(
    name: "postSetIdentityFeedbackForwardingEnabled", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=SetIdentityFeedbackForwardingEnabled",
    validator: validate_PostSetIdentityFeedbackForwardingEnabled_775115,
    base: "/", url: url_PostSetIdentityFeedbackForwardingEnabled_775116,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetIdentityFeedbackForwardingEnabled_775097 = ref object of OpenApiRestCall_772597
proc url_GetSetIdentityFeedbackForwardingEnabled_775099(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSetIdentityFeedbackForwardingEnabled_775098(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given an identity (an email address or a domain), enables or disables whether Amazon SES forwards bounce and complaint notifications as email. Feedback forwarding can only be disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and complaints.</p> <note> <p>Feedback forwarding does not apply to delivery notifications. Delivery notifications are only available through Amazon SNS.</p> </note> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : The identity for which to set bounce and complaint notification forwarding. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   ForwardingEnabled: JBool (required)
  ##                    : Sets whether Amazon SES will forward bounce and complaint notifications as email. <code>true</code> specifies that Amazon SES will forward bounce and complaint notifications as email, in addition to any Amazon SNS topic publishing otherwise specified. <code>false</code> specifies that Amazon SES will publish bounce and complaint notifications only through Amazon SNS. This value can only be set to <code>false</code> when Amazon SNS topics are set for both <code>Bounce</code> and <code>Complaint</code> notification types.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_775100 = query.getOrDefault("Identity")
  valid_775100 = validateParameter(valid_775100, JString, required = true,
                                 default = nil)
  if valid_775100 != nil:
    section.add "Identity", valid_775100
  var valid_775101 = query.getOrDefault("ForwardingEnabled")
  valid_775101 = validateParameter(valid_775101, JBool, required = true, default = nil)
  if valid_775101 != nil:
    section.add "ForwardingEnabled", valid_775101
  var valid_775102 = query.getOrDefault("Action")
  valid_775102 = validateParameter(valid_775102, JString, required = true, default = newJString(
      "SetIdentityFeedbackForwardingEnabled"))
  if valid_775102 != nil:
    section.add "Action", valid_775102
  var valid_775103 = query.getOrDefault("Version")
  valid_775103 = validateParameter(valid_775103, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_775103 != nil:
    section.add "Version", valid_775103
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775104 = header.getOrDefault("X-Amz-Date")
  valid_775104 = validateParameter(valid_775104, JString, required = false,
                                 default = nil)
  if valid_775104 != nil:
    section.add "X-Amz-Date", valid_775104
  var valid_775105 = header.getOrDefault("X-Amz-Security-Token")
  valid_775105 = validateParameter(valid_775105, JString, required = false,
                                 default = nil)
  if valid_775105 != nil:
    section.add "X-Amz-Security-Token", valid_775105
  var valid_775106 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775106 = validateParameter(valid_775106, JString, required = false,
                                 default = nil)
  if valid_775106 != nil:
    section.add "X-Amz-Content-Sha256", valid_775106
  var valid_775107 = header.getOrDefault("X-Amz-Algorithm")
  valid_775107 = validateParameter(valid_775107, JString, required = false,
                                 default = nil)
  if valid_775107 != nil:
    section.add "X-Amz-Algorithm", valid_775107
  var valid_775108 = header.getOrDefault("X-Amz-Signature")
  valid_775108 = validateParameter(valid_775108, JString, required = false,
                                 default = nil)
  if valid_775108 != nil:
    section.add "X-Amz-Signature", valid_775108
  var valid_775109 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775109 = validateParameter(valid_775109, JString, required = false,
                                 default = nil)
  if valid_775109 != nil:
    section.add "X-Amz-SignedHeaders", valid_775109
  var valid_775110 = header.getOrDefault("X-Amz-Credential")
  valid_775110 = validateParameter(valid_775110, JString, required = false,
                                 default = nil)
  if valid_775110 != nil:
    section.add "X-Amz-Credential", valid_775110
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775111: Call_GetSetIdentityFeedbackForwardingEnabled_775097;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given an identity (an email address or a domain), enables or disables whether Amazon SES forwards bounce and complaint notifications as email. Feedback forwarding can only be disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and complaints.</p> <note> <p>Feedback forwarding does not apply to delivery notifications. Delivery notifications are only available through Amazon SNS.</p> </note> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_775111.validator(path, query, header, formData, body)
  let scheme = call_775111.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775111.url(scheme.get, call_775111.host, call_775111.base,
                         call_775111.route, valid.getOrDefault("path"))
  result = hook(call_775111, url, valid)

proc call*(call_775112: Call_GetSetIdentityFeedbackForwardingEnabled_775097;
          Identity: string; ForwardingEnabled: bool;
          Action: string = "SetIdentityFeedbackForwardingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## getSetIdentityFeedbackForwardingEnabled
  ## <p>Given an identity (an email address or a domain), enables or disables whether Amazon SES forwards bounce and complaint notifications as email. Feedback forwarding can only be disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and complaints.</p> <note> <p>Feedback forwarding does not apply to delivery notifications. Delivery notifications are only available through Amazon SNS.</p> </note> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Identity: string (required)
  ##           : The identity for which to set bounce and complaint notification forwarding. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   ForwardingEnabled: bool (required)
  ##                    : Sets whether Amazon SES will forward bounce and complaint notifications as email. <code>true</code> specifies that Amazon SES will forward bounce and complaint notifications as email, in addition to any Amazon SNS topic publishing otherwise specified. <code>false</code> specifies that Amazon SES will publish bounce and complaint notifications only through Amazon SNS. This value can only be set to <code>false</code> when Amazon SNS topics are set for both <code>Bounce</code> and <code>Complaint</code> notification types.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775113 = newJObject()
  add(query_775113, "Identity", newJString(Identity))
  add(query_775113, "ForwardingEnabled", newJBool(ForwardingEnabled))
  add(query_775113, "Action", newJString(Action))
  add(query_775113, "Version", newJString(Version))
  result = call_775112.call(nil, query_775113, nil, nil, nil)

var getSetIdentityFeedbackForwardingEnabled* = Call_GetSetIdentityFeedbackForwardingEnabled_775097(
    name: "getSetIdentityFeedbackForwardingEnabled", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=SetIdentityFeedbackForwardingEnabled",
    validator: validate_GetSetIdentityFeedbackForwardingEnabled_775098, base: "/",
    url: url_GetSetIdentityFeedbackForwardingEnabled_775099,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetIdentityHeadersInNotificationsEnabled_775150 = ref object of OpenApiRestCall_772597
proc url_PostSetIdentityHeadersInNotificationsEnabled_775152(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSetIdentityHeadersInNotificationsEnabled_775151(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given an identity (an email address or a domain), sets whether Amazon SES includes the original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified type.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775153 = query.getOrDefault("Action")
  valid_775153 = validateParameter(valid_775153, JString, required = true, default = newJString(
      "SetIdentityHeadersInNotificationsEnabled"))
  if valid_775153 != nil:
    section.add "Action", valid_775153
  var valid_775154 = query.getOrDefault("Version")
  valid_775154 = validateParameter(valid_775154, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_775154 != nil:
    section.add "Version", valid_775154
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775155 = header.getOrDefault("X-Amz-Date")
  valid_775155 = validateParameter(valid_775155, JString, required = false,
                                 default = nil)
  if valid_775155 != nil:
    section.add "X-Amz-Date", valid_775155
  var valid_775156 = header.getOrDefault("X-Amz-Security-Token")
  valid_775156 = validateParameter(valid_775156, JString, required = false,
                                 default = nil)
  if valid_775156 != nil:
    section.add "X-Amz-Security-Token", valid_775156
  var valid_775157 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775157 = validateParameter(valid_775157, JString, required = false,
                                 default = nil)
  if valid_775157 != nil:
    section.add "X-Amz-Content-Sha256", valid_775157
  var valid_775158 = header.getOrDefault("X-Amz-Algorithm")
  valid_775158 = validateParameter(valid_775158, JString, required = false,
                                 default = nil)
  if valid_775158 != nil:
    section.add "X-Amz-Algorithm", valid_775158
  var valid_775159 = header.getOrDefault("X-Amz-Signature")
  valid_775159 = validateParameter(valid_775159, JString, required = false,
                                 default = nil)
  if valid_775159 != nil:
    section.add "X-Amz-Signature", valid_775159
  var valid_775160 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775160 = validateParameter(valid_775160, JString, required = false,
                                 default = nil)
  if valid_775160 != nil:
    section.add "X-Amz-SignedHeaders", valid_775160
  var valid_775161 = header.getOrDefault("X-Amz-Credential")
  valid_775161 = validateParameter(valid_775161, JString, required = false,
                                 default = nil)
  if valid_775161 != nil:
    section.add "X-Amz-Credential", valid_775161
  result.add "header", section
  ## parameters in `formData` object:
  ##   Enabled: JBool (required)
  ##          : <p>Sets whether Amazon SES includes the original email headers in Amazon SNS notifications of the specified notification type. A value of <code>true</code> specifies that Amazon SES will include headers in notifications, and a value of <code>false</code> specifies that Amazon SES will not include headers in notifications.</p> <p>This value can only be set when <code>NotificationType</code> is already set to use a particular Amazon SNS topic.</p>
  ##   Identity: JString (required)
  ##           : The identity for which to enable or disable headers in notifications. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   NotificationType: JString (required)
  ##                   : The notification type for which to enable or disable headers in notifications. 
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Enabled` field"
  var valid_775162 = formData.getOrDefault("Enabled")
  valid_775162 = validateParameter(valid_775162, JBool, required = true, default = nil)
  if valid_775162 != nil:
    section.add "Enabled", valid_775162
  var valid_775163 = formData.getOrDefault("Identity")
  valid_775163 = validateParameter(valid_775163, JString, required = true,
                                 default = nil)
  if valid_775163 != nil:
    section.add "Identity", valid_775163
  var valid_775164 = formData.getOrDefault("NotificationType")
  valid_775164 = validateParameter(valid_775164, JString, required = true,
                                 default = newJString("Bounce"))
  if valid_775164 != nil:
    section.add "NotificationType", valid_775164
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775165: Call_PostSetIdentityHeadersInNotificationsEnabled_775150;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given an identity (an email address or a domain), sets whether Amazon SES includes the original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified type.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_775165.validator(path, query, header, formData, body)
  let scheme = call_775165.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775165.url(scheme.get, call_775165.host, call_775165.base,
                         call_775165.route, valid.getOrDefault("path"))
  result = hook(call_775165, url, valid)

proc call*(call_775166: Call_PostSetIdentityHeadersInNotificationsEnabled_775150;
          Enabled: bool; Identity: string;
          Action: string = "SetIdentityHeadersInNotificationsEnabled";
          NotificationType: string = "Bounce"; Version: string = "2010-12-01"): Recallable =
  ## postSetIdentityHeadersInNotificationsEnabled
  ## <p>Given an identity (an email address or a domain), sets whether Amazon SES includes the original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified type.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Enabled: bool (required)
  ##          : <p>Sets whether Amazon SES includes the original email headers in Amazon SNS notifications of the specified notification type. A value of <code>true</code> specifies that Amazon SES will include headers in notifications, and a value of <code>false</code> specifies that Amazon SES will not include headers in notifications.</p> <p>This value can only be set when <code>NotificationType</code> is already set to use a particular Amazon SNS topic.</p>
  ##   Identity: string (required)
  ##           : The identity for which to enable or disable headers in notifications. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   Action: string (required)
  ##   NotificationType: string (required)
  ##                   : The notification type for which to enable or disable headers in notifications. 
  ##   Version: string (required)
  var query_775167 = newJObject()
  var formData_775168 = newJObject()
  add(formData_775168, "Enabled", newJBool(Enabled))
  add(formData_775168, "Identity", newJString(Identity))
  add(query_775167, "Action", newJString(Action))
  add(formData_775168, "NotificationType", newJString(NotificationType))
  add(query_775167, "Version", newJString(Version))
  result = call_775166.call(nil, query_775167, nil, formData_775168, nil)

var postSetIdentityHeadersInNotificationsEnabled* = Call_PostSetIdentityHeadersInNotificationsEnabled_775150(
    name: "postSetIdentityHeadersInNotificationsEnabled",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=SetIdentityHeadersInNotificationsEnabled",
    validator: validate_PostSetIdentityHeadersInNotificationsEnabled_775151,
    base: "/", url: url_PostSetIdentityHeadersInNotificationsEnabled_775152,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetIdentityHeadersInNotificationsEnabled_775132 = ref object of OpenApiRestCall_772597
proc url_GetSetIdentityHeadersInNotificationsEnabled_775134(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSetIdentityHeadersInNotificationsEnabled_775133(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Given an identity (an email address or a domain), sets whether Amazon SES includes the original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified type.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : The identity for which to enable or disable headers in notifications. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   Enabled: JBool (required)
  ##          : <p>Sets whether Amazon SES includes the original email headers in Amazon SNS notifications of the specified notification type. A value of <code>true</code> specifies that Amazon SES will include headers in notifications, and a value of <code>false</code> specifies that Amazon SES will not include headers in notifications.</p> <p>This value can only be set when <code>NotificationType</code> is already set to use a particular Amazon SNS topic.</p>
  ##   Action: JString (required)
  ##   NotificationType: JString (required)
  ##                   : The notification type for which to enable or disable headers in notifications. 
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_775135 = query.getOrDefault("Identity")
  valid_775135 = validateParameter(valid_775135, JString, required = true,
                                 default = nil)
  if valid_775135 != nil:
    section.add "Identity", valid_775135
  var valid_775136 = query.getOrDefault("Enabled")
  valid_775136 = validateParameter(valid_775136, JBool, required = true, default = nil)
  if valid_775136 != nil:
    section.add "Enabled", valid_775136
  var valid_775137 = query.getOrDefault("Action")
  valid_775137 = validateParameter(valid_775137, JString, required = true, default = newJString(
      "SetIdentityHeadersInNotificationsEnabled"))
  if valid_775137 != nil:
    section.add "Action", valid_775137
  var valid_775138 = query.getOrDefault("NotificationType")
  valid_775138 = validateParameter(valid_775138, JString, required = true,
                                 default = newJString("Bounce"))
  if valid_775138 != nil:
    section.add "NotificationType", valid_775138
  var valid_775139 = query.getOrDefault("Version")
  valid_775139 = validateParameter(valid_775139, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_775139 != nil:
    section.add "Version", valid_775139
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775140 = header.getOrDefault("X-Amz-Date")
  valid_775140 = validateParameter(valid_775140, JString, required = false,
                                 default = nil)
  if valid_775140 != nil:
    section.add "X-Amz-Date", valid_775140
  var valid_775141 = header.getOrDefault("X-Amz-Security-Token")
  valid_775141 = validateParameter(valid_775141, JString, required = false,
                                 default = nil)
  if valid_775141 != nil:
    section.add "X-Amz-Security-Token", valid_775141
  var valid_775142 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775142 = validateParameter(valid_775142, JString, required = false,
                                 default = nil)
  if valid_775142 != nil:
    section.add "X-Amz-Content-Sha256", valid_775142
  var valid_775143 = header.getOrDefault("X-Amz-Algorithm")
  valid_775143 = validateParameter(valid_775143, JString, required = false,
                                 default = nil)
  if valid_775143 != nil:
    section.add "X-Amz-Algorithm", valid_775143
  var valid_775144 = header.getOrDefault("X-Amz-Signature")
  valid_775144 = validateParameter(valid_775144, JString, required = false,
                                 default = nil)
  if valid_775144 != nil:
    section.add "X-Amz-Signature", valid_775144
  var valid_775145 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775145 = validateParameter(valid_775145, JString, required = false,
                                 default = nil)
  if valid_775145 != nil:
    section.add "X-Amz-SignedHeaders", valid_775145
  var valid_775146 = header.getOrDefault("X-Amz-Credential")
  valid_775146 = validateParameter(valid_775146, JString, required = false,
                                 default = nil)
  if valid_775146 != nil:
    section.add "X-Amz-Credential", valid_775146
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775147: Call_GetSetIdentityHeadersInNotificationsEnabled_775132;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Given an identity (an email address or a domain), sets whether Amazon SES includes the original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified type.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_775147.validator(path, query, header, formData, body)
  let scheme = call_775147.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775147.url(scheme.get, call_775147.host, call_775147.base,
                         call_775147.route, valid.getOrDefault("path"))
  result = hook(call_775147, url, valid)

proc call*(call_775148: Call_GetSetIdentityHeadersInNotificationsEnabled_775132;
          Identity: string; Enabled: bool;
          Action: string = "SetIdentityHeadersInNotificationsEnabled";
          NotificationType: string = "Bounce"; Version: string = "2010-12-01"): Recallable =
  ## getSetIdentityHeadersInNotificationsEnabled
  ## <p>Given an identity (an email address or a domain), sets whether Amazon SES includes the original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified type.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Identity: string (required)
  ##           : The identity for which to enable or disable headers in notifications. Examples: <code>user@example.com</code>, <code>example.com</code>.
  ##   Enabled: bool (required)
  ##          : <p>Sets whether Amazon SES includes the original email headers in Amazon SNS notifications of the specified notification type. A value of <code>true</code> specifies that Amazon SES will include headers in notifications, and a value of <code>false</code> specifies that Amazon SES will not include headers in notifications.</p> <p>This value can only be set when <code>NotificationType</code> is already set to use a particular Amazon SNS topic.</p>
  ##   Action: string (required)
  ##   NotificationType: string (required)
  ##                   : The notification type for which to enable or disable headers in notifications. 
  ##   Version: string (required)
  var query_775149 = newJObject()
  add(query_775149, "Identity", newJString(Identity))
  add(query_775149, "Enabled", newJBool(Enabled))
  add(query_775149, "Action", newJString(Action))
  add(query_775149, "NotificationType", newJString(NotificationType))
  add(query_775149, "Version", newJString(Version))
  result = call_775148.call(nil, query_775149, nil, nil, nil)

var getSetIdentityHeadersInNotificationsEnabled* = Call_GetSetIdentityHeadersInNotificationsEnabled_775132(
    name: "getSetIdentityHeadersInNotificationsEnabled", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=SetIdentityHeadersInNotificationsEnabled",
    validator: validate_GetSetIdentityHeadersInNotificationsEnabled_775133,
    base: "/", url: url_GetSetIdentityHeadersInNotificationsEnabled_775134,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetIdentityMailFromDomain_775187 = ref object of OpenApiRestCall_772597
proc url_PostSetIdentityMailFromDomain_775189(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSetIdentityMailFromDomain_775188(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables the custom MAIL FROM domain setup for a verified identity (an email address or a domain).</p> <important> <p>To send emails using the specified MAIL FROM domain, you must add an MX record to your MAIL FROM domain's DNS settings. If you want your emails to pass Sender Policy Framework (SPF) checks, you must also add or update an SPF record. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-set.html">Amazon SES Developer Guide</a>.</p> </important> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775190 = query.getOrDefault("Action")
  valid_775190 = validateParameter(valid_775190, JString, required = true, default = newJString(
      "SetIdentityMailFromDomain"))
  if valid_775190 != nil:
    section.add "Action", valid_775190
  var valid_775191 = query.getOrDefault("Version")
  valid_775191 = validateParameter(valid_775191, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_775191 != nil:
    section.add "Version", valid_775191
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775192 = header.getOrDefault("X-Amz-Date")
  valid_775192 = validateParameter(valid_775192, JString, required = false,
                                 default = nil)
  if valid_775192 != nil:
    section.add "X-Amz-Date", valid_775192
  var valid_775193 = header.getOrDefault("X-Amz-Security-Token")
  valid_775193 = validateParameter(valid_775193, JString, required = false,
                                 default = nil)
  if valid_775193 != nil:
    section.add "X-Amz-Security-Token", valid_775193
  var valid_775194 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775194 = validateParameter(valid_775194, JString, required = false,
                                 default = nil)
  if valid_775194 != nil:
    section.add "X-Amz-Content-Sha256", valid_775194
  var valid_775195 = header.getOrDefault("X-Amz-Algorithm")
  valid_775195 = validateParameter(valid_775195, JString, required = false,
                                 default = nil)
  if valid_775195 != nil:
    section.add "X-Amz-Algorithm", valid_775195
  var valid_775196 = header.getOrDefault("X-Amz-Signature")
  valid_775196 = validateParameter(valid_775196, JString, required = false,
                                 default = nil)
  if valid_775196 != nil:
    section.add "X-Amz-Signature", valid_775196
  var valid_775197 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775197 = validateParameter(valid_775197, JString, required = false,
                                 default = nil)
  if valid_775197 != nil:
    section.add "X-Amz-SignedHeaders", valid_775197
  var valid_775198 = header.getOrDefault("X-Amz-Credential")
  valid_775198 = validateParameter(valid_775198, JString, required = false,
                                 default = nil)
  if valid_775198 != nil:
    section.add "X-Amz-Credential", valid_775198
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identity: JString (required)
  ##           : The verified identity for which you want to enable or disable the specified custom MAIL FROM domain.
  ##   MailFromDomain: JString
  ##                 : The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM domain must 1) be a subdomain of the verified identity, 2) not be used in a "From" address if the MAIL FROM domain is the destination of email feedback forwarding (for more information, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from.html">Amazon SES Developer Guide</a>), and 3) not be used to receive emails. A value of <code>null</code> disables the custom MAIL FROM setting for the identity.
  ##   BehaviorOnMXFailure: JString
  ##                      : <p>The action that you want Amazon SES to take if it cannot successfully read the required MX record when you send an email. If you choose <code>UseDefaultValue</code>, Amazon SES will use amazonses.com (or a subdomain of that) as the MAIL FROM domain. If you choose <code>RejectMessage</code>, Amazon SES will return a <code>MailFromDomainNotVerified</code> error and not send the email.</p> <p>The action specified in <code>BehaviorOnMXFailure</code> is taken when the custom MAIL FROM domain setup is in the <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code> states.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identity` field"
  var valid_775199 = formData.getOrDefault("Identity")
  valid_775199 = validateParameter(valid_775199, JString, required = true,
                                 default = nil)
  if valid_775199 != nil:
    section.add "Identity", valid_775199
  var valid_775200 = formData.getOrDefault("MailFromDomain")
  valid_775200 = validateParameter(valid_775200, JString, required = false,
                                 default = nil)
  if valid_775200 != nil:
    section.add "MailFromDomain", valid_775200
  var valid_775201 = formData.getOrDefault("BehaviorOnMXFailure")
  valid_775201 = validateParameter(valid_775201, JString, required = false,
                                 default = newJString("UseDefaultValue"))
  if valid_775201 != nil:
    section.add "BehaviorOnMXFailure", valid_775201
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775202: Call_PostSetIdentityMailFromDomain_775187; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Enables or disables the custom MAIL FROM domain setup for a verified identity (an email address or a domain).</p> <important> <p>To send emails using the specified MAIL FROM domain, you must add an MX record to your MAIL FROM domain's DNS settings. If you want your emails to pass Sender Policy Framework (SPF) checks, you must also add or update an SPF record. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-set.html">Amazon SES Developer Guide</a>.</p> </important> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_775202.validator(path, query, header, formData, body)
  let scheme = call_775202.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775202.url(scheme.get, call_775202.host, call_775202.base,
                         call_775202.route, valid.getOrDefault("path"))
  result = hook(call_775202, url, valid)

proc call*(call_775203: Call_PostSetIdentityMailFromDomain_775187;
          Identity: string; MailFromDomain: string = "";
          Action: string = "SetIdentityMailFromDomain";
          BehaviorOnMXFailure: string = "UseDefaultValue";
          Version: string = "2010-12-01"): Recallable =
  ## postSetIdentityMailFromDomain
  ## <p>Enables or disables the custom MAIL FROM domain setup for a verified identity (an email address or a domain).</p> <important> <p>To send emails using the specified MAIL FROM domain, you must add an MX record to your MAIL FROM domain's DNS settings. If you want your emails to pass Sender Policy Framework (SPF) checks, you must also add or update an SPF record. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-set.html">Amazon SES Developer Guide</a>.</p> </important> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : The verified identity for which you want to enable or disable the specified custom MAIL FROM domain.
  ##   MailFromDomain: string
  ##                 : The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM domain must 1) be a subdomain of the verified identity, 2) not be used in a "From" address if the MAIL FROM domain is the destination of email feedback forwarding (for more information, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from.html">Amazon SES Developer Guide</a>), and 3) not be used to receive emails. A value of <code>null</code> disables the custom MAIL FROM setting for the identity.
  ##   Action: string (required)
  ##   BehaviorOnMXFailure: string
  ##                      : <p>The action that you want Amazon SES to take if it cannot successfully read the required MX record when you send an email. If you choose <code>UseDefaultValue</code>, Amazon SES will use amazonses.com (or a subdomain of that) as the MAIL FROM domain. If you choose <code>RejectMessage</code>, Amazon SES will return a <code>MailFromDomainNotVerified</code> error and not send the email.</p> <p>The action specified in <code>BehaviorOnMXFailure</code> is taken when the custom MAIL FROM domain setup is in the <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code> states.</p>
  ##   Version: string (required)
  var query_775204 = newJObject()
  var formData_775205 = newJObject()
  add(formData_775205, "Identity", newJString(Identity))
  add(formData_775205, "MailFromDomain", newJString(MailFromDomain))
  add(query_775204, "Action", newJString(Action))
  add(formData_775205, "BehaviorOnMXFailure", newJString(BehaviorOnMXFailure))
  add(query_775204, "Version", newJString(Version))
  result = call_775203.call(nil, query_775204, nil, formData_775205, nil)

var postSetIdentityMailFromDomain* = Call_PostSetIdentityMailFromDomain_775187(
    name: "postSetIdentityMailFromDomain", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SetIdentityMailFromDomain",
    validator: validate_PostSetIdentityMailFromDomain_775188, base: "/",
    url: url_PostSetIdentityMailFromDomain_775189,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetIdentityMailFromDomain_775169 = ref object of OpenApiRestCall_772597
proc url_GetSetIdentityMailFromDomain_775171(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSetIdentityMailFromDomain_775170(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables the custom MAIL FROM domain setup for a verified identity (an email address or a domain).</p> <important> <p>To send emails using the specified MAIL FROM domain, you must add an MX record to your MAIL FROM domain's DNS settings. If you want your emails to pass Sender Policy Framework (SPF) checks, you must also add or update an SPF record. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-set.html">Amazon SES Developer Guide</a>.</p> </important> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : The verified identity for which you want to enable or disable the specified custom MAIL FROM domain.
  ##   BehaviorOnMXFailure: JString
  ##                      : <p>The action that you want Amazon SES to take if it cannot successfully read the required MX record when you send an email. If you choose <code>UseDefaultValue</code>, Amazon SES will use amazonses.com (or a subdomain of that) as the MAIL FROM domain. If you choose <code>RejectMessage</code>, Amazon SES will return a <code>MailFromDomainNotVerified</code> error and not send the email.</p> <p>The action specified in <code>BehaviorOnMXFailure</code> is taken when the custom MAIL FROM domain setup is in the <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code> states.</p>
  ##   MailFromDomain: JString
  ##                 : The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM domain must 1) be a subdomain of the verified identity, 2) not be used in a "From" address if the MAIL FROM domain is the destination of email feedback forwarding (for more information, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from.html">Amazon SES Developer Guide</a>), and 3) not be used to receive emails. A value of <code>null</code> disables the custom MAIL FROM setting for the identity.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_775172 = query.getOrDefault("Identity")
  valid_775172 = validateParameter(valid_775172, JString, required = true,
                                 default = nil)
  if valid_775172 != nil:
    section.add "Identity", valid_775172
  var valid_775173 = query.getOrDefault("BehaviorOnMXFailure")
  valid_775173 = validateParameter(valid_775173, JString, required = false,
                                 default = newJString("UseDefaultValue"))
  if valid_775173 != nil:
    section.add "BehaviorOnMXFailure", valid_775173
  var valid_775174 = query.getOrDefault("MailFromDomain")
  valid_775174 = validateParameter(valid_775174, JString, required = false,
                                 default = nil)
  if valid_775174 != nil:
    section.add "MailFromDomain", valid_775174
  var valid_775175 = query.getOrDefault("Action")
  valid_775175 = validateParameter(valid_775175, JString, required = true, default = newJString(
      "SetIdentityMailFromDomain"))
  if valid_775175 != nil:
    section.add "Action", valid_775175
  var valid_775176 = query.getOrDefault("Version")
  valid_775176 = validateParameter(valid_775176, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_775176 != nil:
    section.add "Version", valid_775176
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775177 = header.getOrDefault("X-Amz-Date")
  valid_775177 = validateParameter(valid_775177, JString, required = false,
                                 default = nil)
  if valid_775177 != nil:
    section.add "X-Amz-Date", valid_775177
  var valid_775178 = header.getOrDefault("X-Amz-Security-Token")
  valid_775178 = validateParameter(valid_775178, JString, required = false,
                                 default = nil)
  if valid_775178 != nil:
    section.add "X-Amz-Security-Token", valid_775178
  var valid_775179 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775179 = validateParameter(valid_775179, JString, required = false,
                                 default = nil)
  if valid_775179 != nil:
    section.add "X-Amz-Content-Sha256", valid_775179
  var valid_775180 = header.getOrDefault("X-Amz-Algorithm")
  valid_775180 = validateParameter(valid_775180, JString, required = false,
                                 default = nil)
  if valid_775180 != nil:
    section.add "X-Amz-Algorithm", valid_775180
  var valid_775181 = header.getOrDefault("X-Amz-Signature")
  valid_775181 = validateParameter(valid_775181, JString, required = false,
                                 default = nil)
  if valid_775181 != nil:
    section.add "X-Amz-Signature", valid_775181
  var valid_775182 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775182 = validateParameter(valid_775182, JString, required = false,
                                 default = nil)
  if valid_775182 != nil:
    section.add "X-Amz-SignedHeaders", valid_775182
  var valid_775183 = header.getOrDefault("X-Amz-Credential")
  valid_775183 = validateParameter(valid_775183, JString, required = false,
                                 default = nil)
  if valid_775183 != nil:
    section.add "X-Amz-Credential", valid_775183
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775184: Call_GetSetIdentityMailFromDomain_775169; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Enables or disables the custom MAIL FROM domain setup for a verified identity (an email address or a domain).</p> <important> <p>To send emails using the specified MAIL FROM domain, you must add an MX record to your MAIL FROM domain's DNS settings. If you want your emails to pass Sender Policy Framework (SPF) checks, you must also add or update an SPF record. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-set.html">Amazon SES Developer Guide</a>.</p> </important> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_775184.validator(path, query, header, formData, body)
  let scheme = call_775184.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775184.url(scheme.get, call_775184.host, call_775184.base,
                         call_775184.route, valid.getOrDefault("path"))
  result = hook(call_775184, url, valid)

proc call*(call_775185: Call_GetSetIdentityMailFromDomain_775169; Identity: string;
          BehaviorOnMXFailure: string = "UseDefaultValue";
          MailFromDomain: string = ""; Action: string = "SetIdentityMailFromDomain";
          Version: string = "2010-12-01"): Recallable =
  ## getSetIdentityMailFromDomain
  ## <p>Enables or disables the custom MAIL FROM domain setup for a verified identity (an email address or a domain).</p> <important> <p>To send emails using the specified MAIL FROM domain, you must add an MX record to your MAIL FROM domain's DNS settings. If you want your emails to pass Sender Policy Framework (SPF) checks, you must also add or update an SPF record. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-set.html">Amazon SES Developer Guide</a>.</p> </important> <p>You can execute this operation no more than once per second.</p>
  ##   Identity: string (required)
  ##           : The verified identity for which you want to enable or disable the specified custom MAIL FROM domain.
  ##   BehaviorOnMXFailure: string
  ##                      : <p>The action that you want Amazon SES to take if it cannot successfully read the required MX record when you send an email. If you choose <code>UseDefaultValue</code>, Amazon SES will use amazonses.com (or a subdomain of that) as the MAIL FROM domain. If you choose <code>RejectMessage</code>, Amazon SES will return a <code>MailFromDomainNotVerified</code> error and not send the email.</p> <p>The action specified in <code>BehaviorOnMXFailure</code> is taken when the custom MAIL FROM domain setup is in the <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code> states.</p>
  ##   MailFromDomain: string
  ##                 : The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM domain must 1) be a subdomain of the verified identity, 2) not be used in a "From" address if the MAIL FROM domain is the destination of email feedback forwarding (for more information, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from.html">Amazon SES Developer Guide</a>), and 3) not be used to receive emails. A value of <code>null</code> disables the custom MAIL FROM setting for the identity.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775186 = newJObject()
  add(query_775186, "Identity", newJString(Identity))
  add(query_775186, "BehaviorOnMXFailure", newJString(BehaviorOnMXFailure))
  add(query_775186, "MailFromDomain", newJString(MailFromDomain))
  add(query_775186, "Action", newJString(Action))
  add(query_775186, "Version", newJString(Version))
  result = call_775185.call(nil, query_775186, nil, nil, nil)

var getSetIdentityMailFromDomain* = Call_GetSetIdentityMailFromDomain_775169(
    name: "getSetIdentityMailFromDomain", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SetIdentityMailFromDomain",
    validator: validate_GetSetIdentityMailFromDomain_775170, base: "/",
    url: url_GetSetIdentityMailFromDomain_775171,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetIdentityNotificationTopic_775224 = ref object of OpenApiRestCall_772597
proc url_PostSetIdentityNotificationTopic_775226(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSetIdentityNotificationTopic_775225(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use this operation, you specify a verified identity, such as an email address or domain. When you send an email that uses the chosen identity in the Source field, Amazon SES sends notifications to the topic you specified. You can send bounce, complaint, or delivery notifications (or any combination of the three) to the Amazon SNS topic that you specify.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about feedback notification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775227 = query.getOrDefault("Action")
  valid_775227 = validateParameter(valid_775227, JString, required = true, default = newJString(
      "SetIdentityNotificationTopic"))
  if valid_775227 != nil:
    section.add "Action", valid_775227
  var valid_775228 = query.getOrDefault("Version")
  valid_775228 = validateParameter(valid_775228, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_775228 != nil:
    section.add "Version", valid_775228
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775229 = header.getOrDefault("X-Amz-Date")
  valid_775229 = validateParameter(valid_775229, JString, required = false,
                                 default = nil)
  if valid_775229 != nil:
    section.add "X-Amz-Date", valid_775229
  var valid_775230 = header.getOrDefault("X-Amz-Security-Token")
  valid_775230 = validateParameter(valid_775230, JString, required = false,
                                 default = nil)
  if valid_775230 != nil:
    section.add "X-Amz-Security-Token", valid_775230
  var valid_775231 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775231 = validateParameter(valid_775231, JString, required = false,
                                 default = nil)
  if valid_775231 != nil:
    section.add "X-Amz-Content-Sha256", valid_775231
  var valid_775232 = header.getOrDefault("X-Amz-Algorithm")
  valid_775232 = validateParameter(valid_775232, JString, required = false,
                                 default = nil)
  if valid_775232 != nil:
    section.add "X-Amz-Algorithm", valid_775232
  var valid_775233 = header.getOrDefault("X-Amz-Signature")
  valid_775233 = validateParameter(valid_775233, JString, required = false,
                                 default = nil)
  if valid_775233 != nil:
    section.add "X-Amz-Signature", valid_775233
  var valid_775234 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775234 = validateParameter(valid_775234, JString, required = false,
                                 default = nil)
  if valid_775234 != nil:
    section.add "X-Amz-SignedHeaders", valid_775234
  var valid_775235 = header.getOrDefault("X-Amz-Credential")
  valid_775235 = validateParameter(valid_775235, JString, required = false,
                                 default = nil)
  if valid_775235 != nil:
    section.add "X-Amz-Credential", valid_775235
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identity: JString (required)
  ##           : <p>The identity (email address or domain) that you want to set the Amazon SNS topic for.</p> <important> <p>You can only specify a verified identity for this parameter.</p> </important> <p>You can specify an identity by using its name or by using its Amazon Resource Name (ARN). The following examples are all valid identities: <code>sender@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p>
  ##   SnsTopic: JString
  ##           : The Amazon Resource Name (ARN) of the Amazon SNS topic. If the parameter is omitted from the request or a null value is passed, <code>SnsTopic</code> is cleared and publishing is disabled.
  ##   NotificationType: JString (required)
  ##                   : The type of notifications that will be published to the specified Amazon SNS topic.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identity` field"
  var valid_775236 = formData.getOrDefault("Identity")
  valid_775236 = validateParameter(valid_775236, JString, required = true,
                                 default = nil)
  if valid_775236 != nil:
    section.add "Identity", valid_775236
  var valid_775237 = formData.getOrDefault("SnsTopic")
  valid_775237 = validateParameter(valid_775237, JString, required = false,
                                 default = nil)
  if valid_775237 != nil:
    section.add "SnsTopic", valid_775237
  var valid_775238 = formData.getOrDefault("NotificationType")
  valid_775238 = validateParameter(valid_775238, JString, required = true,
                                 default = newJString("Bounce"))
  if valid_775238 != nil:
    section.add "NotificationType", valid_775238
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775239: Call_PostSetIdentityNotificationTopic_775224;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use this operation, you specify a verified identity, such as an email address or domain. When you send an email that uses the chosen identity in the Source field, Amazon SES sends notifications to the topic you specified. You can send bounce, complaint, or delivery notifications (or any combination of the three) to the Amazon SNS topic that you specify.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about feedback notification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_775239.validator(path, query, header, formData, body)
  let scheme = call_775239.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775239.url(scheme.get, call_775239.host, call_775239.base,
                         call_775239.route, valid.getOrDefault("path"))
  result = hook(call_775239, url, valid)

proc call*(call_775240: Call_PostSetIdentityNotificationTopic_775224;
          Identity: string; SnsTopic: string = "";
          Action: string = "SetIdentityNotificationTopic";
          NotificationType: string = "Bounce"; Version: string = "2010-12-01"): Recallable =
  ## postSetIdentityNotificationTopic
  ## <p>Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use this operation, you specify a verified identity, such as an email address or domain. When you send an email that uses the chosen identity in the Source field, Amazon SES sends notifications to the topic you specified. You can send bounce, complaint, or delivery notifications (or any combination of the three) to the Amazon SNS topic that you specify.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about feedback notification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Identity: string (required)
  ##           : <p>The identity (email address or domain) that you want to set the Amazon SNS topic for.</p> <important> <p>You can only specify a verified identity for this parameter.</p> </important> <p>You can specify an identity by using its name or by using its Amazon Resource Name (ARN). The following examples are all valid identities: <code>sender@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p>
  ##   SnsTopic: string
  ##           : The Amazon Resource Name (ARN) of the Amazon SNS topic. If the parameter is omitted from the request or a null value is passed, <code>SnsTopic</code> is cleared and publishing is disabled.
  ##   Action: string (required)
  ##   NotificationType: string (required)
  ##                   : The type of notifications that will be published to the specified Amazon SNS topic.
  ##   Version: string (required)
  var query_775241 = newJObject()
  var formData_775242 = newJObject()
  add(formData_775242, "Identity", newJString(Identity))
  add(formData_775242, "SnsTopic", newJString(SnsTopic))
  add(query_775241, "Action", newJString(Action))
  add(formData_775242, "NotificationType", newJString(NotificationType))
  add(query_775241, "Version", newJString(Version))
  result = call_775240.call(nil, query_775241, nil, formData_775242, nil)

var postSetIdentityNotificationTopic* = Call_PostSetIdentityNotificationTopic_775224(
    name: "postSetIdentityNotificationTopic", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SetIdentityNotificationTopic",
    validator: validate_PostSetIdentityNotificationTopic_775225, base: "/",
    url: url_PostSetIdentityNotificationTopic_775226,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetIdentityNotificationTopic_775206 = ref object of OpenApiRestCall_772597
proc url_GetSetIdentityNotificationTopic_775208(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSetIdentityNotificationTopic_775207(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use this operation, you specify a verified identity, such as an email address or domain. When you send an email that uses the chosen identity in the Source field, Amazon SES sends notifications to the topic you specified. You can send bounce, complaint, or delivery notifications (or any combination of the three) to the Amazon SNS topic that you specify.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about feedback notification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Identity: JString (required)
  ##           : <p>The identity (email address or domain) that you want to set the Amazon SNS topic for.</p> <important> <p>You can only specify a verified identity for this parameter.</p> </important> <p>You can specify an identity by using its name or by using its Amazon Resource Name (ARN). The following examples are all valid identities: <code>sender@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p>
  ##   Action: JString (required)
  ##   NotificationType: JString (required)
  ##                   : The type of notifications that will be published to the specified Amazon SNS topic.
  ##   Version: JString (required)
  ##   SnsTopic: JString
  ##           : The Amazon Resource Name (ARN) of the Amazon SNS topic. If the parameter is omitted from the request or a null value is passed, <code>SnsTopic</code> is cleared and publishing is disabled.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Identity` field"
  var valid_775209 = query.getOrDefault("Identity")
  valid_775209 = validateParameter(valid_775209, JString, required = true,
                                 default = nil)
  if valid_775209 != nil:
    section.add "Identity", valid_775209
  var valid_775210 = query.getOrDefault("Action")
  valid_775210 = validateParameter(valid_775210, JString, required = true, default = newJString(
      "SetIdentityNotificationTopic"))
  if valid_775210 != nil:
    section.add "Action", valid_775210
  var valid_775211 = query.getOrDefault("NotificationType")
  valid_775211 = validateParameter(valid_775211, JString, required = true,
                                 default = newJString("Bounce"))
  if valid_775211 != nil:
    section.add "NotificationType", valid_775211
  var valid_775212 = query.getOrDefault("Version")
  valid_775212 = validateParameter(valid_775212, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_775212 != nil:
    section.add "Version", valid_775212
  var valid_775213 = query.getOrDefault("SnsTopic")
  valid_775213 = validateParameter(valid_775213, JString, required = false,
                                 default = nil)
  if valid_775213 != nil:
    section.add "SnsTopic", valid_775213
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775214 = header.getOrDefault("X-Amz-Date")
  valid_775214 = validateParameter(valid_775214, JString, required = false,
                                 default = nil)
  if valid_775214 != nil:
    section.add "X-Amz-Date", valid_775214
  var valid_775215 = header.getOrDefault("X-Amz-Security-Token")
  valid_775215 = validateParameter(valid_775215, JString, required = false,
                                 default = nil)
  if valid_775215 != nil:
    section.add "X-Amz-Security-Token", valid_775215
  var valid_775216 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775216 = validateParameter(valid_775216, JString, required = false,
                                 default = nil)
  if valid_775216 != nil:
    section.add "X-Amz-Content-Sha256", valid_775216
  var valid_775217 = header.getOrDefault("X-Amz-Algorithm")
  valid_775217 = validateParameter(valid_775217, JString, required = false,
                                 default = nil)
  if valid_775217 != nil:
    section.add "X-Amz-Algorithm", valid_775217
  var valid_775218 = header.getOrDefault("X-Amz-Signature")
  valid_775218 = validateParameter(valid_775218, JString, required = false,
                                 default = nil)
  if valid_775218 != nil:
    section.add "X-Amz-Signature", valid_775218
  var valid_775219 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775219 = validateParameter(valid_775219, JString, required = false,
                                 default = nil)
  if valid_775219 != nil:
    section.add "X-Amz-SignedHeaders", valid_775219
  var valid_775220 = header.getOrDefault("X-Amz-Credential")
  valid_775220 = validateParameter(valid_775220, JString, required = false,
                                 default = nil)
  if valid_775220 != nil:
    section.add "X-Amz-Credential", valid_775220
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775221: Call_GetSetIdentityNotificationTopic_775206;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use this operation, you specify a verified identity, such as an email address or domain. When you send an email that uses the chosen identity in the Source field, Amazon SES sends notifications to the topic you specified. You can send bounce, complaint, or delivery notifications (or any combination of the three) to the Amazon SNS topic that you specify.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about feedback notification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_775221.validator(path, query, header, formData, body)
  let scheme = call_775221.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775221.url(scheme.get, call_775221.host, call_775221.base,
                         call_775221.route, valid.getOrDefault("path"))
  result = hook(call_775221, url, valid)

proc call*(call_775222: Call_GetSetIdentityNotificationTopic_775206;
          Identity: string; Action: string = "SetIdentityNotificationTopic";
          NotificationType: string = "Bounce"; Version: string = "2010-12-01";
          SnsTopic: string = ""): Recallable =
  ## getSetIdentityNotificationTopic
  ## <p>Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use this operation, you specify a verified identity, such as an email address or domain. When you send an email that uses the chosen identity in the Source field, Amazon SES sends notifications to the topic you specified. You can send bounce, complaint, or delivery notifications (or any combination of the three) to the Amazon SNS topic that you specify.</p> <p>You can execute this operation no more than once per second.</p> <p>For more information about feedback notification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
  ##   Identity: string (required)
  ##           : <p>The identity (email address or domain) that you want to set the Amazon SNS topic for.</p> <important> <p>You can only specify a verified identity for this parameter.</p> </important> <p>You can specify an identity by using its name or by using its Amazon Resource Name (ARN). The following examples are all valid identities: <code>sender@example.com</code>, <code>example.com</code>, <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p>
  ##   Action: string (required)
  ##   NotificationType: string (required)
  ##                   : The type of notifications that will be published to the specified Amazon SNS topic.
  ##   Version: string (required)
  ##   SnsTopic: string
  ##           : The Amazon Resource Name (ARN) of the Amazon SNS topic. If the parameter is omitted from the request or a null value is passed, <code>SnsTopic</code> is cleared and publishing is disabled.
  var query_775223 = newJObject()
  add(query_775223, "Identity", newJString(Identity))
  add(query_775223, "Action", newJString(Action))
  add(query_775223, "NotificationType", newJString(NotificationType))
  add(query_775223, "Version", newJString(Version))
  add(query_775223, "SnsTopic", newJString(SnsTopic))
  result = call_775222.call(nil, query_775223, nil, nil, nil)

var getSetIdentityNotificationTopic* = Call_GetSetIdentityNotificationTopic_775206(
    name: "getSetIdentityNotificationTopic", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SetIdentityNotificationTopic",
    validator: validate_GetSetIdentityNotificationTopic_775207, base: "/",
    url: url_GetSetIdentityNotificationTopic_775208,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetReceiptRulePosition_775261 = ref object of OpenApiRestCall_772597
proc url_PostSetReceiptRulePosition_775263(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSetReceiptRulePosition_775262(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the position of the specified receipt rule in the receipt rule set.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775264 = query.getOrDefault("Action")
  valid_775264 = validateParameter(valid_775264, JString, required = true,
                                 default = newJString("SetReceiptRulePosition"))
  if valid_775264 != nil:
    section.add "Action", valid_775264
  var valid_775265 = query.getOrDefault("Version")
  valid_775265 = validateParameter(valid_775265, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_775265 != nil:
    section.add "Version", valid_775265
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775266 = header.getOrDefault("X-Amz-Date")
  valid_775266 = validateParameter(valid_775266, JString, required = false,
                                 default = nil)
  if valid_775266 != nil:
    section.add "X-Amz-Date", valid_775266
  var valid_775267 = header.getOrDefault("X-Amz-Security-Token")
  valid_775267 = validateParameter(valid_775267, JString, required = false,
                                 default = nil)
  if valid_775267 != nil:
    section.add "X-Amz-Security-Token", valid_775267
  var valid_775268 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775268 = validateParameter(valid_775268, JString, required = false,
                                 default = nil)
  if valid_775268 != nil:
    section.add "X-Amz-Content-Sha256", valid_775268
  var valid_775269 = header.getOrDefault("X-Amz-Algorithm")
  valid_775269 = validateParameter(valid_775269, JString, required = false,
                                 default = nil)
  if valid_775269 != nil:
    section.add "X-Amz-Algorithm", valid_775269
  var valid_775270 = header.getOrDefault("X-Amz-Signature")
  valid_775270 = validateParameter(valid_775270, JString, required = false,
                                 default = nil)
  if valid_775270 != nil:
    section.add "X-Amz-Signature", valid_775270
  var valid_775271 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775271 = validateParameter(valid_775271, JString, required = false,
                                 default = nil)
  if valid_775271 != nil:
    section.add "X-Amz-SignedHeaders", valid_775271
  var valid_775272 = header.getOrDefault("X-Amz-Credential")
  valid_775272 = validateParameter(valid_775272, JString, required = false,
                                 default = nil)
  if valid_775272 != nil:
    section.add "X-Amz-Credential", valid_775272
  result.add "header", section
  ## parameters in `formData` object:
  ##   After: JString
  ##        : The name of the receipt rule after which to place the specified receipt rule.
  ##   RuleName: JString (required)
  ##           : The name of the receipt rule to reposition.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that contains the receipt rule to reposition.
  section = newJObject()
  var valid_775273 = formData.getOrDefault("After")
  valid_775273 = validateParameter(valid_775273, JString, required = false,
                                 default = nil)
  if valid_775273 != nil:
    section.add "After", valid_775273
  assert formData != nil,
        "formData argument is necessary due to required `RuleName` field"
  var valid_775274 = formData.getOrDefault("RuleName")
  valid_775274 = validateParameter(valid_775274, JString, required = true,
                                 default = nil)
  if valid_775274 != nil:
    section.add "RuleName", valid_775274
  var valid_775275 = formData.getOrDefault("RuleSetName")
  valid_775275 = validateParameter(valid_775275, JString, required = true,
                                 default = nil)
  if valid_775275 != nil:
    section.add "RuleSetName", valid_775275
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775276: Call_PostSetReceiptRulePosition_775261; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the position of the specified receipt rule in the receipt rule set.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_775276.validator(path, query, header, formData, body)
  let scheme = call_775276.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775276.url(scheme.get, call_775276.host, call_775276.base,
                         call_775276.route, valid.getOrDefault("path"))
  result = hook(call_775276, url, valid)

proc call*(call_775277: Call_PostSetReceiptRulePosition_775261; RuleName: string;
          RuleSetName: string; After: string = "";
          Action: string = "SetReceiptRulePosition"; Version: string = "2010-12-01"): Recallable =
  ## postSetReceiptRulePosition
  ## <p>Sets the position of the specified receipt rule in the receipt rule set.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   After: string
  ##        : The name of the receipt rule after which to place the specified receipt rule.
  ##   RuleName: string (required)
  ##           : The name of the receipt rule to reposition.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that contains the receipt rule to reposition.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775278 = newJObject()
  var formData_775279 = newJObject()
  add(formData_775279, "After", newJString(After))
  add(formData_775279, "RuleName", newJString(RuleName))
  add(formData_775279, "RuleSetName", newJString(RuleSetName))
  add(query_775278, "Action", newJString(Action))
  add(query_775278, "Version", newJString(Version))
  result = call_775277.call(nil, query_775278, nil, formData_775279, nil)

var postSetReceiptRulePosition* = Call_PostSetReceiptRulePosition_775261(
    name: "postSetReceiptRulePosition", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=SetReceiptRulePosition",
    validator: validate_PostSetReceiptRulePosition_775262, base: "/",
    url: url_PostSetReceiptRulePosition_775263,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetReceiptRulePosition_775243 = ref object of OpenApiRestCall_772597
proc url_GetSetReceiptRulePosition_775245(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSetReceiptRulePosition_775244(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the position of the specified receipt rule in the receipt rule set.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RuleName: JString (required)
  ##           : The name of the receipt rule to reposition.
  ##   After: JString
  ##        : The name of the receipt rule after which to place the specified receipt rule.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that contains the receipt rule to reposition.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RuleName` field"
  var valid_775246 = query.getOrDefault("RuleName")
  valid_775246 = validateParameter(valid_775246, JString, required = true,
                                 default = nil)
  if valid_775246 != nil:
    section.add "RuleName", valid_775246
  var valid_775247 = query.getOrDefault("After")
  valid_775247 = validateParameter(valid_775247, JString, required = false,
                                 default = nil)
  if valid_775247 != nil:
    section.add "After", valid_775247
  var valid_775248 = query.getOrDefault("RuleSetName")
  valid_775248 = validateParameter(valid_775248, JString, required = true,
                                 default = nil)
  if valid_775248 != nil:
    section.add "RuleSetName", valid_775248
  var valid_775249 = query.getOrDefault("Action")
  valid_775249 = validateParameter(valid_775249, JString, required = true,
                                 default = newJString("SetReceiptRulePosition"))
  if valid_775249 != nil:
    section.add "Action", valid_775249
  var valid_775250 = query.getOrDefault("Version")
  valid_775250 = validateParameter(valid_775250, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_775250 != nil:
    section.add "Version", valid_775250
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775251 = header.getOrDefault("X-Amz-Date")
  valid_775251 = validateParameter(valid_775251, JString, required = false,
                                 default = nil)
  if valid_775251 != nil:
    section.add "X-Amz-Date", valid_775251
  var valid_775252 = header.getOrDefault("X-Amz-Security-Token")
  valid_775252 = validateParameter(valid_775252, JString, required = false,
                                 default = nil)
  if valid_775252 != nil:
    section.add "X-Amz-Security-Token", valid_775252
  var valid_775253 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775253 = validateParameter(valid_775253, JString, required = false,
                                 default = nil)
  if valid_775253 != nil:
    section.add "X-Amz-Content-Sha256", valid_775253
  var valid_775254 = header.getOrDefault("X-Amz-Algorithm")
  valid_775254 = validateParameter(valid_775254, JString, required = false,
                                 default = nil)
  if valid_775254 != nil:
    section.add "X-Amz-Algorithm", valid_775254
  var valid_775255 = header.getOrDefault("X-Amz-Signature")
  valid_775255 = validateParameter(valid_775255, JString, required = false,
                                 default = nil)
  if valid_775255 != nil:
    section.add "X-Amz-Signature", valid_775255
  var valid_775256 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775256 = validateParameter(valid_775256, JString, required = false,
                                 default = nil)
  if valid_775256 != nil:
    section.add "X-Amz-SignedHeaders", valid_775256
  var valid_775257 = header.getOrDefault("X-Amz-Credential")
  valid_775257 = validateParameter(valid_775257, JString, required = false,
                                 default = nil)
  if valid_775257 != nil:
    section.add "X-Amz-Credential", valid_775257
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775258: Call_GetSetReceiptRulePosition_775243; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the position of the specified receipt rule in the receipt rule set.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_775258.validator(path, query, header, formData, body)
  let scheme = call_775258.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775258.url(scheme.get, call_775258.host, call_775258.base,
                         call_775258.route, valid.getOrDefault("path"))
  result = hook(call_775258, url, valid)

proc call*(call_775259: Call_GetSetReceiptRulePosition_775243; RuleName: string;
          RuleSetName: string; After: string = "";
          Action: string = "SetReceiptRulePosition"; Version: string = "2010-12-01"): Recallable =
  ## getSetReceiptRulePosition
  ## <p>Sets the position of the specified receipt rule in the receipt rule set.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleName: string (required)
  ##           : The name of the receipt rule to reposition.
  ##   After: string
  ##        : The name of the receipt rule after which to place the specified receipt rule.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that contains the receipt rule to reposition.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775260 = newJObject()
  add(query_775260, "RuleName", newJString(RuleName))
  add(query_775260, "After", newJString(After))
  add(query_775260, "RuleSetName", newJString(RuleSetName))
  add(query_775260, "Action", newJString(Action))
  add(query_775260, "Version", newJString(Version))
  result = call_775259.call(nil, query_775260, nil, nil, nil)

var getSetReceiptRulePosition* = Call_GetSetReceiptRulePosition_775243(
    name: "getSetReceiptRulePosition", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=SetReceiptRulePosition",
    validator: validate_GetSetReceiptRulePosition_775244, base: "/",
    url: url_GetSetReceiptRulePosition_775245,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostTestRenderTemplate_775297 = ref object of OpenApiRestCall_772597
proc url_PostTestRenderTemplate_775299(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostTestRenderTemplate_775298(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a preview of the MIME content of an email when provided with a template and a set of replacement data.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775300 = query.getOrDefault("Action")
  valid_775300 = validateParameter(valid_775300, JString, required = true,
                                 default = newJString("TestRenderTemplate"))
  if valid_775300 != nil:
    section.add "Action", valid_775300
  var valid_775301 = query.getOrDefault("Version")
  valid_775301 = validateParameter(valid_775301, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_775301 != nil:
    section.add "Version", valid_775301
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775302 = header.getOrDefault("X-Amz-Date")
  valid_775302 = validateParameter(valid_775302, JString, required = false,
                                 default = nil)
  if valid_775302 != nil:
    section.add "X-Amz-Date", valid_775302
  var valid_775303 = header.getOrDefault("X-Amz-Security-Token")
  valid_775303 = validateParameter(valid_775303, JString, required = false,
                                 default = nil)
  if valid_775303 != nil:
    section.add "X-Amz-Security-Token", valid_775303
  var valid_775304 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775304 = validateParameter(valid_775304, JString, required = false,
                                 default = nil)
  if valid_775304 != nil:
    section.add "X-Amz-Content-Sha256", valid_775304
  var valid_775305 = header.getOrDefault("X-Amz-Algorithm")
  valid_775305 = validateParameter(valid_775305, JString, required = false,
                                 default = nil)
  if valid_775305 != nil:
    section.add "X-Amz-Algorithm", valid_775305
  var valid_775306 = header.getOrDefault("X-Amz-Signature")
  valid_775306 = validateParameter(valid_775306, JString, required = false,
                                 default = nil)
  if valid_775306 != nil:
    section.add "X-Amz-Signature", valid_775306
  var valid_775307 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775307 = validateParameter(valid_775307, JString, required = false,
                                 default = nil)
  if valid_775307 != nil:
    section.add "X-Amz-SignedHeaders", valid_775307
  var valid_775308 = header.getOrDefault("X-Amz-Credential")
  valid_775308 = validateParameter(valid_775308, JString, required = false,
                                 default = nil)
  if valid_775308 != nil:
    section.add "X-Amz-Credential", valid_775308
  result.add "header", section
  ## parameters in `formData` object:
  ##   TemplateData: JString (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   TemplateName: JString (required)
  ##               : The name of the template that you want to render.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TemplateData` field"
  var valid_775309 = formData.getOrDefault("TemplateData")
  valid_775309 = validateParameter(valid_775309, JString, required = true,
                                 default = nil)
  if valid_775309 != nil:
    section.add "TemplateData", valid_775309
  var valid_775310 = formData.getOrDefault("TemplateName")
  valid_775310 = validateParameter(valid_775310, JString, required = true,
                                 default = nil)
  if valid_775310 != nil:
    section.add "TemplateName", valid_775310
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775311: Call_PostTestRenderTemplate_775297; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a preview of the MIME content of an email when provided with a template and a set of replacement data.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_775311.validator(path, query, header, formData, body)
  let scheme = call_775311.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775311.url(scheme.get, call_775311.host, call_775311.base,
                         call_775311.route, valid.getOrDefault("path"))
  result = hook(call_775311, url, valid)

proc call*(call_775312: Call_PostTestRenderTemplate_775297; TemplateData: string;
          TemplateName: string; Action: string = "TestRenderTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## postTestRenderTemplate
  ## <p>Creates a preview of the MIME content of an email when provided with a template and a set of replacement data.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateData: string (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the template that you want to render.
  ##   Version: string (required)
  var query_775313 = newJObject()
  var formData_775314 = newJObject()
  add(formData_775314, "TemplateData", newJString(TemplateData))
  add(query_775313, "Action", newJString(Action))
  add(formData_775314, "TemplateName", newJString(TemplateName))
  add(query_775313, "Version", newJString(Version))
  result = call_775312.call(nil, query_775313, nil, formData_775314, nil)

var postTestRenderTemplate* = Call_PostTestRenderTemplate_775297(
    name: "postTestRenderTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=TestRenderTemplate",
    validator: validate_PostTestRenderTemplate_775298, base: "/",
    url: url_PostTestRenderTemplate_775299, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTestRenderTemplate_775280 = ref object of OpenApiRestCall_772597
proc url_GetTestRenderTemplate_775282(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetTestRenderTemplate_775281(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a preview of the MIME content of an email when provided with a template and a set of replacement data.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TemplateData: JString (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   Action: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the template that you want to render.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `TemplateData` field"
  var valid_775283 = query.getOrDefault("TemplateData")
  valid_775283 = validateParameter(valid_775283, JString, required = true,
                                 default = nil)
  if valid_775283 != nil:
    section.add "TemplateData", valid_775283
  var valid_775284 = query.getOrDefault("Action")
  valid_775284 = validateParameter(valid_775284, JString, required = true,
                                 default = newJString("TestRenderTemplate"))
  if valid_775284 != nil:
    section.add "Action", valid_775284
  var valid_775285 = query.getOrDefault("TemplateName")
  valid_775285 = validateParameter(valid_775285, JString, required = true,
                                 default = nil)
  if valid_775285 != nil:
    section.add "TemplateName", valid_775285
  var valid_775286 = query.getOrDefault("Version")
  valid_775286 = validateParameter(valid_775286, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_775286 != nil:
    section.add "Version", valid_775286
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775287 = header.getOrDefault("X-Amz-Date")
  valid_775287 = validateParameter(valid_775287, JString, required = false,
                                 default = nil)
  if valid_775287 != nil:
    section.add "X-Amz-Date", valid_775287
  var valid_775288 = header.getOrDefault("X-Amz-Security-Token")
  valid_775288 = validateParameter(valid_775288, JString, required = false,
                                 default = nil)
  if valid_775288 != nil:
    section.add "X-Amz-Security-Token", valid_775288
  var valid_775289 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775289 = validateParameter(valid_775289, JString, required = false,
                                 default = nil)
  if valid_775289 != nil:
    section.add "X-Amz-Content-Sha256", valid_775289
  var valid_775290 = header.getOrDefault("X-Amz-Algorithm")
  valid_775290 = validateParameter(valid_775290, JString, required = false,
                                 default = nil)
  if valid_775290 != nil:
    section.add "X-Amz-Algorithm", valid_775290
  var valid_775291 = header.getOrDefault("X-Amz-Signature")
  valid_775291 = validateParameter(valid_775291, JString, required = false,
                                 default = nil)
  if valid_775291 != nil:
    section.add "X-Amz-Signature", valid_775291
  var valid_775292 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775292 = validateParameter(valid_775292, JString, required = false,
                                 default = nil)
  if valid_775292 != nil:
    section.add "X-Amz-SignedHeaders", valid_775292
  var valid_775293 = header.getOrDefault("X-Amz-Credential")
  valid_775293 = validateParameter(valid_775293, JString, required = false,
                                 default = nil)
  if valid_775293 != nil:
    section.add "X-Amz-Credential", valid_775293
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775294: Call_GetTestRenderTemplate_775280; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a preview of the MIME content of an email when provided with a template and a set of replacement data.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_775294.validator(path, query, header, formData, body)
  let scheme = call_775294.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775294.url(scheme.get, call_775294.host, call_775294.base,
                         call_775294.route, valid.getOrDefault("path"))
  result = hook(call_775294, url, valid)

proc call*(call_775295: Call_GetTestRenderTemplate_775280; TemplateData: string;
          TemplateName: string; Action: string = "TestRenderTemplate";
          Version: string = "2010-12-01"): Recallable =
  ## getTestRenderTemplate
  ## <p>Creates a preview of the MIME content of an email when provided with a template and a set of replacement data.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateData: string (required)
  ##               : A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the template that you want to render.
  ##   Version: string (required)
  var query_775296 = newJObject()
  add(query_775296, "TemplateData", newJString(TemplateData))
  add(query_775296, "Action", newJString(Action))
  add(query_775296, "TemplateName", newJString(TemplateName))
  add(query_775296, "Version", newJString(Version))
  result = call_775295.call(nil, query_775296, nil, nil, nil)

var getTestRenderTemplate* = Call_GetTestRenderTemplate_775280(
    name: "getTestRenderTemplate", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=TestRenderTemplate",
    validator: validate_GetTestRenderTemplate_775281, base: "/",
    url: url_GetTestRenderTemplate_775282, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateAccountSendingEnabled_775331 = ref object of OpenApiRestCall_772597
proc url_PostUpdateAccountSendingEnabled_775333(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateAccountSendingEnabled_775332(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables email sending across your entire Amazon SES account in the current AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending across your Amazon SES account in a given AWS Region when reputation metrics (such as your bounce or complaint rates) reach certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775334 = query.getOrDefault("Action")
  valid_775334 = validateParameter(valid_775334, JString, required = true, default = newJString(
      "UpdateAccountSendingEnabled"))
  if valid_775334 != nil:
    section.add "Action", valid_775334
  var valid_775335 = query.getOrDefault("Version")
  valid_775335 = validateParameter(valid_775335, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_775335 != nil:
    section.add "Version", valid_775335
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775336 = header.getOrDefault("X-Amz-Date")
  valid_775336 = validateParameter(valid_775336, JString, required = false,
                                 default = nil)
  if valid_775336 != nil:
    section.add "X-Amz-Date", valid_775336
  var valid_775337 = header.getOrDefault("X-Amz-Security-Token")
  valid_775337 = validateParameter(valid_775337, JString, required = false,
                                 default = nil)
  if valid_775337 != nil:
    section.add "X-Amz-Security-Token", valid_775337
  var valid_775338 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775338 = validateParameter(valid_775338, JString, required = false,
                                 default = nil)
  if valid_775338 != nil:
    section.add "X-Amz-Content-Sha256", valid_775338
  var valid_775339 = header.getOrDefault("X-Amz-Algorithm")
  valid_775339 = validateParameter(valid_775339, JString, required = false,
                                 default = nil)
  if valid_775339 != nil:
    section.add "X-Amz-Algorithm", valid_775339
  var valid_775340 = header.getOrDefault("X-Amz-Signature")
  valid_775340 = validateParameter(valid_775340, JString, required = false,
                                 default = nil)
  if valid_775340 != nil:
    section.add "X-Amz-Signature", valid_775340
  var valid_775341 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775341 = validateParameter(valid_775341, JString, required = false,
                                 default = nil)
  if valid_775341 != nil:
    section.add "X-Amz-SignedHeaders", valid_775341
  var valid_775342 = header.getOrDefault("X-Amz-Credential")
  valid_775342 = validateParameter(valid_775342, JString, required = false,
                                 default = nil)
  if valid_775342 != nil:
    section.add "X-Amz-Credential", valid_775342
  result.add "header", section
  ## parameters in `formData` object:
  ##   Enabled: JBool
  ##          : Describes whether email sending is enabled or disabled for your Amazon SES account in the current AWS Region.
  section = newJObject()
  var valid_775343 = formData.getOrDefault("Enabled")
  valid_775343 = validateParameter(valid_775343, JBool, required = false, default = nil)
  if valid_775343 != nil:
    section.add "Enabled", valid_775343
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775344: Call_PostUpdateAccountSendingEnabled_775331;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables or disables email sending across your entire Amazon SES account in the current AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending across your Amazon SES account in a given AWS Region when reputation metrics (such as your bounce or complaint rates) reach certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_775344.validator(path, query, header, formData, body)
  let scheme = call_775344.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775344.url(scheme.get, call_775344.host, call_775344.base,
                         call_775344.route, valid.getOrDefault("path"))
  result = hook(call_775344, url, valid)

proc call*(call_775345: Call_PostUpdateAccountSendingEnabled_775331;
          Enabled: bool = false; Action: string = "UpdateAccountSendingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## postUpdateAccountSendingEnabled
  ## <p>Enables or disables email sending across your entire Amazon SES account in the current AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending across your Amazon SES account in a given AWS Region when reputation metrics (such as your bounce or complaint rates) reach certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Enabled: bool
  ##          : Describes whether email sending is enabled or disabled for your Amazon SES account in the current AWS Region.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775346 = newJObject()
  var formData_775347 = newJObject()
  add(formData_775347, "Enabled", newJBool(Enabled))
  add(query_775346, "Action", newJString(Action))
  add(query_775346, "Version", newJString(Version))
  result = call_775345.call(nil, query_775346, nil, formData_775347, nil)

var postUpdateAccountSendingEnabled* = Call_PostUpdateAccountSendingEnabled_775331(
    name: "postUpdateAccountSendingEnabled", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=UpdateAccountSendingEnabled",
    validator: validate_PostUpdateAccountSendingEnabled_775332, base: "/",
    url: url_PostUpdateAccountSendingEnabled_775333,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateAccountSendingEnabled_775315 = ref object of OpenApiRestCall_772597
proc url_GetUpdateAccountSendingEnabled_775317(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateAccountSendingEnabled_775316(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables email sending across your entire Amazon SES account in the current AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending across your Amazon SES account in a given AWS Region when reputation metrics (such as your bounce or complaint rates) reach certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Enabled: JBool
  ##          : Describes whether email sending is enabled or disabled for your Amazon SES account in the current AWS Region.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_775318 = query.getOrDefault("Enabled")
  valid_775318 = validateParameter(valid_775318, JBool, required = false, default = nil)
  if valid_775318 != nil:
    section.add "Enabled", valid_775318
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775319 = query.getOrDefault("Action")
  valid_775319 = validateParameter(valid_775319, JString, required = true, default = newJString(
      "UpdateAccountSendingEnabled"))
  if valid_775319 != nil:
    section.add "Action", valid_775319
  var valid_775320 = query.getOrDefault("Version")
  valid_775320 = validateParameter(valid_775320, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_775320 != nil:
    section.add "Version", valid_775320
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775321 = header.getOrDefault("X-Amz-Date")
  valid_775321 = validateParameter(valid_775321, JString, required = false,
                                 default = nil)
  if valid_775321 != nil:
    section.add "X-Amz-Date", valid_775321
  var valid_775322 = header.getOrDefault("X-Amz-Security-Token")
  valid_775322 = validateParameter(valid_775322, JString, required = false,
                                 default = nil)
  if valid_775322 != nil:
    section.add "X-Amz-Security-Token", valid_775322
  var valid_775323 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775323 = validateParameter(valid_775323, JString, required = false,
                                 default = nil)
  if valid_775323 != nil:
    section.add "X-Amz-Content-Sha256", valid_775323
  var valid_775324 = header.getOrDefault("X-Amz-Algorithm")
  valid_775324 = validateParameter(valid_775324, JString, required = false,
                                 default = nil)
  if valid_775324 != nil:
    section.add "X-Amz-Algorithm", valid_775324
  var valid_775325 = header.getOrDefault("X-Amz-Signature")
  valid_775325 = validateParameter(valid_775325, JString, required = false,
                                 default = nil)
  if valid_775325 != nil:
    section.add "X-Amz-Signature", valid_775325
  var valid_775326 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775326 = validateParameter(valid_775326, JString, required = false,
                                 default = nil)
  if valid_775326 != nil:
    section.add "X-Amz-SignedHeaders", valid_775326
  var valid_775327 = header.getOrDefault("X-Amz-Credential")
  valid_775327 = validateParameter(valid_775327, JString, required = false,
                                 default = nil)
  if valid_775327 != nil:
    section.add "X-Amz-Credential", valid_775327
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775328: Call_GetUpdateAccountSendingEnabled_775315; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Enables or disables email sending across your entire Amazon SES account in the current AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending across your Amazon SES account in a given AWS Region when reputation metrics (such as your bounce or complaint rates) reach certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_775328.validator(path, query, header, formData, body)
  let scheme = call_775328.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775328.url(scheme.get, call_775328.host, call_775328.base,
                         call_775328.route, valid.getOrDefault("path"))
  result = hook(call_775328, url, valid)

proc call*(call_775329: Call_GetUpdateAccountSendingEnabled_775315;
          Enabled: bool = false; Action: string = "UpdateAccountSendingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## getUpdateAccountSendingEnabled
  ## <p>Enables or disables email sending across your entire Amazon SES account in the current AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending across your Amazon SES account in a given AWS Region when reputation metrics (such as your bounce or complaint rates) reach certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Enabled: bool
  ##          : Describes whether email sending is enabled or disabled for your Amazon SES account in the current AWS Region.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775330 = newJObject()
  add(query_775330, "Enabled", newJBool(Enabled))
  add(query_775330, "Action", newJString(Action))
  add(query_775330, "Version", newJString(Version))
  result = call_775329.call(nil, query_775330, nil, nil, nil)

var getUpdateAccountSendingEnabled* = Call_GetUpdateAccountSendingEnabled_775315(
    name: "getUpdateAccountSendingEnabled", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=UpdateAccountSendingEnabled",
    validator: validate_GetUpdateAccountSendingEnabled_775316, base: "/",
    url: url_GetUpdateAccountSendingEnabled_775317,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateConfigurationSetEventDestination_775370 = ref object of OpenApiRestCall_772597
proc url_PostUpdateConfigurationSetEventDestination_775372(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateConfigurationSetEventDestination_775371(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the event destination of a configuration set. Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775373 = query.getOrDefault("Action")
  valid_775373 = validateParameter(valid_775373, JString, required = true, default = newJString(
      "UpdateConfigurationSetEventDestination"))
  if valid_775373 != nil:
    section.add "Action", valid_775373
  var valid_775374 = query.getOrDefault("Version")
  valid_775374 = validateParameter(valid_775374, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_775374 != nil:
    section.add "Version", valid_775374
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775375 = header.getOrDefault("X-Amz-Date")
  valid_775375 = validateParameter(valid_775375, JString, required = false,
                                 default = nil)
  if valid_775375 != nil:
    section.add "X-Amz-Date", valid_775375
  var valid_775376 = header.getOrDefault("X-Amz-Security-Token")
  valid_775376 = validateParameter(valid_775376, JString, required = false,
                                 default = nil)
  if valid_775376 != nil:
    section.add "X-Amz-Security-Token", valid_775376
  var valid_775377 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775377 = validateParameter(valid_775377, JString, required = false,
                                 default = nil)
  if valid_775377 != nil:
    section.add "X-Amz-Content-Sha256", valid_775377
  var valid_775378 = header.getOrDefault("X-Amz-Algorithm")
  valid_775378 = validateParameter(valid_775378, JString, required = false,
                                 default = nil)
  if valid_775378 != nil:
    section.add "X-Amz-Algorithm", valid_775378
  var valid_775379 = header.getOrDefault("X-Amz-Signature")
  valid_775379 = validateParameter(valid_775379, JString, required = false,
                                 default = nil)
  if valid_775379 != nil:
    section.add "X-Amz-Signature", valid_775379
  var valid_775380 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775380 = validateParameter(valid_775380, JString, required = false,
                                 default = nil)
  if valid_775380 != nil:
    section.add "X-Amz-SignedHeaders", valid_775380
  var valid_775381 = header.getOrDefault("X-Amz-Credential")
  valid_775381 = validateParameter(valid_775381, JString, required = false,
                                 default = nil)
  if valid_775381 != nil:
    section.add "X-Amz-Credential", valid_775381
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that contains the event destination that you want to update.
  ##   EventDestination.Name: JString
  ##                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestination.CloudWatchDestination: JString
  ##                                         : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   EventDestination.MatchingEventTypes: JArray
  ##                                      : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   EventDestination.KinesisFirehoseDestination: JString
  ##                                              : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   EventDestination.Enabled: JString
  ##                           : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestination.SNSDestination: JString
  ##                                  : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_775382 = formData.getOrDefault("ConfigurationSetName")
  valid_775382 = validateParameter(valid_775382, JString, required = true,
                                 default = nil)
  if valid_775382 != nil:
    section.add "ConfigurationSetName", valid_775382
  var valid_775383 = formData.getOrDefault("EventDestination.Name")
  valid_775383 = validateParameter(valid_775383, JString, required = false,
                                 default = nil)
  if valid_775383 != nil:
    section.add "EventDestination.Name", valid_775383
  var valid_775384 = formData.getOrDefault("EventDestination.CloudWatchDestination")
  valid_775384 = validateParameter(valid_775384, JString, required = false,
                                 default = nil)
  if valid_775384 != nil:
    section.add "EventDestination.CloudWatchDestination", valid_775384
  var valid_775385 = formData.getOrDefault("EventDestination.MatchingEventTypes")
  valid_775385 = validateParameter(valid_775385, JArray, required = false,
                                 default = nil)
  if valid_775385 != nil:
    section.add "EventDestination.MatchingEventTypes", valid_775385
  var valid_775386 = formData.getOrDefault("EventDestination.KinesisFirehoseDestination")
  valid_775386 = validateParameter(valid_775386, JString, required = false,
                                 default = nil)
  if valid_775386 != nil:
    section.add "EventDestination.KinesisFirehoseDestination", valid_775386
  var valid_775387 = formData.getOrDefault("EventDestination.Enabled")
  valid_775387 = validateParameter(valid_775387, JString, required = false,
                                 default = nil)
  if valid_775387 != nil:
    section.add "EventDestination.Enabled", valid_775387
  var valid_775388 = formData.getOrDefault("EventDestination.SNSDestination")
  valid_775388 = validateParameter(valid_775388, JString, required = false,
                                 default = nil)
  if valid_775388 != nil:
    section.add "EventDestination.SNSDestination", valid_775388
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775389: Call_PostUpdateConfigurationSetEventDestination_775370;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Updates the event destination of a configuration set. Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_775389.validator(path, query, header, formData, body)
  let scheme = call_775389.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775389.url(scheme.get, call_775389.host, call_775389.base,
                         call_775389.route, valid.getOrDefault("path"))
  result = hook(call_775389, url, valid)

proc call*(call_775390: Call_PostUpdateConfigurationSetEventDestination_775370;
          ConfigurationSetName: string; EventDestinationName: string = "";
          EventDestinationCloudWatchDestination: string = "";
          Action: string = "UpdateConfigurationSetEventDestination";
          EventDestinationMatchingEventTypes: JsonNode = nil;
          EventDestinationKinesisFirehoseDestination: string = "";
          EventDestinationEnabled: string = "";
          EventDestinationSNSDestination: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## postUpdateConfigurationSetEventDestination
  ## <p>Updates the event destination of a configuration set. Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that contains the event destination that you want to update.
  ##   EventDestinationName: string
  ##                       : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestinationCloudWatchDestination: string
  ##                                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   Action: string (required)
  ##   EventDestinationMatchingEventTypes: JArray
  ##                                     : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   EventDestinationKinesisFirehoseDestination: string
  ##                                             : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   EventDestinationEnabled: string
  ##                          : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestinationSNSDestination: string
  ##                                 : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  ##   Version: string (required)
  var query_775391 = newJObject()
  var formData_775392 = newJObject()
  add(formData_775392, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_775392, "EventDestination.Name", newJString(EventDestinationName))
  add(formData_775392, "EventDestination.CloudWatchDestination",
      newJString(EventDestinationCloudWatchDestination))
  add(query_775391, "Action", newJString(Action))
  if EventDestinationMatchingEventTypes != nil:
    formData_775392.add "EventDestination.MatchingEventTypes",
                       EventDestinationMatchingEventTypes
  add(formData_775392, "EventDestination.KinesisFirehoseDestination",
      newJString(EventDestinationKinesisFirehoseDestination))
  add(formData_775392, "EventDestination.Enabled",
      newJString(EventDestinationEnabled))
  add(formData_775392, "EventDestination.SNSDestination",
      newJString(EventDestinationSNSDestination))
  add(query_775391, "Version", newJString(Version))
  result = call_775390.call(nil, query_775391, nil, formData_775392, nil)

var postUpdateConfigurationSetEventDestination* = Call_PostUpdateConfigurationSetEventDestination_775370(
    name: "postUpdateConfigurationSetEventDestination", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetEventDestination",
    validator: validate_PostUpdateConfigurationSetEventDestination_775371,
    base: "/", url: url_PostUpdateConfigurationSetEventDestination_775372,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateConfigurationSetEventDestination_775348 = ref object of OpenApiRestCall_772597
proc url_GetUpdateConfigurationSetEventDestination_775350(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateConfigurationSetEventDestination_775349(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the event destination of a configuration set. Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EventDestination.Enabled: JString
  ##                           : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestination.KinesisFirehoseDestination: JString
  ##                                              : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   Action: JString (required)
  ##   EventDestination.Name: JString
  ##                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestination.CloudWatchDestination: JString
  ##                                         : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   EventDestination.SNSDestination: JString
  ##                                  : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  ##   EventDestination.MatchingEventTypes: JArray
  ##                                      : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that contains the event destination that you want to update.
  ##   Version: JString (required)
  section = newJObject()
  var valid_775351 = query.getOrDefault("EventDestination.Enabled")
  valid_775351 = validateParameter(valid_775351, JString, required = false,
                                 default = nil)
  if valid_775351 != nil:
    section.add "EventDestination.Enabled", valid_775351
  var valid_775352 = query.getOrDefault("EventDestination.KinesisFirehoseDestination")
  valid_775352 = validateParameter(valid_775352, JString, required = false,
                                 default = nil)
  if valid_775352 != nil:
    section.add "EventDestination.KinesisFirehoseDestination", valid_775352
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775353 = query.getOrDefault("Action")
  valid_775353 = validateParameter(valid_775353, JString, required = true, default = newJString(
      "UpdateConfigurationSetEventDestination"))
  if valid_775353 != nil:
    section.add "Action", valid_775353
  var valid_775354 = query.getOrDefault("EventDestination.Name")
  valid_775354 = validateParameter(valid_775354, JString, required = false,
                                 default = nil)
  if valid_775354 != nil:
    section.add "EventDestination.Name", valid_775354
  var valid_775355 = query.getOrDefault("EventDestination.CloudWatchDestination")
  valid_775355 = validateParameter(valid_775355, JString, required = false,
                                 default = nil)
  if valid_775355 != nil:
    section.add "EventDestination.CloudWatchDestination", valid_775355
  var valid_775356 = query.getOrDefault("EventDestination.SNSDestination")
  valid_775356 = validateParameter(valid_775356, JString, required = false,
                                 default = nil)
  if valid_775356 != nil:
    section.add "EventDestination.SNSDestination", valid_775356
  var valid_775357 = query.getOrDefault("EventDestination.MatchingEventTypes")
  valid_775357 = validateParameter(valid_775357, JArray, required = false,
                                 default = nil)
  if valid_775357 != nil:
    section.add "EventDestination.MatchingEventTypes", valid_775357
  var valid_775358 = query.getOrDefault("ConfigurationSetName")
  valid_775358 = validateParameter(valid_775358, JString, required = true,
                                 default = nil)
  if valid_775358 != nil:
    section.add "ConfigurationSetName", valid_775358
  var valid_775359 = query.getOrDefault("Version")
  valid_775359 = validateParameter(valid_775359, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_775359 != nil:
    section.add "Version", valid_775359
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775360 = header.getOrDefault("X-Amz-Date")
  valid_775360 = validateParameter(valid_775360, JString, required = false,
                                 default = nil)
  if valid_775360 != nil:
    section.add "X-Amz-Date", valid_775360
  var valid_775361 = header.getOrDefault("X-Amz-Security-Token")
  valid_775361 = validateParameter(valid_775361, JString, required = false,
                                 default = nil)
  if valid_775361 != nil:
    section.add "X-Amz-Security-Token", valid_775361
  var valid_775362 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775362 = validateParameter(valid_775362, JString, required = false,
                                 default = nil)
  if valid_775362 != nil:
    section.add "X-Amz-Content-Sha256", valid_775362
  var valid_775363 = header.getOrDefault("X-Amz-Algorithm")
  valid_775363 = validateParameter(valid_775363, JString, required = false,
                                 default = nil)
  if valid_775363 != nil:
    section.add "X-Amz-Algorithm", valid_775363
  var valid_775364 = header.getOrDefault("X-Amz-Signature")
  valid_775364 = validateParameter(valid_775364, JString, required = false,
                                 default = nil)
  if valid_775364 != nil:
    section.add "X-Amz-Signature", valid_775364
  var valid_775365 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775365 = validateParameter(valid_775365, JString, required = false,
                                 default = nil)
  if valid_775365 != nil:
    section.add "X-Amz-SignedHeaders", valid_775365
  var valid_775366 = header.getOrDefault("X-Amz-Credential")
  valid_775366 = validateParameter(valid_775366, JString, required = false,
                                 default = nil)
  if valid_775366 != nil:
    section.add "X-Amz-Credential", valid_775366
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775367: Call_GetUpdateConfigurationSetEventDestination_775348;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Updates the event destination of a configuration set. Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_775367.validator(path, query, header, formData, body)
  let scheme = call_775367.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775367.url(scheme.get, call_775367.host, call_775367.base,
                         call_775367.route, valid.getOrDefault("path"))
  result = hook(call_775367, url, valid)

proc call*(call_775368: Call_GetUpdateConfigurationSetEventDestination_775348;
          ConfigurationSetName: string; EventDestinationEnabled: string = "";
          EventDestinationKinesisFirehoseDestination: string = "";
          Action: string = "UpdateConfigurationSetEventDestination";
          EventDestinationName: string = "";
          EventDestinationCloudWatchDestination: string = "";
          EventDestinationSNSDestination: string = "";
          EventDestinationMatchingEventTypes: JsonNode = nil;
          Version: string = "2010-12-01"): Recallable =
  ## getUpdateConfigurationSetEventDestination
  ## <p>Updates the event destination of a configuration set. Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer Guide.</i> </p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>You can execute this operation no more than once per second.</p>
  ##   EventDestinationEnabled: string
  ##                          : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.
  ##   EventDestinationKinesisFirehoseDestination: string
  ##                                             : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
  ##   Action: string (required)
  ##   EventDestinationName: string
  ##                       : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the event destination. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   EventDestinationCloudWatchDestination: string
  ##                                        : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
  ##   EventDestinationSNSDestination: string
  ##                                 : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.
  ##   EventDestinationMatchingEventTypes: JArray
  ##                                     : <p>Contains information about the event destination that the specified email sending events will be published to.</p> <note> <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p> </note> <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
  ## The type of email sending events to publish to the event destination.
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that contains the event destination that you want to update.
  ##   Version: string (required)
  var query_775369 = newJObject()
  add(query_775369, "EventDestination.Enabled",
      newJString(EventDestinationEnabled))
  add(query_775369, "EventDestination.KinesisFirehoseDestination",
      newJString(EventDestinationKinesisFirehoseDestination))
  add(query_775369, "Action", newJString(Action))
  add(query_775369, "EventDestination.Name", newJString(EventDestinationName))
  add(query_775369, "EventDestination.CloudWatchDestination",
      newJString(EventDestinationCloudWatchDestination))
  add(query_775369, "EventDestination.SNSDestination",
      newJString(EventDestinationSNSDestination))
  if EventDestinationMatchingEventTypes != nil:
    query_775369.add "EventDestination.MatchingEventTypes",
                    EventDestinationMatchingEventTypes
  add(query_775369, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_775369, "Version", newJString(Version))
  result = call_775368.call(nil, query_775369, nil, nil, nil)

var getUpdateConfigurationSetEventDestination* = Call_GetUpdateConfigurationSetEventDestination_775348(
    name: "getUpdateConfigurationSetEventDestination", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetEventDestination",
    validator: validate_GetUpdateConfigurationSetEventDestination_775349,
    base: "/", url: url_GetUpdateConfigurationSetEventDestination_775350,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateConfigurationSetReputationMetricsEnabled_775410 = ref object of OpenApiRestCall_772597
proc url_PostUpdateConfigurationSetReputationMetricsEnabled_775412(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateConfigurationSetReputationMetricsEnabled_775411(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## <p>Enables or disables the publishing of reputation metrics for emails sent using a specific configuration set in a given AWS Region. Reputation metrics include bounce and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can create alarms when bounce or complaint rates exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775413 = query.getOrDefault("Action")
  valid_775413 = validateParameter(valid_775413, JString, required = true, default = newJString(
      "UpdateConfigurationSetReputationMetricsEnabled"))
  if valid_775413 != nil:
    section.add "Action", valid_775413
  var valid_775414 = query.getOrDefault("Version")
  valid_775414 = validateParameter(valid_775414, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_775414 != nil:
    section.add "Version", valid_775414
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775415 = header.getOrDefault("X-Amz-Date")
  valid_775415 = validateParameter(valid_775415, JString, required = false,
                                 default = nil)
  if valid_775415 != nil:
    section.add "X-Amz-Date", valid_775415
  var valid_775416 = header.getOrDefault("X-Amz-Security-Token")
  valid_775416 = validateParameter(valid_775416, JString, required = false,
                                 default = nil)
  if valid_775416 != nil:
    section.add "X-Amz-Security-Token", valid_775416
  var valid_775417 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775417 = validateParameter(valid_775417, JString, required = false,
                                 default = nil)
  if valid_775417 != nil:
    section.add "X-Amz-Content-Sha256", valid_775417
  var valid_775418 = header.getOrDefault("X-Amz-Algorithm")
  valid_775418 = validateParameter(valid_775418, JString, required = false,
                                 default = nil)
  if valid_775418 != nil:
    section.add "X-Amz-Algorithm", valid_775418
  var valid_775419 = header.getOrDefault("X-Amz-Signature")
  valid_775419 = validateParameter(valid_775419, JString, required = false,
                                 default = nil)
  if valid_775419 != nil:
    section.add "X-Amz-Signature", valid_775419
  var valid_775420 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775420 = validateParameter(valid_775420, JString, required = false,
                                 default = nil)
  if valid_775420 != nil:
    section.add "X-Amz-SignedHeaders", valid_775420
  var valid_775421 = header.getOrDefault("X-Amz-Credential")
  valid_775421 = validateParameter(valid_775421, JString, required = false,
                                 default = nil)
  if valid_775421 != nil:
    section.add "X-Amz-Credential", valid_775421
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Enabled: JBool (required)
  ##          : Describes whether or not Amazon SES will publish reputation metrics for the configuration set, such as bounce and complaint rates, to Amazon CloudWatch.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_775422 = formData.getOrDefault("ConfigurationSetName")
  valid_775422 = validateParameter(valid_775422, JString, required = true,
                                 default = nil)
  if valid_775422 != nil:
    section.add "ConfigurationSetName", valid_775422
  var valid_775423 = formData.getOrDefault("Enabled")
  valid_775423 = validateParameter(valid_775423, JBool, required = true, default = nil)
  if valid_775423 != nil:
    section.add "Enabled", valid_775423
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775424: Call_PostUpdateConfigurationSetReputationMetricsEnabled_775410;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables or disables the publishing of reputation metrics for emails sent using a specific configuration set in a given AWS Region. Reputation metrics include bounce and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can create alarms when bounce or complaint rates exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_775424.validator(path, query, header, formData, body)
  let scheme = call_775424.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775424.url(scheme.get, call_775424.host, call_775424.base,
                         call_775424.route, valid.getOrDefault("path"))
  result = hook(call_775424, url, valid)

proc call*(call_775425: Call_PostUpdateConfigurationSetReputationMetricsEnabled_775410;
          ConfigurationSetName: string; Enabled: bool;
          Action: string = "UpdateConfigurationSetReputationMetricsEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## postUpdateConfigurationSetReputationMetricsEnabled
  ## <p>Enables or disables the publishing of reputation metrics for emails sent using a specific configuration set in a given AWS Region. Reputation metrics include bounce and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can create alarms when bounce or complaint rates exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Enabled: bool (required)
  ##          : Describes whether or not Amazon SES will publish reputation metrics for the configuration set, such as bounce and complaint rates, to Amazon CloudWatch.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775426 = newJObject()
  var formData_775427 = newJObject()
  add(formData_775427, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_775427, "Enabled", newJBool(Enabled))
  add(query_775426, "Action", newJString(Action))
  add(query_775426, "Version", newJString(Version))
  result = call_775425.call(nil, query_775426, nil, formData_775427, nil)

var postUpdateConfigurationSetReputationMetricsEnabled* = Call_PostUpdateConfigurationSetReputationMetricsEnabled_775410(
    name: "postUpdateConfigurationSetReputationMetricsEnabled",
    meth: HttpMethod.HttpPost, host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetReputationMetricsEnabled",
    validator: validate_PostUpdateConfigurationSetReputationMetricsEnabled_775411,
    base: "/", url: url_PostUpdateConfigurationSetReputationMetricsEnabled_775412,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateConfigurationSetReputationMetricsEnabled_775393 = ref object of OpenApiRestCall_772597
proc url_GetUpdateConfigurationSetReputationMetricsEnabled_775395(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateConfigurationSetReputationMetricsEnabled_775394(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## <p>Enables or disables the publishing of reputation metrics for emails sent using a specific configuration set in a given AWS Region. Reputation metrics include bounce and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can create alarms when bounce or complaint rates exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Enabled: JBool (required)
  ##          : Describes whether or not Amazon SES will publish reputation metrics for the configuration set, such as bounce and complaint rates, to Amazon CloudWatch.
  ##   Action: JString (required)
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Enabled` field"
  var valid_775396 = query.getOrDefault("Enabled")
  valid_775396 = validateParameter(valid_775396, JBool, required = true, default = nil)
  if valid_775396 != nil:
    section.add "Enabled", valid_775396
  var valid_775397 = query.getOrDefault("Action")
  valid_775397 = validateParameter(valid_775397, JString, required = true, default = newJString(
      "UpdateConfigurationSetReputationMetricsEnabled"))
  if valid_775397 != nil:
    section.add "Action", valid_775397
  var valid_775398 = query.getOrDefault("ConfigurationSetName")
  valid_775398 = validateParameter(valid_775398, JString, required = true,
                                 default = nil)
  if valid_775398 != nil:
    section.add "ConfigurationSetName", valid_775398
  var valid_775399 = query.getOrDefault("Version")
  valid_775399 = validateParameter(valid_775399, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_775399 != nil:
    section.add "Version", valid_775399
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775400 = header.getOrDefault("X-Amz-Date")
  valid_775400 = validateParameter(valid_775400, JString, required = false,
                                 default = nil)
  if valid_775400 != nil:
    section.add "X-Amz-Date", valid_775400
  var valid_775401 = header.getOrDefault("X-Amz-Security-Token")
  valid_775401 = validateParameter(valid_775401, JString, required = false,
                                 default = nil)
  if valid_775401 != nil:
    section.add "X-Amz-Security-Token", valid_775401
  var valid_775402 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775402 = validateParameter(valid_775402, JString, required = false,
                                 default = nil)
  if valid_775402 != nil:
    section.add "X-Amz-Content-Sha256", valid_775402
  var valid_775403 = header.getOrDefault("X-Amz-Algorithm")
  valid_775403 = validateParameter(valid_775403, JString, required = false,
                                 default = nil)
  if valid_775403 != nil:
    section.add "X-Amz-Algorithm", valid_775403
  var valid_775404 = header.getOrDefault("X-Amz-Signature")
  valid_775404 = validateParameter(valid_775404, JString, required = false,
                                 default = nil)
  if valid_775404 != nil:
    section.add "X-Amz-Signature", valid_775404
  var valid_775405 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775405 = validateParameter(valid_775405, JString, required = false,
                                 default = nil)
  if valid_775405 != nil:
    section.add "X-Amz-SignedHeaders", valid_775405
  var valid_775406 = header.getOrDefault("X-Amz-Credential")
  valid_775406 = validateParameter(valid_775406, JString, required = false,
                                 default = nil)
  if valid_775406 != nil:
    section.add "X-Amz-Credential", valid_775406
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775407: Call_GetUpdateConfigurationSetReputationMetricsEnabled_775393;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables or disables the publishing of reputation metrics for emails sent using a specific configuration set in a given AWS Region. Reputation metrics include bounce and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can create alarms when bounce or complaint rates exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_775407.validator(path, query, header, formData, body)
  let scheme = call_775407.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775407.url(scheme.get, call_775407.host, call_775407.base,
                         call_775407.route, valid.getOrDefault("path"))
  result = hook(call_775407, url, valid)

proc call*(call_775408: Call_GetUpdateConfigurationSetReputationMetricsEnabled_775393;
          Enabled: bool; ConfigurationSetName: string;
          Action: string = "UpdateConfigurationSetReputationMetricsEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## getUpdateConfigurationSetReputationMetricsEnabled
  ## <p>Enables or disables the publishing of reputation metrics for emails sent using a specific configuration set in a given AWS Region. Reputation metrics include bounce and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can create alarms when bounce or complaint rates exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Enabled: bool (required)
  ##          : Describes whether or not Amazon SES will publish reputation metrics for the configuration set, such as bounce and complaint rates, to Amazon CloudWatch.
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Version: string (required)
  var query_775409 = newJObject()
  add(query_775409, "Enabled", newJBool(Enabled))
  add(query_775409, "Action", newJString(Action))
  add(query_775409, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_775409, "Version", newJString(Version))
  result = call_775408.call(nil, query_775409, nil, nil, nil)

var getUpdateConfigurationSetReputationMetricsEnabled* = Call_GetUpdateConfigurationSetReputationMetricsEnabled_775393(
    name: "getUpdateConfigurationSetReputationMetricsEnabled",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetReputationMetricsEnabled",
    validator: validate_GetUpdateConfigurationSetReputationMetricsEnabled_775394,
    base: "/", url: url_GetUpdateConfigurationSetReputationMetricsEnabled_775395,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateConfigurationSetSendingEnabled_775445 = ref object of OpenApiRestCall_772597
proc url_PostUpdateConfigurationSetSendingEnabled_775447(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateConfigurationSetSendingEnabled_775446(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables email sending for messages sent using a specific configuration set in a given AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending for a configuration set when the reputation metrics for that configuration set (such as your bounce on complaint rate) exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775448 = query.getOrDefault("Action")
  valid_775448 = validateParameter(valid_775448, JString, required = true, default = newJString(
      "UpdateConfigurationSetSendingEnabled"))
  if valid_775448 != nil:
    section.add "Action", valid_775448
  var valid_775449 = query.getOrDefault("Version")
  valid_775449 = validateParameter(valid_775449, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_775449 != nil:
    section.add "Version", valid_775449
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775450 = header.getOrDefault("X-Amz-Date")
  valid_775450 = validateParameter(valid_775450, JString, required = false,
                                 default = nil)
  if valid_775450 != nil:
    section.add "X-Amz-Date", valid_775450
  var valid_775451 = header.getOrDefault("X-Amz-Security-Token")
  valid_775451 = validateParameter(valid_775451, JString, required = false,
                                 default = nil)
  if valid_775451 != nil:
    section.add "X-Amz-Security-Token", valid_775451
  var valid_775452 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775452 = validateParameter(valid_775452, JString, required = false,
                                 default = nil)
  if valid_775452 != nil:
    section.add "X-Amz-Content-Sha256", valid_775452
  var valid_775453 = header.getOrDefault("X-Amz-Algorithm")
  valid_775453 = validateParameter(valid_775453, JString, required = false,
                                 default = nil)
  if valid_775453 != nil:
    section.add "X-Amz-Algorithm", valid_775453
  var valid_775454 = header.getOrDefault("X-Amz-Signature")
  valid_775454 = validateParameter(valid_775454, JString, required = false,
                                 default = nil)
  if valid_775454 != nil:
    section.add "X-Amz-Signature", valid_775454
  var valid_775455 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775455 = validateParameter(valid_775455, JString, required = false,
                                 default = nil)
  if valid_775455 != nil:
    section.add "X-Amz-SignedHeaders", valid_775455
  var valid_775456 = header.getOrDefault("X-Amz-Credential")
  valid_775456 = validateParameter(valid_775456, JString, required = false,
                                 default = nil)
  if valid_775456 != nil:
    section.add "X-Amz-Credential", valid_775456
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Enabled: JBool (required)
  ##          : Describes whether email sending is enabled or disabled for the configuration set. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_775457 = formData.getOrDefault("ConfigurationSetName")
  valid_775457 = validateParameter(valid_775457, JString, required = true,
                                 default = nil)
  if valid_775457 != nil:
    section.add "ConfigurationSetName", valid_775457
  var valid_775458 = formData.getOrDefault("Enabled")
  valid_775458 = validateParameter(valid_775458, JBool, required = true, default = nil)
  if valid_775458 != nil:
    section.add "Enabled", valid_775458
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775459: Call_PostUpdateConfigurationSetSendingEnabled_775445;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables or disables email sending for messages sent using a specific configuration set in a given AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending for a configuration set when the reputation metrics for that configuration set (such as your bounce on complaint rate) exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_775459.validator(path, query, header, formData, body)
  let scheme = call_775459.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775459.url(scheme.get, call_775459.host, call_775459.base,
                         call_775459.route, valid.getOrDefault("path"))
  result = hook(call_775459, url, valid)

proc call*(call_775460: Call_PostUpdateConfigurationSetSendingEnabled_775445;
          ConfigurationSetName: string; Enabled: bool;
          Action: string = "UpdateConfigurationSetSendingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## postUpdateConfigurationSetSendingEnabled
  ## <p>Enables or disables email sending for messages sent using a specific configuration set in a given AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending for a configuration set when the reputation metrics for that configuration set (such as your bounce on complaint rate) exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Enabled: bool (required)
  ##          : Describes whether email sending is enabled or disabled for the configuration set. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775461 = newJObject()
  var formData_775462 = newJObject()
  add(formData_775462, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(formData_775462, "Enabled", newJBool(Enabled))
  add(query_775461, "Action", newJString(Action))
  add(query_775461, "Version", newJString(Version))
  result = call_775460.call(nil, query_775461, nil, formData_775462, nil)

var postUpdateConfigurationSetSendingEnabled* = Call_PostUpdateConfigurationSetSendingEnabled_775445(
    name: "postUpdateConfigurationSetSendingEnabled", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetSendingEnabled",
    validator: validate_PostUpdateConfigurationSetSendingEnabled_775446,
    base: "/", url: url_PostUpdateConfigurationSetSendingEnabled_775447,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateConfigurationSetSendingEnabled_775428 = ref object of OpenApiRestCall_772597
proc url_GetUpdateConfigurationSetSendingEnabled_775430(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateConfigurationSetSendingEnabled_775429(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables or disables email sending for messages sent using a specific configuration set in a given AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending for a configuration set when the reputation metrics for that configuration set (such as your bounce on complaint rate) exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Enabled: JBool (required)
  ##          : Describes whether email sending is enabled or disabled for the configuration set. 
  ##   Action: JString (required)
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Enabled` field"
  var valid_775431 = query.getOrDefault("Enabled")
  valid_775431 = validateParameter(valid_775431, JBool, required = true, default = nil)
  if valid_775431 != nil:
    section.add "Enabled", valid_775431
  var valid_775432 = query.getOrDefault("Action")
  valid_775432 = validateParameter(valid_775432, JString, required = true, default = newJString(
      "UpdateConfigurationSetSendingEnabled"))
  if valid_775432 != nil:
    section.add "Action", valid_775432
  var valid_775433 = query.getOrDefault("ConfigurationSetName")
  valid_775433 = validateParameter(valid_775433, JString, required = true,
                                 default = nil)
  if valid_775433 != nil:
    section.add "ConfigurationSetName", valid_775433
  var valid_775434 = query.getOrDefault("Version")
  valid_775434 = validateParameter(valid_775434, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_775434 != nil:
    section.add "Version", valid_775434
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775435 = header.getOrDefault("X-Amz-Date")
  valid_775435 = validateParameter(valid_775435, JString, required = false,
                                 default = nil)
  if valid_775435 != nil:
    section.add "X-Amz-Date", valid_775435
  var valid_775436 = header.getOrDefault("X-Amz-Security-Token")
  valid_775436 = validateParameter(valid_775436, JString, required = false,
                                 default = nil)
  if valid_775436 != nil:
    section.add "X-Amz-Security-Token", valid_775436
  var valid_775437 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775437 = validateParameter(valid_775437, JString, required = false,
                                 default = nil)
  if valid_775437 != nil:
    section.add "X-Amz-Content-Sha256", valid_775437
  var valid_775438 = header.getOrDefault("X-Amz-Algorithm")
  valid_775438 = validateParameter(valid_775438, JString, required = false,
                                 default = nil)
  if valid_775438 != nil:
    section.add "X-Amz-Algorithm", valid_775438
  var valid_775439 = header.getOrDefault("X-Amz-Signature")
  valid_775439 = validateParameter(valid_775439, JString, required = false,
                                 default = nil)
  if valid_775439 != nil:
    section.add "X-Amz-Signature", valid_775439
  var valid_775440 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775440 = validateParameter(valid_775440, JString, required = false,
                                 default = nil)
  if valid_775440 != nil:
    section.add "X-Amz-SignedHeaders", valid_775440
  var valid_775441 = header.getOrDefault("X-Amz-Credential")
  valid_775441 = validateParameter(valid_775441, JString, required = false,
                                 default = nil)
  if valid_775441 != nil:
    section.add "X-Amz-Credential", valid_775441
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775442: Call_GetUpdateConfigurationSetSendingEnabled_775428;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables or disables email sending for messages sent using a specific configuration set in a given AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending for a configuration set when the reputation metrics for that configuration set (such as your bounce on complaint rate) exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_775442.validator(path, query, header, formData, body)
  let scheme = call_775442.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775442.url(scheme.get, call_775442.host, call_775442.base,
                         call_775442.route, valid.getOrDefault("path"))
  result = hook(call_775442, url, valid)

proc call*(call_775443: Call_GetUpdateConfigurationSetSendingEnabled_775428;
          Enabled: bool; ConfigurationSetName: string;
          Action: string = "UpdateConfigurationSetSendingEnabled";
          Version: string = "2010-12-01"): Recallable =
  ## getUpdateConfigurationSetSendingEnabled
  ## <p>Enables or disables email sending for messages sent using a specific configuration set in a given AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending for a configuration set when the reputation metrics for that configuration set (such as your bounce on complaint rate) exceed certain thresholds.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Enabled: bool (required)
  ##          : Describes whether email sending is enabled or disabled for the configuration set. 
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set that you want to update.
  ##   Version: string (required)
  var query_775444 = newJObject()
  add(query_775444, "Enabled", newJBool(Enabled))
  add(query_775444, "Action", newJString(Action))
  add(query_775444, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_775444, "Version", newJString(Version))
  result = call_775443.call(nil, query_775444, nil, nil, nil)

var getUpdateConfigurationSetSendingEnabled* = Call_GetUpdateConfigurationSetSendingEnabled_775428(
    name: "getUpdateConfigurationSetSendingEnabled", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetSendingEnabled",
    validator: validate_GetUpdateConfigurationSetSendingEnabled_775429, base: "/",
    url: url_GetUpdateConfigurationSetSendingEnabled_775430,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateConfigurationSetTrackingOptions_775480 = ref object of OpenApiRestCall_772597
proc url_PostUpdateConfigurationSetTrackingOptions_775482(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateConfigurationSetTrackingOptions_775481(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775483 = query.getOrDefault("Action")
  valid_775483 = validateParameter(valid_775483, JString, required = true, default = newJString(
      "UpdateConfigurationSetTrackingOptions"))
  if valid_775483 != nil:
    section.add "Action", valid_775483
  var valid_775484 = query.getOrDefault("Version")
  valid_775484 = validateParameter(valid_775484, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_775484 != nil:
    section.add "Version", valid_775484
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775485 = header.getOrDefault("X-Amz-Date")
  valid_775485 = validateParameter(valid_775485, JString, required = false,
                                 default = nil)
  if valid_775485 != nil:
    section.add "X-Amz-Date", valid_775485
  var valid_775486 = header.getOrDefault("X-Amz-Security-Token")
  valid_775486 = validateParameter(valid_775486, JString, required = false,
                                 default = nil)
  if valid_775486 != nil:
    section.add "X-Amz-Security-Token", valid_775486
  var valid_775487 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775487 = validateParameter(valid_775487, JString, required = false,
                                 default = nil)
  if valid_775487 != nil:
    section.add "X-Amz-Content-Sha256", valid_775487
  var valid_775488 = header.getOrDefault("X-Amz-Algorithm")
  valid_775488 = validateParameter(valid_775488, JString, required = false,
                                 default = nil)
  if valid_775488 != nil:
    section.add "X-Amz-Algorithm", valid_775488
  var valid_775489 = header.getOrDefault("X-Amz-Signature")
  valid_775489 = validateParameter(valid_775489, JString, required = false,
                                 default = nil)
  if valid_775489 != nil:
    section.add "X-Amz-Signature", valid_775489
  var valid_775490 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775490 = validateParameter(valid_775490, JString, required = false,
                                 default = nil)
  if valid_775490 != nil:
    section.add "X-Amz-SignedHeaders", valid_775490
  var valid_775491 = header.getOrDefault("X-Amz-Credential")
  valid_775491 = validateParameter(valid_775491, JString, required = false,
                                 default = nil)
  if valid_775491 != nil:
    section.add "X-Amz-Credential", valid_775491
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set for which you want to update the custom tracking domain.
  ##   TrackingOptions.CustomRedirectDomain: JString
  ##                                       : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ConfigurationSetName` field"
  var valid_775492 = formData.getOrDefault("ConfigurationSetName")
  valid_775492 = validateParameter(valid_775492, JString, required = true,
                                 default = nil)
  if valid_775492 != nil:
    section.add "ConfigurationSetName", valid_775492
  var valid_775493 = formData.getOrDefault("TrackingOptions.CustomRedirectDomain")
  valid_775493 = validateParameter(valid_775493, JString, required = false,
                                 default = nil)
  if valid_775493 != nil:
    section.add "TrackingOptions.CustomRedirectDomain", valid_775493
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775494: Call_PostUpdateConfigurationSetTrackingOptions_775480;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Modifies an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_775494.validator(path, query, header, formData, body)
  let scheme = call_775494.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775494.url(scheme.get, call_775494.host, call_775494.base,
                         call_775494.route, valid.getOrDefault("path"))
  result = hook(call_775494, url, valid)

proc call*(call_775495: Call_PostUpdateConfigurationSetTrackingOptions_775480;
          ConfigurationSetName: string;
          Action: string = "UpdateConfigurationSetTrackingOptions";
          TrackingOptionsCustomRedirectDomain: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## postUpdateConfigurationSetTrackingOptions
  ## <p>Modifies an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set for which you want to update the custom tracking domain.
  ##   Action: string (required)
  ##   TrackingOptionsCustomRedirectDomain: string
  ##                                      : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  ##   Version: string (required)
  var query_775496 = newJObject()
  var formData_775497 = newJObject()
  add(formData_775497, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_775496, "Action", newJString(Action))
  add(formData_775497, "TrackingOptions.CustomRedirectDomain",
      newJString(TrackingOptionsCustomRedirectDomain))
  add(query_775496, "Version", newJString(Version))
  result = call_775495.call(nil, query_775496, nil, formData_775497, nil)

var postUpdateConfigurationSetTrackingOptions* = Call_PostUpdateConfigurationSetTrackingOptions_775480(
    name: "postUpdateConfigurationSetTrackingOptions", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetTrackingOptions",
    validator: validate_PostUpdateConfigurationSetTrackingOptions_775481,
    base: "/", url: url_PostUpdateConfigurationSetTrackingOptions_775482,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateConfigurationSetTrackingOptions_775463 = ref object of OpenApiRestCall_772597
proc url_GetUpdateConfigurationSetTrackingOptions_775465(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateConfigurationSetTrackingOptions_775464(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TrackingOptions.CustomRedirectDomain: JString
  ##                                       : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  ##   Action: JString (required)
  ##   ConfigurationSetName: JString (required)
  ##                       : The name of the configuration set for which you want to update the custom tracking domain.
  ##   Version: JString (required)
  section = newJObject()
  var valid_775466 = query.getOrDefault("TrackingOptions.CustomRedirectDomain")
  valid_775466 = validateParameter(valid_775466, JString, required = false,
                                 default = nil)
  if valid_775466 != nil:
    section.add "TrackingOptions.CustomRedirectDomain", valid_775466
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775467 = query.getOrDefault("Action")
  valid_775467 = validateParameter(valid_775467, JString, required = true, default = newJString(
      "UpdateConfigurationSetTrackingOptions"))
  if valid_775467 != nil:
    section.add "Action", valid_775467
  var valid_775468 = query.getOrDefault("ConfigurationSetName")
  valid_775468 = validateParameter(valid_775468, JString, required = true,
                                 default = nil)
  if valid_775468 != nil:
    section.add "ConfigurationSetName", valid_775468
  var valid_775469 = query.getOrDefault("Version")
  valid_775469 = validateParameter(valid_775469, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_775469 != nil:
    section.add "Version", valid_775469
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775470 = header.getOrDefault("X-Amz-Date")
  valid_775470 = validateParameter(valid_775470, JString, required = false,
                                 default = nil)
  if valid_775470 != nil:
    section.add "X-Amz-Date", valid_775470
  var valid_775471 = header.getOrDefault("X-Amz-Security-Token")
  valid_775471 = validateParameter(valid_775471, JString, required = false,
                                 default = nil)
  if valid_775471 != nil:
    section.add "X-Amz-Security-Token", valid_775471
  var valid_775472 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775472 = validateParameter(valid_775472, JString, required = false,
                                 default = nil)
  if valid_775472 != nil:
    section.add "X-Amz-Content-Sha256", valid_775472
  var valid_775473 = header.getOrDefault("X-Amz-Algorithm")
  valid_775473 = validateParameter(valid_775473, JString, required = false,
                                 default = nil)
  if valid_775473 != nil:
    section.add "X-Amz-Algorithm", valid_775473
  var valid_775474 = header.getOrDefault("X-Amz-Signature")
  valid_775474 = validateParameter(valid_775474, JString, required = false,
                                 default = nil)
  if valid_775474 != nil:
    section.add "X-Amz-Signature", valid_775474
  var valid_775475 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775475 = validateParameter(valid_775475, JString, required = false,
                                 default = nil)
  if valid_775475 != nil:
    section.add "X-Amz-SignedHeaders", valid_775475
  var valid_775476 = header.getOrDefault("X-Amz-Credential")
  valid_775476 = validateParameter(valid_775476, JString, required = false,
                                 default = nil)
  if valid_775476 != nil:
    section.add "X-Amz-Credential", valid_775476
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775477: Call_GetUpdateConfigurationSetTrackingOptions_775463;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Modifies an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ## 
  let valid = call_775477.validator(path, query, header, formData, body)
  let scheme = call_775477.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775477.url(scheme.get, call_775477.host, call_775477.base,
                         call_775477.route, valid.getOrDefault("path"))
  result = hook(call_775477, url, valid)

proc call*(call_775478: Call_GetUpdateConfigurationSetTrackingOptions_775463;
          ConfigurationSetName: string;
          TrackingOptionsCustomRedirectDomain: string = "";
          Action: string = "UpdateConfigurationSetTrackingOptions";
          Version: string = "2010-12-01"): Recallable =
  ## getUpdateConfigurationSetTrackingOptions
  ## <p>Modifies an association between a configuration set and a custom domain for open and click event tracking. </p> <p>By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
  ##   TrackingOptionsCustomRedirectDomain: string
  ##                                      : <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
  ## The custom subdomain that will be used to redirect email recipients to the Amazon SES event tracking domain.
  ##   Action: string (required)
  ##   ConfigurationSetName: string (required)
  ##                       : The name of the configuration set for which you want to update the custom tracking domain.
  ##   Version: string (required)
  var query_775479 = newJObject()
  add(query_775479, "TrackingOptions.CustomRedirectDomain",
      newJString(TrackingOptionsCustomRedirectDomain))
  add(query_775479, "Action", newJString(Action))
  add(query_775479, "ConfigurationSetName", newJString(ConfigurationSetName))
  add(query_775479, "Version", newJString(Version))
  result = call_775478.call(nil, query_775479, nil, nil, nil)

var getUpdateConfigurationSetTrackingOptions* = Call_GetUpdateConfigurationSetTrackingOptions_775463(
    name: "getUpdateConfigurationSetTrackingOptions", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateConfigurationSetTrackingOptions",
    validator: validate_GetUpdateConfigurationSetTrackingOptions_775464,
    base: "/", url: url_GetUpdateConfigurationSetTrackingOptions_775465,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateCustomVerificationEmailTemplate_775519 = ref object of OpenApiRestCall_772597
proc url_PostUpdateCustomVerificationEmailTemplate_775521(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateCustomVerificationEmailTemplate_775520(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates an existing custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775522 = query.getOrDefault("Action")
  valid_775522 = validateParameter(valid_775522, JString, required = true, default = newJString(
      "UpdateCustomVerificationEmailTemplate"))
  if valid_775522 != nil:
    section.add "Action", valid_775522
  var valid_775523 = query.getOrDefault("Version")
  valid_775523 = validateParameter(valid_775523, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_775523 != nil:
    section.add "Version", valid_775523
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775524 = header.getOrDefault("X-Amz-Date")
  valid_775524 = validateParameter(valid_775524, JString, required = false,
                                 default = nil)
  if valid_775524 != nil:
    section.add "X-Amz-Date", valid_775524
  var valid_775525 = header.getOrDefault("X-Amz-Security-Token")
  valid_775525 = validateParameter(valid_775525, JString, required = false,
                                 default = nil)
  if valid_775525 != nil:
    section.add "X-Amz-Security-Token", valid_775525
  var valid_775526 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775526 = validateParameter(valid_775526, JString, required = false,
                                 default = nil)
  if valid_775526 != nil:
    section.add "X-Amz-Content-Sha256", valid_775526
  var valid_775527 = header.getOrDefault("X-Amz-Algorithm")
  valid_775527 = validateParameter(valid_775527, JString, required = false,
                                 default = nil)
  if valid_775527 != nil:
    section.add "X-Amz-Algorithm", valid_775527
  var valid_775528 = header.getOrDefault("X-Amz-Signature")
  valid_775528 = validateParameter(valid_775528, JString, required = false,
                                 default = nil)
  if valid_775528 != nil:
    section.add "X-Amz-Signature", valid_775528
  var valid_775529 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775529 = validateParameter(valid_775529, JString, required = false,
                                 default = nil)
  if valid_775529 != nil:
    section.add "X-Amz-SignedHeaders", valid_775529
  var valid_775530 = header.getOrDefault("X-Amz-Credential")
  valid_775530 = validateParameter(valid_775530, JString, required = false,
                                 default = nil)
  if valid_775530 != nil:
    section.add "X-Amz-Credential", valid_775530
  result.add "header", section
  ## parameters in `formData` object:
  ##   SuccessRedirectionURL: JString
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   FailureRedirectionURL: JString
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   FromEmailAddress: JString
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateContent: JString
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template that you want to update.
  ##   TemplateSubject: JString
  ##                  : The subject line of the custom verification email.
  section = newJObject()
  var valid_775531 = formData.getOrDefault("SuccessRedirectionURL")
  valid_775531 = validateParameter(valid_775531, JString, required = false,
                                 default = nil)
  if valid_775531 != nil:
    section.add "SuccessRedirectionURL", valid_775531
  var valid_775532 = formData.getOrDefault("FailureRedirectionURL")
  valid_775532 = validateParameter(valid_775532, JString, required = false,
                                 default = nil)
  if valid_775532 != nil:
    section.add "FailureRedirectionURL", valid_775532
  var valid_775533 = formData.getOrDefault("FromEmailAddress")
  valid_775533 = validateParameter(valid_775533, JString, required = false,
                                 default = nil)
  if valid_775533 != nil:
    section.add "FromEmailAddress", valid_775533
  var valid_775534 = formData.getOrDefault("TemplateContent")
  valid_775534 = validateParameter(valid_775534, JString, required = false,
                                 default = nil)
  if valid_775534 != nil:
    section.add "TemplateContent", valid_775534
  assert formData != nil,
        "formData argument is necessary due to required `TemplateName` field"
  var valid_775535 = formData.getOrDefault("TemplateName")
  valid_775535 = validateParameter(valid_775535, JString, required = true,
                                 default = nil)
  if valid_775535 != nil:
    section.add "TemplateName", valid_775535
  var valid_775536 = formData.getOrDefault("TemplateSubject")
  valid_775536 = validateParameter(valid_775536, JString, required = false,
                                 default = nil)
  if valid_775536 != nil:
    section.add "TemplateSubject", valid_775536
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775537: Call_PostUpdateCustomVerificationEmailTemplate_775519;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Updates an existing custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_775537.validator(path, query, header, formData, body)
  let scheme = call_775537.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775537.url(scheme.get, call_775537.host, call_775537.base,
                         call_775537.route, valid.getOrDefault("path"))
  result = hook(call_775537, url, valid)

proc call*(call_775538: Call_PostUpdateCustomVerificationEmailTemplate_775519;
          TemplateName: string; SuccessRedirectionURL: string = "";
          FailureRedirectionURL: string = ""; FromEmailAddress: string = "";
          Action: string = "UpdateCustomVerificationEmailTemplate";
          TemplateContent: string = ""; TemplateSubject: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## postUpdateCustomVerificationEmailTemplate
  ## <p>Updates an existing custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   SuccessRedirectionURL: string
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   FailureRedirectionURL: string
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   FromEmailAddress: string
  ##                   : The email address that the custom verification email is sent from.
  ##   Action: string (required)
  ##   TemplateContent: string
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template that you want to update.
  ##   TemplateSubject: string
  ##                  : The subject line of the custom verification email.
  ##   Version: string (required)
  var query_775539 = newJObject()
  var formData_775540 = newJObject()
  add(formData_775540, "SuccessRedirectionURL", newJString(SuccessRedirectionURL))
  add(formData_775540, "FailureRedirectionURL", newJString(FailureRedirectionURL))
  add(formData_775540, "FromEmailAddress", newJString(FromEmailAddress))
  add(query_775539, "Action", newJString(Action))
  add(formData_775540, "TemplateContent", newJString(TemplateContent))
  add(formData_775540, "TemplateName", newJString(TemplateName))
  add(formData_775540, "TemplateSubject", newJString(TemplateSubject))
  add(query_775539, "Version", newJString(Version))
  result = call_775538.call(nil, query_775539, nil, formData_775540, nil)

var postUpdateCustomVerificationEmailTemplate* = Call_PostUpdateCustomVerificationEmailTemplate_775519(
    name: "postUpdateCustomVerificationEmailTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateCustomVerificationEmailTemplate",
    validator: validate_PostUpdateCustomVerificationEmailTemplate_775520,
    base: "/", url: url_PostUpdateCustomVerificationEmailTemplate_775521,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateCustomVerificationEmailTemplate_775498 = ref object of OpenApiRestCall_772597
proc url_GetUpdateCustomVerificationEmailTemplate_775500(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateCustomVerificationEmailTemplate_775499(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates an existing custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TemplateSubject: JString
  ##                  : The subject line of the custom verification email.
  ##   FromEmailAddress: JString
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateContent: JString
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   Action: JString (required)
  ##   TemplateName: JString (required)
  ##               : The name of the custom verification email template that you want to update.
  ##   SuccessRedirectionURL: JString
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   FailureRedirectionURL: JString
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   Version: JString (required)
  section = newJObject()
  var valid_775501 = query.getOrDefault("TemplateSubject")
  valid_775501 = validateParameter(valid_775501, JString, required = false,
                                 default = nil)
  if valid_775501 != nil:
    section.add "TemplateSubject", valid_775501
  var valid_775502 = query.getOrDefault("FromEmailAddress")
  valid_775502 = validateParameter(valid_775502, JString, required = false,
                                 default = nil)
  if valid_775502 != nil:
    section.add "FromEmailAddress", valid_775502
  var valid_775503 = query.getOrDefault("TemplateContent")
  valid_775503 = validateParameter(valid_775503, JString, required = false,
                                 default = nil)
  if valid_775503 != nil:
    section.add "TemplateContent", valid_775503
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775504 = query.getOrDefault("Action")
  valid_775504 = validateParameter(valid_775504, JString, required = true, default = newJString(
      "UpdateCustomVerificationEmailTemplate"))
  if valid_775504 != nil:
    section.add "Action", valid_775504
  var valid_775505 = query.getOrDefault("TemplateName")
  valid_775505 = validateParameter(valid_775505, JString, required = true,
                                 default = nil)
  if valid_775505 != nil:
    section.add "TemplateName", valid_775505
  var valid_775506 = query.getOrDefault("SuccessRedirectionURL")
  valid_775506 = validateParameter(valid_775506, JString, required = false,
                                 default = nil)
  if valid_775506 != nil:
    section.add "SuccessRedirectionURL", valid_775506
  var valid_775507 = query.getOrDefault("FailureRedirectionURL")
  valid_775507 = validateParameter(valid_775507, JString, required = false,
                                 default = nil)
  if valid_775507 != nil:
    section.add "FailureRedirectionURL", valid_775507
  var valid_775508 = query.getOrDefault("Version")
  valid_775508 = validateParameter(valid_775508, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_775508 != nil:
    section.add "Version", valid_775508
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775509 = header.getOrDefault("X-Amz-Date")
  valid_775509 = validateParameter(valid_775509, JString, required = false,
                                 default = nil)
  if valid_775509 != nil:
    section.add "X-Amz-Date", valid_775509
  var valid_775510 = header.getOrDefault("X-Amz-Security-Token")
  valid_775510 = validateParameter(valid_775510, JString, required = false,
                                 default = nil)
  if valid_775510 != nil:
    section.add "X-Amz-Security-Token", valid_775510
  var valid_775511 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775511 = validateParameter(valid_775511, JString, required = false,
                                 default = nil)
  if valid_775511 != nil:
    section.add "X-Amz-Content-Sha256", valid_775511
  var valid_775512 = header.getOrDefault("X-Amz-Algorithm")
  valid_775512 = validateParameter(valid_775512, JString, required = false,
                                 default = nil)
  if valid_775512 != nil:
    section.add "X-Amz-Algorithm", valid_775512
  var valid_775513 = header.getOrDefault("X-Amz-Signature")
  valid_775513 = validateParameter(valid_775513, JString, required = false,
                                 default = nil)
  if valid_775513 != nil:
    section.add "X-Amz-Signature", valid_775513
  var valid_775514 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775514 = validateParameter(valid_775514, JString, required = false,
                                 default = nil)
  if valid_775514 != nil:
    section.add "X-Amz-SignedHeaders", valid_775514
  var valid_775515 = header.getOrDefault("X-Amz-Credential")
  valid_775515 = validateParameter(valid_775515, JString, required = false,
                                 default = nil)
  if valid_775515 != nil:
    section.add "X-Amz-Credential", valid_775515
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775516: Call_GetUpdateCustomVerificationEmailTemplate_775498;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Updates an existing custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_775516.validator(path, query, header, formData, body)
  let scheme = call_775516.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775516.url(scheme.get, call_775516.host, call_775516.base,
                         call_775516.route, valid.getOrDefault("path"))
  result = hook(call_775516, url, valid)

proc call*(call_775517: Call_GetUpdateCustomVerificationEmailTemplate_775498;
          TemplateName: string; TemplateSubject: string = "";
          FromEmailAddress: string = ""; TemplateContent: string = "";
          Action: string = "UpdateCustomVerificationEmailTemplate";
          SuccessRedirectionURL: string = ""; FailureRedirectionURL: string = "";
          Version: string = "2010-12-01"): Recallable =
  ## getUpdateCustomVerificationEmailTemplate
  ## <p>Updates an existing custom verification email template.</p> <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer Guide</i>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateSubject: string
  ##                  : The subject line of the custom verification email.
  ##   FromEmailAddress: string
  ##                   : The email address that the custom verification email is sent from.
  ##   TemplateContent: string
  ##                  : The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES Developer Guide</i>.
  ##   Action: string (required)
  ##   TemplateName: string (required)
  ##               : The name of the custom verification email template that you want to update.
  ##   SuccessRedirectionURL: string
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
  ##   FailureRedirectionURL: string
  ##                        : The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
  ##   Version: string (required)
  var query_775518 = newJObject()
  add(query_775518, "TemplateSubject", newJString(TemplateSubject))
  add(query_775518, "FromEmailAddress", newJString(FromEmailAddress))
  add(query_775518, "TemplateContent", newJString(TemplateContent))
  add(query_775518, "Action", newJString(Action))
  add(query_775518, "TemplateName", newJString(TemplateName))
  add(query_775518, "SuccessRedirectionURL", newJString(SuccessRedirectionURL))
  add(query_775518, "FailureRedirectionURL", newJString(FailureRedirectionURL))
  add(query_775518, "Version", newJString(Version))
  result = call_775517.call(nil, query_775518, nil, nil, nil)

var getUpdateCustomVerificationEmailTemplate* = Call_GetUpdateCustomVerificationEmailTemplate_775498(
    name: "getUpdateCustomVerificationEmailTemplate", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com",
    route: "/#Action=UpdateCustomVerificationEmailTemplate",
    validator: validate_GetUpdateCustomVerificationEmailTemplate_775499,
    base: "/", url: url_GetUpdateCustomVerificationEmailTemplate_775500,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateReceiptRule_775563 = ref object of OpenApiRestCall_772597
proc url_PostUpdateReceiptRule_775565(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateReceiptRule_775564(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates a receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775566 = query.getOrDefault("Action")
  valid_775566 = validateParameter(valid_775566, JString, required = true,
                                 default = newJString("UpdateReceiptRule"))
  if valid_775566 != nil:
    section.add "Action", valid_775566
  var valid_775567 = query.getOrDefault("Version")
  valid_775567 = validateParameter(valid_775567, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_775567 != nil:
    section.add "Version", valid_775567
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775568 = header.getOrDefault("X-Amz-Date")
  valid_775568 = validateParameter(valid_775568, JString, required = false,
                                 default = nil)
  if valid_775568 != nil:
    section.add "X-Amz-Date", valid_775568
  var valid_775569 = header.getOrDefault("X-Amz-Security-Token")
  valid_775569 = validateParameter(valid_775569, JString, required = false,
                                 default = nil)
  if valid_775569 != nil:
    section.add "X-Amz-Security-Token", valid_775569
  var valid_775570 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775570 = validateParameter(valid_775570, JString, required = false,
                                 default = nil)
  if valid_775570 != nil:
    section.add "X-Amz-Content-Sha256", valid_775570
  var valid_775571 = header.getOrDefault("X-Amz-Algorithm")
  valid_775571 = validateParameter(valid_775571, JString, required = false,
                                 default = nil)
  if valid_775571 != nil:
    section.add "X-Amz-Algorithm", valid_775571
  var valid_775572 = header.getOrDefault("X-Amz-Signature")
  valid_775572 = validateParameter(valid_775572, JString, required = false,
                                 default = nil)
  if valid_775572 != nil:
    section.add "X-Amz-Signature", valid_775572
  var valid_775573 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775573 = validateParameter(valid_775573, JString, required = false,
                                 default = nil)
  if valid_775573 != nil:
    section.add "X-Amz-SignedHeaders", valid_775573
  var valid_775574 = header.getOrDefault("X-Amz-Credential")
  valid_775574 = validateParameter(valid_775574, JString, required = false,
                                 default = nil)
  if valid_775574 != nil:
    section.add "X-Amz-Credential", valid_775574
  result.add "header", section
  ## parameters in `formData` object:
  ##   Rule.Recipients: JArray
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   Rule.Enabled: JString
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   Rule.Actions: JArray
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   Rule.Name: JString
  ##            : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Rule.ScanEnabled: JString
  ##                   : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   Rule.TlsPolicy: JString
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  section = newJObject()
  var valid_775575 = formData.getOrDefault("Rule.Recipients")
  valid_775575 = validateParameter(valid_775575, JArray, required = false,
                                 default = nil)
  if valid_775575 != nil:
    section.add "Rule.Recipients", valid_775575
  var valid_775576 = formData.getOrDefault("Rule.Enabled")
  valid_775576 = validateParameter(valid_775576, JString, required = false,
                                 default = nil)
  if valid_775576 != nil:
    section.add "Rule.Enabled", valid_775576
  assert formData != nil,
        "formData argument is necessary due to required `RuleSetName` field"
  var valid_775577 = formData.getOrDefault("RuleSetName")
  valid_775577 = validateParameter(valid_775577, JString, required = true,
                                 default = nil)
  if valid_775577 != nil:
    section.add "RuleSetName", valid_775577
  var valid_775578 = formData.getOrDefault("Rule.Actions")
  valid_775578 = validateParameter(valid_775578, JArray, required = false,
                                 default = nil)
  if valid_775578 != nil:
    section.add "Rule.Actions", valid_775578
  var valid_775579 = formData.getOrDefault("Rule.Name")
  valid_775579 = validateParameter(valid_775579, JString, required = false,
                                 default = nil)
  if valid_775579 != nil:
    section.add "Rule.Name", valid_775579
  var valid_775580 = formData.getOrDefault("Rule.ScanEnabled")
  valid_775580 = validateParameter(valid_775580, JString, required = false,
                                 default = nil)
  if valid_775580 != nil:
    section.add "Rule.ScanEnabled", valid_775580
  var valid_775581 = formData.getOrDefault("Rule.TlsPolicy")
  valid_775581 = validateParameter(valid_775581, JString, required = false,
                                 default = nil)
  if valid_775581 != nil:
    section.add "Rule.TlsPolicy", valid_775581
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775582: Call_PostUpdateReceiptRule_775563; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates a receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_775582.validator(path, query, header, formData, body)
  let scheme = call_775582.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775582.url(scheme.get, call_775582.host, call_775582.base,
                         call_775582.route, valid.getOrDefault("path"))
  result = hook(call_775582, url, valid)

proc call*(call_775583: Call_PostUpdateReceiptRule_775563; RuleSetName: string;
          RuleRecipients: JsonNode = nil; RuleEnabled: string = "";
          Action: string = "UpdateReceiptRule"; RuleActions: JsonNode = nil;
          RuleName: string = ""; RuleScanEnabled: string = "";
          RuleTlsPolicy: string = ""; Version: string = "2010-12-01"): Recallable =
  ## postUpdateReceiptRule
  ## <p>Updates a receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleRecipients: JArray
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   RuleEnabled: string
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   Action: string (required)
  ##   RuleActions: JArray
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   RuleName: string
  ##           : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   RuleScanEnabled: string
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   RuleTlsPolicy: string
  ##                : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   Version: string (required)
  var query_775584 = newJObject()
  var formData_775585 = newJObject()
  if RuleRecipients != nil:
    formData_775585.add "Rule.Recipients", RuleRecipients
  add(formData_775585, "Rule.Enabled", newJString(RuleEnabled))
  add(formData_775585, "RuleSetName", newJString(RuleSetName))
  add(query_775584, "Action", newJString(Action))
  if RuleActions != nil:
    formData_775585.add "Rule.Actions", RuleActions
  add(formData_775585, "Rule.Name", newJString(RuleName))
  add(formData_775585, "Rule.ScanEnabled", newJString(RuleScanEnabled))
  add(formData_775585, "Rule.TlsPolicy", newJString(RuleTlsPolicy))
  add(query_775584, "Version", newJString(Version))
  result = call_775583.call(nil, query_775584, nil, formData_775585, nil)

var postUpdateReceiptRule* = Call_PostUpdateReceiptRule_775563(
    name: "postUpdateReceiptRule", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=UpdateReceiptRule",
    validator: validate_PostUpdateReceiptRule_775564, base: "/",
    url: url_PostUpdateReceiptRule_775565, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateReceiptRule_775541 = ref object of OpenApiRestCall_772597
proc url_GetUpdateReceiptRule_775543(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateReceiptRule_775542(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates a receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Rule.ScanEnabled: JString
  ##                   : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   Rule.Name: JString
  ##            : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   Rule.Enabled: JString
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   Rule.TlsPolicy: JString
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   RuleSetName: JString (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   Action: JString (required)
  ##   Rule.Actions: JArray
  ##               : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   Rule.Recipients: JArray
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   Version: JString (required)
  section = newJObject()
  var valid_775544 = query.getOrDefault("Rule.ScanEnabled")
  valid_775544 = validateParameter(valid_775544, JString, required = false,
                                 default = nil)
  if valid_775544 != nil:
    section.add "Rule.ScanEnabled", valid_775544
  var valid_775545 = query.getOrDefault("Rule.Name")
  valid_775545 = validateParameter(valid_775545, JString, required = false,
                                 default = nil)
  if valid_775545 != nil:
    section.add "Rule.Name", valid_775545
  var valid_775546 = query.getOrDefault("Rule.Enabled")
  valid_775546 = validateParameter(valid_775546, JString, required = false,
                                 default = nil)
  if valid_775546 != nil:
    section.add "Rule.Enabled", valid_775546
  var valid_775547 = query.getOrDefault("Rule.TlsPolicy")
  valid_775547 = validateParameter(valid_775547, JString, required = false,
                                 default = nil)
  if valid_775547 != nil:
    section.add "Rule.TlsPolicy", valid_775547
  assert query != nil,
        "query argument is necessary due to required `RuleSetName` field"
  var valid_775548 = query.getOrDefault("RuleSetName")
  valid_775548 = validateParameter(valid_775548, JString, required = true,
                                 default = nil)
  if valid_775548 != nil:
    section.add "RuleSetName", valid_775548
  var valid_775549 = query.getOrDefault("Action")
  valid_775549 = validateParameter(valid_775549, JString, required = true,
                                 default = newJString("UpdateReceiptRule"))
  if valid_775549 != nil:
    section.add "Action", valid_775549
  var valid_775550 = query.getOrDefault("Rule.Actions")
  valid_775550 = validateParameter(valid_775550, JArray, required = false,
                                 default = nil)
  if valid_775550 != nil:
    section.add "Rule.Actions", valid_775550
  var valid_775551 = query.getOrDefault("Rule.Recipients")
  valid_775551 = validateParameter(valid_775551, JArray, required = false,
                                 default = nil)
  if valid_775551 != nil:
    section.add "Rule.Recipients", valid_775551
  var valid_775552 = query.getOrDefault("Version")
  valid_775552 = validateParameter(valid_775552, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_775552 != nil:
    section.add "Version", valid_775552
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775553 = header.getOrDefault("X-Amz-Date")
  valid_775553 = validateParameter(valid_775553, JString, required = false,
                                 default = nil)
  if valid_775553 != nil:
    section.add "X-Amz-Date", valid_775553
  var valid_775554 = header.getOrDefault("X-Amz-Security-Token")
  valid_775554 = validateParameter(valid_775554, JString, required = false,
                                 default = nil)
  if valid_775554 != nil:
    section.add "X-Amz-Security-Token", valid_775554
  var valid_775555 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775555 = validateParameter(valid_775555, JString, required = false,
                                 default = nil)
  if valid_775555 != nil:
    section.add "X-Amz-Content-Sha256", valid_775555
  var valid_775556 = header.getOrDefault("X-Amz-Algorithm")
  valid_775556 = validateParameter(valid_775556, JString, required = false,
                                 default = nil)
  if valid_775556 != nil:
    section.add "X-Amz-Algorithm", valid_775556
  var valid_775557 = header.getOrDefault("X-Amz-Signature")
  valid_775557 = validateParameter(valid_775557, JString, required = false,
                                 default = nil)
  if valid_775557 != nil:
    section.add "X-Amz-Signature", valid_775557
  var valid_775558 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775558 = validateParameter(valid_775558, JString, required = false,
                                 default = nil)
  if valid_775558 != nil:
    section.add "X-Amz-SignedHeaders", valid_775558
  var valid_775559 = header.getOrDefault("X-Amz-Credential")
  valid_775559 = validateParameter(valid_775559, JString, required = false,
                                 default = nil)
  if valid_775559 != nil:
    section.add "X-Amz-Credential", valid_775559
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775560: Call_GetUpdateReceiptRule_775541; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates a receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_775560.validator(path, query, header, formData, body)
  let scheme = call_775560.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775560.url(scheme.get, call_775560.host, call_775560.base,
                         call_775560.route, valid.getOrDefault("path"))
  result = hook(call_775560, url, valid)

proc call*(call_775561: Call_GetUpdateReceiptRule_775541; RuleSetName: string;
          RuleScanEnabled: string = ""; RuleName: string = ""; RuleEnabled: string = "";
          RuleTlsPolicy: string = ""; Action: string = "UpdateReceiptRule";
          RuleActions: JsonNode = nil; RuleRecipients: JsonNode = nil;
          Version: string = "2010-12-01"): Recallable =
  ## getUpdateReceiptRule
  ## <p>Updates a receipt rule.</p> <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   RuleScanEnabled: string
  ##                  : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, then messages that this receipt rule applies to are scanned for spam and viruses. The default value is <code>false</code>.
  ##   RuleName: string
  ##           : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## <p>The name of the receipt rule. The name must:</p> <ul> <li> <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>Start and end with a letter or number.</p> </li> <li> <p>Contain less than 64 characters.</p> </li> </ul>
  ##   RuleEnabled: string
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## If <code>true</code>, the receipt rule is active. The default value is <code>false</code>.
  ##   RuleTlsPolicy: string
  ##                : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## Specifies whether Amazon SES should require that incoming email is delivered over a connection encrypted with Transport Layer Security (TLS). If this parameter is set to <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The default is <code>Optional</code>.
  ##   RuleSetName: string (required)
  ##              : The name of the receipt rule set that the receipt rule belongs to.
  ##   Action: string (required)
  ##   RuleActions: JArray
  ##              : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## An ordered list of actions to perform on messages that match at least one of the recipient email addresses or domains specified in the receipt rule.
  ##   RuleRecipients: JArray
  ##                 : <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives mail on behalf of one or more email addresses or domains that you own.</p> <p>Each receipt rule defines a set of email addresses or domains that it applies to. If the email addresses or domains match at least one recipient address of the message, Amazon SES executes all of the receipt rule's actions on the message.</p> <p>For information about setting up receipt rules, see the <a 
  ## href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer Guide</a>.</p>
  ## The recipient domains and email addresses that the receipt rule applies to. If this field is not specified, this rule will match all recipients under all verified domains.
  ##   Version: string (required)
  var query_775562 = newJObject()
  add(query_775562, "Rule.ScanEnabled", newJString(RuleScanEnabled))
  add(query_775562, "Rule.Name", newJString(RuleName))
  add(query_775562, "Rule.Enabled", newJString(RuleEnabled))
  add(query_775562, "Rule.TlsPolicy", newJString(RuleTlsPolicy))
  add(query_775562, "RuleSetName", newJString(RuleSetName))
  add(query_775562, "Action", newJString(Action))
  if RuleActions != nil:
    query_775562.add "Rule.Actions", RuleActions
  if RuleRecipients != nil:
    query_775562.add "Rule.Recipients", RuleRecipients
  add(query_775562, "Version", newJString(Version))
  result = call_775561.call(nil, query_775562, nil, nil, nil)

var getUpdateReceiptRule* = Call_GetUpdateReceiptRule_775541(
    name: "getUpdateReceiptRule", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=UpdateReceiptRule",
    validator: validate_GetUpdateReceiptRule_775542, base: "/",
    url: url_GetUpdateReceiptRule_775543, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateTemplate_775605 = ref object of OpenApiRestCall_772597
proc url_PostUpdateTemplate_775607(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateTemplate_775606(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775608 = query.getOrDefault("Action")
  valid_775608 = validateParameter(valid_775608, JString, required = true,
                                 default = newJString("UpdateTemplate"))
  if valid_775608 != nil:
    section.add "Action", valid_775608
  var valid_775609 = query.getOrDefault("Version")
  valid_775609 = validateParameter(valid_775609, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_775609 != nil:
    section.add "Version", valid_775609
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775610 = header.getOrDefault("X-Amz-Date")
  valid_775610 = validateParameter(valid_775610, JString, required = false,
                                 default = nil)
  if valid_775610 != nil:
    section.add "X-Amz-Date", valid_775610
  var valid_775611 = header.getOrDefault("X-Amz-Security-Token")
  valid_775611 = validateParameter(valid_775611, JString, required = false,
                                 default = nil)
  if valid_775611 != nil:
    section.add "X-Amz-Security-Token", valid_775611
  var valid_775612 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775612 = validateParameter(valid_775612, JString, required = false,
                                 default = nil)
  if valid_775612 != nil:
    section.add "X-Amz-Content-Sha256", valid_775612
  var valid_775613 = header.getOrDefault("X-Amz-Algorithm")
  valid_775613 = validateParameter(valid_775613, JString, required = false,
                                 default = nil)
  if valid_775613 != nil:
    section.add "X-Amz-Algorithm", valid_775613
  var valid_775614 = header.getOrDefault("X-Amz-Signature")
  valid_775614 = validateParameter(valid_775614, JString, required = false,
                                 default = nil)
  if valid_775614 != nil:
    section.add "X-Amz-Signature", valid_775614
  var valid_775615 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775615 = validateParameter(valid_775615, JString, required = false,
                                 default = nil)
  if valid_775615 != nil:
    section.add "X-Amz-SignedHeaders", valid_775615
  var valid_775616 = header.getOrDefault("X-Amz-Credential")
  valid_775616 = validateParameter(valid_775616, JString, required = false,
                                 default = nil)
  if valid_775616 != nil:
    section.add "X-Amz-Credential", valid_775616
  result.add "header", section
  ## parameters in `formData` object:
  ##   Template.HtmlPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   Template.TemplateName: JString
  ##                        : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   Template.TextPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Template.SubjectPart: JString
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  section = newJObject()
  var valid_775617 = formData.getOrDefault("Template.HtmlPart")
  valid_775617 = validateParameter(valid_775617, JString, required = false,
                                 default = nil)
  if valid_775617 != nil:
    section.add "Template.HtmlPart", valid_775617
  var valid_775618 = formData.getOrDefault("Template.TemplateName")
  valid_775618 = validateParameter(valid_775618, JString, required = false,
                                 default = nil)
  if valid_775618 != nil:
    section.add "Template.TemplateName", valid_775618
  var valid_775619 = formData.getOrDefault("Template.TextPart")
  valid_775619 = validateParameter(valid_775619, JString, required = false,
                                 default = nil)
  if valid_775619 != nil:
    section.add "Template.TextPart", valid_775619
  var valid_775620 = formData.getOrDefault("Template.SubjectPart")
  valid_775620 = validateParameter(valid_775620, JString, required = false,
                                 default = nil)
  if valid_775620 != nil:
    section.add "Template.SubjectPart", valid_775620
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775621: Call_PostUpdateTemplate_775605; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_775621.validator(path, query, header, formData, body)
  let scheme = call_775621.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775621.url(scheme.get, call_775621.host, call_775621.base,
                         call_775621.route, valid.getOrDefault("path"))
  result = hook(call_775621, url, valid)

proc call*(call_775622: Call_PostUpdateTemplate_775605;
          Action: string = "UpdateTemplate"; TemplateHtmlPart: string = "";
          TemplateTemplateName: string = ""; TemplateTextPart: string = "";
          Version: string = "2010-12-01"; TemplateSubjectPart: string = ""): Recallable =
  ## postUpdateTemplate
  ## <p>Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   TemplateHtmlPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   TemplateTemplateName: string
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   TemplateTextPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Version: string (required)
  ##   TemplateSubjectPart: string
  ##                      : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  var query_775623 = newJObject()
  var formData_775624 = newJObject()
  add(query_775623, "Action", newJString(Action))
  add(formData_775624, "Template.HtmlPart", newJString(TemplateHtmlPart))
  add(formData_775624, "Template.TemplateName", newJString(TemplateTemplateName))
  add(formData_775624, "Template.TextPart", newJString(TemplateTextPart))
  add(query_775623, "Version", newJString(Version))
  add(formData_775624, "Template.SubjectPart", newJString(TemplateSubjectPart))
  result = call_775622.call(nil, query_775623, nil, formData_775624, nil)

var postUpdateTemplate* = Call_PostUpdateTemplate_775605(
    name: "postUpdateTemplate", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=UpdateTemplate",
    validator: validate_PostUpdateTemplate_775606, base: "/",
    url: url_PostUpdateTemplate_775607, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateTemplate_775586 = ref object of OpenApiRestCall_772597
proc url_GetUpdateTemplate_775588(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateTemplate_775587(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Template.TemplateName: JString
  ##                        : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   Action: JString (required)
  ##   Template.SubjectPart: JString
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  ##   Template.HtmlPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   Template.TextPart: JString
  ##                    : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Version: JString (required)
  section = newJObject()
  var valid_775589 = query.getOrDefault("Template.TemplateName")
  valid_775589 = validateParameter(valid_775589, JString, required = false,
                                 default = nil)
  if valid_775589 != nil:
    section.add "Template.TemplateName", valid_775589
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775590 = query.getOrDefault("Action")
  valid_775590 = validateParameter(valid_775590, JString, required = true,
                                 default = newJString("UpdateTemplate"))
  if valid_775590 != nil:
    section.add "Action", valid_775590
  var valid_775591 = query.getOrDefault("Template.SubjectPart")
  valid_775591 = validateParameter(valid_775591, JString, required = false,
                                 default = nil)
  if valid_775591 != nil:
    section.add "Template.SubjectPart", valid_775591
  var valid_775592 = query.getOrDefault("Template.HtmlPart")
  valid_775592 = validateParameter(valid_775592, JString, required = false,
                                 default = nil)
  if valid_775592 != nil:
    section.add "Template.HtmlPart", valid_775592
  var valid_775593 = query.getOrDefault("Template.TextPart")
  valid_775593 = validateParameter(valid_775593, JString, required = false,
                                 default = nil)
  if valid_775593 != nil:
    section.add "Template.TextPart", valid_775593
  var valid_775594 = query.getOrDefault("Version")
  valid_775594 = validateParameter(valid_775594, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_775594 != nil:
    section.add "Version", valid_775594
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775595 = header.getOrDefault("X-Amz-Date")
  valid_775595 = validateParameter(valid_775595, JString, required = false,
                                 default = nil)
  if valid_775595 != nil:
    section.add "X-Amz-Date", valid_775595
  var valid_775596 = header.getOrDefault("X-Amz-Security-Token")
  valid_775596 = validateParameter(valid_775596, JString, required = false,
                                 default = nil)
  if valid_775596 != nil:
    section.add "X-Amz-Security-Token", valid_775596
  var valid_775597 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775597 = validateParameter(valid_775597, JString, required = false,
                                 default = nil)
  if valid_775597 != nil:
    section.add "X-Amz-Content-Sha256", valid_775597
  var valid_775598 = header.getOrDefault("X-Amz-Algorithm")
  valid_775598 = validateParameter(valid_775598, JString, required = false,
                                 default = nil)
  if valid_775598 != nil:
    section.add "X-Amz-Algorithm", valid_775598
  var valid_775599 = header.getOrDefault("X-Amz-Signature")
  valid_775599 = validateParameter(valid_775599, JString, required = false,
                                 default = nil)
  if valid_775599 != nil:
    section.add "X-Amz-Signature", valid_775599
  var valid_775600 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775600 = validateParameter(valid_775600, JString, required = false,
                                 default = nil)
  if valid_775600 != nil:
    section.add "X-Amz-SignedHeaders", valid_775600
  var valid_775601 = header.getOrDefault("X-Amz-Credential")
  valid_775601 = validateParameter(valid_775601, JString, required = false,
                                 default = nil)
  if valid_775601 != nil:
    section.add "X-Amz-Credential", valid_775601
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775602: Call_GetUpdateTemplate_775586; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_775602.validator(path, query, header, formData, body)
  let scheme = call_775602.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775602.url(scheme.get, call_775602.host, call_775602.base,
                         call_775602.route, valid.getOrDefault("path"))
  result = hook(call_775602, url, valid)

proc call*(call_775603: Call_GetUpdateTemplate_775586;
          TemplateTemplateName: string = ""; Action: string = "UpdateTemplate";
          TemplateSubjectPart: string = ""; TemplateHtmlPart: string = "";
          TemplateTextPart: string = ""; Version: string = "2010-12-01"): Recallable =
  ## getUpdateTemplate
  ## <p>Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.</p> <p>You can execute this operation no more than once per second.</p>
  ##   TemplateTemplateName: string
  ##                       : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
  ##   Action: string (required)
  ##   TemplateSubjectPart: string
  ##                      : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The subject line of the email.
  ##   TemplateHtmlPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The HTML body of the email.
  ##   TemplateTextPart: string
  ##                   : The content of the email, composed of a subject line, an HTML part, and a text-only part.
  ## The email body that will be visible to recipients whose email clients do not display HTML.
  ##   Version: string (required)
  var query_775604 = newJObject()
  add(query_775604, "Template.TemplateName", newJString(TemplateTemplateName))
  add(query_775604, "Action", newJString(Action))
  add(query_775604, "Template.SubjectPart", newJString(TemplateSubjectPart))
  add(query_775604, "Template.HtmlPart", newJString(TemplateHtmlPart))
  add(query_775604, "Template.TextPart", newJString(TemplateTextPart))
  add(query_775604, "Version", newJString(Version))
  result = call_775603.call(nil, query_775604, nil, nil, nil)

var getUpdateTemplate* = Call_GetUpdateTemplate_775586(name: "getUpdateTemplate",
    meth: HttpMethod.HttpGet, host: "email.amazonaws.com",
    route: "/#Action=UpdateTemplate", validator: validate_GetUpdateTemplate_775587,
    base: "/", url: url_GetUpdateTemplate_775588,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostVerifyDomainDkim_775641 = ref object of OpenApiRestCall_772597
proc url_PostVerifyDomainDkim_775643(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostVerifyDomainDkim_775642(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a set of DKIM tokens for a domain identity.</p> <important> <p>When you execute the <code>VerifyDomainDkim</code> operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the <code>VerifyDomainIdentity</code> operation. However, you can't send email from the domain until you either successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">verify it</a> or you successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">set up DKIM for it</a>.</p> </important> <p>You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM.</p> <p>To create the CNAME records for DKIM authentication, use the following values:</p> <ul> <li> <p> <b>Name</b>: <i>token</i>._domainkey.<i>example.com</i> </p> </li> <li> <p> <b>Type</b>: CNAME</p> </li> <li> <p> <b>Value</b>: <i>token</i>.dkim.amazonses.com</p> </li> </ul> <p>In the preceding example, replace <i>token</i> with one of the tokens that are generated when you execute this operation. Replace <i>example.com</i> with your domain. Repeat this process for each token that's generated by this operation.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775644 = query.getOrDefault("Action")
  valid_775644 = validateParameter(valid_775644, JString, required = true,
                                 default = newJString("VerifyDomainDkim"))
  if valid_775644 != nil:
    section.add "Action", valid_775644
  var valid_775645 = query.getOrDefault("Version")
  valid_775645 = validateParameter(valid_775645, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_775645 != nil:
    section.add "Version", valid_775645
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775646 = header.getOrDefault("X-Amz-Date")
  valid_775646 = validateParameter(valid_775646, JString, required = false,
                                 default = nil)
  if valid_775646 != nil:
    section.add "X-Amz-Date", valid_775646
  var valid_775647 = header.getOrDefault("X-Amz-Security-Token")
  valid_775647 = validateParameter(valid_775647, JString, required = false,
                                 default = nil)
  if valid_775647 != nil:
    section.add "X-Amz-Security-Token", valid_775647
  var valid_775648 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775648 = validateParameter(valid_775648, JString, required = false,
                                 default = nil)
  if valid_775648 != nil:
    section.add "X-Amz-Content-Sha256", valid_775648
  var valid_775649 = header.getOrDefault("X-Amz-Algorithm")
  valid_775649 = validateParameter(valid_775649, JString, required = false,
                                 default = nil)
  if valid_775649 != nil:
    section.add "X-Amz-Algorithm", valid_775649
  var valid_775650 = header.getOrDefault("X-Amz-Signature")
  valid_775650 = validateParameter(valid_775650, JString, required = false,
                                 default = nil)
  if valid_775650 != nil:
    section.add "X-Amz-Signature", valid_775650
  var valid_775651 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775651 = validateParameter(valid_775651, JString, required = false,
                                 default = nil)
  if valid_775651 != nil:
    section.add "X-Amz-SignedHeaders", valid_775651
  var valid_775652 = header.getOrDefault("X-Amz-Credential")
  valid_775652 = validateParameter(valid_775652, JString, required = false,
                                 default = nil)
  if valid_775652 != nil:
    section.add "X-Amz-Credential", valid_775652
  result.add "header", section
  ## parameters in `formData` object:
  ##   Domain: JString (required)
  ##         : The name of the domain to be verified for Easy DKIM signing.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Domain` field"
  var valid_775653 = formData.getOrDefault("Domain")
  valid_775653 = validateParameter(valid_775653, JString, required = true,
                                 default = nil)
  if valid_775653 != nil:
    section.add "Domain", valid_775653
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775654: Call_PostVerifyDomainDkim_775641; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a set of DKIM tokens for a domain identity.</p> <important> <p>When you execute the <code>VerifyDomainDkim</code> operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the <code>VerifyDomainIdentity</code> operation. However, you can't send email from the domain until you either successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">verify it</a> or you successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">set up DKIM for it</a>.</p> </important> <p>You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM.</p> <p>To create the CNAME records for DKIM authentication, use the following values:</p> <ul> <li> <p> <b>Name</b>: <i>token</i>._domainkey.<i>example.com</i> </p> </li> <li> <p> <b>Type</b>: CNAME</p> </li> <li> <p> <b>Value</b>: <i>token</i>.dkim.amazonses.com</p> </li> </ul> <p>In the preceding example, replace <i>token</i> with one of the tokens that are generated when you execute this operation. Replace <i>example.com</i> with your domain. Repeat this process for each token that's generated by this operation.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_775654.validator(path, query, header, formData, body)
  let scheme = call_775654.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775654.url(scheme.get, call_775654.host, call_775654.base,
                         call_775654.route, valid.getOrDefault("path"))
  result = hook(call_775654, url, valid)

proc call*(call_775655: Call_PostVerifyDomainDkim_775641; Domain: string;
          Action: string = "VerifyDomainDkim"; Version: string = "2010-12-01"): Recallable =
  ## postVerifyDomainDkim
  ## <p>Returns a set of DKIM tokens for a domain identity.</p> <important> <p>When you execute the <code>VerifyDomainDkim</code> operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the <code>VerifyDomainIdentity</code> operation. However, you can't send email from the domain until you either successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">verify it</a> or you successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">set up DKIM for it</a>.</p> </important> <p>You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM.</p> <p>To create the CNAME records for DKIM authentication, use the following values:</p> <ul> <li> <p> <b>Name</b>: <i>token</i>._domainkey.<i>example.com</i> </p> </li> <li> <p> <b>Type</b>: CNAME</p> </li> <li> <p> <b>Value</b>: <i>token</i>.dkim.amazonses.com</p> </li> </ul> <p>In the preceding example, replace <i>token</i> with one of the tokens that are generated when you execute this operation. Replace <i>example.com</i> with your domain. Repeat this process for each token that's generated by this operation.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Domain: string (required)
  ##         : The name of the domain to be verified for Easy DKIM signing.
  ##   Version: string (required)
  var query_775656 = newJObject()
  var formData_775657 = newJObject()
  add(query_775656, "Action", newJString(Action))
  add(formData_775657, "Domain", newJString(Domain))
  add(query_775656, "Version", newJString(Version))
  result = call_775655.call(nil, query_775656, nil, formData_775657, nil)

var postVerifyDomainDkim* = Call_PostVerifyDomainDkim_775641(
    name: "postVerifyDomainDkim", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=VerifyDomainDkim",
    validator: validate_PostVerifyDomainDkim_775642, base: "/",
    url: url_PostVerifyDomainDkim_775643, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetVerifyDomainDkim_775625 = ref object of OpenApiRestCall_772597
proc url_GetVerifyDomainDkim_775627(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetVerifyDomainDkim_775626(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Returns a set of DKIM tokens for a domain identity.</p> <important> <p>When you execute the <code>VerifyDomainDkim</code> operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the <code>VerifyDomainIdentity</code> operation. However, you can't send email from the domain until you either successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">verify it</a> or you successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">set up DKIM for it</a>.</p> </important> <p>You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM.</p> <p>To create the CNAME records for DKIM authentication, use the following values:</p> <ul> <li> <p> <b>Name</b>: <i>token</i>._domainkey.<i>example.com</i> </p> </li> <li> <p> <b>Type</b>: CNAME</p> </li> <li> <p> <b>Value</b>: <i>token</i>.dkim.amazonses.com</p> </li> </ul> <p>In the preceding example, replace <i>token</i> with one of the tokens that are generated when you execute this operation. Replace <i>example.com</i> with your domain. Repeat this process for each token that's generated by this operation.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Domain: JString (required)
  ##         : The name of the domain to be verified for Easy DKIM signing.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775628 = query.getOrDefault("Action")
  valid_775628 = validateParameter(valid_775628, JString, required = true,
                                 default = newJString("VerifyDomainDkim"))
  if valid_775628 != nil:
    section.add "Action", valid_775628
  var valid_775629 = query.getOrDefault("Domain")
  valid_775629 = validateParameter(valid_775629, JString, required = true,
                                 default = nil)
  if valid_775629 != nil:
    section.add "Domain", valid_775629
  var valid_775630 = query.getOrDefault("Version")
  valid_775630 = validateParameter(valid_775630, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_775630 != nil:
    section.add "Version", valid_775630
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775631 = header.getOrDefault("X-Amz-Date")
  valid_775631 = validateParameter(valid_775631, JString, required = false,
                                 default = nil)
  if valid_775631 != nil:
    section.add "X-Amz-Date", valid_775631
  var valid_775632 = header.getOrDefault("X-Amz-Security-Token")
  valid_775632 = validateParameter(valid_775632, JString, required = false,
                                 default = nil)
  if valid_775632 != nil:
    section.add "X-Amz-Security-Token", valid_775632
  var valid_775633 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775633 = validateParameter(valid_775633, JString, required = false,
                                 default = nil)
  if valid_775633 != nil:
    section.add "X-Amz-Content-Sha256", valid_775633
  var valid_775634 = header.getOrDefault("X-Amz-Algorithm")
  valid_775634 = validateParameter(valid_775634, JString, required = false,
                                 default = nil)
  if valid_775634 != nil:
    section.add "X-Amz-Algorithm", valid_775634
  var valid_775635 = header.getOrDefault("X-Amz-Signature")
  valid_775635 = validateParameter(valid_775635, JString, required = false,
                                 default = nil)
  if valid_775635 != nil:
    section.add "X-Amz-Signature", valid_775635
  var valid_775636 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775636 = validateParameter(valid_775636, JString, required = false,
                                 default = nil)
  if valid_775636 != nil:
    section.add "X-Amz-SignedHeaders", valid_775636
  var valid_775637 = header.getOrDefault("X-Amz-Credential")
  valid_775637 = validateParameter(valid_775637, JString, required = false,
                                 default = nil)
  if valid_775637 != nil:
    section.add "X-Amz-Credential", valid_775637
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775638: Call_GetVerifyDomainDkim_775625; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a set of DKIM tokens for a domain identity.</p> <important> <p>When you execute the <code>VerifyDomainDkim</code> operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the <code>VerifyDomainIdentity</code> operation. However, you can't send email from the domain until you either successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">verify it</a> or you successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">set up DKIM for it</a>.</p> </important> <p>You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM.</p> <p>To create the CNAME records for DKIM authentication, use the following values:</p> <ul> <li> <p> <b>Name</b>: <i>token</i>._domainkey.<i>example.com</i> </p> </li> <li> <p> <b>Type</b>: CNAME</p> </li> <li> <p> <b>Value</b>: <i>token</i>.dkim.amazonses.com</p> </li> </ul> <p>In the preceding example, replace <i>token</i> with one of the tokens that are generated when you execute this operation. Replace <i>example.com</i> with your domain. Repeat this process for each token that's generated by this operation.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_775638.validator(path, query, header, formData, body)
  let scheme = call_775638.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775638.url(scheme.get, call_775638.host, call_775638.base,
                         call_775638.route, valid.getOrDefault("path"))
  result = hook(call_775638, url, valid)

proc call*(call_775639: Call_GetVerifyDomainDkim_775625; Domain: string;
          Action: string = "VerifyDomainDkim"; Version: string = "2010-12-01"): Recallable =
  ## getVerifyDomainDkim
  ## <p>Returns a set of DKIM tokens for a domain identity.</p> <important> <p>When you execute the <code>VerifyDomainDkim</code> operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the <code>VerifyDomainIdentity</code> operation. However, you can't send email from the domain until you either successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">verify it</a> or you successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">set up DKIM for it</a>.</p> </important> <p>You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM.</p> <p>To create the CNAME records for DKIM authentication, use the following values:</p> <ul> <li> <p> <b>Name</b>: <i>token</i>._domainkey.<i>example.com</i> </p> </li> <li> <p> <b>Type</b>: CNAME</p> </li> <li> <p> <b>Value</b>: <i>token</i>.dkim.amazonses.com</p> </li> </ul> <p>In the preceding example, replace <i>token</i> with one of the tokens that are generated when you execute this operation. Replace <i>example.com</i> with your domain. Repeat this process for each token that's generated by this operation.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Domain: string (required)
  ##         : The name of the domain to be verified for Easy DKIM signing.
  ##   Version: string (required)
  var query_775640 = newJObject()
  add(query_775640, "Action", newJString(Action))
  add(query_775640, "Domain", newJString(Domain))
  add(query_775640, "Version", newJString(Version))
  result = call_775639.call(nil, query_775640, nil, nil, nil)

var getVerifyDomainDkim* = Call_GetVerifyDomainDkim_775625(
    name: "getVerifyDomainDkim", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=VerifyDomainDkim",
    validator: validate_GetVerifyDomainDkim_775626, base: "/",
    url: url_GetVerifyDomainDkim_775627, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostVerifyDomainIdentity_775674 = ref object of OpenApiRestCall_772597
proc url_PostVerifyDomainIdentity_775676(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostVerifyDomainIdentity_775675(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds a domain to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. For more information about verifying domains, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775677 = query.getOrDefault("Action")
  valid_775677 = validateParameter(valid_775677, JString, required = true,
                                 default = newJString("VerifyDomainIdentity"))
  if valid_775677 != nil:
    section.add "Action", valid_775677
  var valid_775678 = query.getOrDefault("Version")
  valid_775678 = validateParameter(valid_775678, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_775678 != nil:
    section.add "Version", valid_775678
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775679 = header.getOrDefault("X-Amz-Date")
  valid_775679 = validateParameter(valid_775679, JString, required = false,
                                 default = nil)
  if valid_775679 != nil:
    section.add "X-Amz-Date", valid_775679
  var valid_775680 = header.getOrDefault("X-Amz-Security-Token")
  valid_775680 = validateParameter(valid_775680, JString, required = false,
                                 default = nil)
  if valid_775680 != nil:
    section.add "X-Amz-Security-Token", valid_775680
  var valid_775681 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775681 = validateParameter(valid_775681, JString, required = false,
                                 default = nil)
  if valid_775681 != nil:
    section.add "X-Amz-Content-Sha256", valid_775681
  var valid_775682 = header.getOrDefault("X-Amz-Algorithm")
  valid_775682 = validateParameter(valid_775682, JString, required = false,
                                 default = nil)
  if valid_775682 != nil:
    section.add "X-Amz-Algorithm", valid_775682
  var valid_775683 = header.getOrDefault("X-Amz-Signature")
  valid_775683 = validateParameter(valid_775683, JString, required = false,
                                 default = nil)
  if valid_775683 != nil:
    section.add "X-Amz-Signature", valid_775683
  var valid_775684 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775684 = validateParameter(valid_775684, JString, required = false,
                                 default = nil)
  if valid_775684 != nil:
    section.add "X-Amz-SignedHeaders", valid_775684
  var valid_775685 = header.getOrDefault("X-Amz-Credential")
  valid_775685 = validateParameter(valid_775685, JString, required = false,
                                 default = nil)
  if valid_775685 != nil:
    section.add "X-Amz-Credential", valid_775685
  result.add "header", section
  ## parameters in `formData` object:
  ##   Domain: JString (required)
  ##         : The domain to be verified.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Domain` field"
  var valid_775686 = formData.getOrDefault("Domain")
  valid_775686 = validateParameter(valid_775686, JString, required = true,
                                 default = nil)
  if valid_775686 != nil:
    section.add "Domain", valid_775686
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775687: Call_PostVerifyDomainIdentity_775674; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds a domain to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. For more information about verifying domains, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_775687.validator(path, query, header, formData, body)
  let scheme = call_775687.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775687.url(scheme.get, call_775687.host, call_775687.base,
                         call_775687.route, valid.getOrDefault("path"))
  result = hook(call_775687, url, valid)

proc call*(call_775688: Call_PostVerifyDomainIdentity_775674; Domain: string;
          Action: string = "VerifyDomainIdentity"; Version: string = "2010-12-01"): Recallable =
  ## postVerifyDomainIdentity
  ## <p>Adds a domain to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. For more information about verifying domains, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Domain: string (required)
  ##         : The domain to be verified.
  ##   Version: string (required)
  var query_775689 = newJObject()
  var formData_775690 = newJObject()
  add(query_775689, "Action", newJString(Action))
  add(formData_775690, "Domain", newJString(Domain))
  add(query_775689, "Version", newJString(Version))
  result = call_775688.call(nil, query_775689, nil, formData_775690, nil)

var postVerifyDomainIdentity* = Call_PostVerifyDomainIdentity_775674(
    name: "postVerifyDomainIdentity", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=VerifyDomainIdentity",
    validator: validate_PostVerifyDomainIdentity_775675, base: "/",
    url: url_PostVerifyDomainIdentity_775676, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetVerifyDomainIdentity_775658 = ref object of OpenApiRestCall_772597
proc url_GetVerifyDomainIdentity_775660(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetVerifyDomainIdentity_775659(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds a domain to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. For more information about verifying domains, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Domain: JString (required)
  ##         : The domain to be verified.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775661 = query.getOrDefault("Action")
  valid_775661 = validateParameter(valid_775661, JString, required = true,
                                 default = newJString("VerifyDomainIdentity"))
  if valid_775661 != nil:
    section.add "Action", valid_775661
  var valid_775662 = query.getOrDefault("Domain")
  valid_775662 = validateParameter(valid_775662, JString, required = true,
                                 default = nil)
  if valid_775662 != nil:
    section.add "Domain", valid_775662
  var valid_775663 = query.getOrDefault("Version")
  valid_775663 = validateParameter(valid_775663, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_775663 != nil:
    section.add "Version", valid_775663
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775664 = header.getOrDefault("X-Amz-Date")
  valid_775664 = validateParameter(valid_775664, JString, required = false,
                                 default = nil)
  if valid_775664 != nil:
    section.add "X-Amz-Date", valid_775664
  var valid_775665 = header.getOrDefault("X-Amz-Security-Token")
  valid_775665 = validateParameter(valid_775665, JString, required = false,
                                 default = nil)
  if valid_775665 != nil:
    section.add "X-Amz-Security-Token", valid_775665
  var valid_775666 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775666 = validateParameter(valid_775666, JString, required = false,
                                 default = nil)
  if valid_775666 != nil:
    section.add "X-Amz-Content-Sha256", valid_775666
  var valid_775667 = header.getOrDefault("X-Amz-Algorithm")
  valid_775667 = validateParameter(valid_775667, JString, required = false,
                                 default = nil)
  if valid_775667 != nil:
    section.add "X-Amz-Algorithm", valid_775667
  var valid_775668 = header.getOrDefault("X-Amz-Signature")
  valid_775668 = validateParameter(valid_775668, JString, required = false,
                                 default = nil)
  if valid_775668 != nil:
    section.add "X-Amz-Signature", valid_775668
  var valid_775669 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775669 = validateParameter(valid_775669, JString, required = false,
                                 default = nil)
  if valid_775669 != nil:
    section.add "X-Amz-SignedHeaders", valid_775669
  var valid_775670 = header.getOrDefault("X-Amz-Credential")
  valid_775670 = validateParameter(valid_775670, JString, required = false,
                                 default = nil)
  if valid_775670 != nil:
    section.add "X-Amz-Credential", valid_775670
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775671: Call_GetVerifyDomainIdentity_775658; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds a domain to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. For more information about verifying domains, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_775671.validator(path, query, header, formData, body)
  let scheme = call_775671.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775671.url(scheme.get, call_775671.host, call_775671.base,
                         call_775671.route, valid.getOrDefault("path"))
  result = hook(call_775671, url, valid)

proc call*(call_775672: Call_GetVerifyDomainIdentity_775658; Domain: string;
          Action: string = "VerifyDomainIdentity"; Version: string = "2010-12-01"): Recallable =
  ## getVerifyDomainIdentity
  ## <p>Adds a domain to the list of identities for your Amazon SES account in the current AWS Region and attempts to verify it. For more information about verifying domains, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email Addresses and Domains</a> in the <i>Amazon SES Developer Guide.</i> </p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   Domain: string (required)
  ##         : The domain to be verified.
  ##   Version: string (required)
  var query_775673 = newJObject()
  add(query_775673, "Action", newJString(Action))
  add(query_775673, "Domain", newJString(Domain))
  add(query_775673, "Version", newJString(Version))
  result = call_775672.call(nil, query_775673, nil, nil, nil)

var getVerifyDomainIdentity* = Call_GetVerifyDomainIdentity_775658(
    name: "getVerifyDomainIdentity", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=VerifyDomainIdentity",
    validator: validate_GetVerifyDomainIdentity_775659, base: "/",
    url: url_GetVerifyDomainIdentity_775660, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostVerifyEmailAddress_775707 = ref object of OpenApiRestCall_772597
proc url_PostVerifyEmailAddress_775709(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostVerifyEmailAddress_775708(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deprecated. Use the <code>VerifyEmailIdentity</code> operation to verify a new email address.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775710 = query.getOrDefault("Action")
  valid_775710 = validateParameter(valid_775710, JString, required = true,
                                 default = newJString("VerifyEmailAddress"))
  if valid_775710 != nil:
    section.add "Action", valid_775710
  var valid_775711 = query.getOrDefault("Version")
  valid_775711 = validateParameter(valid_775711, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_775711 != nil:
    section.add "Version", valid_775711
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775712 = header.getOrDefault("X-Amz-Date")
  valid_775712 = validateParameter(valid_775712, JString, required = false,
                                 default = nil)
  if valid_775712 != nil:
    section.add "X-Amz-Date", valid_775712
  var valid_775713 = header.getOrDefault("X-Amz-Security-Token")
  valid_775713 = validateParameter(valid_775713, JString, required = false,
                                 default = nil)
  if valid_775713 != nil:
    section.add "X-Amz-Security-Token", valid_775713
  var valid_775714 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775714 = validateParameter(valid_775714, JString, required = false,
                                 default = nil)
  if valid_775714 != nil:
    section.add "X-Amz-Content-Sha256", valid_775714
  var valid_775715 = header.getOrDefault("X-Amz-Algorithm")
  valid_775715 = validateParameter(valid_775715, JString, required = false,
                                 default = nil)
  if valid_775715 != nil:
    section.add "X-Amz-Algorithm", valid_775715
  var valid_775716 = header.getOrDefault("X-Amz-Signature")
  valid_775716 = validateParameter(valid_775716, JString, required = false,
                                 default = nil)
  if valid_775716 != nil:
    section.add "X-Amz-Signature", valid_775716
  var valid_775717 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775717 = validateParameter(valid_775717, JString, required = false,
                                 default = nil)
  if valid_775717 != nil:
    section.add "X-Amz-SignedHeaders", valid_775717
  var valid_775718 = header.getOrDefault("X-Amz-Credential")
  valid_775718 = validateParameter(valid_775718, JString, required = false,
                                 default = nil)
  if valid_775718 != nil:
    section.add "X-Amz-Credential", valid_775718
  result.add "header", section
  ## parameters in `formData` object:
  ##   EmailAddress: JString (required)
  ##               : The email address to be verified.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `EmailAddress` field"
  var valid_775719 = formData.getOrDefault("EmailAddress")
  valid_775719 = validateParameter(valid_775719, JString, required = true,
                                 default = nil)
  if valid_775719 != nil:
    section.add "EmailAddress", valid_775719
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775720: Call_PostVerifyEmailAddress_775707; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deprecated. Use the <code>VerifyEmailIdentity</code> operation to verify a new email address.
  ## 
  let valid = call_775720.validator(path, query, header, formData, body)
  let scheme = call_775720.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775720.url(scheme.get, call_775720.host, call_775720.base,
                         call_775720.route, valid.getOrDefault("path"))
  result = hook(call_775720, url, valid)

proc call*(call_775721: Call_PostVerifyEmailAddress_775707; EmailAddress: string;
          Action: string = "VerifyEmailAddress"; Version: string = "2010-12-01"): Recallable =
  ## postVerifyEmailAddress
  ## Deprecated. Use the <code>VerifyEmailIdentity</code> operation to verify a new email address.
  ##   EmailAddress: string (required)
  ##               : The email address to be verified.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775722 = newJObject()
  var formData_775723 = newJObject()
  add(formData_775723, "EmailAddress", newJString(EmailAddress))
  add(query_775722, "Action", newJString(Action))
  add(query_775722, "Version", newJString(Version))
  result = call_775721.call(nil, query_775722, nil, formData_775723, nil)

var postVerifyEmailAddress* = Call_PostVerifyEmailAddress_775707(
    name: "postVerifyEmailAddress", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=VerifyEmailAddress",
    validator: validate_PostVerifyEmailAddress_775708, base: "/",
    url: url_PostVerifyEmailAddress_775709, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetVerifyEmailAddress_775691 = ref object of OpenApiRestCall_772597
proc url_GetVerifyEmailAddress_775693(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetVerifyEmailAddress_775692(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deprecated. Use the <code>VerifyEmailIdentity</code> operation to verify a new email address.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   EmailAddress: JString (required)
  ##               : The email address to be verified.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775694 = query.getOrDefault("Action")
  valid_775694 = validateParameter(valid_775694, JString, required = true,
                                 default = newJString("VerifyEmailAddress"))
  if valid_775694 != nil:
    section.add "Action", valid_775694
  var valid_775695 = query.getOrDefault("EmailAddress")
  valid_775695 = validateParameter(valid_775695, JString, required = true,
                                 default = nil)
  if valid_775695 != nil:
    section.add "EmailAddress", valid_775695
  var valid_775696 = query.getOrDefault("Version")
  valid_775696 = validateParameter(valid_775696, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_775696 != nil:
    section.add "Version", valid_775696
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775697 = header.getOrDefault("X-Amz-Date")
  valid_775697 = validateParameter(valid_775697, JString, required = false,
                                 default = nil)
  if valid_775697 != nil:
    section.add "X-Amz-Date", valid_775697
  var valid_775698 = header.getOrDefault("X-Amz-Security-Token")
  valid_775698 = validateParameter(valid_775698, JString, required = false,
                                 default = nil)
  if valid_775698 != nil:
    section.add "X-Amz-Security-Token", valid_775698
  var valid_775699 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775699 = validateParameter(valid_775699, JString, required = false,
                                 default = nil)
  if valid_775699 != nil:
    section.add "X-Amz-Content-Sha256", valid_775699
  var valid_775700 = header.getOrDefault("X-Amz-Algorithm")
  valid_775700 = validateParameter(valid_775700, JString, required = false,
                                 default = nil)
  if valid_775700 != nil:
    section.add "X-Amz-Algorithm", valid_775700
  var valid_775701 = header.getOrDefault("X-Amz-Signature")
  valid_775701 = validateParameter(valid_775701, JString, required = false,
                                 default = nil)
  if valid_775701 != nil:
    section.add "X-Amz-Signature", valid_775701
  var valid_775702 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775702 = validateParameter(valid_775702, JString, required = false,
                                 default = nil)
  if valid_775702 != nil:
    section.add "X-Amz-SignedHeaders", valid_775702
  var valid_775703 = header.getOrDefault("X-Amz-Credential")
  valid_775703 = validateParameter(valid_775703, JString, required = false,
                                 default = nil)
  if valid_775703 != nil:
    section.add "X-Amz-Credential", valid_775703
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775704: Call_GetVerifyEmailAddress_775691; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deprecated. Use the <code>VerifyEmailIdentity</code> operation to verify a new email address.
  ## 
  let valid = call_775704.validator(path, query, header, formData, body)
  let scheme = call_775704.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775704.url(scheme.get, call_775704.host, call_775704.base,
                         call_775704.route, valid.getOrDefault("path"))
  result = hook(call_775704, url, valid)

proc call*(call_775705: Call_GetVerifyEmailAddress_775691; EmailAddress: string;
          Action: string = "VerifyEmailAddress"; Version: string = "2010-12-01"): Recallable =
  ## getVerifyEmailAddress
  ## Deprecated. Use the <code>VerifyEmailIdentity</code> operation to verify a new email address.
  ##   Action: string (required)
  ##   EmailAddress: string (required)
  ##               : The email address to be verified.
  ##   Version: string (required)
  var query_775706 = newJObject()
  add(query_775706, "Action", newJString(Action))
  add(query_775706, "EmailAddress", newJString(EmailAddress))
  add(query_775706, "Version", newJString(Version))
  result = call_775705.call(nil, query_775706, nil, nil, nil)

var getVerifyEmailAddress* = Call_GetVerifyEmailAddress_775691(
    name: "getVerifyEmailAddress", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=VerifyEmailAddress",
    validator: validate_GetVerifyEmailAddress_775692, base: "/",
    url: url_GetVerifyEmailAddress_775693, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostVerifyEmailIdentity_775740 = ref object of OpenApiRestCall_772597
proc url_PostVerifyEmailIdentity_775742(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostVerifyEmailIdentity_775741(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS region and attempts to verify it. As a result of executing this operation, a verification email is sent to the specified address.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775743 = query.getOrDefault("Action")
  valid_775743 = validateParameter(valid_775743, JString, required = true,
                                 default = newJString("VerifyEmailIdentity"))
  if valid_775743 != nil:
    section.add "Action", valid_775743
  var valid_775744 = query.getOrDefault("Version")
  valid_775744 = validateParameter(valid_775744, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_775744 != nil:
    section.add "Version", valid_775744
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775745 = header.getOrDefault("X-Amz-Date")
  valid_775745 = validateParameter(valid_775745, JString, required = false,
                                 default = nil)
  if valid_775745 != nil:
    section.add "X-Amz-Date", valid_775745
  var valid_775746 = header.getOrDefault("X-Amz-Security-Token")
  valid_775746 = validateParameter(valid_775746, JString, required = false,
                                 default = nil)
  if valid_775746 != nil:
    section.add "X-Amz-Security-Token", valid_775746
  var valid_775747 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775747 = validateParameter(valid_775747, JString, required = false,
                                 default = nil)
  if valid_775747 != nil:
    section.add "X-Amz-Content-Sha256", valid_775747
  var valid_775748 = header.getOrDefault("X-Amz-Algorithm")
  valid_775748 = validateParameter(valid_775748, JString, required = false,
                                 default = nil)
  if valid_775748 != nil:
    section.add "X-Amz-Algorithm", valid_775748
  var valid_775749 = header.getOrDefault("X-Amz-Signature")
  valid_775749 = validateParameter(valid_775749, JString, required = false,
                                 default = nil)
  if valid_775749 != nil:
    section.add "X-Amz-Signature", valid_775749
  var valid_775750 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775750 = validateParameter(valid_775750, JString, required = false,
                                 default = nil)
  if valid_775750 != nil:
    section.add "X-Amz-SignedHeaders", valid_775750
  var valid_775751 = header.getOrDefault("X-Amz-Credential")
  valid_775751 = validateParameter(valid_775751, JString, required = false,
                                 default = nil)
  if valid_775751 != nil:
    section.add "X-Amz-Credential", valid_775751
  result.add "header", section
  ## parameters in `formData` object:
  ##   EmailAddress: JString (required)
  ##               : The email address to be verified.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `EmailAddress` field"
  var valid_775752 = formData.getOrDefault("EmailAddress")
  valid_775752 = validateParameter(valid_775752, JString, required = true,
                                 default = nil)
  if valid_775752 != nil:
    section.add "EmailAddress", valid_775752
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775753: Call_PostVerifyEmailIdentity_775740; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS region and attempts to verify it. As a result of executing this operation, a verification email is sent to the specified address.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_775753.validator(path, query, header, formData, body)
  let scheme = call_775753.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775753.url(scheme.get, call_775753.host, call_775753.base,
                         call_775753.route, valid.getOrDefault("path"))
  result = hook(call_775753, url, valid)

proc call*(call_775754: Call_PostVerifyEmailIdentity_775740; EmailAddress: string;
          Action: string = "VerifyEmailIdentity"; Version: string = "2010-12-01"): Recallable =
  ## postVerifyEmailIdentity
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS region and attempts to verify it. As a result of executing this operation, a verification email is sent to the specified address.</p> <p>You can execute this operation no more than once per second.</p>
  ##   EmailAddress: string (required)
  ##               : The email address to be verified.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775755 = newJObject()
  var formData_775756 = newJObject()
  add(formData_775756, "EmailAddress", newJString(EmailAddress))
  add(query_775755, "Action", newJString(Action))
  add(query_775755, "Version", newJString(Version))
  result = call_775754.call(nil, query_775755, nil, formData_775756, nil)

var postVerifyEmailIdentity* = Call_PostVerifyEmailIdentity_775740(
    name: "postVerifyEmailIdentity", meth: HttpMethod.HttpPost,
    host: "email.amazonaws.com", route: "/#Action=VerifyEmailIdentity",
    validator: validate_PostVerifyEmailIdentity_775741, base: "/",
    url: url_PostVerifyEmailIdentity_775742, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetVerifyEmailIdentity_775724 = ref object of OpenApiRestCall_772597
proc url_GetVerifyEmailIdentity_775726(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetVerifyEmailIdentity_775725(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS region and attempts to verify it. As a result of executing this operation, a verification email is sent to the specified address.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   EmailAddress: JString (required)
  ##               : The email address to be verified.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775727 = query.getOrDefault("Action")
  valid_775727 = validateParameter(valid_775727, JString, required = true,
                                 default = newJString("VerifyEmailIdentity"))
  if valid_775727 != nil:
    section.add "Action", valid_775727
  var valid_775728 = query.getOrDefault("EmailAddress")
  valid_775728 = validateParameter(valid_775728, JString, required = true,
                                 default = nil)
  if valid_775728 != nil:
    section.add "EmailAddress", valid_775728
  var valid_775729 = query.getOrDefault("Version")
  valid_775729 = validateParameter(valid_775729, JString, required = true,
                                 default = newJString("2010-12-01"))
  if valid_775729 != nil:
    section.add "Version", valid_775729
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775730 = header.getOrDefault("X-Amz-Date")
  valid_775730 = validateParameter(valid_775730, JString, required = false,
                                 default = nil)
  if valid_775730 != nil:
    section.add "X-Amz-Date", valid_775730
  var valid_775731 = header.getOrDefault("X-Amz-Security-Token")
  valid_775731 = validateParameter(valid_775731, JString, required = false,
                                 default = nil)
  if valid_775731 != nil:
    section.add "X-Amz-Security-Token", valid_775731
  var valid_775732 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775732 = validateParameter(valid_775732, JString, required = false,
                                 default = nil)
  if valid_775732 != nil:
    section.add "X-Amz-Content-Sha256", valid_775732
  var valid_775733 = header.getOrDefault("X-Amz-Algorithm")
  valid_775733 = validateParameter(valid_775733, JString, required = false,
                                 default = nil)
  if valid_775733 != nil:
    section.add "X-Amz-Algorithm", valid_775733
  var valid_775734 = header.getOrDefault("X-Amz-Signature")
  valid_775734 = validateParameter(valid_775734, JString, required = false,
                                 default = nil)
  if valid_775734 != nil:
    section.add "X-Amz-Signature", valid_775734
  var valid_775735 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775735 = validateParameter(valid_775735, JString, required = false,
                                 default = nil)
  if valid_775735 != nil:
    section.add "X-Amz-SignedHeaders", valid_775735
  var valid_775736 = header.getOrDefault("X-Amz-Credential")
  valid_775736 = validateParameter(valid_775736, JString, required = false,
                                 default = nil)
  if valid_775736 != nil:
    section.add "X-Amz-Credential", valid_775736
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775737: Call_GetVerifyEmailIdentity_775724; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS region and attempts to verify it. As a result of executing this operation, a verification email is sent to the specified address.</p> <p>You can execute this operation no more than once per second.</p>
  ## 
  let valid = call_775737.validator(path, query, header, formData, body)
  let scheme = call_775737.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775737.url(scheme.get, call_775737.host, call_775737.base,
                         call_775737.route, valid.getOrDefault("path"))
  result = hook(call_775737, url, valid)

proc call*(call_775738: Call_GetVerifyEmailIdentity_775724; EmailAddress: string;
          Action: string = "VerifyEmailIdentity"; Version: string = "2010-12-01"): Recallable =
  ## getVerifyEmailIdentity
  ## <p>Adds an email address to the list of identities for your Amazon SES account in the current AWS region and attempts to verify it. As a result of executing this operation, a verification email is sent to the specified address.</p> <p>You can execute this operation no more than once per second.</p>
  ##   Action: string (required)
  ##   EmailAddress: string (required)
  ##               : The email address to be verified.
  ##   Version: string (required)
  var query_775739 = newJObject()
  add(query_775739, "Action", newJString(Action))
  add(query_775739, "EmailAddress", newJString(EmailAddress))
  add(query_775739, "Version", newJString(Version))
  result = call_775738.call(nil, query_775739, nil, nil, nil)

var getVerifyEmailIdentity* = Call_GetVerifyEmailIdentity_775724(
    name: "getVerifyEmailIdentity", meth: HttpMethod.HttpGet,
    host: "email.amazonaws.com", route: "/#Action=VerifyEmailIdentity",
    validator: validate_GetVerifyEmailIdentity_775725, base: "/",
    url: url_GetVerifyEmailIdentity_775726, schemes: {Scheme.Https, Scheme.Http})
proc sign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", "")
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", "")
    region = os.getEnv("AWS_REGION", "")
  assert secret != "", "need secret key in env"
  assert access != "", "need access key in env"
  assert region != "", "need region in env"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  let
    algo = SHA256
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  echo recall.headers
  recall.headers.del "Host"
  recall.url = $url

method hook(call: OpenApiRestCall; url: string; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, "")
  result.sign(input.getOrDefault("query"), SHA256)
