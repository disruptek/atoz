
import
  json, options, hashes, uri, strutils, tables, rest, os, uri, strutils, md5, base64,
  httpcore, sigv4

## auto-generated via openapi macro
## title: Amazon Redshift
## version: 2012-12-01
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href="https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href="https://docs.aws.amazon.com/redshift/latest/dg/welcome.html">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/redshift/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (path: JsonNode = nil; query: JsonNode = nil;
                          header: JsonNode = nil; formData: JsonNode = nil;
                          body: JsonNode = nil; _: string = ""): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    makeUrl*: proc (protocol: Scheme; host: string; base: string; route: string;
                  path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_21625418 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_21625418](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_21625418): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low .. Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js == nil:
    if required:
      if default != nil:
        return validateParameter(default, kind, required = required)
  result = js
  if result == nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind == kind, $kind & " expected; received " & $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    case js.kind
    of JInt, JFloat, JNull, JBool:
      head = $js
    of JString:
      head = js.getStr
    else:
      return
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  awsServers = {Scheme.Http: {"ap-northeast-1": "redshift.ap-northeast-1.amazonaws.com", "ap-southeast-1": "redshift.ap-southeast-1.amazonaws.com",
                           "us-west-2": "redshift.us-west-2.amazonaws.com",
                           "eu-west-2": "redshift.eu-west-2.amazonaws.com", "ap-northeast-3": "redshift.ap-northeast-3.amazonaws.com", "eu-central-1": "redshift.eu-central-1.amazonaws.com",
                           "us-east-2": "redshift.us-east-2.amazonaws.com",
                           "us-east-1": "redshift.us-east-1.amazonaws.com", "cn-northwest-1": "redshift.cn-northwest-1.amazonaws.com.cn",
                           "ap-south-1": "redshift.ap-south-1.amazonaws.com",
                           "eu-north-1": "redshift.eu-north-1.amazonaws.com", "ap-northeast-2": "redshift.ap-northeast-2.amazonaws.com",
                           "us-west-1": "redshift.us-west-1.amazonaws.com", "us-gov-east-1": "redshift.us-gov-east-1.amazonaws.com",
                           "eu-west-3": "redshift.eu-west-3.amazonaws.com", "cn-north-1": "redshift.cn-north-1.amazonaws.com.cn",
                           "sa-east-1": "redshift.sa-east-1.amazonaws.com",
                           "eu-west-1": "redshift.eu-west-1.amazonaws.com", "us-gov-west-1": "redshift.us-gov-west-1.amazonaws.com", "ap-southeast-2": "redshift.ap-southeast-2.amazonaws.com", "ca-central-1": "redshift.ca-central-1.amazonaws.com"}.toTable, Scheme.Https: {
      "ap-northeast-1": "redshift.ap-northeast-1.amazonaws.com",
      "ap-southeast-1": "redshift.ap-southeast-1.amazonaws.com",
      "us-west-2": "redshift.us-west-2.amazonaws.com",
      "eu-west-2": "redshift.eu-west-2.amazonaws.com",
      "ap-northeast-3": "redshift.ap-northeast-3.amazonaws.com",
      "eu-central-1": "redshift.eu-central-1.amazonaws.com",
      "us-east-2": "redshift.us-east-2.amazonaws.com",
      "us-east-1": "redshift.us-east-1.amazonaws.com",
      "cn-northwest-1": "redshift.cn-northwest-1.amazonaws.com.cn",
      "ap-south-1": "redshift.ap-south-1.amazonaws.com",
      "eu-north-1": "redshift.eu-north-1.amazonaws.com",
      "ap-northeast-2": "redshift.ap-northeast-2.amazonaws.com",
      "us-west-1": "redshift.us-west-1.amazonaws.com",
      "us-gov-east-1": "redshift.us-gov-east-1.amazonaws.com",
      "eu-west-3": "redshift.eu-west-3.amazonaws.com",
      "cn-north-1": "redshift.cn-north-1.amazonaws.com.cn",
      "sa-east-1": "redshift.sa-east-1.amazonaws.com",
      "eu-west-1": "redshift.eu-west-1.amazonaws.com",
      "us-gov-west-1": "redshift.us-gov-west-1.amazonaws.com",
      "ap-southeast-2": "redshift.ap-southeast-2.amazonaws.com",
      "ca-central-1": "redshift.ca-central-1.amazonaws.com"}.toTable}.toTable
const
  awsServiceName = "redshift"
method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode; body: string = ""): Recallable {.
    base.}
type
  Call_PostAcceptReservedNodeExchange_21626018 = ref object of OpenApiRestCall_21625418
proc url_PostAcceptReservedNodeExchange_21626020(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAcceptReservedNodeExchange_21626019(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Exchanges a DC1 Reserved Node for a DC2 Reserved Node with no changes to the configuration (term, payment type, or number of nodes) and no additional costs. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626021 = query.getOrDefault("Action")
  valid_21626021 = validateParameter(valid_21626021, JString, required = true, default = newJString(
      "AcceptReservedNodeExchange"))
  if valid_21626021 != nil:
    section.add "Action", valid_21626021
  var valid_21626022 = query.getOrDefault("Version")
  valid_21626022 = validateParameter(valid_21626022, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626022 != nil:
    section.add "Version", valid_21626022
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626023 = header.getOrDefault("X-Amz-Date")
  valid_21626023 = validateParameter(valid_21626023, JString, required = false,
                                   default = nil)
  if valid_21626023 != nil:
    section.add "X-Amz-Date", valid_21626023
  var valid_21626024 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626024 = validateParameter(valid_21626024, JString, required = false,
                                   default = nil)
  if valid_21626024 != nil:
    section.add "X-Amz-Security-Token", valid_21626024
  var valid_21626025 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626025 = validateParameter(valid_21626025, JString, required = false,
                                   default = nil)
  if valid_21626025 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626025
  var valid_21626026 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626026 = validateParameter(valid_21626026, JString, required = false,
                                   default = nil)
  if valid_21626026 != nil:
    section.add "X-Amz-Algorithm", valid_21626026
  var valid_21626027 = header.getOrDefault("X-Amz-Signature")
  valid_21626027 = validateParameter(valid_21626027, JString, required = false,
                                   default = nil)
  if valid_21626027 != nil:
    section.add "X-Amz-Signature", valid_21626027
  var valid_21626028 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626028 = validateParameter(valid_21626028, JString, required = false,
                                   default = nil)
  if valid_21626028 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626028
  var valid_21626029 = header.getOrDefault("X-Amz-Credential")
  valid_21626029 = validateParameter(valid_21626029, JString, required = false,
                                   default = nil)
  if valid_21626029 != nil:
    section.add "X-Amz-Credential", valid_21626029
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReservedNodeId: JString (required)
  ##                 : A string representing the node identifier of the DC1 Reserved Node to be exchanged.
  ##   TargetReservedNodeOfferingId: JString (required)
  ##                               : The unique identifier of the DC2 Reserved Node offering to be used for the exchange. You can obtain the value for the parameter by calling <a>GetReservedNodeExchangeOfferings</a> 
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ReservedNodeId` field"
  var valid_21626030 = formData.getOrDefault("ReservedNodeId")
  valid_21626030 = validateParameter(valid_21626030, JString, required = true,
                                   default = nil)
  if valid_21626030 != nil:
    section.add "ReservedNodeId", valid_21626030
  var valid_21626031 = formData.getOrDefault("TargetReservedNodeOfferingId")
  valid_21626031 = validateParameter(valid_21626031, JString, required = true,
                                   default = nil)
  if valid_21626031 != nil:
    section.add "TargetReservedNodeOfferingId", valid_21626031
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626032: Call_PostAcceptReservedNodeExchange_21626018;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Exchanges a DC1 Reserved Node for a DC2 Reserved Node with no changes to the configuration (term, payment type, or number of nodes) and no additional costs. 
  ## 
  let valid = call_21626032.validator(path, query, header, formData, body, _)
  let scheme = call_21626032.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626032.makeUrl(scheme.get, call_21626032.host, call_21626032.base,
                               call_21626032.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626032, uri, valid, _)

proc call*(call_21626033: Call_PostAcceptReservedNodeExchange_21626018;
          ReservedNodeId: string; TargetReservedNodeOfferingId: string;
          Action: string = "AcceptReservedNodeExchange";
          Version: string = "2012-12-01"): Recallable =
  ## postAcceptReservedNodeExchange
  ## Exchanges a DC1 Reserved Node for a DC2 Reserved Node with no changes to the configuration (term, payment type, or number of nodes) and no additional costs. 
  ##   ReservedNodeId: string (required)
  ##                 : A string representing the node identifier of the DC1 Reserved Node to be exchanged.
  ##   TargetReservedNodeOfferingId: string (required)
  ##                               : The unique identifier of the DC2 Reserved Node offering to be used for the exchange. You can obtain the value for the parameter by calling <a>GetReservedNodeExchangeOfferings</a> 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626034 = newJObject()
  var formData_21626035 = newJObject()
  add(formData_21626035, "ReservedNodeId", newJString(ReservedNodeId))
  add(formData_21626035, "TargetReservedNodeOfferingId",
      newJString(TargetReservedNodeOfferingId))
  add(query_21626034, "Action", newJString(Action))
  add(query_21626034, "Version", newJString(Version))
  result = call_21626033.call(nil, query_21626034, nil, formData_21626035, nil)

var postAcceptReservedNodeExchange* = Call_PostAcceptReservedNodeExchange_21626018(
    name: "postAcceptReservedNodeExchange", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=AcceptReservedNodeExchange",
    validator: validate_PostAcceptReservedNodeExchange_21626019, base: "/",
    makeUrl: url_PostAcceptReservedNodeExchange_21626020,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAcceptReservedNodeExchange_21625762 = ref object of OpenApiRestCall_21625418
proc url_GetAcceptReservedNodeExchange_21625764(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAcceptReservedNodeExchange_21625763(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Exchanges a DC1 Reserved Node for a DC2 Reserved Node with no changes to the configuration (term, payment type, or number of nodes) and no additional costs. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   TargetReservedNodeOfferingId: JString (required)
  ##                               : The unique identifier of the DC2 Reserved Node offering to be used for the exchange. You can obtain the value for the parameter by calling <a>GetReservedNodeExchangeOfferings</a> 
  ##   Version: JString (required)
  ##   ReservedNodeId: JString (required)
  ##                 : A string representing the node identifier of the DC1 Reserved Node to be exchanged.
  section = newJObject()
  var valid_21625879 = query.getOrDefault("Action")
  valid_21625879 = validateParameter(valid_21625879, JString, required = true, default = newJString(
      "AcceptReservedNodeExchange"))
  if valid_21625879 != nil:
    section.add "Action", valid_21625879
  var valid_21625880 = query.getOrDefault("TargetReservedNodeOfferingId")
  valid_21625880 = validateParameter(valid_21625880, JString, required = true,
                                   default = nil)
  if valid_21625880 != nil:
    section.add "TargetReservedNodeOfferingId", valid_21625880
  var valid_21625881 = query.getOrDefault("Version")
  valid_21625881 = validateParameter(valid_21625881, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21625881 != nil:
    section.add "Version", valid_21625881
  var valid_21625882 = query.getOrDefault("ReservedNodeId")
  valid_21625882 = validateParameter(valid_21625882, JString, required = true,
                                   default = nil)
  if valid_21625882 != nil:
    section.add "ReservedNodeId", valid_21625882
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21625883 = header.getOrDefault("X-Amz-Date")
  valid_21625883 = validateParameter(valid_21625883, JString, required = false,
                                   default = nil)
  if valid_21625883 != nil:
    section.add "X-Amz-Date", valid_21625883
  var valid_21625884 = header.getOrDefault("X-Amz-Security-Token")
  valid_21625884 = validateParameter(valid_21625884, JString, required = false,
                                   default = nil)
  if valid_21625884 != nil:
    section.add "X-Amz-Security-Token", valid_21625884
  var valid_21625885 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21625885 = validateParameter(valid_21625885, JString, required = false,
                                   default = nil)
  if valid_21625885 != nil:
    section.add "X-Amz-Content-Sha256", valid_21625885
  var valid_21625886 = header.getOrDefault("X-Amz-Algorithm")
  valid_21625886 = validateParameter(valid_21625886, JString, required = false,
                                   default = nil)
  if valid_21625886 != nil:
    section.add "X-Amz-Algorithm", valid_21625886
  var valid_21625887 = header.getOrDefault("X-Amz-Signature")
  valid_21625887 = validateParameter(valid_21625887, JString, required = false,
                                   default = nil)
  if valid_21625887 != nil:
    section.add "X-Amz-Signature", valid_21625887
  var valid_21625888 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21625888 = validateParameter(valid_21625888, JString, required = false,
                                   default = nil)
  if valid_21625888 != nil:
    section.add "X-Amz-SignedHeaders", valid_21625888
  var valid_21625889 = header.getOrDefault("X-Amz-Credential")
  valid_21625889 = validateParameter(valid_21625889, JString, required = false,
                                   default = nil)
  if valid_21625889 != nil:
    section.add "X-Amz-Credential", valid_21625889
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21625914: Call_GetAcceptReservedNodeExchange_21625762;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Exchanges a DC1 Reserved Node for a DC2 Reserved Node with no changes to the configuration (term, payment type, or number of nodes) and no additional costs. 
  ## 
  let valid = call_21625914.validator(path, query, header, formData, body, _)
  let scheme = call_21625914.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21625914.makeUrl(scheme.get, call_21625914.host, call_21625914.base,
                               call_21625914.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21625914, uri, valid, _)

proc call*(call_21625977: Call_GetAcceptReservedNodeExchange_21625762;
          TargetReservedNodeOfferingId: string; ReservedNodeId: string;
          Action: string = "AcceptReservedNodeExchange";
          Version: string = "2012-12-01"): Recallable =
  ## getAcceptReservedNodeExchange
  ## Exchanges a DC1 Reserved Node for a DC2 Reserved Node with no changes to the configuration (term, payment type, or number of nodes) and no additional costs. 
  ##   Action: string (required)
  ##   TargetReservedNodeOfferingId: string (required)
  ##                               : The unique identifier of the DC2 Reserved Node offering to be used for the exchange. You can obtain the value for the parameter by calling <a>GetReservedNodeExchangeOfferings</a> 
  ##   Version: string (required)
  ##   ReservedNodeId: string (required)
  ##                 : A string representing the node identifier of the DC1 Reserved Node to be exchanged.
  var query_21625979 = newJObject()
  add(query_21625979, "Action", newJString(Action))
  add(query_21625979, "TargetReservedNodeOfferingId",
      newJString(TargetReservedNodeOfferingId))
  add(query_21625979, "Version", newJString(Version))
  add(query_21625979, "ReservedNodeId", newJString(ReservedNodeId))
  result = call_21625977.call(nil, query_21625979, nil, nil, nil)

var getAcceptReservedNodeExchange* = Call_GetAcceptReservedNodeExchange_21625762(
    name: "getAcceptReservedNodeExchange", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=AcceptReservedNodeExchange",
    validator: validate_GetAcceptReservedNodeExchange_21625763, base: "/",
    makeUrl: url_GetAcceptReservedNodeExchange_21625764,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAuthorizeClusterSecurityGroupIngress_21626056 = ref object of OpenApiRestCall_21625418
proc url_PostAuthorizeClusterSecurityGroupIngress_21626058(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAuthorizeClusterSecurityGroupIngress_21626057(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Adds an inbound (ingress) rule to an Amazon Redshift security group. Depending on whether the application accessing your cluster is running on the Internet or an Amazon EC2 instance, you can authorize inbound access to either a Classless Interdomain Routing (CIDR)/Internet Protocol (IP) range or to an Amazon EC2 security group. You can add as many as 20 ingress rules to an Amazon Redshift security group.</p> <p>If you authorize access to an Amazon EC2 security group, specify <i>EC2SecurityGroupName</i> and <i>EC2SecurityGroupOwnerId</i>. The Amazon EC2 security group and Amazon Redshift cluster must be in the same AWS Region. </p> <p>If you authorize access to a CIDR/IP address range, specify <i>CIDRIP</i>. For an overview of CIDR blocks, see the Wikipedia article on <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Classless Inter-Domain Routing</a>. </p> <p>You must also associate the security group with a cluster so that clients running on these IP addresses or the EC2 instance are authorized to connect to the cluster. For information about managing security groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html">Working with Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626059 = query.getOrDefault("Action")
  valid_21626059 = validateParameter(valid_21626059, JString, required = true, default = newJString(
      "AuthorizeClusterSecurityGroupIngress"))
  if valid_21626059 != nil:
    section.add "Action", valid_21626059
  var valid_21626060 = query.getOrDefault("Version")
  valid_21626060 = validateParameter(valid_21626060, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626060 != nil:
    section.add "Version", valid_21626060
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626061 = header.getOrDefault("X-Amz-Date")
  valid_21626061 = validateParameter(valid_21626061, JString, required = false,
                                   default = nil)
  if valid_21626061 != nil:
    section.add "X-Amz-Date", valid_21626061
  var valid_21626062 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626062 = validateParameter(valid_21626062, JString, required = false,
                                   default = nil)
  if valid_21626062 != nil:
    section.add "X-Amz-Security-Token", valid_21626062
  var valid_21626063 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626063 = validateParameter(valid_21626063, JString, required = false,
                                   default = nil)
  if valid_21626063 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626063
  var valid_21626064 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626064 = validateParameter(valid_21626064, JString, required = false,
                                   default = nil)
  if valid_21626064 != nil:
    section.add "X-Amz-Algorithm", valid_21626064
  var valid_21626065 = header.getOrDefault("X-Amz-Signature")
  valid_21626065 = validateParameter(valid_21626065, JString, required = false,
                                   default = nil)
  if valid_21626065 != nil:
    section.add "X-Amz-Signature", valid_21626065
  var valid_21626066 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626066 = validateParameter(valid_21626066, JString, required = false,
                                   default = nil)
  if valid_21626066 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626066
  var valid_21626067 = header.getOrDefault("X-Amz-Credential")
  valid_21626067 = validateParameter(valid_21626067, JString, required = false,
                                   default = nil)
  if valid_21626067 != nil:
    section.add "X-Amz-Credential", valid_21626067
  result.add "header", section
  ## parameters in `formData` object:
  ##   EC2SecurityGroupName: JString
  ##                       : The EC2 security group to be added the Amazon Redshift security group.
  ##   CIDRIP: JString
  ##         : The IP range to be added the Amazon Redshift security group.
  ##   EC2SecurityGroupOwnerId: JString
  ##                          : <p>The AWS account number of the owner of the security group specified by the <i>EC2SecurityGroupName</i> parameter. The AWS Access Key ID is not an acceptable value. </p> <p>Example: <code>111122223333</code> </p>
  ##   ClusterSecurityGroupName: JString (required)
  ##                           : The name of the security group to which the ingress rule is added.
  section = newJObject()
  var valid_21626068 = formData.getOrDefault("EC2SecurityGroupName")
  valid_21626068 = validateParameter(valid_21626068, JString, required = false,
                                   default = nil)
  if valid_21626068 != nil:
    section.add "EC2SecurityGroupName", valid_21626068
  var valid_21626069 = formData.getOrDefault("CIDRIP")
  valid_21626069 = validateParameter(valid_21626069, JString, required = false,
                                   default = nil)
  if valid_21626069 != nil:
    section.add "CIDRIP", valid_21626069
  var valid_21626070 = formData.getOrDefault("EC2SecurityGroupOwnerId")
  valid_21626070 = validateParameter(valid_21626070, JString, required = false,
                                   default = nil)
  if valid_21626070 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_21626070
  assert formData != nil, "formData argument is necessary due to required `ClusterSecurityGroupName` field"
  var valid_21626071 = formData.getOrDefault("ClusterSecurityGroupName")
  valid_21626071 = validateParameter(valid_21626071, JString, required = true,
                                   default = nil)
  if valid_21626071 != nil:
    section.add "ClusterSecurityGroupName", valid_21626071
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626072: Call_PostAuthorizeClusterSecurityGroupIngress_21626056;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Adds an inbound (ingress) rule to an Amazon Redshift security group. Depending on whether the application accessing your cluster is running on the Internet or an Amazon EC2 instance, you can authorize inbound access to either a Classless Interdomain Routing (CIDR)/Internet Protocol (IP) range or to an Amazon EC2 security group. You can add as many as 20 ingress rules to an Amazon Redshift security group.</p> <p>If you authorize access to an Amazon EC2 security group, specify <i>EC2SecurityGroupName</i> and <i>EC2SecurityGroupOwnerId</i>. The Amazon EC2 security group and Amazon Redshift cluster must be in the same AWS Region. </p> <p>If you authorize access to a CIDR/IP address range, specify <i>CIDRIP</i>. For an overview of CIDR blocks, see the Wikipedia article on <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Classless Inter-Domain Routing</a>. </p> <p>You must also associate the security group with a cluster so that clients running on these IP addresses or the EC2 instance are authorized to connect to the cluster. For information about managing security groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html">Working with Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  let valid = call_21626072.validator(path, query, header, formData, body, _)
  let scheme = call_21626072.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626072.makeUrl(scheme.get, call_21626072.host, call_21626072.base,
                               call_21626072.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626072, uri, valid, _)

proc call*(call_21626073: Call_PostAuthorizeClusterSecurityGroupIngress_21626056;
          ClusterSecurityGroupName: string;
          Action: string = "AuthorizeClusterSecurityGroupIngress";
          EC2SecurityGroupName: string = ""; CIDRIP: string = "";
          Version: string = "2012-12-01"; EC2SecurityGroupOwnerId: string = ""): Recallable =
  ## postAuthorizeClusterSecurityGroupIngress
  ## <p>Adds an inbound (ingress) rule to an Amazon Redshift security group. Depending on whether the application accessing your cluster is running on the Internet or an Amazon EC2 instance, you can authorize inbound access to either a Classless Interdomain Routing (CIDR)/Internet Protocol (IP) range or to an Amazon EC2 security group. You can add as many as 20 ingress rules to an Amazon Redshift security group.</p> <p>If you authorize access to an Amazon EC2 security group, specify <i>EC2SecurityGroupName</i> and <i>EC2SecurityGroupOwnerId</i>. The Amazon EC2 security group and Amazon Redshift cluster must be in the same AWS Region. </p> <p>If you authorize access to a CIDR/IP address range, specify <i>CIDRIP</i>. For an overview of CIDR blocks, see the Wikipedia article on <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Classless Inter-Domain Routing</a>. </p> <p>You must also associate the security group with a cluster so that clients running on these IP addresses or the EC2 instance are authorized to connect to the cluster. For information about managing security groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html">Working with Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ##   Action: string (required)
  ##   EC2SecurityGroupName: string
  ##                       : The EC2 security group to be added the Amazon Redshift security group.
  ##   CIDRIP: string
  ##         : The IP range to be added the Amazon Redshift security group.
  ##   Version: string (required)
  ##   EC2SecurityGroupOwnerId: string
  ##                          : <p>The AWS account number of the owner of the security group specified by the <i>EC2SecurityGroupName</i> parameter. The AWS Access Key ID is not an acceptable value. </p> <p>Example: <code>111122223333</code> </p>
  ##   ClusterSecurityGroupName: string (required)
  ##                           : The name of the security group to which the ingress rule is added.
  var query_21626074 = newJObject()
  var formData_21626075 = newJObject()
  add(query_21626074, "Action", newJString(Action))
  add(formData_21626075, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(formData_21626075, "CIDRIP", newJString(CIDRIP))
  add(query_21626074, "Version", newJString(Version))
  add(formData_21626075, "EC2SecurityGroupOwnerId",
      newJString(EC2SecurityGroupOwnerId))
  add(formData_21626075, "ClusterSecurityGroupName",
      newJString(ClusterSecurityGroupName))
  result = call_21626073.call(nil, query_21626074, nil, formData_21626075, nil)

var postAuthorizeClusterSecurityGroupIngress* = Call_PostAuthorizeClusterSecurityGroupIngress_21626056(
    name: "postAuthorizeClusterSecurityGroupIngress", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com",
    route: "/#Action=AuthorizeClusterSecurityGroupIngress",
    validator: validate_PostAuthorizeClusterSecurityGroupIngress_21626057,
    base: "/", makeUrl: url_PostAuthorizeClusterSecurityGroupIngress_21626058,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAuthorizeClusterSecurityGroupIngress_21626036 = ref object of OpenApiRestCall_21625418
proc url_GetAuthorizeClusterSecurityGroupIngress_21626038(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAuthorizeClusterSecurityGroupIngress_21626037(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Adds an inbound (ingress) rule to an Amazon Redshift security group. Depending on whether the application accessing your cluster is running on the Internet or an Amazon EC2 instance, you can authorize inbound access to either a Classless Interdomain Routing (CIDR)/Internet Protocol (IP) range or to an Amazon EC2 security group. You can add as many as 20 ingress rules to an Amazon Redshift security group.</p> <p>If you authorize access to an Amazon EC2 security group, specify <i>EC2SecurityGroupName</i> and <i>EC2SecurityGroupOwnerId</i>. The Amazon EC2 security group and Amazon Redshift cluster must be in the same AWS Region. </p> <p>If you authorize access to a CIDR/IP address range, specify <i>CIDRIP</i>. For an overview of CIDR blocks, see the Wikipedia article on <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Classless Inter-Domain Routing</a>. </p> <p>You must also associate the security group with a cluster so that clients running on these IP addresses or the EC2 instance are authorized to connect to the cluster. For information about managing security groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html">Working with Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ClusterSecurityGroupName: JString (required)
  ##                           : The name of the security group to which the ingress rule is added.
  ##   EC2SecurityGroupOwnerId: JString
  ##                          : <p>The AWS account number of the owner of the security group specified by the <i>EC2SecurityGroupName</i> parameter. The AWS Access Key ID is not an acceptable value. </p> <p>Example: <code>111122223333</code> </p>
  ##   Action: JString (required)
  ##   CIDRIP: JString
  ##         : The IP range to be added the Amazon Redshift security group.
  ##   EC2SecurityGroupName: JString
  ##                       : The EC2 security group to be added the Amazon Redshift security group.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ClusterSecurityGroupName` field"
  var valid_21626039 = query.getOrDefault("ClusterSecurityGroupName")
  valid_21626039 = validateParameter(valid_21626039, JString, required = true,
                                   default = nil)
  if valid_21626039 != nil:
    section.add "ClusterSecurityGroupName", valid_21626039
  var valid_21626040 = query.getOrDefault("EC2SecurityGroupOwnerId")
  valid_21626040 = validateParameter(valid_21626040, JString, required = false,
                                   default = nil)
  if valid_21626040 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_21626040
  var valid_21626041 = query.getOrDefault("Action")
  valid_21626041 = validateParameter(valid_21626041, JString, required = true, default = newJString(
      "AuthorizeClusterSecurityGroupIngress"))
  if valid_21626041 != nil:
    section.add "Action", valid_21626041
  var valid_21626042 = query.getOrDefault("CIDRIP")
  valid_21626042 = validateParameter(valid_21626042, JString, required = false,
                                   default = nil)
  if valid_21626042 != nil:
    section.add "CIDRIP", valid_21626042
  var valid_21626043 = query.getOrDefault("EC2SecurityGroupName")
  valid_21626043 = validateParameter(valid_21626043, JString, required = false,
                                   default = nil)
  if valid_21626043 != nil:
    section.add "EC2SecurityGroupName", valid_21626043
  var valid_21626044 = query.getOrDefault("Version")
  valid_21626044 = validateParameter(valid_21626044, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626044 != nil:
    section.add "Version", valid_21626044
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626045 = header.getOrDefault("X-Amz-Date")
  valid_21626045 = validateParameter(valid_21626045, JString, required = false,
                                   default = nil)
  if valid_21626045 != nil:
    section.add "X-Amz-Date", valid_21626045
  var valid_21626046 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626046 = validateParameter(valid_21626046, JString, required = false,
                                   default = nil)
  if valid_21626046 != nil:
    section.add "X-Amz-Security-Token", valid_21626046
  var valid_21626047 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626047 = validateParameter(valid_21626047, JString, required = false,
                                   default = nil)
  if valid_21626047 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626047
  var valid_21626048 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626048 = validateParameter(valid_21626048, JString, required = false,
                                   default = nil)
  if valid_21626048 != nil:
    section.add "X-Amz-Algorithm", valid_21626048
  var valid_21626049 = header.getOrDefault("X-Amz-Signature")
  valid_21626049 = validateParameter(valid_21626049, JString, required = false,
                                   default = nil)
  if valid_21626049 != nil:
    section.add "X-Amz-Signature", valid_21626049
  var valid_21626050 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626050 = validateParameter(valid_21626050, JString, required = false,
                                   default = nil)
  if valid_21626050 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626050
  var valid_21626051 = header.getOrDefault("X-Amz-Credential")
  valid_21626051 = validateParameter(valid_21626051, JString, required = false,
                                   default = nil)
  if valid_21626051 != nil:
    section.add "X-Amz-Credential", valid_21626051
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626052: Call_GetAuthorizeClusterSecurityGroupIngress_21626036;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Adds an inbound (ingress) rule to an Amazon Redshift security group. Depending on whether the application accessing your cluster is running on the Internet or an Amazon EC2 instance, you can authorize inbound access to either a Classless Interdomain Routing (CIDR)/Internet Protocol (IP) range or to an Amazon EC2 security group. You can add as many as 20 ingress rules to an Amazon Redshift security group.</p> <p>If you authorize access to an Amazon EC2 security group, specify <i>EC2SecurityGroupName</i> and <i>EC2SecurityGroupOwnerId</i>. The Amazon EC2 security group and Amazon Redshift cluster must be in the same AWS Region. </p> <p>If you authorize access to a CIDR/IP address range, specify <i>CIDRIP</i>. For an overview of CIDR blocks, see the Wikipedia article on <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Classless Inter-Domain Routing</a>. </p> <p>You must also associate the security group with a cluster so that clients running on these IP addresses or the EC2 instance are authorized to connect to the cluster. For information about managing security groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html">Working with Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  let valid = call_21626052.validator(path, query, header, formData, body, _)
  let scheme = call_21626052.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626052.makeUrl(scheme.get, call_21626052.host, call_21626052.base,
                               call_21626052.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626052, uri, valid, _)

proc call*(call_21626053: Call_GetAuthorizeClusterSecurityGroupIngress_21626036;
          ClusterSecurityGroupName: string; EC2SecurityGroupOwnerId: string = "";
          Action: string = "AuthorizeClusterSecurityGroupIngress";
          CIDRIP: string = ""; EC2SecurityGroupName: string = "";
          Version: string = "2012-12-01"): Recallable =
  ## getAuthorizeClusterSecurityGroupIngress
  ## <p>Adds an inbound (ingress) rule to an Amazon Redshift security group. Depending on whether the application accessing your cluster is running on the Internet or an Amazon EC2 instance, you can authorize inbound access to either a Classless Interdomain Routing (CIDR)/Internet Protocol (IP) range or to an Amazon EC2 security group. You can add as many as 20 ingress rules to an Amazon Redshift security group.</p> <p>If you authorize access to an Amazon EC2 security group, specify <i>EC2SecurityGroupName</i> and <i>EC2SecurityGroupOwnerId</i>. The Amazon EC2 security group and Amazon Redshift cluster must be in the same AWS Region. </p> <p>If you authorize access to a CIDR/IP address range, specify <i>CIDRIP</i>. For an overview of CIDR blocks, see the Wikipedia article on <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Classless Inter-Domain Routing</a>. </p> <p>You must also associate the security group with a cluster so that clients running on these IP addresses or the EC2 instance are authorized to connect to the cluster. For information about managing security groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html">Working with Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ##   ClusterSecurityGroupName: string (required)
  ##                           : The name of the security group to which the ingress rule is added.
  ##   EC2SecurityGroupOwnerId: string
  ##                          : <p>The AWS account number of the owner of the security group specified by the <i>EC2SecurityGroupName</i> parameter. The AWS Access Key ID is not an acceptable value. </p> <p>Example: <code>111122223333</code> </p>
  ##   Action: string (required)
  ##   CIDRIP: string
  ##         : The IP range to be added the Amazon Redshift security group.
  ##   EC2SecurityGroupName: string
  ##                       : The EC2 security group to be added the Amazon Redshift security group.
  ##   Version: string (required)
  var query_21626054 = newJObject()
  add(query_21626054, "ClusterSecurityGroupName",
      newJString(ClusterSecurityGroupName))
  add(query_21626054, "EC2SecurityGroupOwnerId",
      newJString(EC2SecurityGroupOwnerId))
  add(query_21626054, "Action", newJString(Action))
  add(query_21626054, "CIDRIP", newJString(CIDRIP))
  add(query_21626054, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(query_21626054, "Version", newJString(Version))
  result = call_21626053.call(nil, query_21626054, nil, nil, nil)

var getAuthorizeClusterSecurityGroupIngress* = Call_GetAuthorizeClusterSecurityGroupIngress_21626036(
    name: "getAuthorizeClusterSecurityGroupIngress", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com",
    route: "/#Action=AuthorizeClusterSecurityGroupIngress",
    validator: validate_GetAuthorizeClusterSecurityGroupIngress_21626037,
    base: "/", makeUrl: url_GetAuthorizeClusterSecurityGroupIngress_21626038,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAuthorizeSnapshotAccess_21626094 = ref object of OpenApiRestCall_21625418
proc url_PostAuthorizeSnapshotAccess_21626096(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAuthorizeSnapshotAccess_21626095(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Authorizes the specified AWS customer account to restore the specified snapshot.</p> <p> For more information about working with snapshots, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626097 = query.getOrDefault("Action")
  valid_21626097 = validateParameter(valid_21626097, JString, required = true, default = newJString(
      "AuthorizeSnapshotAccess"))
  if valid_21626097 != nil:
    section.add "Action", valid_21626097
  var valid_21626098 = query.getOrDefault("Version")
  valid_21626098 = validateParameter(valid_21626098, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626098 != nil:
    section.add "Version", valid_21626098
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626099 = header.getOrDefault("X-Amz-Date")
  valid_21626099 = validateParameter(valid_21626099, JString, required = false,
                                   default = nil)
  if valid_21626099 != nil:
    section.add "X-Amz-Date", valid_21626099
  var valid_21626100 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626100 = validateParameter(valid_21626100, JString, required = false,
                                   default = nil)
  if valid_21626100 != nil:
    section.add "X-Amz-Security-Token", valid_21626100
  var valid_21626101 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626101 = validateParameter(valid_21626101, JString, required = false,
                                   default = nil)
  if valid_21626101 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626101
  var valid_21626102 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626102 = validateParameter(valid_21626102, JString, required = false,
                                   default = nil)
  if valid_21626102 != nil:
    section.add "X-Amz-Algorithm", valid_21626102
  var valid_21626103 = header.getOrDefault("X-Amz-Signature")
  valid_21626103 = validateParameter(valid_21626103, JString, required = false,
                                   default = nil)
  if valid_21626103 != nil:
    section.add "X-Amz-Signature", valid_21626103
  var valid_21626104 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626104 = validateParameter(valid_21626104, JString, required = false,
                                   default = nil)
  if valid_21626104 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626104
  var valid_21626105 = header.getOrDefault("X-Amz-Credential")
  valid_21626105 = validateParameter(valid_21626105, JString, required = false,
                                   default = nil)
  if valid_21626105 != nil:
    section.add "X-Amz-Credential", valid_21626105
  result.add "header", section
  ## parameters in `formData` object:
  ##   AccountWithRestoreAccess: JString (required)
  ##                           : <p>The identifier of the AWS customer account authorized to restore the specified snapshot.</p> <p>To share a snapshot with AWS support, specify amazon-redshift-support.</p>
  ##   SnapshotClusterIdentifier: JString
  ##                            : The identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.
  ##   SnapshotIdentifier: JString (required)
  ##                     : The identifier of the snapshot the account is authorized to restore.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AccountWithRestoreAccess` field"
  var valid_21626106 = formData.getOrDefault("AccountWithRestoreAccess")
  valid_21626106 = validateParameter(valid_21626106, JString, required = true,
                                   default = nil)
  if valid_21626106 != nil:
    section.add "AccountWithRestoreAccess", valid_21626106
  var valid_21626107 = formData.getOrDefault("SnapshotClusterIdentifier")
  valid_21626107 = validateParameter(valid_21626107, JString, required = false,
                                   default = nil)
  if valid_21626107 != nil:
    section.add "SnapshotClusterIdentifier", valid_21626107
  var valid_21626108 = formData.getOrDefault("SnapshotIdentifier")
  valid_21626108 = validateParameter(valid_21626108, JString, required = true,
                                   default = nil)
  if valid_21626108 != nil:
    section.add "SnapshotIdentifier", valid_21626108
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626109: Call_PostAuthorizeSnapshotAccess_21626094;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Authorizes the specified AWS customer account to restore the specified snapshot.</p> <p> For more information about working with snapshots, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  let valid = call_21626109.validator(path, query, header, formData, body, _)
  let scheme = call_21626109.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626109.makeUrl(scheme.get, call_21626109.host, call_21626109.base,
                               call_21626109.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626109, uri, valid, _)

proc call*(call_21626110: Call_PostAuthorizeSnapshotAccess_21626094;
          AccountWithRestoreAccess: string; SnapshotIdentifier: string;
          SnapshotClusterIdentifier: string = "";
          Action: string = "AuthorizeSnapshotAccess"; Version: string = "2012-12-01"): Recallable =
  ## postAuthorizeSnapshotAccess
  ## <p>Authorizes the specified AWS customer account to restore the specified snapshot.</p> <p> For more information about working with snapshots, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ##   AccountWithRestoreAccess: string (required)
  ##                           : <p>The identifier of the AWS customer account authorized to restore the specified snapshot.</p> <p>To share a snapshot with AWS support, specify amazon-redshift-support.</p>
  ##   SnapshotClusterIdentifier: string
  ##                            : The identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.
  ##   Action: string (required)
  ##   SnapshotIdentifier: string (required)
  ##                     : The identifier of the snapshot the account is authorized to restore.
  ##   Version: string (required)
  var query_21626111 = newJObject()
  var formData_21626112 = newJObject()
  add(formData_21626112, "AccountWithRestoreAccess",
      newJString(AccountWithRestoreAccess))
  add(formData_21626112, "SnapshotClusterIdentifier",
      newJString(SnapshotClusterIdentifier))
  add(query_21626111, "Action", newJString(Action))
  add(formData_21626112, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  add(query_21626111, "Version", newJString(Version))
  result = call_21626110.call(nil, query_21626111, nil, formData_21626112, nil)

var postAuthorizeSnapshotAccess* = Call_PostAuthorizeSnapshotAccess_21626094(
    name: "postAuthorizeSnapshotAccess", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=AuthorizeSnapshotAccess",
    validator: validate_PostAuthorizeSnapshotAccess_21626095, base: "/",
    makeUrl: url_PostAuthorizeSnapshotAccess_21626096,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAuthorizeSnapshotAccess_21626076 = ref object of OpenApiRestCall_21625418
proc url_GetAuthorizeSnapshotAccess_21626078(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAuthorizeSnapshotAccess_21626077(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Authorizes the specified AWS customer account to restore the specified snapshot.</p> <p> For more information about working with snapshots, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AccountWithRestoreAccess: JString (required)
  ##                           : <p>The identifier of the AWS customer account authorized to restore the specified snapshot.</p> <p>To share a snapshot with AWS support, specify amazon-redshift-support.</p>
  ##   Action: JString (required)
  ##   SnapshotClusterIdentifier: JString
  ##                            : The identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.
  ##   SnapshotIdentifier: JString (required)
  ##                     : The identifier of the snapshot the account is authorized to restore.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AccountWithRestoreAccess` field"
  var valid_21626079 = query.getOrDefault("AccountWithRestoreAccess")
  valid_21626079 = validateParameter(valid_21626079, JString, required = true,
                                   default = nil)
  if valid_21626079 != nil:
    section.add "AccountWithRestoreAccess", valid_21626079
  var valid_21626080 = query.getOrDefault("Action")
  valid_21626080 = validateParameter(valid_21626080, JString, required = true, default = newJString(
      "AuthorizeSnapshotAccess"))
  if valid_21626080 != nil:
    section.add "Action", valid_21626080
  var valid_21626081 = query.getOrDefault("SnapshotClusterIdentifier")
  valid_21626081 = validateParameter(valid_21626081, JString, required = false,
                                   default = nil)
  if valid_21626081 != nil:
    section.add "SnapshotClusterIdentifier", valid_21626081
  var valid_21626082 = query.getOrDefault("SnapshotIdentifier")
  valid_21626082 = validateParameter(valid_21626082, JString, required = true,
                                   default = nil)
  if valid_21626082 != nil:
    section.add "SnapshotIdentifier", valid_21626082
  var valid_21626083 = query.getOrDefault("Version")
  valid_21626083 = validateParameter(valid_21626083, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626083 != nil:
    section.add "Version", valid_21626083
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626084 = header.getOrDefault("X-Amz-Date")
  valid_21626084 = validateParameter(valid_21626084, JString, required = false,
                                   default = nil)
  if valid_21626084 != nil:
    section.add "X-Amz-Date", valid_21626084
  var valid_21626085 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626085 = validateParameter(valid_21626085, JString, required = false,
                                   default = nil)
  if valid_21626085 != nil:
    section.add "X-Amz-Security-Token", valid_21626085
  var valid_21626086 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626086 = validateParameter(valid_21626086, JString, required = false,
                                   default = nil)
  if valid_21626086 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626086
  var valid_21626087 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626087 = validateParameter(valid_21626087, JString, required = false,
                                   default = nil)
  if valid_21626087 != nil:
    section.add "X-Amz-Algorithm", valid_21626087
  var valid_21626088 = header.getOrDefault("X-Amz-Signature")
  valid_21626088 = validateParameter(valid_21626088, JString, required = false,
                                   default = nil)
  if valid_21626088 != nil:
    section.add "X-Amz-Signature", valid_21626088
  var valid_21626089 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626089 = validateParameter(valid_21626089, JString, required = false,
                                   default = nil)
  if valid_21626089 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626089
  var valid_21626090 = header.getOrDefault("X-Amz-Credential")
  valid_21626090 = validateParameter(valid_21626090, JString, required = false,
                                   default = nil)
  if valid_21626090 != nil:
    section.add "X-Amz-Credential", valid_21626090
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626091: Call_GetAuthorizeSnapshotAccess_21626076;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Authorizes the specified AWS customer account to restore the specified snapshot.</p> <p> For more information about working with snapshots, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  let valid = call_21626091.validator(path, query, header, formData, body, _)
  let scheme = call_21626091.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626091.makeUrl(scheme.get, call_21626091.host, call_21626091.base,
                               call_21626091.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626091, uri, valid, _)

proc call*(call_21626092: Call_GetAuthorizeSnapshotAccess_21626076;
          AccountWithRestoreAccess: string; SnapshotIdentifier: string;
          Action: string = "AuthorizeSnapshotAccess";
          SnapshotClusterIdentifier: string = ""; Version: string = "2012-12-01"): Recallable =
  ## getAuthorizeSnapshotAccess
  ## <p>Authorizes the specified AWS customer account to restore the specified snapshot.</p> <p> For more information about working with snapshots, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ##   AccountWithRestoreAccess: string (required)
  ##                           : <p>The identifier of the AWS customer account authorized to restore the specified snapshot.</p> <p>To share a snapshot with AWS support, specify amazon-redshift-support.</p>
  ##   Action: string (required)
  ##   SnapshotClusterIdentifier: string
  ##                            : The identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.
  ##   SnapshotIdentifier: string (required)
  ##                     : The identifier of the snapshot the account is authorized to restore.
  ##   Version: string (required)
  var query_21626093 = newJObject()
  add(query_21626093, "AccountWithRestoreAccess",
      newJString(AccountWithRestoreAccess))
  add(query_21626093, "Action", newJString(Action))
  add(query_21626093, "SnapshotClusterIdentifier",
      newJString(SnapshotClusterIdentifier))
  add(query_21626093, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  add(query_21626093, "Version", newJString(Version))
  result = call_21626092.call(nil, query_21626093, nil, nil, nil)

var getAuthorizeSnapshotAccess* = Call_GetAuthorizeSnapshotAccess_21626076(
    name: "getAuthorizeSnapshotAccess", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=AuthorizeSnapshotAccess",
    validator: validate_GetAuthorizeSnapshotAccess_21626077, base: "/",
    makeUrl: url_GetAuthorizeSnapshotAccess_21626078,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostBatchDeleteClusterSnapshots_21626129 = ref object of OpenApiRestCall_21625418
proc url_PostBatchDeleteClusterSnapshots_21626131(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostBatchDeleteClusterSnapshots_21626130(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Deletes a set of cluster snapshots.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626132 = query.getOrDefault("Action")
  valid_21626132 = validateParameter(valid_21626132, JString, required = true, default = newJString(
      "BatchDeleteClusterSnapshots"))
  if valid_21626132 != nil:
    section.add "Action", valid_21626132
  var valid_21626133 = query.getOrDefault("Version")
  valid_21626133 = validateParameter(valid_21626133, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626133 != nil:
    section.add "Version", valid_21626133
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626134 = header.getOrDefault("X-Amz-Date")
  valid_21626134 = validateParameter(valid_21626134, JString, required = false,
                                   default = nil)
  if valid_21626134 != nil:
    section.add "X-Amz-Date", valid_21626134
  var valid_21626135 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626135 = validateParameter(valid_21626135, JString, required = false,
                                   default = nil)
  if valid_21626135 != nil:
    section.add "X-Amz-Security-Token", valid_21626135
  var valid_21626136 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626136 = validateParameter(valid_21626136, JString, required = false,
                                   default = nil)
  if valid_21626136 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626136
  var valid_21626137 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626137 = validateParameter(valid_21626137, JString, required = false,
                                   default = nil)
  if valid_21626137 != nil:
    section.add "X-Amz-Algorithm", valid_21626137
  var valid_21626138 = header.getOrDefault("X-Amz-Signature")
  valid_21626138 = validateParameter(valid_21626138, JString, required = false,
                                   default = nil)
  if valid_21626138 != nil:
    section.add "X-Amz-Signature", valid_21626138
  var valid_21626139 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626139 = validateParameter(valid_21626139, JString, required = false,
                                   default = nil)
  if valid_21626139 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626139
  var valid_21626140 = header.getOrDefault("X-Amz-Credential")
  valid_21626140 = validateParameter(valid_21626140, JString, required = false,
                                   default = nil)
  if valid_21626140 != nil:
    section.add "X-Amz-Credential", valid_21626140
  result.add "header", section
  ## parameters in `formData` object:
  ##   Identifiers: JArray (required)
  ##              : A list of identifiers for the snapshots that you want to delete.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Identifiers` field"
  var valid_21626141 = formData.getOrDefault("Identifiers")
  valid_21626141 = validateParameter(valid_21626141, JArray, required = true,
                                   default = nil)
  if valid_21626141 != nil:
    section.add "Identifiers", valid_21626141
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626142: Call_PostBatchDeleteClusterSnapshots_21626129;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a set of cluster snapshots.
  ## 
  let valid = call_21626142.validator(path, query, header, formData, body, _)
  let scheme = call_21626142.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626142.makeUrl(scheme.get, call_21626142.host, call_21626142.base,
                               call_21626142.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626142, uri, valid, _)

proc call*(call_21626143: Call_PostBatchDeleteClusterSnapshots_21626129;
          Identifiers: JsonNode; Action: string = "BatchDeleteClusterSnapshots";
          Version: string = "2012-12-01"): Recallable =
  ## postBatchDeleteClusterSnapshots
  ## Deletes a set of cluster snapshots.
  ##   Identifiers: JArray (required)
  ##              : A list of identifiers for the snapshots that you want to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626144 = newJObject()
  var formData_21626145 = newJObject()
  if Identifiers != nil:
    formData_21626145.add "Identifiers", Identifiers
  add(query_21626144, "Action", newJString(Action))
  add(query_21626144, "Version", newJString(Version))
  result = call_21626143.call(nil, query_21626144, nil, formData_21626145, nil)

var postBatchDeleteClusterSnapshots* = Call_PostBatchDeleteClusterSnapshots_21626129(
    name: "postBatchDeleteClusterSnapshots", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=BatchDeleteClusterSnapshots",
    validator: validate_PostBatchDeleteClusterSnapshots_21626130, base: "/",
    makeUrl: url_PostBatchDeleteClusterSnapshots_21626131,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBatchDeleteClusterSnapshots_21626113 = ref object of OpenApiRestCall_21625418
proc url_GetBatchDeleteClusterSnapshots_21626115(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetBatchDeleteClusterSnapshots_21626114(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Deletes a set of cluster snapshots.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Identifiers: JArray (required)
  ##              : A list of identifiers for the snapshots that you want to delete.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626116 = query.getOrDefault("Action")
  valid_21626116 = validateParameter(valid_21626116, JString, required = true, default = newJString(
      "BatchDeleteClusterSnapshots"))
  if valid_21626116 != nil:
    section.add "Action", valid_21626116
  var valid_21626117 = query.getOrDefault("Identifiers")
  valid_21626117 = validateParameter(valid_21626117, JArray, required = true,
                                   default = nil)
  if valid_21626117 != nil:
    section.add "Identifiers", valid_21626117
  var valid_21626118 = query.getOrDefault("Version")
  valid_21626118 = validateParameter(valid_21626118, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626118 != nil:
    section.add "Version", valid_21626118
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626119 = header.getOrDefault("X-Amz-Date")
  valid_21626119 = validateParameter(valid_21626119, JString, required = false,
                                   default = nil)
  if valid_21626119 != nil:
    section.add "X-Amz-Date", valid_21626119
  var valid_21626120 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626120 = validateParameter(valid_21626120, JString, required = false,
                                   default = nil)
  if valid_21626120 != nil:
    section.add "X-Amz-Security-Token", valid_21626120
  var valid_21626121 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626121 = validateParameter(valid_21626121, JString, required = false,
                                   default = nil)
  if valid_21626121 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626121
  var valid_21626122 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626122 = validateParameter(valid_21626122, JString, required = false,
                                   default = nil)
  if valid_21626122 != nil:
    section.add "X-Amz-Algorithm", valid_21626122
  var valid_21626123 = header.getOrDefault("X-Amz-Signature")
  valid_21626123 = validateParameter(valid_21626123, JString, required = false,
                                   default = nil)
  if valid_21626123 != nil:
    section.add "X-Amz-Signature", valid_21626123
  var valid_21626124 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626124 = validateParameter(valid_21626124, JString, required = false,
                                   default = nil)
  if valid_21626124 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626124
  var valid_21626125 = header.getOrDefault("X-Amz-Credential")
  valid_21626125 = validateParameter(valid_21626125, JString, required = false,
                                   default = nil)
  if valid_21626125 != nil:
    section.add "X-Amz-Credential", valid_21626125
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626126: Call_GetBatchDeleteClusterSnapshots_21626113;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a set of cluster snapshots.
  ## 
  let valid = call_21626126.validator(path, query, header, formData, body, _)
  let scheme = call_21626126.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626126.makeUrl(scheme.get, call_21626126.host, call_21626126.base,
                               call_21626126.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626126, uri, valid, _)

proc call*(call_21626127: Call_GetBatchDeleteClusterSnapshots_21626113;
          Identifiers: JsonNode; Action: string = "BatchDeleteClusterSnapshots";
          Version: string = "2012-12-01"): Recallable =
  ## getBatchDeleteClusterSnapshots
  ## Deletes a set of cluster snapshots.
  ##   Action: string (required)
  ##   Identifiers: JArray (required)
  ##              : A list of identifiers for the snapshots that you want to delete.
  ##   Version: string (required)
  var query_21626128 = newJObject()
  add(query_21626128, "Action", newJString(Action))
  if Identifiers != nil:
    query_21626128.add "Identifiers", Identifiers
  add(query_21626128, "Version", newJString(Version))
  result = call_21626127.call(nil, query_21626128, nil, nil, nil)

var getBatchDeleteClusterSnapshots* = Call_GetBatchDeleteClusterSnapshots_21626113(
    name: "getBatchDeleteClusterSnapshots", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=BatchDeleteClusterSnapshots",
    validator: validate_GetBatchDeleteClusterSnapshots_21626114, base: "/",
    makeUrl: url_GetBatchDeleteClusterSnapshots_21626115,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostBatchModifyClusterSnapshots_21626164 = ref object of OpenApiRestCall_21625418
proc url_PostBatchModifyClusterSnapshots_21626166(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostBatchModifyClusterSnapshots_21626165(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Modifies the settings for a set of cluster snapshots.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626167 = query.getOrDefault("Action")
  valid_21626167 = validateParameter(valid_21626167, JString, required = true, default = newJString(
      "BatchModifyClusterSnapshots"))
  if valid_21626167 != nil:
    section.add "Action", valid_21626167
  var valid_21626168 = query.getOrDefault("Version")
  valid_21626168 = validateParameter(valid_21626168, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626168 != nil:
    section.add "Version", valid_21626168
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626169 = header.getOrDefault("X-Amz-Date")
  valid_21626169 = validateParameter(valid_21626169, JString, required = false,
                                   default = nil)
  if valid_21626169 != nil:
    section.add "X-Amz-Date", valid_21626169
  var valid_21626170 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626170 = validateParameter(valid_21626170, JString, required = false,
                                   default = nil)
  if valid_21626170 != nil:
    section.add "X-Amz-Security-Token", valid_21626170
  var valid_21626171 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626171 = validateParameter(valid_21626171, JString, required = false,
                                   default = nil)
  if valid_21626171 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626171
  var valid_21626172 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626172 = validateParameter(valid_21626172, JString, required = false,
                                   default = nil)
  if valid_21626172 != nil:
    section.add "X-Amz-Algorithm", valid_21626172
  var valid_21626173 = header.getOrDefault("X-Amz-Signature")
  valid_21626173 = validateParameter(valid_21626173, JString, required = false,
                                   default = nil)
  if valid_21626173 != nil:
    section.add "X-Amz-Signature", valid_21626173
  var valid_21626174 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626174 = validateParameter(valid_21626174, JString, required = false,
                                   default = nil)
  if valid_21626174 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626174
  var valid_21626175 = header.getOrDefault("X-Amz-Credential")
  valid_21626175 = validateParameter(valid_21626175, JString, required = false,
                                   default = nil)
  if valid_21626175 != nil:
    section.add "X-Amz-Credential", valid_21626175
  result.add "header", section
  ## parameters in `formData` object:
  ##   Force: JBool
  ##        : A boolean value indicating whether to override an exception if the retention period has passed. 
  ##   SnapshotIdentifierList: JArray (required)
  ##                         : A list of snapshot identifiers you want to modify.
  ##   ManualSnapshotRetentionPeriod: JInt
  ##                                : <p>The number of days that a manual snapshot is retained. If you specify the value -1, the manual snapshot is retained indefinitely.</p> <p>The number must be either -1 or an integer between 1 and 3,653.</p> <p>If you decrease the manual snapshot retention period from its current value, existing manual snapshots that fall outside of the new retention period will return an error. If you want to suppress the errors and delete the snapshots, use the force option. </p>
  section = newJObject()
  var valid_21626176 = formData.getOrDefault("Force")
  valid_21626176 = validateParameter(valid_21626176, JBool, required = false,
                                   default = nil)
  if valid_21626176 != nil:
    section.add "Force", valid_21626176
  assert formData != nil, "formData argument is necessary due to required `SnapshotIdentifierList` field"
  var valid_21626177 = formData.getOrDefault("SnapshotIdentifierList")
  valid_21626177 = validateParameter(valid_21626177, JArray, required = true,
                                   default = nil)
  if valid_21626177 != nil:
    section.add "SnapshotIdentifierList", valid_21626177
  var valid_21626178 = formData.getOrDefault("ManualSnapshotRetentionPeriod")
  valid_21626178 = validateParameter(valid_21626178, JInt, required = false,
                                   default = nil)
  if valid_21626178 != nil:
    section.add "ManualSnapshotRetentionPeriod", valid_21626178
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626179: Call_PostBatchModifyClusterSnapshots_21626164;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Modifies the settings for a set of cluster snapshots.
  ## 
  let valid = call_21626179.validator(path, query, header, formData, body, _)
  let scheme = call_21626179.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626179.makeUrl(scheme.get, call_21626179.host, call_21626179.base,
                               call_21626179.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626179, uri, valid, _)

proc call*(call_21626180: Call_PostBatchModifyClusterSnapshots_21626164;
          SnapshotIdentifierList: JsonNode; Force: bool = false;
          Action: string = "BatchModifyClusterSnapshots";
          ManualSnapshotRetentionPeriod: int = 0; Version: string = "2012-12-01"): Recallable =
  ## postBatchModifyClusterSnapshots
  ## Modifies the settings for a set of cluster snapshots.
  ##   Force: bool
  ##        : A boolean value indicating whether to override an exception if the retention period has passed. 
  ##   SnapshotIdentifierList: JArray (required)
  ##                         : A list of snapshot identifiers you want to modify.
  ##   Action: string (required)
  ##   ManualSnapshotRetentionPeriod: int
  ##                                : <p>The number of days that a manual snapshot is retained. If you specify the value -1, the manual snapshot is retained indefinitely.</p> <p>The number must be either -1 or an integer between 1 and 3,653.</p> <p>If you decrease the manual snapshot retention period from its current value, existing manual snapshots that fall outside of the new retention period will return an error. If you want to suppress the errors and delete the snapshots, use the force option. </p>
  ##   Version: string (required)
  var query_21626181 = newJObject()
  var formData_21626182 = newJObject()
  add(formData_21626182, "Force", newJBool(Force))
  if SnapshotIdentifierList != nil:
    formData_21626182.add "SnapshotIdentifierList", SnapshotIdentifierList
  add(query_21626181, "Action", newJString(Action))
  add(formData_21626182, "ManualSnapshotRetentionPeriod",
      newJInt(ManualSnapshotRetentionPeriod))
  add(query_21626181, "Version", newJString(Version))
  result = call_21626180.call(nil, query_21626181, nil, formData_21626182, nil)

var postBatchModifyClusterSnapshots* = Call_PostBatchModifyClusterSnapshots_21626164(
    name: "postBatchModifyClusterSnapshots", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=BatchModifyClusterSnapshots",
    validator: validate_PostBatchModifyClusterSnapshots_21626165, base: "/",
    makeUrl: url_PostBatchModifyClusterSnapshots_21626166,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBatchModifyClusterSnapshots_21626146 = ref object of OpenApiRestCall_21625418
proc url_GetBatchModifyClusterSnapshots_21626148(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetBatchModifyClusterSnapshots_21626147(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Modifies the settings for a set of cluster snapshots.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SnapshotIdentifierList: JArray (required)
  ##                         : A list of snapshot identifiers you want to modify.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Force: JBool
  ##        : A boolean value indicating whether to override an exception if the retention period has passed. 
  ##   ManualSnapshotRetentionPeriod: JInt
  ##                                : <p>The number of days that a manual snapshot is retained. If you specify the value -1, the manual snapshot is retained indefinitely.</p> <p>The number must be either -1 or an integer between 1 and 3,653.</p> <p>If you decrease the manual snapshot retention period from its current value, existing manual snapshots that fall outside of the new retention period will return an error. If you want to suppress the errors and delete the snapshots, use the force option. </p>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `SnapshotIdentifierList` field"
  var valid_21626149 = query.getOrDefault("SnapshotIdentifierList")
  valid_21626149 = validateParameter(valid_21626149, JArray, required = true,
                                   default = nil)
  if valid_21626149 != nil:
    section.add "SnapshotIdentifierList", valid_21626149
  var valid_21626150 = query.getOrDefault("Action")
  valid_21626150 = validateParameter(valid_21626150, JString, required = true, default = newJString(
      "BatchModifyClusterSnapshots"))
  if valid_21626150 != nil:
    section.add "Action", valid_21626150
  var valid_21626151 = query.getOrDefault("Version")
  valid_21626151 = validateParameter(valid_21626151, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626151 != nil:
    section.add "Version", valid_21626151
  var valid_21626152 = query.getOrDefault("Force")
  valid_21626152 = validateParameter(valid_21626152, JBool, required = false,
                                   default = nil)
  if valid_21626152 != nil:
    section.add "Force", valid_21626152
  var valid_21626153 = query.getOrDefault("ManualSnapshotRetentionPeriod")
  valid_21626153 = validateParameter(valid_21626153, JInt, required = false,
                                   default = nil)
  if valid_21626153 != nil:
    section.add "ManualSnapshotRetentionPeriod", valid_21626153
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626154 = header.getOrDefault("X-Amz-Date")
  valid_21626154 = validateParameter(valid_21626154, JString, required = false,
                                   default = nil)
  if valid_21626154 != nil:
    section.add "X-Amz-Date", valid_21626154
  var valid_21626155 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626155 = validateParameter(valid_21626155, JString, required = false,
                                   default = nil)
  if valid_21626155 != nil:
    section.add "X-Amz-Security-Token", valid_21626155
  var valid_21626156 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626156 = validateParameter(valid_21626156, JString, required = false,
                                   default = nil)
  if valid_21626156 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626156
  var valid_21626157 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626157 = validateParameter(valid_21626157, JString, required = false,
                                   default = nil)
  if valid_21626157 != nil:
    section.add "X-Amz-Algorithm", valid_21626157
  var valid_21626158 = header.getOrDefault("X-Amz-Signature")
  valid_21626158 = validateParameter(valid_21626158, JString, required = false,
                                   default = nil)
  if valid_21626158 != nil:
    section.add "X-Amz-Signature", valid_21626158
  var valid_21626159 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626159 = validateParameter(valid_21626159, JString, required = false,
                                   default = nil)
  if valid_21626159 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626159
  var valid_21626160 = header.getOrDefault("X-Amz-Credential")
  valid_21626160 = validateParameter(valid_21626160, JString, required = false,
                                   default = nil)
  if valid_21626160 != nil:
    section.add "X-Amz-Credential", valid_21626160
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626161: Call_GetBatchModifyClusterSnapshots_21626146;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Modifies the settings for a set of cluster snapshots.
  ## 
  let valid = call_21626161.validator(path, query, header, formData, body, _)
  let scheme = call_21626161.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626161.makeUrl(scheme.get, call_21626161.host, call_21626161.base,
                               call_21626161.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626161, uri, valid, _)

proc call*(call_21626162: Call_GetBatchModifyClusterSnapshots_21626146;
          SnapshotIdentifierList: JsonNode;
          Action: string = "BatchModifyClusterSnapshots";
          Version: string = "2012-12-01"; Force: bool = false;
          ManualSnapshotRetentionPeriod: int = 0): Recallable =
  ## getBatchModifyClusterSnapshots
  ## Modifies the settings for a set of cluster snapshots.
  ##   SnapshotIdentifierList: JArray (required)
  ##                         : A list of snapshot identifiers you want to modify.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Force: bool
  ##        : A boolean value indicating whether to override an exception if the retention period has passed. 
  ##   ManualSnapshotRetentionPeriod: int
  ##                                : <p>The number of days that a manual snapshot is retained. If you specify the value -1, the manual snapshot is retained indefinitely.</p> <p>The number must be either -1 or an integer between 1 and 3,653.</p> <p>If you decrease the manual snapshot retention period from its current value, existing manual snapshots that fall outside of the new retention period will return an error. If you want to suppress the errors and delete the snapshots, use the force option. </p>
  var query_21626163 = newJObject()
  if SnapshotIdentifierList != nil:
    query_21626163.add "SnapshotIdentifierList", SnapshotIdentifierList
  add(query_21626163, "Action", newJString(Action))
  add(query_21626163, "Version", newJString(Version))
  add(query_21626163, "Force", newJBool(Force))
  add(query_21626163, "ManualSnapshotRetentionPeriod",
      newJInt(ManualSnapshotRetentionPeriod))
  result = call_21626162.call(nil, query_21626163, nil, nil, nil)

var getBatchModifyClusterSnapshots* = Call_GetBatchModifyClusterSnapshots_21626146(
    name: "getBatchModifyClusterSnapshots", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=BatchModifyClusterSnapshots",
    validator: validate_GetBatchModifyClusterSnapshots_21626147, base: "/",
    makeUrl: url_GetBatchModifyClusterSnapshots_21626148,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCancelResize_21626199 = ref object of OpenApiRestCall_21625418
proc url_PostCancelResize_21626201(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCancelResize_21626200(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Cancels a resize operation for a cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626202 = query.getOrDefault("Action")
  valid_21626202 = validateParameter(valid_21626202, JString, required = true,
                                   default = newJString("CancelResize"))
  if valid_21626202 != nil:
    section.add "Action", valid_21626202
  var valid_21626203 = query.getOrDefault("Version")
  valid_21626203 = validateParameter(valid_21626203, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626203 != nil:
    section.add "Version", valid_21626203
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626204 = header.getOrDefault("X-Amz-Date")
  valid_21626204 = validateParameter(valid_21626204, JString, required = false,
                                   default = nil)
  if valid_21626204 != nil:
    section.add "X-Amz-Date", valid_21626204
  var valid_21626205 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626205 = validateParameter(valid_21626205, JString, required = false,
                                   default = nil)
  if valid_21626205 != nil:
    section.add "X-Amz-Security-Token", valid_21626205
  var valid_21626206 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626206 = validateParameter(valid_21626206, JString, required = false,
                                   default = nil)
  if valid_21626206 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626206
  var valid_21626207 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626207 = validateParameter(valid_21626207, JString, required = false,
                                   default = nil)
  if valid_21626207 != nil:
    section.add "X-Amz-Algorithm", valid_21626207
  var valid_21626208 = header.getOrDefault("X-Amz-Signature")
  valid_21626208 = validateParameter(valid_21626208, JString, required = false,
                                   default = nil)
  if valid_21626208 != nil:
    section.add "X-Amz-Signature", valid_21626208
  var valid_21626209 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626209 = validateParameter(valid_21626209, JString, required = false,
                                   default = nil)
  if valid_21626209 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626209
  var valid_21626210 = header.getOrDefault("X-Amz-Credential")
  valid_21626210 = validateParameter(valid_21626210, JString, required = false,
                                   default = nil)
  if valid_21626210 != nil:
    section.add "X-Amz-Credential", valid_21626210
  result.add "header", section
  ## parameters in `formData` object:
  ##   ClusterIdentifier: JString (required)
  ##                    : The unique identifier for the cluster that you want to cancel a resize operation for.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ClusterIdentifier` field"
  var valid_21626211 = formData.getOrDefault("ClusterIdentifier")
  valid_21626211 = validateParameter(valid_21626211, JString, required = true,
                                   default = nil)
  if valid_21626211 != nil:
    section.add "ClusterIdentifier", valid_21626211
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626212: Call_PostCancelResize_21626199; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Cancels a resize operation for a cluster.
  ## 
  let valid = call_21626212.validator(path, query, header, formData, body, _)
  let scheme = call_21626212.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626212.makeUrl(scheme.get, call_21626212.host, call_21626212.base,
                               call_21626212.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626212, uri, valid, _)

proc call*(call_21626213: Call_PostCancelResize_21626199;
          ClusterIdentifier: string; Action: string = "CancelResize";
          Version: string = "2012-12-01"): Recallable =
  ## postCancelResize
  ## Cancels a resize operation for a cluster.
  ##   Action: string (required)
  ##   ClusterIdentifier: string (required)
  ##                    : The unique identifier for the cluster that you want to cancel a resize operation for.
  ##   Version: string (required)
  var query_21626214 = newJObject()
  var formData_21626215 = newJObject()
  add(query_21626214, "Action", newJString(Action))
  add(formData_21626215, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(query_21626214, "Version", newJString(Version))
  result = call_21626213.call(nil, query_21626214, nil, formData_21626215, nil)

var postCancelResize* = Call_PostCancelResize_21626199(name: "postCancelResize",
    meth: HttpMethod.HttpPost, host: "redshift.amazonaws.com",
    route: "/#Action=CancelResize", validator: validate_PostCancelResize_21626200,
    base: "/", makeUrl: url_PostCancelResize_21626201,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCancelResize_21626183 = ref object of OpenApiRestCall_21625418
proc url_GetCancelResize_21626185(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCancelResize_21626184(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Cancels a resize operation for a cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ClusterIdentifier: JString (required)
  ##                    : The unique identifier for the cluster that you want to cancel a resize operation for.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626186 = query.getOrDefault("Action")
  valid_21626186 = validateParameter(valid_21626186, JString, required = true,
                                   default = newJString("CancelResize"))
  if valid_21626186 != nil:
    section.add "Action", valid_21626186
  var valid_21626187 = query.getOrDefault("ClusterIdentifier")
  valid_21626187 = validateParameter(valid_21626187, JString, required = true,
                                   default = nil)
  if valid_21626187 != nil:
    section.add "ClusterIdentifier", valid_21626187
  var valid_21626188 = query.getOrDefault("Version")
  valid_21626188 = validateParameter(valid_21626188, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626188 != nil:
    section.add "Version", valid_21626188
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626189 = header.getOrDefault("X-Amz-Date")
  valid_21626189 = validateParameter(valid_21626189, JString, required = false,
                                   default = nil)
  if valid_21626189 != nil:
    section.add "X-Amz-Date", valid_21626189
  var valid_21626190 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626190 = validateParameter(valid_21626190, JString, required = false,
                                   default = nil)
  if valid_21626190 != nil:
    section.add "X-Amz-Security-Token", valid_21626190
  var valid_21626191 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626191 = validateParameter(valid_21626191, JString, required = false,
                                   default = nil)
  if valid_21626191 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626191
  var valid_21626192 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626192 = validateParameter(valid_21626192, JString, required = false,
                                   default = nil)
  if valid_21626192 != nil:
    section.add "X-Amz-Algorithm", valid_21626192
  var valid_21626193 = header.getOrDefault("X-Amz-Signature")
  valid_21626193 = validateParameter(valid_21626193, JString, required = false,
                                   default = nil)
  if valid_21626193 != nil:
    section.add "X-Amz-Signature", valid_21626193
  var valid_21626194 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626194 = validateParameter(valid_21626194, JString, required = false,
                                   default = nil)
  if valid_21626194 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626194
  var valid_21626195 = header.getOrDefault("X-Amz-Credential")
  valid_21626195 = validateParameter(valid_21626195, JString, required = false,
                                   default = nil)
  if valid_21626195 != nil:
    section.add "X-Amz-Credential", valid_21626195
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626196: Call_GetCancelResize_21626183; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Cancels a resize operation for a cluster.
  ## 
  let valid = call_21626196.validator(path, query, header, formData, body, _)
  let scheme = call_21626196.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626196.makeUrl(scheme.get, call_21626196.host, call_21626196.base,
                               call_21626196.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626196, uri, valid, _)

proc call*(call_21626197: Call_GetCancelResize_21626183; ClusterIdentifier: string;
          Action: string = "CancelResize"; Version: string = "2012-12-01"): Recallable =
  ## getCancelResize
  ## Cancels a resize operation for a cluster.
  ##   Action: string (required)
  ##   ClusterIdentifier: string (required)
  ##                    : The unique identifier for the cluster that you want to cancel a resize operation for.
  ##   Version: string (required)
  var query_21626198 = newJObject()
  add(query_21626198, "Action", newJString(Action))
  add(query_21626198, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(query_21626198, "Version", newJString(Version))
  result = call_21626197.call(nil, query_21626198, nil, nil, nil)

var getCancelResize* = Call_GetCancelResize_21626183(name: "getCancelResize",
    meth: HttpMethod.HttpGet, host: "redshift.amazonaws.com",
    route: "/#Action=CancelResize", validator: validate_GetCancelResize_21626184,
    base: "/", makeUrl: url_GetCancelResize_21626185,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyClusterSnapshot_21626235 = ref object of OpenApiRestCall_21625418
proc url_PostCopyClusterSnapshot_21626237(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopyClusterSnapshot_21626236(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Copies the specified automated cluster snapshot to a new manual cluster snapshot. The source must be an automated snapshot and it must be in the available state.</p> <p>When you delete a cluster, Amazon Redshift deletes any automated snapshots of the cluster. Also, when the retention period of the snapshot expires, Amazon Redshift automatically deletes it. If you want to keep an automated snapshot for a longer period, you can make a manual copy of the snapshot. Manual snapshots are retained until you delete them.</p> <p> For more information about working with snapshots, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626238 = query.getOrDefault("Action")
  valid_21626238 = validateParameter(valid_21626238, JString, required = true,
                                   default = newJString("CopyClusterSnapshot"))
  if valid_21626238 != nil:
    section.add "Action", valid_21626238
  var valid_21626239 = query.getOrDefault("Version")
  valid_21626239 = validateParameter(valid_21626239, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626239 != nil:
    section.add "Version", valid_21626239
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626240 = header.getOrDefault("X-Amz-Date")
  valid_21626240 = validateParameter(valid_21626240, JString, required = false,
                                   default = nil)
  if valid_21626240 != nil:
    section.add "X-Amz-Date", valid_21626240
  var valid_21626241 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626241 = validateParameter(valid_21626241, JString, required = false,
                                   default = nil)
  if valid_21626241 != nil:
    section.add "X-Amz-Security-Token", valid_21626241
  var valid_21626242 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626242 = validateParameter(valid_21626242, JString, required = false,
                                   default = nil)
  if valid_21626242 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626242
  var valid_21626243 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626243 = validateParameter(valid_21626243, JString, required = false,
                                   default = nil)
  if valid_21626243 != nil:
    section.add "X-Amz-Algorithm", valid_21626243
  var valid_21626244 = header.getOrDefault("X-Amz-Signature")
  valid_21626244 = validateParameter(valid_21626244, JString, required = false,
                                   default = nil)
  if valid_21626244 != nil:
    section.add "X-Amz-Signature", valid_21626244
  var valid_21626245 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626245 = validateParameter(valid_21626245, JString, required = false,
                                   default = nil)
  if valid_21626245 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626245
  var valid_21626246 = header.getOrDefault("X-Amz-Credential")
  valid_21626246 = validateParameter(valid_21626246, JString, required = false,
                                   default = nil)
  if valid_21626246 != nil:
    section.add "X-Amz-Credential", valid_21626246
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceSnapshotIdentifier: JString (required)
  ##                           : <p>The identifier for the source snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier for a valid automated snapshot whose state is <code>available</code>.</p> </li> </ul>
  ##   TargetSnapshotIdentifier: JString (required)
  ##                           : <p>The identifier given to the new manual snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank.</p> </li> <li> <p>Must contain from 1 to 255 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Must be unique for the AWS account that is making the request.</p> </li> </ul>
  ##   SourceSnapshotClusterIdentifier: JString
  ##                                  : <p>The identifier of the cluster the source snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier for a valid cluster.</p> </li> </ul>
  ##   ManualSnapshotRetentionPeriod: JInt
  ##                                : <p>The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely. </p> <p>The value must be either -1 or an integer between 1 and 3,653.</p> <p>The default value is -1.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SourceSnapshotIdentifier` field"
  var valid_21626247 = formData.getOrDefault("SourceSnapshotIdentifier")
  valid_21626247 = validateParameter(valid_21626247, JString, required = true,
                                   default = nil)
  if valid_21626247 != nil:
    section.add "SourceSnapshotIdentifier", valid_21626247
  var valid_21626248 = formData.getOrDefault("TargetSnapshotIdentifier")
  valid_21626248 = validateParameter(valid_21626248, JString, required = true,
                                   default = nil)
  if valid_21626248 != nil:
    section.add "TargetSnapshotIdentifier", valid_21626248
  var valid_21626249 = formData.getOrDefault("SourceSnapshotClusterIdentifier")
  valid_21626249 = validateParameter(valid_21626249, JString, required = false,
                                   default = nil)
  if valid_21626249 != nil:
    section.add "SourceSnapshotClusterIdentifier", valid_21626249
  var valid_21626250 = formData.getOrDefault("ManualSnapshotRetentionPeriod")
  valid_21626250 = validateParameter(valid_21626250, JInt, required = false,
                                   default = nil)
  if valid_21626250 != nil:
    section.add "ManualSnapshotRetentionPeriod", valid_21626250
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626251: Call_PostCopyClusterSnapshot_21626235;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Copies the specified automated cluster snapshot to a new manual cluster snapshot. The source must be an automated snapshot and it must be in the available state.</p> <p>When you delete a cluster, Amazon Redshift deletes any automated snapshots of the cluster. Also, when the retention period of the snapshot expires, Amazon Redshift automatically deletes it. If you want to keep an automated snapshot for a longer period, you can make a manual copy of the snapshot. Manual snapshots are retained until you delete them.</p> <p> For more information about working with snapshots, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  let valid = call_21626251.validator(path, query, header, formData, body, _)
  let scheme = call_21626251.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626251.makeUrl(scheme.get, call_21626251.host, call_21626251.base,
                               call_21626251.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626251, uri, valid, _)

proc call*(call_21626252: Call_PostCopyClusterSnapshot_21626235;
          SourceSnapshotIdentifier: string; TargetSnapshotIdentifier: string;
          Action: string = "CopyClusterSnapshot";
          SourceSnapshotClusterIdentifier: string = "";
          ManualSnapshotRetentionPeriod: int = 0; Version: string = "2012-12-01"): Recallable =
  ## postCopyClusterSnapshot
  ## <p>Copies the specified automated cluster snapshot to a new manual cluster snapshot. The source must be an automated snapshot and it must be in the available state.</p> <p>When you delete a cluster, Amazon Redshift deletes any automated snapshots of the cluster. Also, when the retention period of the snapshot expires, Amazon Redshift automatically deletes it. If you want to keep an automated snapshot for a longer period, you can make a manual copy of the snapshot. Manual snapshots are retained until you delete them.</p> <p> For more information about working with snapshots, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ##   SourceSnapshotIdentifier: string (required)
  ##                           : <p>The identifier for the source snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier for a valid automated snapshot whose state is <code>available</code>.</p> </li> </ul>
  ##   TargetSnapshotIdentifier: string (required)
  ##                           : <p>The identifier given to the new manual snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank.</p> </li> <li> <p>Must contain from 1 to 255 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Must be unique for the AWS account that is making the request.</p> </li> </ul>
  ##   Action: string (required)
  ##   SourceSnapshotClusterIdentifier: string
  ##                                  : <p>The identifier of the cluster the source snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier for a valid cluster.</p> </li> </ul>
  ##   ManualSnapshotRetentionPeriod: int
  ##                                : <p>The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely. </p> <p>The value must be either -1 or an integer between 1 and 3,653.</p> <p>The default value is -1.</p>
  ##   Version: string (required)
  var query_21626253 = newJObject()
  var formData_21626254 = newJObject()
  add(formData_21626254, "SourceSnapshotIdentifier",
      newJString(SourceSnapshotIdentifier))
  add(formData_21626254, "TargetSnapshotIdentifier",
      newJString(TargetSnapshotIdentifier))
  add(query_21626253, "Action", newJString(Action))
  add(formData_21626254, "SourceSnapshotClusterIdentifier",
      newJString(SourceSnapshotClusterIdentifier))
  add(formData_21626254, "ManualSnapshotRetentionPeriod",
      newJInt(ManualSnapshotRetentionPeriod))
  add(query_21626253, "Version", newJString(Version))
  result = call_21626252.call(nil, query_21626253, nil, formData_21626254, nil)

var postCopyClusterSnapshot* = Call_PostCopyClusterSnapshot_21626235(
    name: "postCopyClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=CopyClusterSnapshot",
    validator: validate_PostCopyClusterSnapshot_21626236, base: "/",
    makeUrl: url_PostCopyClusterSnapshot_21626237,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyClusterSnapshot_21626216 = ref object of OpenApiRestCall_21625418
proc url_GetCopyClusterSnapshot_21626218(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopyClusterSnapshot_21626217(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Copies the specified automated cluster snapshot to a new manual cluster snapshot. The source must be an automated snapshot and it must be in the available state.</p> <p>When you delete a cluster, Amazon Redshift deletes any automated snapshots of the cluster. Also, when the retention period of the snapshot expires, Amazon Redshift automatically deletes it. If you want to keep an automated snapshot for a longer period, you can make a manual copy of the snapshot. Manual snapshots are retained until you delete them.</p> <p> For more information about working with snapshots, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceSnapshotIdentifier: JString (required)
  ##                           : <p>The identifier for the source snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier for a valid automated snapshot whose state is <code>available</code>.</p> </li> </ul>
  ##   Action: JString (required)
  ##   TargetSnapshotIdentifier: JString (required)
  ##                           : <p>The identifier given to the new manual snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank.</p> </li> <li> <p>Must contain from 1 to 255 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Must be unique for the AWS account that is making the request.</p> </li> </ul>
  ##   Version: JString (required)
  ##   SourceSnapshotClusterIdentifier: JString
  ##                                  : <p>The identifier of the cluster the source snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier for a valid cluster.</p> </li> </ul>
  ##   ManualSnapshotRetentionPeriod: JInt
  ##                                : <p>The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely. </p> <p>The value must be either -1 or an integer between 1 and 3,653.</p> <p>The default value is -1.</p>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `SourceSnapshotIdentifier` field"
  var valid_21626219 = query.getOrDefault("SourceSnapshotIdentifier")
  valid_21626219 = validateParameter(valid_21626219, JString, required = true,
                                   default = nil)
  if valid_21626219 != nil:
    section.add "SourceSnapshotIdentifier", valid_21626219
  var valid_21626220 = query.getOrDefault("Action")
  valid_21626220 = validateParameter(valid_21626220, JString, required = true,
                                   default = newJString("CopyClusterSnapshot"))
  if valid_21626220 != nil:
    section.add "Action", valid_21626220
  var valid_21626221 = query.getOrDefault("TargetSnapshotIdentifier")
  valid_21626221 = validateParameter(valid_21626221, JString, required = true,
                                   default = nil)
  if valid_21626221 != nil:
    section.add "TargetSnapshotIdentifier", valid_21626221
  var valid_21626222 = query.getOrDefault("Version")
  valid_21626222 = validateParameter(valid_21626222, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626222 != nil:
    section.add "Version", valid_21626222
  var valid_21626223 = query.getOrDefault("SourceSnapshotClusterIdentifier")
  valid_21626223 = validateParameter(valid_21626223, JString, required = false,
                                   default = nil)
  if valid_21626223 != nil:
    section.add "SourceSnapshotClusterIdentifier", valid_21626223
  var valid_21626224 = query.getOrDefault("ManualSnapshotRetentionPeriod")
  valid_21626224 = validateParameter(valid_21626224, JInt, required = false,
                                   default = nil)
  if valid_21626224 != nil:
    section.add "ManualSnapshotRetentionPeriod", valid_21626224
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626225 = header.getOrDefault("X-Amz-Date")
  valid_21626225 = validateParameter(valid_21626225, JString, required = false,
                                   default = nil)
  if valid_21626225 != nil:
    section.add "X-Amz-Date", valid_21626225
  var valid_21626226 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626226 = validateParameter(valid_21626226, JString, required = false,
                                   default = nil)
  if valid_21626226 != nil:
    section.add "X-Amz-Security-Token", valid_21626226
  var valid_21626227 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626227 = validateParameter(valid_21626227, JString, required = false,
                                   default = nil)
  if valid_21626227 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626227
  var valid_21626228 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626228 = validateParameter(valid_21626228, JString, required = false,
                                   default = nil)
  if valid_21626228 != nil:
    section.add "X-Amz-Algorithm", valid_21626228
  var valid_21626229 = header.getOrDefault("X-Amz-Signature")
  valid_21626229 = validateParameter(valid_21626229, JString, required = false,
                                   default = nil)
  if valid_21626229 != nil:
    section.add "X-Amz-Signature", valid_21626229
  var valid_21626230 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626230 = validateParameter(valid_21626230, JString, required = false,
                                   default = nil)
  if valid_21626230 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626230
  var valid_21626231 = header.getOrDefault("X-Amz-Credential")
  valid_21626231 = validateParameter(valid_21626231, JString, required = false,
                                   default = nil)
  if valid_21626231 != nil:
    section.add "X-Amz-Credential", valid_21626231
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626232: Call_GetCopyClusterSnapshot_21626216;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Copies the specified automated cluster snapshot to a new manual cluster snapshot. The source must be an automated snapshot and it must be in the available state.</p> <p>When you delete a cluster, Amazon Redshift deletes any automated snapshots of the cluster. Also, when the retention period of the snapshot expires, Amazon Redshift automatically deletes it. If you want to keep an automated snapshot for a longer period, you can make a manual copy of the snapshot. Manual snapshots are retained until you delete them.</p> <p> For more information about working with snapshots, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  let valid = call_21626232.validator(path, query, header, formData, body, _)
  let scheme = call_21626232.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626232.makeUrl(scheme.get, call_21626232.host, call_21626232.base,
                               call_21626232.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626232, uri, valid, _)

proc call*(call_21626233: Call_GetCopyClusterSnapshot_21626216;
          SourceSnapshotIdentifier: string; TargetSnapshotIdentifier: string;
          Action: string = "CopyClusterSnapshot"; Version: string = "2012-12-01";
          SourceSnapshotClusterIdentifier: string = "";
          ManualSnapshotRetentionPeriod: int = 0): Recallable =
  ## getCopyClusterSnapshot
  ## <p>Copies the specified automated cluster snapshot to a new manual cluster snapshot. The source must be an automated snapshot and it must be in the available state.</p> <p>When you delete a cluster, Amazon Redshift deletes any automated snapshots of the cluster. Also, when the retention period of the snapshot expires, Amazon Redshift automatically deletes it. If you want to keep an automated snapshot for a longer period, you can make a manual copy of the snapshot. Manual snapshots are retained until you delete them.</p> <p> For more information about working with snapshots, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ##   SourceSnapshotIdentifier: string (required)
  ##                           : <p>The identifier for the source snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier for a valid automated snapshot whose state is <code>available</code>.</p> </li> </ul>
  ##   Action: string (required)
  ##   TargetSnapshotIdentifier: string (required)
  ##                           : <p>The identifier given to the new manual snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank.</p> </li> <li> <p>Must contain from 1 to 255 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Must be unique for the AWS account that is making the request.</p> </li> </ul>
  ##   Version: string (required)
  ##   SourceSnapshotClusterIdentifier: string
  ##                                  : <p>The identifier of the cluster the source snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier for a valid cluster.</p> </li> </ul>
  ##   ManualSnapshotRetentionPeriod: int
  ##                                : <p>The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely. </p> <p>The value must be either -1 or an integer between 1 and 3,653.</p> <p>The default value is -1.</p>
  var query_21626234 = newJObject()
  add(query_21626234, "SourceSnapshotIdentifier",
      newJString(SourceSnapshotIdentifier))
  add(query_21626234, "Action", newJString(Action))
  add(query_21626234, "TargetSnapshotIdentifier",
      newJString(TargetSnapshotIdentifier))
  add(query_21626234, "Version", newJString(Version))
  add(query_21626234, "SourceSnapshotClusterIdentifier",
      newJString(SourceSnapshotClusterIdentifier))
  add(query_21626234, "ManualSnapshotRetentionPeriod",
      newJInt(ManualSnapshotRetentionPeriod))
  result = call_21626233.call(nil, query_21626234, nil, nil, nil)

var getCopyClusterSnapshot* = Call_GetCopyClusterSnapshot_21626216(
    name: "getCopyClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=CopyClusterSnapshot",
    validator: validate_GetCopyClusterSnapshot_21626217, base: "/",
    makeUrl: url_GetCopyClusterSnapshot_21626218,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCluster_21626300 = ref object of OpenApiRestCall_21625418
proc url_PostCreateCluster_21626302(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateCluster_21626301(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a new cluster with the specified parameters.</p> <p>To create a cluster in Virtual Private Cloud (VPC), you must provide a cluster subnet group name. The cluster subnet group identifies the subnets of your VPC that Amazon Redshift uses when creating the cluster. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626303 = query.getOrDefault("Action")
  valid_21626303 = validateParameter(valid_21626303, JString, required = true,
                                   default = newJString("CreateCluster"))
  if valid_21626303 != nil:
    section.add "Action", valid_21626303
  var valid_21626304 = query.getOrDefault("Version")
  valid_21626304 = validateParameter(valid_21626304, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626304 != nil:
    section.add "Version", valid_21626304
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626305 = header.getOrDefault("X-Amz-Date")
  valid_21626305 = validateParameter(valid_21626305, JString, required = false,
                                   default = nil)
  if valid_21626305 != nil:
    section.add "X-Amz-Date", valid_21626305
  var valid_21626306 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626306 = validateParameter(valid_21626306, JString, required = false,
                                   default = nil)
  if valid_21626306 != nil:
    section.add "X-Amz-Security-Token", valid_21626306
  var valid_21626307 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626307 = validateParameter(valid_21626307, JString, required = false,
                                   default = nil)
  if valid_21626307 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626307
  var valid_21626308 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626308 = validateParameter(valid_21626308, JString, required = false,
                                   default = nil)
  if valid_21626308 != nil:
    section.add "X-Amz-Algorithm", valid_21626308
  var valid_21626309 = header.getOrDefault("X-Amz-Signature")
  valid_21626309 = validateParameter(valid_21626309, JString, required = false,
                                   default = nil)
  if valid_21626309 != nil:
    section.add "X-Amz-Signature", valid_21626309
  var valid_21626310 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626310 = validateParameter(valid_21626310, JString, required = false,
                                   default = nil)
  if valid_21626310 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626310
  var valid_21626311 = header.getOrDefault("X-Amz-Credential")
  valid_21626311 = validateParameter(valid_21626311, JString, required = false,
                                   default = nil)
  if valid_21626311 != nil:
    section.add "X-Amz-Credential", valid_21626311
  result.add "header", section
  ## parameters in `formData` object:
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range (in UTC) during which automated cluster maintenance can occur.</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p> Default: A 30-minute window selected at random from an 8-hour block of time per region, occurring on a random day of the week. For more information about the time blocks for each region, see <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#rs-maintenance-windows">Maintenance Windows</a> in Amazon Redshift Cluster Management Guide.</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   EnhancedVpcRouting: JBool
  ##                     : <p>An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html">Enhanced VPC Routing</a> in the Amazon Redshift Cluster Management Guide.</p> <p>If this option is <code>true</code>, enhanced VPC routing is enabled. </p> <p>Default: false</p>
  ##   Port: JInt
  ##       : <p>The port number on which the cluster accepts incoming connections.</p> <p>The cluster is accessible only via the JDBC and ODBC connection strings. Part of the connection string requires the port on which the cluster will listen for incoming connections.</p> <p>Default: <code>5439</code> </p> <p>Valid Values: <code>1150-65535</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Virtual Private Cloud (VPC) security groups to be associated with the cluster.</p> <p>Default: The default VPC security group is associated with the cluster.</p>
  ##   DBName: JString
  ##         : <p>The name of the first database to be created when the cluster is created.</p> <p>To create additional databases after the cluster is created, connect to the cluster with a SQL client and use SQL commands to create a database. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/dg/t_creating_database.html">Create a Database</a> in the Amazon Redshift Database Developer Guide. </p> <p>Default: <code>dev</code> </p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 alphanumeric characters.</p> </li> <li> <p>Must contain only lowercase letters.</p> </li> <li> <p>Cannot be a word that is reserved by the service. A list of reserved words can be found in <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html">Reserved Words</a> in the Amazon Redshift Database Developer Guide. </p> </li> </ul>
  ##   ClusterVersion: JString
  ##                 : <p>The version of the Amazon Redshift engine software that you want to deploy on the cluster.</p> <p>The version selected runs on all the nodes in the cluster.</p> <p>Constraints: Only version 1.0 is currently available.</p> <p>Example: <code>1.0</code> </p>
  ##   ClusterType: JString
  ##              : <p>The type of the cluster. When cluster type is specified as</p> <ul> <li> <p> <code>single-node</code>, the <b>NumberOfNodes</b> parameter is not required.</p> </li> <li> <p> <code>multi-node</code>, the <b>NumberOfNodes</b> parameter is required.</p> </li> </ul> <p>Valid Values: <code>multi-node</code> | <code>single-node</code> </p> <p>Default: <code>multi-node</code> </p>
  ##   MasterUserPassword: JString (required)
  ##                     : <p>The password associated with the master user account for the cluster that is being created.</p> <p>Constraints:</p> <ul> <li> <p>Must be between 8 and 64 characters in length.</p> </li> <li> <p>Must contain at least one uppercase letter.</p> </li> <li> <p>Must contain at least one lowercase letter.</p> </li> <li> <p>Must contain one number.</p> </li> <li> <p>Can be any printable ASCII character (ASCII code 33 to 126) except ' (single quote), " (double quote), \, /, @, or space.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tag instances.
  ##   AdditionalInfo: JString
  ##                 : Reserved.
  ##   ClusterSecurityGroups: JArray
  ##                        : <p>A list of security groups to be associated with this cluster.</p> <p>Default: The default cluster security group for Amazon Redshift.</p>
  ##   AvailabilityZone: JString
  ##                   : <p>The EC2 Availability Zone (AZ) in which you want Amazon Redshift to provision the cluster. For example, if you have several EC2 instances running in a specific Availability Zone, then you might want the cluster to be provisioned in the same zone in order to decrease network latency.</p> <p>Default: A random, system-chosen Availability Zone in the region that is specified by the endpoint.</p> <p>Example: <code>us-east-2d</code> </p> <p>Constraint: The specified Availability Zone must be in the same region as the current endpoint.</p>
  ##   Encrypted: JBool
  ##            : <p>If <code>true</code>, the data in the cluster is encrypted at rest. </p> <p>Default: false</p>
  ##   HsmConfigurationIdentifier: JString
  ##                             : Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
  ##   HsmClientCertificateIdentifier: JString
  ##                                 : Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
  ##   PubliclyAccessible: JBool
  ##                     : If <code>true</code>, the cluster can be accessed from a public network. 
  ##   ClusterIdentifier: JString (required)
  ##                    : <p>A unique identifier for the cluster. You use this identifier to refer to the cluster for any subsequent cluster operations such as deleting or modifying. The identifier also appears in the Amazon Redshift console.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>Alphabetic characters must be lowercase.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Must be unique for all clusters within an AWS account.</p> </li> </ul> <p>Example: <code>myexamplecluster</code> </p>
  ##   MasterUsername: JString (required)
  ##                 : <p>The user name associated with the master user account for the cluster that is being created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 - 128 alphanumeric characters. The user name can't be <code>PUBLIC</code>.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot be a reserved word. A list of reserved words can be found in <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html">Reserved Words</a> in the Amazon Redshift Database Developer Guide. </p> </li> </ul>
  ##   NumberOfNodes: JInt
  ##                : <p>The number of compute nodes in the cluster. This parameter is required when the <b>ClusterType</b> parameter is specified as <code>multi-node</code>. </p> <p>For information about determining how many nodes you need, go to <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#how-many-nodes"> Working with Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p> <p>If you don't specify this parameter, you get a single-node cluster. When requesting a multi-node cluster, you must specify the number of nodes that you want in the cluster.</p> <p>Default: <code>1</code> </p> <p>Constraints: Value must be at least 1 and no more than 100.</p>
  ##   IamRoles: JArray
  ##           : <p>A list of AWS Identity and Access Management (IAM) roles that can be used by the cluster to access other AWS services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. You can supply up to 10 IAM roles in a single request.</p> <p>A cluster can have up to 10 IAM roles associated with it at any time.</p>
  ##   ClusterParameterGroupName: JString
  ##                            : <p>The name of the parameter group to be associated with this cluster.</p> <p>Default: The default Amazon Redshift cluster parameter group. For information about the default parameter group, go to <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Working with Amazon Redshift Parameter Groups</a> </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   SnapshotScheduleIdentifier: JString
  ##                             : A unique identifier for the snapshot schedule.
  ##   KmsKeyId: JString
  ##           : The AWS Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the cluster.
  ##   ManualSnapshotRetentionPeriod: JInt
  ##                                : <p>The default number of days to retain a manual snapshot. If the value is -1, the snapshot is retained indefinitely. This setting doesn't change the retention period of existing snapshots.</p> <p>The value must be either -1 or an integer between 1 and 3,653.</p>
  ##   ElasticIp: JString
  ##            : <p>The Elastic IP (EIP) address for the cluster.</p> <p>Constraints: The cluster must be provisioned in EC2-VPC and publicly-accessible through an Internet gateway. For more information about provisioning clusters in EC2-VPC, go to <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#cluster-platforms">Supported Platforms to Launch Your Cluster</a> in the Amazon Redshift Cluster Management Guide.</p>
  ##   AllowVersionUpgrade: JBool
  ##                      : <p>If <code>true</code>, major version upgrades can be applied during the maintenance window to the Amazon Redshift engine that is running on the cluster.</p> <p>When a new major version of the Amazon Redshift engine is released, you can request that the service automatically apply upgrades during the maintenance window to the Amazon Redshift engine that is running on your cluster.</p> <p>Default: <code>true</code> </p>
  ##   AutomatedSnapshotRetentionPeriod: JInt
  ##                                   : <p>The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with <a>CreateClusterSnapshot</a>. </p> <p>Default: <code>1</code> </p> <p>Constraints: Must be a value from 0 to 35.</p>
  ##   NodeType: JString (required)
  ##           : <p>The node type to be provisioned for the cluster. For information about node types, go to <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#how-many-nodes"> Working with Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p> <p>Valid Values: <code>ds2.xlarge</code> | <code>ds2.8xlarge</code> | <code>dc1.large</code> | <code>dc1.8xlarge</code> | <code>dc2.large</code> | <code>dc2.8xlarge</code> | <code>ra3.16xlarge</code> </p>
  ##   MaintenanceTrackName: JString
  ##                       : An optional parameter for the name of the maintenance track for the cluster. If you don't provide a maintenance track name, the cluster is assigned to the <code>current</code> track.
  ##   ClusterSubnetGroupName: JString
  ##                         : <p>The name of a cluster subnet group to be associated with this cluster.</p> <p>If this parameter is not provided the resulting cluster will be deployed outside virtual private cloud (VPC).</p>
  section = newJObject()
  var valid_21626312 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_21626312 = validateParameter(valid_21626312, JString, required = false,
                                   default = nil)
  if valid_21626312 != nil:
    section.add "PreferredMaintenanceWindow", valid_21626312
  var valid_21626313 = formData.getOrDefault("EnhancedVpcRouting")
  valid_21626313 = validateParameter(valid_21626313, JBool, required = false,
                                   default = nil)
  if valid_21626313 != nil:
    section.add "EnhancedVpcRouting", valid_21626313
  var valid_21626314 = formData.getOrDefault("Port")
  valid_21626314 = validateParameter(valid_21626314, JInt, required = false,
                                   default = nil)
  if valid_21626314 != nil:
    section.add "Port", valid_21626314
  var valid_21626315 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_21626315 = validateParameter(valid_21626315, JArray, required = false,
                                   default = nil)
  if valid_21626315 != nil:
    section.add "VpcSecurityGroupIds", valid_21626315
  var valid_21626316 = formData.getOrDefault("DBName")
  valid_21626316 = validateParameter(valid_21626316, JString, required = false,
                                   default = nil)
  if valid_21626316 != nil:
    section.add "DBName", valid_21626316
  var valid_21626317 = formData.getOrDefault("ClusterVersion")
  valid_21626317 = validateParameter(valid_21626317, JString, required = false,
                                   default = nil)
  if valid_21626317 != nil:
    section.add "ClusterVersion", valid_21626317
  var valid_21626318 = formData.getOrDefault("ClusterType")
  valid_21626318 = validateParameter(valid_21626318, JString, required = false,
                                   default = nil)
  if valid_21626318 != nil:
    section.add "ClusterType", valid_21626318
  assert formData != nil, "formData argument is necessary due to required `MasterUserPassword` field"
  var valid_21626319 = formData.getOrDefault("MasterUserPassword")
  valid_21626319 = validateParameter(valid_21626319, JString, required = true,
                                   default = nil)
  if valid_21626319 != nil:
    section.add "MasterUserPassword", valid_21626319
  var valid_21626320 = formData.getOrDefault("Tags")
  valid_21626320 = validateParameter(valid_21626320, JArray, required = false,
                                   default = nil)
  if valid_21626320 != nil:
    section.add "Tags", valid_21626320
  var valid_21626321 = formData.getOrDefault("AdditionalInfo")
  valid_21626321 = validateParameter(valid_21626321, JString, required = false,
                                   default = nil)
  if valid_21626321 != nil:
    section.add "AdditionalInfo", valid_21626321
  var valid_21626322 = formData.getOrDefault("ClusterSecurityGroups")
  valid_21626322 = validateParameter(valid_21626322, JArray, required = false,
                                   default = nil)
  if valid_21626322 != nil:
    section.add "ClusterSecurityGroups", valid_21626322
  var valid_21626323 = formData.getOrDefault("AvailabilityZone")
  valid_21626323 = validateParameter(valid_21626323, JString, required = false,
                                   default = nil)
  if valid_21626323 != nil:
    section.add "AvailabilityZone", valid_21626323
  var valid_21626324 = formData.getOrDefault("Encrypted")
  valid_21626324 = validateParameter(valid_21626324, JBool, required = false,
                                   default = nil)
  if valid_21626324 != nil:
    section.add "Encrypted", valid_21626324
  var valid_21626325 = formData.getOrDefault("HsmConfigurationIdentifier")
  valid_21626325 = validateParameter(valid_21626325, JString, required = false,
                                   default = nil)
  if valid_21626325 != nil:
    section.add "HsmConfigurationIdentifier", valid_21626325
  var valid_21626326 = formData.getOrDefault("HsmClientCertificateIdentifier")
  valid_21626326 = validateParameter(valid_21626326, JString, required = false,
                                   default = nil)
  if valid_21626326 != nil:
    section.add "HsmClientCertificateIdentifier", valid_21626326
  var valid_21626327 = formData.getOrDefault("PubliclyAccessible")
  valid_21626327 = validateParameter(valid_21626327, JBool, required = false,
                                   default = nil)
  if valid_21626327 != nil:
    section.add "PubliclyAccessible", valid_21626327
  var valid_21626328 = formData.getOrDefault("ClusterIdentifier")
  valid_21626328 = validateParameter(valid_21626328, JString, required = true,
                                   default = nil)
  if valid_21626328 != nil:
    section.add "ClusterIdentifier", valid_21626328
  var valid_21626329 = formData.getOrDefault("MasterUsername")
  valid_21626329 = validateParameter(valid_21626329, JString, required = true,
                                   default = nil)
  if valid_21626329 != nil:
    section.add "MasterUsername", valid_21626329
  var valid_21626330 = formData.getOrDefault("NumberOfNodes")
  valid_21626330 = validateParameter(valid_21626330, JInt, required = false,
                                   default = nil)
  if valid_21626330 != nil:
    section.add "NumberOfNodes", valid_21626330
  var valid_21626331 = formData.getOrDefault("IamRoles")
  valid_21626331 = validateParameter(valid_21626331, JArray, required = false,
                                   default = nil)
  if valid_21626331 != nil:
    section.add "IamRoles", valid_21626331
  var valid_21626332 = formData.getOrDefault("ClusterParameterGroupName")
  valid_21626332 = validateParameter(valid_21626332, JString, required = false,
                                   default = nil)
  if valid_21626332 != nil:
    section.add "ClusterParameterGroupName", valid_21626332
  var valid_21626333 = formData.getOrDefault("SnapshotScheduleIdentifier")
  valid_21626333 = validateParameter(valid_21626333, JString, required = false,
                                   default = nil)
  if valid_21626333 != nil:
    section.add "SnapshotScheduleIdentifier", valid_21626333
  var valid_21626334 = formData.getOrDefault("KmsKeyId")
  valid_21626334 = validateParameter(valid_21626334, JString, required = false,
                                   default = nil)
  if valid_21626334 != nil:
    section.add "KmsKeyId", valid_21626334
  var valid_21626335 = formData.getOrDefault("ManualSnapshotRetentionPeriod")
  valid_21626335 = validateParameter(valid_21626335, JInt, required = false,
                                   default = nil)
  if valid_21626335 != nil:
    section.add "ManualSnapshotRetentionPeriod", valid_21626335
  var valid_21626336 = formData.getOrDefault("ElasticIp")
  valid_21626336 = validateParameter(valid_21626336, JString, required = false,
                                   default = nil)
  if valid_21626336 != nil:
    section.add "ElasticIp", valid_21626336
  var valid_21626337 = formData.getOrDefault("AllowVersionUpgrade")
  valid_21626337 = validateParameter(valid_21626337, JBool, required = false,
                                   default = nil)
  if valid_21626337 != nil:
    section.add "AllowVersionUpgrade", valid_21626337
  var valid_21626338 = formData.getOrDefault("AutomatedSnapshotRetentionPeriod")
  valid_21626338 = validateParameter(valid_21626338, JInt, required = false,
                                   default = nil)
  if valid_21626338 != nil:
    section.add "AutomatedSnapshotRetentionPeriod", valid_21626338
  var valid_21626339 = formData.getOrDefault("NodeType")
  valid_21626339 = validateParameter(valid_21626339, JString, required = true,
                                   default = nil)
  if valid_21626339 != nil:
    section.add "NodeType", valid_21626339
  var valid_21626340 = formData.getOrDefault("MaintenanceTrackName")
  valid_21626340 = validateParameter(valid_21626340, JString, required = false,
                                   default = nil)
  if valid_21626340 != nil:
    section.add "MaintenanceTrackName", valid_21626340
  var valid_21626341 = formData.getOrDefault("ClusterSubnetGroupName")
  valid_21626341 = validateParameter(valid_21626341, JString, required = false,
                                   default = nil)
  if valid_21626341 != nil:
    section.add "ClusterSubnetGroupName", valid_21626341
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626342: Call_PostCreateCluster_21626300; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new cluster with the specified parameters.</p> <p>To create a cluster in Virtual Private Cloud (VPC), you must provide a cluster subnet group name. The cluster subnet group identifies the subnets of your VPC that Amazon Redshift uses when creating the cluster. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  let valid = call_21626342.validator(path, query, header, formData, body, _)
  let scheme = call_21626342.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626342.makeUrl(scheme.get, call_21626342.host, call_21626342.base,
                               call_21626342.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626342, uri, valid, _)

proc call*(call_21626343: Call_PostCreateCluster_21626300;
          MasterUserPassword: string; ClusterIdentifier: string;
          MasterUsername: string; NodeType: string;
          PreferredMaintenanceWindow: string = ""; EnhancedVpcRouting: bool = false;
          Port: int = 0; VpcSecurityGroupIds: JsonNode = nil; DBName: string = "";
          ClusterVersion: string = ""; ClusterType: string = ""; Tags: JsonNode = nil;
          AdditionalInfo: string = ""; ClusterSecurityGroups: JsonNode = nil;
          AvailabilityZone: string = ""; Encrypted: bool = false;
          HsmConfigurationIdentifier: string = ""; Action: string = "CreateCluster";
          HsmClientCertificateIdentifier: string = "";
          PubliclyAccessible: bool = false; NumberOfNodes: int = 0;
          IamRoles: JsonNode = nil; ClusterParameterGroupName: string = "";
          SnapshotScheduleIdentifier: string = ""; KmsKeyId: string = "";
          ManualSnapshotRetentionPeriod: int = 0; ElasticIp: string = "";
          AllowVersionUpgrade: bool = false;
          AutomatedSnapshotRetentionPeriod: int = 0; Version: string = "2012-12-01";
          MaintenanceTrackName: string = ""; ClusterSubnetGroupName: string = ""): Recallable =
  ## postCreateCluster
  ## <p>Creates a new cluster with the specified parameters.</p> <p>To create a cluster in Virtual Private Cloud (VPC), you must provide a cluster subnet group name. The cluster subnet group identifies the subnets of your VPC that Amazon Redshift uses when creating the cluster. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range (in UTC) during which automated cluster maintenance can occur.</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p> Default: A 30-minute window selected at random from an 8-hour block of time per region, occurring on a random day of the week. For more information about the time blocks for each region, see <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#rs-maintenance-windows">Maintenance Windows</a> in Amazon Redshift Cluster Management Guide.</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   EnhancedVpcRouting: bool
  ##                     : <p>An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html">Enhanced VPC Routing</a> in the Amazon Redshift Cluster Management Guide.</p> <p>If this option is <code>true</code>, enhanced VPC routing is enabled. </p> <p>Default: false</p>
  ##   Port: int
  ##       : <p>The port number on which the cluster accepts incoming connections.</p> <p>The cluster is accessible only via the JDBC and ODBC connection strings. Part of the connection string requires the port on which the cluster will listen for incoming connections.</p> <p>Default: <code>5439</code> </p> <p>Valid Values: <code>1150-65535</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Virtual Private Cloud (VPC) security groups to be associated with the cluster.</p> <p>Default: The default VPC security group is associated with the cluster.</p>
  ##   DBName: string
  ##         : <p>The name of the first database to be created when the cluster is created.</p> <p>To create additional databases after the cluster is created, connect to the cluster with a SQL client and use SQL commands to create a database. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/dg/t_creating_database.html">Create a Database</a> in the Amazon Redshift Database Developer Guide. </p> <p>Default: <code>dev</code> </p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 alphanumeric characters.</p> </li> <li> <p>Must contain only lowercase letters.</p> </li> <li> <p>Cannot be a word that is reserved by the service. A list of reserved words can be found in <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html">Reserved Words</a> in the Amazon Redshift Database Developer Guide. </p> </li> </ul>
  ##   ClusterVersion: string
  ##                 : <p>The version of the Amazon Redshift engine software that you want to deploy on the cluster.</p> <p>The version selected runs on all the nodes in the cluster.</p> <p>Constraints: Only version 1.0 is currently available.</p> <p>Example: <code>1.0</code> </p>
  ##   ClusterType: string
  ##              : <p>The type of the cluster. When cluster type is specified as</p> <ul> <li> <p> <code>single-node</code>, the <b>NumberOfNodes</b> parameter is not required.</p> </li> <li> <p> <code>multi-node</code>, the <b>NumberOfNodes</b> parameter is required.</p> </li> </ul> <p>Valid Values: <code>multi-node</code> | <code>single-node</code> </p> <p>Default: <code>multi-node</code> </p>
  ##   MasterUserPassword: string (required)
  ##                     : <p>The password associated with the master user account for the cluster that is being created.</p> <p>Constraints:</p> <ul> <li> <p>Must be between 8 and 64 characters in length.</p> </li> <li> <p>Must contain at least one uppercase letter.</p> </li> <li> <p>Must contain at least one lowercase letter.</p> </li> <li> <p>Must contain one number.</p> </li> <li> <p>Can be any printable ASCII character (ASCII code 33 to 126) except ' (single quote), " (double quote), \, /, @, or space.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tag instances.
  ##   AdditionalInfo: string
  ##                 : Reserved.
  ##   ClusterSecurityGroups: JArray
  ##                        : <p>A list of security groups to be associated with this cluster.</p> <p>Default: The default cluster security group for Amazon Redshift.</p>
  ##   AvailabilityZone: string
  ##                   : <p>The EC2 Availability Zone (AZ) in which you want Amazon Redshift to provision the cluster. For example, if you have several EC2 instances running in a specific Availability Zone, then you might want the cluster to be provisioned in the same zone in order to decrease network latency.</p> <p>Default: A random, system-chosen Availability Zone in the region that is specified by the endpoint.</p> <p>Example: <code>us-east-2d</code> </p> <p>Constraint: The specified Availability Zone must be in the same region as the current endpoint.</p>
  ##   Encrypted: bool
  ##            : <p>If <code>true</code>, the data in the cluster is encrypted at rest. </p> <p>Default: false</p>
  ##   HsmConfigurationIdentifier: string
  ##                             : Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
  ##   Action: string (required)
  ##   HsmClientCertificateIdentifier: string
  ##                                 : Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
  ##   PubliclyAccessible: bool
  ##                     : If <code>true</code>, the cluster can be accessed from a public network. 
  ##   ClusterIdentifier: string (required)
  ##                    : <p>A unique identifier for the cluster. You use this identifier to refer to the cluster for any subsequent cluster operations such as deleting or modifying. The identifier also appears in the Amazon Redshift console.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>Alphabetic characters must be lowercase.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Must be unique for all clusters within an AWS account.</p> </li> </ul> <p>Example: <code>myexamplecluster</code> </p>
  ##   MasterUsername: string (required)
  ##                 : <p>The user name associated with the master user account for the cluster that is being created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 - 128 alphanumeric characters. The user name can't be <code>PUBLIC</code>.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot be a reserved word. A list of reserved words can be found in <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html">Reserved Words</a> in the Amazon Redshift Database Developer Guide. </p> </li> </ul>
  ##   NumberOfNodes: int
  ##                : <p>The number of compute nodes in the cluster. This parameter is required when the <b>ClusterType</b> parameter is specified as <code>multi-node</code>. </p> <p>For information about determining how many nodes you need, go to <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#how-many-nodes"> Working with Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p> <p>If you don't specify this parameter, you get a single-node cluster. When requesting a multi-node cluster, you must specify the number of nodes that you want in the cluster.</p> <p>Default: <code>1</code> </p> <p>Constraints: Value must be at least 1 and no more than 100.</p>
  ##   IamRoles: JArray
  ##           : <p>A list of AWS Identity and Access Management (IAM) roles that can be used by the cluster to access other AWS services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. You can supply up to 10 IAM roles in a single request.</p> <p>A cluster can have up to 10 IAM roles associated with it at any time.</p>
  ##   ClusterParameterGroupName: string
  ##                            : <p>The name of the parameter group to be associated with this cluster.</p> <p>Default: The default Amazon Redshift cluster parameter group. For information about the default parameter group, go to <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Working with Amazon Redshift Parameter Groups</a> </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   SnapshotScheduleIdentifier: string
  ##                             : A unique identifier for the snapshot schedule.
  ##   KmsKeyId: string
  ##           : The AWS Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the cluster.
  ##   ManualSnapshotRetentionPeriod: int
  ##                                : <p>The default number of days to retain a manual snapshot. If the value is -1, the snapshot is retained indefinitely. This setting doesn't change the retention period of existing snapshots.</p> <p>The value must be either -1 or an integer between 1 and 3,653.</p>
  ##   ElasticIp: string
  ##            : <p>The Elastic IP (EIP) address for the cluster.</p> <p>Constraints: The cluster must be provisioned in EC2-VPC and publicly-accessible through an Internet gateway. For more information about provisioning clusters in EC2-VPC, go to <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#cluster-platforms">Supported Platforms to Launch Your Cluster</a> in the Amazon Redshift Cluster Management Guide.</p>
  ##   AllowVersionUpgrade: bool
  ##                      : <p>If <code>true</code>, major version upgrades can be applied during the maintenance window to the Amazon Redshift engine that is running on the cluster.</p> <p>When a new major version of the Amazon Redshift engine is released, you can request that the service automatically apply upgrades during the maintenance window to the Amazon Redshift engine that is running on your cluster.</p> <p>Default: <code>true</code> </p>
  ##   AutomatedSnapshotRetentionPeriod: int
  ##                                   : <p>The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with <a>CreateClusterSnapshot</a>. </p> <p>Default: <code>1</code> </p> <p>Constraints: Must be a value from 0 to 35.</p>
  ##   Version: string (required)
  ##   NodeType: string (required)
  ##           : <p>The node type to be provisioned for the cluster. For information about node types, go to <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#how-many-nodes"> Working with Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p> <p>Valid Values: <code>ds2.xlarge</code> | <code>ds2.8xlarge</code> | <code>dc1.large</code> | <code>dc1.8xlarge</code> | <code>dc2.large</code> | <code>dc2.8xlarge</code> | <code>ra3.16xlarge</code> </p>
  ##   MaintenanceTrackName: string
  ##                       : An optional parameter for the name of the maintenance track for the cluster. If you don't provide a maintenance track name, the cluster is assigned to the <code>current</code> track.
  ##   ClusterSubnetGroupName: string
  ##                         : <p>The name of a cluster subnet group to be associated with this cluster.</p> <p>If this parameter is not provided the resulting cluster will be deployed outside virtual private cloud (VPC).</p>
  var query_21626344 = newJObject()
  var formData_21626345 = newJObject()
  add(formData_21626345, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_21626345, "EnhancedVpcRouting", newJBool(EnhancedVpcRouting))
  add(formData_21626345, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    formData_21626345.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_21626345, "DBName", newJString(DBName))
  add(formData_21626345, "ClusterVersion", newJString(ClusterVersion))
  add(formData_21626345, "ClusterType", newJString(ClusterType))
  add(formData_21626345, "MasterUserPassword", newJString(MasterUserPassword))
  if Tags != nil:
    formData_21626345.add "Tags", Tags
  add(formData_21626345, "AdditionalInfo", newJString(AdditionalInfo))
  if ClusterSecurityGroups != nil:
    formData_21626345.add "ClusterSecurityGroups", ClusterSecurityGroups
  add(formData_21626345, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_21626345, "Encrypted", newJBool(Encrypted))
  add(formData_21626345, "HsmConfigurationIdentifier",
      newJString(HsmConfigurationIdentifier))
  add(query_21626344, "Action", newJString(Action))
  add(formData_21626345, "HsmClientCertificateIdentifier",
      newJString(HsmClientCertificateIdentifier))
  add(formData_21626345, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_21626345, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(formData_21626345, "MasterUsername", newJString(MasterUsername))
  add(formData_21626345, "NumberOfNodes", newJInt(NumberOfNodes))
  if IamRoles != nil:
    formData_21626345.add "IamRoles", IamRoles
  add(formData_21626345, "ClusterParameterGroupName",
      newJString(ClusterParameterGroupName))
  add(formData_21626345, "SnapshotScheduleIdentifier",
      newJString(SnapshotScheduleIdentifier))
  add(formData_21626345, "KmsKeyId", newJString(KmsKeyId))
  add(formData_21626345, "ManualSnapshotRetentionPeriod",
      newJInt(ManualSnapshotRetentionPeriod))
  add(formData_21626345, "ElasticIp", newJString(ElasticIp))
  add(formData_21626345, "AllowVersionUpgrade", newJBool(AllowVersionUpgrade))
  add(formData_21626345, "AutomatedSnapshotRetentionPeriod",
      newJInt(AutomatedSnapshotRetentionPeriod))
  add(query_21626344, "Version", newJString(Version))
  add(formData_21626345, "NodeType", newJString(NodeType))
  add(formData_21626345, "MaintenanceTrackName", newJString(MaintenanceTrackName))
  add(formData_21626345, "ClusterSubnetGroupName",
      newJString(ClusterSubnetGroupName))
  result = call_21626343.call(nil, query_21626344, nil, formData_21626345, nil)

var postCreateCluster* = Call_PostCreateCluster_21626300(name: "postCreateCluster",
    meth: HttpMethod.HttpPost, host: "redshift.amazonaws.com",
    route: "/#Action=CreateCluster", validator: validate_PostCreateCluster_21626301,
    base: "/", makeUrl: url_PostCreateCluster_21626302,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCluster_21626255 = ref object of OpenApiRestCall_21625418
proc url_GetCreateCluster_21626257(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateCluster_21626256(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a new cluster with the specified parameters.</p> <p>To create a cluster in Virtual Private Cloud (VPC), you must provide a cluster subnet group name. The cluster subnet group identifies the subnets of your VPC that Amazon Redshift uses when creating the cluster. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ClusterSecurityGroups: JArray
  ##                        : <p>A list of security groups to be associated with this cluster.</p> <p>Default: The default cluster security group for Amazon Redshift.</p>
  ##   MasterUsername: JString (required)
  ##                 : <p>The user name associated with the master user account for the cluster that is being created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 - 128 alphanumeric characters. The user name can't be <code>PUBLIC</code>.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot be a reserved word. A list of reserved words can be found in <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html">Reserved Words</a> in the Amazon Redshift Database Developer Guide. </p> </li> </ul>
  ##   ClusterSubnetGroupName: JString
  ##                         : <p>The name of a cluster subnet group to be associated with this cluster.</p> <p>If this parameter is not provided the resulting cluster will be deployed outside virtual private cloud (VPC).</p>
  ##   HsmClientCertificateIdentifier: JString
  ##                                 : Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range (in UTC) during which automated cluster maintenance can occur.</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p> Default: A 30-minute window selected at random from an 8-hour block of time per region, occurring on a random day of the week. For more information about the time blocks for each region, see <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#rs-maintenance-windows">Maintenance Windows</a> in Amazon Redshift Cluster Management Guide.</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   Encrypted: JBool
  ##            : <p>If <code>true</code>, the data in the cluster is encrypted at rest. </p> <p>Default: false</p>
  ##   MaintenanceTrackName: JString
  ##                       : An optional parameter for the name of the maintenance track for the cluster. If you don't provide a maintenance track name, the cluster is assigned to the <code>current</code> track.
  ##   IamRoles: JArray
  ##           : <p>A list of AWS Identity and Access Management (IAM) roles that can be used by the cluster to access other AWS services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. You can supply up to 10 IAM roles in a single request.</p> <p>A cluster can have up to 10 IAM roles associated with it at any time.</p>
  ##   AvailabilityZone: JString
  ##                   : <p>The EC2 Availability Zone (AZ) in which you want Amazon Redshift to provision the cluster. For example, if you have several EC2 instances running in a specific Availability Zone, then you might want the cluster to be provisioned in the same zone in order to decrease network latency.</p> <p>Default: A random, system-chosen Availability Zone in the region that is specified by the endpoint.</p> <p>Example: <code>us-east-2d</code> </p> <p>Constraint: The specified Availability Zone must be in the same region as the current endpoint.</p>
  ##   MasterUserPassword: JString (required)
  ##                     : <p>The password associated with the master user account for the cluster that is being created.</p> <p>Constraints:</p> <ul> <li> <p>Must be between 8 and 64 characters in length.</p> </li> <li> <p>Must contain at least one uppercase letter.</p> </li> <li> <p>Must contain at least one lowercase letter.</p> </li> <li> <p>Must contain one number.</p> </li> <li> <p>Can be any printable ASCII character (ASCII code 33 to 126) except ' (single quote), " (double quote), \, /, @, or space.</p> </li> </ul>
  ##   AllowVersionUpgrade: JBool
  ##                      : <p>If <code>true</code>, major version upgrades can be applied during the maintenance window to the Amazon Redshift engine that is running on the cluster.</p> <p>When a new major version of the Amazon Redshift engine is released, you can request that the service automatically apply upgrades during the maintenance window to the Amazon Redshift engine that is running on your cluster.</p> <p>Default: <code>true</code> </p>
  ##   EnhancedVpcRouting: JBool
  ##                     : <p>An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html">Enhanced VPC Routing</a> in the Amazon Redshift Cluster Management Guide.</p> <p>If this option is <code>true</code>, enhanced VPC routing is enabled. </p> <p>Default: false</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Virtual Private Cloud (VPC) security groups to be associated with the cluster.</p> <p>Default: The default VPC security group is associated with the cluster.</p>
  ##   ClusterParameterGroupName: JString
  ##                            : <p>The name of the parameter group to be associated with this cluster.</p> <p>Default: The default Amazon Redshift cluster parameter group. For information about the default parameter group, go to <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Working with Amazon Redshift Parameter Groups</a> </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   HsmConfigurationIdentifier: JString
  ##                             : Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
  ##   Tags: JArray
  ##       : A list of tag instances.
  ##   DBName: JString
  ##         : <p>The name of the first database to be created when the cluster is created.</p> <p>To create additional databases after the cluster is created, connect to the cluster with a SQL client and use SQL commands to create a database. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/dg/t_creating_database.html">Create a Database</a> in the Amazon Redshift Database Developer Guide. </p> <p>Default: <code>dev</code> </p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 alphanumeric characters.</p> </li> <li> <p>Must contain only lowercase letters.</p> </li> <li> <p>Cannot be a word that is reserved by the service. A list of reserved words can be found in <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html">Reserved Words</a> in the Amazon Redshift Database Developer Guide. </p> </li> </ul>
  ##   SnapshotScheduleIdentifier: JString
  ##                             : A unique identifier for the snapshot schedule.
  ##   AdditionalInfo: JString
  ##                 : Reserved.
  ##   ElasticIp: JString
  ##            : <p>The Elastic IP (EIP) address for the cluster.</p> <p>Constraints: The cluster must be provisioned in EC2-VPC and publicly-accessible through an Internet gateway. For more information about provisioning clusters in EC2-VPC, go to <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#cluster-platforms">Supported Platforms to Launch Your Cluster</a> in the Amazon Redshift Cluster Management Guide.</p>
  ##   ClusterIdentifier: JString (required)
  ##                    : <p>A unique identifier for the cluster. You use this identifier to refer to the cluster for any subsequent cluster operations such as deleting or modifying. The identifier also appears in the Amazon Redshift console.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>Alphabetic characters must be lowercase.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Must be unique for all clusters within an AWS account.</p> </li> </ul> <p>Example: <code>myexamplecluster</code> </p>
  ##   Action: JString (required)
  ##   KmsKeyId: JString
  ##           : The AWS Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the cluster.
  ##   PubliclyAccessible: JBool
  ##                     : If <code>true</code>, the cluster can be accessed from a public network. 
  ##   Port: JInt
  ##       : <p>The port number on which the cluster accepts incoming connections.</p> <p>The cluster is accessible only via the JDBC and ODBC connection strings. Part of the connection string requires the port on which the cluster will listen for incoming connections.</p> <p>Default: <code>5439</code> </p> <p>Valid Values: <code>1150-65535</code> </p>
  ##   NumberOfNodes: JInt
  ##                : <p>The number of compute nodes in the cluster. This parameter is required when the <b>ClusterType</b> parameter is specified as <code>multi-node</code>. </p> <p>For information about determining how many nodes you need, go to <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#how-many-nodes"> Working with Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p> <p>If you don't specify this parameter, you get a single-node cluster. When requesting a multi-node cluster, you must specify the number of nodes that you want in the cluster.</p> <p>Default: <code>1</code> </p> <p>Constraints: Value must be at least 1 and no more than 100.</p>
  ##   AutomatedSnapshotRetentionPeriod: JInt
  ##                                   : <p>The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with <a>CreateClusterSnapshot</a>. </p> <p>Default: <code>1</code> </p> <p>Constraints: Must be a value from 0 to 35.</p>
  ##   NodeType: JString (required)
  ##           : <p>The node type to be provisioned for the cluster. For information about node types, go to <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#how-many-nodes"> Working with Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p> <p>Valid Values: <code>ds2.xlarge</code> | <code>ds2.8xlarge</code> | <code>dc1.large</code> | <code>dc1.8xlarge</code> | <code>dc2.large</code> | <code>dc2.8xlarge</code> | <code>ra3.16xlarge</code> </p>
  ##   ClusterVersion: JString
  ##                 : <p>The version of the Amazon Redshift engine software that you want to deploy on the cluster.</p> <p>The version selected runs on all the nodes in the cluster.</p> <p>Constraints: Only version 1.0 is currently available.</p> <p>Example: <code>1.0</code> </p>
  ##   Version: JString (required)
  ##   ClusterType: JString
  ##              : <p>The type of the cluster. When cluster type is specified as</p> <ul> <li> <p> <code>single-node</code>, the <b>NumberOfNodes</b> parameter is not required.</p> </li> <li> <p> <code>multi-node</code>, the <b>NumberOfNodes</b> parameter is required.</p> </li> </ul> <p>Valid Values: <code>multi-node</code> | <code>single-node</code> </p> <p>Default: <code>multi-node</code> </p>
  ##   ManualSnapshotRetentionPeriod: JInt
  ##                                : <p>The default number of days to retain a manual snapshot. If the value is -1, the snapshot is retained indefinitely. This setting doesn't change the retention period of existing snapshots.</p> <p>The value must be either -1 or an integer between 1 and 3,653.</p>
  section = newJObject()
  var valid_21626258 = query.getOrDefault("ClusterSecurityGroups")
  valid_21626258 = validateParameter(valid_21626258, JArray, required = false,
                                   default = nil)
  if valid_21626258 != nil:
    section.add "ClusterSecurityGroups", valid_21626258
  assert query != nil,
        "query argument is necessary due to required `MasterUsername` field"
  var valid_21626259 = query.getOrDefault("MasterUsername")
  valid_21626259 = validateParameter(valid_21626259, JString, required = true,
                                   default = nil)
  if valid_21626259 != nil:
    section.add "MasterUsername", valid_21626259
  var valid_21626260 = query.getOrDefault("ClusterSubnetGroupName")
  valid_21626260 = validateParameter(valid_21626260, JString, required = false,
                                   default = nil)
  if valid_21626260 != nil:
    section.add "ClusterSubnetGroupName", valid_21626260
  var valid_21626261 = query.getOrDefault("HsmClientCertificateIdentifier")
  valid_21626261 = validateParameter(valid_21626261, JString, required = false,
                                   default = nil)
  if valid_21626261 != nil:
    section.add "HsmClientCertificateIdentifier", valid_21626261
  var valid_21626262 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_21626262 = validateParameter(valid_21626262, JString, required = false,
                                   default = nil)
  if valid_21626262 != nil:
    section.add "PreferredMaintenanceWindow", valid_21626262
  var valid_21626263 = query.getOrDefault("Encrypted")
  valid_21626263 = validateParameter(valid_21626263, JBool, required = false,
                                   default = nil)
  if valid_21626263 != nil:
    section.add "Encrypted", valid_21626263
  var valid_21626264 = query.getOrDefault("MaintenanceTrackName")
  valid_21626264 = validateParameter(valid_21626264, JString, required = false,
                                   default = nil)
  if valid_21626264 != nil:
    section.add "MaintenanceTrackName", valid_21626264
  var valid_21626265 = query.getOrDefault("IamRoles")
  valid_21626265 = validateParameter(valid_21626265, JArray, required = false,
                                   default = nil)
  if valid_21626265 != nil:
    section.add "IamRoles", valid_21626265
  var valid_21626266 = query.getOrDefault("AvailabilityZone")
  valid_21626266 = validateParameter(valid_21626266, JString, required = false,
                                   default = nil)
  if valid_21626266 != nil:
    section.add "AvailabilityZone", valid_21626266
  var valid_21626267 = query.getOrDefault("MasterUserPassword")
  valid_21626267 = validateParameter(valid_21626267, JString, required = true,
                                   default = nil)
  if valid_21626267 != nil:
    section.add "MasterUserPassword", valid_21626267
  var valid_21626268 = query.getOrDefault("AllowVersionUpgrade")
  valid_21626268 = validateParameter(valid_21626268, JBool, required = false,
                                   default = nil)
  if valid_21626268 != nil:
    section.add "AllowVersionUpgrade", valid_21626268
  var valid_21626269 = query.getOrDefault("EnhancedVpcRouting")
  valid_21626269 = validateParameter(valid_21626269, JBool, required = false,
                                   default = nil)
  if valid_21626269 != nil:
    section.add "EnhancedVpcRouting", valid_21626269
  var valid_21626270 = query.getOrDefault("VpcSecurityGroupIds")
  valid_21626270 = validateParameter(valid_21626270, JArray, required = false,
                                   default = nil)
  if valid_21626270 != nil:
    section.add "VpcSecurityGroupIds", valid_21626270
  var valid_21626271 = query.getOrDefault("ClusterParameterGroupName")
  valid_21626271 = validateParameter(valid_21626271, JString, required = false,
                                   default = nil)
  if valid_21626271 != nil:
    section.add "ClusterParameterGroupName", valid_21626271
  var valid_21626272 = query.getOrDefault("HsmConfigurationIdentifier")
  valid_21626272 = validateParameter(valid_21626272, JString, required = false,
                                   default = nil)
  if valid_21626272 != nil:
    section.add "HsmConfigurationIdentifier", valid_21626272
  var valid_21626273 = query.getOrDefault("Tags")
  valid_21626273 = validateParameter(valid_21626273, JArray, required = false,
                                   default = nil)
  if valid_21626273 != nil:
    section.add "Tags", valid_21626273
  var valid_21626274 = query.getOrDefault("DBName")
  valid_21626274 = validateParameter(valid_21626274, JString, required = false,
                                   default = nil)
  if valid_21626274 != nil:
    section.add "DBName", valid_21626274
  var valid_21626275 = query.getOrDefault("SnapshotScheduleIdentifier")
  valid_21626275 = validateParameter(valid_21626275, JString, required = false,
                                   default = nil)
  if valid_21626275 != nil:
    section.add "SnapshotScheduleIdentifier", valid_21626275
  var valid_21626276 = query.getOrDefault("AdditionalInfo")
  valid_21626276 = validateParameter(valid_21626276, JString, required = false,
                                   default = nil)
  if valid_21626276 != nil:
    section.add "AdditionalInfo", valid_21626276
  var valid_21626277 = query.getOrDefault("ElasticIp")
  valid_21626277 = validateParameter(valid_21626277, JString, required = false,
                                   default = nil)
  if valid_21626277 != nil:
    section.add "ElasticIp", valid_21626277
  var valid_21626278 = query.getOrDefault("ClusterIdentifier")
  valid_21626278 = validateParameter(valid_21626278, JString, required = true,
                                   default = nil)
  if valid_21626278 != nil:
    section.add "ClusterIdentifier", valid_21626278
  var valid_21626279 = query.getOrDefault("Action")
  valid_21626279 = validateParameter(valid_21626279, JString, required = true,
                                   default = newJString("CreateCluster"))
  if valid_21626279 != nil:
    section.add "Action", valid_21626279
  var valid_21626280 = query.getOrDefault("KmsKeyId")
  valid_21626280 = validateParameter(valid_21626280, JString, required = false,
                                   default = nil)
  if valid_21626280 != nil:
    section.add "KmsKeyId", valid_21626280
  var valid_21626281 = query.getOrDefault("PubliclyAccessible")
  valid_21626281 = validateParameter(valid_21626281, JBool, required = false,
                                   default = nil)
  if valid_21626281 != nil:
    section.add "PubliclyAccessible", valid_21626281
  var valid_21626282 = query.getOrDefault("Port")
  valid_21626282 = validateParameter(valid_21626282, JInt, required = false,
                                   default = nil)
  if valid_21626282 != nil:
    section.add "Port", valid_21626282
  var valid_21626283 = query.getOrDefault("NumberOfNodes")
  valid_21626283 = validateParameter(valid_21626283, JInt, required = false,
                                   default = nil)
  if valid_21626283 != nil:
    section.add "NumberOfNodes", valid_21626283
  var valid_21626284 = query.getOrDefault("AutomatedSnapshotRetentionPeriod")
  valid_21626284 = validateParameter(valid_21626284, JInt, required = false,
                                   default = nil)
  if valid_21626284 != nil:
    section.add "AutomatedSnapshotRetentionPeriod", valid_21626284
  var valid_21626285 = query.getOrDefault("NodeType")
  valid_21626285 = validateParameter(valid_21626285, JString, required = true,
                                   default = nil)
  if valid_21626285 != nil:
    section.add "NodeType", valid_21626285
  var valid_21626286 = query.getOrDefault("ClusterVersion")
  valid_21626286 = validateParameter(valid_21626286, JString, required = false,
                                   default = nil)
  if valid_21626286 != nil:
    section.add "ClusterVersion", valid_21626286
  var valid_21626287 = query.getOrDefault("Version")
  valid_21626287 = validateParameter(valid_21626287, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626287 != nil:
    section.add "Version", valid_21626287
  var valid_21626288 = query.getOrDefault("ClusterType")
  valid_21626288 = validateParameter(valid_21626288, JString, required = false,
                                   default = nil)
  if valid_21626288 != nil:
    section.add "ClusterType", valid_21626288
  var valid_21626289 = query.getOrDefault("ManualSnapshotRetentionPeriod")
  valid_21626289 = validateParameter(valid_21626289, JInt, required = false,
                                   default = nil)
  if valid_21626289 != nil:
    section.add "ManualSnapshotRetentionPeriod", valid_21626289
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626290 = header.getOrDefault("X-Amz-Date")
  valid_21626290 = validateParameter(valid_21626290, JString, required = false,
                                   default = nil)
  if valid_21626290 != nil:
    section.add "X-Amz-Date", valid_21626290
  var valid_21626291 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626291 = validateParameter(valid_21626291, JString, required = false,
                                   default = nil)
  if valid_21626291 != nil:
    section.add "X-Amz-Security-Token", valid_21626291
  var valid_21626292 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626292 = validateParameter(valid_21626292, JString, required = false,
                                   default = nil)
  if valid_21626292 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626292
  var valid_21626293 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626293 = validateParameter(valid_21626293, JString, required = false,
                                   default = nil)
  if valid_21626293 != nil:
    section.add "X-Amz-Algorithm", valid_21626293
  var valid_21626294 = header.getOrDefault("X-Amz-Signature")
  valid_21626294 = validateParameter(valid_21626294, JString, required = false,
                                   default = nil)
  if valid_21626294 != nil:
    section.add "X-Amz-Signature", valid_21626294
  var valid_21626295 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626295 = validateParameter(valid_21626295, JString, required = false,
                                   default = nil)
  if valid_21626295 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626295
  var valid_21626296 = header.getOrDefault("X-Amz-Credential")
  valid_21626296 = validateParameter(valid_21626296, JString, required = false,
                                   default = nil)
  if valid_21626296 != nil:
    section.add "X-Amz-Credential", valid_21626296
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626297: Call_GetCreateCluster_21626255; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new cluster with the specified parameters.</p> <p>To create a cluster in Virtual Private Cloud (VPC), you must provide a cluster subnet group name. The cluster subnet group identifies the subnets of your VPC that Amazon Redshift uses when creating the cluster. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  let valid = call_21626297.validator(path, query, header, formData, body, _)
  let scheme = call_21626297.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626297.makeUrl(scheme.get, call_21626297.host, call_21626297.base,
                               call_21626297.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626297, uri, valid, _)

proc call*(call_21626298: Call_GetCreateCluster_21626255; MasterUsername: string;
          MasterUserPassword: string; ClusterIdentifier: string; NodeType: string;
          ClusterSecurityGroups: JsonNode = nil;
          ClusterSubnetGroupName: string = "";
          HsmClientCertificateIdentifier: string = "";
          PreferredMaintenanceWindow: string = ""; Encrypted: bool = false;
          MaintenanceTrackName: string = ""; IamRoles: JsonNode = nil;
          AvailabilityZone: string = ""; AllowVersionUpgrade: bool = false;
          EnhancedVpcRouting: bool = false; VpcSecurityGroupIds: JsonNode = nil;
          ClusterParameterGroupName: string = "";
          HsmConfigurationIdentifier: string = ""; Tags: JsonNode = nil;
          DBName: string = ""; SnapshotScheduleIdentifier: string = "";
          AdditionalInfo: string = ""; ElasticIp: string = "";
          Action: string = "CreateCluster"; KmsKeyId: string = "";
          PubliclyAccessible: bool = false; Port: int = 0; NumberOfNodes: int = 0;
          AutomatedSnapshotRetentionPeriod: int = 0; ClusterVersion: string = "";
          Version: string = "2012-12-01"; ClusterType: string = "";
          ManualSnapshotRetentionPeriod: int = 0): Recallable =
  ## getCreateCluster
  ## <p>Creates a new cluster with the specified parameters.</p> <p>To create a cluster in Virtual Private Cloud (VPC), you must provide a cluster subnet group name. The cluster subnet group identifies the subnets of your VPC that Amazon Redshift uses when creating the cluster. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ##   ClusterSecurityGroups: JArray
  ##                        : <p>A list of security groups to be associated with this cluster.</p> <p>Default: The default cluster security group for Amazon Redshift.</p>
  ##   MasterUsername: string (required)
  ##                 : <p>The user name associated with the master user account for the cluster that is being created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 - 128 alphanumeric characters. The user name can't be <code>PUBLIC</code>.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot be a reserved word. A list of reserved words can be found in <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html">Reserved Words</a> in the Amazon Redshift Database Developer Guide. </p> </li> </ul>
  ##   ClusterSubnetGroupName: string
  ##                         : <p>The name of a cluster subnet group to be associated with this cluster.</p> <p>If this parameter is not provided the resulting cluster will be deployed outside virtual private cloud (VPC).</p>
  ##   HsmClientCertificateIdentifier: string
  ##                                 : Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range (in UTC) during which automated cluster maintenance can occur.</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p> Default: A 30-minute window selected at random from an 8-hour block of time per region, occurring on a random day of the week. For more information about the time blocks for each region, see <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#rs-maintenance-windows">Maintenance Windows</a> in Amazon Redshift Cluster Management Guide.</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   Encrypted: bool
  ##            : <p>If <code>true</code>, the data in the cluster is encrypted at rest. </p> <p>Default: false</p>
  ##   MaintenanceTrackName: string
  ##                       : An optional parameter for the name of the maintenance track for the cluster. If you don't provide a maintenance track name, the cluster is assigned to the <code>current</code> track.
  ##   IamRoles: JArray
  ##           : <p>A list of AWS Identity and Access Management (IAM) roles that can be used by the cluster to access other AWS services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. You can supply up to 10 IAM roles in a single request.</p> <p>A cluster can have up to 10 IAM roles associated with it at any time.</p>
  ##   AvailabilityZone: string
  ##                   : <p>The EC2 Availability Zone (AZ) in which you want Amazon Redshift to provision the cluster. For example, if you have several EC2 instances running in a specific Availability Zone, then you might want the cluster to be provisioned in the same zone in order to decrease network latency.</p> <p>Default: A random, system-chosen Availability Zone in the region that is specified by the endpoint.</p> <p>Example: <code>us-east-2d</code> </p> <p>Constraint: The specified Availability Zone must be in the same region as the current endpoint.</p>
  ##   MasterUserPassword: string (required)
  ##                     : <p>The password associated with the master user account for the cluster that is being created.</p> <p>Constraints:</p> <ul> <li> <p>Must be between 8 and 64 characters in length.</p> </li> <li> <p>Must contain at least one uppercase letter.</p> </li> <li> <p>Must contain at least one lowercase letter.</p> </li> <li> <p>Must contain one number.</p> </li> <li> <p>Can be any printable ASCII character (ASCII code 33 to 126) except ' (single quote), " (double quote), \, /, @, or space.</p> </li> </ul>
  ##   AllowVersionUpgrade: bool
  ##                      : <p>If <code>true</code>, major version upgrades can be applied during the maintenance window to the Amazon Redshift engine that is running on the cluster.</p> <p>When a new major version of the Amazon Redshift engine is released, you can request that the service automatically apply upgrades during the maintenance window to the Amazon Redshift engine that is running on your cluster.</p> <p>Default: <code>true</code> </p>
  ##   EnhancedVpcRouting: bool
  ##                     : <p>An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html">Enhanced VPC Routing</a> in the Amazon Redshift Cluster Management Guide.</p> <p>If this option is <code>true</code>, enhanced VPC routing is enabled. </p> <p>Default: false</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Virtual Private Cloud (VPC) security groups to be associated with the cluster.</p> <p>Default: The default VPC security group is associated with the cluster.</p>
  ##   ClusterParameterGroupName: string
  ##                            : <p>The name of the parameter group to be associated with this cluster.</p> <p>Default: The default Amazon Redshift cluster parameter group. For information about the default parameter group, go to <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Working with Amazon Redshift Parameter Groups</a> </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   HsmConfigurationIdentifier: string
  ##                             : Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
  ##   Tags: JArray
  ##       : A list of tag instances.
  ##   DBName: string
  ##         : <p>The name of the first database to be created when the cluster is created.</p> <p>To create additional databases after the cluster is created, connect to the cluster with a SQL client and use SQL commands to create a database. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/dg/t_creating_database.html">Create a Database</a> in the Amazon Redshift Database Developer Guide. </p> <p>Default: <code>dev</code> </p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 alphanumeric characters.</p> </li> <li> <p>Must contain only lowercase letters.</p> </li> <li> <p>Cannot be a word that is reserved by the service. A list of reserved words can be found in <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html">Reserved Words</a> in the Amazon Redshift Database Developer Guide. </p> </li> </ul>
  ##   SnapshotScheduleIdentifier: string
  ##                             : A unique identifier for the snapshot schedule.
  ##   AdditionalInfo: string
  ##                 : Reserved.
  ##   ElasticIp: string
  ##            : <p>The Elastic IP (EIP) address for the cluster.</p> <p>Constraints: The cluster must be provisioned in EC2-VPC and publicly-accessible through an Internet gateway. For more information about provisioning clusters in EC2-VPC, go to <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#cluster-platforms">Supported Platforms to Launch Your Cluster</a> in the Amazon Redshift Cluster Management Guide.</p>
  ##   ClusterIdentifier: string (required)
  ##                    : <p>A unique identifier for the cluster. You use this identifier to refer to the cluster for any subsequent cluster operations such as deleting or modifying. The identifier also appears in the Amazon Redshift console.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>Alphabetic characters must be lowercase.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Must be unique for all clusters within an AWS account.</p> </li> </ul> <p>Example: <code>myexamplecluster</code> </p>
  ##   Action: string (required)
  ##   KmsKeyId: string
  ##           : The AWS Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the cluster.
  ##   PubliclyAccessible: bool
  ##                     : If <code>true</code>, the cluster can be accessed from a public network. 
  ##   Port: int
  ##       : <p>The port number on which the cluster accepts incoming connections.</p> <p>The cluster is accessible only via the JDBC and ODBC connection strings. Part of the connection string requires the port on which the cluster will listen for incoming connections.</p> <p>Default: <code>5439</code> </p> <p>Valid Values: <code>1150-65535</code> </p>
  ##   NumberOfNodes: int
  ##                : <p>The number of compute nodes in the cluster. This parameter is required when the <b>ClusterType</b> parameter is specified as <code>multi-node</code>. </p> <p>For information about determining how many nodes you need, go to <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#how-many-nodes"> Working with Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p> <p>If you don't specify this parameter, you get a single-node cluster. When requesting a multi-node cluster, you must specify the number of nodes that you want in the cluster.</p> <p>Default: <code>1</code> </p> <p>Constraints: Value must be at least 1 and no more than 100.</p>
  ##   AutomatedSnapshotRetentionPeriod: int
  ##                                   : <p>The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with <a>CreateClusterSnapshot</a>. </p> <p>Default: <code>1</code> </p> <p>Constraints: Must be a value from 0 to 35.</p>
  ##   NodeType: string (required)
  ##           : <p>The node type to be provisioned for the cluster. For information about node types, go to <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#how-many-nodes"> Working with Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p> <p>Valid Values: <code>ds2.xlarge</code> | <code>ds2.8xlarge</code> | <code>dc1.large</code> | <code>dc1.8xlarge</code> | <code>dc2.large</code> | <code>dc2.8xlarge</code> | <code>ra3.16xlarge</code> </p>
  ##   ClusterVersion: string
  ##                 : <p>The version of the Amazon Redshift engine software that you want to deploy on the cluster.</p> <p>The version selected runs on all the nodes in the cluster.</p> <p>Constraints: Only version 1.0 is currently available.</p> <p>Example: <code>1.0</code> </p>
  ##   Version: string (required)
  ##   ClusterType: string
  ##              : <p>The type of the cluster. When cluster type is specified as</p> <ul> <li> <p> <code>single-node</code>, the <b>NumberOfNodes</b> parameter is not required.</p> </li> <li> <p> <code>multi-node</code>, the <b>NumberOfNodes</b> parameter is required.</p> </li> </ul> <p>Valid Values: <code>multi-node</code> | <code>single-node</code> </p> <p>Default: <code>multi-node</code> </p>
  ##   ManualSnapshotRetentionPeriod: int
  ##                                : <p>The default number of days to retain a manual snapshot. If the value is -1, the snapshot is retained indefinitely. This setting doesn't change the retention period of existing snapshots.</p> <p>The value must be either -1 or an integer between 1 and 3,653.</p>
  var query_21626299 = newJObject()
  if ClusterSecurityGroups != nil:
    query_21626299.add "ClusterSecurityGroups", ClusterSecurityGroups
  add(query_21626299, "MasterUsername", newJString(MasterUsername))
  add(query_21626299, "ClusterSubnetGroupName", newJString(ClusterSubnetGroupName))
  add(query_21626299, "HsmClientCertificateIdentifier",
      newJString(HsmClientCertificateIdentifier))
  add(query_21626299, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_21626299, "Encrypted", newJBool(Encrypted))
  add(query_21626299, "MaintenanceTrackName", newJString(MaintenanceTrackName))
  if IamRoles != nil:
    query_21626299.add "IamRoles", IamRoles
  add(query_21626299, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_21626299, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_21626299, "AllowVersionUpgrade", newJBool(AllowVersionUpgrade))
  add(query_21626299, "EnhancedVpcRouting", newJBool(EnhancedVpcRouting))
  if VpcSecurityGroupIds != nil:
    query_21626299.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_21626299, "ClusterParameterGroupName",
      newJString(ClusterParameterGroupName))
  add(query_21626299, "HsmConfigurationIdentifier",
      newJString(HsmConfigurationIdentifier))
  if Tags != nil:
    query_21626299.add "Tags", Tags
  add(query_21626299, "DBName", newJString(DBName))
  add(query_21626299, "SnapshotScheduleIdentifier",
      newJString(SnapshotScheduleIdentifier))
  add(query_21626299, "AdditionalInfo", newJString(AdditionalInfo))
  add(query_21626299, "ElasticIp", newJString(ElasticIp))
  add(query_21626299, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(query_21626299, "Action", newJString(Action))
  add(query_21626299, "KmsKeyId", newJString(KmsKeyId))
  add(query_21626299, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_21626299, "Port", newJInt(Port))
  add(query_21626299, "NumberOfNodes", newJInt(NumberOfNodes))
  add(query_21626299, "AutomatedSnapshotRetentionPeriod",
      newJInt(AutomatedSnapshotRetentionPeriod))
  add(query_21626299, "NodeType", newJString(NodeType))
  add(query_21626299, "ClusterVersion", newJString(ClusterVersion))
  add(query_21626299, "Version", newJString(Version))
  add(query_21626299, "ClusterType", newJString(ClusterType))
  add(query_21626299, "ManualSnapshotRetentionPeriod",
      newJInt(ManualSnapshotRetentionPeriod))
  result = call_21626298.call(nil, query_21626299, nil, nil, nil)

var getCreateCluster* = Call_GetCreateCluster_21626255(name: "getCreateCluster",
    meth: HttpMethod.HttpGet, host: "redshift.amazonaws.com",
    route: "/#Action=CreateCluster", validator: validate_GetCreateCluster_21626256,
    base: "/", makeUrl: url_GetCreateCluster_21626257,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateClusterParameterGroup_21626365 = ref object of OpenApiRestCall_21625418
proc url_PostCreateClusterParameterGroup_21626367(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateClusterParameterGroup_21626366(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Creates an Amazon Redshift parameter group.</p> <p>Creating parameter groups is independent of creating clusters. You can associate a cluster with a parameter group when you create the cluster. You can also associate an existing cluster with a parameter group after the cluster is created by using <a>ModifyCluster</a>. </p> <p>Parameters in the parameter group define specific behavior that applies to the databases you create on the cluster. For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626368 = query.getOrDefault("Action")
  valid_21626368 = validateParameter(valid_21626368, JString, required = true, default = newJString(
      "CreateClusterParameterGroup"))
  if valid_21626368 != nil:
    section.add "Action", valid_21626368
  var valid_21626369 = query.getOrDefault("Version")
  valid_21626369 = validateParameter(valid_21626369, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626369 != nil:
    section.add "Version", valid_21626369
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626370 = header.getOrDefault("X-Amz-Date")
  valid_21626370 = validateParameter(valid_21626370, JString, required = false,
                                   default = nil)
  if valid_21626370 != nil:
    section.add "X-Amz-Date", valid_21626370
  var valid_21626371 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626371 = validateParameter(valid_21626371, JString, required = false,
                                   default = nil)
  if valid_21626371 != nil:
    section.add "X-Amz-Security-Token", valid_21626371
  var valid_21626372 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626372 = validateParameter(valid_21626372, JString, required = false,
                                   default = nil)
  if valid_21626372 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626372
  var valid_21626373 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626373 = validateParameter(valid_21626373, JString, required = false,
                                   default = nil)
  if valid_21626373 != nil:
    section.add "X-Amz-Algorithm", valid_21626373
  var valid_21626374 = header.getOrDefault("X-Amz-Signature")
  valid_21626374 = validateParameter(valid_21626374, JString, required = false,
                                   default = nil)
  if valid_21626374 != nil:
    section.add "X-Amz-Signature", valid_21626374
  var valid_21626375 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626375 = validateParameter(valid_21626375, JString, required = false,
                                   default = nil)
  if valid_21626375 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626375
  var valid_21626376 = header.getOrDefault("X-Amz-Credential")
  valid_21626376 = validateParameter(valid_21626376, JString, required = false,
                                   default = nil)
  if valid_21626376 != nil:
    section.add "X-Amz-Credential", valid_21626376
  result.add "header", section
  ## parameters in `formData` object:
  ##   ParameterGroupName: JString (required)
  ##                     : <p>The name of the cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Must be unique withing your AWS account.</p> </li> </ul> <note> <p>This value is stored as a lower-case string.</p> </note>
  ##   Tags: JArray
  ##       : A list of tag instances.
  ##   ParameterGroupFamily: JString (required)
  ##                       : <p>The Amazon Redshift engine version to which the cluster parameter group applies. The cluster engine version determines the set of parameters.</p> <p>To get a list of valid parameter group family names, you can call <a>DescribeClusterParameterGroups</a>. By default, Amazon Redshift returns a list of all the parameter groups that are owned by your AWS account, including the default parameter groups for each Amazon Redshift engine version. The parameter group family names associated with the default parameter groups provide you the valid values. For example, a valid family name is "redshift-1.0". </p>
  ##   Description: JString (required)
  ##              : A description of the parameter group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ParameterGroupName` field"
  var valid_21626377 = formData.getOrDefault("ParameterGroupName")
  valid_21626377 = validateParameter(valid_21626377, JString, required = true,
                                   default = nil)
  if valid_21626377 != nil:
    section.add "ParameterGroupName", valid_21626377
  var valid_21626378 = formData.getOrDefault("Tags")
  valid_21626378 = validateParameter(valid_21626378, JArray, required = false,
                                   default = nil)
  if valid_21626378 != nil:
    section.add "Tags", valid_21626378
  var valid_21626379 = formData.getOrDefault("ParameterGroupFamily")
  valid_21626379 = validateParameter(valid_21626379, JString, required = true,
                                   default = nil)
  if valid_21626379 != nil:
    section.add "ParameterGroupFamily", valid_21626379
  var valid_21626380 = formData.getOrDefault("Description")
  valid_21626380 = validateParameter(valid_21626380, JString, required = true,
                                   default = nil)
  if valid_21626380 != nil:
    section.add "Description", valid_21626380
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626381: Call_PostCreateClusterParameterGroup_21626365;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates an Amazon Redshift parameter group.</p> <p>Creating parameter groups is independent of creating clusters. You can associate a cluster with a parameter group when you create the cluster. You can also associate an existing cluster with a parameter group after the cluster is created by using <a>ModifyCluster</a>. </p> <p>Parameters in the parameter group define specific behavior that applies to the databases you create on the cluster. For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  let valid = call_21626381.validator(path, query, header, formData, body, _)
  let scheme = call_21626381.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626381.makeUrl(scheme.get, call_21626381.host, call_21626381.base,
                               call_21626381.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626381, uri, valid, _)

proc call*(call_21626382: Call_PostCreateClusterParameterGroup_21626365;
          ParameterGroupName: string; ParameterGroupFamily: string;
          Description: string; Tags: JsonNode = nil;
          Action: string = "CreateClusterParameterGroup";
          Version: string = "2012-12-01"): Recallable =
  ## postCreateClusterParameterGroup
  ## <p>Creates an Amazon Redshift parameter group.</p> <p>Creating parameter groups is independent of creating clusters. You can associate a cluster with a parameter group when you create the cluster. You can also associate an existing cluster with a parameter group after the cluster is created by using <a>ModifyCluster</a>. </p> <p>Parameters in the parameter group define specific behavior that applies to the databases you create on the cluster. For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ##   ParameterGroupName: string (required)
  ##                     : <p>The name of the cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Must be unique withing your AWS account.</p> </li> </ul> <note> <p>This value is stored as a lower-case string.</p> </note>
  ##   Tags: JArray
  ##       : A list of tag instances.
  ##   Action: string (required)
  ##   ParameterGroupFamily: string (required)
  ##                       : <p>The Amazon Redshift engine version to which the cluster parameter group applies. The cluster engine version determines the set of parameters.</p> <p>To get a list of valid parameter group family names, you can call <a>DescribeClusterParameterGroups</a>. By default, Amazon Redshift returns a list of all the parameter groups that are owned by your AWS account, including the default parameter groups for each Amazon Redshift engine version. The parameter group family names associated with the default parameter groups provide you the valid values. For example, a valid family name is "redshift-1.0". </p>
  ##   Version: string (required)
  ##   Description: string (required)
  ##              : A description of the parameter group.
  var query_21626383 = newJObject()
  var formData_21626384 = newJObject()
  add(formData_21626384, "ParameterGroupName", newJString(ParameterGroupName))
  if Tags != nil:
    formData_21626384.add "Tags", Tags
  add(query_21626383, "Action", newJString(Action))
  add(formData_21626384, "ParameterGroupFamily", newJString(ParameterGroupFamily))
  add(query_21626383, "Version", newJString(Version))
  add(formData_21626384, "Description", newJString(Description))
  result = call_21626382.call(nil, query_21626383, nil, formData_21626384, nil)

var postCreateClusterParameterGroup* = Call_PostCreateClusterParameterGroup_21626365(
    name: "postCreateClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=CreateClusterParameterGroup",
    validator: validate_PostCreateClusterParameterGroup_21626366, base: "/",
    makeUrl: url_PostCreateClusterParameterGroup_21626367,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateClusterParameterGroup_21626346 = ref object of OpenApiRestCall_21625418
proc url_GetCreateClusterParameterGroup_21626348(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateClusterParameterGroup_21626347(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Creates an Amazon Redshift parameter group.</p> <p>Creating parameter groups is independent of creating clusters. You can associate a cluster with a parameter group when you create the cluster. You can also associate an existing cluster with a parameter group after the cluster is created by using <a>ModifyCluster</a>. </p> <p>Parameters in the parameter group define specific behavior that applies to the databases you create on the cluster. For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Description: JString (required)
  ##              : A description of the parameter group.
  ##   Tags: JArray
  ##       : A list of tag instances.
  ##   ParameterGroupName: JString (required)
  ##                     : <p>The name of the cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Must be unique withing your AWS account.</p> </li> </ul> <note> <p>This value is stored as a lower-case string.</p> </note>
  ##   Action: JString (required)
  ##   ParameterGroupFamily: JString (required)
  ##                       : <p>The Amazon Redshift engine version to which the cluster parameter group applies. The cluster engine version determines the set of parameters.</p> <p>To get a list of valid parameter group family names, you can call <a>DescribeClusterParameterGroups</a>. By default, Amazon Redshift returns a list of all the parameter groups that are owned by your AWS account, including the default parameter groups for each Amazon Redshift engine version. The parameter group family names associated with the default parameter groups provide you the valid values. For example, a valid family name is "redshift-1.0". </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Description` field"
  var valid_21626349 = query.getOrDefault("Description")
  valid_21626349 = validateParameter(valid_21626349, JString, required = true,
                                   default = nil)
  if valid_21626349 != nil:
    section.add "Description", valid_21626349
  var valid_21626350 = query.getOrDefault("Tags")
  valid_21626350 = validateParameter(valid_21626350, JArray, required = false,
                                   default = nil)
  if valid_21626350 != nil:
    section.add "Tags", valid_21626350
  var valid_21626351 = query.getOrDefault("ParameterGroupName")
  valid_21626351 = validateParameter(valid_21626351, JString, required = true,
                                   default = nil)
  if valid_21626351 != nil:
    section.add "ParameterGroupName", valid_21626351
  var valid_21626352 = query.getOrDefault("Action")
  valid_21626352 = validateParameter(valid_21626352, JString, required = true, default = newJString(
      "CreateClusterParameterGroup"))
  if valid_21626352 != nil:
    section.add "Action", valid_21626352
  var valid_21626353 = query.getOrDefault("ParameterGroupFamily")
  valid_21626353 = validateParameter(valid_21626353, JString, required = true,
                                   default = nil)
  if valid_21626353 != nil:
    section.add "ParameterGroupFamily", valid_21626353
  var valid_21626354 = query.getOrDefault("Version")
  valid_21626354 = validateParameter(valid_21626354, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626354 != nil:
    section.add "Version", valid_21626354
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626355 = header.getOrDefault("X-Amz-Date")
  valid_21626355 = validateParameter(valid_21626355, JString, required = false,
                                   default = nil)
  if valid_21626355 != nil:
    section.add "X-Amz-Date", valid_21626355
  var valid_21626356 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626356 = validateParameter(valid_21626356, JString, required = false,
                                   default = nil)
  if valid_21626356 != nil:
    section.add "X-Amz-Security-Token", valid_21626356
  var valid_21626357 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626357 = validateParameter(valid_21626357, JString, required = false,
                                   default = nil)
  if valid_21626357 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626357
  var valid_21626358 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626358 = validateParameter(valid_21626358, JString, required = false,
                                   default = nil)
  if valid_21626358 != nil:
    section.add "X-Amz-Algorithm", valid_21626358
  var valid_21626359 = header.getOrDefault("X-Amz-Signature")
  valid_21626359 = validateParameter(valid_21626359, JString, required = false,
                                   default = nil)
  if valid_21626359 != nil:
    section.add "X-Amz-Signature", valid_21626359
  var valid_21626360 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626360 = validateParameter(valid_21626360, JString, required = false,
                                   default = nil)
  if valid_21626360 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626360
  var valid_21626361 = header.getOrDefault("X-Amz-Credential")
  valid_21626361 = validateParameter(valid_21626361, JString, required = false,
                                   default = nil)
  if valid_21626361 != nil:
    section.add "X-Amz-Credential", valid_21626361
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626362: Call_GetCreateClusterParameterGroup_21626346;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates an Amazon Redshift parameter group.</p> <p>Creating parameter groups is independent of creating clusters. You can associate a cluster with a parameter group when you create the cluster. You can also associate an existing cluster with a parameter group after the cluster is created by using <a>ModifyCluster</a>. </p> <p>Parameters in the parameter group define specific behavior that applies to the databases you create on the cluster. For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  let valid = call_21626362.validator(path, query, header, formData, body, _)
  let scheme = call_21626362.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626362.makeUrl(scheme.get, call_21626362.host, call_21626362.base,
                               call_21626362.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626362, uri, valid, _)

proc call*(call_21626363: Call_GetCreateClusterParameterGroup_21626346;
          Description: string; ParameterGroupName: string;
          ParameterGroupFamily: string; Tags: JsonNode = nil;
          Action: string = "CreateClusterParameterGroup";
          Version: string = "2012-12-01"): Recallable =
  ## getCreateClusterParameterGroup
  ## <p>Creates an Amazon Redshift parameter group.</p> <p>Creating parameter groups is independent of creating clusters. You can associate a cluster with a parameter group when you create the cluster. You can also associate an existing cluster with a parameter group after the cluster is created by using <a>ModifyCluster</a>. </p> <p>Parameters in the parameter group define specific behavior that applies to the databases you create on the cluster. For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ##   Description: string (required)
  ##              : A description of the parameter group.
  ##   Tags: JArray
  ##       : A list of tag instances.
  ##   ParameterGroupName: string (required)
  ##                     : <p>The name of the cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Must be unique withing your AWS account.</p> </li> </ul> <note> <p>This value is stored as a lower-case string.</p> </note>
  ##   Action: string (required)
  ##   ParameterGroupFamily: string (required)
  ##                       : <p>The Amazon Redshift engine version to which the cluster parameter group applies. The cluster engine version determines the set of parameters.</p> <p>To get a list of valid parameter group family names, you can call <a>DescribeClusterParameterGroups</a>. By default, Amazon Redshift returns a list of all the parameter groups that are owned by your AWS account, including the default parameter groups for each Amazon Redshift engine version. The parameter group family names associated with the default parameter groups provide you the valid values. For example, a valid family name is "redshift-1.0". </p>
  ##   Version: string (required)
  var query_21626364 = newJObject()
  add(query_21626364, "Description", newJString(Description))
  if Tags != nil:
    query_21626364.add "Tags", Tags
  add(query_21626364, "ParameterGroupName", newJString(ParameterGroupName))
  add(query_21626364, "Action", newJString(Action))
  add(query_21626364, "ParameterGroupFamily", newJString(ParameterGroupFamily))
  add(query_21626364, "Version", newJString(Version))
  result = call_21626363.call(nil, query_21626364, nil, nil, nil)

var getCreateClusterParameterGroup* = Call_GetCreateClusterParameterGroup_21626346(
    name: "getCreateClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=CreateClusterParameterGroup",
    validator: validate_GetCreateClusterParameterGroup_21626347, base: "/",
    makeUrl: url_GetCreateClusterParameterGroup_21626348,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateClusterSecurityGroup_21626403 = ref object of OpenApiRestCall_21625418
proc url_PostCreateClusterSecurityGroup_21626405(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateClusterSecurityGroup_21626404(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Creates a new Amazon Redshift security group. You use security groups to control access to non-VPC clusters.</p> <p> For information about managing security groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html">Amazon Redshift Cluster Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626406 = query.getOrDefault("Action")
  valid_21626406 = validateParameter(valid_21626406, JString, required = true, default = newJString(
      "CreateClusterSecurityGroup"))
  if valid_21626406 != nil:
    section.add "Action", valid_21626406
  var valid_21626407 = query.getOrDefault("Version")
  valid_21626407 = validateParameter(valid_21626407, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626407 != nil:
    section.add "Version", valid_21626407
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626408 = header.getOrDefault("X-Amz-Date")
  valid_21626408 = validateParameter(valid_21626408, JString, required = false,
                                   default = nil)
  if valid_21626408 != nil:
    section.add "X-Amz-Date", valid_21626408
  var valid_21626409 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626409 = validateParameter(valid_21626409, JString, required = false,
                                   default = nil)
  if valid_21626409 != nil:
    section.add "X-Amz-Security-Token", valid_21626409
  var valid_21626410 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626410 = validateParameter(valid_21626410, JString, required = false,
                                   default = nil)
  if valid_21626410 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626410
  var valid_21626411 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626411 = validateParameter(valid_21626411, JString, required = false,
                                   default = nil)
  if valid_21626411 != nil:
    section.add "X-Amz-Algorithm", valid_21626411
  var valid_21626412 = header.getOrDefault("X-Amz-Signature")
  valid_21626412 = validateParameter(valid_21626412, JString, required = false,
                                   default = nil)
  if valid_21626412 != nil:
    section.add "X-Amz-Signature", valid_21626412
  var valid_21626413 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626413 = validateParameter(valid_21626413, JString, required = false,
                                   default = nil)
  if valid_21626413 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626413
  var valid_21626414 = header.getOrDefault("X-Amz-Credential")
  valid_21626414 = validateParameter(valid_21626414, JString, required = false,
                                   default = nil)
  if valid_21626414 != nil:
    section.add "X-Amz-Credential", valid_21626414
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray
  ##       : A list of tag instances.
  ##   Description: JString (required)
  ##              : A description for the security group.
  ##   ClusterSecurityGroupName: JString (required)
  ##                           : <p>The name for the security group. Amazon Redshift stores the value as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain no more than 255 alphanumeric characters or hyphens.</p> </li> <li> <p>Must not be "Default".</p> </li> <li> <p>Must be unique for all security groups that are created by your AWS account.</p> </li> </ul> <p>Example: <code>examplesecuritygroup</code> </p>
  section = newJObject()
  var valid_21626415 = formData.getOrDefault("Tags")
  valid_21626415 = validateParameter(valid_21626415, JArray, required = false,
                                   default = nil)
  if valid_21626415 != nil:
    section.add "Tags", valid_21626415
  assert formData != nil,
        "formData argument is necessary due to required `Description` field"
  var valid_21626416 = formData.getOrDefault("Description")
  valid_21626416 = validateParameter(valid_21626416, JString, required = true,
                                   default = nil)
  if valid_21626416 != nil:
    section.add "Description", valid_21626416
  var valid_21626417 = formData.getOrDefault("ClusterSecurityGroupName")
  valid_21626417 = validateParameter(valid_21626417, JString, required = true,
                                   default = nil)
  if valid_21626417 != nil:
    section.add "ClusterSecurityGroupName", valid_21626417
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626418: Call_PostCreateClusterSecurityGroup_21626403;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new Amazon Redshift security group. You use security groups to control access to non-VPC clusters.</p> <p> For information about managing security groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html">Amazon Redshift Cluster Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  let valid = call_21626418.validator(path, query, header, formData, body, _)
  let scheme = call_21626418.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626418.makeUrl(scheme.get, call_21626418.host, call_21626418.base,
                               call_21626418.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626418, uri, valid, _)

proc call*(call_21626419: Call_PostCreateClusterSecurityGroup_21626403;
          Description: string; ClusterSecurityGroupName: string;
          Tags: JsonNode = nil; Action: string = "CreateClusterSecurityGroup";
          Version: string = "2012-12-01"): Recallable =
  ## postCreateClusterSecurityGroup
  ## <p>Creates a new Amazon Redshift security group. You use security groups to control access to non-VPC clusters.</p> <p> For information about managing security groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html">Amazon Redshift Cluster Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ##   Tags: JArray
  ##       : A list of tag instances.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Description: string (required)
  ##              : A description for the security group.
  ##   ClusterSecurityGroupName: string (required)
  ##                           : <p>The name for the security group. Amazon Redshift stores the value as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain no more than 255 alphanumeric characters or hyphens.</p> </li> <li> <p>Must not be "Default".</p> </li> <li> <p>Must be unique for all security groups that are created by your AWS account.</p> </li> </ul> <p>Example: <code>examplesecuritygroup</code> </p>
  var query_21626420 = newJObject()
  var formData_21626421 = newJObject()
  if Tags != nil:
    formData_21626421.add "Tags", Tags
  add(query_21626420, "Action", newJString(Action))
  add(query_21626420, "Version", newJString(Version))
  add(formData_21626421, "Description", newJString(Description))
  add(formData_21626421, "ClusterSecurityGroupName",
      newJString(ClusterSecurityGroupName))
  result = call_21626419.call(nil, query_21626420, nil, formData_21626421, nil)

var postCreateClusterSecurityGroup* = Call_PostCreateClusterSecurityGroup_21626403(
    name: "postCreateClusterSecurityGroup", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=CreateClusterSecurityGroup",
    validator: validate_PostCreateClusterSecurityGroup_21626404, base: "/",
    makeUrl: url_PostCreateClusterSecurityGroup_21626405,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateClusterSecurityGroup_21626385 = ref object of OpenApiRestCall_21625418
proc url_GetCreateClusterSecurityGroup_21626387(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateClusterSecurityGroup_21626386(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Creates a new Amazon Redshift security group. You use security groups to control access to non-VPC clusters.</p> <p> For information about managing security groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html">Amazon Redshift Cluster Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ClusterSecurityGroupName: JString (required)
  ##                           : <p>The name for the security group. Amazon Redshift stores the value as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain no more than 255 alphanumeric characters or hyphens.</p> </li> <li> <p>Must not be "Default".</p> </li> <li> <p>Must be unique for all security groups that are created by your AWS account.</p> </li> </ul> <p>Example: <code>examplesecuritygroup</code> </p>
  ##   Description: JString (required)
  ##              : A description for the security group.
  ##   Tags: JArray
  ##       : A list of tag instances.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ClusterSecurityGroupName` field"
  var valid_21626388 = query.getOrDefault("ClusterSecurityGroupName")
  valid_21626388 = validateParameter(valid_21626388, JString, required = true,
                                   default = nil)
  if valid_21626388 != nil:
    section.add "ClusterSecurityGroupName", valid_21626388
  var valid_21626389 = query.getOrDefault("Description")
  valid_21626389 = validateParameter(valid_21626389, JString, required = true,
                                   default = nil)
  if valid_21626389 != nil:
    section.add "Description", valid_21626389
  var valid_21626390 = query.getOrDefault("Tags")
  valid_21626390 = validateParameter(valid_21626390, JArray, required = false,
                                   default = nil)
  if valid_21626390 != nil:
    section.add "Tags", valid_21626390
  var valid_21626391 = query.getOrDefault("Action")
  valid_21626391 = validateParameter(valid_21626391, JString, required = true, default = newJString(
      "CreateClusterSecurityGroup"))
  if valid_21626391 != nil:
    section.add "Action", valid_21626391
  var valid_21626392 = query.getOrDefault("Version")
  valid_21626392 = validateParameter(valid_21626392, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626392 != nil:
    section.add "Version", valid_21626392
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626393 = header.getOrDefault("X-Amz-Date")
  valid_21626393 = validateParameter(valid_21626393, JString, required = false,
                                   default = nil)
  if valid_21626393 != nil:
    section.add "X-Amz-Date", valid_21626393
  var valid_21626394 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626394 = validateParameter(valid_21626394, JString, required = false,
                                   default = nil)
  if valid_21626394 != nil:
    section.add "X-Amz-Security-Token", valid_21626394
  var valid_21626395 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626395 = validateParameter(valid_21626395, JString, required = false,
                                   default = nil)
  if valid_21626395 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626395
  var valid_21626396 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626396 = validateParameter(valid_21626396, JString, required = false,
                                   default = nil)
  if valid_21626396 != nil:
    section.add "X-Amz-Algorithm", valid_21626396
  var valid_21626397 = header.getOrDefault("X-Amz-Signature")
  valid_21626397 = validateParameter(valid_21626397, JString, required = false,
                                   default = nil)
  if valid_21626397 != nil:
    section.add "X-Amz-Signature", valid_21626397
  var valid_21626398 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626398 = validateParameter(valid_21626398, JString, required = false,
                                   default = nil)
  if valid_21626398 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626398
  var valid_21626399 = header.getOrDefault("X-Amz-Credential")
  valid_21626399 = validateParameter(valid_21626399, JString, required = false,
                                   default = nil)
  if valid_21626399 != nil:
    section.add "X-Amz-Credential", valid_21626399
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626400: Call_GetCreateClusterSecurityGroup_21626385;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new Amazon Redshift security group. You use security groups to control access to non-VPC clusters.</p> <p> For information about managing security groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html">Amazon Redshift Cluster Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  let valid = call_21626400.validator(path, query, header, formData, body, _)
  let scheme = call_21626400.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626400.makeUrl(scheme.get, call_21626400.host, call_21626400.base,
                               call_21626400.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626400, uri, valid, _)

proc call*(call_21626401: Call_GetCreateClusterSecurityGroup_21626385;
          ClusterSecurityGroupName: string; Description: string;
          Tags: JsonNode = nil; Action: string = "CreateClusterSecurityGroup";
          Version: string = "2012-12-01"): Recallable =
  ## getCreateClusterSecurityGroup
  ## <p>Creates a new Amazon Redshift security group. You use security groups to control access to non-VPC clusters.</p> <p> For information about managing security groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html">Amazon Redshift Cluster Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ##   ClusterSecurityGroupName: string (required)
  ##                           : <p>The name for the security group. Amazon Redshift stores the value as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain no more than 255 alphanumeric characters or hyphens.</p> </li> <li> <p>Must not be "Default".</p> </li> <li> <p>Must be unique for all security groups that are created by your AWS account.</p> </li> </ul> <p>Example: <code>examplesecuritygroup</code> </p>
  ##   Description: string (required)
  ##              : A description for the security group.
  ##   Tags: JArray
  ##       : A list of tag instances.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626402 = newJObject()
  add(query_21626402, "ClusterSecurityGroupName",
      newJString(ClusterSecurityGroupName))
  add(query_21626402, "Description", newJString(Description))
  if Tags != nil:
    query_21626402.add "Tags", Tags
  add(query_21626402, "Action", newJString(Action))
  add(query_21626402, "Version", newJString(Version))
  result = call_21626401.call(nil, query_21626402, nil, nil, nil)

var getCreateClusterSecurityGroup* = Call_GetCreateClusterSecurityGroup_21626385(
    name: "getCreateClusterSecurityGroup", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=CreateClusterSecurityGroup",
    validator: validate_GetCreateClusterSecurityGroup_21626386, base: "/",
    makeUrl: url_GetCreateClusterSecurityGroup_21626387,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateClusterSnapshot_21626441 = ref object of OpenApiRestCall_21625418
proc url_PostCreateClusterSnapshot_21626443(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateClusterSnapshot_21626442(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a manual snapshot of the specified cluster. The cluster must be in the <code>available</code> state. </p> <p> For more information about working with snapshots, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626444 = query.getOrDefault("Action")
  valid_21626444 = validateParameter(valid_21626444, JString, required = true, default = newJString(
      "CreateClusterSnapshot"))
  if valid_21626444 != nil:
    section.add "Action", valid_21626444
  var valid_21626445 = query.getOrDefault("Version")
  valid_21626445 = validateParameter(valid_21626445, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626445 != nil:
    section.add "Version", valid_21626445
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626446 = header.getOrDefault("X-Amz-Date")
  valid_21626446 = validateParameter(valid_21626446, JString, required = false,
                                   default = nil)
  if valid_21626446 != nil:
    section.add "X-Amz-Date", valid_21626446
  var valid_21626447 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626447 = validateParameter(valid_21626447, JString, required = false,
                                   default = nil)
  if valid_21626447 != nil:
    section.add "X-Amz-Security-Token", valid_21626447
  var valid_21626448 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626448 = validateParameter(valid_21626448, JString, required = false,
                                   default = nil)
  if valid_21626448 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626448
  var valid_21626449 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626449 = validateParameter(valid_21626449, JString, required = false,
                                   default = nil)
  if valid_21626449 != nil:
    section.add "X-Amz-Algorithm", valid_21626449
  var valid_21626450 = header.getOrDefault("X-Amz-Signature")
  valid_21626450 = validateParameter(valid_21626450, JString, required = false,
                                   default = nil)
  if valid_21626450 != nil:
    section.add "X-Amz-Signature", valid_21626450
  var valid_21626451 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626451 = validateParameter(valid_21626451, JString, required = false,
                                   default = nil)
  if valid_21626451 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626451
  var valid_21626452 = header.getOrDefault("X-Amz-Credential")
  valid_21626452 = validateParameter(valid_21626452, JString, required = false,
                                   default = nil)
  if valid_21626452 != nil:
    section.add "X-Amz-Credential", valid_21626452
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray
  ##       : A list of tag instances.
  ##   ClusterIdentifier: JString (required)
  ##                    : The cluster identifier for which you want a snapshot.
  ##   SnapshotIdentifier: JString (required)
  ##                     : <p>A unique identifier for the snapshot that you are requesting. This identifier must be unique for all snapshots within the AWS account.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   ManualSnapshotRetentionPeriod: JInt
  ##                                : <p>The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely. </p> <p>The value must be either -1 or an integer between 1 and 3,653.</p> <p>The default value is -1.</p>
  section = newJObject()
  var valid_21626453 = formData.getOrDefault("Tags")
  valid_21626453 = validateParameter(valid_21626453, JArray, required = false,
                                   default = nil)
  if valid_21626453 != nil:
    section.add "Tags", valid_21626453
  assert formData != nil, "formData argument is necessary due to required `ClusterIdentifier` field"
  var valid_21626454 = formData.getOrDefault("ClusterIdentifier")
  valid_21626454 = validateParameter(valid_21626454, JString, required = true,
                                   default = nil)
  if valid_21626454 != nil:
    section.add "ClusterIdentifier", valid_21626454
  var valid_21626455 = formData.getOrDefault("SnapshotIdentifier")
  valid_21626455 = validateParameter(valid_21626455, JString, required = true,
                                   default = nil)
  if valid_21626455 != nil:
    section.add "SnapshotIdentifier", valid_21626455
  var valid_21626456 = formData.getOrDefault("ManualSnapshotRetentionPeriod")
  valid_21626456 = validateParameter(valid_21626456, JInt, required = false,
                                   default = nil)
  if valid_21626456 != nil:
    section.add "ManualSnapshotRetentionPeriod", valid_21626456
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626457: Call_PostCreateClusterSnapshot_21626441;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a manual snapshot of the specified cluster. The cluster must be in the <code>available</code> state. </p> <p> For more information about working with snapshots, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  let valid = call_21626457.validator(path, query, header, formData, body, _)
  let scheme = call_21626457.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626457.makeUrl(scheme.get, call_21626457.host, call_21626457.base,
                               call_21626457.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626457, uri, valid, _)

proc call*(call_21626458: Call_PostCreateClusterSnapshot_21626441;
          ClusterIdentifier: string; SnapshotIdentifier: string;
          Tags: JsonNode = nil; Action: string = "CreateClusterSnapshot";
          ManualSnapshotRetentionPeriod: int = 0; Version: string = "2012-12-01"): Recallable =
  ## postCreateClusterSnapshot
  ## <p>Creates a manual snapshot of the specified cluster. The cluster must be in the <code>available</code> state. </p> <p> For more information about working with snapshots, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ##   Tags: JArray
  ##       : A list of tag instances.
  ##   Action: string (required)
  ##   ClusterIdentifier: string (required)
  ##                    : The cluster identifier for which you want a snapshot.
  ##   SnapshotIdentifier: string (required)
  ##                     : <p>A unique identifier for the snapshot that you are requesting. This identifier must be unique for all snapshots within the AWS account.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   ManualSnapshotRetentionPeriod: int
  ##                                : <p>The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely. </p> <p>The value must be either -1 or an integer between 1 and 3,653.</p> <p>The default value is -1.</p>
  ##   Version: string (required)
  var query_21626459 = newJObject()
  var formData_21626460 = newJObject()
  if Tags != nil:
    formData_21626460.add "Tags", Tags
  add(query_21626459, "Action", newJString(Action))
  add(formData_21626460, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(formData_21626460, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  add(formData_21626460, "ManualSnapshotRetentionPeriod",
      newJInt(ManualSnapshotRetentionPeriod))
  add(query_21626459, "Version", newJString(Version))
  result = call_21626458.call(nil, query_21626459, nil, formData_21626460, nil)

var postCreateClusterSnapshot* = Call_PostCreateClusterSnapshot_21626441(
    name: "postCreateClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=CreateClusterSnapshot",
    validator: validate_PostCreateClusterSnapshot_21626442, base: "/",
    makeUrl: url_PostCreateClusterSnapshot_21626443,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateClusterSnapshot_21626422 = ref object of OpenApiRestCall_21625418
proc url_GetCreateClusterSnapshot_21626424(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateClusterSnapshot_21626423(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a manual snapshot of the specified cluster. The cluster must be in the <code>available</code> state. </p> <p> For more information about working with snapshots, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tag instances.
  ##   Action: JString (required)
  ##   ClusterIdentifier: JString (required)
  ##                    : The cluster identifier for which you want a snapshot.
  ##   SnapshotIdentifier: JString (required)
  ##                     : <p>A unique identifier for the snapshot that you are requesting. This identifier must be unique for all snapshots within the AWS account.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   Version: JString (required)
  ##   ManualSnapshotRetentionPeriod: JInt
  ##                                : <p>The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely. </p> <p>The value must be either -1 or an integer between 1 and 3,653.</p> <p>The default value is -1.</p>
  section = newJObject()
  var valid_21626425 = query.getOrDefault("Tags")
  valid_21626425 = validateParameter(valid_21626425, JArray, required = false,
                                   default = nil)
  if valid_21626425 != nil:
    section.add "Tags", valid_21626425
  var valid_21626426 = query.getOrDefault("Action")
  valid_21626426 = validateParameter(valid_21626426, JString, required = true, default = newJString(
      "CreateClusterSnapshot"))
  if valid_21626426 != nil:
    section.add "Action", valid_21626426
  var valid_21626427 = query.getOrDefault("ClusterIdentifier")
  valid_21626427 = validateParameter(valid_21626427, JString, required = true,
                                   default = nil)
  if valid_21626427 != nil:
    section.add "ClusterIdentifier", valid_21626427
  var valid_21626428 = query.getOrDefault("SnapshotIdentifier")
  valid_21626428 = validateParameter(valid_21626428, JString, required = true,
                                   default = nil)
  if valid_21626428 != nil:
    section.add "SnapshotIdentifier", valid_21626428
  var valid_21626429 = query.getOrDefault("Version")
  valid_21626429 = validateParameter(valid_21626429, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626429 != nil:
    section.add "Version", valid_21626429
  var valid_21626430 = query.getOrDefault("ManualSnapshotRetentionPeriod")
  valid_21626430 = validateParameter(valid_21626430, JInt, required = false,
                                   default = nil)
  if valid_21626430 != nil:
    section.add "ManualSnapshotRetentionPeriod", valid_21626430
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626431 = header.getOrDefault("X-Amz-Date")
  valid_21626431 = validateParameter(valid_21626431, JString, required = false,
                                   default = nil)
  if valid_21626431 != nil:
    section.add "X-Amz-Date", valid_21626431
  var valid_21626432 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626432 = validateParameter(valid_21626432, JString, required = false,
                                   default = nil)
  if valid_21626432 != nil:
    section.add "X-Amz-Security-Token", valid_21626432
  var valid_21626433 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626433 = validateParameter(valid_21626433, JString, required = false,
                                   default = nil)
  if valid_21626433 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626433
  var valid_21626434 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626434 = validateParameter(valid_21626434, JString, required = false,
                                   default = nil)
  if valid_21626434 != nil:
    section.add "X-Amz-Algorithm", valid_21626434
  var valid_21626435 = header.getOrDefault("X-Amz-Signature")
  valid_21626435 = validateParameter(valid_21626435, JString, required = false,
                                   default = nil)
  if valid_21626435 != nil:
    section.add "X-Amz-Signature", valid_21626435
  var valid_21626436 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626436 = validateParameter(valid_21626436, JString, required = false,
                                   default = nil)
  if valid_21626436 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626436
  var valid_21626437 = header.getOrDefault("X-Amz-Credential")
  valid_21626437 = validateParameter(valid_21626437, JString, required = false,
                                   default = nil)
  if valid_21626437 != nil:
    section.add "X-Amz-Credential", valid_21626437
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626438: Call_GetCreateClusterSnapshot_21626422;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a manual snapshot of the specified cluster. The cluster must be in the <code>available</code> state. </p> <p> For more information about working with snapshots, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  let valid = call_21626438.validator(path, query, header, formData, body, _)
  let scheme = call_21626438.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626438.makeUrl(scheme.get, call_21626438.host, call_21626438.base,
                               call_21626438.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626438, uri, valid, _)

proc call*(call_21626439: Call_GetCreateClusterSnapshot_21626422;
          ClusterIdentifier: string; SnapshotIdentifier: string;
          Tags: JsonNode = nil; Action: string = "CreateClusterSnapshot";
          Version: string = "2012-12-01"; ManualSnapshotRetentionPeriod: int = 0): Recallable =
  ## getCreateClusterSnapshot
  ## <p>Creates a manual snapshot of the specified cluster. The cluster must be in the <code>available</code> state. </p> <p> For more information about working with snapshots, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ##   Tags: JArray
  ##       : A list of tag instances.
  ##   Action: string (required)
  ##   ClusterIdentifier: string (required)
  ##                    : The cluster identifier for which you want a snapshot.
  ##   SnapshotIdentifier: string (required)
  ##                     : <p>A unique identifier for the snapshot that you are requesting. This identifier must be unique for all snapshots within the AWS account.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   Version: string (required)
  ##   ManualSnapshotRetentionPeriod: int
  ##                                : <p>The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely. </p> <p>The value must be either -1 or an integer between 1 and 3,653.</p> <p>The default value is -1.</p>
  var query_21626440 = newJObject()
  if Tags != nil:
    query_21626440.add "Tags", Tags
  add(query_21626440, "Action", newJString(Action))
  add(query_21626440, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(query_21626440, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  add(query_21626440, "Version", newJString(Version))
  add(query_21626440, "ManualSnapshotRetentionPeriod",
      newJInt(ManualSnapshotRetentionPeriod))
  result = call_21626439.call(nil, query_21626440, nil, nil, nil)

var getCreateClusterSnapshot* = Call_GetCreateClusterSnapshot_21626422(
    name: "getCreateClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=CreateClusterSnapshot",
    validator: validate_GetCreateClusterSnapshot_21626423, base: "/",
    makeUrl: url_GetCreateClusterSnapshot_21626424,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateClusterSubnetGroup_21626480 = ref object of OpenApiRestCall_21625418
proc url_PostCreateClusterSubnetGroup_21626482(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateClusterSubnetGroup_21626481(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Creates a new Amazon Redshift subnet group. You must provide a list of one or more subnets in your existing Amazon Virtual Private Cloud (Amazon VPC) when creating Amazon Redshift subnet group.</p> <p> For information about subnet groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-cluster-subnet-groups.html">Amazon Redshift Cluster Subnet Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626483 = query.getOrDefault("Action")
  valid_21626483 = validateParameter(valid_21626483, JString, required = true, default = newJString(
      "CreateClusterSubnetGroup"))
  if valid_21626483 != nil:
    section.add "Action", valid_21626483
  var valid_21626484 = query.getOrDefault("Version")
  valid_21626484 = validateParameter(valid_21626484, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626484 != nil:
    section.add "Version", valid_21626484
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626485 = header.getOrDefault("X-Amz-Date")
  valid_21626485 = validateParameter(valid_21626485, JString, required = false,
                                   default = nil)
  if valid_21626485 != nil:
    section.add "X-Amz-Date", valid_21626485
  var valid_21626486 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626486 = validateParameter(valid_21626486, JString, required = false,
                                   default = nil)
  if valid_21626486 != nil:
    section.add "X-Amz-Security-Token", valid_21626486
  var valid_21626487 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626487 = validateParameter(valid_21626487, JString, required = false,
                                   default = nil)
  if valid_21626487 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626487
  var valid_21626488 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626488 = validateParameter(valid_21626488, JString, required = false,
                                   default = nil)
  if valid_21626488 != nil:
    section.add "X-Amz-Algorithm", valid_21626488
  var valid_21626489 = header.getOrDefault("X-Amz-Signature")
  valid_21626489 = validateParameter(valid_21626489, JString, required = false,
                                   default = nil)
  if valid_21626489 != nil:
    section.add "X-Amz-Signature", valid_21626489
  var valid_21626490 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626490 = validateParameter(valid_21626490, JString, required = false,
                                   default = nil)
  if valid_21626490 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626490
  var valid_21626491 = header.getOrDefault("X-Amz-Credential")
  valid_21626491 = validateParameter(valid_21626491, JString, required = false,
                                   default = nil)
  if valid_21626491 != nil:
    section.add "X-Amz-Credential", valid_21626491
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray
  ##       : A list of tag instances.
  ##   SubnetIds: JArray (required)
  ##            : An array of VPC subnet IDs. A maximum of 20 subnets can be modified in a single request.
  ##   Description: JString (required)
  ##              : A description for the subnet group.
  ##   ClusterSubnetGroupName: JString (required)
  ##                         : <p>The name for the subnet group. Amazon Redshift stores the value as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain no more than 255 alphanumeric characters or hyphens.</p> </li> <li> <p>Must not be "Default".</p> </li> <li> <p>Must be unique for all subnet groups that are created by your AWS account.</p> </li> </ul> <p>Example: <code>examplesubnetgroup</code> </p>
  section = newJObject()
  var valid_21626492 = formData.getOrDefault("Tags")
  valid_21626492 = validateParameter(valid_21626492, JArray, required = false,
                                   default = nil)
  if valid_21626492 != nil:
    section.add "Tags", valid_21626492
  assert formData != nil,
        "formData argument is necessary due to required `SubnetIds` field"
  var valid_21626493 = formData.getOrDefault("SubnetIds")
  valid_21626493 = validateParameter(valid_21626493, JArray, required = true,
                                   default = nil)
  if valid_21626493 != nil:
    section.add "SubnetIds", valid_21626493
  var valid_21626494 = formData.getOrDefault("Description")
  valid_21626494 = validateParameter(valid_21626494, JString, required = true,
                                   default = nil)
  if valid_21626494 != nil:
    section.add "Description", valid_21626494
  var valid_21626495 = formData.getOrDefault("ClusterSubnetGroupName")
  valid_21626495 = validateParameter(valid_21626495, JString, required = true,
                                   default = nil)
  if valid_21626495 != nil:
    section.add "ClusterSubnetGroupName", valid_21626495
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626496: Call_PostCreateClusterSubnetGroup_21626480;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new Amazon Redshift subnet group. You must provide a list of one or more subnets in your existing Amazon Virtual Private Cloud (Amazon VPC) when creating Amazon Redshift subnet group.</p> <p> For information about subnet groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-cluster-subnet-groups.html">Amazon Redshift Cluster Subnet Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  let valid = call_21626496.validator(path, query, header, formData, body, _)
  let scheme = call_21626496.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626496.makeUrl(scheme.get, call_21626496.host, call_21626496.base,
                               call_21626496.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626496, uri, valid, _)

proc call*(call_21626497: Call_PostCreateClusterSubnetGroup_21626480;
          SubnetIds: JsonNode; Description: string; ClusterSubnetGroupName: string;
          Tags: JsonNode = nil; Action: string = "CreateClusterSubnetGroup";
          Version: string = "2012-12-01"): Recallable =
  ## postCreateClusterSubnetGroup
  ## <p>Creates a new Amazon Redshift subnet group. You must provide a list of one or more subnets in your existing Amazon Virtual Private Cloud (Amazon VPC) when creating Amazon Redshift subnet group.</p> <p> For information about subnet groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-cluster-subnet-groups.html">Amazon Redshift Cluster Subnet Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ##   Tags: JArray
  ##       : A list of tag instances.
  ##   SubnetIds: JArray (required)
  ##            : An array of VPC subnet IDs. A maximum of 20 subnets can be modified in a single request.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Description: string (required)
  ##              : A description for the subnet group.
  ##   ClusterSubnetGroupName: string (required)
  ##                         : <p>The name for the subnet group. Amazon Redshift stores the value as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain no more than 255 alphanumeric characters or hyphens.</p> </li> <li> <p>Must not be "Default".</p> </li> <li> <p>Must be unique for all subnet groups that are created by your AWS account.</p> </li> </ul> <p>Example: <code>examplesubnetgroup</code> </p>
  var query_21626498 = newJObject()
  var formData_21626499 = newJObject()
  if Tags != nil:
    formData_21626499.add "Tags", Tags
  if SubnetIds != nil:
    formData_21626499.add "SubnetIds", SubnetIds
  add(query_21626498, "Action", newJString(Action))
  add(query_21626498, "Version", newJString(Version))
  add(formData_21626499, "Description", newJString(Description))
  add(formData_21626499, "ClusterSubnetGroupName",
      newJString(ClusterSubnetGroupName))
  result = call_21626497.call(nil, query_21626498, nil, formData_21626499, nil)

var postCreateClusterSubnetGroup* = Call_PostCreateClusterSubnetGroup_21626480(
    name: "postCreateClusterSubnetGroup", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=CreateClusterSubnetGroup",
    validator: validate_PostCreateClusterSubnetGroup_21626481, base: "/",
    makeUrl: url_PostCreateClusterSubnetGroup_21626482,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateClusterSubnetGroup_21626461 = ref object of OpenApiRestCall_21625418
proc url_GetCreateClusterSubnetGroup_21626463(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateClusterSubnetGroup_21626462(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a new Amazon Redshift subnet group. You must provide a list of one or more subnets in your existing Amazon Virtual Private Cloud (Amazon VPC) when creating Amazon Redshift subnet group.</p> <p> For information about subnet groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-cluster-subnet-groups.html">Amazon Redshift Cluster Subnet Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ClusterSubnetGroupName: JString (required)
  ##                         : <p>The name for the subnet group. Amazon Redshift stores the value as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain no more than 255 alphanumeric characters or hyphens.</p> </li> <li> <p>Must not be "Default".</p> </li> <li> <p>Must be unique for all subnet groups that are created by your AWS account.</p> </li> </ul> <p>Example: <code>examplesubnetgroup</code> </p>
  ##   Description: JString (required)
  ##              : A description for the subnet group.
  ##   Tags: JArray
  ##       : A list of tag instances.
  ##   Action: JString (required)
  ##   SubnetIds: JArray (required)
  ##            : An array of VPC subnet IDs. A maximum of 20 subnets can be modified in a single request.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ClusterSubnetGroupName` field"
  var valid_21626464 = query.getOrDefault("ClusterSubnetGroupName")
  valid_21626464 = validateParameter(valid_21626464, JString, required = true,
                                   default = nil)
  if valid_21626464 != nil:
    section.add "ClusterSubnetGroupName", valid_21626464
  var valid_21626465 = query.getOrDefault("Description")
  valid_21626465 = validateParameter(valid_21626465, JString, required = true,
                                   default = nil)
  if valid_21626465 != nil:
    section.add "Description", valid_21626465
  var valid_21626466 = query.getOrDefault("Tags")
  valid_21626466 = validateParameter(valid_21626466, JArray, required = false,
                                   default = nil)
  if valid_21626466 != nil:
    section.add "Tags", valid_21626466
  var valid_21626467 = query.getOrDefault("Action")
  valid_21626467 = validateParameter(valid_21626467, JString, required = true, default = newJString(
      "CreateClusterSubnetGroup"))
  if valid_21626467 != nil:
    section.add "Action", valid_21626467
  var valid_21626468 = query.getOrDefault("SubnetIds")
  valid_21626468 = validateParameter(valid_21626468, JArray, required = true,
                                   default = nil)
  if valid_21626468 != nil:
    section.add "SubnetIds", valid_21626468
  var valid_21626469 = query.getOrDefault("Version")
  valid_21626469 = validateParameter(valid_21626469, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626469 != nil:
    section.add "Version", valid_21626469
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626470 = header.getOrDefault("X-Amz-Date")
  valid_21626470 = validateParameter(valid_21626470, JString, required = false,
                                   default = nil)
  if valid_21626470 != nil:
    section.add "X-Amz-Date", valid_21626470
  var valid_21626471 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626471 = validateParameter(valid_21626471, JString, required = false,
                                   default = nil)
  if valid_21626471 != nil:
    section.add "X-Amz-Security-Token", valid_21626471
  var valid_21626472 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626472 = validateParameter(valid_21626472, JString, required = false,
                                   default = nil)
  if valid_21626472 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626472
  var valid_21626473 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626473 = validateParameter(valid_21626473, JString, required = false,
                                   default = nil)
  if valid_21626473 != nil:
    section.add "X-Amz-Algorithm", valid_21626473
  var valid_21626474 = header.getOrDefault("X-Amz-Signature")
  valid_21626474 = validateParameter(valid_21626474, JString, required = false,
                                   default = nil)
  if valid_21626474 != nil:
    section.add "X-Amz-Signature", valid_21626474
  var valid_21626475 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626475 = validateParameter(valid_21626475, JString, required = false,
                                   default = nil)
  if valid_21626475 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626475
  var valid_21626476 = header.getOrDefault("X-Amz-Credential")
  valid_21626476 = validateParameter(valid_21626476, JString, required = false,
                                   default = nil)
  if valid_21626476 != nil:
    section.add "X-Amz-Credential", valid_21626476
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626477: Call_GetCreateClusterSubnetGroup_21626461;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new Amazon Redshift subnet group. You must provide a list of one or more subnets in your existing Amazon Virtual Private Cloud (Amazon VPC) when creating Amazon Redshift subnet group.</p> <p> For information about subnet groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-cluster-subnet-groups.html">Amazon Redshift Cluster Subnet Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  let valid = call_21626477.validator(path, query, header, formData, body, _)
  let scheme = call_21626477.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626477.makeUrl(scheme.get, call_21626477.host, call_21626477.base,
                               call_21626477.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626477, uri, valid, _)

proc call*(call_21626478: Call_GetCreateClusterSubnetGroup_21626461;
          ClusterSubnetGroupName: string; Description: string; SubnetIds: JsonNode;
          Tags: JsonNode = nil; Action: string = "CreateClusterSubnetGroup";
          Version: string = "2012-12-01"): Recallable =
  ## getCreateClusterSubnetGroup
  ## <p>Creates a new Amazon Redshift subnet group. You must provide a list of one or more subnets in your existing Amazon Virtual Private Cloud (Amazon VPC) when creating Amazon Redshift subnet group.</p> <p> For information about subnet groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-cluster-subnet-groups.html">Amazon Redshift Cluster Subnet Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ##   ClusterSubnetGroupName: string (required)
  ##                         : <p>The name for the subnet group. Amazon Redshift stores the value as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain no more than 255 alphanumeric characters or hyphens.</p> </li> <li> <p>Must not be "Default".</p> </li> <li> <p>Must be unique for all subnet groups that are created by your AWS account.</p> </li> </ul> <p>Example: <code>examplesubnetgroup</code> </p>
  ##   Description: string (required)
  ##              : A description for the subnet group.
  ##   Tags: JArray
  ##       : A list of tag instances.
  ##   Action: string (required)
  ##   SubnetIds: JArray (required)
  ##            : An array of VPC subnet IDs. A maximum of 20 subnets can be modified in a single request.
  ##   Version: string (required)
  var query_21626479 = newJObject()
  add(query_21626479, "ClusterSubnetGroupName", newJString(ClusterSubnetGroupName))
  add(query_21626479, "Description", newJString(Description))
  if Tags != nil:
    query_21626479.add "Tags", Tags
  add(query_21626479, "Action", newJString(Action))
  if SubnetIds != nil:
    query_21626479.add "SubnetIds", SubnetIds
  add(query_21626479, "Version", newJString(Version))
  result = call_21626478.call(nil, query_21626479, nil, nil, nil)

var getCreateClusterSubnetGroup* = Call_GetCreateClusterSubnetGroup_21626461(
    name: "getCreateClusterSubnetGroup", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=CreateClusterSubnetGroup",
    validator: validate_GetCreateClusterSubnetGroup_21626462, base: "/",
    makeUrl: url_GetCreateClusterSubnetGroup_21626463,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateEventSubscription_21626523 = ref object of OpenApiRestCall_21625418
proc url_PostCreateEventSubscription_21626525(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateEventSubscription_21626524(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates an Amazon Redshift event notification subscription. This action requires an ARN (Amazon Resource Name) of an Amazon SNS topic created by either the Amazon Redshift console, the Amazon SNS console, or the Amazon SNS API. To obtain an ARN with Amazon SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the source type, and lists of Amazon Redshift source IDs, event categories, and event severities. Notifications will be sent for all events you want that match those criteria. For example, you can specify source type = cluster, source ID = my-cluster-1 and mycluster2, event categories = Availability, Backup, and severity = ERROR. The subscription will only send notifications for those ERROR events in the Availability and Backup categories for the specified clusters.</p> <p>If you specify both the source type and source IDs, such as source type = cluster and source identifier = my-cluster-1, notifications will be sent for all the cluster events for my-cluster-1. If you specify a source type but do not specify a source identifier, you will receive notice of the events for the objects of that type in your AWS account. If you do not specify either the SourceType nor the SourceIdentifier, you will be notified of events generated from all Amazon Redshift sources belonging to your AWS account. You must specify a source type if you specify a source ID.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626526 = query.getOrDefault("Action")
  valid_21626526 = validateParameter(valid_21626526, JString, required = true, default = newJString(
      "CreateEventSubscription"))
  if valid_21626526 != nil:
    section.add "Action", valid_21626526
  var valid_21626527 = query.getOrDefault("Version")
  valid_21626527 = validateParameter(valid_21626527, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626527 != nil:
    section.add "Version", valid_21626527
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626528 = header.getOrDefault("X-Amz-Date")
  valid_21626528 = validateParameter(valid_21626528, JString, required = false,
                                   default = nil)
  if valid_21626528 != nil:
    section.add "X-Amz-Date", valid_21626528
  var valid_21626529 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626529 = validateParameter(valid_21626529, JString, required = false,
                                   default = nil)
  if valid_21626529 != nil:
    section.add "X-Amz-Security-Token", valid_21626529
  var valid_21626530 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626530 = validateParameter(valid_21626530, JString, required = false,
                                   default = nil)
  if valid_21626530 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626530
  var valid_21626531 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626531 = validateParameter(valid_21626531, JString, required = false,
                                   default = nil)
  if valid_21626531 != nil:
    section.add "X-Amz-Algorithm", valid_21626531
  var valid_21626532 = header.getOrDefault("X-Amz-Signature")
  valid_21626532 = validateParameter(valid_21626532, JString, required = false,
                                   default = nil)
  if valid_21626532 != nil:
    section.add "X-Amz-Signature", valid_21626532
  var valid_21626533 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626533 = validateParameter(valid_21626533, JString, required = false,
                                   default = nil)
  if valid_21626533 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626533
  var valid_21626534 = header.getOrDefault("X-Amz-Credential")
  valid_21626534 = validateParameter(valid_21626534, JString, required = false,
                                   default = nil)
  if valid_21626534 != nil:
    section.add "X-Amz-Credential", valid_21626534
  result.add "header", section
  ## parameters in `formData` object:
  ##   Enabled: JBool
  ##          : A boolean value; set to <code>true</code> to activate the subscription, and set to <code>false</code> to create the subscription but not activate it. 
  ##   EventCategories: JArray
  ##                  : <p>Specifies the Amazon Redshift event categories to be published by the event notification subscription.</p> <p>Values: configuration, management, monitoring, security</p>
  ##   SnsTopicArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the Amazon SNS topic used to transmit the event notifications. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Severity: JString
  ##           : <p>Specifies the Amazon Redshift event severity to be published by the event notification subscription.</p> <p>Values: ERROR, INFO</p>
  ##   SourceIds: JArray
  ##            : <p>A list of one or more identifiers of Amazon Redshift source objects. All of the objects must be of the same type as was specified in the source type parameter. The event subscription will return only events generated by the specified objects. If not specified, then events are returned for all objects within the source type specified.</p> <p>Example: my-cluster-1, my-cluster-2</p> <p>Example: my-snapshot-20131010</p>
  ##   Tags: JArray
  ##       : A list of tag instances.
  ##   SubscriptionName: JString (required)
  ##                   : <p>The name of the event subscription to be created.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank.</p> </li> <li> <p>Must contain from 1 to 255 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   SourceType: JString
  ##             : <p>The type of source that will be generating the events. For example, if you want to be notified of events generated by a cluster, you would set this parameter to cluster. If this value is not specified, events are returned for all Amazon Redshift objects in your AWS account. You must specify a source type in order to specify source IDs.</p> <p>Valid values: cluster, cluster-parameter-group, cluster-security-group, cluster-snapshot, and scheduled-action.</p>
  section = newJObject()
  var valid_21626535 = formData.getOrDefault("Enabled")
  valid_21626535 = validateParameter(valid_21626535, JBool, required = false,
                                   default = nil)
  if valid_21626535 != nil:
    section.add "Enabled", valid_21626535
  var valid_21626536 = formData.getOrDefault("EventCategories")
  valid_21626536 = validateParameter(valid_21626536, JArray, required = false,
                                   default = nil)
  if valid_21626536 != nil:
    section.add "EventCategories", valid_21626536
  assert formData != nil,
        "formData argument is necessary due to required `SnsTopicArn` field"
  var valid_21626537 = formData.getOrDefault("SnsTopicArn")
  valid_21626537 = validateParameter(valid_21626537, JString, required = true,
                                   default = nil)
  if valid_21626537 != nil:
    section.add "SnsTopicArn", valid_21626537
  var valid_21626538 = formData.getOrDefault("Severity")
  valid_21626538 = validateParameter(valid_21626538, JString, required = false,
                                   default = nil)
  if valid_21626538 != nil:
    section.add "Severity", valid_21626538
  var valid_21626539 = formData.getOrDefault("SourceIds")
  valid_21626539 = validateParameter(valid_21626539, JArray, required = false,
                                   default = nil)
  if valid_21626539 != nil:
    section.add "SourceIds", valid_21626539
  var valid_21626540 = formData.getOrDefault("Tags")
  valid_21626540 = validateParameter(valid_21626540, JArray, required = false,
                                   default = nil)
  if valid_21626540 != nil:
    section.add "Tags", valid_21626540
  var valid_21626541 = formData.getOrDefault("SubscriptionName")
  valid_21626541 = validateParameter(valid_21626541, JString, required = true,
                                   default = nil)
  if valid_21626541 != nil:
    section.add "SubscriptionName", valid_21626541
  var valid_21626542 = formData.getOrDefault("SourceType")
  valid_21626542 = validateParameter(valid_21626542, JString, required = false,
                                   default = nil)
  if valid_21626542 != nil:
    section.add "SourceType", valid_21626542
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626543: Call_PostCreateEventSubscription_21626523;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates an Amazon Redshift event notification subscription. This action requires an ARN (Amazon Resource Name) of an Amazon SNS topic created by either the Amazon Redshift console, the Amazon SNS console, or the Amazon SNS API. To obtain an ARN with Amazon SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the source type, and lists of Amazon Redshift source IDs, event categories, and event severities. Notifications will be sent for all events you want that match those criteria. For example, you can specify source type = cluster, source ID = my-cluster-1 and mycluster2, event categories = Availability, Backup, and severity = ERROR. The subscription will only send notifications for those ERROR events in the Availability and Backup categories for the specified clusters.</p> <p>If you specify both the source type and source IDs, such as source type = cluster and source identifier = my-cluster-1, notifications will be sent for all the cluster events for my-cluster-1. If you specify a source type but do not specify a source identifier, you will receive notice of the events for the objects of that type in your AWS account. If you do not specify either the SourceType nor the SourceIdentifier, you will be notified of events generated from all Amazon Redshift sources belonging to your AWS account. You must specify a source type if you specify a source ID.</p>
  ## 
  let valid = call_21626543.validator(path, query, header, formData, body, _)
  let scheme = call_21626543.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626543.makeUrl(scheme.get, call_21626543.host, call_21626543.base,
                               call_21626543.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626543, uri, valid, _)

proc call*(call_21626544: Call_PostCreateEventSubscription_21626523;
          SnsTopicArn: string; SubscriptionName: string; Enabled: bool = false;
          EventCategories: JsonNode = nil; Severity: string = "";
          SourceIds: JsonNode = nil; Tags: JsonNode = nil;
          Action: string = "CreateEventSubscription";
          Version: string = "2012-12-01"; SourceType: string = ""): Recallable =
  ## postCreateEventSubscription
  ## <p>Creates an Amazon Redshift event notification subscription. This action requires an ARN (Amazon Resource Name) of an Amazon SNS topic created by either the Amazon Redshift console, the Amazon SNS console, or the Amazon SNS API. To obtain an ARN with Amazon SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the source type, and lists of Amazon Redshift source IDs, event categories, and event severities. Notifications will be sent for all events you want that match those criteria. For example, you can specify source type = cluster, source ID = my-cluster-1 and mycluster2, event categories = Availability, Backup, and severity = ERROR. The subscription will only send notifications for those ERROR events in the Availability and Backup categories for the specified clusters.</p> <p>If you specify both the source type and source IDs, such as source type = cluster and source identifier = my-cluster-1, notifications will be sent for all the cluster events for my-cluster-1. If you specify a source type but do not specify a source identifier, you will receive notice of the events for the objects of that type in your AWS account. If you do not specify either the SourceType nor the SourceIdentifier, you will be notified of events generated from all Amazon Redshift sources belonging to your AWS account. You must specify a source type if you specify a source ID.</p>
  ##   Enabled: bool
  ##          : A boolean value; set to <code>true</code> to activate the subscription, and set to <code>false</code> to create the subscription but not activate it. 
  ##   EventCategories: JArray
  ##                  : <p>Specifies the Amazon Redshift event categories to be published by the event notification subscription.</p> <p>Values: configuration, management, monitoring, security</p>
  ##   SnsTopicArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the Amazon SNS topic used to transmit the event notifications. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Severity: string
  ##           : <p>Specifies the Amazon Redshift event severity to be published by the event notification subscription.</p> <p>Values: ERROR, INFO</p>
  ##   SourceIds: JArray
  ##            : <p>A list of one or more identifiers of Amazon Redshift source objects. All of the objects must be of the same type as was specified in the source type parameter. The event subscription will return only events generated by the specified objects. If not specified, then events are returned for all objects within the source type specified.</p> <p>Example: my-cluster-1, my-cluster-2</p> <p>Example: my-snapshot-20131010</p>
  ##   Tags: JArray
  ##       : A list of tag instances.
  ##   SubscriptionName: string (required)
  ##                   : <p>The name of the event subscription to be created.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank.</p> </li> <li> <p>Must contain from 1 to 255 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   SourceType: string
  ##             : <p>The type of source that will be generating the events. For example, if you want to be notified of events generated by a cluster, you would set this parameter to cluster. If this value is not specified, events are returned for all Amazon Redshift objects in your AWS account. You must specify a source type in order to specify source IDs.</p> <p>Valid values: cluster, cluster-parameter-group, cluster-security-group, cluster-snapshot, and scheduled-action.</p>
  var query_21626545 = newJObject()
  var formData_21626546 = newJObject()
  add(formData_21626546, "Enabled", newJBool(Enabled))
  if EventCategories != nil:
    formData_21626546.add "EventCategories", EventCategories
  add(formData_21626546, "SnsTopicArn", newJString(SnsTopicArn))
  add(formData_21626546, "Severity", newJString(Severity))
  if SourceIds != nil:
    formData_21626546.add "SourceIds", SourceIds
  if Tags != nil:
    formData_21626546.add "Tags", Tags
  add(formData_21626546, "SubscriptionName", newJString(SubscriptionName))
  add(query_21626545, "Action", newJString(Action))
  add(query_21626545, "Version", newJString(Version))
  add(formData_21626546, "SourceType", newJString(SourceType))
  result = call_21626544.call(nil, query_21626545, nil, formData_21626546, nil)

var postCreateEventSubscription* = Call_PostCreateEventSubscription_21626523(
    name: "postCreateEventSubscription", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=CreateEventSubscription",
    validator: validate_PostCreateEventSubscription_21626524, base: "/",
    makeUrl: url_PostCreateEventSubscription_21626525,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateEventSubscription_21626500 = ref object of OpenApiRestCall_21625418
proc url_GetCreateEventSubscription_21626502(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateEventSubscription_21626501(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates an Amazon Redshift event notification subscription. This action requires an ARN (Amazon Resource Name) of an Amazon SNS topic created by either the Amazon Redshift console, the Amazon SNS console, or the Amazon SNS API. To obtain an ARN with Amazon SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the source type, and lists of Amazon Redshift source IDs, event categories, and event severities. Notifications will be sent for all events you want that match those criteria. For example, you can specify source type = cluster, source ID = my-cluster-1 and mycluster2, event categories = Availability, Backup, and severity = ERROR. The subscription will only send notifications for those ERROR events in the Availability and Backup categories for the specified clusters.</p> <p>If you specify both the source type and source IDs, such as source type = cluster and source identifier = my-cluster-1, notifications will be sent for all the cluster events for my-cluster-1. If you specify a source type but do not specify a source identifier, you will receive notice of the events for the objects of that type in your AWS account. If you do not specify either the SourceType nor the SourceIdentifier, you will be notified of events generated from all Amazon Redshift sources belonging to your AWS account. You must specify a source type if you specify a source ID.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : <p>The type of source that will be generating the events. For example, if you want to be notified of events generated by a cluster, you would set this parameter to cluster. If this value is not specified, events are returned for all Amazon Redshift objects in your AWS account. You must specify a source type in order to specify source IDs.</p> <p>Valid values: cluster, cluster-parameter-group, cluster-security-group, cluster-snapshot, and scheduled-action.</p>
  ##   SourceIds: JArray
  ##            : <p>A list of one or more identifiers of Amazon Redshift source objects. All of the objects must be of the same type as was specified in the source type parameter. The event subscription will return only events generated by the specified objects. If not specified, then events are returned for all objects within the source type specified.</p> <p>Example: my-cluster-1, my-cluster-2</p> <p>Example: my-snapshot-20131010</p>
  ##   Enabled: JBool
  ##          : A boolean value; set to <code>true</code> to activate the subscription, and set to <code>false</code> to create the subscription but not activate it. 
  ##   Tags: JArray
  ##       : A list of tag instances.
  ##   Action: JString (required)
  ##   SnsTopicArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the Amazon SNS topic used to transmit the event notifications. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   EventCategories: JArray
  ##                  : <p>Specifies the Amazon Redshift event categories to be published by the event notification subscription.</p> <p>Values: configuration, management, monitoring, security</p>
  ##   SubscriptionName: JString (required)
  ##                   : <p>The name of the event subscription to be created.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank.</p> </li> <li> <p>Must contain from 1 to 255 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Severity: JString
  ##           : <p>Specifies the Amazon Redshift event severity to be published by the event notification subscription.</p> <p>Values: ERROR, INFO</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626503 = query.getOrDefault("SourceType")
  valid_21626503 = validateParameter(valid_21626503, JString, required = false,
                                   default = nil)
  if valid_21626503 != nil:
    section.add "SourceType", valid_21626503
  var valid_21626504 = query.getOrDefault("SourceIds")
  valid_21626504 = validateParameter(valid_21626504, JArray, required = false,
                                   default = nil)
  if valid_21626504 != nil:
    section.add "SourceIds", valid_21626504
  var valid_21626505 = query.getOrDefault("Enabled")
  valid_21626505 = validateParameter(valid_21626505, JBool, required = false,
                                   default = nil)
  if valid_21626505 != nil:
    section.add "Enabled", valid_21626505
  var valid_21626506 = query.getOrDefault("Tags")
  valid_21626506 = validateParameter(valid_21626506, JArray, required = false,
                                   default = nil)
  if valid_21626506 != nil:
    section.add "Tags", valid_21626506
  var valid_21626507 = query.getOrDefault("Action")
  valid_21626507 = validateParameter(valid_21626507, JString, required = true, default = newJString(
      "CreateEventSubscription"))
  if valid_21626507 != nil:
    section.add "Action", valid_21626507
  var valid_21626508 = query.getOrDefault("SnsTopicArn")
  valid_21626508 = validateParameter(valid_21626508, JString, required = true,
                                   default = nil)
  if valid_21626508 != nil:
    section.add "SnsTopicArn", valid_21626508
  var valid_21626509 = query.getOrDefault("EventCategories")
  valid_21626509 = validateParameter(valid_21626509, JArray, required = false,
                                   default = nil)
  if valid_21626509 != nil:
    section.add "EventCategories", valid_21626509
  var valid_21626510 = query.getOrDefault("SubscriptionName")
  valid_21626510 = validateParameter(valid_21626510, JString, required = true,
                                   default = nil)
  if valid_21626510 != nil:
    section.add "SubscriptionName", valid_21626510
  var valid_21626511 = query.getOrDefault("Severity")
  valid_21626511 = validateParameter(valid_21626511, JString, required = false,
                                   default = nil)
  if valid_21626511 != nil:
    section.add "Severity", valid_21626511
  var valid_21626512 = query.getOrDefault("Version")
  valid_21626512 = validateParameter(valid_21626512, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626512 != nil:
    section.add "Version", valid_21626512
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626513 = header.getOrDefault("X-Amz-Date")
  valid_21626513 = validateParameter(valid_21626513, JString, required = false,
                                   default = nil)
  if valid_21626513 != nil:
    section.add "X-Amz-Date", valid_21626513
  var valid_21626514 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626514 = validateParameter(valid_21626514, JString, required = false,
                                   default = nil)
  if valid_21626514 != nil:
    section.add "X-Amz-Security-Token", valid_21626514
  var valid_21626515 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626515 = validateParameter(valid_21626515, JString, required = false,
                                   default = nil)
  if valid_21626515 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626515
  var valid_21626516 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626516 = validateParameter(valid_21626516, JString, required = false,
                                   default = nil)
  if valid_21626516 != nil:
    section.add "X-Amz-Algorithm", valid_21626516
  var valid_21626517 = header.getOrDefault("X-Amz-Signature")
  valid_21626517 = validateParameter(valid_21626517, JString, required = false,
                                   default = nil)
  if valid_21626517 != nil:
    section.add "X-Amz-Signature", valid_21626517
  var valid_21626518 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626518 = validateParameter(valid_21626518, JString, required = false,
                                   default = nil)
  if valid_21626518 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626518
  var valid_21626519 = header.getOrDefault("X-Amz-Credential")
  valid_21626519 = validateParameter(valid_21626519, JString, required = false,
                                   default = nil)
  if valid_21626519 != nil:
    section.add "X-Amz-Credential", valid_21626519
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626520: Call_GetCreateEventSubscription_21626500;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates an Amazon Redshift event notification subscription. This action requires an ARN (Amazon Resource Name) of an Amazon SNS topic created by either the Amazon Redshift console, the Amazon SNS console, or the Amazon SNS API. To obtain an ARN with Amazon SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the source type, and lists of Amazon Redshift source IDs, event categories, and event severities. Notifications will be sent for all events you want that match those criteria. For example, you can specify source type = cluster, source ID = my-cluster-1 and mycluster2, event categories = Availability, Backup, and severity = ERROR. The subscription will only send notifications for those ERROR events in the Availability and Backup categories for the specified clusters.</p> <p>If you specify both the source type and source IDs, such as source type = cluster and source identifier = my-cluster-1, notifications will be sent for all the cluster events for my-cluster-1. If you specify a source type but do not specify a source identifier, you will receive notice of the events for the objects of that type in your AWS account. If you do not specify either the SourceType nor the SourceIdentifier, you will be notified of events generated from all Amazon Redshift sources belonging to your AWS account. You must specify a source type if you specify a source ID.</p>
  ## 
  let valid = call_21626520.validator(path, query, header, formData, body, _)
  let scheme = call_21626520.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626520.makeUrl(scheme.get, call_21626520.host, call_21626520.base,
                               call_21626520.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626520, uri, valid, _)

proc call*(call_21626521: Call_GetCreateEventSubscription_21626500;
          SnsTopicArn: string; SubscriptionName: string; SourceType: string = "";
          SourceIds: JsonNode = nil; Enabled: bool = false; Tags: JsonNode = nil;
          Action: string = "CreateEventSubscription";
          EventCategories: JsonNode = nil; Severity: string = "";
          Version: string = "2012-12-01"): Recallable =
  ## getCreateEventSubscription
  ## <p>Creates an Amazon Redshift event notification subscription. This action requires an ARN (Amazon Resource Name) of an Amazon SNS topic created by either the Amazon Redshift console, the Amazon SNS console, or the Amazon SNS API. To obtain an ARN with Amazon SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the source type, and lists of Amazon Redshift source IDs, event categories, and event severities. Notifications will be sent for all events you want that match those criteria. For example, you can specify source type = cluster, source ID = my-cluster-1 and mycluster2, event categories = Availability, Backup, and severity = ERROR. The subscription will only send notifications for those ERROR events in the Availability and Backup categories for the specified clusters.</p> <p>If you specify both the source type and source IDs, such as source type = cluster and source identifier = my-cluster-1, notifications will be sent for all the cluster events for my-cluster-1. If you specify a source type but do not specify a source identifier, you will receive notice of the events for the objects of that type in your AWS account. If you do not specify either the SourceType nor the SourceIdentifier, you will be notified of events generated from all Amazon Redshift sources belonging to your AWS account. You must specify a source type if you specify a source ID.</p>
  ##   SourceType: string
  ##             : <p>The type of source that will be generating the events. For example, if you want to be notified of events generated by a cluster, you would set this parameter to cluster. If this value is not specified, events are returned for all Amazon Redshift objects in your AWS account. You must specify a source type in order to specify source IDs.</p> <p>Valid values: cluster, cluster-parameter-group, cluster-security-group, cluster-snapshot, and scheduled-action.</p>
  ##   SourceIds: JArray
  ##            : <p>A list of one or more identifiers of Amazon Redshift source objects. All of the objects must be of the same type as was specified in the source type parameter. The event subscription will return only events generated by the specified objects. If not specified, then events are returned for all objects within the source type specified.</p> <p>Example: my-cluster-1, my-cluster-2</p> <p>Example: my-snapshot-20131010</p>
  ##   Enabled: bool
  ##          : A boolean value; set to <code>true</code> to activate the subscription, and set to <code>false</code> to create the subscription but not activate it. 
  ##   Tags: JArray
  ##       : A list of tag instances.
  ##   Action: string (required)
  ##   SnsTopicArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the Amazon SNS topic used to transmit the event notifications. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   EventCategories: JArray
  ##                  : <p>Specifies the Amazon Redshift event categories to be published by the event notification subscription.</p> <p>Values: configuration, management, monitoring, security</p>
  ##   SubscriptionName: string (required)
  ##                   : <p>The name of the event subscription to be created.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank.</p> </li> <li> <p>Must contain from 1 to 255 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Severity: string
  ##           : <p>Specifies the Amazon Redshift event severity to be published by the event notification subscription.</p> <p>Values: ERROR, INFO</p>
  ##   Version: string (required)
  var query_21626522 = newJObject()
  add(query_21626522, "SourceType", newJString(SourceType))
  if SourceIds != nil:
    query_21626522.add "SourceIds", SourceIds
  add(query_21626522, "Enabled", newJBool(Enabled))
  if Tags != nil:
    query_21626522.add "Tags", Tags
  add(query_21626522, "Action", newJString(Action))
  add(query_21626522, "SnsTopicArn", newJString(SnsTopicArn))
  if EventCategories != nil:
    query_21626522.add "EventCategories", EventCategories
  add(query_21626522, "SubscriptionName", newJString(SubscriptionName))
  add(query_21626522, "Severity", newJString(Severity))
  add(query_21626522, "Version", newJString(Version))
  result = call_21626521.call(nil, query_21626522, nil, nil, nil)

var getCreateEventSubscription* = Call_GetCreateEventSubscription_21626500(
    name: "getCreateEventSubscription", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=CreateEventSubscription",
    validator: validate_GetCreateEventSubscription_21626501, base: "/",
    makeUrl: url_GetCreateEventSubscription_21626502,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateHsmClientCertificate_21626564 = ref object of OpenApiRestCall_21625418
proc url_PostCreateHsmClientCertificate_21626566(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateHsmClientCertificate_21626565(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Creates an HSM client certificate that an Amazon Redshift cluster will use to connect to the client's HSM in order to store and retrieve the keys used to encrypt the cluster databases.</p> <p>The command returns a public key, which you must store in the HSM. In addition to creating the HSM certificate, you must create an Amazon Redshift HSM configuration that provides a cluster the information needed to store and use encryption keys in the HSM. For more information, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-HSM.html">Hardware Security Modules</a> in the Amazon Redshift Cluster Management Guide.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626567 = query.getOrDefault("Action")
  valid_21626567 = validateParameter(valid_21626567, JString, required = true, default = newJString(
      "CreateHsmClientCertificate"))
  if valid_21626567 != nil:
    section.add "Action", valid_21626567
  var valid_21626568 = query.getOrDefault("Version")
  valid_21626568 = validateParameter(valid_21626568, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626568 != nil:
    section.add "Version", valid_21626568
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626569 = header.getOrDefault("X-Amz-Date")
  valid_21626569 = validateParameter(valid_21626569, JString, required = false,
                                   default = nil)
  if valid_21626569 != nil:
    section.add "X-Amz-Date", valid_21626569
  var valid_21626570 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626570 = validateParameter(valid_21626570, JString, required = false,
                                   default = nil)
  if valid_21626570 != nil:
    section.add "X-Amz-Security-Token", valid_21626570
  var valid_21626571 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626571 = validateParameter(valid_21626571, JString, required = false,
                                   default = nil)
  if valid_21626571 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626571
  var valid_21626572 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626572 = validateParameter(valid_21626572, JString, required = false,
                                   default = nil)
  if valid_21626572 != nil:
    section.add "X-Amz-Algorithm", valid_21626572
  var valid_21626573 = header.getOrDefault("X-Amz-Signature")
  valid_21626573 = validateParameter(valid_21626573, JString, required = false,
                                   default = nil)
  if valid_21626573 != nil:
    section.add "X-Amz-Signature", valid_21626573
  var valid_21626574 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626574 = validateParameter(valid_21626574, JString, required = false,
                                   default = nil)
  if valid_21626574 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626574
  var valid_21626575 = header.getOrDefault("X-Amz-Credential")
  valid_21626575 = validateParameter(valid_21626575, JString, required = false,
                                   default = nil)
  if valid_21626575 != nil:
    section.add "X-Amz-Credential", valid_21626575
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray
  ##       : A list of tag instances.
  ##   HsmClientCertificateIdentifier: JString (required)
  ##                                 : The identifier to be assigned to the new HSM client certificate that the cluster will use to connect to the HSM to use the database encryption keys.
  section = newJObject()
  var valid_21626576 = formData.getOrDefault("Tags")
  valid_21626576 = validateParameter(valid_21626576, JArray, required = false,
                                   default = nil)
  if valid_21626576 != nil:
    section.add "Tags", valid_21626576
  assert formData != nil, "formData argument is necessary due to required `HsmClientCertificateIdentifier` field"
  var valid_21626577 = formData.getOrDefault("HsmClientCertificateIdentifier")
  valid_21626577 = validateParameter(valid_21626577, JString, required = true,
                                   default = nil)
  if valid_21626577 != nil:
    section.add "HsmClientCertificateIdentifier", valid_21626577
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626578: Call_PostCreateHsmClientCertificate_21626564;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates an HSM client certificate that an Amazon Redshift cluster will use to connect to the client's HSM in order to store and retrieve the keys used to encrypt the cluster databases.</p> <p>The command returns a public key, which you must store in the HSM. In addition to creating the HSM certificate, you must create an Amazon Redshift HSM configuration that provides a cluster the information needed to store and use encryption keys in the HSM. For more information, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-HSM.html">Hardware Security Modules</a> in the Amazon Redshift Cluster Management Guide.</p>
  ## 
  let valid = call_21626578.validator(path, query, header, formData, body, _)
  let scheme = call_21626578.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626578.makeUrl(scheme.get, call_21626578.host, call_21626578.base,
                               call_21626578.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626578, uri, valid, _)

proc call*(call_21626579: Call_PostCreateHsmClientCertificate_21626564;
          HsmClientCertificateIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CreateHsmClientCertificate";
          Version: string = "2012-12-01"): Recallable =
  ## postCreateHsmClientCertificate
  ## <p>Creates an HSM client certificate that an Amazon Redshift cluster will use to connect to the client's HSM in order to store and retrieve the keys used to encrypt the cluster databases.</p> <p>The command returns a public key, which you must store in the HSM. In addition to creating the HSM certificate, you must create an Amazon Redshift HSM configuration that provides a cluster the information needed to store and use encryption keys in the HSM. For more information, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-HSM.html">Hardware Security Modules</a> in the Amazon Redshift Cluster Management Guide.</p>
  ##   Tags: JArray
  ##       : A list of tag instances.
  ##   Action: string (required)
  ##   HsmClientCertificateIdentifier: string (required)
  ##                                 : The identifier to be assigned to the new HSM client certificate that the cluster will use to connect to the HSM to use the database encryption keys.
  ##   Version: string (required)
  var query_21626580 = newJObject()
  var formData_21626581 = newJObject()
  if Tags != nil:
    formData_21626581.add "Tags", Tags
  add(query_21626580, "Action", newJString(Action))
  add(formData_21626581, "HsmClientCertificateIdentifier",
      newJString(HsmClientCertificateIdentifier))
  add(query_21626580, "Version", newJString(Version))
  result = call_21626579.call(nil, query_21626580, nil, formData_21626581, nil)

var postCreateHsmClientCertificate* = Call_PostCreateHsmClientCertificate_21626564(
    name: "postCreateHsmClientCertificate", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=CreateHsmClientCertificate",
    validator: validate_PostCreateHsmClientCertificate_21626565, base: "/",
    makeUrl: url_PostCreateHsmClientCertificate_21626566,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateHsmClientCertificate_21626547 = ref object of OpenApiRestCall_21625418
proc url_GetCreateHsmClientCertificate_21626549(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateHsmClientCertificate_21626548(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Creates an HSM client certificate that an Amazon Redshift cluster will use to connect to the client's HSM in order to store and retrieve the keys used to encrypt the cluster databases.</p> <p>The command returns a public key, which you must store in the HSM. In addition to creating the HSM certificate, you must create an Amazon Redshift HSM configuration that provides a cluster the information needed to store and use encryption keys in the HSM. For more information, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-HSM.html">Hardware Security Modules</a> in the Amazon Redshift Cluster Management Guide.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   HsmClientCertificateIdentifier: JString (required)
  ##                                 : The identifier to be assigned to the new HSM client certificate that the cluster will use to connect to the HSM to use the database encryption keys.
  ##   Tags: JArray
  ##       : A list of tag instances.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `HsmClientCertificateIdentifier` field"
  var valid_21626550 = query.getOrDefault("HsmClientCertificateIdentifier")
  valid_21626550 = validateParameter(valid_21626550, JString, required = true,
                                   default = nil)
  if valid_21626550 != nil:
    section.add "HsmClientCertificateIdentifier", valid_21626550
  var valid_21626551 = query.getOrDefault("Tags")
  valid_21626551 = validateParameter(valid_21626551, JArray, required = false,
                                   default = nil)
  if valid_21626551 != nil:
    section.add "Tags", valid_21626551
  var valid_21626552 = query.getOrDefault("Action")
  valid_21626552 = validateParameter(valid_21626552, JString, required = true, default = newJString(
      "CreateHsmClientCertificate"))
  if valid_21626552 != nil:
    section.add "Action", valid_21626552
  var valid_21626553 = query.getOrDefault("Version")
  valid_21626553 = validateParameter(valid_21626553, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626553 != nil:
    section.add "Version", valid_21626553
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626554 = header.getOrDefault("X-Amz-Date")
  valid_21626554 = validateParameter(valid_21626554, JString, required = false,
                                   default = nil)
  if valid_21626554 != nil:
    section.add "X-Amz-Date", valid_21626554
  var valid_21626555 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626555 = validateParameter(valid_21626555, JString, required = false,
                                   default = nil)
  if valid_21626555 != nil:
    section.add "X-Amz-Security-Token", valid_21626555
  var valid_21626556 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626556 = validateParameter(valid_21626556, JString, required = false,
                                   default = nil)
  if valid_21626556 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626556
  var valid_21626557 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626557 = validateParameter(valid_21626557, JString, required = false,
                                   default = nil)
  if valid_21626557 != nil:
    section.add "X-Amz-Algorithm", valid_21626557
  var valid_21626558 = header.getOrDefault("X-Amz-Signature")
  valid_21626558 = validateParameter(valid_21626558, JString, required = false,
                                   default = nil)
  if valid_21626558 != nil:
    section.add "X-Amz-Signature", valid_21626558
  var valid_21626559 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626559 = validateParameter(valid_21626559, JString, required = false,
                                   default = nil)
  if valid_21626559 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626559
  var valid_21626560 = header.getOrDefault("X-Amz-Credential")
  valid_21626560 = validateParameter(valid_21626560, JString, required = false,
                                   default = nil)
  if valid_21626560 != nil:
    section.add "X-Amz-Credential", valid_21626560
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626561: Call_GetCreateHsmClientCertificate_21626547;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates an HSM client certificate that an Amazon Redshift cluster will use to connect to the client's HSM in order to store and retrieve the keys used to encrypt the cluster databases.</p> <p>The command returns a public key, which you must store in the HSM. In addition to creating the HSM certificate, you must create an Amazon Redshift HSM configuration that provides a cluster the information needed to store and use encryption keys in the HSM. For more information, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-HSM.html">Hardware Security Modules</a> in the Amazon Redshift Cluster Management Guide.</p>
  ## 
  let valid = call_21626561.validator(path, query, header, formData, body, _)
  let scheme = call_21626561.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626561.makeUrl(scheme.get, call_21626561.host, call_21626561.base,
                               call_21626561.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626561, uri, valid, _)

proc call*(call_21626562: Call_GetCreateHsmClientCertificate_21626547;
          HsmClientCertificateIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CreateHsmClientCertificate";
          Version: string = "2012-12-01"): Recallable =
  ## getCreateHsmClientCertificate
  ## <p>Creates an HSM client certificate that an Amazon Redshift cluster will use to connect to the client's HSM in order to store and retrieve the keys used to encrypt the cluster databases.</p> <p>The command returns a public key, which you must store in the HSM. In addition to creating the HSM certificate, you must create an Amazon Redshift HSM configuration that provides a cluster the information needed to store and use encryption keys in the HSM. For more information, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-HSM.html">Hardware Security Modules</a> in the Amazon Redshift Cluster Management Guide.</p>
  ##   HsmClientCertificateIdentifier: string (required)
  ##                                 : The identifier to be assigned to the new HSM client certificate that the cluster will use to connect to the HSM to use the database encryption keys.
  ##   Tags: JArray
  ##       : A list of tag instances.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626563 = newJObject()
  add(query_21626563, "HsmClientCertificateIdentifier",
      newJString(HsmClientCertificateIdentifier))
  if Tags != nil:
    query_21626563.add "Tags", Tags
  add(query_21626563, "Action", newJString(Action))
  add(query_21626563, "Version", newJString(Version))
  result = call_21626562.call(nil, query_21626563, nil, nil, nil)

var getCreateHsmClientCertificate* = Call_GetCreateHsmClientCertificate_21626547(
    name: "getCreateHsmClientCertificate", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=CreateHsmClientCertificate",
    validator: validate_GetCreateHsmClientCertificate_21626548, base: "/",
    makeUrl: url_GetCreateHsmClientCertificate_21626549,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateHsmConfiguration_21626604 = ref object of OpenApiRestCall_21625418
proc url_PostCreateHsmConfiguration_21626606(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateHsmConfiguration_21626605(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates an HSM configuration that contains the information required by an Amazon Redshift cluster to store and use database encryption keys in a Hardware Security Module (HSM). After creating the HSM configuration, you can specify it as a parameter when creating a cluster. The cluster will then store its encryption keys in the HSM.</p> <p>In addition to creating an HSM configuration, you must also create an HSM client certificate. For more information, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-HSM.html">Hardware Security Modules</a> in the Amazon Redshift Cluster Management Guide.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626607 = query.getOrDefault("Action")
  valid_21626607 = validateParameter(valid_21626607, JString, required = true, default = newJString(
      "CreateHsmConfiguration"))
  if valid_21626607 != nil:
    section.add "Action", valid_21626607
  var valid_21626608 = query.getOrDefault("Version")
  valid_21626608 = validateParameter(valid_21626608, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626608 != nil:
    section.add "Version", valid_21626608
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626609 = header.getOrDefault("X-Amz-Date")
  valid_21626609 = validateParameter(valid_21626609, JString, required = false,
                                   default = nil)
  if valid_21626609 != nil:
    section.add "X-Amz-Date", valid_21626609
  var valid_21626610 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626610 = validateParameter(valid_21626610, JString, required = false,
                                   default = nil)
  if valid_21626610 != nil:
    section.add "X-Amz-Security-Token", valid_21626610
  var valid_21626611 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626611 = validateParameter(valid_21626611, JString, required = false,
                                   default = nil)
  if valid_21626611 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626611
  var valid_21626612 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626612 = validateParameter(valid_21626612, JString, required = false,
                                   default = nil)
  if valid_21626612 != nil:
    section.add "X-Amz-Algorithm", valid_21626612
  var valid_21626613 = header.getOrDefault("X-Amz-Signature")
  valid_21626613 = validateParameter(valid_21626613, JString, required = false,
                                   default = nil)
  if valid_21626613 != nil:
    section.add "X-Amz-Signature", valid_21626613
  var valid_21626614 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626614 = validateParameter(valid_21626614, JString, required = false,
                                   default = nil)
  if valid_21626614 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626614
  var valid_21626615 = header.getOrDefault("X-Amz-Credential")
  valid_21626615 = validateParameter(valid_21626615, JString, required = false,
                                   default = nil)
  if valid_21626615 != nil:
    section.add "X-Amz-Credential", valid_21626615
  result.add "header", section
  ## parameters in `formData` object:
  ##   HsmIpAddress: JString (required)
  ##               : The IP address that the Amazon Redshift cluster must use to access the HSM.
  ##   HsmPartitionName: JString (required)
  ##                   : The name of the partition in the HSM where the Amazon Redshift clusters will store their database encryption keys.
  ##   Tags: JArray
  ##       : A list of tag instances.
  ##   HsmPartitionPassword: JString (required)
  ##                       : The password required to access the HSM partition.
  ##   HsmConfigurationIdentifier: JString (required)
  ##                             : The identifier to be assigned to the new Amazon Redshift HSM configuration.
  ##   HsmServerPublicCertificate: JString (required)
  ##                             : The HSMs public certificate file. When using Cloud HSM, the file name is server.pem.
  ##   Description: JString (required)
  ##              : A text description of the HSM configuration to be created.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `HsmIpAddress` field"
  var valid_21626616 = formData.getOrDefault("HsmIpAddress")
  valid_21626616 = validateParameter(valid_21626616, JString, required = true,
                                   default = nil)
  if valid_21626616 != nil:
    section.add "HsmIpAddress", valid_21626616
  var valid_21626617 = formData.getOrDefault("HsmPartitionName")
  valid_21626617 = validateParameter(valid_21626617, JString, required = true,
                                   default = nil)
  if valid_21626617 != nil:
    section.add "HsmPartitionName", valid_21626617
  var valid_21626618 = formData.getOrDefault("Tags")
  valid_21626618 = validateParameter(valid_21626618, JArray, required = false,
                                   default = nil)
  if valid_21626618 != nil:
    section.add "Tags", valid_21626618
  var valid_21626619 = formData.getOrDefault("HsmPartitionPassword")
  valid_21626619 = validateParameter(valid_21626619, JString, required = true,
                                   default = nil)
  if valid_21626619 != nil:
    section.add "HsmPartitionPassword", valid_21626619
  var valid_21626620 = formData.getOrDefault("HsmConfigurationIdentifier")
  valid_21626620 = validateParameter(valid_21626620, JString, required = true,
                                   default = nil)
  if valid_21626620 != nil:
    section.add "HsmConfigurationIdentifier", valid_21626620
  var valid_21626621 = formData.getOrDefault("HsmServerPublicCertificate")
  valid_21626621 = validateParameter(valid_21626621, JString, required = true,
                                   default = nil)
  if valid_21626621 != nil:
    section.add "HsmServerPublicCertificate", valid_21626621
  var valid_21626622 = formData.getOrDefault("Description")
  valid_21626622 = validateParameter(valid_21626622, JString, required = true,
                                   default = nil)
  if valid_21626622 != nil:
    section.add "Description", valid_21626622
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626623: Call_PostCreateHsmConfiguration_21626604;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates an HSM configuration that contains the information required by an Amazon Redshift cluster to store and use database encryption keys in a Hardware Security Module (HSM). After creating the HSM configuration, you can specify it as a parameter when creating a cluster. The cluster will then store its encryption keys in the HSM.</p> <p>In addition to creating an HSM configuration, you must also create an HSM client certificate. For more information, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-HSM.html">Hardware Security Modules</a> in the Amazon Redshift Cluster Management Guide.</p>
  ## 
  let valid = call_21626623.validator(path, query, header, formData, body, _)
  let scheme = call_21626623.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626623.makeUrl(scheme.get, call_21626623.host, call_21626623.base,
                               call_21626623.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626623, uri, valid, _)

proc call*(call_21626624: Call_PostCreateHsmConfiguration_21626604;
          HsmIpAddress: string; HsmPartitionName: string;
          HsmPartitionPassword: string; HsmConfigurationIdentifier: string;
          HsmServerPublicCertificate: string; Description: string;
          Tags: JsonNode = nil; Action: string = "CreateHsmConfiguration";
          Version: string = "2012-12-01"): Recallable =
  ## postCreateHsmConfiguration
  ## <p>Creates an HSM configuration that contains the information required by an Amazon Redshift cluster to store and use database encryption keys in a Hardware Security Module (HSM). After creating the HSM configuration, you can specify it as a parameter when creating a cluster. The cluster will then store its encryption keys in the HSM.</p> <p>In addition to creating an HSM configuration, you must also create an HSM client certificate. For more information, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-HSM.html">Hardware Security Modules</a> in the Amazon Redshift Cluster Management Guide.</p>
  ##   HsmIpAddress: string (required)
  ##               : The IP address that the Amazon Redshift cluster must use to access the HSM.
  ##   HsmPartitionName: string (required)
  ##                   : The name of the partition in the HSM where the Amazon Redshift clusters will store their database encryption keys.
  ##   Tags: JArray
  ##       : A list of tag instances.
  ##   HsmPartitionPassword: string (required)
  ##                       : The password required to access the HSM partition.
  ##   HsmConfigurationIdentifier: string (required)
  ##                             : The identifier to be assigned to the new Amazon Redshift HSM configuration.
  ##   Action: string (required)
  ##   HsmServerPublicCertificate: string (required)
  ##                             : The HSMs public certificate file. When using Cloud HSM, the file name is server.pem.
  ##   Version: string (required)
  ##   Description: string (required)
  ##              : A text description of the HSM configuration to be created.
  var query_21626625 = newJObject()
  var formData_21626626 = newJObject()
  add(formData_21626626, "HsmIpAddress", newJString(HsmIpAddress))
  add(formData_21626626, "HsmPartitionName", newJString(HsmPartitionName))
  if Tags != nil:
    formData_21626626.add "Tags", Tags
  add(formData_21626626, "HsmPartitionPassword", newJString(HsmPartitionPassword))
  add(formData_21626626, "HsmConfigurationIdentifier",
      newJString(HsmConfigurationIdentifier))
  add(query_21626625, "Action", newJString(Action))
  add(formData_21626626, "HsmServerPublicCertificate",
      newJString(HsmServerPublicCertificate))
  add(query_21626625, "Version", newJString(Version))
  add(formData_21626626, "Description", newJString(Description))
  result = call_21626624.call(nil, query_21626625, nil, formData_21626626, nil)

var postCreateHsmConfiguration* = Call_PostCreateHsmConfiguration_21626604(
    name: "postCreateHsmConfiguration", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=CreateHsmConfiguration",
    validator: validate_PostCreateHsmConfiguration_21626605, base: "/",
    makeUrl: url_PostCreateHsmConfiguration_21626606,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateHsmConfiguration_21626582 = ref object of OpenApiRestCall_21625418
proc url_GetCreateHsmConfiguration_21626584(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateHsmConfiguration_21626583(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates an HSM configuration that contains the information required by an Amazon Redshift cluster to store and use database encryption keys in a Hardware Security Module (HSM). After creating the HSM configuration, you can specify it as a parameter when creating a cluster. The cluster will then store its encryption keys in the HSM.</p> <p>In addition to creating an HSM configuration, you must also create an HSM client certificate. For more information, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-HSM.html">Hardware Security Modules</a> in the Amazon Redshift Cluster Management Guide.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   HsmPartitionPassword: JString (required)
  ##                       : The password required to access the HSM partition.
  ##   Description: JString (required)
  ##              : A text description of the HSM configuration to be created.
  ##   HsmPartitionName: JString (required)
  ##                   : The name of the partition in the HSM where the Amazon Redshift clusters will store their database encryption keys.
  ##   HsmConfigurationIdentifier: JString (required)
  ##                             : The identifier to be assigned to the new Amazon Redshift HSM configuration.
  ##   Tags: JArray
  ##       : A list of tag instances.
  ##   Action: JString (required)
  ##   HsmServerPublicCertificate: JString (required)
  ##                             : The HSMs public certificate file. When using Cloud HSM, the file name is server.pem.
  ##   HsmIpAddress: JString (required)
  ##               : The IP address that the Amazon Redshift cluster must use to access the HSM.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `HsmPartitionPassword` field"
  var valid_21626585 = query.getOrDefault("HsmPartitionPassword")
  valid_21626585 = validateParameter(valid_21626585, JString, required = true,
                                   default = nil)
  if valid_21626585 != nil:
    section.add "HsmPartitionPassword", valid_21626585
  var valid_21626586 = query.getOrDefault("Description")
  valid_21626586 = validateParameter(valid_21626586, JString, required = true,
                                   default = nil)
  if valid_21626586 != nil:
    section.add "Description", valid_21626586
  var valid_21626587 = query.getOrDefault("HsmPartitionName")
  valid_21626587 = validateParameter(valid_21626587, JString, required = true,
                                   default = nil)
  if valid_21626587 != nil:
    section.add "HsmPartitionName", valid_21626587
  var valid_21626588 = query.getOrDefault("HsmConfigurationIdentifier")
  valid_21626588 = validateParameter(valid_21626588, JString, required = true,
                                   default = nil)
  if valid_21626588 != nil:
    section.add "HsmConfigurationIdentifier", valid_21626588
  var valid_21626589 = query.getOrDefault("Tags")
  valid_21626589 = validateParameter(valid_21626589, JArray, required = false,
                                   default = nil)
  if valid_21626589 != nil:
    section.add "Tags", valid_21626589
  var valid_21626590 = query.getOrDefault("Action")
  valid_21626590 = validateParameter(valid_21626590, JString, required = true, default = newJString(
      "CreateHsmConfiguration"))
  if valid_21626590 != nil:
    section.add "Action", valid_21626590
  var valid_21626591 = query.getOrDefault("HsmServerPublicCertificate")
  valid_21626591 = validateParameter(valid_21626591, JString, required = true,
                                   default = nil)
  if valid_21626591 != nil:
    section.add "HsmServerPublicCertificate", valid_21626591
  var valid_21626592 = query.getOrDefault("HsmIpAddress")
  valid_21626592 = validateParameter(valid_21626592, JString, required = true,
                                   default = nil)
  if valid_21626592 != nil:
    section.add "HsmIpAddress", valid_21626592
  var valid_21626593 = query.getOrDefault("Version")
  valid_21626593 = validateParameter(valid_21626593, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626593 != nil:
    section.add "Version", valid_21626593
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626594 = header.getOrDefault("X-Amz-Date")
  valid_21626594 = validateParameter(valid_21626594, JString, required = false,
                                   default = nil)
  if valid_21626594 != nil:
    section.add "X-Amz-Date", valid_21626594
  var valid_21626595 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626595 = validateParameter(valid_21626595, JString, required = false,
                                   default = nil)
  if valid_21626595 != nil:
    section.add "X-Amz-Security-Token", valid_21626595
  var valid_21626596 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626596 = validateParameter(valid_21626596, JString, required = false,
                                   default = nil)
  if valid_21626596 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626596
  var valid_21626597 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626597 = validateParameter(valid_21626597, JString, required = false,
                                   default = nil)
  if valid_21626597 != nil:
    section.add "X-Amz-Algorithm", valid_21626597
  var valid_21626598 = header.getOrDefault("X-Amz-Signature")
  valid_21626598 = validateParameter(valid_21626598, JString, required = false,
                                   default = nil)
  if valid_21626598 != nil:
    section.add "X-Amz-Signature", valid_21626598
  var valid_21626599 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626599 = validateParameter(valid_21626599, JString, required = false,
                                   default = nil)
  if valid_21626599 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626599
  var valid_21626600 = header.getOrDefault("X-Amz-Credential")
  valid_21626600 = validateParameter(valid_21626600, JString, required = false,
                                   default = nil)
  if valid_21626600 != nil:
    section.add "X-Amz-Credential", valid_21626600
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626601: Call_GetCreateHsmConfiguration_21626582;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates an HSM configuration that contains the information required by an Amazon Redshift cluster to store and use database encryption keys in a Hardware Security Module (HSM). After creating the HSM configuration, you can specify it as a parameter when creating a cluster. The cluster will then store its encryption keys in the HSM.</p> <p>In addition to creating an HSM configuration, you must also create an HSM client certificate. For more information, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-HSM.html">Hardware Security Modules</a> in the Amazon Redshift Cluster Management Guide.</p>
  ## 
  let valid = call_21626601.validator(path, query, header, formData, body, _)
  let scheme = call_21626601.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626601.makeUrl(scheme.get, call_21626601.host, call_21626601.base,
                               call_21626601.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626601, uri, valid, _)

proc call*(call_21626602: Call_GetCreateHsmConfiguration_21626582;
          HsmPartitionPassword: string; Description: string;
          HsmPartitionName: string; HsmConfigurationIdentifier: string;
          HsmServerPublicCertificate: string; HsmIpAddress: string;
          Tags: JsonNode = nil; Action: string = "CreateHsmConfiguration";
          Version: string = "2012-12-01"): Recallable =
  ## getCreateHsmConfiguration
  ## <p>Creates an HSM configuration that contains the information required by an Amazon Redshift cluster to store and use database encryption keys in a Hardware Security Module (HSM). After creating the HSM configuration, you can specify it as a parameter when creating a cluster. The cluster will then store its encryption keys in the HSM.</p> <p>In addition to creating an HSM configuration, you must also create an HSM client certificate. For more information, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-HSM.html">Hardware Security Modules</a> in the Amazon Redshift Cluster Management Guide.</p>
  ##   HsmPartitionPassword: string (required)
  ##                       : The password required to access the HSM partition.
  ##   Description: string (required)
  ##              : A text description of the HSM configuration to be created.
  ##   HsmPartitionName: string (required)
  ##                   : The name of the partition in the HSM where the Amazon Redshift clusters will store their database encryption keys.
  ##   HsmConfigurationIdentifier: string (required)
  ##                             : The identifier to be assigned to the new Amazon Redshift HSM configuration.
  ##   Tags: JArray
  ##       : A list of tag instances.
  ##   Action: string (required)
  ##   HsmServerPublicCertificate: string (required)
  ##                             : The HSMs public certificate file. When using Cloud HSM, the file name is server.pem.
  ##   HsmIpAddress: string (required)
  ##               : The IP address that the Amazon Redshift cluster must use to access the HSM.
  ##   Version: string (required)
  var query_21626603 = newJObject()
  add(query_21626603, "HsmPartitionPassword", newJString(HsmPartitionPassword))
  add(query_21626603, "Description", newJString(Description))
  add(query_21626603, "HsmPartitionName", newJString(HsmPartitionName))
  add(query_21626603, "HsmConfigurationIdentifier",
      newJString(HsmConfigurationIdentifier))
  if Tags != nil:
    query_21626603.add "Tags", Tags
  add(query_21626603, "Action", newJString(Action))
  add(query_21626603, "HsmServerPublicCertificate",
      newJString(HsmServerPublicCertificate))
  add(query_21626603, "HsmIpAddress", newJString(HsmIpAddress))
  add(query_21626603, "Version", newJString(Version))
  result = call_21626602.call(nil, query_21626603, nil, nil, nil)

var getCreateHsmConfiguration* = Call_GetCreateHsmConfiguration_21626582(
    name: "getCreateHsmConfiguration", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=CreateHsmConfiguration",
    validator: validate_GetCreateHsmConfiguration_21626583, base: "/",
    makeUrl: url_GetCreateHsmConfiguration_21626584,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateScheduledAction_21626650 = ref object of OpenApiRestCall_21625418
proc url_PostCreateScheduledAction_21626652(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateScheduledAction_21626651(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a scheduled action. A scheduled action contains a schedule and an Amazon Redshift API action. For example, you can create a schedule of when to run the <code>ResizeCluster</code> API operation. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626653 = query.getOrDefault("Action")
  valid_21626653 = validateParameter(valid_21626653, JString, required = true, default = newJString(
      "CreateScheduledAction"))
  if valid_21626653 != nil:
    section.add "Action", valid_21626653
  var valid_21626654 = query.getOrDefault("Version")
  valid_21626654 = validateParameter(valid_21626654, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626654 != nil:
    section.add "Version", valid_21626654
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626655 = header.getOrDefault("X-Amz-Date")
  valid_21626655 = validateParameter(valid_21626655, JString, required = false,
                                   default = nil)
  if valid_21626655 != nil:
    section.add "X-Amz-Date", valid_21626655
  var valid_21626656 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626656 = validateParameter(valid_21626656, JString, required = false,
                                   default = nil)
  if valid_21626656 != nil:
    section.add "X-Amz-Security-Token", valid_21626656
  var valid_21626657 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626657 = validateParameter(valid_21626657, JString, required = false,
                                   default = nil)
  if valid_21626657 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626657
  var valid_21626658 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626658 = validateParameter(valid_21626658, JString, required = false,
                                   default = nil)
  if valid_21626658 != nil:
    section.add "X-Amz-Algorithm", valid_21626658
  var valid_21626659 = header.getOrDefault("X-Amz-Signature")
  valid_21626659 = validateParameter(valid_21626659, JString, required = false,
                                   default = nil)
  if valid_21626659 != nil:
    section.add "X-Amz-Signature", valid_21626659
  var valid_21626660 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626660 = validateParameter(valid_21626660, JString, required = false,
                                   default = nil)
  if valid_21626660 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626660
  var valid_21626661 = header.getOrDefault("X-Amz-Credential")
  valid_21626661 = validateParameter(valid_21626661, JString, required = false,
                                   default = nil)
  if valid_21626661 != nil:
    section.add "X-Amz-Credential", valid_21626661
  result.add "header", section
  ## parameters in `formData` object:
  ##   Schedule: JString (required)
  ##           : The schedule in <code>at( )</code> or <code>cron( )</code> format. For more information about this parameter, see <a>ScheduledAction</a>.
  ##   ScheduledActionDescription: JString
  ##                             : The description of the scheduled action. 
  ##   TargetAction.ResizeCluster: JString
  ##                             : The action type that specifies an Amazon Redshift API operation that is supported by the Amazon Redshift scheduler. 
  ## An action that runs a <code>ResizeCluster</code> API operation. 
  ##   StartTime: JString
  ##            : The start time in UTC of the scheduled action. Before this time, the scheduled action does not trigger. For more information about this parameter, see <a>ScheduledAction</a>.
  ##   ScheduledActionName: JString (required)
  ##                      : The name of the scheduled action. The name must be unique within an account. For more information about this parameter, see <a>ScheduledAction</a>. 
  ##   Enable: JBool
  ##         : If true, the schedule is enabled. If false, the scheduled action does not trigger. For more information about <code>state</code> of the scheduled action, see <a>ScheduledAction</a>. 
  ##   IamRole: JString (required)
  ##          : The IAM role to assume to run the target action. For more information about this parameter, see <a>ScheduledAction</a>. 
  ##   EndTime: JString
  ##          : The end time in UTC of the scheduled action. After this time, the scheduled action does not trigger. For more information about this parameter, see <a>ScheduledAction</a>. 
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Schedule` field"
  var valid_21626662 = formData.getOrDefault("Schedule")
  valid_21626662 = validateParameter(valid_21626662, JString, required = true,
                                   default = nil)
  if valid_21626662 != nil:
    section.add "Schedule", valid_21626662
  var valid_21626663 = formData.getOrDefault("ScheduledActionDescription")
  valid_21626663 = validateParameter(valid_21626663, JString, required = false,
                                   default = nil)
  if valid_21626663 != nil:
    section.add "ScheduledActionDescription", valid_21626663
  var valid_21626664 = formData.getOrDefault("TargetAction.ResizeCluster")
  valid_21626664 = validateParameter(valid_21626664, JString, required = false,
                                   default = nil)
  if valid_21626664 != nil:
    section.add "TargetAction.ResizeCluster", valid_21626664
  var valid_21626665 = formData.getOrDefault("StartTime")
  valid_21626665 = validateParameter(valid_21626665, JString, required = false,
                                   default = nil)
  if valid_21626665 != nil:
    section.add "StartTime", valid_21626665
  var valid_21626666 = formData.getOrDefault("ScheduledActionName")
  valid_21626666 = validateParameter(valid_21626666, JString, required = true,
                                   default = nil)
  if valid_21626666 != nil:
    section.add "ScheduledActionName", valid_21626666
  var valid_21626667 = formData.getOrDefault("Enable")
  valid_21626667 = validateParameter(valid_21626667, JBool, required = false,
                                   default = nil)
  if valid_21626667 != nil:
    section.add "Enable", valid_21626667
  var valid_21626668 = formData.getOrDefault("IamRole")
  valid_21626668 = validateParameter(valid_21626668, JString, required = true,
                                   default = nil)
  if valid_21626668 != nil:
    section.add "IamRole", valid_21626668
  var valid_21626669 = formData.getOrDefault("EndTime")
  valid_21626669 = validateParameter(valid_21626669, JString, required = false,
                                   default = nil)
  if valid_21626669 != nil:
    section.add "EndTime", valid_21626669
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626670: Call_PostCreateScheduledAction_21626650;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a scheduled action. A scheduled action contains a schedule and an Amazon Redshift API action. For example, you can create a schedule of when to run the <code>ResizeCluster</code> API operation. 
  ## 
  let valid = call_21626670.validator(path, query, header, formData, body, _)
  let scheme = call_21626670.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626670.makeUrl(scheme.get, call_21626670.host, call_21626670.base,
                               call_21626670.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626670, uri, valid, _)

proc call*(call_21626671: Call_PostCreateScheduledAction_21626650;
          Schedule: string; ScheduledActionName: string; IamRole: string;
          ScheduledActionDescription: string = "";
          TargetActionResizeCluster: string = ""; StartTime: string = "";
          Action: string = "CreateScheduledAction"; Enable: bool = false;
          EndTime: string = ""; Version: string = "2012-12-01"): Recallable =
  ## postCreateScheduledAction
  ## Creates a scheduled action. A scheduled action contains a schedule and an Amazon Redshift API action. For example, you can create a schedule of when to run the <code>ResizeCluster</code> API operation. 
  ##   Schedule: string (required)
  ##           : The schedule in <code>at( )</code> or <code>cron( )</code> format. For more information about this parameter, see <a>ScheduledAction</a>.
  ##   ScheduledActionDescription: string
  ##                             : The description of the scheduled action. 
  ##   TargetActionResizeCluster: string
  ##                            : The action type that specifies an Amazon Redshift API operation that is supported by the Amazon Redshift scheduler. 
  ## An action that runs a <code>ResizeCluster</code> API operation. 
  ##   StartTime: string
  ##            : The start time in UTC of the scheduled action. Before this time, the scheduled action does not trigger. For more information about this parameter, see <a>ScheduledAction</a>.
  ##   Action: string (required)
  ##   ScheduledActionName: string (required)
  ##                      : The name of the scheduled action. The name must be unique within an account. For more information about this parameter, see <a>ScheduledAction</a>. 
  ##   Enable: bool
  ##         : If true, the schedule is enabled. If false, the scheduled action does not trigger. For more information about <code>state</code> of the scheduled action, see <a>ScheduledAction</a>. 
  ##   IamRole: string (required)
  ##          : The IAM role to assume to run the target action. For more information about this parameter, see <a>ScheduledAction</a>. 
  ##   EndTime: string
  ##          : The end time in UTC of the scheduled action. After this time, the scheduled action does not trigger. For more information about this parameter, see <a>ScheduledAction</a>. 
  ##   Version: string (required)
  var query_21626672 = newJObject()
  var formData_21626673 = newJObject()
  add(formData_21626673, "Schedule", newJString(Schedule))
  add(formData_21626673, "ScheduledActionDescription",
      newJString(ScheduledActionDescription))
  add(formData_21626673, "TargetAction.ResizeCluster",
      newJString(TargetActionResizeCluster))
  add(formData_21626673, "StartTime", newJString(StartTime))
  add(query_21626672, "Action", newJString(Action))
  add(formData_21626673, "ScheduledActionName", newJString(ScheduledActionName))
  add(formData_21626673, "Enable", newJBool(Enable))
  add(formData_21626673, "IamRole", newJString(IamRole))
  add(formData_21626673, "EndTime", newJString(EndTime))
  add(query_21626672, "Version", newJString(Version))
  result = call_21626671.call(nil, query_21626672, nil, formData_21626673, nil)

var postCreateScheduledAction* = Call_PostCreateScheduledAction_21626650(
    name: "postCreateScheduledAction", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=CreateScheduledAction",
    validator: validate_PostCreateScheduledAction_21626651, base: "/",
    makeUrl: url_PostCreateScheduledAction_21626652,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateScheduledAction_21626627 = ref object of OpenApiRestCall_21625418
proc url_GetCreateScheduledAction_21626629(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateScheduledAction_21626628(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a scheduled action. A scheduled action contains a schedule and an Amazon Redshift API action. For example, you can create a schedule of when to run the <code>ResizeCluster</code> API operation. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Schedule: JString (required)
  ##           : The schedule in <code>at( )</code> or <code>cron( )</code> format. For more information about this parameter, see <a>ScheduledAction</a>.
  ##   ScheduledActionName: JString (required)
  ##                      : The name of the scheduled action. The name must be unique within an account. For more information about this parameter, see <a>ScheduledAction</a>. 
  ##   StartTime: JString
  ##            : The start time in UTC of the scheduled action. Before this time, the scheduled action does not trigger. For more information about this parameter, see <a>ScheduledAction</a>.
  ##   IamRole: JString (required)
  ##          : The IAM role to assume to run the target action. For more information about this parameter, see <a>ScheduledAction</a>. 
  ##   Enable: JBool
  ##         : If true, the schedule is enabled. If false, the scheduled action does not trigger. For more information about <code>state</code> of the scheduled action, see <a>ScheduledAction</a>. 
  ##   Action: JString (required)
  ##   EndTime: JString
  ##          : The end time in UTC of the scheduled action. After this time, the scheduled action does not trigger. For more information about this parameter, see <a>ScheduledAction</a>. 
  ##   Version: JString (required)
  ##   ScheduledActionDescription: JString
  ##                             : The description of the scheduled action. 
  ##   TargetAction.ResizeCluster: JString
  ##                             : The action type that specifies an Amazon Redshift API operation that is supported by the Amazon Redshift scheduler. 
  ## An action that runs a <code>ResizeCluster</code> API operation. 
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Schedule` field"
  var valid_21626630 = query.getOrDefault("Schedule")
  valid_21626630 = validateParameter(valid_21626630, JString, required = true,
                                   default = nil)
  if valid_21626630 != nil:
    section.add "Schedule", valid_21626630
  var valid_21626631 = query.getOrDefault("ScheduledActionName")
  valid_21626631 = validateParameter(valid_21626631, JString, required = true,
                                   default = nil)
  if valid_21626631 != nil:
    section.add "ScheduledActionName", valid_21626631
  var valid_21626632 = query.getOrDefault("StartTime")
  valid_21626632 = validateParameter(valid_21626632, JString, required = false,
                                   default = nil)
  if valid_21626632 != nil:
    section.add "StartTime", valid_21626632
  var valid_21626633 = query.getOrDefault("IamRole")
  valid_21626633 = validateParameter(valid_21626633, JString, required = true,
                                   default = nil)
  if valid_21626633 != nil:
    section.add "IamRole", valid_21626633
  var valid_21626634 = query.getOrDefault("Enable")
  valid_21626634 = validateParameter(valid_21626634, JBool, required = false,
                                   default = nil)
  if valid_21626634 != nil:
    section.add "Enable", valid_21626634
  var valid_21626635 = query.getOrDefault("Action")
  valid_21626635 = validateParameter(valid_21626635, JString, required = true, default = newJString(
      "CreateScheduledAction"))
  if valid_21626635 != nil:
    section.add "Action", valid_21626635
  var valid_21626636 = query.getOrDefault("EndTime")
  valid_21626636 = validateParameter(valid_21626636, JString, required = false,
                                   default = nil)
  if valid_21626636 != nil:
    section.add "EndTime", valid_21626636
  var valid_21626637 = query.getOrDefault("Version")
  valid_21626637 = validateParameter(valid_21626637, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626637 != nil:
    section.add "Version", valid_21626637
  var valid_21626638 = query.getOrDefault("ScheduledActionDescription")
  valid_21626638 = validateParameter(valid_21626638, JString, required = false,
                                   default = nil)
  if valid_21626638 != nil:
    section.add "ScheduledActionDescription", valid_21626638
  var valid_21626639 = query.getOrDefault("TargetAction.ResizeCluster")
  valid_21626639 = validateParameter(valid_21626639, JString, required = false,
                                   default = nil)
  if valid_21626639 != nil:
    section.add "TargetAction.ResizeCluster", valid_21626639
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626640 = header.getOrDefault("X-Amz-Date")
  valid_21626640 = validateParameter(valid_21626640, JString, required = false,
                                   default = nil)
  if valid_21626640 != nil:
    section.add "X-Amz-Date", valid_21626640
  var valid_21626641 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626641 = validateParameter(valid_21626641, JString, required = false,
                                   default = nil)
  if valid_21626641 != nil:
    section.add "X-Amz-Security-Token", valid_21626641
  var valid_21626642 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626642 = validateParameter(valid_21626642, JString, required = false,
                                   default = nil)
  if valid_21626642 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626642
  var valid_21626643 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626643 = validateParameter(valid_21626643, JString, required = false,
                                   default = nil)
  if valid_21626643 != nil:
    section.add "X-Amz-Algorithm", valid_21626643
  var valid_21626644 = header.getOrDefault("X-Amz-Signature")
  valid_21626644 = validateParameter(valid_21626644, JString, required = false,
                                   default = nil)
  if valid_21626644 != nil:
    section.add "X-Amz-Signature", valid_21626644
  var valid_21626645 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626645 = validateParameter(valid_21626645, JString, required = false,
                                   default = nil)
  if valid_21626645 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626645
  var valid_21626646 = header.getOrDefault("X-Amz-Credential")
  valid_21626646 = validateParameter(valid_21626646, JString, required = false,
                                   default = nil)
  if valid_21626646 != nil:
    section.add "X-Amz-Credential", valid_21626646
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626647: Call_GetCreateScheduledAction_21626627;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a scheduled action. A scheduled action contains a schedule and an Amazon Redshift API action. For example, you can create a schedule of when to run the <code>ResizeCluster</code> API operation. 
  ## 
  let valid = call_21626647.validator(path, query, header, formData, body, _)
  let scheme = call_21626647.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626647.makeUrl(scheme.get, call_21626647.host, call_21626647.base,
                               call_21626647.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626647, uri, valid, _)

proc call*(call_21626648: Call_GetCreateScheduledAction_21626627; Schedule: string;
          ScheduledActionName: string; IamRole: string; StartTime: string = "";
          Enable: bool = false; Action: string = "CreateScheduledAction";
          EndTime: string = ""; Version: string = "2012-12-01";
          ScheduledActionDescription: string = "";
          TargetActionResizeCluster: string = ""): Recallable =
  ## getCreateScheduledAction
  ## Creates a scheduled action. A scheduled action contains a schedule and an Amazon Redshift API action. For example, you can create a schedule of when to run the <code>ResizeCluster</code> API operation. 
  ##   Schedule: string (required)
  ##           : The schedule in <code>at( )</code> or <code>cron( )</code> format. For more information about this parameter, see <a>ScheduledAction</a>.
  ##   ScheduledActionName: string (required)
  ##                      : The name of the scheduled action. The name must be unique within an account. For more information about this parameter, see <a>ScheduledAction</a>. 
  ##   StartTime: string
  ##            : The start time in UTC of the scheduled action. Before this time, the scheduled action does not trigger. For more information about this parameter, see <a>ScheduledAction</a>.
  ##   IamRole: string (required)
  ##          : The IAM role to assume to run the target action. For more information about this parameter, see <a>ScheduledAction</a>. 
  ##   Enable: bool
  ##         : If true, the schedule is enabled. If false, the scheduled action does not trigger. For more information about <code>state</code> of the scheduled action, see <a>ScheduledAction</a>. 
  ##   Action: string (required)
  ##   EndTime: string
  ##          : The end time in UTC of the scheduled action. After this time, the scheduled action does not trigger. For more information about this parameter, see <a>ScheduledAction</a>. 
  ##   Version: string (required)
  ##   ScheduledActionDescription: string
  ##                             : The description of the scheduled action. 
  ##   TargetActionResizeCluster: string
  ##                            : The action type that specifies an Amazon Redshift API operation that is supported by the Amazon Redshift scheduler. 
  ## An action that runs a <code>ResizeCluster</code> API operation. 
  var query_21626649 = newJObject()
  add(query_21626649, "Schedule", newJString(Schedule))
  add(query_21626649, "ScheduledActionName", newJString(ScheduledActionName))
  add(query_21626649, "StartTime", newJString(StartTime))
  add(query_21626649, "IamRole", newJString(IamRole))
  add(query_21626649, "Enable", newJBool(Enable))
  add(query_21626649, "Action", newJString(Action))
  add(query_21626649, "EndTime", newJString(EndTime))
  add(query_21626649, "Version", newJString(Version))
  add(query_21626649, "ScheduledActionDescription",
      newJString(ScheduledActionDescription))
  add(query_21626649, "TargetAction.ResizeCluster",
      newJString(TargetActionResizeCluster))
  result = call_21626648.call(nil, query_21626649, nil, nil, nil)

var getCreateScheduledAction* = Call_GetCreateScheduledAction_21626627(
    name: "getCreateScheduledAction", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=CreateScheduledAction",
    validator: validate_GetCreateScheduledAction_21626628, base: "/",
    makeUrl: url_GetCreateScheduledAction_21626629,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateSnapshotCopyGrant_21626692 = ref object of OpenApiRestCall_21625418
proc url_PostCreateSnapshotCopyGrant_21626694(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateSnapshotCopyGrant_21626693(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a snapshot copy grant that permits Amazon Redshift to use a customer master key (CMK) from AWS Key Management Service (AWS KMS) to encrypt copied snapshots in a destination region.</p> <p> For more information about managing snapshot copy grants, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-db-encryption.html">Amazon Redshift Database Encryption</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626695 = query.getOrDefault("Action")
  valid_21626695 = validateParameter(valid_21626695, JString, required = true, default = newJString(
      "CreateSnapshotCopyGrant"))
  if valid_21626695 != nil:
    section.add "Action", valid_21626695
  var valid_21626696 = query.getOrDefault("Version")
  valid_21626696 = validateParameter(valid_21626696, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626696 != nil:
    section.add "Version", valid_21626696
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626697 = header.getOrDefault("X-Amz-Date")
  valid_21626697 = validateParameter(valid_21626697, JString, required = false,
                                   default = nil)
  if valid_21626697 != nil:
    section.add "X-Amz-Date", valid_21626697
  var valid_21626698 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626698 = validateParameter(valid_21626698, JString, required = false,
                                   default = nil)
  if valid_21626698 != nil:
    section.add "X-Amz-Security-Token", valid_21626698
  var valid_21626699 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626699 = validateParameter(valid_21626699, JString, required = false,
                                   default = nil)
  if valid_21626699 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626699
  var valid_21626700 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626700 = validateParameter(valid_21626700, JString, required = false,
                                   default = nil)
  if valid_21626700 != nil:
    section.add "X-Amz-Algorithm", valid_21626700
  var valid_21626701 = header.getOrDefault("X-Amz-Signature")
  valid_21626701 = validateParameter(valid_21626701, JString, required = false,
                                   default = nil)
  if valid_21626701 != nil:
    section.add "X-Amz-Signature", valid_21626701
  var valid_21626702 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626702 = validateParameter(valid_21626702, JString, required = false,
                                   default = nil)
  if valid_21626702 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626702
  var valid_21626703 = header.getOrDefault("X-Amz-Credential")
  valid_21626703 = validateParameter(valid_21626703, JString, required = false,
                                   default = nil)
  if valid_21626703 != nil:
    section.add "X-Amz-Credential", valid_21626703
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray
  ##       : A list of tag instances.
  ##   SnapshotCopyGrantName: JString (required)
  ##                        : <p>The name of the snapshot copy grant. This name must be unique in the region for the AWS account.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>Alphabetic characters must be lowercase.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Must be unique for all clusters within an AWS account.</p> </li> </ul>
  ##   KmsKeyId: JString
  ##           : The unique identifier of the customer master key (CMK) to which to grant Amazon Redshift permission. If no key is specified, the default key is used.
  section = newJObject()
  var valid_21626704 = formData.getOrDefault("Tags")
  valid_21626704 = validateParameter(valid_21626704, JArray, required = false,
                                   default = nil)
  if valid_21626704 != nil:
    section.add "Tags", valid_21626704
  assert formData != nil, "formData argument is necessary due to required `SnapshotCopyGrantName` field"
  var valid_21626705 = formData.getOrDefault("SnapshotCopyGrantName")
  valid_21626705 = validateParameter(valid_21626705, JString, required = true,
                                   default = nil)
  if valid_21626705 != nil:
    section.add "SnapshotCopyGrantName", valid_21626705
  var valid_21626706 = formData.getOrDefault("KmsKeyId")
  valid_21626706 = validateParameter(valid_21626706, JString, required = false,
                                   default = nil)
  if valid_21626706 != nil:
    section.add "KmsKeyId", valid_21626706
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626707: Call_PostCreateSnapshotCopyGrant_21626692;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a snapshot copy grant that permits Amazon Redshift to use a customer master key (CMK) from AWS Key Management Service (AWS KMS) to encrypt copied snapshots in a destination region.</p> <p> For more information about managing snapshot copy grants, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-db-encryption.html">Amazon Redshift Database Encryption</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p>
  ## 
  let valid = call_21626707.validator(path, query, header, formData, body, _)
  let scheme = call_21626707.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626707.makeUrl(scheme.get, call_21626707.host, call_21626707.base,
                               call_21626707.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626707, uri, valid, _)

proc call*(call_21626708: Call_PostCreateSnapshotCopyGrant_21626692;
          SnapshotCopyGrantName: string; Tags: JsonNode = nil;
          Action: string = "CreateSnapshotCopyGrant"; KmsKeyId: string = "";
          Version: string = "2012-12-01"): Recallable =
  ## postCreateSnapshotCopyGrant
  ## <p>Creates a snapshot copy grant that permits Amazon Redshift to use a customer master key (CMK) from AWS Key Management Service (AWS KMS) to encrypt copied snapshots in a destination region.</p> <p> For more information about managing snapshot copy grants, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-db-encryption.html">Amazon Redshift Database Encryption</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p>
  ##   Tags: JArray
  ##       : A list of tag instances.
  ##   Action: string (required)
  ##   SnapshotCopyGrantName: string (required)
  ##                        : <p>The name of the snapshot copy grant. This name must be unique in the region for the AWS account.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>Alphabetic characters must be lowercase.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Must be unique for all clusters within an AWS account.</p> </li> </ul>
  ##   KmsKeyId: string
  ##           : The unique identifier of the customer master key (CMK) to which to grant Amazon Redshift permission. If no key is specified, the default key is used.
  ##   Version: string (required)
  var query_21626709 = newJObject()
  var formData_21626710 = newJObject()
  if Tags != nil:
    formData_21626710.add "Tags", Tags
  add(query_21626709, "Action", newJString(Action))
  add(formData_21626710, "SnapshotCopyGrantName",
      newJString(SnapshotCopyGrantName))
  add(formData_21626710, "KmsKeyId", newJString(KmsKeyId))
  add(query_21626709, "Version", newJString(Version))
  result = call_21626708.call(nil, query_21626709, nil, formData_21626710, nil)

var postCreateSnapshotCopyGrant* = Call_PostCreateSnapshotCopyGrant_21626692(
    name: "postCreateSnapshotCopyGrant", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=CreateSnapshotCopyGrant",
    validator: validate_PostCreateSnapshotCopyGrant_21626693, base: "/",
    makeUrl: url_PostCreateSnapshotCopyGrant_21626694,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateSnapshotCopyGrant_21626674 = ref object of OpenApiRestCall_21625418
proc url_GetCreateSnapshotCopyGrant_21626676(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateSnapshotCopyGrant_21626675(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a snapshot copy grant that permits Amazon Redshift to use a customer master key (CMK) from AWS Key Management Service (AWS KMS) to encrypt copied snapshots in a destination region.</p> <p> For more information about managing snapshot copy grants, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-db-encryption.html">Amazon Redshift Database Encryption</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tag instances.
  ##   Action: JString (required)
  ##   KmsKeyId: JString
  ##           : The unique identifier of the customer master key (CMK) to which to grant Amazon Redshift permission. If no key is specified, the default key is used.
  ##   SnapshotCopyGrantName: JString (required)
  ##                        : <p>The name of the snapshot copy grant. This name must be unique in the region for the AWS account.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>Alphabetic characters must be lowercase.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Must be unique for all clusters within an AWS account.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626677 = query.getOrDefault("Tags")
  valid_21626677 = validateParameter(valid_21626677, JArray, required = false,
                                   default = nil)
  if valid_21626677 != nil:
    section.add "Tags", valid_21626677
  var valid_21626678 = query.getOrDefault("Action")
  valid_21626678 = validateParameter(valid_21626678, JString, required = true, default = newJString(
      "CreateSnapshotCopyGrant"))
  if valid_21626678 != nil:
    section.add "Action", valid_21626678
  var valid_21626679 = query.getOrDefault("KmsKeyId")
  valid_21626679 = validateParameter(valid_21626679, JString, required = false,
                                   default = nil)
  if valid_21626679 != nil:
    section.add "KmsKeyId", valid_21626679
  var valid_21626680 = query.getOrDefault("SnapshotCopyGrantName")
  valid_21626680 = validateParameter(valid_21626680, JString, required = true,
                                   default = nil)
  if valid_21626680 != nil:
    section.add "SnapshotCopyGrantName", valid_21626680
  var valid_21626681 = query.getOrDefault("Version")
  valid_21626681 = validateParameter(valid_21626681, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626681 != nil:
    section.add "Version", valid_21626681
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626682 = header.getOrDefault("X-Amz-Date")
  valid_21626682 = validateParameter(valid_21626682, JString, required = false,
                                   default = nil)
  if valid_21626682 != nil:
    section.add "X-Amz-Date", valid_21626682
  var valid_21626683 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626683 = validateParameter(valid_21626683, JString, required = false,
                                   default = nil)
  if valid_21626683 != nil:
    section.add "X-Amz-Security-Token", valid_21626683
  var valid_21626684 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626684 = validateParameter(valid_21626684, JString, required = false,
                                   default = nil)
  if valid_21626684 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626684
  var valid_21626685 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626685 = validateParameter(valid_21626685, JString, required = false,
                                   default = nil)
  if valid_21626685 != nil:
    section.add "X-Amz-Algorithm", valid_21626685
  var valid_21626686 = header.getOrDefault("X-Amz-Signature")
  valid_21626686 = validateParameter(valid_21626686, JString, required = false,
                                   default = nil)
  if valid_21626686 != nil:
    section.add "X-Amz-Signature", valid_21626686
  var valid_21626687 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626687 = validateParameter(valid_21626687, JString, required = false,
                                   default = nil)
  if valid_21626687 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626687
  var valid_21626688 = header.getOrDefault("X-Amz-Credential")
  valid_21626688 = validateParameter(valid_21626688, JString, required = false,
                                   default = nil)
  if valid_21626688 != nil:
    section.add "X-Amz-Credential", valid_21626688
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626689: Call_GetCreateSnapshotCopyGrant_21626674;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a snapshot copy grant that permits Amazon Redshift to use a customer master key (CMK) from AWS Key Management Service (AWS KMS) to encrypt copied snapshots in a destination region.</p> <p> For more information about managing snapshot copy grants, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-db-encryption.html">Amazon Redshift Database Encryption</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p>
  ## 
  let valid = call_21626689.validator(path, query, header, formData, body, _)
  let scheme = call_21626689.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626689.makeUrl(scheme.get, call_21626689.host, call_21626689.base,
                               call_21626689.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626689, uri, valid, _)

proc call*(call_21626690: Call_GetCreateSnapshotCopyGrant_21626674;
          SnapshotCopyGrantName: string; Tags: JsonNode = nil;
          Action: string = "CreateSnapshotCopyGrant"; KmsKeyId: string = "";
          Version: string = "2012-12-01"): Recallable =
  ## getCreateSnapshotCopyGrant
  ## <p>Creates a snapshot copy grant that permits Amazon Redshift to use a customer master key (CMK) from AWS Key Management Service (AWS KMS) to encrypt copied snapshots in a destination region.</p> <p> For more information about managing snapshot copy grants, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-db-encryption.html">Amazon Redshift Database Encryption</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p>
  ##   Tags: JArray
  ##       : A list of tag instances.
  ##   Action: string (required)
  ##   KmsKeyId: string
  ##           : The unique identifier of the customer master key (CMK) to which to grant Amazon Redshift permission. If no key is specified, the default key is used.
  ##   SnapshotCopyGrantName: string (required)
  ##                        : <p>The name of the snapshot copy grant. This name must be unique in the region for the AWS account.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>Alphabetic characters must be lowercase.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Must be unique for all clusters within an AWS account.</p> </li> </ul>
  ##   Version: string (required)
  var query_21626691 = newJObject()
  if Tags != nil:
    query_21626691.add "Tags", Tags
  add(query_21626691, "Action", newJString(Action))
  add(query_21626691, "KmsKeyId", newJString(KmsKeyId))
  add(query_21626691, "SnapshotCopyGrantName", newJString(SnapshotCopyGrantName))
  add(query_21626691, "Version", newJString(Version))
  result = call_21626690.call(nil, query_21626691, nil, nil, nil)

var getCreateSnapshotCopyGrant* = Call_GetCreateSnapshotCopyGrant_21626674(
    name: "getCreateSnapshotCopyGrant", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=CreateSnapshotCopyGrant",
    validator: validate_GetCreateSnapshotCopyGrant_21626675, base: "/",
    makeUrl: url_GetCreateSnapshotCopyGrant_21626676,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateSnapshotSchedule_21626732 = ref object of OpenApiRestCall_21625418
proc url_PostCreateSnapshotSchedule_21626734(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateSnapshotSchedule_21626733(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a snapshot schedule with the rate of every 12 hours.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626735 = query.getOrDefault("Action")
  valid_21626735 = validateParameter(valid_21626735, JString, required = true, default = newJString(
      "CreateSnapshotSchedule"))
  if valid_21626735 != nil:
    section.add "Action", valid_21626735
  var valid_21626736 = query.getOrDefault("Version")
  valid_21626736 = validateParameter(valid_21626736, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626736 != nil:
    section.add "Version", valid_21626736
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626737 = header.getOrDefault("X-Amz-Date")
  valid_21626737 = validateParameter(valid_21626737, JString, required = false,
                                   default = nil)
  if valid_21626737 != nil:
    section.add "X-Amz-Date", valid_21626737
  var valid_21626738 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626738 = validateParameter(valid_21626738, JString, required = false,
                                   default = nil)
  if valid_21626738 != nil:
    section.add "X-Amz-Security-Token", valid_21626738
  var valid_21626739 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626739 = validateParameter(valid_21626739, JString, required = false,
                                   default = nil)
  if valid_21626739 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626739
  var valid_21626740 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626740 = validateParameter(valid_21626740, JString, required = false,
                                   default = nil)
  if valid_21626740 != nil:
    section.add "X-Amz-Algorithm", valid_21626740
  var valid_21626741 = header.getOrDefault("X-Amz-Signature")
  valid_21626741 = validateParameter(valid_21626741, JString, required = false,
                                   default = nil)
  if valid_21626741 != nil:
    section.add "X-Amz-Signature", valid_21626741
  var valid_21626742 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626742 = validateParameter(valid_21626742, JString, required = false,
                                   default = nil)
  if valid_21626742 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626742
  var valid_21626743 = header.getOrDefault("X-Amz-Credential")
  valid_21626743 = validateParameter(valid_21626743, JString, required = false,
                                   default = nil)
  if valid_21626743 != nil:
    section.add "X-Amz-Credential", valid_21626743
  result.add "header", section
  ## parameters in `formData` object:
  ##   ScheduleDefinitions: JArray
  ##                      : The definition of the snapshot schedule. The definition is made up of schedule expressions, for example "cron(30 12 *)" or "rate(12 hours)". 
  ##   DryRun: JBool
  ##         : <p/>
  ##   Tags: JArray
  ##       : An optional set of tags you can use to search for the schedule.
  ##   ScheduleDescription: JString
  ##                      : The description of the snapshot schedule.
  ##   ScheduleIdentifier: JString
  ##                     : A unique identifier for a snapshot schedule. Only alphanumeric characters are allowed for the identifier.
  ##   NextInvocations: JInt
  ##                  : <p/>
  section = newJObject()
  var valid_21626744 = formData.getOrDefault("ScheduleDefinitions")
  valid_21626744 = validateParameter(valid_21626744, JArray, required = false,
                                   default = nil)
  if valid_21626744 != nil:
    section.add "ScheduleDefinitions", valid_21626744
  var valid_21626745 = formData.getOrDefault("DryRun")
  valid_21626745 = validateParameter(valid_21626745, JBool, required = false,
                                   default = nil)
  if valid_21626745 != nil:
    section.add "DryRun", valid_21626745
  var valid_21626746 = formData.getOrDefault("Tags")
  valid_21626746 = validateParameter(valid_21626746, JArray, required = false,
                                   default = nil)
  if valid_21626746 != nil:
    section.add "Tags", valid_21626746
  var valid_21626747 = formData.getOrDefault("ScheduleDescription")
  valid_21626747 = validateParameter(valid_21626747, JString, required = false,
                                   default = nil)
  if valid_21626747 != nil:
    section.add "ScheduleDescription", valid_21626747
  var valid_21626748 = formData.getOrDefault("ScheduleIdentifier")
  valid_21626748 = validateParameter(valid_21626748, JString, required = false,
                                   default = nil)
  if valid_21626748 != nil:
    section.add "ScheduleIdentifier", valid_21626748
  var valid_21626749 = formData.getOrDefault("NextInvocations")
  valid_21626749 = validateParameter(valid_21626749, JInt, required = false,
                                   default = nil)
  if valid_21626749 != nil:
    section.add "NextInvocations", valid_21626749
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626750: Call_PostCreateSnapshotSchedule_21626732;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a snapshot schedule with the rate of every 12 hours.
  ## 
  let valid = call_21626750.validator(path, query, header, formData, body, _)
  let scheme = call_21626750.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626750.makeUrl(scheme.get, call_21626750.host, call_21626750.base,
                               call_21626750.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626750, uri, valid, _)

proc call*(call_21626751: Call_PostCreateSnapshotSchedule_21626732;
          ScheduleDefinitions: JsonNode = nil; DryRun: bool = false;
          Tags: JsonNode = nil; ScheduleDescription: string = "";
          Action: string = "CreateSnapshotSchedule";
          ScheduleIdentifier: string = ""; NextInvocations: int = 0;
          Version: string = "2012-12-01"): Recallable =
  ## postCreateSnapshotSchedule
  ## Creates a snapshot schedule with the rate of every 12 hours.
  ##   ScheduleDefinitions: JArray
  ##                      : The definition of the snapshot schedule. The definition is made up of schedule expressions, for example "cron(30 12 *)" or "rate(12 hours)". 
  ##   DryRun: bool
  ##         : <p/>
  ##   Tags: JArray
  ##       : An optional set of tags you can use to search for the schedule.
  ##   ScheduleDescription: string
  ##                      : The description of the snapshot schedule.
  ##   Action: string (required)
  ##   ScheduleIdentifier: string
  ##                     : A unique identifier for a snapshot schedule. Only alphanumeric characters are allowed for the identifier.
  ##   NextInvocations: int
  ##                  : <p/>
  ##   Version: string (required)
  var query_21626752 = newJObject()
  var formData_21626753 = newJObject()
  if ScheduleDefinitions != nil:
    formData_21626753.add "ScheduleDefinitions", ScheduleDefinitions
  add(formData_21626753, "DryRun", newJBool(DryRun))
  if Tags != nil:
    formData_21626753.add "Tags", Tags
  add(formData_21626753, "ScheduleDescription", newJString(ScheduleDescription))
  add(query_21626752, "Action", newJString(Action))
  add(formData_21626753, "ScheduleIdentifier", newJString(ScheduleIdentifier))
  add(formData_21626753, "NextInvocations", newJInt(NextInvocations))
  add(query_21626752, "Version", newJString(Version))
  result = call_21626751.call(nil, query_21626752, nil, formData_21626753, nil)

var postCreateSnapshotSchedule* = Call_PostCreateSnapshotSchedule_21626732(
    name: "postCreateSnapshotSchedule", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=CreateSnapshotSchedule",
    validator: validate_PostCreateSnapshotSchedule_21626733, base: "/",
    makeUrl: url_PostCreateSnapshotSchedule_21626734,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateSnapshotSchedule_21626711 = ref object of OpenApiRestCall_21625418
proc url_GetCreateSnapshotSchedule_21626713(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateSnapshotSchedule_21626712(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a snapshot schedule with the rate of every 12 hours.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DryRun: JBool
  ##         : <p/>
  ##   ScheduleDefinitions: JArray
  ##                      : The definition of the snapshot schedule. The definition is made up of schedule expressions, for example "cron(30 12 *)" or "rate(12 hours)". 
  ##   Tags: JArray
  ##       : An optional set of tags you can use to search for the schedule.
  ##   Action: JString (required)
  ##   ScheduleIdentifier: JString
  ##                     : A unique identifier for a snapshot schedule. Only alphanumeric characters are allowed for the identifier.
  ##   ScheduleDescription: JString
  ##                      : The description of the snapshot schedule.
  ##   NextInvocations: JInt
  ##                  : <p/>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626714 = query.getOrDefault("DryRun")
  valid_21626714 = validateParameter(valid_21626714, JBool, required = false,
                                   default = nil)
  if valid_21626714 != nil:
    section.add "DryRun", valid_21626714
  var valid_21626715 = query.getOrDefault("ScheduleDefinitions")
  valid_21626715 = validateParameter(valid_21626715, JArray, required = false,
                                   default = nil)
  if valid_21626715 != nil:
    section.add "ScheduleDefinitions", valid_21626715
  var valid_21626716 = query.getOrDefault("Tags")
  valid_21626716 = validateParameter(valid_21626716, JArray, required = false,
                                   default = nil)
  if valid_21626716 != nil:
    section.add "Tags", valid_21626716
  var valid_21626717 = query.getOrDefault("Action")
  valid_21626717 = validateParameter(valid_21626717, JString, required = true, default = newJString(
      "CreateSnapshotSchedule"))
  if valid_21626717 != nil:
    section.add "Action", valid_21626717
  var valid_21626718 = query.getOrDefault("ScheduleIdentifier")
  valid_21626718 = validateParameter(valid_21626718, JString, required = false,
                                   default = nil)
  if valid_21626718 != nil:
    section.add "ScheduleIdentifier", valid_21626718
  var valid_21626719 = query.getOrDefault("ScheduleDescription")
  valid_21626719 = validateParameter(valid_21626719, JString, required = false,
                                   default = nil)
  if valid_21626719 != nil:
    section.add "ScheduleDescription", valid_21626719
  var valid_21626720 = query.getOrDefault("NextInvocations")
  valid_21626720 = validateParameter(valid_21626720, JInt, required = false,
                                   default = nil)
  if valid_21626720 != nil:
    section.add "NextInvocations", valid_21626720
  var valid_21626721 = query.getOrDefault("Version")
  valid_21626721 = validateParameter(valid_21626721, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626721 != nil:
    section.add "Version", valid_21626721
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626722 = header.getOrDefault("X-Amz-Date")
  valid_21626722 = validateParameter(valid_21626722, JString, required = false,
                                   default = nil)
  if valid_21626722 != nil:
    section.add "X-Amz-Date", valid_21626722
  var valid_21626723 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626723 = validateParameter(valid_21626723, JString, required = false,
                                   default = nil)
  if valid_21626723 != nil:
    section.add "X-Amz-Security-Token", valid_21626723
  var valid_21626724 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626724 = validateParameter(valid_21626724, JString, required = false,
                                   default = nil)
  if valid_21626724 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626724
  var valid_21626725 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626725 = validateParameter(valid_21626725, JString, required = false,
                                   default = nil)
  if valid_21626725 != nil:
    section.add "X-Amz-Algorithm", valid_21626725
  var valid_21626726 = header.getOrDefault("X-Amz-Signature")
  valid_21626726 = validateParameter(valid_21626726, JString, required = false,
                                   default = nil)
  if valid_21626726 != nil:
    section.add "X-Amz-Signature", valid_21626726
  var valid_21626727 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626727 = validateParameter(valid_21626727, JString, required = false,
                                   default = nil)
  if valid_21626727 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626727
  var valid_21626728 = header.getOrDefault("X-Amz-Credential")
  valid_21626728 = validateParameter(valid_21626728, JString, required = false,
                                   default = nil)
  if valid_21626728 != nil:
    section.add "X-Amz-Credential", valid_21626728
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626729: Call_GetCreateSnapshotSchedule_21626711;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a snapshot schedule with the rate of every 12 hours.
  ## 
  let valid = call_21626729.validator(path, query, header, formData, body, _)
  let scheme = call_21626729.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626729.makeUrl(scheme.get, call_21626729.host, call_21626729.base,
                               call_21626729.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626729, uri, valid, _)

proc call*(call_21626730: Call_GetCreateSnapshotSchedule_21626711;
          DryRun: bool = false; ScheduleDefinitions: JsonNode = nil;
          Tags: JsonNode = nil; Action: string = "CreateSnapshotSchedule";
          ScheduleIdentifier: string = ""; ScheduleDescription: string = "";
          NextInvocations: int = 0; Version: string = "2012-12-01"): Recallable =
  ## getCreateSnapshotSchedule
  ## Creates a snapshot schedule with the rate of every 12 hours.
  ##   DryRun: bool
  ##         : <p/>
  ##   ScheduleDefinitions: JArray
  ##                      : The definition of the snapshot schedule. The definition is made up of schedule expressions, for example "cron(30 12 *)" or "rate(12 hours)". 
  ##   Tags: JArray
  ##       : An optional set of tags you can use to search for the schedule.
  ##   Action: string (required)
  ##   ScheduleIdentifier: string
  ##                     : A unique identifier for a snapshot schedule. Only alphanumeric characters are allowed for the identifier.
  ##   ScheduleDescription: string
  ##                      : The description of the snapshot schedule.
  ##   NextInvocations: int
  ##                  : <p/>
  ##   Version: string (required)
  var query_21626731 = newJObject()
  add(query_21626731, "DryRun", newJBool(DryRun))
  if ScheduleDefinitions != nil:
    query_21626731.add "ScheduleDefinitions", ScheduleDefinitions
  if Tags != nil:
    query_21626731.add "Tags", Tags
  add(query_21626731, "Action", newJString(Action))
  add(query_21626731, "ScheduleIdentifier", newJString(ScheduleIdentifier))
  add(query_21626731, "ScheduleDescription", newJString(ScheduleDescription))
  add(query_21626731, "NextInvocations", newJInt(NextInvocations))
  add(query_21626731, "Version", newJString(Version))
  result = call_21626730.call(nil, query_21626731, nil, nil, nil)

var getCreateSnapshotSchedule* = Call_GetCreateSnapshotSchedule_21626711(
    name: "getCreateSnapshotSchedule", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=CreateSnapshotSchedule",
    validator: validate_GetCreateSnapshotSchedule_21626712, base: "/",
    makeUrl: url_GetCreateSnapshotSchedule_21626713,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateTags_21626771 = ref object of OpenApiRestCall_21625418
proc url_PostCreateTags_21626773(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateTags_21626772(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Adds tags to a cluster.</p> <p>A resource can have up to 50 tags. If you try to create more than 50 tags for a resource, you will receive an error and the attempt will fail.</p> <p>If you specify a key that already exists for the resource, the value for that key will be updated with the new value.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626774 = query.getOrDefault("Action")
  valid_21626774 = validateParameter(valid_21626774, JString, required = true,
                                   default = newJString("CreateTags"))
  if valid_21626774 != nil:
    section.add "Action", valid_21626774
  var valid_21626775 = query.getOrDefault("Version")
  valid_21626775 = validateParameter(valid_21626775, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626775 != nil:
    section.add "Version", valid_21626775
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626776 = header.getOrDefault("X-Amz-Date")
  valid_21626776 = validateParameter(valid_21626776, JString, required = false,
                                   default = nil)
  if valid_21626776 != nil:
    section.add "X-Amz-Date", valid_21626776
  var valid_21626777 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626777 = validateParameter(valid_21626777, JString, required = false,
                                   default = nil)
  if valid_21626777 != nil:
    section.add "X-Amz-Security-Token", valid_21626777
  var valid_21626778 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626778 = validateParameter(valid_21626778, JString, required = false,
                                   default = nil)
  if valid_21626778 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626778
  var valid_21626779 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626779 = validateParameter(valid_21626779, JString, required = false,
                                   default = nil)
  if valid_21626779 != nil:
    section.add "X-Amz-Algorithm", valid_21626779
  var valid_21626780 = header.getOrDefault("X-Amz-Signature")
  valid_21626780 = validateParameter(valid_21626780, JString, required = false,
                                   default = nil)
  if valid_21626780 != nil:
    section.add "X-Amz-Signature", valid_21626780
  var valid_21626781 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626781 = validateParameter(valid_21626781, JString, required = false,
                                   default = nil)
  if valid_21626781 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626781
  var valid_21626782 = header.getOrDefault("X-Amz-Credential")
  valid_21626782 = validateParameter(valid_21626782, JString, required = false,
                                   default = nil)
  if valid_21626782 != nil:
    section.add "X-Amz-Credential", valid_21626782
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray (required)
  ##       : One or more name/value pairs to add as tags to the specified resource. Each tag name is passed in with the parameter <code>Key</code> and the corresponding value is passed in with the parameter <code>Value</code>. The <code>Key</code> and <code>Value</code> parameters are separated by a comma (,). Separate multiple tags with a space. For example, <code>--tags "Key"="owner","Value"="admin" "Key"="environment","Value"="test" "Key"="version","Value"="1.0"</code>. 
  ##   ResourceName: JString (required)
  ##               : The Amazon Resource Name (ARN) to which you want to add the tag or tags. For example, <code>arn:aws:redshift:us-east-2:123456789:cluster:t1</code>. 
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Tags` field"
  var valid_21626783 = formData.getOrDefault("Tags")
  valid_21626783 = validateParameter(valid_21626783, JArray, required = true,
                                   default = nil)
  if valid_21626783 != nil:
    section.add "Tags", valid_21626783
  var valid_21626784 = formData.getOrDefault("ResourceName")
  valid_21626784 = validateParameter(valid_21626784, JString, required = true,
                                   default = nil)
  if valid_21626784 != nil:
    section.add "ResourceName", valid_21626784
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626785: Call_PostCreateTags_21626771; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Adds tags to a cluster.</p> <p>A resource can have up to 50 tags. If you try to create more than 50 tags for a resource, you will receive an error and the attempt will fail.</p> <p>If you specify a key that already exists for the resource, the value for that key will be updated with the new value.</p>
  ## 
  let valid = call_21626785.validator(path, query, header, formData, body, _)
  let scheme = call_21626785.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626785.makeUrl(scheme.get, call_21626785.host, call_21626785.base,
                               call_21626785.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626785, uri, valid, _)

proc call*(call_21626786: Call_PostCreateTags_21626771; Tags: JsonNode;
          ResourceName: string; Action: string = "CreateTags";
          Version: string = "2012-12-01"): Recallable =
  ## postCreateTags
  ## <p>Adds tags to a cluster.</p> <p>A resource can have up to 50 tags. If you try to create more than 50 tags for a resource, you will receive an error and the attempt will fail.</p> <p>If you specify a key that already exists for the resource, the value for that key will be updated with the new value.</p>
  ##   Tags: JArray (required)
  ##       : One or more name/value pairs to add as tags to the specified resource. Each tag name is passed in with the parameter <code>Key</code> and the corresponding value is passed in with the parameter <code>Value</code>. The <code>Key</code> and <code>Value</code> parameters are separated by a comma (,). Separate multiple tags with a space. For example, <code>--tags "Key"="owner","Value"="admin" "Key"="environment","Value"="test" "Key"="version","Value"="1.0"</code>. 
  ##   Action: string (required)
  ##   ResourceName: string (required)
  ##               : The Amazon Resource Name (ARN) to which you want to add the tag or tags. For example, <code>arn:aws:redshift:us-east-2:123456789:cluster:t1</code>. 
  ##   Version: string (required)
  var query_21626787 = newJObject()
  var formData_21626788 = newJObject()
  if Tags != nil:
    formData_21626788.add "Tags", Tags
  add(query_21626787, "Action", newJString(Action))
  add(formData_21626788, "ResourceName", newJString(ResourceName))
  add(query_21626787, "Version", newJString(Version))
  result = call_21626786.call(nil, query_21626787, nil, formData_21626788, nil)

var postCreateTags* = Call_PostCreateTags_21626771(name: "postCreateTags",
    meth: HttpMethod.HttpPost, host: "redshift.amazonaws.com",
    route: "/#Action=CreateTags", validator: validate_PostCreateTags_21626772,
    base: "/", makeUrl: url_PostCreateTags_21626773,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateTags_21626754 = ref object of OpenApiRestCall_21625418
proc url_GetCreateTags_21626756(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateTags_21626755(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## <p>Adds tags to a cluster.</p> <p>A resource can have up to 50 tags. If you try to create more than 50 tags for a resource, you will receive an error and the attempt will fail.</p> <p>If you specify a key that already exists for the resource, the value for that key will be updated with the new value.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : One or more name/value pairs to add as tags to the specified resource. Each tag name is passed in with the parameter <code>Key</code> and the corresponding value is passed in with the parameter <code>Value</code>. The <code>Key</code> and <code>Value</code> parameters are separated by a comma (,). Separate multiple tags with a space. For example, <code>--tags "Key"="owner","Value"="admin" "Key"="environment","Value"="test" "Key"="version","Value"="1.0"</code>. 
  ##   ResourceName: JString (required)
  ##               : The Amazon Resource Name (ARN) to which you want to add the tag or tags. For example, <code>arn:aws:redshift:us-east-2:123456789:cluster:t1</code>. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_21626757 = query.getOrDefault("Tags")
  valid_21626757 = validateParameter(valid_21626757, JArray, required = true,
                                   default = nil)
  if valid_21626757 != nil:
    section.add "Tags", valid_21626757
  var valid_21626758 = query.getOrDefault("ResourceName")
  valid_21626758 = validateParameter(valid_21626758, JString, required = true,
                                   default = nil)
  if valid_21626758 != nil:
    section.add "ResourceName", valid_21626758
  var valid_21626759 = query.getOrDefault("Action")
  valid_21626759 = validateParameter(valid_21626759, JString, required = true,
                                   default = newJString("CreateTags"))
  if valid_21626759 != nil:
    section.add "Action", valid_21626759
  var valid_21626760 = query.getOrDefault("Version")
  valid_21626760 = validateParameter(valid_21626760, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626760 != nil:
    section.add "Version", valid_21626760
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626761 = header.getOrDefault("X-Amz-Date")
  valid_21626761 = validateParameter(valid_21626761, JString, required = false,
                                   default = nil)
  if valid_21626761 != nil:
    section.add "X-Amz-Date", valid_21626761
  var valid_21626762 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626762 = validateParameter(valid_21626762, JString, required = false,
                                   default = nil)
  if valid_21626762 != nil:
    section.add "X-Amz-Security-Token", valid_21626762
  var valid_21626763 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626763 = validateParameter(valid_21626763, JString, required = false,
                                   default = nil)
  if valid_21626763 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626763
  var valid_21626764 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626764 = validateParameter(valid_21626764, JString, required = false,
                                   default = nil)
  if valid_21626764 != nil:
    section.add "X-Amz-Algorithm", valid_21626764
  var valid_21626765 = header.getOrDefault("X-Amz-Signature")
  valid_21626765 = validateParameter(valid_21626765, JString, required = false,
                                   default = nil)
  if valid_21626765 != nil:
    section.add "X-Amz-Signature", valid_21626765
  var valid_21626766 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626766 = validateParameter(valid_21626766, JString, required = false,
                                   default = nil)
  if valid_21626766 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626766
  var valid_21626767 = header.getOrDefault("X-Amz-Credential")
  valid_21626767 = validateParameter(valid_21626767, JString, required = false,
                                   default = nil)
  if valid_21626767 != nil:
    section.add "X-Amz-Credential", valid_21626767
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626768: Call_GetCreateTags_21626754; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Adds tags to a cluster.</p> <p>A resource can have up to 50 tags. If you try to create more than 50 tags for a resource, you will receive an error and the attempt will fail.</p> <p>If you specify a key that already exists for the resource, the value for that key will be updated with the new value.</p>
  ## 
  let valid = call_21626768.validator(path, query, header, formData, body, _)
  let scheme = call_21626768.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626768.makeUrl(scheme.get, call_21626768.host, call_21626768.base,
                               call_21626768.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626768, uri, valid, _)

proc call*(call_21626769: Call_GetCreateTags_21626754; Tags: JsonNode;
          ResourceName: string; Action: string = "CreateTags";
          Version: string = "2012-12-01"): Recallable =
  ## getCreateTags
  ## <p>Adds tags to a cluster.</p> <p>A resource can have up to 50 tags. If you try to create more than 50 tags for a resource, you will receive an error and the attempt will fail.</p> <p>If you specify a key that already exists for the resource, the value for that key will be updated with the new value.</p>
  ##   Tags: JArray (required)
  ##       : One or more name/value pairs to add as tags to the specified resource. Each tag name is passed in with the parameter <code>Key</code> and the corresponding value is passed in with the parameter <code>Value</code>. The <code>Key</code> and <code>Value</code> parameters are separated by a comma (,). Separate multiple tags with a space. For example, <code>--tags "Key"="owner","Value"="admin" "Key"="environment","Value"="test" "Key"="version","Value"="1.0"</code>. 
  ##   ResourceName: string (required)
  ##               : The Amazon Resource Name (ARN) to which you want to add the tag or tags. For example, <code>arn:aws:redshift:us-east-2:123456789:cluster:t1</code>. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626770 = newJObject()
  if Tags != nil:
    query_21626770.add "Tags", Tags
  add(query_21626770, "ResourceName", newJString(ResourceName))
  add(query_21626770, "Action", newJString(Action))
  add(query_21626770, "Version", newJString(Version))
  result = call_21626769.call(nil, query_21626770, nil, nil, nil)

var getCreateTags* = Call_GetCreateTags_21626754(name: "getCreateTags",
    meth: HttpMethod.HttpGet, host: "redshift.amazonaws.com",
    route: "/#Action=CreateTags", validator: validate_GetCreateTags_21626755,
    base: "/", makeUrl: url_GetCreateTags_21626756,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCluster_21626808 = ref object of OpenApiRestCall_21625418
proc url_PostDeleteCluster_21626810(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteCluster_21626809(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes a previously provisioned cluster without its final snapshot being created. A successful response from the web service indicates that the request was received correctly. Use <a>DescribeClusters</a> to monitor the status of the deletion. The delete operation cannot be canceled or reverted once submitted. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>If you want to shut down the cluster and retain it for future use, set <i>SkipFinalClusterSnapshot</i> to <code>false</code> and specify a name for <i>FinalClusterSnapshotIdentifier</i>. You can later restore this snapshot to resume using the cluster. If a final cluster snapshot is requested, the status of the cluster will be "final-snapshot" while the snapshot is being taken, then it's "deleting" once Amazon Redshift begins deleting the cluster. </p> <p> For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626811 = query.getOrDefault("Action")
  valid_21626811 = validateParameter(valid_21626811, JString, required = true,
                                   default = newJString("DeleteCluster"))
  if valid_21626811 != nil:
    section.add "Action", valid_21626811
  var valid_21626812 = query.getOrDefault("Version")
  valid_21626812 = validateParameter(valid_21626812, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626812 != nil:
    section.add "Version", valid_21626812
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626813 = header.getOrDefault("X-Amz-Date")
  valid_21626813 = validateParameter(valid_21626813, JString, required = false,
                                   default = nil)
  if valid_21626813 != nil:
    section.add "X-Amz-Date", valid_21626813
  var valid_21626814 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626814 = validateParameter(valid_21626814, JString, required = false,
                                   default = nil)
  if valid_21626814 != nil:
    section.add "X-Amz-Security-Token", valid_21626814
  var valid_21626815 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626815 = validateParameter(valid_21626815, JString, required = false,
                                   default = nil)
  if valid_21626815 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626815
  var valid_21626816 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626816 = validateParameter(valid_21626816, JString, required = false,
                                   default = nil)
  if valid_21626816 != nil:
    section.add "X-Amz-Algorithm", valid_21626816
  var valid_21626817 = header.getOrDefault("X-Amz-Signature")
  valid_21626817 = validateParameter(valid_21626817, JString, required = false,
                                   default = nil)
  if valid_21626817 != nil:
    section.add "X-Amz-Signature", valid_21626817
  var valid_21626818 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626818 = validateParameter(valid_21626818, JString, required = false,
                                   default = nil)
  if valid_21626818 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626818
  var valid_21626819 = header.getOrDefault("X-Amz-Credential")
  valid_21626819 = validateParameter(valid_21626819, JString, required = false,
                                   default = nil)
  if valid_21626819 != nil:
    section.add "X-Amz-Credential", valid_21626819
  result.add "header", section
  ## parameters in `formData` object:
  ##   FinalClusterSnapshotIdentifier: JString
  ##                                 : <p>The identifier of the final snapshot that is to be created immediately before deleting the cluster. If this parameter is provided, <i>SkipFinalClusterSnapshot</i> must be <code>false</code>. </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   FinalClusterSnapshotRetentionPeriod: JInt
  ##                                      : <p>The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely.</p> <p>The value must be either -1 or an integer between 1 and 3,653.</p> <p>The default value is -1.</p>
  ##   ClusterIdentifier: JString (required)
  ##                    : <p>The identifier of the cluster to be deleted.</p> <p>Constraints:</p> <ul> <li> <p>Must contain lowercase characters.</p> </li> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   SkipFinalClusterSnapshot: JBool
  ##                           : <p>Determines whether a final snapshot of the cluster is created before Amazon Redshift deletes the cluster. If <code>true</code>, a final cluster snapshot is not created. If <code>false</code>, a final cluster snapshot is created before the cluster is deleted. </p> <note> <p>The <i>FinalClusterSnapshotIdentifier</i> parameter must be specified if <i>SkipFinalClusterSnapshot</i> is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  section = newJObject()
  var valid_21626820 = formData.getOrDefault("FinalClusterSnapshotIdentifier")
  valid_21626820 = validateParameter(valid_21626820, JString, required = false,
                                   default = nil)
  if valid_21626820 != nil:
    section.add "FinalClusterSnapshotIdentifier", valid_21626820
  var valid_21626821 = formData.getOrDefault("FinalClusterSnapshotRetentionPeriod")
  valid_21626821 = validateParameter(valid_21626821, JInt, required = false,
                                   default = nil)
  if valid_21626821 != nil:
    section.add "FinalClusterSnapshotRetentionPeriod", valid_21626821
  assert formData != nil, "formData argument is necessary due to required `ClusterIdentifier` field"
  var valid_21626822 = formData.getOrDefault("ClusterIdentifier")
  valid_21626822 = validateParameter(valid_21626822, JString, required = true,
                                   default = nil)
  if valid_21626822 != nil:
    section.add "ClusterIdentifier", valid_21626822
  var valid_21626823 = formData.getOrDefault("SkipFinalClusterSnapshot")
  valid_21626823 = validateParameter(valid_21626823, JBool, required = false,
                                   default = nil)
  if valid_21626823 != nil:
    section.add "SkipFinalClusterSnapshot", valid_21626823
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626824: Call_PostDeleteCluster_21626808; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes a previously provisioned cluster without its final snapshot being created. A successful response from the web service indicates that the request was received correctly. Use <a>DescribeClusters</a> to monitor the status of the deletion. The delete operation cannot be canceled or reverted once submitted. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>If you want to shut down the cluster and retain it for future use, set <i>SkipFinalClusterSnapshot</i> to <code>false</code> and specify a name for <i>FinalClusterSnapshotIdentifier</i>. You can later restore this snapshot to resume using the cluster. If a final cluster snapshot is requested, the status of the cluster will be "final-snapshot" while the snapshot is being taken, then it's "deleting" once Amazon Redshift begins deleting the cluster. </p> <p> For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  let valid = call_21626824.validator(path, query, header, formData, body, _)
  let scheme = call_21626824.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626824.makeUrl(scheme.get, call_21626824.host, call_21626824.base,
                               call_21626824.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626824, uri, valid, _)

proc call*(call_21626825: Call_PostDeleteCluster_21626808;
          ClusterIdentifier: string; FinalClusterSnapshotIdentifier: string = "";
          Action: string = "DeleteCluster";
          FinalClusterSnapshotRetentionPeriod: int = 0;
          SkipFinalClusterSnapshot: bool = false; Version: string = "2012-12-01"): Recallable =
  ## postDeleteCluster
  ## <p>Deletes a previously provisioned cluster without its final snapshot being created. A successful response from the web service indicates that the request was received correctly. Use <a>DescribeClusters</a> to monitor the status of the deletion. The delete operation cannot be canceled or reverted once submitted. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>If you want to shut down the cluster and retain it for future use, set <i>SkipFinalClusterSnapshot</i> to <code>false</code> and specify a name for <i>FinalClusterSnapshotIdentifier</i>. You can later restore this snapshot to resume using the cluster. If a final cluster snapshot is requested, the status of the cluster will be "final-snapshot" while the snapshot is being taken, then it's "deleting" once Amazon Redshift begins deleting the cluster. </p> <p> For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ##   FinalClusterSnapshotIdentifier: string
  ##                                 : <p>The identifier of the final snapshot that is to be created immediately before deleting the cluster. If this parameter is provided, <i>SkipFinalClusterSnapshot</i> must be <code>false</code>. </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Action: string (required)
  ##   FinalClusterSnapshotRetentionPeriod: int
  ##                                      : <p>The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely.</p> <p>The value must be either -1 or an integer between 1 and 3,653.</p> <p>The default value is -1.</p>
  ##   ClusterIdentifier: string (required)
  ##                    : <p>The identifier of the cluster to be deleted.</p> <p>Constraints:</p> <ul> <li> <p>Must contain lowercase characters.</p> </li> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   SkipFinalClusterSnapshot: bool
  ##                           : <p>Determines whether a final snapshot of the cluster is created before Amazon Redshift deletes the cluster. If <code>true</code>, a final cluster snapshot is not created. If <code>false</code>, a final cluster snapshot is created before the cluster is deleted. </p> <note> <p>The <i>FinalClusterSnapshotIdentifier</i> parameter must be specified if <i>SkipFinalClusterSnapshot</i> is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  ##   Version: string (required)
  var query_21626826 = newJObject()
  var formData_21626827 = newJObject()
  add(formData_21626827, "FinalClusterSnapshotIdentifier",
      newJString(FinalClusterSnapshotIdentifier))
  add(query_21626826, "Action", newJString(Action))
  add(formData_21626827, "FinalClusterSnapshotRetentionPeriod",
      newJInt(FinalClusterSnapshotRetentionPeriod))
  add(formData_21626827, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(formData_21626827, "SkipFinalClusterSnapshot",
      newJBool(SkipFinalClusterSnapshot))
  add(query_21626826, "Version", newJString(Version))
  result = call_21626825.call(nil, query_21626826, nil, formData_21626827, nil)

var postDeleteCluster* = Call_PostDeleteCluster_21626808(name: "postDeleteCluster",
    meth: HttpMethod.HttpPost, host: "redshift.amazonaws.com",
    route: "/#Action=DeleteCluster", validator: validate_PostDeleteCluster_21626809,
    base: "/", makeUrl: url_PostDeleteCluster_21626810,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCluster_21626789 = ref object of OpenApiRestCall_21625418
proc url_GetDeleteCluster_21626791(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteCluster_21626790(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes a previously provisioned cluster without its final snapshot being created. A successful response from the web service indicates that the request was received correctly. Use <a>DescribeClusters</a> to monitor the status of the deletion. The delete operation cannot be canceled or reverted once submitted. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>If you want to shut down the cluster and retain it for future use, set <i>SkipFinalClusterSnapshot</i> to <code>false</code> and specify a name for <i>FinalClusterSnapshotIdentifier</i>. You can later restore this snapshot to resume using the cluster. If a final cluster snapshot is requested, the status of the cluster will be "final-snapshot" while the snapshot is being taken, then it's "deleting" once Amazon Redshift begins deleting the cluster. </p> <p> For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   FinalClusterSnapshotRetentionPeriod: JInt
  ##                                      : <p>The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely.</p> <p>The value must be either -1 or an integer between 1 and 3,653.</p> <p>The default value is -1.</p>
  ##   Action: JString (required)
  ##   ClusterIdentifier: JString (required)
  ##                    : <p>The identifier of the cluster to be deleted.</p> <p>Constraints:</p> <ul> <li> <p>Must contain lowercase characters.</p> </li> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   SkipFinalClusterSnapshot: JBool
  ##                           : <p>Determines whether a final snapshot of the cluster is created before Amazon Redshift deletes the cluster. If <code>true</code>, a final cluster snapshot is not created. If <code>false</code>, a final cluster snapshot is created before the cluster is deleted. </p> <note> <p>The <i>FinalClusterSnapshotIdentifier</i> parameter must be specified if <i>SkipFinalClusterSnapshot</i> is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  ##   FinalClusterSnapshotIdentifier: JString
  ##                                 : <p>The identifier of the final snapshot that is to be created immediately before deleting the cluster. If this parameter is provided, <i>SkipFinalClusterSnapshot</i> must be <code>false</code>. </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626792 = query.getOrDefault("FinalClusterSnapshotRetentionPeriod")
  valid_21626792 = validateParameter(valid_21626792, JInt, required = false,
                                   default = nil)
  if valid_21626792 != nil:
    section.add "FinalClusterSnapshotRetentionPeriod", valid_21626792
  var valid_21626793 = query.getOrDefault("Action")
  valid_21626793 = validateParameter(valid_21626793, JString, required = true,
                                   default = newJString("DeleteCluster"))
  if valid_21626793 != nil:
    section.add "Action", valid_21626793
  var valid_21626794 = query.getOrDefault("ClusterIdentifier")
  valid_21626794 = validateParameter(valid_21626794, JString, required = true,
                                   default = nil)
  if valid_21626794 != nil:
    section.add "ClusterIdentifier", valid_21626794
  var valid_21626795 = query.getOrDefault("SkipFinalClusterSnapshot")
  valid_21626795 = validateParameter(valid_21626795, JBool, required = false,
                                   default = nil)
  if valid_21626795 != nil:
    section.add "SkipFinalClusterSnapshot", valid_21626795
  var valid_21626796 = query.getOrDefault("FinalClusterSnapshotIdentifier")
  valid_21626796 = validateParameter(valid_21626796, JString, required = false,
                                   default = nil)
  if valid_21626796 != nil:
    section.add "FinalClusterSnapshotIdentifier", valid_21626796
  var valid_21626797 = query.getOrDefault("Version")
  valid_21626797 = validateParameter(valid_21626797, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626797 != nil:
    section.add "Version", valid_21626797
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626798 = header.getOrDefault("X-Amz-Date")
  valid_21626798 = validateParameter(valid_21626798, JString, required = false,
                                   default = nil)
  if valid_21626798 != nil:
    section.add "X-Amz-Date", valid_21626798
  var valid_21626799 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626799 = validateParameter(valid_21626799, JString, required = false,
                                   default = nil)
  if valid_21626799 != nil:
    section.add "X-Amz-Security-Token", valid_21626799
  var valid_21626800 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626800 = validateParameter(valid_21626800, JString, required = false,
                                   default = nil)
  if valid_21626800 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626800
  var valid_21626801 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626801 = validateParameter(valid_21626801, JString, required = false,
                                   default = nil)
  if valid_21626801 != nil:
    section.add "X-Amz-Algorithm", valid_21626801
  var valid_21626802 = header.getOrDefault("X-Amz-Signature")
  valid_21626802 = validateParameter(valid_21626802, JString, required = false,
                                   default = nil)
  if valid_21626802 != nil:
    section.add "X-Amz-Signature", valid_21626802
  var valid_21626803 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626803 = validateParameter(valid_21626803, JString, required = false,
                                   default = nil)
  if valid_21626803 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626803
  var valid_21626804 = header.getOrDefault("X-Amz-Credential")
  valid_21626804 = validateParameter(valid_21626804, JString, required = false,
                                   default = nil)
  if valid_21626804 != nil:
    section.add "X-Amz-Credential", valid_21626804
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626805: Call_GetDeleteCluster_21626789; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes a previously provisioned cluster without its final snapshot being created. A successful response from the web service indicates that the request was received correctly. Use <a>DescribeClusters</a> to monitor the status of the deletion. The delete operation cannot be canceled or reverted once submitted. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>If you want to shut down the cluster and retain it for future use, set <i>SkipFinalClusterSnapshot</i> to <code>false</code> and specify a name for <i>FinalClusterSnapshotIdentifier</i>. You can later restore this snapshot to resume using the cluster. If a final cluster snapshot is requested, the status of the cluster will be "final-snapshot" while the snapshot is being taken, then it's "deleting" once Amazon Redshift begins deleting the cluster. </p> <p> For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  let valid = call_21626805.validator(path, query, header, formData, body, _)
  let scheme = call_21626805.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626805.makeUrl(scheme.get, call_21626805.host, call_21626805.base,
                               call_21626805.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626805, uri, valid, _)

proc call*(call_21626806: Call_GetDeleteCluster_21626789;
          ClusterIdentifier: string; FinalClusterSnapshotRetentionPeriod: int = 0;
          Action: string = "DeleteCluster"; SkipFinalClusterSnapshot: bool = false;
          FinalClusterSnapshotIdentifier: string = "";
          Version: string = "2012-12-01"): Recallable =
  ## getDeleteCluster
  ## <p>Deletes a previously provisioned cluster without its final snapshot being created. A successful response from the web service indicates that the request was received correctly. Use <a>DescribeClusters</a> to monitor the status of the deletion. The delete operation cannot be canceled or reverted once submitted. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>If you want to shut down the cluster and retain it for future use, set <i>SkipFinalClusterSnapshot</i> to <code>false</code> and specify a name for <i>FinalClusterSnapshotIdentifier</i>. You can later restore this snapshot to resume using the cluster. If a final cluster snapshot is requested, the status of the cluster will be "final-snapshot" while the snapshot is being taken, then it's "deleting" once Amazon Redshift begins deleting the cluster. </p> <p> For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ##   FinalClusterSnapshotRetentionPeriod: int
  ##                                      : <p>The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely.</p> <p>The value must be either -1 or an integer between 1 and 3,653.</p> <p>The default value is -1.</p>
  ##   Action: string (required)
  ##   ClusterIdentifier: string (required)
  ##                    : <p>The identifier of the cluster to be deleted.</p> <p>Constraints:</p> <ul> <li> <p>Must contain lowercase characters.</p> </li> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   SkipFinalClusterSnapshot: bool
  ##                           : <p>Determines whether a final snapshot of the cluster is created before Amazon Redshift deletes the cluster. If <code>true</code>, a final cluster snapshot is not created. If <code>false</code>, a final cluster snapshot is created before the cluster is deleted. </p> <note> <p>The <i>FinalClusterSnapshotIdentifier</i> parameter must be specified if <i>SkipFinalClusterSnapshot</i> is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  ##   FinalClusterSnapshotIdentifier: string
  ##                                 : <p>The identifier of the final snapshot that is to be created immediately before deleting the cluster. If this parameter is provided, <i>SkipFinalClusterSnapshot</i> must be <code>false</code>. </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Version: string (required)
  var query_21626807 = newJObject()
  add(query_21626807, "FinalClusterSnapshotRetentionPeriod",
      newJInt(FinalClusterSnapshotRetentionPeriod))
  add(query_21626807, "Action", newJString(Action))
  add(query_21626807, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(query_21626807, "SkipFinalClusterSnapshot",
      newJBool(SkipFinalClusterSnapshot))
  add(query_21626807, "FinalClusterSnapshotIdentifier",
      newJString(FinalClusterSnapshotIdentifier))
  add(query_21626807, "Version", newJString(Version))
  result = call_21626806.call(nil, query_21626807, nil, nil, nil)

var getDeleteCluster* = Call_GetDeleteCluster_21626789(name: "getDeleteCluster",
    meth: HttpMethod.HttpGet, host: "redshift.amazonaws.com",
    route: "/#Action=DeleteCluster", validator: validate_GetDeleteCluster_21626790,
    base: "/", makeUrl: url_GetDeleteCluster_21626791,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteClusterParameterGroup_21626844 = ref object of OpenApiRestCall_21625418
proc url_PostDeleteClusterParameterGroup_21626846(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteClusterParameterGroup_21626845(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Deletes a specified Amazon Redshift parameter group.</p> <note> <p>You cannot delete a parameter group if it is associated with a cluster.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626847 = query.getOrDefault("Action")
  valid_21626847 = validateParameter(valid_21626847, JString, required = true, default = newJString(
      "DeleteClusterParameterGroup"))
  if valid_21626847 != nil:
    section.add "Action", valid_21626847
  var valid_21626848 = query.getOrDefault("Version")
  valid_21626848 = validateParameter(valid_21626848, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626848 != nil:
    section.add "Version", valid_21626848
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626849 = header.getOrDefault("X-Amz-Date")
  valid_21626849 = validateParameter(valid_21626849, JString, required = false,
                                   default = nil)
  if valid_21626849 != nil:
    section.add "X-Amz-Date", valid_21626849
  var valid_21626850 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626850 = validateParameter(valid_21626850, JString, required = false,
                                   default = nil)
  if valid_21626850 != nil:
    section.add "X-Amz-Security-Token", valid_21626850
  var valid_21626851 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626851 = validateParameter(valid_21626851, JString, required = false,
                                   default = nil)
  if valid_21626851 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626851
  var valid_21626852 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626852 = validateParameter(valid_21626852, JString, required = false,
                                   default = nil)
  if valid_21626852 != nil:
    section.add "X-Amz-Algorithm", valid_21626852
  var valid_21626853 = header.getOrDefault("X-Amz-Signature")
  valid_21626853 = validateParameter(valid_21626853, JString, required = false,
                                   default = nil)
  if valid_21626853 != nil:
    section.add "X-Amz-Signature", valid_21626853
  var valid_21626854 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626854 = validateParameter(valid_21626854, JString, required = false,
                                   default = nil)
  if valid_21626854 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626854
  var valid_21626855 = header.getOrDefault("X-Amz-Credential")
  valid_21626855 = validateParameter(valid_21626855, JString, required = false,
                                   default = nil)
  if valid_21626855 != nil:
    section.add "X-Amz-Credential", valid_21626855
  result.add "header", section
  ## parameters in `formData` object:
  ##   ParameterGroupName: JString (required)
  ##                     : <p>The name of the parameter group to be deleted.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing cluster parameter group.</p> </li> <li> <p>Cannot delete a default cluster parameter group.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ParameterGroupName` field"
  var valid_21626856 = formData.getOrDefault("ParameterGroupName")
  valid_21626856 = validateParameter(valid_21626856, JString, required = true,
                                   default = nil)
  if valid_21626856 != nil:
    section.add "ParameterGroupName", valid_21626856
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626857: Call_PostDeleteClusterParameterGroup_21626844;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes a specified Amazon Redshift parameter group.</p> <note> <p>You cannot delete a parameter group if it is associated with a cluster.</p> </note>
  ## 
  let valid = call_21626857.validator(path, query, header, formData, body, _)
  let scheme = call_21626857.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626857.makeUrl(scheme.get, call_21626857.host, call_21626857.base,
                               call_21626857.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626857, uri, valid, _)

proc call*(call_21626858: Call_PostDeleteClusterParameterGroup_21626844;
          ParameterGroupName: string;
          Action: string = "DeleteClusterParameterGroup";
          Version: string = "2012-12-01"): Recallable =
  ## postDeleteClusterParameterGroup
  ## <p>Deletes a specified Amazon Redshift parameter group.</p> <note> <p>You cannot delete a parameter group if it is associated with a cluster.</p> </note>
  ##   ParameterGroupName: string (required)
  ##                     : <p>The name of the parameter group to be deleted.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing cluster parameter group.</p> </li> <li> <p>Cannot delete a default cluster parameter group.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626859 = newJObject()
  var formData_21626860 = newJObject()
  add(formData_21626860, "ParameterGroupName", newJString(ParameterGroupName))
  add(query_21626859, "Action", newJString(Action))
  add(query_21626859, "Version", newJString(Version))
  result = call_21626858.call(nil, query_21626859, nil, formData_21626860, nil)

var postDeleteClusterParameterGroup* = Call_PostDeleteClusterParameterGroup_21626844(
    name: "postDeleteClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=DeleteClusterParameterGroup",
    validator: validate_PostDeleteClusterParameterGroup_21626845, base: "/",
    makeUrl: url_PostDeleteClusterParameterGroup_21626846,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteClusterParameterGroup_21626828 = ref object of OpenApiRestCall_21625418
proc url_GetDeleteClusterParameterGroup_21626830(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteClusterParameterGroup_21626829(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Deletes a specified Amazon Redshift parameter group.</p> <note> <p>You cannot delete a parameter group if it is associated with a cluster.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ParameterGroupName: JString (required)
  ##                     : <p>The name of the parameter group to be deleted.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing cluster parameter group.</p> </li> <li> <p>Cannot delete a default cluster parameter group.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ParameterGroupName` field"
  var valid_21626831 = query.getOrDefault("ParameterGroupName")
  valid_21626831 = validateParameter(valid_21626831, JString, required = true,
                                   default = nil)
  if valid_21626831 != nil:
    section.add "ParameterGroupName", valid_21626831
  var valid_21626832 = query.getOrDefault("Action")
  valid_21626832 = validateParameter(valid_21626832, JString, required = true, default = newJString(
      "DeleteClusterParameterGroup"))
  if valid_21626832 != nil:
    section.add "Action", valid_21626832
  var valid_21626833 = query.getOrDefault("Version")
  valid_21626833 = validateParameter(valid_21626833, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626833 != nil:
    section.add "Version", valid_21626833
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626834 = header.getOrDefault("X-Amz-Date")
  valid_21626834 = validateParameter(valid_21626834, JString, required = false,
                                   default = nil)
  if valid_21626834 != nil:
    section.add "X-Amz-Date", valid_21626834
  var valid_21626835 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626835 = validateParameter(valid_21626835, JString, required = false,
                                   default = nil)
  if valid_21626835 != nil:
    section.add "X-Amz-Security-Token", valid_21626835
  var valid_21626836 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626836 = validateParameter(valid_21626836, JString, required = false,
                                   default = nil)
  if valid_21626836 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626836
  var valid_21626837 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626837 = validateParameter(valid_21626837, JString, required = false,
                                   default = nil)
  if valid_21626837 != nil:
    section.add "X-Amz-Algorithm", valid_21626837
  var valid_21626838 = header.getOrDefault("X-Amz-Signature")
  valid_21626838 = validateParameter(valid_21626838, JString, required = false,
                                   default = nil)
  if valid_21626838 != nil:
    section.add "X-Amz-Signature", valid_21626838
  var valid_21626839 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626839 = validateParameter(valid_21626839, JString, required = false,
                                   default = nil)
  if valid_21626839 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626839
  var valid_21626840 = header.getOrDefault("X-Amz-Credential")
  valid_21626840 = validateParameter(valid_21626840, JString, required = false,
                                   default = nil)
  if valid_21626840 != nil:
    section.add "X-Amz-Credential", valid_21626840
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626841: Call_GetDeleteClusterParameterGroup_21626828;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes a specified Amazon Redshift parameter group.</p> <note> <p>You cannot delete a parameter group if it is associated with a cluster.</p> </note>
  ## 
  let valid = call_21626841.validator(path, query, header, formData, body, _)
  let scheme = call_21626841.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626841.makeUrl(scheme.get, call_21626841.host, call_21626841.base,
                               call_21626841.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626841, uri, valid, _)

proc call*(call_21626842: Call_GetDeleteClusterParameterGroup_21626828;
          ParameterGroupName: string;
          Action: string = "DeleteClusterParameterGroup";
          Version: string = "2012-12-01"): Recallable =
  ## getDeleteClusterParameterGroup
  ## <p>Deletes a specified Amazon Redshift parameter group.</p> <note> <p>You cannot delete a parameter group if it is associated with a cluster.</p> </note>
  ##   ParameterGroupName: string (required)
  ##                     : <p>The name of the parameter group to be deleted.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing cluster parameter group.</p> </li> <li> <p>Cannot delete a default cluster parameter group.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626843 = newJObject()
  add(query_21626843, "ParameterGroupName", newJString(ParameterGroupName))
  add(query_21626843, "Action", newJString(Action))
  add(query_21626843, "Version", newJString(Version))
  result = call_21626842.call(nil, query_21626843, nil, nil, nil)

var getDeleteClusterParameterGroup* = Call_GetDeleteClusterParameterGroup_21626828(
    name: "getDeleteClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=DeleteClusterParameterGroup",
    validator: validate_GetDeleteClusterParameterGroup_21626829, base: "/",
    makeUrl: url_GetDeleteClusterParameterGroup_21626830,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteClusterSecurityGroup_21626877 = ref object of OpenApiRestCall_21625418
proc url_PostDeleteClusterSecurityGroup_21626879(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteClusterSecurityGroup_21626878(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Deletes an Amazon Redshift security group.</p> <note> <p>You cannot delete a security group that is associated with any clusters. You cannot delete the default security group.</p> </note> <p> For information about managing security groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html">Amazon Redshift Cluster Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626880 = query.getOrDefault("Action")
  valid_21626880 = validateParameter(valid_21626880, JString, required = true, default = newJString(
      "DeleteClusterSecurityGroup"))
  if valid_21626880 != nil:
    section.add "Action", valid_21626880
  var valid_21626881 = query.getOrDefault("Version")
  valid_21626881 = validateParameter(valid_21626881, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626881 != nil:
    section.add "Version", valid_21626881
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626882 = header.getOrDefault("X-Amz-Date")
  valid_21626882 = validateParameter(valid_21626882, JString, required = false,
                                   default = nil)
  if valid_21626882 != nil:
    section.add "X-Amz-Date", valid_21626882
  var valid_21626883 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626883 = validateParameter(valid_21626883, JString, required = false,
                                   default = nil)
  if valid_21626883 != nil:
    section.add "X-Amz-Security-Token", valid_21626883
  var valid_21626884 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626884 = validateParameter(valid_21626884, JString, required = false,
                                   default = nil)
  if valid_21626884 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626884
  var valid_21626885 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626885 = validateParameter(valid_21626885, JString, required = false,
                                   default = nil)
  if valid_21626885 != nil:
    section.add "X-Amz-Algorithm", valid_21626885
  var valid_21626886 = header.getOrDefault("X-Amz-Signature")
  valid_21626886 = validateParameter(valid_21626886, JString, required = false,
                                   default = nil)
  if valid_21626886 != nil:
    section.add "X-Amz-Signature", valid_21626886
  var valid_21626887 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626887 = validateParameter(valid_21626887, JString, required = false,
                                   default = nil)
  if valid_21626887 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626887
  var valid_21626888 = header.getOrDefault("X-Amz-Credential")
  valid_21626888 = validateParameter(valid_21626888, JString, required = false,
                                   default = nil)
  if valid_21626888 != nil:
    section.add "X-Amz-Credential", valid_21626888
  result.add "header", section
  ## parameters in `formData` object:
  ##   ClusterSecurityGroupName: JString (required)
  ##                           : The name of the cluster security group to be deleted.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ClusterSecurityGroupName` field"
  var valid_21626889 = formData.getOrDefault("ClusterSecurityGroupName")
  valid_21626889 = validateParameter(valid_21626889, JString, required = true,
                                   default = nil)
  if valid_21626889 != nil:
    section.add "ClusterSecurityGroupName", valid_21626889
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626890: Call_PostDeleteClusterSecurityGroup_21626877;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes an Amazon Redshift security group.</p> <note> <p>You cannot delete a security group that is associated with any clusters. You cannot delete the default security group.</p> </note> <p> For information about managing security groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html">Amazon Redshift Cluster Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  let valid = call_21626890.validator(path, query, header, formData, body, _)
  let scheme = call_21626890.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626890.makeUrl(scheme.get, call_21626890.host, call_21626890.base,
                               call_21626890.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626890, uri, valid, _)

proc call*(call_21626891: Call_PostDeleteClusterSecurityGroup_21626877;
          ClusterSecurityGroupName: string;
          Action: string = "DeleteClusterSecurityGroup";
          Version: string = "2012-12-01"): Recallable =
  ## postDeleteClusterSecurityGroup
  ## <p>Deletes an Amazon Redshift security group.</p> <note> <p>You cannot delete a security group that is associated with any clusters. You cannot delete the default security group.</p> </note> <p> For information about managing security groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html">Amazon Redshift Cluster Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ClusterSecurityGroupName: string (required)
  ##                           : The name of the cluster security group to be deleted.
  var query_21626892 = newJObject()
  var formData_21626893 = newJObject()
  add(query_21626892, "Action", newJString(Action))
  add(query_21626892, "Version", newJString(Version))
  add(formData_21626893, "ClusterSecurityGroupName",
      newJString(ClusterSecurityGroupName))
  result = call_21626891.call(nil, query_21626892, nil, formData_21626893, nil)

var postDeleteClusterSecurityGroup* = Call_PostDeleteClusterSecurityGroup_21626877(
    name: "postDeleteClusterSecurityGroup", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=DeleteClusterSecurityGroup",
    validator: validate_PostDeleteClusterSecurityGroup_21626878, base: "/",
    makeUrl: url_PostDeleteClusterSecurityGroup_21626879,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteClusterSecurityGroup_21626861 = ref object of OpenApiRestCall_21625418
proc url_GetDeleteClusterSecurityGroup_21626863(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteClusterSecurityGroup_21626862(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Deletes an Amazon Redshift security group.</p> <note> <p>You cannot delete a security group that is associated with any clusters. You cannot delete the default security group.</p> </note> <p> For information about managing security groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html">Amazon Redshift Cluster Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ClusterSecurityGroupName: JString (required)
  ##                           : The name of the cluster security group to be deleted.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ClusterSecurityGroupName` field"
  var valid_21626864 = query.getOrDefault("ClusterSecurityGroupName")
  valid_21626864 = validateParameter(valid_21626864, JString, required = true,
                                   default = nil)
  if valid_21626864 != nil:
    section.add "ClusterSecurityGroupName", valid_21626864
  var valid_21626865 = query.getOrDefault("Action")
  valid_21626865 = validateParameter(valid_21626865, JString, required = true, default = newJString(
      "DeleteClusterSecurityGroup"))
  if valid_21626865 != nil:
    section.add "Action", valid_21626865
  var valid_21626866 = query.getOrDefault("Version")
  valid_21626866 = validateParameter(valid_21626866, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626866 != nil:
    section.add "Version", valid_21626866
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626867 = header.getOrDefault("X-Amz-Date")
  valid_21626867 = validateParameter(valid_21626867, JString, required = false,
                                   default = nil)
  if valid_21626867 != nil:
    section.add "X-Amz-Date", valid_21626867
  var valid_21626868 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626868 = validateParameter(valid_21626868, JString, required = false,
                                   default = nil)
  if valid_21626868 != nil:
    section.add "X-Amz-Security-Token", valid_21626868
  var valid_21626869 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626869 = validateParameter(valid_21626869, JString, required = false,
                                   default = nil)
  if valid_21626869 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626869
  var valid_21626870 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626870 = validateParameter(valid_21626870, JString, required = false,
                                   default = nil)
  if valid_21626870 != nil:
    section.add "X-Amz-Algorithm", valid_21626870
  var valid_21626871 = header.getOrDefault("X-Amz-Signature")
  valid_21626871 = validateParameter(valid_21626871, JString, required = false,
                                   default = nil)
  if valid_21626871 != nil:
    section.add "X-Amz-Signature", valid_21626871
  var valid_21626872 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626872 = validateParameter(valid_21626872, JString, required = false,
                                   default = nil)
  if valid_21626872 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626872
  var valid_21626873 = header.getOrDefault("X-Amz-Credential")
  valid_21626873 = validateParameter(valid_21626873, JString, required = false,
                                   default = nil)
  if valid_21626873 != nil:
    section.add "X-Amz-Credential", valid_21626873
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626874: Call_GetDeleteClusterSecurityGroup_21626861;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes an Amazon Redshift security group.</p> <note> <p>You cannot delete a security group that is associated with any clusters. You cannot delete the default security group.</p> </note> <p> For information about managing security groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html">Amazon Redshift Cluster Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  let valid = call_21626874.validator(path, query, header, formData, body, _)
  let scheme = call_21626874.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626874.makeUrl(scheme.get, call_21626874.host, call_21626874.base,
                               call_21626874.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626874, uri, valid, _)

proc call*(call_21626875: Call_GetDeleteClusterSecurityGroup_21626861;
          ClusterSecurityGroupName: string;
          Action: string = "DeleteClusterSecurityGroup";
          Version: string = "2012-12-01"): Recallable =
  ## getDeleteClusterSecurityGroup
  ## <p>Deletes an Amazon Redshift security group.</p> <note> <p>You cannot delete a security group that is associated with any clusters. You cannot delete the default security group.</p> </note> <p> For information about managing security groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html">Amazon Redshift Cluster Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ##   ClusterSecurityGroupName: string (required)
  ##                           : The name of the cluster security group to be deleted.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626876 = newJObject()
  add(query_21626876, "ClusterSecurityGroupName",
      newJString(ClusterSecurityGroupName))
  add(query_21626876, "Action", newJString(Action))
  add(query_21626876, "Version", newJString(Version))
  result = call_21626875.call(nil, query_21626876, nil, nil, nil)

var getDeleteClusterSecurityGroup* = Call_GetDeleteClusterSecurityGroup_21626861(
    name: "getDeleteClusterSecurityGroup", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=DeleteClusterSecurityGroup",
    validator: validate_GetDeleteClusterSecurityGroup_21626862, base: "/",
    makeUrl: url_GetDeleteClusterSecurityGroup_21626863,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteClusterSnapshot_21626911 = ref object of OpenApiRestCall_21625418
proc url_PostDeleteClusterSnapshot_21626913(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteClusterSnapshot_21626912(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes the specified manual snapshot. The snapshot must be in the <code>available</code> state, with no other users authorized to access the snapshot. </p> <p>Unlike automated snapshots, manual snapshots are retained even after you delete your cluster. Amazon Redshift does not delete your manual snapshots. You must delete manual snapshot explicitly to avoid getting charged. If other accounts are authorized to access the snapshot, you must revoke all of the authorizations before you can delete the snapshot.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626914 = query.getOrDefault("Action")
  valid_21626914 = validateParameter(valid_21626914, JString, required = true, default = newJString(
      "DeleteClusterSnapshot"))
  if valid_21626914 != nil:
    section.add "Action", valid_21626914
  var valid_21626915 = query.getOrDefault("Version")
  valid_21626915 = validateParameter(valid_21626915, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626915 != nil:
    section.add "Version", valid_21626915
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626916 = header.getOrDefault("X-Amz-Date")
  valid_21626916 = validateParameter(valid_21626916, JString, required = false,
                                   default = nil)
  if valid_21626916 != nil:
    section.add "X-Amz-Date", valid_21626916
  var valid_21626917 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626917 = validateParameter(valid_21626917, JString, required = false,
                                   default = nil)
  if valid_21626917 != nil:
    section.add "X-Amz-Security-Token", valid_21626917
  var valid_21626918 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626918 = validateParameter(valid_21626918, JString, required = false,
                                   default = nil)
  if valid_21626918 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626918
  var valid_21626919 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626919 = validateParameter(valid_21626919, JString, required = false,
                                   default = nil)
  if valid_21626919 != nil:
    section.add "X-Amz-Algorithm", valid_21626919
  var valid_21626920 = header.getOrDefault("X-Amz-Signature")
  valid_21626920 = validateParameter(valid_21626920, JString, required = false,
                                   default = nil)
  if valid_21626920 != nil:
    section.add "X-Amz-Signature", valid_21626920
  var valid_21626921 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626921 = validateParameter(valid_21626921, JString, required = false,
                                   default = nil)
  if valid_21626921 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626921
  var valid_21626922 = header.getOrDefault("X-Amz-Credential")
  valid_21626922 = validateParameter(valid_21626922, JString, required = false,
                                   default = nil)
  if valid_21626922 != nil:
    section.add "X-Amz-Credential", valid_21626922
  result.add "header", section
  ## parameters in `formData` object:
  ##   SnapshotClusterIdentifier: JString
  ##                            : <p>The unique identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.</p> <p>Constraints: Must be the name of valid cluster.</p>
  ##   SnapshotIdentifier: JString (required)
  ##                     : <p>The unique identifier of the manual snapshot to be deleted.</p> <p>Constraints: Must be the name of an existing snapshot that is in the <code>available</code>, <code>failed</code>, or <code>cancelled</code> state.</p>
  section = newJObject()
  var valid_21626923 = formData.getOrDefault("SnapshotClusterIdentifier")
  valid_21626923 = validateParameter(valid_21626923, JString, required = false,
                                   default = nil)
  if valid_21626923 != nil:
    section.add "SnapshotClusterIdentifier", valid_21626923
  assert formData != nil, "formData argument is necessary due to required `SnapshotIdentifier` field"
  var valid_21626924 = formData.getOrDefault("SnapshotIdentifier")
  valid_21626924 = validateParameter(valid_21626924, JString, required = true,
                                   default = nil)
  if valid_21626924 != nil:
    section.add "SnapshotIdentifier", valid_21626924
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626925: Call_PostDeleteClusterSnapshot_21626911;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the specified manual snapshot. The snapshot must be in the <code>available</code> state, with no other users authorized to access the snapshot. </p> <p>Unlike automated snapshots, manual snapshots are retained even after you delete your cluster. Amazon Redshift does not delete your manual snapshots. You must delete manual snapshot explicitly to avoid getting charged. If other accounts are authorized to access the snapshot, you must revoke all of the authorizations before you can delete the snapshot.</p>
  ## 
  let valid = call_21626925.validator(path, query, header, formData, body, _)
  let scheme = call_21626925.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626925.makeUrl(scheme.get, call_21626925.host, call_21626925.base,
                               call_21626925.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626925, uri, valid, _)

proc call*(call_21626926: Call_PostDeleteClusterSnapshot_21626911;
          SnapshotIdentifier: string; SnapshotClusterIdentifier: string = "";
          Action: string = "DeleteClusterSnapshot"; Version: string = "2012-12-01"): Recallable =
  ## postDeleteClusterSnapshot
  ## <p>Deletes the specified manual snapshot. The snapshot must be in the <code>available</code> state, with no other users authorized to access the snapshot. </p> <p>Unlike automated snapshots, manual snapshots are retained even after you delete your cluster. Amazon Redshift does not delete your manual snapshots. You must delete manual snapshot explicitly to avoid getting charged. If other accounts are authorized to access the snapshot, you must revoke all of the authorizations before you can delete the snapshot.</p>
  ##   SnapshotClusterIdentifier: string
  ##                            : <p>The unique identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.</p> <p>Constraints: Must be the name of valid cluster.</p>
  ##   Action: string (required)
  ##   SnapshotIdentifier: string (required)
  ##                     : <p>The unique identifier of the manual snapshot to be deleted.</p> <p>Constraints: Must be the name of an existing snapshot that is in the <code>available</code>, <code>failed</code>, or <code>cancelled</code> state.</p>
  ##   Version: string (required)
  var query_21626927 = newJObject()
  var formData_21626928 = newJObject()
  add(formData_21626928, "SnapshotClusterIdentifier",
      newJString(SnapshotClusterIdentifier))
  add(query_21626927, "Action", newJString(Action))
  add(formData_21626928, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  add(query_21626927, "Version", newJString(Version))
  result = call_21626926.call(nil, query_21626927, nil, formData_21626928, nil)

var postDeleteClusterSnapshot* = Call_PostDeleteClusterSnapshot_21626911(
    name: "postDeleteClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=DeleteClusterSnapshot",
    validator: validate_PostDeleteClusterSnapshot_21626912, base: "/",
    makeUrl: url_PostDeleteClusterSnapshot_21626913,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteClusterSnapshot_21626894 = ref object of OpenApiRestCall_21625418
proc url_GetDeleteClusterSnapshot_21626896(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteClusterSnapshot_21626895(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes the specified manual snapshot. The snapshot must be in the <code>available</code> state, with no other users authorized to access the snapshot. </p> <p>Unlike automated snapshots, manual snapshots are retained even after you delete your cluster. Amazon Redshift does not delete your manual snapshots. You must delete manual snapshot explicitly to avoid getting charged. If other accounts are authorized to access the snapshot, you must revoke all of the authorizations before you can delete the snapshot.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   SnapshotClusterIdentifier: JString
  ##                            : <p>The unique identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.</p> <p>Constraints: Must be the name of valid cluster.</p>
  ##   SnapshotIdentifier: JString (required)
  ##                     : <p>The unique identifier of the manual snapshot to be deleted.</p> <p>Constraints: Must be the name of an existing snapshot that is in the <code>available</code>, <code>failed</code>, or <code>cancelled</code> state.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626897 = query.getOrDefault("Action")
  valid_21626897 = validateParameter(valid_21626897, JString, required = true, default = newJString(
      "DeleteClusterSnapshot"))
  if valid_21626897 != nil:
    section.add "Action", valid_21626897
  var valid_21626898 = query.getOrDefault("SnapshotClusterIdentifier")
  valid_21626898 = validateParameter(valid_21626898, JString, required = false,
                                   default = nil)
  if valid_21626898 != nil:
    section.add "SnapshotClusterIdentifier", valid_21626898
  var valid_21626899 = query.getOrDefault("SnapshotIdentifier")
  valid_21626899 = validateParameter(valid_21626899, JString, required = true,
                                   default = nil)
  if valid_21626899 != nil:
    section.add "SnapshotIdentifier", valid_21626899
  var valid_21626900 = query.getOrDefault("Version")
  valid_21626900 = validateParameter(valid_21626900, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626900 != nil:
    section.add "Version", valid_21626900
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626901 = header.getOrDefault("X-Amz-Date")
  valid_21626901 = validateParameter(valid_21626901, JString, required = false,
                                   default = nil)
  if valid_21626901 != nil:
    section.add "X-Amz-Date", valid_21626901
  var valid_21626902 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626902 = validateParameter(valid_21626902, JString, required = false,
                                   default = nil)
  if valid_21626902 != nil:
    section.add "X-Amz-Security-Token", valid_21626902
  var valid_21626903 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626903 = validateParameter(valid_21626903, JString, required = false,
                                   default = nil)
  if valid_21626903 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626903
  var valid_21626904 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626904 = validateParameter(valid_21626904, JString, required = false,
                                   default = nil)
  if valid_21626904 != nil:
    section.add "X-Amz-Algorithm", valid_21626904
  var valid_21626905 = header.getOrDefault("X-Amz-Signature")
  valid_21626905 = validateParameter(valid_21626905, JString, required = false,
                                   default = nil)
  if valid_21626905 != nil:
    section.add "X-Amz-Signature", valid_21626905
  var valid_21626906 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626906 = validateParameter(valid_21626906, JString, required = false,
                                   default = nil)
  if valid_21626906 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626906
  var valid_21626907 = header.getOrDefault("X-Amz-Credential")
  valid_21626907 = validateParameter(valid_21626907, JString, required = false,
                                   default = nil)
  if valid_21626907 != nil:
    section.add "X-Amz-Credential", valid_21626907
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626908: Call_GetDeleteClusterSnapshot_21626894;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the specified manual snapshot. The snapshot must be in the <code>available</code> state, with no other users authorized to access the snapshot. </p> <p>Unlike automated snapshots, manual snapshots are retained even after you delete your cluster. Amazon Redshift does not delete your manual snapshots. You must delete manual snapshot explicitly to avoid getting charged. If other accounts are authorized to access the snapshot, you must revoke all of the authorizations before you can delete the snapshot.</p>
  ## 
  let valid = call_21626908.validator(path, query, header, formData, body, _)
  let scheme = call_21626908.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626908.makeUrl(scheme.get, call_21626908.host, call_21626908.base,
                               call_21626908.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626908, uri, valid, _)

proc call*(call_21626909: Call_GetDeleteClusterSnapshot_21626894;
          SnapshotIdentifier: string; Action: string = "DeleteClusterSnapshot";
          SnapshotClusterIdentifier: string = ""; Version: string = "2012-12-01"): Recallable =
  ## getDeleteClusterSnapshot
  ## <p>Deletes the specified manual snapshot. The snapshot must be in the <code>available</code> state, with no other users authorized to access the snapshot. </p> <p>Unlike automated snapshots, manual snapshots are retained even after you delete your cluster. Amazon Redshift does not delete your manual snapshots. You must delete manual snapshot explicitly to avoid getting charged. If other accounts are authorized to access the snapshot, you must revoke all of the authorizations before you can delete the snapshot.</p>
  ##   Action: string (required)
  ##   SnapshotClusterIdentifier: string
  ##                            : <p>The unique identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.</p> <p>Constraints: Must be the name of valid cluster.</p>
  ##   SnapshotIdentifier: string (required)
  ##                     : <p>The unique identifier of the manual snapshot to be deleted.</p> <p>Constraints: Must be the name of an existing snapshot that is in the <code>available</code>, <code>failed</code>, or <code>cancelled</code> state.</p>
  ##   Version: string (required)
  var query_21626910 = newJObject()
  add(query_21626910, "Action", newJString(Action))
  add(query_21626910, "SnapshotClusterIdentifier",
      newJString(SnapshotClusterIdentifier))
  add(query_21626910, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  add(query_21626910, "Version", newJString(Version))
  result = call_21626909.call(nil, query_21626910, nil, nil, nil)

var getDeleteClusterSnapshot* = Call_GetDeleteClusterSnapshot_21626894(
    name: "getDeleteClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=DeleteClusterSnapshot",
    validator: validate_GetDeleteClusterSnapshot_21626895, base: "/",
    makeUrl: url_GetDeleteClusterSnapshot_21626896,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteClusterSubnetGroup_21626945 = ref object of OpenApiRestCall_21625418
proc url_PostDeleteClusterSubnetGroup_21626947(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteClusterSubnetGroup_21626946(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Deletes the specified cluster subnet group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626948 = query.getOrDefault("Action")
  valid_21626948 = validateParameter(valid_21626948, JString, required = true, default = newJString(
      "DeleteClusterSubnetGroup"))
  if valid_21626948 != nil:
    section.add "Action", valid_21626948
  var valid_21626949 = query.getOrDefault("Version")
  valid_21626949 = validateParameter(valid_21626949, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626949 != nil:
    section.add "Version", valid_21626949
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626950 = header.getOrDefault("X-Amz-Date")
  valid_21626950 = validateParameter(valid_21626950, JString, required = false,
                                   default = nil)
  if valid_21626950 != nil:
    section.add "X-Amz-Date", valid_21626950
  var valid_21626951 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626951 = validateParameter(valid_21626951, JString, required = false,
                                   default = nil)
  if valid_21626951 != nil:
    section.add "X-Amz-Security-Token", valid_21626951
  var valid_21626952 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626952 = validateParameter(valid_21626952, JString, required = false,
                                   default = nil)
  if valid_21626952 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626952
  var valid_21626953 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626953 = validateParameter(valid_21626953, JString, required = false,
                                   default = nil)
  if valid_21626953 != nil:
    section.add "X-Amz-Algorithm", valid_21626953
  var valid_21626954 = header.getOrDefault("X-Amz-Signature")
  valid_21626954 = validateParameter(valid_21626954, JString, required = false,
                                   default = nil)
  if valid_21626954 != nil:
    section.add "X-Amz-Signature", valid_21626954
  var valid_21626955 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626955 = validateParameter(valid_21626955, JString, required = false,
                                   default = nil)
  if valid_21626955 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626955
  var valid_21626956 = header.getOrDefault("X-Amz-Credential")
  valid_21626956 = validateParameter(valid_21626956, JString, required = false,
                                   default = nil)
  if valid_21626956 != nil:
    section.add "X-Amz-Credential", valid_21626956
  result.add "header", section
  ## parameters in `formData` object:
  ##   ClusterSubnetGroupName: JString (required)
  ##                         : The name of the cluster subnet group name to be deleted.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ClusterSubnetGroupName` field"
  var valid_21626957 = formData.getOrDefault("ClusterSubnetGroupName")
  valid_21626957 = validateParameter(valid_21626957, JString, required = true,
                                   default = nil)
  if valid_21626957 != nil:
    section.add "ClusterSubnetGroupName", valid_21626957
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626958: Call_PostDeleteClusterSubnetGroup_21626945;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes the specified cluster subnet group.
  ## 
  let valid = call_21626958.validator(path, query, header, formData, body, _)
  let scheme = call_21626958.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626958.makeUrl(scheme.get, call_21626958.host, call_21626958.base,
                               call_21626958.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626958, uri, valid, _)

proc call*(call_21626959: Call_PostDeleteClusterSubnetGroup_21626945;
          ClusterSubnetGroupName: string;
          Action: string = "DeleteClusterSubnetGroup";
          Version: string = "2012-12-01"): Recallable =
  ## postDeleteClusterSubnetGroup
  ## Deletes the specified cluster subnet group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ClusterSubnetGroupName: string (required)
  ##                         : The name of the cluster subnet group name to be deleted.
  var query_21626960 = newJObject()
  var formData_21626961 = newJObject()
  add(query_21626960, "Action", newJString(Action))
  add(query_21626960, "Version", newJString(Version))
  add(formData_21626961, "ClusterSubnetGroupName",
      newJString(ClusterSubnetGroupName))
  result = call_21626959.call(nil, query_21626960, nil, formData_21626961, nil)

var postDeleteClusterSubnetGroup* = Call_PostDeleteClusterSubnetGroup_21626945(
    name: "postDeleteClusterSubnetGroup", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=DeleteClusterSubnetGroup",
    validator: validate_PostDeleteClusterSubnetGroup_21626946, base: "/",
    makeUrl: url_PostDeleteClusterSubnetGroup_21626947,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteClusterSubnetGroup_21626929 = ref object of OpenApiRestCall_21625418
proc url_GetDeleteClusterSubnetGroup_21626931(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteClusterSubnetGroup_21626930(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes the specified cluster subnet group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ClusterSubnetGroupName: JString (required)
  ##                         : The name of the cluster subnet group name to be deleted.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ClusterSubnetGroupName` field"
  var valid_21626932 = query.getOrDefault("ClusterSubnetGroupName")
  valid_21626932 = validateParameter(valid_21626932, JString, required = true,
                                   default = nil)
  if valid_21626932 != nil:
    section.add "ClusterSubnetGroupName", valid_21626932
  var valid_21626933 = query.getOrDefault("Action")
  valid_21626933 = validateParameter(valid_21626933, JString, required = true, default = newJString(
      "DeleteClusterSubnetGroup"))
  if valid_21626933 != nil:
    section.add "Action", valid_21626933
  var valid_21626934 = query.getOrDefault("Version")
  valid_21626934 = validateParameter(valid_21626934, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626934 != nil:
    section.add "Version", valid_21626934
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626935 = header.getOrDefault("X-Amz-Date")
  valid_21626935 = validateParameter(valid_21626935, JString, required = false,
                                   default = nil)
  if valid_21626935 != nil:
    section.add "X-Amz-Date", valid_21626935
  var valid_21626936 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626936 = validateParameter(valid_21626936, JString, required = false,
                                   default = nil)
  if valid_21626936 != nil:
    section.add "X-Amz-Security-Token", valid_21626936
  var valid_21626937 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626937 = validateParameter(valid_21626937, JString, required = false,
                                   default = nil)
  if valid_21626937 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626937
  var valid_21626938 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626938 = validateParameter(valid_21626938, JString, required = false,
                                   default = nil)
  if valid_21626938 != nil:
    section.add "X-Amz-Algorithm", valid_21626938
  var valid_21626939 = header.getOrDefault("X-Amz-Signature")
  valid_21626939 = validateParameter(valid_21626939, JString, required = false,
                                   default = nil)
  if valid_21626939 != nil:
    section.add "X-Amz-Signature", valid_21626939
  var valid_21626940 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626940 = validateParameter(valid_21626940, JString, required = false,
                                   default = nil)
  if valid_21626940 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626940
  var valid_21626941 = header.getOrDefault("X-Amz-Credential")
  valid_21626941 = validateParameter(valid_21626941, JString, required = false,
                                   default = nil)
  if valid_21626941 != nil:
    section.add "X-Amz-Credential", valid_21626941
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626942: Call_GetDeleteClusterSubnetGroup_21626929;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes the specified cluster subnet group.
  ## 
  let valid = call_21626942.validator(path, query, header, formData, body, _)
  let scheme = call_21626942.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626942.makeUrl(scheme.get, call_21626942.host, call_21626942.base,
                               call_21626942.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626942, uri, valid, _)

proc call*(call_21626943: Call_GetDeleteClusterSubnetGroup_21626929;
          ClusterSubnetGroupName: string;
          Action: string = "DeleteClusterSubnetGroup";
          Version: string = "2012-12-01"): Recallable =
  ## getDeleteClusterSubnetGroup
  ## Deletes the specified cluster subnet group.
  ##   ClusterSubnetGroupName: string (required)
  ##                         : The name of the cluster subnet group name to be deleted.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626944 = newJObject()
  add(query_21626944, "ClusterSubnetGroupName", newJString(ClusterSubnetGroupName))
  add(query_21626944, "Action", newJString(Action))
  add(query_21626944, "Version", newJString(Version))
  result = call_21626943.call(nil, query_21626944, nil, nil, nil)

var getDeleteClusterSubnetGroup* = Call_GetDeleteClusterSubnetGroup_21626929(
    name: "getDeleteClusterSubnetGroup", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=DeleteClusterSubnetGroup",
    validator: validate_GetDeleteClusterSubnetGroup_21626930, base: "/",
    makeUrl: url_GetDeleteClusterSubnetGroup_21626931,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteEventSubscription_21626978 = ref object of OpenApiRestCall_21625418
proc url_PostDeleteEventSubscription_21626980(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteEventSubscription_21626979(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes an Amazon Redshift event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626981 = query.getOrDefault("Action")
  valid_21626981 = validateParameter(valid_21626981, JString, required = true, default = newJString(
      "DeleteEventSubscription"))
  if valid_21626981 != nil:
    section.add "Action", valid_21626981
  var valid_21626982 = query.getOrDefault("Version")
  valid_21626982 = validateParameter(valid_21626982, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626982 != nil:
    section.add "Version", valid_21626982
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626983 = header.getOrDefault("X-Amz-Date")
  valid_21626983 = validateParameter(valid_21626983, JString, required = false,
                                   default = nil)
  if valid_21626983 != nil:
    section.add "X-Amz-Date", valid_21626983
  var valid_21626984 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626984 = validateParameter(valid_21626984, JString, required = false,
                                   default = nil)
  if valid_21626984 != nil:
    section.add "X-Amz-Security-Token", valid_21626984
  var valid_21626985 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626985 = validateParameter(valid_21626985, JString, required = false,
                                   default = nil)
  if valid_21626985 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626985
  var valid_21626986 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626986 = validateParameter(valid_21626986, JString, required = false,
                                   default = nil)
  if valid_21626986 != nil:
    section.add "X-Amz-Algorithm", valid_21626986
  var valid_21626987 = header.getOrDefault("X-Amz-Signature")
  valid_21626987 = validateParameter(valid_21626987, JString, required = false,
                                   default = nil)
  if valid_21626987 != nil:
    section.add "X-Amz-Signature", valid_21626987
  var valid_21626988 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626988 = validateParameter(valid_21626988, JString, required = false,
                                   default = nil)
  if valid_21626988 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626988
  var valid_21626989 = header.getOrDefault("X-Amz-Credential")
  valid_21626989 = validateParameter(valid_21626989, JString, required = false,
                                   default = nil)
  if valid_21626989 != nil:
    section.add "X-Amz-Credential", valid_21626989
  result.add "header", section
  ## parameters in `formData` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the Amazon Redshift event notification subscription to be deleted.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_21626990 = formData.getOrDefault("SubscriptionName")
  valid_21626990 = validateParameter(valid_21626990, JString, required = true,
                                   default = nil)
  if valid_21626990 != nil:
    section.add "SubscriptionName", valid_21626990
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626991: Call_PostDeleteEventSubscription_21626978;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes an Amazon Redshift event notification subscription.
  ## 
  let valid = call_21626991.validator(path, query, header, formData, body, _)
  let scheme = call_21626991.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626991.makeUrl(scheme.get, call_21626991.host, call_21626991.base,
                               call_21626991.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626991, uri, valid, _)

proc call*(call_21626992: Call_PostDeleteEventSubscription_21626978;
          SubscriptionName: string; Action: string = "DeleteEventSubscription";
          Version: string = "2012-12-01"): Recallable =
  ## postDeleteEventSubscription
  ## Deletes an Amazon Redshift event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the Amazon Redshift event notification subscription to be deleted.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626993 = newJObject()
  var formData_21626994 = newJObject()
  add(formData_21626994, "SubscriptionName", newJString(SubscriptionName))
  add(query_21626993, "Action", newJString(Action))
  add(query_21626993, "Version", newJString(Version))
  result = call_21626992.call(nil, query_21626993, nil, formData_21626994, nil)

var postDeleteEventSubscription* = Call_PostDeleteEventSubscription_21626978(
    name: "postDeleteEventSubscription", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=DeleteEventSubscription",
    validator: validate_PostDeleteEventSubscription_21626979, base: "/",
    makeUrl: url_PostDeleteEventSubscription_21626980,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteEventSubscription_21626962 = ref object of OpenApiRestCall_21625418
proc url_GetDeleteEventSubscription_21626964(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteEventSubscription_21626963(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes an Amazon Redshift event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   SubscriptionName: JString (required)
  ##                   : The name of the Amazon Redshift event notification subscription to be deleted.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626965 = query.getOrDefault("Action")
  valid_21626965 = validateParameter(valid_21626965, JString, required = true, default = newJString(
      "DeleteEventSubscription"))
  if valid_21626965 != nil:
    section.add "Action", valid_21626965
  var valid_21626966 = query.getOrDefault("SubscriptionName")
  valid_21626966 = validateParameter(valid_21626966, JString, required = true,
                                   default = nil)
  if valid_21626966 != nil:
    section.add "SubscriptionName", valid_21626966
  var valid_21626967 = query.getOrDefault("Version")
  valid_21626967 = validateParameter(valid_21626967, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21626967 != nil:
    section.add "Version", valid_21626967
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626968 = header.getOrDefault("X-Amz-Date")
  valid_21626968 = validateParameter(valid_21626968, JString, required = false,
                                   default = nil)
  if valid_21626968 != nil:
    section.add "X-Amz-Date", valid_21626968
  var valid_21626969 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626969 = validateParameter(valid_21626969, JString, required = false,
                                   default = nil)
  if valid_21626969 != nil:
    section.add "X-Amz-Security-Token", valid_21626969
  var valid_21626970 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626970 = validateParameter(valid_21626970, JString, required = false,
                                   default = nil)
  if valid_21626970 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626970
  var valid_21626971 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626971 = validateParameter(valid_21626971, JString, required = false,
                                   default = nil)
  if valid_21626971 != nil:
    section.add "X-Amz-Algorithm", valid_21626971
  var valid_21626972 = header.getOrDefault("X-Amz-Signature")
  valid_21626972 = validateParameter(valid_21626972, JString, required = false,
                                   default = nil)
  if valid_21626972 != nil:
    section.add "X-Amz-Signature", valid_21626972
  var valid_21626973 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626973 = validateParameter(valid_21626973, JString, required = false,
                                   default = nil)
  if valid_21626973 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626973
  var valid_21626974 = header.getOrDefault("X-Amz-Credential")
  valid_21626974 = validateParameter(valid_21626974, JString, required = false,
                                   default = nil)
  if valid_21626974 != nil:
    section.add "X-Amz-Credential", valid_21626974
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626975: Call_GetDeleteEventSubscription_21626962;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes an Amazon Redshift event notification subscription.
  ## 
  let valid = call_21626975.validator(path, query, header, formData, body, _)
  let scheme = call_21626975.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626975.makeUrl(scheme.get, call_21626975.host, call_21626975.base,
                               call_21626975.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626975, uri, valid, _)

proc call*(call_21626976: Call_GetDeleteEventSubscription_21626962;
          SubscriptionName: string; Action: string = "DeleteEventSubscription";
          Version: string = "2012-12-01"): Recallable =
  ## getDeleteEventSubscription
  ## Deletes an Amazon Redshift event notification subscription.
  ##   Action: string (required)
  ##   SubscriptionName: string (required)
  ##                   : The name of the Amazon Redshift event notification subscription to be deleted.
  ##   Version: string (required)
  var query_21626977 = newJObject()
  add(query_21626977, "Action", newJString(Action))
  add(query_21626977, "SubscriptionName", newJString(SubscriptionName))
  add(query_21626977, "Version", newJString(Version))
  result = call_21626976.call(nil, query_21626977, nil, nil, nil)

var getDeleteEventSubscription* = Call_GetDeleteEventSubscription_21626962(
    name: "getDeleteEventSubscription", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=DeleteEventSubscription",
    validator: validate_GetDeleteEventSubscription_21626963, base: "/",
    makeUrl: url_GetDeleteEventSubscription_21626964,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteHsmClientCertificate_21627011 = ref object of OpenApiRestCall_21625418
proc url_PostDeleteHsmClientCertificate_21627013(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteHsmClientCertificate_21627012(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Deletes the specified HSM client certificate.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627014 = query.getOrDefault("Action")
  valid_21627014 = validateParameter(valid_21627014, JString, required = true, default = newJString(
      "DeleteHsmClientCertificate"))
  if valid_21627014 != nil:
    section.add "Action", valid_21627014
  var valid_21627015 = query.getOrDefault("Version")
  valid_21627015 = validateParameter(valid_21627015, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627015 != nil:
    section.add "Version", valid_21627015
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627016 = header.getOrDefault("X-Amz-Date")
  valid_21627016 = validateParameter(valid_21627016, JString, required = false,
                                   default = nil)
  if valid_21627016 != nil:
    section.add "X-Amz-Date", valid_21627016
  var valid_21627017 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627017 = validateParameter(valid_21627017, JString, required = false,
                                   default = nil)
  if valid_21627017 != nil:
    section.add "X-Amz-Security-Token", valid_21627017
  var valid_21627018 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627018 = validateParameter(valid_21627018, JString, required = false,
                                   default = nil)
  if valid_21627018 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627018
  var valid_21627019 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627019 = validateParameter(valid_21627019, JString, required = false,
                                   default = nil)
  if valid_21627019 != nil:
    section.add "X-Amz-Algorithm", valid_21627019
  var valid_21627020 = header.getOrDefault("X-Amz-Signature")
  valid_21627020 = validateParameter(valid_21627020, JString, required = false,
                                   default = nil)
  if valid_21627020 != nil:
    section.add "X-Amz-Signature", valid_21627020
  var valid_21627021 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627021 = validateParameter(valid_21627021, JString, required = false,
                                   default = nil)
  if valid_21627021 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627021
  var valid_21627022 = header.getOrDefault("X-Amz-Credential")
  valid_21627022 = validateParameter(valid_21627022, JString, required = false,
                                   default = nil)
  if valid_21627022 != nil:
    section.add "X-Amz-Credential", valid_21627022
  result.add "header", section
  ## parameters in `formData` object:
  ##   HsmClientCertificateIdentifier: JString (required)
  ##                                 : The identifier of the HSM client certificate to be deleted.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `HsmClientCertificateIdentifier` field"
  var valid_21627023 = formData.getOrDefault("HsmClientCertificateIdentifier")
  valid_21627023 = validateParameter(valid_21627023, JString, required = true,
                                   default = nil)
  if valid_21627023 != nil:
    section.add "HsmClientCertificateIdentifier", valid_21627023
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627024: Call_PostDeleteHsmClientCertificate_21627011;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes the specified HSM client certificate.
  ## 
  let valid = call_21627024.validator(path, query, header, formData, body, _)
  let scheme = call_21627024.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627024.makeUrl(scheme.get, call_21627024.host, call_21627024.base,
                               call_21627024.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627024, uri, valid, _)

proc call*(call_21627025: Call_PostDeleteHsmClientCertificate_21627011;
          HsmClientCertificateIdentifier: string;
          Action: string = "DeleteHsmClientCertificate";
          Version: string = "2012-12-01"): Recallable =
  ## postDeleteHsmClientCertificate
  ## Deletes the specified HSM client certificate.
  ##   Action: string (required)
  ##   HsmClientCertificateIdentifier: string (required)
  ##                                 : The identifier of the HSM client certificate to be deleted.
  ##   Version: string (required)
  var query_21627026 = newJObject()
  var formData_21627027 = newJObject()
  add(query_21627026, "Action", newJString(Action))
  add(formData_21627027, "HsmClientCertificateIdentifier",
      newJString(HsmClientCertificateIdentifier))
  add(query_21627026, "Version", newJString(Version))
  result = call_21627025.call(nil, query_21627026, nil, formData_21627027, nil)

var postDeleteHsmClientCertificate* = Call_PostDeleteHsmClientCertificate_21627011(
    name: "postDeleteHsmClientCertificate", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=DeleteHsmClientCertificate",
    validator: validate_PostDeleteHsmClientCertificate_21627012, base: "/",
    makeUrl: url_PostDeleteHsmClientCertificate_21627013,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteHsmClientCertificate_21626995 = ref object of OpenApiRestCall_21625418
proc url_GetDeleteHsmClientCertificate_21626997(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteHsmClientCertificate_21626996(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Deletes the specified HSM client certificate.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   HsmClientCertificateIdentifier: JString (required)
  ##                                 : The identifier of the HSM client certificate to be deleted.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `HsmClientCertificateIdentifier` field"
  var valid_21626998 = query.getOrDefault("HsmClientCertificateIdentifier")
  valid_21626998 = validateParameter(valid_21626998, JString, required = true,
                                   default = nil)
  if valid_21626998 != nil:
    section.add "HsmClientCertificateIdentifier", valid_21626998
  var valid_21626999 = query.getOrDefault("Action")
  valid_21626999 = validateParameter(valid_21626999, JString, required = true, default = newJString(
      "DeleteHsmClientCertificate"))
  if valid_21626999 != nil:
    section.add "Action", valid_21626999
  var valid_21627000 = query.getOrDefault("Version")
  valid_21627000 = validateParameter(valid_21627000, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627000 != nil:
    section.add "Version", valid_21627000
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627001 = header.getOrDefault("X-Amz-Date")
  valid_21627001 = validateParameter(valid_21627001, JString, required = false,
                                   default = nil)
  if valid_21627001 != nil:
    section.add "X-Amz-Date", valid_21627001
  var valid_21627002 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627002 = validateParameter(valid_21627002, JString, required = false,
                                   default = nil)
  if valid_21627002 != nil:
    section.add "X-Amz-Security-Token", valid_21627002
  var valid_21627003 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627003 = validateParameter(valid_21627003, JString, required = false,
                                   default = nil)
  if valid_21627003 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627003
  var valid_21627004 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627004 = validateParameter(valid_21627004, JString, required = false,
                                   default = nil)
  if valid_21627004 != nil:
    section.add "X-Amz-Algorithm", valid_21627004
  var valid_21627005 = header.getOrDefault("X-Amz-Signature")
  valid_21627005 = validateParameter(valid_21627005, JString, required = false,
                                   default = nil)
  if valid_21627005 != nil:
    section.add "X-Amz-Signature", valid_21627005
  var valid_21627006 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627006 = validateParameter(valid_21627006, JString, required = false,
                                   default = nil)
  if valid_21627006 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627006
  var valid_21627007 = header.getOrDefault("X-Amz-Credential")
  valid_21627007 = validateParameter(valid_21627007, JString, required = false,
                                   default = nil)
  if valid_21627007 != nil:
    section.add "X-Amz-Credential", valid_21627007
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627008: Call_GetDeleteHsmClientCertificate_21626995;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes the specified HSM client certificate.
  ## 
  let valid = call_21627008.validator(path, query, header, formData, body, _)
  let scheme = call_21627008.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627008.makeUrl(scheme.get, call_21627008.host, call_21627008.base,
                               call_21627008.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627008, uri, valid, _)

proc call*(call_21627009: Call_GetDeleteHsmClientCertificate_21626995;
          HsmClientCertificateIdentifier: string;
          Action: string = "DeleteHsmClientCertificate";
          Version: string = "2012-12-01"): Recallable =
  ## getDeleteHsmClientCertificate
  ## Deletes the specified HSM client certificate.
  ##   HsmClientCertificateIdentifier: string (required)
  ##                                 : The identifier of the HSM client certificate to be deleted.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627010 = newJObject()
  add(query_21627010, "HsmClientCertificateIdentifier",
      newJString(HsmClientCertificateIdentifier))
  add(query_21627010, "Action", newJString(Action))
  add(query_21627010, "Version", newJString(Version))
  result = call_21627009.call(nil, query_21627010, nil, nil, nil)

var getDeleteHsmClientCertificate* = Call_GetDeleteHsmClientCertificate_21626995(
    name: "getDeleteHsmClientCertificate", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=DeleteHsmClientCertificate",
    validator: validate_GetDeleteHsmClientCertificate_21626996, base: "/",
    makeUrl: url_GetDeleteHsmClientCertificate_21626997,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteHsmConfiguration_21627044 = ref object of OpenApiRestCall_21625418
proc url_PostDeleteHsmConfiguration_21627046(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteHsmConfiguration_21627045(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes the specified Amazon Redshift HSM configuration.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627047 = query.getOrDefault("Action")
  valid_21627047 = validateParameter(valid_21627047, JString, required = true, default = newJString(
      "DeleteHsmConfiguration"))
  if valid_21627047 != nil:
    section.add "Action", valid_21627047
  var valid_21627048 = query.getOrDefault("Version")
  valid_21627048 = validateParameter(valid_21627048, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627048 != nil:
    section.add "Version", valid_21627048
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627049 = header.getOrDefault("X-Amz-Date")
  valid_21627049 = validateParameter(valid_21627049, JString, required = false,
                                   default = nil)
  if valid_21627049 != nil:
    section.add "X-Amz-Date", valid_21627049
  var valid_21627050 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627050 = validateParameter(valid_21627050, JString, required = false,
                                   default = nil)
  if valid_21627050 != nil:
    section.add "X-Amz-Security-Token", valid_21627050
  var valid_21627051 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627051 = validateParameter(valid_21627051, JString, required = false,
                                   default = nil)
  if valid_21627051 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627051
  var valid_21627052 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627052 = validateParameter(valid_21627052, JString, required = false,
                                   default = nil)
  if valid_21627052 != nil:
    section.add "X-Amz-Algorithm", valid_21627052
  var valid_21627053 = header.getOrDefault("X-Amz-Signature")
  valid_21627053 = validateParameter(valid_21627053, JString, required = false,
                                   default = nil)
  if valid_21627053 != nil:
    section.add "X-Amz-Signature", valid_21627053
  var valid_21627054 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627054 = validateParameter(valid_21627054, JString, required = false,
                                   default = nil)
  if valid_21627054 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627054
  var valid_21627055 = header.getOrDefault("X-Amz-Credential")
  valid_21627055 = validateParameter(valid_21627055, JString, required = false,
                                   default = nil)
  if valid_21627055 != nil:
    section.add "X-Amz-Credential", valid_21627055
  result.add "header", section
  ## parameters in `formData` object:
  ##   HsmConfigurationIdentifier: JString (required)
  ##                             : The identifier of the Amazon Redshift HSM configuration to be deleted.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `HsmConfigurationIdentifier` field"
  var valid_21627056 = formData.getOrDefault("HsmConfigurationIdentifier")
  valid_21627056 = validateParameter(valid_21627056, JString, required = true,
                                   default = nil)
  if valid_21627056 != nil:
    section.add "HsmConfigurationIdentifier", valid_21627056
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627057: Call_PostDeleteHsmConfiguration_21627044;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes the specified Amazon Redshift HSM configuration.
  ## 
  let valid = call_21627057.validator(path, query, header, formData, body, _)
  let scheme = call_21627057.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627057.makeUrl(scheme.get, call_21627057.host, call_21627057.base,
                               call_21627057.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627057, uri, valid, _)

proc call*(call_21627058: Call_PostDeleteHsmConfiguration_21627044;
          HsmConfigurationIdentifier: string;
          Action: string = "DeleteHsmConfiguration"; Version: string = "2012-12-01"): Recallable =
  ## postDeleteHsmConfiguration
  ## Deletes the specified Amazon Redshift HSM configuration.
  ##   HsmConfigurationIdentifier: string (required)
  ##                             : The identifier of the Amazon Redshift HSM configuration to be deleted.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627059 = newJObject()
  var formData_21627060 = newJObject()
  add(formData_21627060, "HsmConfigurationIdentifier",
      newJString(HsmConfigurationIdentifier))
  add(query_21627059, "Action", newJString(Action))
  add(query_21627059, "Version", newJString(Version))
  result = call_21627058.call(nil, query_21627059, nil, formData_21627060, nil)

var postDeleteHsmConfiguration* = Call_PostDeleteHsmConfiguration_21627044(
    name: "postDeleteHsmConfiguration", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=DeleteHsmConfiguration",
    validator: validate_PostDeleteHsmConfiguration_21627045, base: "/",
    makeUrl: url_PostDeleteHsmConfiguration_21627046,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteHsmConfiguration_21627028 = ref object of OpenApiRestCall_21625418
proc url_GetDeleteHsmConfiguration_21627030(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteHsmConfiguration_21627029(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes the specified Amazon Redshift HSM configuration.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   HsmConfigurationIdentifier: JString (required)
  ##                             : The identifier of the Amazon Redshift HSM configuration to be deleted.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `HsmConfigurationIdentifier` field"
  var valid_21627031 = query.getOrDefault("HsmConfigurationIdentifier")
  valid_21627031 = validateParameter(valid_21627031, JString, required = true,
                                   default = nil)
  if valid_21627031 != nil:
    section.add "HsmConfigurationIdentifier", valid_21627031
  var valid_21627032 = query.getOrDefault("Action")
  valid_21627032 = validateParameter(valid_21627032, JString, required = true, default = newJString(
      "DeleteHsmConfiguration"))
  if valid_21627032 != nil:
    section.add "Action", valid_21627032
  var valid_21627033 = query.getOrDefault("Version")
  valid_21627033 = validateParameter(valid_21627033, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627033 != nil:
    section.add "Version", valid_21627033
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627034 = header.getOrDefault("X-Amz-Date")
  valid_21627034 = validateParameter(valid_21627034, JString, required = false,
                                   default = nil)
  if valid_21627034 != nil:
    section.add "X-Amz-Date", valid_21627034
  var valid_21627035 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627035 = validateParameter(valid_21627035, JString, required = false,
                                   default = nil)
  if valid_21627035 != nil:
    section.add "X-Amz-Security-Token", valid_21627035
  var valid_21627036 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627036 = validateParameter(valid_21627036, JString, required = false,
                                   default = nil)
  if valid_21627036 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627036
  var valid_21627037 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627037 = validateParameter(valid_21627037, JString, required = false,
                                   default = nil)
  if valid_21627037 != nil:
    section.add "X-Amz-Algorithm", valid_21627037
  var valid_21627038 = header.getOrDefault("X-Amz-Signature")
  valid_21627038 = validateParameter(valid_21627038, JString, required = false,
                                   default = nil)
  if valid_21627038 != nil:
    section.add "X-Amz-Signature", valid_21627038
  var valid_21627039 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627039 = validateParameter(valid_21627039, JString, required = false,
                                   default = nil)
  if valid_21627039 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627039
  var valid_21627040 = header.getOrDefault("X-Amz-Credential")
  valid_21627040 = validateParameter(valid_21627040, JString, required = false,
                                   default = nil)
  if valid_21627040 != nil:
    section.add "X-Amz-Credential", valid_21627040
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627041: Call_GetDeleteHsmConfiguration_21627028;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes the specified Amazon Redshift HSM configuration.
  ## 
  let valid = call_21627041.validator(path, query, header, formData, body, _)
  let scheme = call_21627041.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627041.makeUrl(scheme.get, call_21627041.host, call_21627041.base,
                               call_21627041.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627041, uri, valid, _)

proc call*(call_21627042: Call_GetDeleteHsmConfiguration_21627028;
          HsmConfigurationIdentifier: string;
          Action: string = "DeleteHsmConfiguration"; Version: string = "2012-12-01"): Recallable =
  ## getDeleteHsmConfiguration
  ## Deletes the specified Amazon Redshift HSM configuration.
  ##   HsmConfigurationIdentifier: string (required)
  ##                             : The identifier of the Amazon Redshift HSM configuration to be deleted.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627043 = newJObject()
  add(query_21627043, "HsmConfigurationIdentifier",
      newJString(HsmConfigurationIdentifier))
  add(query_21627043, "Action", newJString(Action))
  add(query_21627043, "Version", newJString(Version))
  result = call_21627042.call(nil, query_21627043, nil, nil, nil)

var getDeleteHsmConfiguration* = Call_GetDeleteHsmConfiguration_21627028(
    name: "getDeleteHsmConfiguration", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=DeleteHsmConfiguration",
    validator: validate_GetDeleteHsmConfiguration_21627029, base: "/",
    makeUrl: url_GetDeleteHsmConfiguration_21627030,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteScheduledAction_21627077 = ref object of OpenApiRestCall_21625418
proc url_PostDeleteScheduledAction_21627079(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteScheduledAction_21627078(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes a scheduled action. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627080 = query.getOrDefault("Action")
  valid_21627080 = validateParameter(valid_21627080, JString, required = true, default = newJString(
      "DeleteScheduledAction"))
  if valid_21627080 != nil:
    section.add "Action", valid_21627080
  var valid_21627081 = query.getOrDefault("Version")
  valid_21627081 = validateParameter(valid_21627081, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627081 != nil:
    section.add "Version", valid_21627081
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627082 = header.getOrDefault("X-Amz-Date")
  valid_21627082 = validateParameter(valid_21627082, JString, required = false,
                                   default = nil)
  if valid_21627082 != nil:
    section.add "X-Amz-Date", valid_21627082
  var valid_21627083 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627083 = validateParameter(valid_21627083, JString, required = false,
                                   default = nil)
  if valid_21627083 != nil:
    section.add "X-Amz-Security-Token", valid_21627083
  var valid_21627084 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627084 = validateParameter(valid_21627084, JString, required = false,
                                   default = nil)
  if valid_21627084 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627084
  var valid_21627085 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627085 = validateParameter(valid_21627085, JString, required = false,
                                   default = nil)
  if valid_21627085 != nil:
    section.add "X-Amz-Algorithm", valid_21627085
  var valid_21627086 = header.getOrDefault("X-Amz-Signature")
  valid_21627086 = validateParameter(valid_21627086, JString, required = false,
                                   default = nil)
  if valid_21627086 != nil:
    section.add "X-Amz-Signature", valid_21627086
  var valid_21627087 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627087 = validateParameter(valid_21627087, JString, required = false,
                                   default = nil)
  if valid_21627087 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627087
  var valid_21627088 = header.getOrDefault("X-Amz-Credential")
  valid_21627088 = validateParameter(valid_21627088, JString, required = false,
                                   default = nil)
  if valid_21627088 != nil:
    section.add "X-Amz-Credential", valid_21627088
  result.add "header", section
  ## parameters in `formData` object:
  ##   ScheduledActionName: JString (required)
  ##                      : The name of the scheduled action to delete. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ScheduledActionName` field"
  var valid_21627089 = formData.getOrDefault("ScheduledActionName")
  valid_21627089 = validateParameter(valid_21627089, JString, required = true,
                                   default = nil)
  if valid_21627089 != nil:
    section.add "ScheduledActionName", valid_21627089
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627090: Call_PostDeleteScheduledAction_21627077;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a scheduled action. 
  ## 
  let valid = call_21627090.validator(path, query, header, formData, body, _)
  let scheme = call_21627090.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627090.makeUrl(scheme.get, call_21627090.host, call_21627090.base,
                               call_21627090.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627090, uri, valid, _)

proc call*(call_21627091: Call_PostDeleteScheduledAction_21627077;
          ScheduledActionName: string; Action: string = "DeleteScheduledAction";
          Version: string = "2012-12-01"): Recallable =
  ## postDeleteScheduledAction
  ## Deletes a scheduled action. 
  ##   Action: string (required)
  ##   ScheduledActionName: string (required)
  ##                      : The name of the scheduled action to delete. 
  ##   Version: string (required)
  var query_21627092 = newJObject()
  var formData_21627093 = newJObject()
  add(query_21627092, "Action", newJString(Action))
  add(formData_21627093, "ScheduledActionName", newJString(ScheduledActionName))
  add(query_21627092, "Version", newJString(Version))
  result = call_21627091.call(nil, query_21627092, nil, formData_21627093, nil)

var postDeleteScheduledAction* = Call_PostDeleteScheduledAction_21627077(
    name: "postDeleteScheduledAction", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=DeleteScheduledAction",
    validator: validate_PostDeleteScheduledAction_21627078, base: "/",
    makeUrl: url_PostDeleteScheduledAction_21627079,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteScheduledAction_21627061 = ref object of OpenApiRestCall_21625418
proc url_GetDeleteScheduledAction_21627063(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteScheduledAction_21627062(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes a scheduled action. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ScheduledActionName: JString (required)
  ##                      : The name of the scheduled action to delete. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ScheduledActionName` field"
  var valid_21627064 = query.getOrDefault("ScheduledActionName")
  valid_21627064 = validateParameter(valid_21627064, JString, required = true,
                                   default = nil)
  if valid_21627064 != nil:
    section.add "ScheduledActionName", valid_21627064
  var valid_21627065 = query.getOrDefault("Action")
  valid_21627065 = validateParameter(valid_21627065, JString, required = true, default = newJString(
      "DeleteScheduledAction"))
  if valid_21627065 != nil:
    section.add "Action", valid_21627065
  var valid_21627066 = query.getOrDefault("Version")
  valid_21627066 = validateParameter(valid_21627066, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627066 != nil:
    section.add "Version", valid_21627066
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627067 = header.getOrDefault("X-Amz-Date")
  valid_21627067 = validateParameter(valid_21627067, JString, required = false,
                                   default = nil)
  if valid_21627067 != nil:
    section.add "X-Amz-Date", valid_21627067
  var valid_21627068 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627068 = validateParameter(valid_21627068, JString, required = false,
                                   default = nil)
  if valid_21627068 != nil:
    section.add "X-Amz-Security-Token", valid_21627068
  var valid_21627069 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627069 = validateParameter(valid_21627069, JString, required = false,
                                   default = nil)
  if valid_21627069 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627069
  var valid_21627070 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627070 = validateParameter(valid_21627070, JString, required = false,
                                   default = nil)
  if valid_21627070 != nil:
    section.add "X-Amz-Algorithm", valid_21627070
  var valid_21627071 = header.getOrDefault("X-Amz-Signature")
  valid_21627071 = validateParameter(valid_21627071, JString, required = false,
                                   default = nil)
  if valid_21627071 != nil:
    section.add "X-Amz-Signature", valid_21627071
  var valid_21627072 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627072 = validateParameter(valid_21627072, JString, required = false,
                                   default = nil)
  if valid_21627072 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627072
  var valid_21627073 = header.getOrDefault("X-Amz-Credential")
  valid_21627073 = validateParameter(valid_21627073, JString, required = false,
                                   default = nil)
  if valid_21627073 != nil:
    section.add "X-Amz-Credential", valid_21627073
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627074: Call_GetDeleteScheduledAction_21627061;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a scheduled action. 
  ## 
  let valid = call_21627074.validator(path, query, header, formData, body, _)
  let scheme = call_21627074.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627074.makeUrl(scheme.get, call_21627074.host, call_21627074.base,
                               call_21627074.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627074, uri, valid, _)

proc call*(call_21627075: Call_GetDeleteScheduledAction_21627061;
          ScheduledActionName: string; Action: string = "DeleteScheduledAction";
          Version: string = "2012-12-01"): Recallable =
  ## getDeleteScheduledAction
  ## Deletes a scheduled action. 
  ##   ScheduledActionName: string (required)
  ##                      : The name of the scheduled action to delete. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627076 = newJObject()
  add(query_21627076, "ScheduledActionName", newJString(ScheduledActionName))
  add(query_21627076, "Action", newJString(Action))
  add(query_21627076, "Version", newJString(Version))
  result = call_21627075.call(nil, query_21627076, nil, nil, nil)

var getDeleteScheduledAction* = Call_GetDeleteScheduledAction_21627061(
    name: "getDeleteScheduledAction", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=DeleteScheduledAction",
    validator: validate_GetDeleteScheduledAction_21627062, base: "/",
    makeUrl: url_GetDeleteScheduledAction_21627063,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteSnapshotCopyGrant_21627110 = ref object of OpenApiRestCall_21625418
proc url_PostDeleteSnapshotCopyGrant_21627112(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteSnapshotCopyGrant_21627111(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes the specified snapshot copy grant.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627113 = query.getOrDefault("Action")
  valid_21627113 = validateParameter(valid_21627113, JString, required = true, default = newJString(
      "DeleteSnapshotCopyGrant"))
  if valid_21627113 != nil:
    section.add "Action", valid_21627113
  var valid_21627114 = query.getOrDefault("Version")
  valid_21627114 = validateParameter(valid_21627114, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627114 != nil:
    section.add "Version", valid_21627114
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627115 = header.getOrDefault("X-Amz-Date")
  valid_21627115 = validateParameter(valid_21627115, JString, required = false,
                                   default = nil)
  if valid_21627115 != nil:
    section.add "X-Amz-Date", valid_21627115
  var valid_21627116 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627116 = validateParameter(valid_21627116, JString, required = false,
                                   default = nil)
  if valid_21627116 != nil:
    section.add "X-Amz-Security-Token", valid_21627116
  var valid_21627117 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627117 = validateParameter(valid_21627117, JString, required = false,
                                   default = nil)
  if valid_21627117 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627117
  var valid_21627118 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627118 = validateParameter(valid_21627118, JString, required = false,
                                   default = nil)
  if valid_21627118 != nil:
    section.add "X-Amz-Algorithm", valid_21627118
  var valid_21627119 = header.getOrDefault("X-Amz-Signature")
  valid_21627119 = validateParameter(valid_21627119, JString, required = false,
                                   default = nil)
  if valid_21627119 != nil:
    section.add "X-Amz-Signature", valid_21627119
  var valid_21627120 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627120 = validateParameter(valid_21627120, JString, required = false,
                                   default = nil)
  if valid_21627120 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627120
  var valid_21627121 = header.getOrDefault("X-Amz-Credential")
  valid_21627121 = validateParameter(valid_21627121, JString, required = false,
                                   default = nil)
  if valid_21627121 != nil:
    section.add "X-Amz-Credential", valid_21627121
  result.add "header", section
  ## parameters in `formData` object:
  ##   SnapshotCopyGrantName: JString (required)
  ##                        : The name of the snapshot copy grant to delete.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SnapshotCopyGrantName` field"
  var valid_21627122 = formData.getOrDefault("SnapshotCopyGrantName")
  valid_21627122 = validateParameter(valid_21627122, JString, required = true,
                                   default = nil)
  if valid_21627122 != nil:
    section.add "SnapshotCopyGrantName", valid_21627122
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627123: Call_PostDeleteSnapshotCopyGrant_21627110;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes the specified snapshot copy grant.
  ## 
  let valid = call_21627123.validator(path, query, header, formData, body, _)
  let scheme = call_21627123.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627123.makeUrl(scheme.get, call_21627123.host, call_21627123.base,
                               call_21627123.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627123, uri, valid, _)

proc call*(call_21627124: Call_PostDeleteSnapshotCopyGrant_21627110;
          SnapshotCopyGrantName: string;
          Action: string = "DeleteSnapshotCopyGrant"; Version: string = "2012-12-01"): Recallable =
  ## postDeleteSnapshotCopyGrant
  ## Deletes the specified snapshot copy grant.
  ##   Action: string (required)
  ##   SnapshotCopyGrantName: string (required)
  ##                        : The name of the snapshot copy grant to delete.
  ##   Version: string (required)
  var query_21627125 = newJObject()
  var formData_21627126 = newJObject()
  add(query_21627125, "Action", newJString(Action))
  add(formData_21627126, "SnapshotCopyGrantName",
      newJString(SnapshotCopyGrantName))
  add(query_21627125, "Version", newJString(Version))
  result = call_21627124.call(nil, query_21627125, nil, formData_21627126, nil)

var postDeleteSnapshotCopyGrant* = Call_PostDeleteSnapshotCopyGrant_21627110(
    name: "postDeleteSnapshotCopyGrant", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=DeleteSnapshotCopyGrant",
    validator: validate_PostDeleteSnapshotCopyGrant_21627111, base: "/",
    makeUrl: url_PostDeleteSnapshotCopyGrant_21627112,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteSnapshotCopyGrant_21627094 = ref object of OpenApiRestCall_21625418
proc url_GetDeleteSnapshotCopyGrant_21627096(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteSnapshotCopyGrant_21627095(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes the specified snapshot copy grant.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   SnapshotCopyGrantName: JString (required)
  ##                        : The name of the snapshot copy grant to delete.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627097 = query.getOrDefault("Action")
  valid_21627097 = validateParameter(valid_21627097, JString, required = true, default = newJString(
      "DeleteSnapshotCopyGrant"))
  if valid_21627097 != nil:
    section.add "Action", valid_21627097
  var valid_21627098 = query.getOrDefault("SnapshotCopyGrantName")
  valid_21627098 = validateParameter(valid_21627098, JString, required = true,
                                   default = nil)
  if valid_21627098 != nil:
    section.add "SnapshotCopyGrantName", valid_21627098
  var valid_21627099 = query.getOrDefault("Version")
  valid_21627099 = validateParameter(valid_21627099, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627099 != nil:
    section.add "Version", valid_21627099
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627100 = header.getOrDefault("X-Amz-Date")
  valid_21627100 = validateParameter(valid_21627100, JString, required = false,
                                   default = nil)
  if valid_21627100 != nil:
    section.add "X-Amz-Date", valid_21627100
  var valid_21627101 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627101 = validateParameter(valid_21627101, JString, required = false,
                                   default = nil)
  if valid_21627101 != nil:
    section.add "X-Amz-Security-Token", valid_21627101
  var valid_21627102 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627102 = validateParameter(valid_21627102, JString, required = false,
                                   default = nil)
  if valid_21627102 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627102
  var valid_21627103 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627103 = validateParameter(valid_21627103, JString, required = false,
                                   default = nil)
  if valid_21627103 != nil:
    section.add "X-Amz-Algorithm", valid_21627103
  var valid_21627104 = header.getOrDefault("X-Amz-Signature")
  valid_21627104 = validateParameter(valid_21627104, JString, required = false,
                                   default = nil)
  if valid_21627104 != nil:
    section.add "X-Amz-Signature", valid_21627104
  var valid_21627105 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627105 = validateParameter(valid_21627105, JString, required = false,
                                   default = nil)
  if valid_21627105 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627105
  var valid_21627106 = header.getOrDefault("X-Amz-Credential")
  valid_21627106 = validateParameter(valid_21627106, JString, required = false,
                                   default = nil)
  if valid_21627106 != nil:
    section.add "X-Amz-Credential", valid_21627106
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627107: Call_GetDeleteSnapshotCopyGrant_21627094;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes the specified snapshot copy grant.
  ## 
  let valid = call_21627107.validator(path, query, header, formData, body, _)
  let scheme = call_21627107.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627107.makeUrl(scheme.get, call_21627107.host, call_21627107.base,
                               call_21627107.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627107, uri, valid, _)

proc call*(call_21627108: Call_GetDeleteSnapshotCopyGrant_21627094;
          SnapshotCopyGrantName: string;
          Action: string = "DeleteSnapshotCopyGrant"; Version: string = "2012-12-01"): Recallable =
  ## getDeleteSnapshotCopyGrant
  ## Deletes the specified snapshot copy grant.
  ##   Action: string (required)
  ##   SnapshotCopyGrantName: string (required)
  ##                        : The name of the snapshot copy grant to delete.
  ##   Version: string (required)
  var query_21627109 = newJObject()
  add(query_21627109, "Action", newJString(Action))
  add(query_21627109, "SnapshotCopyGrantName", newJString(SnapshotCopyGrantName))
  add(query_21627109, "Version", newJString(Version))
  result = call_21627108.call(nil, query_21627109, nil, nil, nil)

var getDeleteSnapshotCopyGrant* = Call_GetDeleteSnapshotCopyGrant_21627094(
    name: "getDeleteSnapshotCopyGrant", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=DeleteSnapshotCopyGrant",
    validator: validate_GetDeleteSnapshotCopyGrant_21627095, base: "/",
    makeUrl: url_GetDeleteSnapshotCopyGrant_21627096,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteSnapshotSchedule_21627143 = ref object of OpenApiRestCall_21625418
proc url_PostDeleteSnapshotSchedule_21627145(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteSnapshotSchedule_21627144(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes a snapshot schedule.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627146 = query.getOrDefault("Action")
  valid_21627146 = validateParameter(valid_21627146, JString, required = true, default = newJString(
      "DeleteSnapshotSchedule"))
  if valid_21627146 != nil:
    section.add "Action", valid_21627146
  var valid_21627147 = query.getOrDefault("Version")
  valid_21627147 = validateParameter(valid_21627147, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627147 != nil:
    section.add "Version", valid_21627147
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627148 = header.getOrDefault("X-Amz-Date")
  valid_21627148 = validateParameter(valid_21627148, JString, required = false,
                                   default = nil)
  if valid_21627148 != nil:
    section.add "X-Amz-Date", valid_21627148
  var valid_21627149 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627149 = validateParameter(valid_21627149, JString, required = false,
                                   default = nil)
  if valid_21627149 != nil:
    section.add "X-Amz-Security-Token", valid_21627149
  var valid_21627150 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627150 = validateParameter(valid_21627150, JString, required = false,
                                   default = nil)
  if valid_21627150 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627150
  var valid_21627151 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627151 = validateParameter(valid_21627151, JString, required = false,
                                   default = nil)
  if valid_21627151 != nil:
    section.add "X-Amz-Algorithm", valid_21627151
  var valid_21627152 = header.getOrDefault("X-Amz-Signature")
  valid_21627152 = validateParameter(valid_21627152, JString, required = false,
                                   default = nil)
  if valid_21627152 != nil:
    section.add "X-Amz-Signature", valid_21627152
  var valid_21627153 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627153 = validateParameter(valid_21627153, JString, required = false,
                                   default = nil)
  if valid_21627153 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627153
  var valid_21627154 = header.getOrDefault("X-Amz-Credential")
  valid_21627154 = validateParameter(valid_21627154, JString, required = false,
                                   default = nil)
  if valid_21627154 != nil:
    section.add "X-Amz-Credential", valid_21627154
  result.add "header", section
  ## parameters in `formData` object:
  ##   ScheduleIdentifier: JString (required)
  ##                     : A unique identifier of the snapshot schedule to delete.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ScheduleIdentifier` field"
  var valid_21627155 = formData.getOrDefault("ScheduleIdentifier")
  valid_21627155 = validateParameter(valid_21627155, JString, required = true,
                                   default = nil)
  if valid_21627155 != nil:
    section.add "ScheduleIdentifier", valid_21627155
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627156: Call_PostDeleteSnapshotSchedule_21627143;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a snapshot schedule.
  ## 
  let valid = call_21627156.validator(path, query, header, formData, body, _)
  let scheme = call_21627156.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627156.makeUrl(scheme.get, call_21627156.host, call_21627156.base,
                               call_21627156.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627156, uri, valid, _)

proc call*(call_21627157: Call_PostDeleteSnapshotSchedule_21627143;
          ScheduleIdentifier: string; Action: string = "DeleteSnapshotSchedule";
          Version: string = "2012-12-01"): Recallable =
  ## postDeleteSnapshotSchedule
  ## Deletes a snapshot schedule.
  ##   Action: string (required)
  ##   ScheduleIdentifier: string (required)
  ##                     : A unique identifier of the snapshot schedule to delete.
  ##   Version: string (required)
  var query_21627158 = newJObject()
  var formData_21627159 = newJObject()
  add(query_21627158, "Action", newJString(Action))
  add(formData_21627159, "ScheduleIdentifier", newJString(ScheduleIdentifier))
  add(query_21627158, "Version", newJString(Version))
  result = call_21627157.call(nil, query_21627158, nil, formData_21627159, nil)

var postDeleteSnapshotSchedule* = Call_PostDeleteSnapshotSchedule_21627143(
    name: "postDeleteSnapshotSchedule", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=DeleteSnapshotSchedule",
    validator: validate_PostDeleteSnapshotSchedule_21627144, base: "/",
    makeUrl: url_PostDeleteSnapshotSchedule_21627145,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteSnapshotSchedule_21627127 = ref object of OpenApiRestCall_21625418
proc url_GetDeleteSnapshotSchedule_21627129(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteSnapshotSchedule_21627128(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes a snapshot schedule.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ScheduleIdentifier: JString (required)
  ##                     : A unique identifier of the snapshot schedule to delete.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627130 = query.getOrDefault("Action")
  valid_21627130 = validateParameter(valid_21627130, JString, required = true, default = newJString(
      "DeleteSnapshotSchedule"))
  if valid_21627130 != nil:
    section.add "Action", valid_21627130
  var valid_21627131 = query.getOrDefault("ScheduleIdentifier")
  valid_21627131 = validateParameter(valid_21627131, JString, required = true,
                                   default = nil)
  if valid_21627131 != nil:
    section.add "ScheduleIdentifier", valid_21627131
  var valid_21627132 = query.getOrDefault("Version")
  valid_21627132 = validateParameter(valid_21627132, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627132 != nil:
    section.add "Version", valid_21627132
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627133 = header.getOrDefault("X-Amz-Date")
  valid_21627133 = validateParameter(valid_21627133, JString, required = false,
                                   default = nil)
  if valid_21627133 != nil:
    section.add "X-Amz-Date", valid_21627133
  var valid_21627134 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627134 = validateParameter(valid_21627134, JString, required = false,
                                   default = nil)
  if valid_21627134 != nil:
    section.add "X-Amz-Security-Token", valid_21627134
  var valid_21627135 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627135 = validateParameter(valid_21627135, JString, required = false,
                                   default = nil)
  if valid_21627135 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627135
  var valid_21627136 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627136 = validateParameter(valid_21627136, JString, required = false,
                                   default = nil)
  if valid_21627136 != nil:
    section.add "X-Amz-Algorithm", valid_21627136
  var valid_21627137 = header.getOrDefault("X-Amz-Signature")
  valid_21627137 = validateParameter(valid_21627137, JString, required = false,
                                   default = nil)
  if valid_21627137 != nil:
    section.add "X-Amz-Signature", valid_21627137
  var valid_21627138 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627138 = validateParameter(valid_21627138, JString, required = false,
                                   default = nil)
  if valid_21627138 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627138
  var valid_21627139 = header.getOrDefault("X-Amz-Credential")
  valid_21627139 = validateParameter(valid_21627139, JString, required = false,
                                   default = nil)
  if valid_21627139 != nil:
    section.add "X-Amz-Credential", valid_21627139
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627140: Call_GetDeleteSnapshotSchedule_21627127;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a snapshot schedule.
  ## 
  let valid = call_21627140.validator(path, query, header, formData, body, _)
  let scheme = call_21627140.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627140.makeUrl(scheme.get, call_21627140.host, call_21627140.base,
                               call_21627140.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627140, uri, valid, _)

proc call*(call_21627141: Call_GetDeleteSnapshotSchedule_21627127;
          ScheduleIdentifier: string; Action: string = "DeleteSnapshotSchedule";
          Version: string = "2012-12-01"): Recallable =
  ## getDeleteSnapshotSchedule
  ## Deletes a snapshot schedule.
  ##   Action: string (required)
  ##   ScheduleIdentifier: string (required)
  ##                     : A unique identifier of the snapshot schedule to delete.
  ##   Version: string (required)
  var query_21627142 = newJObject()
  add(query_21627142, "Action", newJString(Action))
  add(query_21627142, "ScheduleIdentifier", newJString(ScheduleIdentifier))
  add(query_21627142, "Version", newJString(Version))
  result = call_21627141.call(nil, query_21627142, nil, nil, nil)

var getDeleteSnapshotSchedule* = Call_GetDeleteSnapshotSchedule_21627127(
    name: "getDeleteSnapshotSchedule", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=DeleteSnapshotSchedule",
    validator: validate_GetDeleteSnapshotSchedule_21627128, base: "/",
    makeUrl: url_GetDeleteSnapshotSchedule_21627129,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteTags_21627177 = ref object of OpenApiRestCall_21625418
proc url_PostDeleteTags_21627179(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteTags_21627178(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes tags from a resource. You must provide the ARN of the resource from which you want to delete the tag or tags.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627180 = query.getOrDefault("Action")
  valid_21627180 = validateParameter(valid_21627180, JString, required = true,
                                   default = newJString("DeleteTags"))
  if valid_21627180 != nil:
    section.add "Action", valid_21627180
  var valid_21627181 = query.getOrDefault("Version")
  valid_21627181 = validateParameter(valid_21627181, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627181 != nil:
    section.add "Version", valid_21627181
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627182 = header.getOrDefault("X-Amz-Date")
  valid_21627182 = validateParameter(valid_21627182, JString, required = false,
                                   default = nil)
  if valid_21627182 != nil:
    section.add "X-Amz-Date", valid_21627182
  var valid_21627183 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627183 = validateParameter(valid_21627183, JString, required = false,
                                   default = nil)
  if valid_21627183 != nil:
    section.add "X-Amz-Security-Token", valid_21627183
  var valid_21627184 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627184 = validateParameter(valid_21627184, JString, required = false,
                                   default = nil)
  if valid_21627184 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627184
  var valid_21627185 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627185 = validateParameter(valid_21627185, JString, required = false,
                                   default = nil)
  if valid_21627185 != nil:
    section.add "X-Amz-Algorithm", valid_21627185
  var valid_21627186 = header.getOrDefault("X-Amz-Signature")
  valid_21627186 = validateParameter(valid_21627186, JString, required = false,
                                   default = nil)
  if valid_21627186 != nil:
    section.add "X-Amz-Signature", valid_21627186
  var valid_21627187 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627187 = validateParameter(valid_21627187, JString, required = false,
                                   default = nil)
  if valid_21627187 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627187
  var valid_21627188 = header.getOrDefault("X-Amz-Credential")
  valid_21627188 = validateParameter(valid_21627188, JString, required = false,
                                   default = nil)
  if valid_21627188 != nil:
    section.add "X-Amz-Credential", valid_21627188
  result.add "header", section
  ## parameters in `formData` object:
  ##   TagKeys: JArray (required)
  ##          : The tag key that you want to delete.
  ##   ResourceName: JString (required)
  ##               : The Amazon Resource Name (ARN) from which you want to remove the tag or tags. For example, <code>arn:aws:redshift:us-east-2:123456789:cluster:t1</code>. 
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TagKeys` field"
  var valid_21627189 = formData.getOrDefault("TagKeys")
  valid_21627189 = validateParameter(valid_21627189, JArray, required = true,
                                   default = nil)
  if valid_21627189 != nil:
    section.add "TagKeys", valid_21627189
  var valid_21627190 = formData.getOrDefault("ResourceName")
  valid_21627190 = validateParameter(valid_21627190, JString, required = true,
                                   default = nil)
  if valid_21627190 != nil:
    section.add "ResourceName", valid_21627190
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627191: Call_PostDeleteTags_21627177; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes tags from a resource. You must provide the ARN of the resource from which you want to delete the tag or tags.
  ## 
  let valid = call_21627191.validator(path, query, header, formData, body, _)
  let scheme = call_21627191.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627191.makeUrl(scheme.get, call_21627191.host, call_21627191.base,
                               call_21627191.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627191, uri, valid, _)

proc call*(call_21627192: Call_PostDeleteTags_21627177; TagKeys: JsonNode;
          ResourceName: string; Action: string = "DeleteTags";
          Version: string = "2012-12-01"): Recallable =
  ## postDeleteTags
  ## Deletes tags from a resource. You must provide the ARN of the resource from which you want to delete the tag or tags.
  ##   Action: string (required)
  ##   TagKeys: JArray (required)
  ##          : The tag key that you want to delete.
  ##   ResourceName: string (required)
  ##               : The Amazon Resource Name (ARN) from which you want to remove the tag or tags. For example, <code>arn:aws:redshift:us-east-2:123456789:cluster:t1</code>. 
  ##   Version: string (required)
  var query_21627193 = newJObject()
  var formData_21627194 = newJObject()
  add(query_21627193, "Action", newJString(Action))
  if TagKeys != nil:
    formData_21627194.add "TagKeys", TagKeys
  add(formData_21627194, "ResourceName", newJString(ResourceName))
  add(query_21627193, "Version", newJString(Version))
  result = call_21627192.call(nil, query_21627193, nil, formData_21627194, nil)

var postDeleteTags* = Call_PostDeleteTags_21627177(name: "postDeleteTags",
    meth: HttpMethod.HttpPost, host: "redshift.amazonaws.com",
    route: "/#Action=DeleteTags", validator: validate_PostDeleteTags_21627178,
    base: "/", makeUrl: url_PostDeleteTags_21627179,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteTags_21627160 = ref object of OpenApiRestCall_21625418
proc url_GetDeleteTags_21627162(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteTags_21627161(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## Deletes tags from a resource. You must provide the ARN of the resource from which you want to delete the tag or tags.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceName: JString (required)
  ##               : The Amazon Resource Name (ARN) from which you want to remove the tag or tags. For example, <code>arn:aws:redshift:us-east-2:123456789:cluster:t1</code>. 
  ##   Action: JString (required)
  ##   TagKeys: JArray (required)
  ##          : The tag key that you want to delete.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_21627163 = query.getOrDefault("ResourceName")
  valid_21627163 = validateParameter(valid_21627163, JString, required = true,
                                   default = nil)
  if valid_21627163 != nil:
    section.add "ResourceName", valid_21627163
  var valid_21627164 = query.getOrDefault("Action")
  valid_21627164 = validateParameter(valid_21627164, JString, required = true,
                                   default = newJString("DeleteTags"))
  if valid_21627164 != nil:
    section.add "Action", valid_21627164
  var valid_21627165 = query.getOrDefault("TagKeys")
  valid_21627165 = validateParameter(valid_21627165, JArray, required = true,
                                   default = nil)
  if valid_21627165 != nil:
    section.add "TagKeys", valid_21627165
  var valid_21627166 = query.getOrDefault("Version")
  valid_21627166 = validateParameter(valid_21627166, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627166 != nil:
    section.add "Version", valid_21627166
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627167 = header.getOrDefault("X-Amz-Date")
  valid_21627167 = validateParameter(valid_21627167, JString, required = false,
                                   default = nil)
  if valid_21627167 != nil:
    section.add "X-Amz-Date", valid_21627167
  var valid_21627168 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627168 = validateParameter(valid_21627168, JString, required = false,
                                   default = nil)
  if valid_21627168 != nil:
    section.add "X-Amz-Security-Token", valid_21627168
  var valid_21627169 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627169 = validateParameter(valid_21627169, JString, required = false,
                                   default = nil)
  if valid_21627169 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627169
  var valid_21627170 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627170 = validateParameter(valid_21627170, JString, required = false,
                                   default = nil)
  if valid_21627170 != nil:
    section.add "X-Amz-Algorithm", valid_21627170
  var valid_21627171 = header.getOrDefault("X-Amz-Signature")
  valid_21627171 = validateParameter(valid_21627171, JString, required = false,
                                   default = nil)
  if valid_21627171 != nil:
    section.add "X-Amz-Signature", valid_21627171
  var valid_21627172 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627172 = validateParameter(valid_21627172, JString, required = false,
                                   default = nil)
  if valid_21627172 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627172
  var valid_21627173 = header.getOrDefault("X-Amz-Credential")
  valid_21627173 = validateParameter(valid_21627173, JString, required = false,
                                   default = nil)
  if valid_21627173 != nil:
    section.add "X-Amz-Credential", valid_21627173
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627174: Call_GetDeleteTags_21627160; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes tags from a resource. You must provide the ARN of the resource from which you want to delete the tag or tags.
  ## 
  let valid = call_21627174.validator(path, query, header, formData, body, _)
  let scheme = call_21627174.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627174.makeUrl(scheme.get, call_21627174.host, call_21627174.base,
                               call_21627174.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627174, uri, valid, _)

proc call*(call_21627175: Call_GetDeleteTags_21627160; ResourceName: string;
          TagKeys: JsonNode; Action: string = "DeleteTags";
          Version: string = "2012-12-01"): Recallable =
  ## getDeleteTags
  ## Deletes tags from a resource. You must provide the ARN of the resource from which you want to delete the tag or tags.
  ##   ResourceName: string (required)
  ##               : The Amazon Resource Name (ARN) from which you want to remove the tag or tags. For example, <code>arn:aws:redshift:us-east-2:123456789:cluster:t1</code>. 
  ##   Action: string (required)
  ##   TagKeys: JArray (required)
  ##          : The tag key that you want to delete.
  ##   Version: string (required)
  var query_21627176 = newJObject()
  add(query_21627176, "ResourceName", newJString(ResourceName))
  add(query_21627176, "Action", newJString(Action))
  if TagKeys != nil:
    query_21627176.add "TagKeys", TagKeys
  add(query_21627176, "Version", newJString(Version))
  result = call_21627175.call(nil, query_21627176, nil, nil, nil)

var getDeleteTags* = Call_GetDeleteTags_21627160(name: "getDeleteTags",
    meth: HttpMethod.HttpGet, host: "redshift.amazonaws.com",
    route: "/#Action=DeleteTags", validator: validate_GetDeleteTags_21627161,
    base: "/", makeUrl: url_GetDeleteTags_21627162,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAccountAttributes_21627211 = ref object of OpenApiRestCall_21625418
proc url_PostDescribeAccountAttributes_21627213(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeAccountAttributes_21627212(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Returns a list of attributes attached to an account
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627214 = query.getOrDefault("Action")
  valid_21627214 = validateParameter(valid_21627214, JString, required = true, default = newJString(
      "DescribeAccountAttributes"))
  if valid_21627214 != nil:
    section.add "Action", valid_21627214
  var valid_21627215 = query.getOrDefault("Version")
  valid_21627215 = validateParameter(valid_21627215, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627215 != nil:
    section.add "Version", valid_21627215
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627216 = header.getOrDefault("X-Amz-Date")
  valid_21627216 = validateParameter(valid_21627216, JString, required = false,
                                   default = nil)
  if valid_21627216 != nil:
    section.add "X-Amz-Date", valid_21627216
  var valid_21627217 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627217 = validateParameter(valid_21627217, JString, required = false,
                                   default = nil)
  if valid_21627217 != nil:
    section.add "X-Amz-Security-Token", valid_21627217
  var valid_21627218 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627218 = validateParameter(valid_21627218, JString, required = false,
                                   default = nil)
  if valid_21627218 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627218
  var valid_21627219 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627219 = validateParameter(valid_21627219, JString, required = false,
                                   default = nil)
  if valid_21627219 != nil:
    section.add "X-Amz-Algorithm", valid_21627219
  var valid_21627220 = header.getOrDefault("X-Amz-Signature")
  valid_21627220 = validateParameter(valid_21627220, JString, required = false,
                                   default = nil)
  if valid_21627220 != nil:
    section.add "X-Amz-Signature", valid_21627220
  var valid_21627221 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627221 = validateParameter(valid_21627221, JString, required = false,
                                   default = nil)
  if valid_21627221 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627221
  var valid_21627222 = header.getOrDefault("X-Amz-Credential")
  valid_21627222 = validateParameter(valid_21627222, JString, required = false,
                                   default = nil)
  if valid_21627222 != nil:
    section.add "X-Amz-Credential", valid_21627222
  result.add "header", section
  ## parameters in `formData` object:
  ##   AttributeNames: JArray
  ##                 : A list of attribute names.
  section = newJObject()
  var valid_21627223 = formData.getOrDefault("AttributeNames")
  valid_21627223 = validateParameter(valid_21627223, JArray, required = false,
                                   default = nil)
  if valid_21627223 != nil:
    section.add "AttributeNames", valid_21627223
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627224: Call_PostDescribeAccountAttributes_21627211;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns a list of attributes attached to an account
  ## 
  let valid = call_21627224.validator(path, query, header, formData, body, _)
  let scheme = call_21627224.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627224.makeUrl(scheme.get, call_21627224.host, call_21627224.base,
                               call_21627224.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627224, uri, valid, _)

proc call*(call_21627225: Call_PostDescribeAccountAttributes_21627211;
          Action: string = "DescribeAccountAttributes";
          AttributeNames: JsonNode = nil; Version: string = "2012-12-01"): Recallable =
  ## postDescribeAccountAttributes
  ## Returns a list of attributes attached to an account
  ##   Action: string (required)
  ##   AttributeNames: JArray
  ##                 : A list of attribute names.
  ##   Version: string (required)
  var query_21627226 = newJObject()
  var formData_21627227 = newJObject()
  add(query_21627226, "Action", newJString(Action))
  if AttributeNames != nil:
    formData_21627227.add "AttributeNames", AttributeNames
  add(query_21627226, "Version", newJString(Version))
  result = call_21627225.call(nil, query_21627226, nil, formData_21627227, nil)

var postDescribeAccountAttributes* = Call_PostDescribeAccountAttributes_21627211(
    name: "postDescribeAccountAttributes", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=DescribeAccountAttributes",
    validator: validate_PostDescribeAccountAttributes_21627212, base: "/",
    makeUrl: url_PostDescribeAccountAttributes_21627213,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAccountAttributes_21627195 = ref object of OpenApiRestCall_21625418
proc url_GetDescribeAccountAttributes_21627197(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeAccountAttributes_21627196(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Returns a list of attributes attached to an account
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AttributeNames: JArray
  ##                 : A list of attribute names.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627198 = query.getOrDefault("AttributeNames")
  valid_21627198 = validateParameter(valid_21627198, JArray, required = false,
                                   default = nil)
  if valid_21627198 != nil:
    section.add "AttributeNames", valid_21627198
  var valid_21627199 = query.getOrDefault("Action")
  valid_21627199 = validateParameter(valid_21627199, JString, required = true, default = newJString(
      "DescribeAccountAttributes"))
  if valid_21627199 != nil:
    section.add "Action", valid_21627199
  var valid_21627200 = query.getOrDefault("Version")
  valid_21627200 = validateParameter(valid_21627200, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627200 != nil:
    section.add "Version", valid_21627200
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627201 = header.getOrDefault("X-Amz-Date")
  valid_21627201 = validateParameter(valid_21627201, JString, required = false,
                                   default = nil)
  if valid_21627201 != nil:
    section.add "X-Amz-Date", valid_21627201
  var valid_21627202 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627202 = validateParameter(valid_21627202, JString, required = false,
                                   default = nil)
  if valid_21627202 != nil:
    section.add "X-Amz-Security-Token", valid_21627202
  var valid_21627203 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627203 = validateParameter(valid_21627203, JString, required = false,
                                   default = nil)
  if valid_21627203 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627203
  var valid_21627204 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627204 = validateParameter(valid_21627204, JString, required = false,
                                   default = nil)
  if valid_21627204 != nil:
    section.add "X-Amz-Algorithm", valid_21627204
  var valid_21627205 = header.getOrDefault("X-Amz-Signature")
  valid_21627205 = validateParameter(valid_21627205, JString, required = false,
                                   default = nil)
  if valid_21627205 != nil:
    section.add "X-Amz-Signature", valid_21627205
  var valid_21627206 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627206 = validateParameter(valid_21627206, JString, required = false,
                                   default = nil)
  if valid_21627206 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627206
  var valid_21627207 = header.getOrDefault("X-Amz-Credential")
  valid_21627207 = validateParameter(valid_21627207, JString, required = false,
                                   default = nil)
  if valid_21627207 != nil:
    section.add "X-Amz-Credential", valid_21627207
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627208: Call_GetDescribeAccountAttributes_21627195;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns a list of attributes attached to an account
  ## 
  let valid = call_21627208.validator(path, query, header, formData, body, _)
  let scheme = call_21627208.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627208.makeUrl(scheme.get, call_21627208.host, call_21627208.base,
                               call_21627208.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627208, uri, valid, _)

proc call*(call_21627209: Call_GetDescribeAccountAttributes_21627195;
          AttributeNames: JsonNode = nil;
          Action: string = "DescribeAccountAttributes";
          Version: string = "2012-12-01"): Recallable =
  ## getDescribeAccountAttributes
  ## Returns a list of attributes attached to an account
  ##   AttributeNames: JArray
  ##                 : A list of attribute names.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627210 = newJObject()
  if AttributeNames != nil:
    query_21627210.add "AttributeNames", AttributeNames
  add(query_21627210, "Action", newJString(Action))
  add(query_21627210, "Version", newJString(Version))
  result = call_21627209.call(nil, query_21627210, nil, nil, nil)

var getDescribeAccountAttributes* = Call_GetDescribeAccountAttributes_21627195(
    name: "getDescribeAccountAttributes", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=DescribeAccountAttributes",
    validator: validate_GetDescribeAccountAttributes_21627196, base: "/",
    makeUrl: url_GetDescribeAccountAttributes_21627197,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeClusterDbRevisions_21627246 = ref object of OpenApiRestCall_21625418
proc url_PostDescribeClusterDbRevisions_21627248(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeClusterDbRevisions_21627247(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Returns an array of <code>ClusterDbRevision</code> objects.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627249 = query.getOrDefault("Action")
  valid_21627249 = validateParameter(valid_21627249, JString, required = true, default = newJString(
      "DescribeClusterDbRevisions"))
  if valid_21627249 != nil:
    section.add "Action", valid_21627249
  var valid_21627250 = query.getOrDefault("Version")
  valid_21627250 = validateParameter(valid_21627250, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627250 != nil:
    section.add "Version", valid_21627250
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627251 = header.getOrDefault("X-Amz-Date")
  valid_21627251 = validateParameter(valid_21627251, JString, required = false,
                                   default = nil)
  if valid_21627251 != nil:
    section.add "X-Amz-Date", valid_21627251
  var valid_21627252 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627252 = validateParameter(valid_21627252, JString, required = false,
                                   default = nil)
  if valid_21627252 != nil:
    section.add "X-Amz-Security-Token", valid_21627252
  var valid_21627253 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627253 = validateParameter(valid_21627253, JString, required = false,
                                   default = nil)
  if valid_21627253 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627253
  var valid_21627254 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627254 = validateParameter(valid_21627254, JString, required = false,
                                   default = nil)
  if valid_21627254 != nil:
    section.add "X-Amz-Algorithm", valid_21627254
  var valid_21627255 = header.getOrDefault("X-Amz-Signature")
  valid_21627255 = validateParameter(valid_21627255, JString, required = false,
                                   default = nil)
  if valid_21627255 != nil:
    section.add "X-Amz-Signature", valid_21627255
  var valid_21627256 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627256 = validateParameter(valid_21627256, JString, required = false,
                                   default = nil)
  if valid_21627256 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627256
  var valid_21627257 = header.getOrDefault("X-Amz-Credential")
  valid_21627257 = validateParameter(valid_21627257, JString, required = false,
                                   default = nil)
  if valid_21627257 != nil:
    section.add "X-Amz-Credential", valid_21627257
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : <p>An optional parameter that specifies the starting point for returning a set of response records. When the results of a <code>DescribeClusterDbRevisions</code> request exceed the value specified in <code>MaxRecords</code>, Amazon Redshift returns a value in the <code>marker</code> field of the response. You can retrieve the next set of response records by providing the returned <code>marker</code> value in the <code>marker</code> parameter and retrying the request. </p> <p>Constraints: You can specify either the <code>ClusterIdentifier</code> parameter, or the <code>marker</code> parameter, but not both.</p>
  ##   ClusterIdentifier: JString
  ##                    : A unique identifier for a cluster whose <code>ClusterDbRevisions</code> you are requesting. This parameter is case sensitive. All clusters defined for an account are returned by default.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in the <code>marker</code> field of the response. You can retrieve the next set of response records by providing the returned <code>marker</code> value in the <code>marker</code> parameter and retrying the request. </p> <p>Default: 100</p> <p>Constraints: minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_21627258 = formData.getOrDefault("Marker")
  valid_21627258 = validateParameter(valid_21627258, JString, required = false,
                                   default = nil)
  if valid_21627258 != nil:
    section.add "Marker", valid_21627258
  var valid_21627259 = formData.getOrDefault("ClusterIdentifier")
  valid_21627259 = validateParameter(valid_21627259, JString, required = false,
                                   default = nil)
  if valid_21627259 != nil:
    section.add "ClusterIdentifier", valid_21627259
  var valid_21627260 = formData.getOrDefault("MaxRecords")
  valid_21627260 = validateParameter(valid_21627260, JInt, required = false,
                                   default = nil)
  if valid_21627260 != nil:
    section.add "MaxRecords", valid_21627260
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627261: Call_PostDescribeClusterDbRevisions_21627246;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns an array of <code>ClusterDbRevision</code> objects.
  ## 
  let valid = call_21627261.validator(path, query, header, formData, body, _)
  let scheme = call_21627261.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627261.makeUrl(scheme.get, call_21627261.host, call_21627261.base,
                               call_21627261.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627261, uri, valid, _)

proc call*(call_21627262: Call_PostDescribeClusterDbRevisions_21627246;
          Marker: string = ""; Action: string = "DescribeClusterDbRevisions";
          ClusterIdentifier: string = ""; MaxRecords: int = 0;
          Version: string = "2012-12-01"): Recallable =
  ## postDescribeClusterDbRevisions
  ## Returns an array of <code>ClusterDbRevision</code> objects.
  ##   Marker: string
  ##         : <p>An optional parameter that specifies the starting point for returning a set of response records. When the results of a <code>DescribeClusterDbRevisions</code> request exceed the value specified in <code>MaxRecords</code>, Amazon Redshift returns a value in the <code>marker</code> field of the response. You can retrieve the next set of response records by providing the returned <code>marker</code> value in the <code>marker</code> parameter and retrying the request. </p> <p>Constraints: You can specify either the <code>ClusterIdentifier</code> parameter, or the <code>marker</code> parameter, but not both.</p>
  ##   Action: string (required)
  ##   ClusterIdentifier: string
  ##                    : A unique identifier for a cluster whose <code>ClusterDbRevisions</code> you are requesting. This parameter is case sensitive. All clusters defined for an account are returned by default.
  ##   MaxRecords: int
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in the <code>marker</code> field of the response. You can retrieve the next set of response records by providing the returned <code>marker</code> value in the <code>marker</code> parameter and retrying the request. </p> <p>Default: 100</p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_21627263 = newJObject()
  var formData_21627264 = newJObject()
  add(formData_21627264, "Marker", newJString(Marker))
  add(query_21627263, "Action", newJString(Action))
  add(formData_21627264, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(formData_21627264, "MaxRecords", newJInt(MaxRecords))
  add(query_21627263, "Version", newJString(Version))
  result = call_21627262.call(nil, query_21627263, nil, formData_21627264, nil)

var postDescribeClusterDbRevisions* = Call_PostDescribeClusterDbRevisions_21627246(
    name: "postDescribeClusterDbRevisions", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=DescribeClusterDbRevisions",
    validator: validate_PostDescribeClusterDbRevisions_21627247, base: "/",
    makeUrl: url_PostDescribeClusterDbRevisions_21627248,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeClusterDbRevisions_21627228 = ref object of OpenApiRestCall_21625418
proc url_GetDescribeClusterDbRevisions_21627230(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeClusterDbRevisions_21627229(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Returns an array of <code>ClusterDbRevision</code> objects.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in the <code>marker</code> field of the response. You can retrieve the next set of response records by providing the returned <code>marker</code> value in the <code>marker</code> parameter and retrying the request. </p> <p>Default: 100</p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   Action: JString (required)
  ##   ClusterIdentifier: JString
  ##                    : A unique identifier for a cluster whose <code>ClusterDbRevisions</code> you are requesting. This parameter is case sensitive. All clusters defined for an account are returned by default.
  ##   Marker: JString
  ##         : <p>An optional parameter that specifies the starting point for returning a set of response records. When the results of a <code>DescribeClusterDbRevisions</code> request exceed the value specified in <code>MaxRecords</code>, Amazon Redshift returns a value in the <code>marker</code> field of the response. You can retrieve the next set of response records by providing the returned <code>marker</code> value in the <code>marker</code> parameter and retrying the request. </p> <p>Constraints: You can specify either the <code>ClusterIdentifier</code> parameter, or the <code>marker</code> parameter, but not both.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627231 = query.getOrDefault("MaxRecords")
  valid_21627231 = validateParameter(valid_21627231, JInt, required = false,
                                   default = nil)
  if valid_21627231 != nil:
    section.add "MaxRecords", valid_21627231
  var valid_21627232 = query.getOrDefault("Action")
  valid_21627232 = validateParameter(valid_21627232, JString, required = true, default = newJString(
      "DescribeClusterDbRevisions"))
  if valid_21627232 != nil:
    section.add "Action", valid_21627232
  var valid_21627233 = query.getOrDefault("ClusterIdentifier")
  valid_21627233 = validateParameter(valid_21627233, JString, required = false,
                                   default = nil)
  if valid_21627233 != nil:
    section.add "ClusterIdentifier", valid_21627233
  var valid_21627234 = query.getOrDefault("Marker")
  valid_21627234 = validateParameter(valid_21627234, JString, required = false,
                                   default = nil)
  if valid_21627234 != nil:
    section.add "Marker", valid_21627234
  var valid_21627235 = query.getOrDefault("Version")
  valid_21627235 = validateParameter(valid_21627235, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627235 != nil:
    section.add "Version", valid_21627235
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627236 = header.getOrDefault("X-Amz-Date")
  valid_21627236 = validateParameter(valid_21627236, JString, required = false,
                                   default = nil)
  if valid_21627236 != nil:
    section.add "X-Amz-Date", valid_21627236
  var valid_21627237 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627237 = validateParameter(valid_21627237, JString, required = false,
                                   default = nil)
  if valid_21627237 != nil:
    section.add "X-Amz-Security-Token", valid_21627237
  var valid_21627238 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627238 = validateParameter(valid_21627238, JString, required = false,
                                   default = nil)
  if valid_21627238 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627238
  var valid_21627239 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627239 = validateParameter(valid_21627239, JString, required = false,
                                   default = nil)
  if valid_21627239 != nil:
    section.add "X-Amz-Algorithm", valid_21627239
  var valid_21627240 = header.getOrDefault("X-Amz-Signature")
  valid_21627240 = validateParameter(valid_21627240, JString, required = false,
                                   default = nil)
  if valid_21627240 != nil:
    section.add "X-Amz-Signature", valid_21627240
  var valid_21627241 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627241 = validateParameter(valid_21627241, JString, required = false,
                                   default = nil)
  if valid_21627241 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627241
  var valid_21627242 = header.getOrDefault("X-Amz-Credential")
  valid_21627242 = validateParameter(valid_21627242, JString, required = false,
                                   default = nil)
  if valid_21627242 != nil:
    section.add "X-Amz-Credential", valid_21627242
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627243: Call_GetDescribeClusterDbRevisions_21627228;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns an array of <code>ClusterDbRevision</code> objects.
  ## 
  let valid = call_21627243.validator(path, query, header, formData, body, _)
  let scheme = call_21627243.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627243.makeUrl(scheme.get, call_21627243.host, call_21627243.base,
                               call_21627243.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627243, uri, valid, _)

proc call*(call_21627244: Call_GetDescribeClusterDbRevisions_21627228;
          MaxRecords: int = 0; Action: string = "DescribeClusterDbRevisions";
          ClusterIdentifier: string = ""; Marker: string = "";
          Version: string = "2012-12-01"): Recallable =
  ## getDescribeClusterDbRevisions
  ## Returns an array of <code>ClusterDbRevision</code> objects.
  ##   MaxRecords: int
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in the <code>marker</code> field of the response. You can retrieve the next set of response records by providing the returned <code>marker</code> value in the <code>marker</code> parameter and retrying the request. </p> <p>Default: 100</p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   Action: string (required)
  ##   ClusterIdentifier: string
  ##                    : A unique identifier for a cluster whose <code>ClusterDbRevisions</code> you are requesting. This parameter is case sensitive. All clusters defined for an account are returned by default.
  ##   Marker: string
  ##         : <p>An optional parameter that specifies the starting point for returning a set of response records. When the results of a <code>DescribeClusterDbRevisions</code> request exceed the value specified in <code>MaxRecords</code>, Amazon Redshift returns a value in the <code>marker</code> field of the response. You can retrieve the next set of response records by providing the returned <code>marker</code> value in the <code>marker</code> parameter and retrying the request. </p> <p>Constraints: You can specify either the <code>ClusterIdentifier</code> parameter, or the <code>marker</code> parameter, but not both.</p>
  ##   Version: string (required)
  var query_21627245 = newJObject()
  add(query_21627245, "MaxRecords", newJInt(MaxRecords))
  add(query_21627245, "Action", newJString(Action))
  add(query_21627245, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(query_21627245, "Marker", newJString(Marker))
  add(query_21627245, "Version", newJString(Version))
  result = call_21627244.call(nil, query_21627245, nil, nil, nil)

var getDescribeClusterDbRevisions* = Call_GetDescribeClusterDbRevisions_21627228(
    name: "getDescribeClusterDbRevisions", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=DescribeClusterDbRevisions",
    validator: validate_GetDescribeClusterDbRevisions_21627229, base: "/",
    makeUrl: url_GetDescribeClusterDbRevisions_21627230,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeClusterParameterGroups_21627285 = ref object of OpenApiRestCall_21625418
proc url_PostDescribeClusterParameterGroups_21627287(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeClusterParameterGroups_21627286(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns a list of Amazon Redshift parameter groups, including parameter groups you created and the default parameter group. For each parameter group, the response includes the parameter group name, description, and parameter group family name. You can optionally specify a name to retrieve the description of a specific parameter group.</p> <p> For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all parameter groups that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all parameter groups that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, parameter groups are returned regardless of whether they have tag keys or values associated with them.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627288 = query.getOrDefault("Action")
  valid_21627288 = validateParameter(valid_21627288, JString, required = true, default = newJString(
      "DescribeClusterParameterGroups"))
  if valid_21627288 != nil:
    section.add "Action", valid_21627288
  var valid_21627289 = query.getOrDefault("Version")
  valid_21627289 = validateParameter(valid_21627289, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627289 != nil:
    section.add "Version", valid_21627289
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627290 = header.getOrDefault("X-Amz-Date")
  valid_21627290 = validateParameter(valid_21627290, JString, required = false,
                                   default = nil)
  if valid_21627290 != nil:
    section.add "X-Amz-Date", valid_21627290
  var valid_21627291 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627291 = validateParameter(valid_21627291, JString, required = false,
                                   default = nil)
  if valid_21627291 != nil:
    section.add "X-Amz-Security-Token", valid_21627291
  var valid_21627292 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627292 = validateParameter(valid_21627292, JString, required = false,
                                   default = nil)
  if valid_21627292 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627292
  var valid_21627293 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627293 = validateParameter(valid_21627293, JString, required = false,
                                   default = nil)
  if valid_21627293 != nil:
    section.add "X-Amz-Algorithm", valid_21627293
  var valid_21627294 = header.getOrDefault("X-Amz-Signature")
  valid_21627294 = validateParameter(valid_21627294, JString, required = false,
                                   default = nil)
  if valid_21627294 != nil:
    section.add "X-Amz-Signature", valid_21627294
  var valid_21627295 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627295 = validateParameter(valid_21627295, JString, required = false,
                                   default = nil)
  if valid_21627295 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627295
  var valid_21627296 = header.getOrDefault("X-Amz-Credential")
  valid_21627296 = validateParameter(valid_21627296, JString, required = false,
                                   default = nil)
  if valid_21627296 != nil:
    section.add "X-Amz-Credential", valid_21627296
  result.add "header", section
  ## parameters in `formData` object:
  ##   ParameterGroupName: JString
  ##                     : The name of a specific parameter group for which to return details. By default, details about all parameter groups and the default parameter group are returned.
  ##   Marker: JString
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusterParameterGroups</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   TagKeys: JArray
  ##          : A tag key or keys for which you want to return all matching cluster parameter groups that are associated with the specified key or keys. For example, suppose that you have parameter groups that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the parameter groups that have either or both of these tag keys associated with them.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   TagValues: JArray
  ##            : A tag value or values for which you want to return all matching cluster parameter groups that are associated with the specified tag value or values. For example, suppose that you have parameter groups that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the parameter groups that have either or both of these tag values associated with them.
  section = newJObject()
  var valid_21627297 = formData.getOrDefault("ParameterGroupName")
  valid_21627297 = validateParameter(valid_21627297, JString, required = false,
                                   default = nil)
  if valid_21627297 != nil:
    section.add "ParameterGroupName", valid_21627297
  var valid_21627298 = formData.getOrDefault("Marker")
  valid_21627298 = validateParameter(valid_21627298, JString, required = false,
                                   default = nil)
  if valid_21627298 != nil:
    section.add "Marker", valid_21627298
  var valid_21627299 = formData.getOrDefault("TagKeys")
  valid_21627299 = validateParameter(valid_21627299, JArray, required = false,
                                   default = nil)
  if valid_21627299 != nil:
    section.add "TagKeys", valid_21627299
  var valid_21627300 = formData.getOrDefault("MaxRecords")
  valid_21627300 = validateParameter(valid_21627300, JInt, required = false,
                                   default = nil)
  if valid_21627300 != nil:
    section.add "MaxRecords", valid_21627300
  var valid_21627301 = formData.getOrDefault("TagValues")
  valid_21627301 = validateParameter(valid_21627301, JArray, required = false,
                                   default = nil)
  if valid_21627301 != nil:
    section.add "TagValues", valid_21627301
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627302: Call_PostDescribeClusterParameterGroups_21627285;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns a list of Amazon Redshift parameter groups, including parameter groups you created and the default parameter group. For each parameter group, the response includes the parameter group name, description, and parameter group family name. You can optionally specify a name to retrieve the description of a specific parameter group.</p> <p> For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all parameter groups that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all parameter groups that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, parameter groups are returned regardless of whether they have tag keys or values associated with them.</p>
  ## 
  let valid = call_21627302.validator(path, query, header, formData, body, _)
  let scheme = call_21627302.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627302.makeUrl(scheme.get, call_21627302.host, call_21627302.base,
                               call_21627302.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627302, uri, valid, _)

proc call*(call_21627303: Call_PostDescribeClusterParameterGroups_21627285;
          ParameterGroupName: string = ""; Marker: string = "";
          Action: string = "DescribeClusterParameterGroups";
          TagKeys: JsonNode = nil; MaxRecords: int = 0; TagValues: JsonNode = nil;
          Version: string = "2012-12-01"): Recallable =
  ## postDescribeClusterParameterGroups
  ## <p>Returns a list of Amazon Redshift parameter groups, including parameter groups you created and the default parameter group. For each parameter group, the response includes the parameter group name, description, and parameter group family name. You can optionally specify a name to retrieve the description of a specific parameter group.</p> <p> For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all parameter groups that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all parameter groups that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, parameter groups are returned regardless of whether they have tag keys or values associated with them.</p>
  ##   ParameterGroupName: string
  ##                     : The name of a specific parameter group for which to return details. By default, details about all parameter groups and the default parameter group are returned.
  ##   Marker: string
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusterParameterGroups</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   Action: string (required)
  ##   TagKeys: JArray
  ##          : A tag key or keys for which you want to return all matching cluster parameter groups that are associated with the specified key or keys. For example, suppose that you have parameter groups that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the parameter groups that have either or both of these tag keys associated with them.
  ##   MaxRecords: int
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   TagValues: JArray
  ##            : A tag value or values for which you want to return all matching cluster parameter groups that are associated with the specified tag value or values. For example, suppose that you have parameter groups that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the parameter groups that have either or both of these tag values associated with them.
  ##   Version: string (required)
  var query_21627304 = newJObject()
  var formData_21627305 = newJObject()
  add(formData_21627305, "ParameterGroupName", newJString(ParameterGroupName))
  add(formData_21627305, "Marker", newJString(Marker))
  add(query_21627304, "Action", newJString(Action))
  if TagKeys != nil:
    formData_21627305.add "TagKeys", TagKeys
  add(formData_21627305, "MaxRecords", newJInt(MaxRecords))
  if TagValues != nil:
    formData_21627305.add "TagValues", TagValues
  add(query_21627304, "Version", newJString(Version))
  result = call_21627303.call(nil, query_21627304, nil, formData_21627305, nil)

var postDescribeClusterParameterGroups* = Call_PostDescribeClusterParameterGroups_21627285(
    name: "postDescribeClusterParameterGroups", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com",
    route: "/#Action=DescribeClusterParameterGroups",
    validator: validate_PostDescribeClusterParameterGroups_21627286, base: "/",
    makeUrl: url_PostDescribeClusterParameterGroups_21627287,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeClusterParameterGroups_21627265 = ref object of OpenApiRestCall_21625418
proc url_GetDescribeClusterParameterGroups_21627267(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeClusterParameterGroups_21627266(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns a list of Amazon Redshift parameter groups, including parameter groups you created and the default parameter group. For each parameter group, the response includes the parameter group name, description, and parameter group family name. You can optionally specify a name to retrieve the description of a specific parameter group.</p> <p> For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all parameter groups that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all parameter groups that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, parameter groups are returned regardless of whether they have tag keys or values associated with them.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TagValues: JArray
  ##            : A tag value or values for which you want to return all matching cluster parameter groups that are associated with the specified tag value or values. For example, suppose that you have parameter groups that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the parameter groups that have either or both of these tag values associated with them.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   ParameterGroupName: JString
  ##                     : The name of a specific parameter group for which to return details. By default, details about all parameter groups and the default parameter group are returned.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusterParameterGroups</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   TagKeys: JArray
  ##          : A tag key or keys for which you want to return all matching cluster parameter groups that are associated with the specified key or keys. For example, suppose that you have parameter groups that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the parameter groups that have either or both of these tag keys associated with them.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627268 = query.getOrDefault("TagValues")
  valid_21627268 = validateParameter(valid_21627268, JArray, required = false,
                                   default = nil)
  if valid_21627268 != nil:
    section.add "TagValues", valid_21627268
  var valid_21627269 = query.getOrDefault("MaxRecords")
  valid_21627269 = validateParameter(valid_21627269, JInt, required = false,
                                   default = nil)
  if valid_21627269 != nil:
    section.add "MaxRecords", valid_21627269
  var valid_21627270 = query.getOrDefault("ParameterGroupName")
  valid_21627270 = validateParameter(valid_21627270, JString, required = false,
                                   default = nil)
  if valid_21627270 != nil:
    section.add "ParameterGroupName", valid_21627270
  var valid_21627271 = query.getOrDefault("Action")
  valid_21627271 = validateParameter(valid_21627271, JString, required = true, default = newJString(
      "DescribeClusterParameterGroups"))
  if valid_21627271 != nil:
    section.add "Action", valid_21627271
  var valid_21627272 = query.getOrDefault("Marker")
  valid_21627272 = validateParameter(valid_21627272, JString, required = false,
                                   default = nil)
  if valid_21627272 != nil:
    section.add "Marker", valid_21627272
  var valid_21627273 = query.getOrDefault("TagKeys")
  valid_21627273 = validateParameter(valid_21627273, JArray, required = false,
                                   default = nil)
  if valid_21627273 != nil:
    section.add "TagKeys", valid_21627273
  var valid_21627274 = query.getOrDefault("Version")
  valid_21627274 = validateParameter(valid_21627274, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627274 != nil:
    section.add "Version", valid_21627274
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627275 = header.getOrDefault("X-Amz-Date")
  valid_21627275 = validateParameter(valid_21627275, JString, required = false,
                                   default = nil)
  if valid_21627275 != nil:
    section.add "X-Amz-Date", valid_21627275
  var valid_21627276 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627276 = validateParameter(valid_21627276, JString, required = false,
                                   default = nil)
  if valid_21627276 != nil:
    section.add "X-Amz-Security-Token", valid_21627276
  var valid_21627277 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627277 = validateParameter(valid_21627277, JString, required = false,
                                   default = nil)
  if valid_21627277 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627277
  var valid_21627278 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627278 = validateParameter(valid_21627278, JString, required = false,
                                   default = nil)
  if valid_21627278 != nil:
    section.add "X-Amz-Algorithm", valid_21627278
  var valid_21627279 = header.getOrDefault("X-Amz-Signature")
  valid_21627279 = validateParameter(valid_21627279, JString, required = false,
                                   default = nil)
  if valid_21627279 != nil:
    section.add "X-Amz-Signature", valid_21627279
  var valid_21627280 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627280 = validateParameter(valid_21627280, JString, required = false,
                                   default = nil)
  if valid_21627280 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627280
  var valid_21627281 = header.getOrDefault("X-Amz-Credential")
  valid_21627281 = validateParameter(valid_21627281, JString, required = false,
                                   default = nil)
  if valid_21627281 != nil:
    section.add "X-Amz-Credential", valid_21627281
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627282: Call_GetDescribeClusterParameterGroups_21627265;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns a list of Amazon Redshift parameter groups, including parameter groups you created and the default parameter group. For each parameter group, the response includes the parameter group name, description, and parameter group family name. You can optionally specify a name to retrieve the description of a specific parameter group.</p> <p> For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all parameter groups that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all parameter groups that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, parameter groups are returned regardless of whether they have tag keys or values associated with them.</p>
  ## 
  let valid = call_21627282.validator(path, query, header, formData, body, _)
  let scheme = call_21627282.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627282.makeUrl(scheme.get, call_21627282.host, call_21627282.base,
                               call_21627282.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627282, uri, valid, _)

proc call*(call_21627283: Call_GetDescribeClusterParameterGroups_21627265;
          TagValues: JsonNode = nil; MaxRecords: int = 0;
          ParameterGroupName: string = "";
          Action: string = "DescribeClusterParameterGroups"; Marker: string = "";
          TagKeys: JsonNode = nil; Version: string = "2012-12-01"): Recallable =
  ## getDescribeClusterParameterGroups
  ## <p>Returns a list of Amazon Redshift parameter groups, including parameter groups you created and the default parameter group. For each parameter group, the response includes the parameter group name, description, and parameter group family name. You can optionally specify a name to retrieve the description of a specific parameter group.</p> <p> For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all parameter groups that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all parameter groups that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, parameter groups are returned regardless of whether they have tag keys or values associated with them.</p>
  ##   TagValues: JArray
  ##            : A tag value or values for which you want to return all matching cluster parameter groups that are associated with the specified tag value or values. For example, suppose that you have parameter groups that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the parameter groups that have either or both of these tag values associated with them.
  ##   MaxRecords: int
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   ParameterGroupName: string
  ##                     : The name of a specific parameter group for which to return details. By default, details about all parameter groups and the default parameter group are returned.
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusterParameterGroups</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   TagKeys: JArray
  ##          : A tag key or keys for which you want to return all matching cluster parameter groups that are associated with the specified key or keys. For example, suppose that you have parameter groups that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the parameter groups that have either or both of these tag keys associated with them.
  ##   Version: string (required)
  var query_21627284 = newJObject()
  if TagValues != nil:
    query_21627284.add "TagValues", TagValues
  add(query_21627284, "MaxRecords", newJInt(MaxRecords))
  add(query_21627284, "ParameterGroupName", newJString(ParameterGroupName))
  add(query_21627284, "Action", newJString(Action))
  add(query_21627284, "Marker", newJString(Marker))
  if TagKeys != nil:
    query_21627284.add "TagKeys", TagKeys
  add(query_21627284, "Version", newJString(Version))
  result = call_21627283.call(nil, query_21627284, nil, nil, nil)

var getDescribeClusterParameterGroups* = Call_GetDescribeClusterParameterGroups_21627265(
    name: "getDescribeClusterParameterGroups", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com",
    route: "/#Action=DescribeClusterParameterGroups",
    validator: validate_GetDescribeClusterParameterGroups_21627266, base: "/",
    makeUrl: url_GetDescribeClusterParameterGroups_21627267,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeClusterParameters_21627325 = ref object of OpenApiRestCall_21625418
proc url_PostDescribeClusterParameters_21627327(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeClusterParameters_21627326(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns a detailed list of parameters contained within the specified Amazon Redshift parameter group. For each parameter the response includes information such as parameter name, description, data type, value, whether the parameter value is modifiable, and so on.</p> <p>You can specify <i>source</i> filter to retrieve parameters of only specific type. For example, to retrieve parameters that were modified by a user action such as from <a>ModifyClusterParameterGroup</a>, you can specify <i>source</i> equal to <i>user</i>.</p> <p> For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627328 = query.getOrDefault("Action")
  valid_21627328 = validateParameter(valid_21627328, JString, required = true, default = newJString(
      "DescribeClusterParameters"))
  if valid_21627328 != nil:
    section.add "Action", valid_21627328
  var valid_21627329 = query.getOrDefault("Version")
  valid_21627329 = validateParameter(valid_21627329, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627329 != nil:
    section.add "Version", valid_21627329
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627330 = header.getOrDefault("X-Amz-Date")
  valid_21627330 = validateParameter(valid_21627330, JString, required = false,
                                   default = nil)
  if valid_21627330 != nil:
    section.add "X-Amz-Date", valid_21627330
  var valid_21627331 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627331 = validateParameter(valid_21627331, JString, required = false,
                                   default = nil)
  if valid_21627331 != nil:
    section.add "X-Amz-Security-Token", valid_21627331
  var valid_21627332 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627332 = validateParameter(valid_21627332, JString, required = false,
                                   default = nil)
  if valid_21627332 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627332
  var valid_21627333 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627333 = validateParameter(valid_21627333, JString, required = false,
                                   default = nil)
  if valid_21627333 != nil:
    section.add "X-Amz-Algorithm", valid_21627333
  var valid_21627334 = header.getOrDefault("X-Amz-Signature")
  valid_21627334 = validateParameter(valid_21627334, JString, required = false,
                                   default = nil)
  if valid_21627334 != nil:
    section.add "X-Amz-Signature", valid_21627334
  var valid_21627335 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627335 = validateParameter(valid_21627335, JString, required = false,
                                   default = nil)
  if valid_21627335 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627335
  var valid_21627336 = header.getOrDefault("X-Amz-Credential")
  valid_21627336 = validateParameter(valid_21627336, JString, required = false,
                                   default = nil)
  if valid_21627336 != nil:
    section.add "X-Amz-Credential", valid_21627336
  result.add "header", section
  ## parameters in `formData` object:
  ##   ParameterGroupName: JString (required)
  ##                     : The name of a cluster parameter group for which to return details.
  ##   Marker: JString
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusterParameters</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   Source: JString
  ##         : <p>The parameter types to return. Specify <code>user</code> to show parameters that are different form the default. Similarly, specify <code>engine-default</code> to show parameters that are the same as the default parameter group. </p> <p>Default: All parameter types returned.</p> <p>Valid Values: <code>user</code> | <code>engine-default</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ParameterGroupName` field"
  var valid_21627337 = formData.getOrDefault("ParameterGroupName")
  valid_21627337 = validateParameter(valid_21627337, JString, required = true,
                                   default = nil)
  if valid_21627337 != nil:
    section.add "ParameterGroupName", valid_21627337
  var valid_21627338 = formData.getOrDefault("Marker")
  valid_21627338 = validateParameter(valid_21627338, JString, required = false,
                                   default = nil)
  if valid_21627338 != nil:
    section.add "Marker", valid_21627338
  var valid_21627339 = formData.getOrDefault("MaxRecords")
  valid_21627339 = validateParameter(valid_21627339, JInt, required = false,
                                   default = nil)
  if valid_21627339 != nil:
    section.add "MaxRecords", valid_21627339
  var valid_21627340 = formData.getOrDefault("Source")
  valid_21627340 = validateParameter(valid_21627340, JString, required = false,
                                   default = nil)
  if valid_21627340 != nil:
    section.add "Source", valid_21627340
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627341: Call_PostDescribeClusterParameters_21627325;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns a detailed list of parameters contained within the specified Amazon Redshift parameter group. For each parameter the response includes information such as parameter name, description, data type, value, whether the parameter value is modifiable, and so on.</p> <p>You can specify <i>source</i> filter to retrieve parameters of only specific type. For example, to retrieve parameters that were modified by a user action such as from <a>ModifyClusterParameterGroup</a>, you can specify <i>source</i> equal to <i>user</i>.</p> <p> For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  let valid = call_21627341.validator(path, query, header, formData, body, _)
  let scheme = call_21627341.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627341.makeUrl(scheme.get, call_21627341.host, call_21627341.base,
                               call_21627341.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627341, uri, valid, _)

proc call*(call_21627342: Call_PostDescribeClusterParameters_21627325;
          ParameterGroupName: string; Marker: string = "";
          Action: string = "DescribeClusterParameters"; MaxRecords: int = 0;
          Version: string = "2012-12-01"; Source: string = ""): Recallable =
  ## postDescribeClusterParameters
  ## <p>Returns a detailed list of parameters contained within the specified Amazon Redshift parameter group. For each parameter the response includes information such as parameter name, description, data type, value, whether the parameter value is modifiable, and so on.</p> <p>You can specify <i>source</i> filter to retrieve parameters of only specific type. For example, to retrieve parameters that were modified by a user action such as from <a>ModifyClusterParameterGroup</a>, you can specify <i>source</i> equal to <i>user</i>.</p> <p> For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ##   ParameterGroupName: string (required)
  ##                     : The name of a cluster parameter group for which to return details.
  ##   Marker: string
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusterParameters</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   Version: string (required)
  ##   Source: string
  ##         : <p>The parameter types to return. Specify <code>user</code> to show parameters that are different form the default. Similarly, specify <code>engine-default</code> to show parameters that are the same as the default parameter group. </p> <p>Default: All parameter types returned.</p> <p>Valid Values: <code>user</code> | <code>engine-default</code> </p>
  var query_21627343 = newJObject()
  var formData_21627344 = newJObject()
  add(formData_21627344, "ParameterGroupName", newJString(ParameterGroupName))
  add(formData_21627344, "Marker", newJString(Marker))
  add(query_21627343, "Action", newJString(Action))
  add(formData_21627344, "MaxRecords", newJInt(MaxRecords))
  add(query_21627343, "Version", newJString(Version))
  add(formData_21627344, "Source", newJString(Source))
  result = call_21627342.call(nil, query_21627343, nil, formData_21627344, nil)

var postDescribeClusterParameters* = Call_PostDescribeClusterParameters_21627325(
    name: "postDescribeClusterParameters", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=DescribeClusterParameters",
    validator: validate_PostDescribeClusterParameters_21627326, base: "/",
    makeUrl: url_PostDescribeClusterParameters_21627327,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeClusterParameters_21627306 = ref object of OpenApiRestCall_21625418
proc url_GetDescribeClusterParameters_21627308(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeClusterParameters_21627307(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns a detailed list of parameters contained within the specified Amazon Redshift parameter group. For each parameter the response includes information such as parameter name, description, data type, value, whether the parameter value is modifiable, and so on.</p> <p>You can specify <i>source</i> filter to retrieve parameters of only specific type. For example, to retrieve parameters that were modified by a user action such as from <a>ModifyClusterParameterGroup</a>, you can specify <i>source</i> equal to <i>user</i>.</p> <p> For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   ParameterGroupName: JString (required)
  ##                     : The name of a cluster parameter group for which to return details.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusterParameters</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   Source: JString
  ##         : <p>The parameter types to return. Specify <code>user</code> to show parameters that are different form the default. Similarly, specify <code>engine-default</code> to show parameters that are the same as the default parameter group. </p> <p>Default: All parameter types returned.</p> <p>Valid Values: <code>user</code> | <code>engine-default</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627309 = query.getOrDefault("MaxRecords")
  valid_21627309 = validateParameter(valid_21627309, JInt, required = false,
                                   default = nil)
  if valid_21627309 != nil:
    section.add "MaxRecords", valid_21627309
  assert query != nil, "query argument is necessary due to required `ParameterGroupName` field"
  var valid_21627310 = query.getOrDefault("ParameterGroupName")
  valid_21627310 = validateParameter(valid_21627310, JString, required = true,
                                   default = nil)
  if valid_21627310 != nil:
    section.add "ParameterGroupName", valid_21627310
  var valid_21627311 = query.getOrDefault("Action")
  valid_21627311 = validateParameter(valid_21627311, JString, required = true, default = newJString(
      "DescribeClusterParameters"))
  if valid_21627311 != nil:
    section.add "Action", valid_21627311
  var valid_21627312 = query.getOrDefault("Marker")
  valid_21627312 = validateParameter(valid_21627312, JString, required = false,
                                   default = nil)
  if valid_21627312 != nil:
    section.add "Marker", valid_21627312
  var valid_21627313 = query.getOrDefault("Source")
  valid_21627313 = validateParameter(valid_21627313, JString, required = false,
                                   default = nil)
  if valid_21627313 != nil:
    section.add "Source", valid_21627313
  var valid_21627314 = query.getOrDefault("Version")
  valid_21627314 = validateParameter(valid_21627314, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627314 != nil:
    section.add "Version", valid_21627314
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627315 = header.getOrDefault("X-Amz-Date")
  valid_21627315 = validateParameter(valid_21627315, JString, required = false,
                                   default = nil)
  if valid_21627315 != nil:
    section.add "X-Amz-Date", valid_21627315
  var valid_21627316 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627316 = validateParameter(valid_21627316, JString, required = false,
                                   default = nil)
  if valid_21627316 != nil:
    section.add "X-Amz-Security-Token", valid_21627316
  var valid_21627317 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627317 = validateParameter(valid_21627317, JString, required = false,
                                   default = nil)
  if valid_21627317 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627317
  var valid_21627318 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627318 = validateParameter(valid_21627318, JString, required = false,
                                   default = nil)
  if valid_21627318 != nil:
    section.add "X-Amz-Algorithm", valid_21627318
  var valid_21627319 = header.getOrDefault("X-Amz-Signature")
  valid_21627319 = validateParameter(valid_21627319, JString, required = false,
                                   default = nil)
  if valid_21627319 != nil:
    section.add "X-Amz-Signature", valid_21627319
  var valid_21627320 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627320 = validateParameter(valid_21627320, JString, required = false,
                                   default = nil)
  if valid_21627320 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627320
  var valid_21627321 = header.getOrDefault("X-Amz-Credential")
  valid_21627321 = validateParameter(valid_21627321, JString, required = false,
                                   default = nil)
  if valid_21627321 != nil:
    section.add "X-Amz-Credential", valid_21627321
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627322: Call_GetDescribeClusterParameters_21627306;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns a detailed list of parameters contained within the specified Amazon Redshift parameter group. For each parameter the response includes information such as parameter name, description, data type, value, whether the parameter value is modifiable, and so on.</p> <p>You can specify <i>source</i> filter to retrieve parameters of only specific type. For example, to retrieve parameters that were modified by a user action such as from <a>ModifyClusterParameterGroup</a>, you can specify <i>source</i> equal to <i>user</i>.</p> <p> For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  let valid = call_21627322.validator(path, query, header, formData, body, _)
  let scheme = call_21627322.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627322.makeUrl(scheme.get, call_21627322.host, call_21627322.base,
                               call_21627322.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627322, uri, valid, _)

proc call*(call_21627323: Call_GetDescribeClusterParameters_21627306;
          ParameterGroupName: string; MaxRecords: int = 0;
          Action: string = "DescribeClusterParameters"; Marker: string = "";
          Source: string = ""; Version: string = "2012-12-01"): Recallable =
  ## getDescribeClusterParameters
  ## <p>Returns a detailed list of parameters contained within the specified Amazon Redshift parameter group. For each parameter the response includes information such as parameter name, description, data type, value, whether the parameter value is modifiable, and so on.</p> <p>You can specify <i>source</i> filter to retrieve parameters of only specific type. For example, to retrieve parameters that were modified by a user action such as from <a>ModifyClusterParameterGroup</a>, you can specify <i>source</i> equal to <i>user</i>.</p> <p> For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   ParameterGroupName: string (required)
  ##                     : The name of a cluster parameter group for which to return details.
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusterParameters</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   Source: string
  ##         : <p>The parameter types to return. Specify <code>user</code> to show parameters that are different form the default. Similarly, specify <code>engine-default</code> to show parameters that are the same as the default parameter group. </p> <p>Default: All parameter types returned.</p> <p>Valid Values: <code>user</code> | <code>engine-default</code> </p>
  ##   Version: string (required)
  var query_21627324 = newJObject()
  add(query_21627324, "MaxRecords", newJInt(MaxRecords))
  add(query_21627324, "ParameterGroupName", newJString(ParameterGroupName))
  add(query_21627324, "Action", newJString(Action))
  add(query_21627324, "Marker", newJString(Marker))
  add(query_21627324, "Source", newJString(Source))
  add(query_21627324, "Version", newJString(Version))
  result = call_21627323.call(nil, query_21627324, nil, nil, nil)

var getDescribeClusterParameters* = Call_GetDescribeClusterParameters_21627306(
    name: "getDescribeClusterParameters", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=DescribeClusterParameters",
    validator: validate_GetDescribeClusterParameters_21627307, base: "/",
    makeUrl: url_GetDescribeClusterParameters_21627308,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeClusterSecurityGroups_21627365 = ref object of OpenApiRestCall_21625418
proc url_PostDescribeClusterSecurityGroups_21627367(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeClusterSecurityGroups_21627366(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns information about Amazon Redshift security groups. If the name of a security group is specified, the response will contain only information about only that security group.</p> <p> For information about managing security groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html">Amazon Redshift Cluster Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all security groups that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all security groups that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, security groups are returned regardless of whether they have tag keys or values associated with them.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627368 = query.getOrDefault("Action")
  valid_21627368 = validateParameter(valid_21627368, JString, required = true, default = newJString(
      "DescribeClusterSecurityGroups"))
  if valid_21627368 != nil:
    section.add "Action", valid_21627368
  var valid_21627369 = query.getOrDefault("Version")
  valid_21627369 = validateParameter(valid_21627369, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627369 != nil:
    section.add "Version", valid_21627369
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627370 = header.getOrDefault("X-Amz-Date")
  valid_21627370 = validateParameter(valid_21627370, JString, required = false,
                                   default = nil)
  if valid_21627370 != nil:
    section.add "X-Amz-Date", valid_21627370
  var valid_21627371 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627371 = validateParameter(valid_21627371, JString, required = false,
                                   default = nil)
  if valid_21627371 != nil:
    section.add "X-Amz-Security-Token", valid_21627371
  var valid_21627372 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627372 = validateParameter(valid_21627372, JString, required = false,
                                   default = nil)
  if valid_21627372 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627372
  var valid_21627373 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627373 = validateParameter(valid_21627373, JString, required = false,
                                   default = nil)
  if valid_21627373 != nil:
    section.add "X-Amz-Algorithm", valid_21627373
  var valid_21627374 = header.getOrDefault("X-Amz-Signature")
  valid_21627374 = validateParameter(valid_21627374, JString, required = false,
                                   default = nil)
  if valid_21627374 != nil:
    section.add "X-Amz-Signature", valid_21627374
  var valid_21627375 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627375 = validateParameter(valid_21627375, JString, required = false,
                                   default = nil)
  if valid_21627375 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627375
  var valid_21627376 = header.getOrDefault("X-Amz-Credential")
  valid_21627376 = validateParameter(valid_21627376, JString, required = false,
                                   default = nil)
  if valid_21627376 != nil:
    section.add "X-Amz-Credential", valid_21627376
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : <p>An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusterSecurityGroups</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. </p> <p>Constraints: You can specify either the <b>ClusterSecurityGroupName</b> parameter or the <b>Marker</b> parameter, but not both. </p>
  ##   TagKeys: JArray
  ##          : A tag key or keys for which you want to return all matching cluster security groups that are associated with the specified key or keys. For example, suppose that you have security groups that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the security groups that have either or both of these tag keys associated with them.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   TagValues: JArray
  ##            : A tag value or values for which you want to return all matching cluster security groups that are associated with the specified tag value or values. For example, suppose that you have security groups that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the security groups that have either or both of these tag values associated with them.
  ##   ClusterSecurityGroupName: JString
  ##                           : <p>The name of a cluster security group for which you are requesting details. You can specify either the <b>Marker</b> parameter or a <b>ClusterSecurityGroupName</b> parameter, but not both. </p> <p> Example: <code>securitygroup1</code> </p>
  section = newJObject()
  var valid_21627377 = formData.getOrDefault("Marker")
  valid_21627377 = validateParameter(valid_21627377, JString, required = false,
                                   default = nil)
  if valid_21627377 != nil:
    section.add "Marker", valid_21627377
  var valid_21627378 = formData.getOrDefault("TagKeys")
  valid_21627378 = validateParameter(valid_21627378, JArray, required = false,
                                   default = nil)
  if valid_21627378 != nil:
    section.add "TagKeys", valid_21627378
  var valid_21627379 = formData.getOrDefault("MaxRecords")
  valid_21627379 = validateParameter(valid_21627379, JInt, required = false,
                                   default = nil)
  if valid_21627379 != nil:
    section.add "MaxRecords", valid_21627379
  var valid_21627380 = formData.getOrDefault("TagValues")
  valid_21627380 = validateParameter(valid_21627380, JArray, required = false,
                                   default = nil)
  if valid_21627380 != nil:
    section.add "TagValues", valid_21627380
  var valid_21627381 = formData.getOrDefault("ClusterSecurityGroupName")
  valid_21627381 = validateParameter(valid_21627381, JString, required = false,
                                   default = nil)
  if valid_21627381 != nil:
    section.add "ClusterSecurityGroupName", valid_21627381
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627382: Call_PostDescribeClusterSecurityGroups_21627365;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns information about Amazon Redshift security groups. If the name of a security group is specified, the response will contain only information about only that security group.</p> <p> For information about managing security groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html">Amazon Redshift Cluster Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all security groups that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all security groups that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, security groups are returned regardless of whether they have tag keys or values associated with them.</p>
  ## 
  let valid = call_21627382.validator(path, query, header, formData, body, _)
  let scheme = call_21627382.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627382.makeUrl(scheme.get, call_21627382.host, call_21627382.base,
                               call_21627382.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627382, uri, valid, _)

proc call*(call_21627383: Call_PostDescribeClusterSecurityGroups_21627365;
          Marker: string = ""; Action: string = "DescribeClusterSecurityGroups";
          TagKeys: JsonNode = nil; MaxRecords: int = 0; TagValues: JsonNode = nil;
          Version: string = "2012-12-01"; ClusterSecurityGroupName: string = ""): Recallable =
  ## postDescribeClusterSecurityGroups
  ## <p>Returns information about Amazon Redshift security groups. If the name of a security group is specified, the response will contain only information about only that security group.</p> <p> For information about managing security groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html">Amazon Redshift Cluster Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all security groups that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all security groups that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, security groups are returned regardless of whether they have tag keys or values associated with them.</p>
  ##   Marker: string
  ##         : <p>An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusterSecurityGroups</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. </p> <p>Constraints: You can specify either the <b>ClusterSecurityGroupName</b> parameter or the <b>Marker</b> parameter, but not both. </p>
  ##   Action: string (required)
  ##   TagKeys: JArray
  ##          : A tag key or keys for which you want to return all matching cluster security groups that are associated with the specified key or keys. For example, suppose that you have security groups that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the security groups that have either or both of these tag keys associated with them.
  ##   MaxRecords: int
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   TagValues: JArray
  ##            : A tag value or values for which you want to return all matching cluster security groups that are associated with the specified tag value or values. For example, suppose that you have security groups that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the security groups that have either or both of these tag values associated with them.
  ##   Version: string (required)
  ##   ClusterSecurityGroupName: string
  ##                           : <p>The name of a cluster security group for which you are requesting details. You can specify either the <b>Marker</b> parameter or a <b>ClusterSecurityGroupName</b> parameter, but not both. </p> <p> Example: <code>securitygroup1</code> </p>
  var query_21627384 = newJObject()
  var formData_21627385 = newJObject()
  add(formData_21627385, "Marker", newJString(Marker))
  add(query_21627384, "Action", newJString(Action))
  if TagKeys != nil:
    formData_21627385.add "TagKeys", TagKeys
  add(formData_21627385, "MaxRecords", newJInt(MaxRecords))
  if TagValues != nil:
    formData_21627385.add "TagValues", TagValues
  add(query_21627384, "Version", newJString(Version))
  add(formData_21627385, "ClusterSecurityGroupName",
      newJString(ClusterSecurityGroupName))
  result = call_21627383.call(nil, query_21627384, nil, formData_21627385, nil)

var postDescribeClusterSecurityGroups* = Call_PostDescribeClusterSecurityGroups_21627365(
    name: "postDescribeClusterSecurityGroups", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com",
    route: "/#Action=DescribeClusterSecurityGroups",
    validator: validate_PostDescribeClusterSecurityGroups_21627366, base: "/",
    makeUrl: url_PostDescribeClusterSecurityGroups_21627367,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeClusterSecurityGroups_21627345 = ref object of OpenApiRestCall_21625418
proc url_GetDescribeClusterSecurityGroups_21627347(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeClusterSecurityGroups_21627346(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns information about Amazon Redshift security groups. If the name of a security group is specified, the response will contain only information about only that security group.</p> <p> For information about managing security groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html">Amazon Redshift Cluster Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all security groups that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all security groups that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, security groups are returned regardless of whether they have tag keys or values associated with them.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TagValues: JArray
  ##            : A tag value or values for which you want to return all matching cluster security groups that are associated with the specified tag value or values. For example, suppose that you have security groups that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the security groups that have either or both of these tag values associated with them.
  ##   ClusterSecurityGroupName: JString
  ##                           : <p>The name of a cluster security group for which you are requesting details. You can specify either the <b>Marker</b> parameter or a <b>ClusterSecurityGroupName</b> parameter, but not both. </p> <p> Example: <code>securitygroup1</code> </p>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : <p>An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusterSecurityGroups</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. </p> <p>Constraints: You can specify either the <b>ClusterSecurityGroupName</b> parameter or the <b>Marker</b> parameter, but not both. </p>
  ##   TagKeys: JArray
  ##          : A tag key or keys for which you want to return all matching cluster security groups that are associated with the specified key or keys. For example, suppose that you have security groups that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the security groups that have either or both of these tag keys associated with them.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627348 = query.getOrDefault("TagValues")
  valid_21627348 = validateParameter(valid_21627348, JArray, required = false,
                                   default = nil)
  if valid_21627348 != nil:
    section.add "TagValues", valid_21627348
  var valid_21627349 = query.getOrDefault("ClusterSecurityGroupName")
  valid_21627349 = validateParameter(valid_21627349, JString, required = false,
                                   default = nil)
  if valid_21627349 != nil:
    section.add "ClusterSecurityGroupName", valid_21627349
  var valid_21627350 = query.getOrDefault("MaxRecords")
  valid_21627350 = validateParameter(valid_21627350, JInt, required = false,
                                   default = nil)
  if valid_21627350 != nil:
    section.add "MaxRecords", valid_21627350
  var valid_21627351 = query.getOrDefault("Action")
  valid_21627351 = validateParameter(valid_21627351, JString, required = true, default = newJString(
      "DescribeClusterSecurityGroups"))
  if valid_21627351 != nil:
    section.add "Action", valid_21627351
  var valid_21627352 = query.getOrDefault("Marker")
  valid_21627352 = validateParameter(valid_21627352, JString, required = false,
                                   default = nil)
  if valid_21627352 != nil:
    section.add "Marker", valid_21627352
  var valid_21627353 = query.getOrDefault("TagKeys")
  valid_21627353 = validateParameter(valid_21627353, JArray, required = false,
                                   default = nil)
  if valid_21627353 != nil:
    section.add "TagKeys", valid_21627353
  var valid_21627354 = query.getOrDefault("Version")
  valid_21627354 = validateParameter(valid_21627354, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627354 != nil:
    section.add "Version", valid_21627354
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627355 = header.getOrDefault("X-Amz-Date")
  valid_21627355 = validateParameter(valid_21627355, JString, required = false,
                                   default = nil)
  if valid_21627355 != nil:
    section.add "X-Amz-Date", valid_21627355
  var valid_21627356 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627356 = validateParameter(valid_21627356, JString, required = false,
                                   default = nil)
  if valid_21627356 != nil:
    section.add "X-Amz-Security-Token", valid_21627356
  var valid_21627357 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627357 = validateParameter(valid_21627357, JString, required = false,
                                   default = nil)
  if valid_21627357 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627357
  var valid_21627358 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627358 = validateParameter(valid_21627358, JString, required = false,
                                   default = nil)
  if valid_21627358 != nil:
    section.add "X-Amz-Algorithm", valid_21627358
  var valid_21627359 = header.getOrDefault("X-Amz-Signature")
  valid_21627359 = validateParameter(valid_21627359, JString, required = false,
                                   default = nil)
  if valid_21627359 != nil:
    section.add "X-Amz-Signature", valid_21627359
  var valid_21627360 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627360 = validateParameter(valid_21627360, JString, required = false,
                                   default = nil)
  if valid_21627360 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627360
  var valid_21627361 = header.getOrDefault("X-Amz-Credential")
  valid_21627361 = validateParameter(valid_21627361, JString, required = false,
                                   default = nil)
  if valid_21627361 != nil:
    section.add "X-Amz-Credential", valid_21627361
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627362: Call_GetDescribeClusterSecurityGroups_21627345;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns information about Amazon Redshift security groups. If the name of a security group is specified, the response will contain only information about only that security group.</p> <p> For information about managing security groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html">Amazon Redshift Cluster Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all security groups that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all security groups that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, security groups are returned regardless of whether they have tag keys or values associated with them.</p>
  ## 
  let valid = call_21627362.validator(path, query, header, formData, body, _)
  let scheme = call_21627362.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627362.makeUrl(scheme.get, call_21627362.host, call_21627362.base,
                               call_21627362.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627362, uri, valid, _)

proc call*(call_21627363: Call_GetDescribeClusterSecurityGroups_21627345;
          TagValues: JsonNode = nil; ClusterSecurityGroupName: string = "";
          MaxRecords: int = 0; Action: string = "DescribeClusterSecurityGroups";
          Marker: string = ""; TagKeys: JsonNode = nil; Version: string = "2012-12-01"): Recallable =
  ## getDescribeClusterSecurityGroups
  ## <p>Returns information about Amazon Redshift security groups. If the name of a security group is specified, the response will contain only information about only that security group.</p> <p> For information about managing security groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html">Amazon Redshift Cluster Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all security groups that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all security groups that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, security groups are returned regardless of whether they have tag keys or values associated with them.</p>
  ##   TagValues: JArray
  ##            : A tag value or values for which you want to return all matching cluster security groups that are associated with the specified tag value or values. For example, suppose that you have security groups that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the security groups that have either or both of these tag values associated with them.
  ##   ClusterSecurityGroupName: string
  ##                           : <p>The name of a cluster security group for which you are requesting details. You can specify either the <b>Marker</b> parameter or a <b>ClusterSecurityGroupName</b> parameter, but not both. </p> <p> Example: <code>securitygroup1</code> </p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : <p>An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusterSecurityGroups</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. </p> <p>Constraints: You can specify either the <b>ClusterSecurityGroupName</b> parameter or the <b>Marker</b> parameter, but not both. </p>
  ##   TagKeys: JArray
  ##          : A tag key or keys for which you want to return all matching cluster security groups that are associated with the specified key or keys. For example, suppose that you have security groups that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the security groups that have either or both of these tag keys associated with them.
  ##   Version: string (required)
  var query_21627364 = newJObject()
  if TagValues != nil:
    query_21627364.add "TagValues", TagValues
  add(query_21627364, "ClusterSecurityGroupName",
      newJString(ClusterSecurityGroupName))
  add(query_21627364, "MaxRecords", newJInt(MaxRecords))
  add(query_21627364, "Action", newJString(Action))
  add(query_21627364, "Marker", newJString(Marker))
  if TagKeys != nil:
    query_21627364.add "TagKeys", TagKeys
  add(query_21627364, "Version", newJString(Version))
  result = call_21627363.call(nil, query_21627364, nil, nil, nil)

var getDescribeClusterSecurityGroups* = Call_GetDescribeClusterSecurityGroups_21627345(
    name: "getDescribeClusterSecurityGroups", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com",
    route: "/#Action=DescribeClusterSecurityGroups",
    validator: validate_GetDescribeClusterSecurityGroups_21627346, base: "/",
    makeUrl: url_GetDescribeClusterSecurityGroups_21627347,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeClusterSnapshots_21627413 = ref object of OpenApiRestCall_21625418
proc url_PostDescribeClusterSnapshots_21627415(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeClusterSnapshots_21627414(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns one or more snapshot objects, which contain metadata about your cluster snapshots. By default, this operation returns information about all snapshots of all clusters that are owned by you AWS customer account. No information is returned for snapshots owned by inactive AWS customer accounts.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all snapshots that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all snapshots that have any combination of those values are returned. Only snapshots that you own are returned in the response; shared snapshots are not returned with the tag key and tag value request parameters.</p> <p>If both tag keys and values are omitted from the request, snapshots are returned regardless of whether they have tag keys or values associated with them.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627416 = query.getOrDefault("Action")
  valid_21627416 = validateParameter(valid_21627416, JString, required = true, default = newJString(
      "DescribeClusterSnapshots"))
  if valid_21627416 != nil:
    section.add "Action", valid_21627416
  var valid_21627417 = query.getOrDefault("Version")
  valid_21627417 = validateParameter(valid_21627417, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627417 != nil:
    section.add "Version", valid_21627417
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627418 = header.getOrDefault("X-Amz-Date")
  valid_21627418 = validateParameter(valid_21627418, JString, required = false,
                                   default = nil)
  if valid_21627418 != nil:
    section.add "X-Amz-Date", valid_21627418
  var valid_21627419 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627419 = validateParameter(valid_21627419, JString, required = false,
                                   default = nil)
  if valid_21627419 != nil:
    section.add "X-Amz-Security-Token", valid_21627419
  var valid_21627420 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627420 = validateParameter(valid_21627420, JString, required = false,
                                   default = nil)
  if valid_21627420 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627420
  var valid_21627421 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627421 = validateParameter(valid_21627421, JString, required = false,
                                   default = nil)
  if valid_21627421 != nil:
    section.add "X-Amz-Algorithm", valid_21627421
  var valid_21627422 = header.getOrDefault("X-Amz-Signature")
  valid_21627422 = validateParameter(valid_21627422, JString, required = false,
                                   default = nil)
  if valid_21627422 != nil:
    section.add "X-Amz-Signature", valid_21627422
  var valid_21627423 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627423 = validateParameter(valid_21627423, JString, required = false,
                                   default = nil)
  if valid_21627423 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627423
  var valid_21627424 = header.getOrDefault("X-Amz-Credential")
  valid_21627424 = validateParameter(valid_21627424, JString, required = false,
                                   default = nil)
  if valid_21627424 != nil:
    section.add "X-Amz-Credential", valid_21627424
  result.add "header", section
  ## parameters in `formData` object:
  ##   SortingEntities: JArray
  ##                  : <p/>
  ##   SnapshotType: JString
  ##               : <p>The type of snapshots for which you are requesting information. By default, snapshots of all types are returned.</p> <p>Valid Values: <code>automated</code> | <code>manual</code> </p>
  ##   Marker: JString
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusterSnapshots</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   StartTime: JString
  ##            : <p>A value that requests only snapshots created at or after the specified time. The time value is specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: <code>2012-07-16T18:00:00Z</code> </p>
  ##   OwnerAccount: JString
  ##               : The AWS customer account used to create or copy the snapshot. Use this field to filter the results to snapshots owned by a particular account. To describe snapshots you own, either specify your AWS customer account, or do not specify the parameter.
  ##   ClusterIdentifier: JString
  ##                    : The identifier of the cluster which generated the requested snapshots.
  ##   TagKeys: JArray
  ##          : A tag key or keys for which you want to return all matching cluster snapshots that are associated with the specified key or keys. For example, suppose that you have snapshots that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the snapshots that have either or both of these tag keys associated with them.
  ##   EndTime: JString
  ##          : <p>A time value that requests only snapshots created at or before the specified time. The time value is specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: <code>2012-07-16T18:00:00Z</code> </p>
  ##   ClusterExists: JBool
  ##                : <p>A value that indicates whether to return snapshots only for an existing cluster. You can perform table-level restore only by using a snapshot of an existing cluster, that is, a cluster that has not been deleted. Values for this parameter work as follows: </p> <ul> <li> <p>If <code>ClusterExists</code> is set to <code>true</code>, <code>ClusterIdentifier</code> is required.</p> </li> <li> <p>If <code>ClusterExists</code> is set to <code>false</code> and <code>ClusterIdentifier</code> isn't specified, all snapshots associated with deleted clusters (orphaned snapshots) are returned. </p> </li> <li> <p>If <code>ClusterExists</code> is set to <code>false</code> and <code>ClusterIdentifier</code> is specified for a deleted cluster, snapshots associated with that cluster are returned.</p> </li> <li> <p>If <code>ClusterExists</code> is set to <code>false</code> and <code>ClusterIdentifier</code> is specified for an existing cluster, no snapshots are returned. </p> </li> </ul>
  ##   SnapshotIdentifier: JString
  ##                     : The snapshot identifier of the snapshot about which to return information.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   TagValues: JArray
  ##            : A tag value or values for which you want to return all matching cluster snapshots that are associated with the specified tag value or values. For example, suppose that you have snapshots that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the snapshots that have either or both of these tag values associated with them.
  section = newJObject()
  var valid_21627425 = formData.getOrDefault("SortingEntities")
  valid_21627425 = validateParameter(valid_21627425, JArray, required = false,
                                   default = nil)
  if valid_21627425 != nil:
    section.add "SortingEntities", valid_21627425
  var valid_21627426 = formData.getOrDefault("SnapshotType")
  valid_21627426 = validateParameter(valid_21627426, JString, required = false,
                                   default = nil)
  if valid_21627426 != nil:
    section.add "SnapshotType", valid_21627426
  var valid_21627427 = formData.getOrDefault("Marker")
  valid_21627427 = validateParameter(valid_21627427, JString, required = false,
                                   default = nil)
  if valid_21627427 != nil:
    section.add "Marker", valid_21627427
  var valid_21627428 = formData.getOrDefault("StartTime")
  valid_21627428 = validateParameter(valid_21627428, JString, required = false,
                                   default = nil)
  if valid_21627428 != nil:
    section.add "StartTime", valid_21627428
  var valid_21627429 = formData.getOrDefault("OwnerAccount")
  valid_21627429 = validateParameter(valid_21627429, JString, required = false,
                                   default = nil)
  if valid_21627429 != nil:
    section.add "OwnerAccount", valid_21627429
  var valid_21627430 = formData.getOrDefault("ClusterIdentifier")
  valid_21627430 = validateParameter(valid_21627430, JString, required = false,
                                   default = nil)
  if valid_21627430 != nil:
    section.add "ClusterIdentifier", valid_21627430
  var valid_21627431 = formData.getOrDefault("TagKeys")
  valid_21627431 = validateParameter(valid_21627431, JArray, required = false,
                                   default = nil)
  if valid_21627431 != nil:
    section.add "TagKeys", valid_21627431
  var valid_21627432 = formData.getOrDefault("EndTime")
  valid_21627432 = validateParameter(valid_21627432, JString, required = false,
                                   default = nil)
  if valid_21627432 != nil:
    section.add "EndTime", valid_21627432
  var valid_21627433 = formData.getOrDefault("ClusterExists")
  valid_21627433 = validateParameter(valid_21627433, JBool, required = false,
                                   default = nil)
  if valid_21627433 != nil:
    section.add "ClusterExists", valid_21627433
  var valid_21627434 = formData.getOrDefault("SnapshotIdentifier")
  valid_21627434 = validateParameter(valid_21627434, JString, required = false,
                                   default = nil)
  if valid_21627434 != nil:
    section.add "SnapshotIdentifier", valid_21627434
  var valid_21627435 = formData.getOrDefault("MaxRecords")
  valid_21627435 = validateParameter(valid_21627435, JInt, required = false,
                                   default = nil)
  if valid_21627435 != nil:
    section.add "MaxRecords", valid_21627435
  var valid_21627436 = formData.getOrDefault("TagValues")
  valid_21627436 = validateParameter(valid_21627436, JArray, required = false,
                                   default = nil)
  if valid_21627436 != nil:
    section.add "TagValues", valid_21627436
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627437: Call_PostDescribeClusterSnapshots_21627413;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns one or more snapshot objects, which contain metadata about your cluster snapshots. By default, this operation returns information about all snapshots of all clusters that are owned by you AWS customer account. No information is returned for snapshots owned by inactive AWS customer accounts.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all snapshots that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all snapshots that have any combination of those values are returned. Only snapshots that you own are returned in the response; shared snapshots are not returned with the tag key and tag value request parameters.</p> <p>If both tag keys and values are omitted from the request, snapshots are returned regardless of whether they have tag keys or values associated with them.</p>
  ## 
  let valid = call_21627437.validator(path, query, header, formData, body, _)
  let scheme = call_21627437.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627437.makeUrl(scheme.get, call_21627437.host, call_21627437.base,
                               call_21627437.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627437, uri, valid, _)

proc call*(call_21627438: Call_PostDescribeClusterSnapshots_21627413;
          SortingEntities: JsonNode = nil; SnapshotType: string = "";
          Marker: string = ""; StartTime: string = "";
          Action: string = "DescribeClusterSnapshots"; OwnerAccount: string = "";
          ClusterIdentifier: string = ""; TagKeys: JsonNode = nil; EndTime: string = "";
          ClusterExists: bool = false; SnapshotIdentifier: string = "";
          MaxRecords: int = 0; TagValues: JsonNode = nil; Version: string = "2012-12-01"): Recallable =
  ## postDescribeClusterSnapshots
  ## <p>Returns one or more snapshot objects, which contain metadata about your cluster snapshots. By default, this operation returns information about all snapshots of all clusters that are owned by you AWS customer account. No information is returned for snapshots owned by inactive AWS customer accounts.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all snapshots that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all snapshots that have any combination of those values are returned. Only snapshots that you own are returned in the response; shared snapshots are not returned with the tag key and tag value request parameters.</p> <p>If both tag keys and values are omitted from the request, snapshots are returned regardless of whether they have tag keys or values associated with them.</p>
  ##   SortingEntities: JArray
  ##                  : <p/>
  ##   SnapshotType: string
  ##               : <p>The type of snapshots for which you are requesting information. By default, snapshots of all types are returned.</p> <p>Valid Values: <code>automated</code> | <code>manual</code> </p>
  ##   Marker: string
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusterSnapshots</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   StartTime: string
  ##            : <p>A value that requests only snapshots created at or after the specified time. The time value is specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: <code>2012-07-16T18:00:00Z</code> </p>
  ##   Action: string (required)
  ##   OwnerAccount: string
  ##               : The AWS customer account used to create or copy the snapshot. Use this field to filter the results to snapshots owned by a particular account. To describe snapshots you own, either specify your AWS customer account, or do not specify the parameter.
  ##   ClusterIdentifier: string
  ##                    : The identifier of the cluster which generated the requested snapshots.
  ##   TagKeys: JArray
  ##          : A tag key or keys for which you want to return all matching cluster snapshots that are associated with the specified key or keys. For example, suppose that you have snapshots that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the snapshots that have either or both of these tag keys associated with them.
  ##   EndTime: string
  ##          : <p>A time value that requests only snapshots created at or before the specified time. The time value is specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: <code>2012-07-16T18:00:00Z</code> </p>
  ##   ClusterExists: bool
  ##                : <p>A value that indicates whether to return snapshots only for an existing cluster. You can perform table-level restore only by using a snapshot of an existing cluster, that is, a cluster that has not been deleted. Values for this parameter work as follows: </p> <ul> <li> <p>If <code>ClusterExists</code> is set to <code>true</code>, <code>ClusterIdentifier</code> is required.</p> </li> <li> <p>If <code>ClusterExists</code> is set to <code>false</code> and <code>ClusterIdentifier</code> isn't specified, all snapshots associated with deleted clusters (orphaned snapshots) are returned. </p> </li> <li> <p>If <code>ClusterExists</code> is set to <code>false</code> and <code>ClusterIdentifier</code> is specified for a deleted cluster, snapshots associated with that cluster are returned.</p> </li> <li> <p>If <code>ClusterExists</code> is set to <code>false</code> and <code>ClusterIdentifier</code> is specified for an existing cluster, no snapshots are returned. </p> </li> </ul>
  ##   SnapshotIdentifier: string
  ##                     : The snapshot identifier of the snapshot about which to return information.
  ##   MaxRecords: int
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   TagValues: JArray
  ##            : A tag value or values for which you want to return all matching cluster snapshots that are associated with the specified tag value or values. For example, suppose that you have snapshots that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the snapshots that have either or both of these tag values associated with them.
  ##   Version: string (required)
  var query_21627439 = newJObject()
  var formData_21627440 = newJObject()
  if SortingEntities != nil:
    formData_21627440.add "SortingEntities", SortingEntities
  add(formData_21627440, "SnapshotType", newJString(SnapshotType))
  add(formData_21627440, "Marker", newJString(Marker))
  add(formData_21627440, "StartTime", newJString(StartTime))
  add(query_21627439, "Action", newJString(Action))
  add(formData_21627440, "OwnerAccount", newJString(OwnerAccount))
  add(formData_21627440, "ClusterIdentifier", newJString(ClusterIdentifier))
  if TagKeys != nil:
    formData_21627440.add "TagKeys", TagKeys
  add(formData_21627440, "EndTime", newJString(EndTime))
  add(formData_21627440, "ClusterExists", newJBool(ClusterExists))
  add(formData_21627440, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  add(formData_21627440, "MaxRecords", newJInt(MaxRecords))
  if TagValues != nil:
    formData_21627440.add "TagValues", TagValues
  add(query_21627439, "Version", newJString(Version))
  result = call_21627438.call(nil, query_21627439, nil, formData_21627440, nil)

var postDescribeClusterSnapshots* = Call_PostDescribeClusterSnapshots_21627413(
    name: "postDescribeClusterSnapshots", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=DescribeClusterSnapshots",
    validator: validate_PostDescribeClusterSnapshots_21627414, base: "/",
    makeUrl: url_PostDescribeClusterSnapshots_21627415,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeClusterSnapshots_21627386 = ref object of OpenApiRestCall_21625418
proc url_GetDescribeClusterSnapshots_21627388(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeClusterSnapshots_21627387(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Returns one or more snapshot objects, which contain metadata about your cluster snapshots. By default, this operation returns information about all snapshots of all clusters that are owned by you AWS customer account. No information is returned for snapshots owned by inactive AWS customer accounts.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all snapshots that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all snapshots that have any combination of those values are returned. Only snapshots that you own are returned in the response; shared snapshots are not returned with the tag key and tag value request parameters.</p> <p>If both tag keys and values are omitted from the request, snapshots are returned regardless of whether they have tag keys or values associated with them.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TagValues: JArray
  ##            : A tag value or values for which you want to return all matching cluster snapshots that are associated with the specified tag value or values. For example, suppose that you have snapshots that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the snapshots that have either or both of these tag values associated with them.
  ##   SortingEntities: JArray
  ##                  : <p/>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   StartTime: JString
  ##            : <p>A value that requests only snapshots created at or after the specified time. The time value is specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: <code>2012-07-16T18:00:00Z</code> </p>
  ##   Action: JString (required)
  ##   ClusterIdentifier: JString
  ##                    : The identifier of the cluster which generated the requested snapshots.
  ##   Marker: JString
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusterSnapshots</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   OwnerAccount: JString
  ##               : The AWS customer account used to create or copy the snapshot. Use this field to filter the results to snapshots owned by a particular account. To describe snapshots you own, either specify your AWS customer account, or do not specify the parameter.
  ##   ClusterExists: JBool
  ##                : <p>A value that indicates whether to return snapshots only for an existing cluster. You can perform table-level restore only by using a snapshot of an existing cluster, that is, a cluster that has not been deleted. Values for this parameter work as follows: </p> <ul> <li> <p>If <code>ClusterExists</code> is set to <code>true</code>, <code>ClusterIdentifier</code> is required.</p> </li> <li> <p>If <code>ClusterExists</code> is set to <code>false</code> and <code>ClusterIdentifier</code> isn't specified, all snapshots associated with deleted clusters (orphaned snapshots) are returned. </p> </li> <li> <p>If <code>ClusterExists</code> is set to <code>false</code> and <code>ClusterIdentifier</code> is specified for a deleted cluster, snapshots associated with that cluster are returned.</p> </li> <li> <p>If <code>ClusterExists</code> is set to <code>false</code> and <code>ClusterIdentifier</code> is specified for an existing cluster, no snapshots are returned. </p> </li> </ul>
  ##   SnapshotIdentifier: JString
  ##                     : The snapshot identifier of the snapshot about which to return information.
  ##   TagKeys: JArray
  ##          : A tag key or keys for which you want to return all matching cluster snapshots that are associated with the specified key or keys. For example, suppose that you have snapshots that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the snapshots that have either or both of these tag keys associated with them.
  ##   SnapshotType: JString
  ##               : <p>The type of snapshots for which you are requesting information. By default, snapshots of all types are returned.</p> <p>Valid Values: <code>automated</code> | <code>manual</code> </p>
  ##   EndTime: JString
  ##          : <p>A time value that requests only snapshots created at or before the specified time. The time value is specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: <code>2012-07-16T18:00:00Z</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627389 = query.getOrDefault("TagValues")
  valid_21627389 = validateParameter(valid_21627389, JArray, required = false,
                                   default = nil)
  if valid_21627389 != nil:
    section.add "TagValues", valid_21627389
  var valid_21627390 = query.getOrDefault("SortingEntities")
  valid_21627390 = validateParameter(valid_21627390, JArray, required = false,
                                   default = nil)
  if valid_21627390 != nil:
    section.add "SortingEntities", valid_21627390
  var valid_21627391 = query.getOrDefault("MaxRecords")
  valid_21627391 = validateParameter(valid_21627391, JInt, required = false,
                                   default = nil)
  if valid_21627391 != nil:
    section.add "MaxRecords", valid_21627391
  var valid_21627392 = query.getOrDefault("StartTime")
  valid_21627392 = validateParameter(valid_21627392, JString, required = false,
                                   default = nil)
  if valid_21627392 != nil:
    section.add "StartTime", valid_21627392
  var valid_21627393 = query.getOrDefault("Action")
  valid_21627393 = validateParameter(valid_21627393, JString, required = true, default = newJString(
      "DescribeClusterSnapshots"))
  if valid_21627393 != nil:
    section.add "Action", valid_21627393
  var valid_21627394 = query.getOrDefault("ClusterIdentifier")
  valid_21627394 = validateParameter(valid_21627394, JString, required = false,
                                   default = nil)
  if valid_21627394 != nil:
    section.add "ClusterIdentifier", valid_21627394
  var valid_21627395 = query.getOrDefault("Marker")
  valid_21627395 = validateParameter(valid_21627395, JString, required = false,
                                   default = nil)
  if valid_21627395 != nil:
    section.add "Marker", valid_21627395
  var valid_21627396 = query.getOrDefault("OwnerAccount")
  valid_21627396 = validateParameter(valid_21627396, JString, required = false,
                                   default = nil)
  if valid_21627396 != nil:
    section.add "OwnerAccount", valid_21627396
  var valid_21627397 = query.getOrDefault("ClusterExists")
  valid_21627397 = validateParameter(valid_21627397, JBool, required = false,
                                   default = nil)
  if valid_21627397 != nil:
    section.add "ClusterExists", valid_21627397
  var valid_21627398 = query.getOrDefault("SnapshotIdentifier")
  valid_21627398 = validateParameter(valid_21627398, JString, required = false,
                                   default = nil)
  if valid_21627398 != nil:
    section.add "SnapshotIdentifier", valid_21627398
  var valid_21627399 = query.getOrDefault("TagKeys")
  valid_21627399 = validateParameter(valid_21627399, JArray, required = false,
                                   default = nil)
  if valid_21627399 != nil:
    section.add "TagKeys", valid_21627399
  var valid_21627400 = query.getOrDefault("SnapshotType")
  valid_21627400 = validateParameter(valid_21627400, JString, required = false,
                                   default = nil)
  if valid_21627400 != nil:
    section.add "SnapshotType", valid_21627400
  var valid_21627401 = query.getOrDefault("EndTime")
  valid_21627401 = validateParameter(valid_21627401, JString, required = false,
                                   default = nil)
  if valid_21627401 != nil:
    section.add "EndTime", valid_21627401
  var valid_21627402 = query.getOrDefault("Version")
  valid_21627402 = validateParameter(valid_21627402, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627402 != nil:
    section.add "Version", valid_21627402
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627403 = header.getOrDefault("X-Amz-Date")
  valid_21627403 = validateParameter(valid_21627403, JString, required = false,
                                   default = nil)
  if valid_21627403 != nil:
    section.add "X-Amz-Date", valid_21627403
  var valid_21627404 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627404 = validateParameter(valid_21627404, JString, required = false,
                                   default = nil)
  if valid_21627404 != nil:
    section.add "X-Amz-Security-Token", valid_21627404
  var valid_21627405 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627405 = validateParameter(valid_21627405, JString, required = false,
                                   default = nil)
  if valid_21627405 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627405
  var valid_21627406 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627406 = validateParameter(valid_21627406, JString, required = false,
                                   default = nil)
  if valid_21627406 != nil:
    section.add "X-Amz-Algorithm", valid_21627406
  var valid_21627407 = header.getOrDefault("X-Amz-Signature")
  valid_21627407 = validateParameter(valid_21627407, JString, required = false,
                                   default = nil)
  if valid_21627407 != nil:
    section.add "X-Amz-Signature", valid_21627407
  var valid_21627408 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627408 = validateParameter(valid_21627408, JString, required = false,
                                   default = nil)
  if valid_21627408 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627408
  var valid_21627409 = header.getOrDefault("X-Amz-Credential")
  valid_21627409 = validateParameter(valid_21627409, JString, required = false,
                                   default = nil)
  if valid_21627409 != nil:
    section.add "X-Amz-Credential", valid_21627409
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627410: Call_GetDescribeClusterSnapshots_21627386;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns one or more snapshot objects, which contain metadata about your cluster snapshots. By default, this operation returns information about all snapshots of all clusters that are owned by you AWS customer account. No information is returned for snapshots owned by inactive AWS customer accounts.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all snapshots that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all snapshots that have any combination of those values are returned. Only snapshots that you own are returned in the response; shared snapshots are not returned with the tag key and tag value request parameters.</p> <p>If both tag keys and values are omitted from the request, snapshots are returned regardless of whether they have tag keys or values associated with them.</p>
  ## 
  let valid = call_21627410.validator(path, query, header, formData, body, _)
  let scheme = call_21627410.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627410.makeUrl(scheme.get, call_21627410.host, call_21627410.base,
                               call_21627410.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627410, uri, valid, _)

proc call*(call_21627411: Call_GetDescribeClusterSnapshots_21627386;
          TagValues: JsonNode = nil; SortingEntities: JsonNode = nil;
          MaxRecords: int = 0; StartTime: string = "";
          Action: string = "DescribeClusterSnapshots";
          ClusterIdentifier: string = ""; Marker: string = "";
          OwnerAccount: string = ""; ClusterExists: bool = false;
          SnapshotIdentifier: string = ""; TagKeys: JsonNode = nil;
          SnapshotType: string = ""; EndTime: string = "";
          Version: string = "2012-12-01"): Recallable =
  ## getDescribeClusterSnapshots
  ## <p>Returns one or more snapshot objects, which contain metadata about your cluster snapshots. By default, this operation returns information about all snapshots of all clusters that are owned by you AWS customer account. No information is returned for snapshots owned by inactive AWS customer accounts.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all snapshots that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all snapshots that have any combination of those values are returned. Only snapshots that you own are returned in the response; shared snapshots are not returned with the tag key and tag value request parameters.</p> <p>If both tag keys and values are omitted from the request, snapshots are returned regardless of whether they have tag keys or values associated with them.</p>
  ##   TagValues: JArray
  ##            : A tag value or values for which you want to return all matching cluster snapshots that are associated with the specified tag value or values. For example, suppose that you have snapshots that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the snapshots that have either or both of these tag values associated with them.
  ##   SortingEntities: JArray
  ##                  : <p/>
  ##   MaxRecords: int
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   StartTime: string
  ##            : <p>A value that requests only snapshots created at or after the specified time. The time value is specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: <code>2012-07-16T18:00:00Z</code> </p>
  ##   Action: string (required)
  ##   ClusterIdentifier: string
  ##                    : The identifier of the cluster which generated the requested snapshots.
  ##   Marker: string
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusterSnapshots</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   OwnerAccount: string
  ##               : The AWS customer account used to create or copy the snapshot. Use this field to filter the results to snapshots owned by a particular account. To describe snapshots you own, either specify your AWS customer account, or do not specify the parameter.
  ##   ClusterExists: bool
  ##                : <p>A value that indicates whether to return snapshots only for an existing cluster. You can perform table-level restore only by using a snapshot of an existing cluster, that is, a cluster that has not been deleted. Values for this parameter work as follows: </p> <ul> <li> <p>If <code>ClusterExists</code> is set to <code>true</code>, <code>ClusterIdentifier</code> is required.</p> </li> <li> <p>If <code>ClusterExists</code> is set to <code>false</code> and <code>ClusterIdentifier</code> isn't specified, all snapshots associated with deleted clusters (orphaned snapshots) are returned. </p> </li> <li> <p>If <code>ClusterExists</code> is set to <code>false</code> and <code>ClusterIdentifier</code> is specified for a deleted cluster, snapshots associated with that cluster are returned.</p> </li> <li> <p>If <code>ClusterExists</code> is set to <code>false</code> and <code>ClusterIdentifier</code> is specified for an existing cluster, no snapshots are returned. </p> </li> </ul>
  ##   SnapshotIdentifier: string
  ##                     : The snapshot identifier of the snapshot about which to return information.
  ##   TagKeys: JArray
  ##          : A tag key or keys for which you want to return all matching cluster snapshots that are associated with the specified key or keys. For example, suppose that you have snapshots that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the snapshots that have either or both of these tag keys associated with them.
  ##   SnapshotType: string
  ##               : <p>The type of snapshots for which you are requesting information. By default, snapshots of all types are returned.</p> <p>Valid Values: <code>automated</code> | <code>manual</code> </p>
  ##   EndTime: string
  ##          : <p>A time value that requests only snapshots created at or before the specified time. The time value is specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: <code>2012-07-16T18:00:00Z</code> </p>
  ##   Version: string (required)
  var query_21627412 = newJObject()
  if TagValues != nil:
    query_21627412.add "TagValues", TagValues
  if SortingEntities != nil:
    query_21627412.add "SortingEntities", SortingEntities
  add(query_21627412, "MaxRecords", newJInt(MaxRecords))
  add(query_21627412, "StartTime", newJString(StartTime))
  add(query_21627412, "Action", newJString(Action))
  add(query_21627412, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(query_21627412, "Marker", newJString(Marker))
  add(query_21627412, "OwnerAccount", newJString(OwnerAccount))
  add(query_21627412, "ClusterExists", newJBool(ClusterExists))
  add(query_21627412, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  if TagKeys != nil:
    query_21627412.add "TagKeys", TagKeys
  add(query_21627412, "SnapshotType", newJString(SnapshotType))
  add(query_21627412, "EndTime", newJString(EndTime))
  add(query_21627412, "Version", newJString(Version))
  result = call_21627411.call(nil, query_21627412, nil, nil, nil)

var getDescribeClusterSnapshots* = Call_GetDescribeClusterSnapshots_21627386(
    name: "getDescribeClusterSnapshots", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=DescribeClusterSnapshots",
    validator: validate_GetDescribeClusterSnapshots_21627387, base: "/",
    makeUrl: url_GetDescribeClusterSnapshots_21627388,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeClusterSubnetGroups_21627461 = ref object of OpenApiRestCall_21625418
proc url_PostDescribeClusterSubnetGroups_21627463(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeClusterSubnetGroups_21627462(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns one or more cluster subnet group objects, which contain metadata about your cluster subnet groups. By default, this operation returns information about all cluster subnet groups that are defined in you AWS account.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all subnet groups that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all subnet groups that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, subnet groups are returned regardless of whether they have tag keys or values associated with them.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627464 = query.getOrDefault("Action")
  valid_21627464 = validateParameter(valid_21627464, JString, required = true, default = newJString(
      "DescribeClusterSubnetGroups"))
  if valid_21627464 != nil:
    section.add "Action", valid_21627464
  var valid_21627465 = query.getOrDefault("Version")
  valid_21627465 = validateParameter(valid_21627465, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627465 != nil:
    section.add "Version", valid_21627465
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627466 = header.getOrDefault("X-Amz-Date")
  valid_21627466 = validateParameter(valid_21627466, JString, required = false,
                                   default = nil)
  if valid_21627466 != nil:
    section.add "X-Amz-Date", valid_21627466
  var valid_21627467 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627467 = validateParameter(valid_21627467, JString, required = false,
                                   default = nil)
  if valid_21627467 != nil:
    section.add "X-Amz-Security-Token", valid_21627467
  var valid_21627468 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627468 = validateParameter(valid_21627468, JString, required = false,
                                   default = nil)
  if valid_21627468 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627468
  var valid_21627469 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627469 = validateParameter(valid_21627469, JString, required = false,
                                   default = nil)
  if valid_21627469 != nil:
    section.add "X-Amz-Algorithm", valid_21627469
  var valid_21627470 = header.getOrDefault("X-Amz-Signature")
  valid_21627470 = validateParameter(valid_21627470, JString, required = false,
                                   default = nil)
  if valid_21627470 != nil:
    section.add "X-Amz-Signature", valid_21627470
  var valid_21627471 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627471 = validateParameter(valid_21627471, JString, required = false,
                                   default = nil)
  if valid_21627471 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627471
  var valid_21627472 = header.getOrDefault("X-Amz-Credential")
  valid_21627472 = validateParameter(valid_21627472, JString, required = false,
                                   default = nil)
  if valid_21627472 != nil:
    section.add "X-Amz-Credential", valid_21627472
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusterSubnetGroups</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   TagKeys: JArray
  ##          : A tag key or keys for which you want to return all matching cluster subnet groups that are associated with the specified key or keys. For example, suppose that you have subnet groups that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the subnet groups that have either or both of these tag keys associated with them.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   TagValues: JArray
  ##            : A tag value or values for which you want to return all matching cluster subnet groups that are associated with the specified tag value or values. For example, suppose that you have subnet groups that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the subnet groups that have either or both of these tag values associated with them.
  ##   ClusterSubnetGroupName: JString
  ##                         : The name of the cluster subnet group for which information is requested.
  section = newJObject()
  var valid_21627473 = formData.getOrDefault("Marker")
  valid_21627473 = validateParameter(valid_21627473, JString, required = false,
                                   default = nil)
  if valid_21627473 != nil:
    section.add "Marker", valid_21627473
  var valid_21627474 = formData.getOrDefault("TagKeys")
  valid_21627474 = validateParameter(valid_21627474, JArray, required = false,
                                   default = nil)
  if valid_21627474 != nil:
    section.add "TagKeys", valid_21627474
  var valid_21627475 = formData.getOrDefault("MaxRecords")
  valid_21627475 = validateParameter(valid_21627475, JInt, required = false,
                                   default = nil)
  if valid_21627475 != nil:
    section.add "MaxRecords", valid_21627475
  var valid_21627476 = formData.getOrDefault("TagValues")
  valid_21627476 = validateParameter(valid_21627476, JArray, required = false,
                                   default = nil)
  if valid_21627476 != nil:
    section.add "TagValues", valid_21627476
  var valid_21627477 = formData.getOrDefault("ClusterSubnetGroupName")
  valid_21627477 = validateParameter(valid_21627477, JString, required = false,
                                   default = nil)
  if valid_21627477 != nil:
    section.add "ClusterSubnetGroupName", valid_21627477
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627478: Call_PostDescribeClusterSubnetGroups_21627461;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns one or more cluster subnet group objects, which contain metadata about your cluster subnet groups. By default, this operation returns information about all cluster subnet groups that are defined in you AWS account.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all subnet groups that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all subnet groups that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, subnet groups are returned regardless of whether they have tag keys or values associated with them.</p>
  ## 
  let valid = call_21627478.validator(path, query, header, formData, body, _)
  let scheme = call_21627478.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627478.makeUrl(scheme.get, call_21627478.host, call_21627478.base,
                               call_21627478.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627478, uri, valid, _)

proc call*(call_21627479: Call_PostDescribeClusterSubnetGroups_21627461;
          Marker: string = ""; Action: string = "DescribeClusterSubnetGroups";
          TagKeys: JsonNode = nil; MaxRecords: int = 0; TagValues: JsonNode = nil;
          Version: string = "2012-12-01"; ClusterSubnetGroupName: string = ""): Recallable =
  ## postDescribeClusterSubnetGroups
  ## <p>Returns one or more cluster subnet group objects, which contain metadata about your cluster subnet groups. By default, this operation returns information about all cluster subnet groups that are defined in you AWS account.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all subnet groups that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all subnet groups that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, subnet groups are returned regardless of whether they have tag keys or values associated with them.</p>
  ##   Marker: string
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusterSubnetGroups</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   Action: string (required)
  ##   TagKeys: JArray
  ##          : A tag key or keys for which you want to return all matching cluster subnet groups that are associated with the specified key or keys. For example, suppose that you have subnet groups that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the subnet groups that have either or both of these tag keys associated with them.
  ##   MaxRecords: int
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   TagValues: JArray
  ##            : A tag value or values for which you want to return all matching cluster subnet groups that are associated with the specified tag value or values. For example, suppose that you have subnet groups that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the subnet groups that have either or both of these tag values associated with them.
  ##   Version: string (required)
  ##   ClusterSubnetGroupName: string
  ##                         : The name of the cluster subnet group for which information is requested.
  var query_21627480 = newJObject()
  var formData_21627481 = newJObject()
  add(formData_21627481, "Marker", newJString(Marker))
  add(query_21627480, "Action", newJString(Action))
  if TagKeys != nil:
    formData_21627481.add "TagKeys", TagKeys
  add(formData_21627481, "MaxRecords", newJInt(MaxRecords))
  if TagValues != nil:
    formData_21627481.add "TagValues", TagValues
  add(query_21627480, "Version", newJString(Version))
  add(formData_21627481, "ClusterSubnetGroupName",
      newJString(ClusterSubnetGroupName))
  result = call_21627479.call(nil, query_21627480, nil, formData_21627481, nil)

var postDescribeClusterSubnetGroups* = Call_PostDescribeClusterSubnetGroups_21627461(
    name: "postDescribeClusterSubnetGroups", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=DescribeClusterSubnetGroups",
    validator: validate_PostDescribeClusterSubnetGroups_21627462, base: "/",
    makeUrl: url_PostDescribeClusterSubnetGroups_21627463,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeClusterSubnetGroups_21627441 = ref object of OpenApiRestCall_21625418
proc url_GetDescribeClusterSubnetGroups_21627443(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeClusterSubnetGroups_21627442(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns one or more cluster subnet group objects, which contain metadata about your cluster subnet groups. By default, this operation returns information about all cluster subnet groups that are defined in you AWS account.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all subnet groups that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all subnet groups that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, subnet groups are returned regardless of whether they have tag keys or values associated with them.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TagValues: JArray
  ##            : A tag value or values for which you want to return all matching cluster subnet groups that are associated with the specified tag value or values. For example, suppose that you have subnet groups that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the subnet groups that have either or both of these tag values associated with them.
  ##   ClusterSubnetGroupName: JString
  ##                         : The name of the cluster subnet group for which information is requested.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusterSubnetGroups</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   TagKeys: JArray
  ##          : A tag key or keys for which you want to return all matching cluster subnet groups that are associated with the specified key or keys. For example, suppose that you have subnet groups that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the subnet groups that have either or both of these tag keys associated with them.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627444 = query.getOrDefault("TagValues")
  valid_21627444 = validateParameter(valid_21627444, JArray, required = false,
                                   default = nil)
  if valid_21627444 != nil:
    section.add "TagValues", valid_21627444
  var valid_21627445 = query.getOrDefault("ClusterSubnetGroupName")
  valid_21627445 = validateParameter(valid_21627445, JString, required = false,
                                   default = nil)
  if valid_21627445 != nil:
    section.add "ClusterSubnetGroupName", valid_21627445
  var valid_21627446 = query.getOrDefault("MaxRecords")
  valid_21627446 = validateParameter(valid_21627446, JInt, required = false,
                                   default = nil)
  if valid_21627446 != nil:
    section.add "MaxRecords", valid_21627446
  var valid_21627447 = query.getOrDefault("Action")
  valid_21627447 = validateParameter(valid_21627447, JString, required = true, default = newJString(
      "DescribeClusterSubnetGroups"))
  if valid_21627447 != nil:
    section.add "Action", valid_21627447
  var valid_21627448 = query.getOrDefault("Marker")
  valid_21627448 = validateParameter(valid_21627448, JString, required = false,
                                   default = nil)
  if valid_21627448 != nil:
    section.add "Marker", valid_21627448
  var valid_21627449 = query.getOrDefault("TagKeys")
  valid_21627449 = validateParameter(valid_21627449, JArray, required = false,
                                   default = nil)
  if valid_21627449 != nil:
    section.add "TagKeys", valid_21627449
  var valid_21627450 = query.getOrDefault("Version")
  valid_21627450 = validateParameter(valid_21627450, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627450 != nil:
    section.add "Version", valid_21627450
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627451 = header.getOrDefault("X-Amz-Date")
  valid_21627451 = validateParameter(valid_21627451, JString, required = false,
                                   default = nil)
  if valid_21627451 != nil:
    section.add "X-Amz-Date", valid_21627451
  var valid_21627452 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627452 = validateParameter(valid_21627452, JString, required = false,
                                   default = nil)
  if valid_21627452 != nil:
    section.add "X-Amz-Security-Token", valid_21627452
  var valid_21627453 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627453 = validateParameter(valid_21627453, JString, required = false,
                                   default = nil)
  if valid_21627453 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627453
  var valid_21627454 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627454 = validateParameter(valid_21627454, JString, required = false,
                                   default = nil)
  if valid_21627454 != nil:
    section.add "X-Amz-Algorithm", valid_21627454
  var valid_21627455 = header.getOrDefault("X-Amz-Signature")
  valid_21627455 = validateParameter(valid_21627455, JString, required = false,
                                   default = nil)
  if valid_21627455 != nil:
    section.add "X-Amz-Signature", valid_21627455
  var valid_21627456 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627456 = validateParameter(valid_21627456, JString, required = false,
                                   default = nil)
  if valid_21627456 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627456
  var valid_21627457 = header.getOrDefault("X-Amz-Credential")
  valid_21627457 = validateParameter(valid_21627457, JString, required = false,
                                   default = nil)
  if valid_21627457 != nil:
    section.add "X-Amz-Credential", valid_21627457
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627458: Call_GetDescribeClusterSubnetGroups_21627441;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns one or more cluster subnet group objects, which contain metadata about your cluster subnet groups. By default, this operation returns information about all cluster subnet groups that are defined in you AWS account.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all subnet groups that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all subnet groups that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, subnet groups are returned regardless of whether they have tag keys or values associated with them.</p>
  ## 
  let valid = call_21627458.validator(path, query, header, formData, body, _)
  let scheme = call_21627458.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627458.makeUrl(scheme.get, call_21627458.host, call_21627458.base,
                               call_21627458.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627458, uri, valid, _)

proc call*(call_21627459: Call_GetDescribeClusterSubnetGroups_21627441;
          TagValues: JsonNode = nil; ClusterSubnetGroupName: string = "";
          MaxRecords: int = 0; Action: string = "DescribeClusterSubnetGroups";
          Marker: string = ""; TagKeys: JsonNode = nil; Version: string = "2012-12-01"): Recallable =
  ## getDescribeClusterSubnetGroups
  ## <p>Returns one or more cluster subnet group objects, which contain metadata about your cluster subnet groups. By default, this operation returns information about all cluster subnet groups that are defined in you AWS account.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all subnet groups that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all subnet groups that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, subnet groups are returned regardless of whether they have tag keys or values associated with them.</p>
  ##   TagValues: JArray
  ##            : A tag value or values for which you want to return all matching cluster subnet groups that are associated with the specified tag value or values. For example, suppose that you have subnet groups that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the subnet groups that have either or both of these tag values associated with them.
  ##   ClusterSubnetGroupName: string
  ##                         : The name of the cluster subnet group for which information is requested.
  ##   MaxRecords: int
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusterSubnetGroups</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   TagKeys: JArray
  ##          : A tag key or keys for which you want to return all matching cluster subnet groups that are associated with the specified key or keys. For example, suppose that you have subnet groups that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the subnet groups that have either or both of these tag keys associated with them.
  ##   Version: string (required)
  var query_21627460 = newJObject()
  if TagValues != nil:
    query_21627460.add "TagValues", TagValues
  add(query_21627460, "ClusterSubnetGroupName", newJString(ClusterSubnetGroupName))
  add(query_21627460, "MaxRecords", newJInt(MaxRecords))
  add(query_21627460, "Action", newJString(Action))
  add(query_21627460, "Marker", newJString(Marker))
  if TagKeys != nil:
    query_21627460.add "TagKeys", TagKeys
  add(query_21627460, "Version", newJString(Version))
  result = call_21627459.call(nil, query_21627460, nil, nil, nil)

var getDescribeClusterSubnetGroups* = Call_GetDescribeClusterSubnetGroups_21627441(
    name: "getDescribeClusterSubnetGroups", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=DescribeClusterSubnetGroups",
    validator: validate_GetDescribeClusterSubnetGroups_21627442, base: "/",
    makeUrl: url_GetDescribeClusterSubnetGroups_21627443,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeClusterTracks_21627500 = ref object of OpenApiRestCall_21625418
proc url_PostDescribeClusterTracks_21627502(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeClusterTracks_21627501(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Returns a list of all the available maintenance tracks.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627503 = query.getOrDefault("Action")
  valid_21627503 = validateParameter(valid_21627503, JString, required = true, default = newJString(
      "DescribeClusterTracks"))
  if valid_21627503 != nil:
    section.add "Action", valid_21627503
  var valid_21627504 = query.getOrDefault("Version")
  valid_21627504 = validateParameter(valid_21627504, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627504 != nil:
    section.add "Version", valid_21627504
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627505 = header.getOrDefault("X-Amz-Date")
  valid_21627505 = validateParameter(valid_21627505, JString, required = false,
                                   default = nil)
  if valid_21627505 != nil:
    section.add "X-Amz-Date", valid_21627505
  var valid_21627506 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627506 = validateParameter(valid_21627506, JString, required = false,
                                   default = nil)
  if valid_21627506 != nil:
    section.add "X-Amz-Security-Token", valid_21627506
  var valid_21627507 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627507 = validateParameter(valid_21627507, JString, required = false,
                                   default = nil)
  if valid_21627507 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627507
  var valid_21627508 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627508 = validateParameter(valid_21627508, JString, required = false,
                                   default = nil)
  if valid_21627508 != nil:
    section.add "X-Amz-Algorithm", valid_21627508
  var valid_21627509 = header.getOrDefault("X-Amz-Signature")
  valid_21627509 = validateParameter(valid_21627509, JString, required = false,
                                   default = nil)
  if valid_21627509 != nil:
    section.add "X-Amz-Signature", valid_21627509
  var valid_21627510 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627510 = validateParameter(valid_21627510, JString, required = false,
                                   default = nil)
  if valid_21627510 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627510
  var valid_21627511 = header.getOrDefault("X-Amz-Credential")
  valid_21627511 = validateParameter(valid_21627511, JString, required = false,
                                   default = nil)
  if valid_21627511 != nil:
    section.add "X-Amz-Credential", valid_21627511
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <code>DescribeClusterTracks</code> request exceed the value specified in <code>MaxRecords</code>, Amazon Redshift returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   MaxRecords: JInt
  ##             : An integer value for the maximum number of maintenance tracks to return.
  ##   MaintenanceTrackName: JString
  ##                       : The name of the maintenance track. 
  section = newJObject()
  var valid_21627512 = formData.getOrDefault("Marker")
  valid_21627512 = validateParameter(valid_21627512, JString, required = false,
                                   default = nil)
  if valid_21627512 != nil:
    section.add "Marker", valid_21627512
  var valid_21627513 = formData.getOrDefault("MaxRecords")
  valid_21627513 = validateParameter(valid_21627513, JInt, required = false,
                                   default = nil)
  if valid_21627513 != nil:
    section.add "MaxRecords", valid_21627513
  var valid_21627514 = formData.getOrDefault("MaintenanceTrackName")
  valid_21627514 = validateParameter(valid_21627514, JString, required = false,
                                   default = nil)
  if valid_21627514 != nil:
    section.add "MaintenanceTrackName", valid_21627514
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627515: Call_PostDescribeClusterTracks_21627500;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns a list of all the available maintenance tracks.
  ## 
  let valid = call_21627515.validator(path, query, header, formData, body, _)
  let scheme = call_21627515.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627515.makeUrl(scheme.get, call_21627515.host, call_21627515.base,
                               call_21627515.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627515, uri, valid, _)

proc call*(call_21627516: Call_PostDescribeClusterTracks_21627500;
          Marker: string = ""; Action: string = "DescribeClusterTracks";
          MaxRecords: int = 0; Version: string = "2012-12-01";
          MaintenanceTrackName: string = ""): Recallable =
  ## postDescribeClusterTracks
  ## Returns a list of all the available maintenance tracks.
  ##   Marker: string
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <code>DescribeClusterTracks</code> request exceed the value specified in <code>MaxRecords</code>, Amazon Redshift returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : An integer value for the maximum number of maintenance tracks to return.
  ##   Version: string (required)
  ##   MaintenanceTrackName: string
  ##                       : The name of the maintenance track. 
  var query_21627517 = newJObject()
  var formData_21627518 = newJObject()
  add(formData_21627518, "Marker", newJString(Marker))
  add(query_21627517, "Action", newJString(Action))
  add(formData_21627518, "MaxRecords", newJInt(MaxRecords))
  add(query_21627517, "Version", newJString(Version))
  add(formData_21627518, "MaintenanceTrackName", newJString(MaintenanceTrackName))
  result = call_21627516.call(nil, query_21627517, nil, formData_21627518, nil)

var postDescribeClusterTracks* = Call_PostDescribeClusterTracks_21627500(
    name: "postDescribeClusterTracks", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=DescribeClusterTracks",
    validator: validate_PostDescribeClusterTracks_21627501, base: "/",
    makeUrl: url_PostDescribeClusterTracks_21627502,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeClusterTracks_21627482 = ref object of OpenApiRestCall_21625418
proc url_GetDescribeClusterTracks_21627484(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeClusterTracks_21627483(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Returns a list of all the available maintenance tracks.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaintenanceTrackName: JString
  ##                       : The name of the maintenance track. 
  ##   MaxRecords: JInt
  ##             : An integer value for the maximum number of maintenance tracks to return.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <code>DescribeClusterTracks</code> request exceed the value specified in <code>MaxRecords</code>, Amazon Redshift returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627485 = query.getOrDefault("MaintenanceTrackName")
  valid_21627485 = validateParameter(valid_21627485, JString, required = false,
                                   default = nil)
  if valid_21627485 != nil:
    section.add "MaintenanceTrackName", valid_21627485
  var valid_21627486 = query.getOrDefault("MaxRecords")
  valid_21627486 = validateParameter(valid_21627486, JInt, required = false,
                                   default = nil)
  if valid_21627486 != nil:
    section.add "MaxRecords", valid_21627486
  var valid_21627487 = query.getOrDefault("Action")
  valid_21627487 = validateParameter(valid_21627487, JString, required = true, default = newJString(
      "DescribeClusterTracks"))
  if valid_21627487 != nil:
    section.add "Action", valid_21627487
  var valid_21627488 = query.getOrDefault("Marker")
  valid_21627488 = validateParameter(valid_21627488, JString, required = false,
                                   default = nil)
  if valid_21627488 != nil:
    section.add "Marker", valid_21627488
  var valid_21627489 = query.getOrDefault("Version")
  valid_21627489 = validateParameter(valid_21627489, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627489 != nil:
    section.add "Version", valid_21627489
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627490 = header.getOrDefault("X-Amz-Date")
  valid_21627490 = validateParameter(valid_21627490, JString, required = false,
                                   default = nil)
  if valid_21627490 != nil:
    section.add "X-Amz-Date", valid_21627490
  var valid_21627491 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627491 = validateParameter(valid_21627491, JString, required = false,
                                   default = nil)
  if valid_21627491 != nil:
    section.add "X-Amz-Security-Token", valid_21627491
  var valid_21627492 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627492 = validateParameter(valid_21627492, JString, required = false,
                                   default = nil)
  if valid_21627492 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627492
  var valid_21627493 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627493 = validateParameter(valid_21627493, JString, required = false,
                                   default = nil)
  if valid_21627493 != nil:
    section.add "X-Amz-Algorithm", valid_21627493
  var valid_21627494 = header.getOrDefault("X-Amz-Signature")
  valid_21627494 = validateParameter(valid_21627494, JString, required = false,
                                   default = nil)
  if valid_21627494 != nil:
    section.add "X-Amz-Signature", valid_21627494
  var valid_21627495 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627495 = validateParameter(valid_21627495, JString, required = false,
                                   default = nil)
  if valid_21627495 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627495
  var valid_21627496 = header.getOrDefault("X-Amz-Credential")
  valid_21627496 = validateParameter(valid_21627496, JString, required = false,
                                   default = nil)
  if valid_21627496 != nil:
    section.add "X-Amz-Credential", valid_21627496
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627497: Call_GetDescribeClusterTracks_21627482;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns a list of all the available maintenance tracks.
  ## 
  let valid = call_21627497.validator(path, query, header, formData, body, _)
  let scheme = call_21627497.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627497.makeUrl(scheme.get, call_21627497.host, call_21627497.base,
                               call_21627497.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627497, uri, valid, _)

proc call*(call_21627498: Call_GetDescribeClusterTracks_21627482;
          MaintenanceTrackName: string = ""; MaxRecords: int = 0;
          Action: string = "DescribeClusterTracks"; Marker: string = "";
          Version: string = "2012-12-01"): Recallable =
  ## getDescribeClusterTracks
  ## Returns a list of all the available maintenance tracks.
  ##   MaintenanceTrackName: string
  ##                       : The name of the maintenance track. 
  ##   MaxRecords: int
  ##             : An integer value for the maximum number of maintenance tracks to return.
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <code>DescribeClusterTracks</code> request exceed the value specified in <code>MaxRecords</code>, Amazon Redshift returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   Version: string (required)
  var query_21627499 = newJObject()
  add(query_21627499, "MaintenanceTrackName", newJString(MaintenanceTrackName))
  add(query_21627499, "MaxRecords", newJInt(MaxRecords))
  add(query_21627499, "Action", newJString(Action))
  add(query_21627499, "Marker", newJString(Marker))
  add(query_21627499, "Version", newJString(Version))
  result = call_21627498.call(nil, query_21627499, nil, nil, nil)

var getDescribeClusterTracks* = Call_GetDescribeClusterTracks_21627482(
    name: "getDescribeClusterTracks", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=DescribeClusterTracks",
    validator: validate_GetDescribeClusterTracks_21627483, base: "/",
    makeUrl: url_GetDescribeClusterTracks_21627484,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeClusterVersions_21627538 = ref object of OpenApiRestCall_21625418
proc url_PostDescribeClusterVersions_21627540(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeClusterVersions_21627539(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Returns descriptions of the available Amazon Redshift cluster versions. You can call this operation even before creating any clusters to learn more about the Amazon Redshift versions. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627541 = query.getOrDefault("Action")
  valid_21627541 = validateParameter(valid_21627541, JString, required = true, default = newJString(
      "DescribeClusterVersions"))
  if valid_21627541 != nil:
    section.add "Action", valid_21627541
  var valid_21627542 = query.getOrDefault("Version")
  valid_21627542 = validateParameter(valid_21627542, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627542 != nil:
    section.add "Version", valid_21627542
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627543 = header.getOrDefault("X-Amz-Date")
  valid_21627543 = validateParameter(valid_21627543, JString, required = false,
                                   default = nil)
  if valid_21627543 != nil:
    section.add "X-Amz-Date", valid_21627543
  var valid_21627544 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627544 = validateParameter(valid_21627544, JString, required = false,
                                   default = nil)
  if valid_21627544 != nil:
    section.add "X-Amz-Security-Token", valid_21627544
  var valid_21627545 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627545 = validateParameter(valid_21627545, JString, required = false,
                                   default = nil)
  if valid_21627545 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627545
  var valid_21627546 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627546 = validateParameter(valid_21627546, JString, required = false,
                                   default = nil)
  if valid_21627546 != nil:
    section.add "X-Amz-Algorithm", valid_21627546
  var valid_21627547 = header.getOrDefault("X-Amz-Signature")
  valid_21627547 = validateParameter(valid_21627547, JString, required = false,
                                   default = nil)
  if valid_21627547 != nil:
    section.add "X-Amz-Signature", valid_21627547
  var valid_21627548 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627548 = validateParameter(valid_21627548, JString, required = false,
                                   default = nil)
  if valid_21627548 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627548
  var valid_21627549 = header.getOrDefault("X-Amz-Credential")
  valid_21627549 = validateParameter(valid_21627549, JString, required = false,
                                   default = nil)
  if valid_21627549 != nil:
    section.add "X-Amz-Credential", valid_21627549
  result.add "header", section
  ## parameters in `formData` object:
  ##   ClusterVersion: JString
  ##                 : <p>The specific cluster version to return.</p> <p>Example: <code>1.0</code> </p>
  ##   Marker: JString
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusterVersions</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   ClusterParameterGroupFamily: JString
  ##                              : <p>The name of a specific cluster parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_21627550 = formData.getOrDefault("ClusterVersion")
  valid_21627550 = validateParameter(valid_21627550, JString, required = false,
                                   default = nil)
  if valid_21627550 != nil:
    section.add "ClusterVersion", valid_21627550
  var valid_21627551 = formData.getOrDefault("Marker")
  valid_21627551 = validateParameter(valid_21627551, JString, required = false,
                                   default = nil)
  if valid_21627551 != nil:
    section.add "Marker", valid_21627551
  var valid_21627552 = formData.getOrDefault("ClusterParameterGroupFamily")
  valid_21627552 = validateParameter(valid_21627552, JString, required = false,
                                   default = nil)
  if valid_21627552 != nil:
    section.add "ClusterParameterGroupFamily", valid_21627552
  var valid_21627553 = formData.getOrDefault("MaxRecords")
  valid_21627553 = validateParameter(valid_21627553, JInt, required = false,
                                   default = nil)
  if valid_21627553 != nil:
    section.add "MaxRecords", valid_21627553
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627554: Call_PostDescribeClusterVersions_21627538;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns descriptions of the available Amazon Redshift cluster versions. You can call this operation even before creating any clusters to learn more about the Amazon Redshift versions. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.
  ## 
  let valid = call_21627554.validator(path, query, header, formData, body, _)
  let scheme = call_21627554.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627554.makeUrl(scheme.get, call_21627554.host, call_21627554.base,
                               call_21627554.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627554, uri, valid, _)

proc call*(call_21627555: Call_PostDescribeClusterVersions_21627538;
          ClusterVersion: string = ""; Marker: string = "";
          Action: string = "DescribeClusterVersions";
          ClusterParameterGroupFamily: string = ""; MaxRecords: int = 0;
          Version: string = "2012-12-01"): Recallable =
  ## postDescribeClusterVersions
  ## Returns descriptions of the available Amazon Redshift cluster versions. You can call this operation even before creating any clusters to learn more about the Amazon Redshift versions. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.
  ##   ClusterVersion: string
  ##                 : <p>The specific cluster version to return.</p> <p>Example: <code>1.0</code> </p>
  ##   Marker: string
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusterVersions</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   Action: string (required)
  ##   ClusterParameterGroupFamily: string
  ##                              : <p>The name of a specific cluster parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_21627556 = newJObject()
  var formData_21627557 = newJObject()
  add(formData_21627557, "ClusterVersion", newJString(ClusterVersion))
  add(formData_21627557, "Marker", newJString(Marker))
  add(query_21627556, "Action", newJString(Action))
  add(formData_21627557, "ClusterParameterGroupFamily",
      newJString(ClusterParameterGroupFamily))
  add(formData_21627557, "MaxRecords", newJInt(MaxRecords))
  add(query_21627556, "Version", newJString(Version))
  result = call_21627555.call(nil, query_21627556, nil, formData_21627557, nil)

var postDescribeClusterVersions* = Call_PostDescribeClusterVersions_21627538(
    name: "postDescribeClusterVersions", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=DescribeClusterVersions",
    validator: validate_PostDescribeClusterVersions_21627539, base: "/",
    makeUrl: url_PostDescribeClusterVersions_21627540,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeClusterVersions_21627519 = ref object of OpenApiRestCall_21625418
proc url_GetDescribeClusterVersions_21627521(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeClusterVersions_21627520(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Returns descriptions of the available Amazon Redshift cluster versions. You can call this operation even before creating any clusters to learn more about the Amazon Redshift versions. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusterVersions</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   ClusterVersion: JString
  ##                 : <p>The specific cluster version to return.</p> <p>Example: <code>1.0</code> </p>
  ##   Version: JString (required)
  ##   ClusterParameterGroupFamily: JString
  ##                              : <p>The name of a specific cluster parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  section = newJObject()
  var valid_21627522 = query.getOrDefault("MaxRecords")
  valid_21627522 = validateParameter(valid_21627522, JInt, required = false,
                                   default = nil)
  if valid_21627522 != nil:
    section.add "MaxRecords", valid_21627522
  var valid_21627523 = query.getOrDefault("Action")
  valid_21627523 = validateParameter(valid_21627523, JString, required = true, default = newJString(
      "DescribeClusterVersions"))
  if valid_21627523 != nil:
    section.add "Action", valid_21627523
  var valid_21627524 = query.getOrDefault("Marker")
  valid_21627524 = validateParameter(valid_21627524, JString, required = false,
                                   default = nil)
  if valid_21627524 != nil:
    section.add "Marker", valid_21627524
  var valid_21627525 = query.getOrDefault("ClusterVersion")
  valid_21627525 = validateParameter(valid_21627525, JString, required = false,
                                   default = nil)
  if valid_21627525 != nil:
    section.add "ClusterVersion", valid_21627525
  var valid_21627526 = query.getOrDefault("Version")
  valid_21627526 = validateParameter(valid_21627526, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627526 != nil:
    section.add "Version", valid_21627526
  var valid_21627527 = query.getOrDefault("ClusterParameterGroupFamily")
  valid_21627527 = validateParameter(valid_21627527, JString, required = false,
                                   default = nil)
  if valid_21627527 != nil:
    section.add "ClusterParameterGroupFamily", valid_21627527
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627528 = header.getOrDefault("X-Amz-Date")
  valid_21627528 = validateParameter(valid_21627528, JString, required = false,
                                   default = nil)
  if valid_21627528 != nil:
    section.add "X-Amz-Date", valid_21627528
  var valid_21627529 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627529 = validateParameter(valid_21627529, JString, required = false,
                                   default = nil)
  if valid_21627529 != nil:
    section.add "X-Amz-Security-Token", valid_21627529
  var valid_21627530 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627530 = validateParameter(valid_21627530, JString, required = false,
                                   default = nil)
  if valid_21627530 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627530
  var valid_21627531 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627531 = validateParameter(valid_21627531, JString, required = false,
                                   default = nil)
  if valid_21627531 != nil:
    section.add "X-Amz-Algorithm", valid_21627531
  var valid_21627532 = header.getOrDefault("X-Amz-Signature")
  valid_21627532 = validateParameter(valid_21627532, JString, required = false,
                                   default = nil)
  if valid_21627532 != nil:
    section.add "X-Amz-Signature", valid_21627532
  var valid_21627533 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627533 = validateParameter(valid_21627533, JString, required = false,
                                   default = nil)
  if valid_21627533 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627533
  var valid_21627534 = header.getOrDefault("X-Amz-Credential")
  valid_21627534 = validateParameter(valid_21627534, JString, required = false,
                                   default = nil)
  if valid_21627534 != nil:
    section.add "X-Amz-Credential", valid_21627534
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627535: Call_GetDescribeClusterVersions_21627519;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns descriptions of the available Amazon Redshift cluster versions. You can call this operation even before creating any clusters to learn more about the Amazon Redshift versions. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.
  ## 
  let valid = call_21627535.validator(path, query, header, formData, body, _)
  let scheme = call_21627535.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627535.makeUrl(scheme.get, call_21627535.host, call_21627535.base,
                               call_21627535.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627535, uri, valid, _)

proc call*(call_21627536: Call_GetDescribeClusterVersions_21627519;
          MaxRecords: int = 0; Action: string = "DescribeClusterVersions";
          Marker: string = ""; ClusterVersion: string = "";
          Version: string = "2012-12-01"; ClusterParameterGroupFamily: string = ""): Recallable =
  ## getDescribeClusterVersions
  ## Returns descriptions of the available Amazon Redshift cluster versions. You can call this operation even before creating any clusters to learn more about the Amazon Redshift versions. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.
  ##   MaxRecords: int
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusterVersions</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   ClusterVersion: string
  ##                 : <p>The specific cluster version to return.</p> <p>Example: <code>1.0</code> </p>
  ##   Version: string (required)
  ##   ClusterParameterGroupFamily: string
  ##                              : <p>The name of a specific cluster parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  var query_21627537 = newJObject()
  add(query_21627537, "MaxRecords", newJInt(MaxRecords))
  add(query_21627537, "Action", newJString(Action))
  add(query_21627537, "Marker", newJString(Marker))
  add(query_21627537, "ClusterVersion", newJString(ClusterVersion))
  add(query_21627537, "Version", newJString(Version))
  add(query_21627537, "ClusterParameterGroupFamily",
      newJString(ClusterParameterGroupFamily))
  result = call_21627536.call(nil, query_21627537, nil, nil, nil)

var getDescribeClusterVersions* = Call_GetDescribeClusterVersions_21627519(
    name: "getDescribeClusterVersions", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=DescribeClusterVersions",
    validator: validate_GetDescribeClusterVersions_21627520, base: "/",
    makeUrl: url_GetDescribeClusterVersions_21627521,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeClusters_21627578 = ref object of OpenApiRestCall_21625418
proc url_PostDescribeClusters_21627580(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeClusters_21627579(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Returns properties of provisioned clusters including general cluster properties, cluster database properties, maintenance and backup properties, and security and access properties. This operation supports pagination. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all clusters that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all clusters that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, clusters are returned regardless of whether they have tag keys or values associated with them.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627581 = query.getOrDefault("Action")
  valid_21627581 = validateParameter(valid_21627581, JString, required = true,
                                   default = newJString("DescribeClusters"))
  if valid_21627581 != nil:
    section.add "Action", valid_21627581
  var valid_21627582 = query.getOrDefault("Version")
  valid_21627582 = validateParameter(valid_21627582, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627582 != nil:
    section.add "Version", valid_21627582
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627583 = header.getOrDefault("X-Amz-Date")
  valid_21627583 = validateParameter(valid_21627583, JString, required = false,
                                   default = nil)
  if valid_21627583 != nil:
    section.add "X-Amz-Date", valid_21627583
  var valid_21627584 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627584 = validateParameter(valid_21627584, JString, required = false,
                                   default = nil)
  if valid_21627584 != nil:
    section.add "X-Amz-Security-Token", valid_21627584
  var valid_21627585 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627585 = validateParameter(valid_21627585, JString, required = false,
                                   default = nil)
  if valid_21627585 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627585
  var valid_21627586 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627586 = validateParameter(valid_21627586, JString, required = false,
                                   default = nil)
  if valid_21627586 != nil:
    section.add "X-Amz-Algorithm", valid_21627586
  var valid_21627587 = header.getOrDefault("X-Amz-Signature")
  valid_21627587 = validateParameter(valid_21627587, JString, required = false,
                                   default = nil)
  if valid_21627587 != nil:
    section.add "X-Amz-Signature", valid_21627587
  var valid_21627588 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627588 = validateParameter(valid_21627588, JString, required = false,
                                   default = nil)
  if valid_21627588 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627588
  var valid_21627589 = header.getOrDefault("X-Amz-Credential")
  valid_21627589 = validateParameter(valid_21627589, JString, required = false,
                                   default = nil)
  if valid_21627589 != nil:
    section.add "X-Amz-Credential", valid_21627589
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : <p>An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusters</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. </p> <p>Constraints: You can specify either the <b>ClusterIdentifier</b> parameter or the <b>Marker</b> parameter, but not both. </p>
  ##   ClusterIdentifier: JString
  ##                    : <p>The unique identifier of a cluster whose properties you are requesting. This parameter is case sensitive.</p> <p>The default is that all clusters defined for an account are returned.</p>
  ##   TagKeys: JArray
  ##          : A tag key or keys for which you want to return all matching clusters that are associated with the specified key or keys. For example, suppose that you have clusters that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the clusters that have either or both of these tag keys associated with them.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   TagValues: JArray
  ##            : A tag value or values for which you want to return all matching clusters that are associated with the specified tag value or values. For example, suppose that you have clusters that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the clusters that have either or both of these tag values associated with them.
  section = newJObject()
  var valid_21627590 = formData.getOrDefault("Marker")
  valid_21627590 = validateParameter(valid_21627590, JString, required = false,
                                   default = nil)
  if valid_21627590 != nil:
    section.add "Marker", valid_21627590
  var valid_21627591 = formData.getOrDefault("ClusterIdentifier")
  valid_21627591 = validateParameter(valid_21627591, JString, required = false,
                                   default = nil)
  if valid_21627591 != nil:
    section.add "ClusterIdentifier", valid_21627591
  var valid_21627592 = formData.getOrDefault("TagKeys")
  valid_21627592 = validateParameter(valid_21627592, JArray, required = false,
                                   default = nil)
  if valid_21627592 != nil:
    section.add "TagKeys", valid_21627592
  var valid_21627593 = formData.getOrDefault("MaxRecords")
  valid_21627593 = validateParameter(valid_21627593, JInt, required = false,
                                   default = nil)
  if valid_21627593 != nil:
    section.add "MaxRecords", valid_21627593
  var valid_21627594 = formData.getOrDefault("TagValues")
  valid_21627594 = validateParameter(valid_21627594, JArray, required = false,
                                   default = nil)
  if valid_21627594 != nil:
    section.add "TagValues", valid_21627594
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627595: Call_PostDescribeClusters_21627578; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns properties of provisioned clusters including general cluster properties, cluster database properties, maintenance and backup properties, and security and access properties. This operation supports pagination. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all clusters that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all clusters that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, clusters are returned regardless of whether they have tag keys or values associated with them.</p>
  ## 
  let valid = call_21627595.validator(path, query, header, formData, body, _)
  let scheme = call_21627595.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627595.makeUrl(scheme.get, call_21627595.host, call_21627595.base,
                               call_21627595.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627595, uri, valid, _)

proc call*(call_21627596: Call_PostDescribeClusters_21627578; Marker: string = "";
          Action: string = "DescribeClusters"; ClusterIdentifier: string = "";
          TagKeys: JsonNode = nil; MaxRecords: int = 0; TagValues: JsonNode = nil;
          Version: string = "2012-12-01"): Recallable =
  ## postDescribeClusters
  ## <p>Returns properties of provisioned clusters including general cluster properties, cluster database properties, maintenance and backup properties, and security and access properties. This operation supports pagination. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all clusters that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all clusters that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, clusters are returned regardless of whether they have tag keys or values associated with them.</p>
  ##   Marker: string
  ##         : <p>An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusters</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. </p> <p>Constraints: You can specify either the <b>ClusterIdentifier</b> parameter or the <b>Marker</b> parameter, but not both. </p>
  ##   Action: string (required)
  ##   ClusterIdentifier: string
  ##                    : <p>The unique identifier of a cluster whose properties you are requesting. This parameter is case sensitive.</p> <p>The default is that all clusters defined for an account are returned.</p>
  ##   TagKeys: JArray
  ##          : A tag key or keys for which you want to return all matching clusters that are associated with the specified key or keys. For example, suppose that you have clusters that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the clusters that have either or both of these tag keys associated with them.
  ##   MaxRecords: int
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   TagValues: JArray
  ##            : A tag value or values for which you want to return all matching clusters that are associated with the specified tag value or values. For example, suppose that you have clusters that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the clusters that have either or both of these tag values associated with them.
  ##   Version: string (required)
  var query_21627597 = newJObject()
  var formData_21627598 = newJObject()
  add(formData_21627598, "Marker", newJString(Marker))
  add(query_21627597, "Action", newJString(Action))
  add(formData_21627598, "ClusterIdentifier", newJString(ClusterIdentifier))
  if TagKeys != nil:
    formData_21627598.add "TagKeys", TagKeys
  add(formData_21627598, "MaxRecords", newJInt(MaxRecords))
  if TagValues != nil:
    formData_21627598.add "TagValues", TagValues
  add(query_21627597, "Version", newJString(Version))
  result = call_21627596.call(nil, query_21627597, nil, formData_21627598, nil)

var postDescribeClusters* = Call_PostDescribeClusters_21627578(
    name: "postDescribeClusters", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=DescribeClusters",
    validator: validate_PostDescribeClusters_21627579, base: "/",
    makeUrl: url_PostDescribeClusters_21627580,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeClusters_21627558 = ref object of OpenApiRestCall_21625418
proc url_GetDescribeClusters_21627560(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeClusters_21627559(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Returns properties of provisioned clusters including general cluster properties, cluster database properties, maintenance and backup properties, and security and access properties. This operation supports pagination. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all clusters that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all clusters that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, clusters are returned regardless of whether they have tag keys or values associated with them.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TagValues: JArray
  ##            : A tag value or values for which you want to return all matching clusters that are associated with the specified tag value or values. For example, suppose that you have clusters that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the clusters that have either or both of these tag values associated with them.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   Action: JString (required)
  ##   ClusterIdentifier: JString
  ##                    : <p>The unique identifier of a cluster whose properties you are requesting. This parameter is case sensitive.</p> <p>The default is that all clusters defined for an account are returned.</p>
  ##   Marker: JString
  ##         : <p>An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusters</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. </p> <p>Constraints: You can specify either the <b>ClusterIdentifier</b> parameter or the <b>Marker</b> parameter, but not both. </p>
  ##   TagKeys: JArray
  ##          : A tag key or keys for which you want to return all matching clusters that are associated with the specified key or keys. For example, suppose that you have clusters that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the clusters that have either or both of these tag keys associated with them.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627561 = query.getOrDefault("TagValues")
  valid_21627561 = validateParameter(valid_21627561, JArray, required = false,
                                   default = nil)
  if valid_21627561 != nil:
    section.add "TagValues", valid_21627561
  var valid_21627562 = query.getOrDefault("MaxRecords")
  valid_21627562 = validateParameter(valid_21627562, JInt, required = false,
                                   default = nil)
  if valid_21627562 != nil:
    section.add "MaxRecords", valid_21627562
  var valid_21627563 = query.getOrDefault("Action")
  valid_21627563 = validateParameter(valid_21627563, JString, required = true,
                                   default = newJString("DescribeClusters"))
  if valid_21627563 != nil:
    section.add "Action", valid_21627563
  var valid_21627564 = query.getOrDefault("ClusterIdentifier")
  valid_21627564 = validateParameter(valid_21627564, JString, required = false,
                                   default = nil)
  if valid_21627564 != nil:
    section.add "ClusterIdentifier", valid_21627564
  var valid_21627565 = query.getOrDefault("Marker")
  valid_21627565 = validateParameter(valid_21627565, JString, required = false,
                                   default = nil)
  if valid_21627565 != nil:
    section.add "Marker", valid_21627565
  var valid_21627566 = query.getOrDefault("TagKeys")
  valid_21627566 = validateParameter(valid_21627566, JArray, required = false,
                                   default = nil)
  if valid_21627566 != nil:
    section.add "TagKeys", valid_21627566
  var valid_21627567 = query.getOrDefault("Version")
  valid_21627567 = validateParameter(valid_21627567, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627567 != nil:
    section.add "Version", valid_21627567
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627568 = header.getOrDefault("X-Amz-Date")
  valid_21627568 = validateParameter(valid_21627568, JString, required = false,
                                   default = nil)
  if valid_21627568 != nil:
    section.add "X-Amz-Date", valid_21627568
  var valid_21627569 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627569 = validateParameter(valid_21627569, JString, required = false,
                                   default = nil)
  if valid_21627569 != nil:
    section.add "X-Amz-Security-Token", valid_21627569
  var valid_21627570 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627570 = validateParameter(valid_21627570, JString, required = false,
                                   default = nil)
  if valid_21627570 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627570
  var valid_21627571 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627571 = validateParameter(valid_21627571, JString, required = false,
                                   default = nil)
  if valid_21627571 != nil:
    section.add "X-Amz-Algorithm", valid_21627571
  var valid_21627572 = header.getOrDefault("X-Amz-Signature")
  valid_21627572 = validateParameter(valid_21627572, JString, required = false,
                                   default = nil)
  if valid_21627572 != nil:
    section.add "X-Amz-Signature", valid_21627572
  var valid_21627573 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627573 = validateParameter(valid_21627573, JString, required = false,
                                   default = nil)
  if valid_21627573 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627573
  var valid_21627574 = header.getOrDefault("X-Amz-Credential")
  valid_21627574 = validateParameter(valid_21627574, JString, required = false,
                                   default = nil)
  if valid_21627574 != nil:
    section.add "X-Amz-Credential", valid_21627574
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627575: Call_GetDescribeClusters_21627558; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns properties of provisioned clusters including general cluster properties, cluster database properties, maintenance and backup properties, and security and access properties. This operation supports pagination. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all clusters that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all clusters that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, clusters are returned regardless of whether they have tag keys or values associated with them.</p>
  ## 
  let valid = call_21627575.validator(path, query, header, formData, body, _)
  let scheme = call_21627575.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627575.makeUrl(scheme.get, call_21627575.host, call_21627575.base,
                               call_21627575.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627575, uri, valid, _)

proc call*(call_21627576: Call_GetDescribeClusters_21627558;
          TagValues: JsonNode = nil; MaxRecords: int = 0;
          Action: string = "DescribeClusters"; ClusterIdentifier: string = "";
          Marker: string = ""; TagKeys: JsonNode = nil; Version: string = "2012-12-01"): Recallable =
  ## getDescribeClusters
  ## <p>Returns properties of provisioned clusters including general cluster properties, cluster database properties, maintenance and backup properties, and security and access properties. This operation supports pagination. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all clusters that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all clusters that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, clusters are returned regardless of whether they have tag keys or values associated with them.</p>
  ##   TagValues: JArray
  ##            : A tag value or values for which you want to return all matching clusters that are associated with the specified tag value or values. For example, suppose that you have clusters that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the clusters that have either or both of these tag values associated with them.
  ##   MaxRecords: int
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   Action: string (required)
  ##   ClusterIdentifier: string
  ##                    : <p>The unique identifier of a cluster whose properties you are requesting. This parameter is case sensitive.</p> <p>The default is that all clusters defined for an account are returned.</p>
  ##   Marker: string
  ##         : <p>An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusters</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. </p> <p>Constraints: You can specify either the <b>ClusterIdentifier</b> parameter or the <b>Marker</b> parameter, but not both. </p>
  ##   TagKeys: JArray
  ##          : A tag key or keys for which you want to return all matching clusters that are associated with the specified key or keys. For example, suppose that you have clusters that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the clusters that have either or both of these tag keys associated with them.
  ##   Version: string (required)
  var query_21627577 = newJObject()
  if TagValues != nil:
    query_21627577.add "TagValues", TagValues
  add(query_21627577, "MaxRecords", newJInt(MaxRecords))
  add(query_21627577, "Action", newJString(Action))
  add(query_21627577, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(query_21627577, "Marker", newJString(Marker))
  if TagKeys != nil:
    query_21627577.add "TagKeys", TagKeys
  add(query_21627577, "Version", newJString(Version))
  result = call_21627576.call(nil, query_21627577, nil, nil, nil)

var getDescribeClusters* = Call_GetDescribeClusters_21627558(
    name: "getDescribeClusters", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=DescribeClusters",
    validator: validate_GetDescribeClusters_21627559, base: "/",
    makeUrl: url_GetDescribeClusters_21627560,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDefaultClusterParameters_21627617 = ref object of OpenApiRestCall_21625418
proc url_PostDescribeDefaultClusterParameters_21627619(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDefaultClusterParameters_21627618(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns a list of parameter settings for the specified parameter group family.</p> <p> For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627620 = query.getOrDefault("Action")
  valid_21627620 = validateParameter(valid_21627620, JString, required = true, default = newJString(
      "DescribeDefaultClusterParameters"))
  if valid_21627620 != nil:
    section.add "Action", valid_21627620
  var valid_21627621 = query.getOrDefault("Version")
  valid_21627621 = validateParameter(valid_21627621, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627621 != nil:
    section.add "Version", valid_21627621
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627622 = header.getOrDefault("X-Amz-Date")
  valid_21627622 = validateParameter(valid_21627622, JString, required = false,
                                   default = nil)
  if valid_21627622 != nil:
    section.add "X-Amz-Date", valid_21627622
  var valid_21627623 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627623 = validateParameter(valid_21627623, JString, required = false,
                                   default = nil)
  if valid_21627623 != nil:
    section.add "X-Amz-Security-Token", valid_21627623
  var valid_21627624 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627624 = validateParameter(valid_21627624, JString, required = false,
                                   default = nil)
  if valid_21627624 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627624
  var valid_21627625 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627625 = validateParameter(valid_21627625, JString, required = false,
                                   default = nil)
  if valid_21627625 != nil:
    section.add "X-Amz-Algorithm", valid_21627625
  var valid_21627626 = header.getOrDefault("X-Amz-Signature")
  valid_21627626 = validateParameter(valid_21627626, JString, required = false,
                                   default = nil)
  if valid_21627626 != nil:
    section.add "X-Amz-Signature", valid_21627626
  var valid_21627627 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627627 = validateParameter(valid_21627627, JString, required = false,
                                   default = nil)
  if valid_21627627 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627627
  var valid_21627628 = header.getOrDefault("X-Amz-Credential")
  valid_21627628 = validateParameter(valid_21627628, JString, required = false,
                                   default = nil)
  if valid_21627628 != nil:
    section.add "X-Amz-Credential", valid_21627628
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeDefaultClusterParameters</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   ParameterGroupFamily: JString (required)
  ##                       : The name of the cluster parameter group family.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_21627629 = formData.getOrDefault("Marker")
  valid_21627629 = validateParameter(valid_21627629, JString, required = false,
                                   default = nil)
  if valid_21627629 != nil:
    section.add "Marker", valid_21627629
  assert formData != nil, "formData argument is necessary due to required `ParameterGroupFamily` field"
  var valid_21627630 = formData.getOrDefault("ParameterGroupFamily")
  valid_21627630 = validateParameter(valid_21627630, JString, required = true,
                                   default = nil)
  if valid_21627630 != nil:
    section.add "ParameterGroupFamily", valid_21627630
  var valid_21627631 = formData.getOrDefault("MaxRecords")
  valid_21627631 = validateParameter(valid_21627631, JInt, required = false,
                                   default = nil)
  if valid_21627631 != nil:
    section.add "MaxRecords", valid_21627631
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627632: Call_PostDescribeDefaultClusterParameters_21627617;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns a list of parameter settings for the specified parameter group family.</p> <p> For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  let valid = call_21627632.validator(path, query, header, formData, body, _)
  let scheme = call_21627632.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627632.makeUrl(scheme.get, call_21627632.host, call_21627632.base,
                               call_21627632.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627632, uri, valid, _)

proc call*(call_21627633: Call_PostDescribeDefaultClusterParameters_21627617;
          ParameterGroupFamily: string; Marker: string = "";
          Action: string = "DescribeDefaultClusterParameters"; MaxRecords: int = 0;
          Version: string = "2012-12-01"): Recallable =
  ## postDescribeDefaultClusterParameters
  ## <p>Returns a list of parameter settings for the specified parameter group family.</p> <p> For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ##   Marker: string
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeDefaultClusterParameters</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   Action: string (required)
  ##   ParameterGroupFamily: string (required)
  ##                       : The name of the cluster parameter group family.
  ##   MaxRecords: int
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_21627634 = newJObject()
  var formData_21627635 = newJObject()
  add(formData_21627635, "Marker", newJString(Marker))
  add(query_21627634, "Action", newJString(Action))
  add(formData_21627635, "ParameterGroupFamily", newJString(ParameterGroupFamily))
  add(formData_21627635, "MaxRecords", newJInt(MaxRecords))
  add(query_21627634, "Version", newJString(Version))
  result = call_21627633.call(nil, query_21627634, nil, formData_21627635, nil)

var postDescribeDefaultClusterParameters* = Call_PostDescribeDefaultClusterParameters_21627617(
    name: "postDescribeDefaultClusterParameters", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com",
    route: "/#Action=DescribeDefaultClusterParameters",
    validator: validate_PostDescribeDefaultClusterParameters_21627618, base: "/",
    makeUrl: url_PostDescribeDefaultClusterParameters_21627619,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDefaultClusterParameters_21627599 = ref object of OpenApiRestCall_21625418
proc url_GetDescribeDefaultClusterParameters_21627601(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDefaultClusterParameters_21627600(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns a list of parameter settings for the specified parameter group family.</p> <p> For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeDefaultClusterParameters</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   ParameterGroupFamily: JString (required)
  ##                       : The name of the cluster parameter group family.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627602 = query.getOrDefault("MaxRecords")
  valid_21627602 = validateParameter(valid_21627602, JInt, required = false,
                                   default = nil)
  if valid_21627602 != nil:
    section.add "MaxRecords", valid_21627602
  var valid_21627603 = query.getOrDefault("Action")
  valid_21627603 = validateParameter(valid_21627603, JString, required = true, default = newJString(
      "DescribeDefaultClusterParameters"))
  if valid_21627603 != nil:
    section.add "Action", valid_21627603
  var valid_21627604 = query.getOrDefault("Marker")
  valid_21627604 = validateParameter(valid_21627604, JString, required = false,
                                   default = nil)
  if valid_21627604 != nil:
    section.add "Marker", valid_21627604
  var valid_21627605 = query.getOrDefault("ParameterGroupFamily")
  valid_21627605 = validateParameter(valid_21627605, JString, required = true,
                                   default = nil)
  if valid_21627605 != nil:
    section.add "ParameterGroupFamily", valid_21627605
  var valid_21627606 = query.getOrDefault("Version")
  valid_21627606 = validateParameter(valid_21627606, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627606 != nil:
    section.add "Version", valid_21627606
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627607 = header.getOrDefault("X-Amz-Date")
  valid_21627607 = validateParameter(valid_21627607, JString, required = false,
                                   default = nil)
  if valid_21627607 != nil:
    section.add "X-Amz-Date", valid_21627607
  var valid_21627608 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627608 = validateParameter(valid_21627608, JString, required = false,
                                   default = nil)
  if valid_21627608 != nil:
    section.add "X-Amz-Security-Token", valid_21627608
  var valid_21627609 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627609 = validateParameter(valid_21627609, JString, required = false,
                                   default = nil)
  if valid_21627609 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627609
  var valid_21627610 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627610 = validateParameter(valid_21627610, JString, required = false,
                                   default = nil)
  if valid_21627610 != nil:
    section.add "X-Amz-Algorithm", valid_21627610
  var valid_21627611 = header.getOrDefault("X-Amz-Signature")
  valid_21627611 = validateParameter(valid_21627611, JString, required = false,
                                   default = nil)
  if valid_21627611 != nil:
    section.add "X-Amz-Signature", valid_21627611
  var valid_21627612 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627612 = validateParameter(valid_21627612, JString, required = false,
                                   default = nil)
  if valid_21627612 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627612
  var valid_21627613 = header.getOrDefault("X-Amz-Credential")
  valid_21627613 = validateParameter(valid_21627613, JString, required = false,
                                   default = nil)
  if valid_21627613 != nil:
    section.add "X-Amz-Credential", valid_21627613
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627614: Call_GetDescribeDefaultClusterParameters_21627599;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns a list of parameter settings for the specified parameter group family.</p> <p> For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  let valid = call_21627614.validator(path, query, header, formData, body, _)
  let scheme = call_21627614.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627614.makeUrl(scheme.get, call_21627614.host, call_21627614.base,
                               call_21627614.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627614, uri, valid, _)

proc call*(call_21627615: Call_GetDescribeDefaultClusterParameters_21627599;
          ParameterGroupFamily: string; MaxRecords: int = 0;
          Action: string = "DescribeDefaultClusterParameters"; Marker: string = "";
          Version: string = "2012-12-01"): Recallable =
  ## getDescribeDefaultClusterParameters
  ## <p>Returns a list of parameter settings for the specified parameter group family.</p> <p> For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeDefaultClusterParameters</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   ParameterGroupFamily: string (required)
  ##                       : The name of the cluster parameter group family.
  ##   Version: string (required)
  var query_21627616 = newJObject()
  add(query_21627616, "MaxRecords", newJInt(MaxRecords))
  add(query_21627616, "Action", newJString(Action))
  add(query_21627616, "Marker", newJString(Marker))
  add(query_21627616, "ParameterGroupFamily", newJString(ParameterGroupFamily))
  add(query_21627616, "Version", newJString(Version))
  result = call_21627615.call(nil, query_21627616, nil, nil, nil)

var getDescribeDefaultClusterParameters* = Call_GetDescribeDefaultClusterParameters_21627599(
    name: "getDescribeDefaultClusterParameters", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com",
    route: "/#Action=DescribeDefaultClusterParameters",
    validator: validate_GetDescribeDefaultClusterParameters_21627600, base: "/",
    makeUrl: url_GetDescribeDefaultClusterParameters_21627601,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEventCategories_21627652 = ref object of OpenApiRestCall_21625418
proc url_PostDescribeEventCategories_21627654(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEventCategories_21627653(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Displays a list of event categories for all event source types, or for a specified source type. For a list of the event categories and source types, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-event-notifications.html">Amazon Redshift Event Notifications</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627655 = query.getOrDefault("Action")
  valid_21627655 = validateParameter(valid_21627655, JString, required = true, default = newJString(
      "DescribeEventCategories"))
  if valid_21627655 != nil:
    section.add "Action", valid_21627655
  var valid_21627656 = query.getOrDefault("Version")
  valid_21627656 = validateParameter(valid_21627656, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627656 != nil:
    section.add "Version", valid_21627656
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627657 = header.getOrDefault("X-Amz-Date")
  valid_21627657 = validateParameter(valid_21627657, JString, required = false,
                                   default = nil)
  if valid_21627657 != nil:
    section.add "X-Amz-Date", valid_21627657
  var valid_21627658 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627658 = validateParameter(valid_21627658, JString, required = false,
                                   default = nil)
  if valid_21627658 != nil:
    section.add "X-Amz-Security-Token", valid_21627658
  var valid_21627659 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627659 = validateParameter(valid_21627659, JString, required = false,
                                   default = nil)
  if valid_21627659 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627659
  var valid_21627660 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627660 = validateParameter(valid_21627660, JString, required = false,
                                   default = nil)
  if valid_21627660 != nil:
    section.add "X-Amz-Algorithm", valid_21627660
  var valid_21627661 = header.getOrDefault("X-Amz-Signature")
  valid_21627661 = validateParameter(valid_21627661, JString, required = false,
                                   default = nil)
  if valid_21627661 != nil:
    section.add "X-Amz-Signature", valid_21627661
  var valid_21627662 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627662 = validateParameter(valid_21627662, JString, required = false,
                                   default = nil)
  if valid_21627662 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627662
  var valid_21627663 = header.getOrDefault("X-Amz-Credential")
  valid_21627663 = validateParameter(valid_21627663, JString, required = false,
                                   default = nil)
  if valid_21627663 != nil:
    section.add "X-Amz-Credential", valid_21627663
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceType: JString
  ##             : <p>The source type, such as cluster or parameter group, to which the described event categories apply.</p> <p>Valid values: cluster, cluster-snapshot, cluster-parameter-group, cluster-security-group, and scheduled-action.</p>
  section = newJObject()
  var valid_21627664 = formData.getOrDefault("SourceType")
  valid_21627664 = validateParameter(valid_21627664, JString, required = false,
                                   default = nil)
  if valid_21627664 != nil:
    section.add "SourceType", valid_21627664
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627665: Call_PostDescribeEventCategories_21627652;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Displays a list of event categories for all event source types, or for a specified source type. For a list of the event categories and source types, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-event-notifications.html">Amazon Redshift Event Notifications</a>.
  ## 
  let valid = call_21627665.validator(path, query, header, formData, body, _)
  let scheme = call_21627665.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627665.makeUrl(scheme.get, call_21627665.host, call_21627665.base,
                               call_21627665.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627665, uri, valid, _)

proc call*(call_21627666: Call_PostDescribeEventCategories_21627652;
          Action: string = "DescribeEventCategories";
          Version: string = "2012-12-01"; SourceType: string = ""): Recallable =
  ## postDescribeEventCategories
  ## Displays a list of event categories for all event source types, or for a specified source type. For a list of the event categories and source types, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-event-notifications.html">Amazon Redshift Event Notifications</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   SourceType: string
  ##             : <p>The source type, such as cluster or parameter group, to which the described event categories apply.</p> <p>Valid values: cluster, cluster-snapshot, cluster-parameter-group, cluster-security-group, and scheduled-action.</p>
  var query_21627667 = newJObject()
  var formData_21627668 = newJObject()
  add(query_21627667, "Action", newJString(Action))
  add(query_21627667, "Version", newJString(Version))
  add(formData_21627668, "SourceType", newJString(SourceType))
  result = call_21627666.call(nil, query_21627667, nil, formData_21627668, nil)

var postDescribeEventCategories* = Call_PostDescribeEventCategories_21627652(
    name: "postDescribeEventCategories", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=DescribeEventCategories",
    validator: validate_PostDescribeEventCategories_21627653, base: "/",
    makeUrl: url_PostDescribeEventCategories_21627654,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEventCategories_21627636 = ref object of OpenApiRestCall_21625418
proc url_GetDescribeEventCategories_21627638(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEventCategories_21627637(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Displays a list of event categories for all event source types, or for a specified source type. For a list of the event categories and source types, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-event-notifications.html">Amazon Redshift Event Notifications</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : <p>The source type, such as cluster or parameter group, to which the described event categories apply.</p> <p>Valid values: cluster, cluster-snapshot, cluster-parameter-group, cluster-security-group, and scheduled-action.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627639 = query.getOrDefault("SourceType")
  valid_21627639 = validateParameter(valid_21627639, JString, required = false,
                                   default = nil)
  if valid_21627639 != nil:
    section.add "SourceType", valid_21627639
  var valid_21627640 = query.getOrDefault("Action")
  valid_21627640 = validateParameter(valid_21627640, JString, required = true, default = newJString(
      "DescribeEventCategories"))
  if valid_21627640 != nil:
    section.add "Action", valid_21627640
  var valid_21627641 = query.getOrDefault("Version")
  valid_21627641 = validateParameter(valid_21627641, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627641 != nil:
    section.add "Version", valid_21627641
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627642 = header.getOrDefault("X-Amz-Date")
  valid_21627642 = validateParameter(valid_21627642, JString, required = false,
                                   default = nil)
  if valid_21627642 != nil:
    section.add "X-Amz-Date", valid_21627642
  var valid_21627643 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627643 = validateParameter(valid_21627643, JString, required = false,
                                   default = nil)
  if valid_21627643 != nil:
    section.add "X-Amz-Security-Token", valid_21627643
  var valid_21627644 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627644 = validateParameter(valid_21627644, JString, required = false,
                                   default = nil)
  if valid_21627644 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627644
  var valid_21627645 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627645 = validateParameter(valid_21627645, JString, required = false,
                                   default = nil)
  if valid_21627645 != nil:
    section.add "X-Amz-Algorithm", valid_21627645
  var valid_21627646 = header.getOrDefault("X-Amz-Signature")
  valid_21627646 = validateParameter(valid_21627646, JString, required = false,
                                   default = nil)
  if valid_21627646 != nil:
    section.add "X-Amz-Signature", valid_21627646
  var valid_21627647 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627647 = validateParameter(valid_21627647, JString, required = false,
                                   default = nil)
  if valid_21627647 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627647
  var valid_21627648 = header.getOrDefault("X-Amz-Credential")
  valid_21627648 = validateParameter(valid_21627648, JString, required = false,
                                   default = nil)
  if valid_21627648 != nil:
    section.add "X-Amz-Credential", valid_21627648
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627649: Call_GetDescribeEventCategories_21627636;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Displays a list of event categories for all event source types, or for a specified source type. For a list of the event categories and source types, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-event-notifications.html">Amazon Redshift Event Notifications</a>.
  ## 
  let valid = call_21627649.validator(path, query, header, formData, body, _)
  let scheme = call_21627649.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627649.makeUrl(scheme.get, call_21627649.host, call_21627649.base,
                               call_21627649.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627649, uri, valid, _)

proc call*(call_21627650: Call_GetDescribeEventCategories_21627636;
          SourceType: string = ""; Action: string = "DescribeEventCategories";
          Version: string = "2012-12-01"): Recallable =
  ## getDescribeEventCategories
  ## Displays a list of event categories for all event source types, or for a specified source type. For a list of the event categories and source types, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-event-notifications.html">Amazon Redshift Event Notifications</a>.
  ##   SourceType: string
  ##             : <p>The source type, such as cluster or parameter group, to which the described event categories apply.</p> <p>Valid values: cluster, cluster-snapshot, cluster-parameter-group, cluster-security-group, and scheduled-action.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627651 = newJObject()
  add(query_21627651, "SourceType", newJString(SourceType))
  add(query_21627651, "Action", newJString(Action))
  add(query_21627651, "Version", newJString(Version))
  result = call_21627650.call(nil, query_21627651, nil, nil, nil)

var getDescribeEventCategories* = Call_GetDescribeEventCategories_21627636(
    name: "getDescribeEventCategories", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=DescribeEventCategories",
    validator: validate_GetDescribeEventCategories_21627637, base: "/",
    makeUrl: url_GetDescribeEventCategories_21627638,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEventSubscriptions_21627689 = ref object of OpenApiRestCall_21625418
proc url_PostDescribeEventSubscriptions_21627691(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEventSubscriptions_21627690(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Lists descriptions of all the Amazon Redshift event notification subscriptions for a customer account. If you specify a subscription name, lists the description for that subscription.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all event notification subscriptions that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all subscriptions that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, subscriptions are returned regardless of whether they have tag keys or values associated with them.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627692 = query.getOrDefault("Action")
  valid_21627692 = validateParameter(valid_21627692, JString, required = true, default = newJString(
      "DescribeEventSubscriptions"))
  if valid_21627692 != nil:
    section.add "Action", valid_21627692
  var valid_21627693 = query.getOrDefault("Version")
  valid_21627693 = validateParameter(valid_21627693, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627693 != nil:
    section.add "Version", valid_21627693
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627694 = header.getOrDefault("X-Amz-Date")
  valid_21627694 = validateParameter(valid_21627694, JString, required = false,
                                   default = nil)
  if valid_21627694 != nil:
    section.add "X-Amz-Date", valid_21627694
  var valid_21627695 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627695 = validateParameter(valid_21627695, JString, required = false,
                                   default = nil)
  if valid_21627695 != nil:
    section.add "X-Amz-Security-Token", valid_21627695
  var valid_21627696 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627696 = validateParameter(valid_21627696, JString, required = false,
                                   default = nil)
  if valid_21627696 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627696
  var valid_21627697 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627697 = validateParameter(valid_21627697, JString, required = false,
                                   default = nil)
  if valid_21627697 != nil:
    section.add "X-Amz-Algorithm", valid_21627697
  var valid_21627698 = header.getOrDefault("X-Amz-Signature")
  valid_21627698 = validateParameter(valid_21627698, JString, required = false,
                                   default = nil)
  if valid_21627698 != nil:
    section.add "X-Amz-Signature", valid_21627698
  var valid_21627699 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627699 = validateParameter(valid_21627699, JString, required = false,
                                   default = nil)
  if valid_21627699 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627699
  var valid_21627700 = header.getOrDefault("X-Amz-Credential")
  valid_21627700 = validateParameter(valid_21627700, JString, required = false,
                                   default = nil)
  if valid_21627700 != nil:
    section.add "X-Amz-Credential", valid_21627700
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeEventSubscriptions request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   SubscriptionName: JString
  ##                   : The name of the Amazon Redshift event notification subscription to be described.
  ##   TagKeys: JArray
  ##          : A tag key or keys for which you want to return all matching event notification subscriptions that are associated with the specified key or keys. For example, suppose that you have subscriptions that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the subscriptions that have either or both of these tag keys associated with them.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   TagValues: JArray
  ##            : A tag value or values for which you want to return all matching event notification subscriptions that are associated with the specified tag value or values. For example, suppose that you have subscriptions that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the subscriptions that have either or both of these tag values associated with them.
  section = newJObject()
  var valid_21627701 = formData.getOrDefault("Marker")
  valid_21627701 = validateParameter(valid_21627701, JString, required = false,
                                   default = nil)
  if valid_21627701 != nil:
    section.add "Marker", valid_21627701
  var valid_21627702 = formData.getOrDefault("SubscriptionName")
  valid_21627702 = validateParameter(valid_21627702, JString, required = false,
                                   default = nil)
  if valid_21627702 != nil:
    section.add "SubscriptionName", valid_21627702
  var valid_21627703 = formData.getOrDefault("TagKeys")
  valid_21627703 = validateParameter(valid_21627703, JArray, required = false,
                                   default = nil)
  if valid_21627703 != nil:
    section.add "TagKeys", valid_21627703
  var valid_21627704 = formData.getOrDefault("MaxRecords")
  valid_21627704 = validateParameter(valid_21627704, JInt, required = false,
                                   default = nil)
  if valid_21627704 != nil:
    section.add "MaxRecords", valid_21627704
  var valid_21627705 = formData.getOrDefault("TagValues")
  valid_21627705 = validateParameter(valid_21627705, JArray, required = false,
                                   default = nil)
  if valid_21627705 != nil:
    section.add "TagValues", valid_21627705
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627706: Call_PostDescribeEventSubscriptions_21627689;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists descriptions of all the Amazon Redshift event notification subscriptions for a customer account. If you specify a subscription name, lists the description for that subscription.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all event notification subscriptions that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all subscriptions that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, subscriptions are returned regardless of whether they have tag keys or values associated with them.</p>
  ## 
  let valid = call_21627706.validator(path, query, header, formData, body, _)
  let scheme = call_21627706.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627706.makeUrl(scheme.get, call_21627706.host, call_21627706.base,
                               call_21627706.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627706, uri, valid, _)

proc call*(call_21627707: Call_PostDescribeEventSubscriptions_21627689;
          Marker: string = ""; SubscriptionName: string = "";
          Action: string = "DescribeEventSubscriptions"; TagKeys: JsonNode = nil;
          MaxRecords: int = 0; TagValues: JsonNode = nil; Version: string = "2012-12-01"): Recallable =
  ## postDescribeEventSubscriptions
  ## <p>Lists descriptions of all the Amazon Redshift event notification subscriptions for a customer account. If you specify a subscription name, lists the description for that subscription.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all event notification subscriptions that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all subscriptions that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, subscriptions are returned regardless of whether they have tag keys or values associated with them.</p>
  ##   Marker: string
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeEventSubscriptions request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   SubscriptionName: string
  ##                   : The name of the Amazon Redshift event notification subscription to be described.
  ##   Action: string (required)
  ##   TagKeys: JArray
  ##          : A tag key or keys for which you want to return all matching event notification subscriptions that are associated with the specified key or keys. For example, suppose that you have subscriptions that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the subscriptions that have either or both of these tag keys associated with them.
  ##   MaxRecords: int
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   TagValues: JArray
  ##            : A tag value or values for which you want to return all matching event notification subscriptions that are associated with the specified tag value or values. For example, suppose that you have subscriptions that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the subscriptions that have either or both of these tag values associated with them.
  ##   Version: string (required)
  var query_21627708 = newJObject()
  var formData_21627709 = newJObject()
  add(formData_21627709, "Marker", newJString(Marker))
  add(formData_21627709, "SubscriptionName", newJString(SubscriptionName))
  add(query_21627708, "Action", newJString(Action))
  if TagKeys != nil:
    formData_21627709.add "TagKeys", TagKeys
  add(formData_21627709, "MaxRecords", newJInt(MaxRecords))
  if TagValues != nil:
    formData_21627709.add "TagValues", TagValues
  add(query_21627708, "Version", newJString(Version))
  result = call_21627707.call(nil, query_21627708, nil, formData_21627709, nil)

var postDescribeEventSubscriptions* = Call_PostDescribeEventSubscriptions_21627689(
    name: "postDescribeEventSubscriptions", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=DescribeEventSubscriptions",
    validator: validate_PostDescribeEventSubscriptions_21627690, base: "/",
    makeUrl: url_PostDescribeEventSubscriptions_21627691,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEventSubscriptions_21627669 = ref object of OpenApiRestCall_21625418
proc url_GetDescribeEventSubscriptions_21627671(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEventSubscriptions_21627670(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Lists descriptions of all the Amazon Redshift event notification subscriptions for a customer account. If you specify a subscription name, lists the description for that subscription.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all event notification subscriptions that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all subscriptions that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, subscriptions are returned regardless of whether they have tag keys or values associated with them.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TagValues: JArray
  ##            : A tag value or values for which you want to return all matching event notification subscriptions that are associated with the specified tag value or values. For example, suppose that you have subscriptions that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the subscriptions that have either or both of these tag values associated with them.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeEventSubscriptions request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   SubscriptionName: JString
  ##                   : The name of the Amazon Redshift event notification subscription to be described.
  ##   TagKeys: JArray
  ##          : A tag key or keys for which you want to return all matching event notification subscriptions that are associated with the specified key or keys. For example, suppose that you have subscriptions that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the subscriptions that have either or both of these tag keys associated with them.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627672 = query.getOrDefault("TagValues")
  valid_21627672 = validateParameter(valid_21627672, JArray, required = false,
                                   default = nil)
  if valid_21627672 != nil:
    section.add "TagValues", valid_21627672
  var valid_21627673 = query.getOrDefault("MaxRecords")
  valid_21627673 = validateParameter(valid_21627673, JInt, required = false,
                                   default = nil)
  if valid_21627673 != nil:
    section.add "MaxRecords", valid_21627673
  var valid_21627674 = query.getOrDefault("Action")
  valid_21627674 = validateParameter(valid_21627674, JString, required = true, default = newJString(
      "DescribeEventSubscriptions"))
  if valid_21627674 != nil:
    section.add "Action", valid_21627674
  var valid_21627675 = query.getOrDefault("Marker")
  valid_21627675 = validateParameter(valid_21627675, JString, required = false,
                                   default = nil)
  if valid_21627675 != nil:
    section.add "Marker", valid_21627675
  var valid_21627676 = query.getOrDefault("SubscriptionName")
  valid_21627676 = validateParameter(valid_21627676, JString, required = false,
                                   default = nil)
  if valid_21627676 != nil:
    section.add "SubscriptionName", valid_21627676
  var valid_21627677 = query.getOrDefault("TagKeys")
  valid_21627677 = validateParameter(valid_21627677, JArray, required = false,
                                   default = nil)
  if valid_21627677 != nil:
    section.add "TagKeys", valid_21627677
  var valid_21627678 = query.getOrDefault("Version")
  valid_21627678 = validateParameter(valid_21627678, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627678 != nil:
    section.add "Version", valid_21627678
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627679 = header.getOrDefault("X-Amz-Date")
  valid_21627679 = validateParameter(valid_21627679, JString, required = false,
                                   default = nil)
  if valid_21627679 != nil:
    section.add "X-Amz-Date", valid_21627679
  var valid_21627680 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627680 = validateParameter(valid_21627680, JString, required = false,
                                   default = nil)
  if valid_21627680 != nil:
    section.add "X-Amz-Security-Token", valid_21627680
  var valid_21627681 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627681 = validateParameter(valid_21627681, JString, required = false,
                                   default = nil)
  if valid_21627681 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627681
  var valid_21627682 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627682 = validateParameter(valid_21627682, JString, required = false,
                                   default = nil)
  if valid_21627682 != nil:
    section.add "X-Amz-Algorithm", valid_21627682
  var valid_21627683 = header.getOrDefault("X-Amz-Signature")
  valid_21627683 = validateParameter(valid_21627683, JString, required = false,
                                   default = nil)
  if valid_21627683 != nil:
    section.add "X-Amz-Signature", valid_21627683
  var valid_21627684 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627684 = validateParameter(valid_21627684, JString, required = false,
                                   default = nil)
  if valid_21627684 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627684
  var valid_21627685 = header.getOrDefault("X-Amz-Credential")
  valid_21627685 = validateParameter(valid_21627685, JString, required = false,
                                   default = nil)
  if valid_21627685 != nil:
    section.add "X-Amz-Credential", valid_21627685
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627686: Call_GetDescribeEventSubscriptions_21627669;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists descriptions of all the Amazon Redshift event notification subscriptions for a customer account. If you specify a subscription name, lists the description for that subscription.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all event notification subscriptions that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all subscriptions that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, subscriptions are returned regardless of whether they have tag keys or values associated with them.</p>
  ## 
  let valid = call_21627686.validator(path, query, header, formData, body, _)
  let scheme = call_21627686.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627686.makeUrl(scheme.get, call_21627686.host, call_21627686.base,
                               call_21627686.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627686, uri, valid, _)

proc call*(call_21627687: Call_GetDescribeEventSubscriptions_21627669;
          TagValues: JsonNode = nil; MaxRecords: int = 0;
          Action: string = "DescribeEventSubscriptions"; Marker: string = "";
          SubscriptionName: string = ""; TagKeys: JsonNode = nil;
          Version: string = "2012-12-01"): Recallable =
  ## getDescribeEventSubscriptions
  ## <p>Lists descriptions of all the Amazon Redshift event notification subscriptions for a customer account. If you specify a subscription name, lists the description for that subscription.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all event notification subscriptions that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all subscriptions that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, subscriptions are returned regardless of whether they have tag keys or values associated with them.</p>
  ##   TagValues: JArray
  ##            : A tag value or values for which you want to return all matching event notification subscriptions that are associated with the specified tag value or values. For example, suppose that you have subscriptions that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the subscriptions that have either or both of these tag values associated with them.
  ##   MaxRecords: int
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeEventSubscriptions request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   SubscriptionName: string
  ##                   : The name of the Amazon Redshift event notification subscription to be described.
  ##   TagKeys: JArray
  ##          : A tag key or keys for which you want to return all matching event notification subscriptions that are associated with the specified key or keys. For example, suppose that you have subscriptions that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the subscriptions that have either or both of these tag keys associated with them.
  ##   Version: string (required)
  var query_21627688 = newJObject()
  if TagValues != nil:
    query_21627688.add "TagValues", TagValues
  add(query_21627688, "MaxRecords", newJInt(MaxRecords))
  add(query_21627688, "Action", newJString(Action))
  add(query_21627688, "Marker", newJString(Marker))
  add(query_21627688, "SubscriptionName", newJString(SubscriptionName))
  if TagKeys != nil:
    query_21627688.add "TagKeys", TagKeys
  add(query_21627688, "Version", newJString(Version))
  result = call_21627687.call(nil, query_21627688, nil, nil, nil)

var getDescribeEventSubscriptions* = Call_GetDescribeEventSubscriptions_21627669(
    name: "getDescribeEventSubscriptions", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=DescribeEventSubscriptions",
    validator: validate_GetDescribeEventSubscriptions_21627670, base: "/",
    makeUrl: url_GetDescribeEventSubscriptions_21627671,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEvents_21627732 = ref object of OpenApiRestCall_21625418
proc url_PostDescribeEvents_21627734(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEvents_21627733(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Returns events related to clusters, security groups, snapshots, and parameter groups for the past 14 days. Events specific to a particular cluster, security group, snapshot or parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627735 = query.getOrDefault("Action")
  valid_21627735 = validateParameter(valid_21627735, JString, required = true,
                                   default = newJString("DescribeEvents"))
  if valid_21627735 != nil:
    section.add "Action", valid_21627735
  var valid_21627736 = query.getOrDefault("Version")
  valid_21627736 = validateParameter(valid_21627736, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627736 != nil:
    section.add "Version", valid_21627736
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627737 = header.getOrDefault("X-Amz-Date")
  valid_21627737 = validateParameter(valid_21627737, JString, required = false,
                                   default = nil)
  if valid_21627737 != nil:
    section.add "X-Amz-Date", valid_21627737
  var valid_21627738 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627738 = validateParameter(valid_21627738, JString, required = false,
                                   default = nil)
  if valid_21627738 != nil:
    section.add "X-Amz-Security-Token", valid_21627738
  var valid_21627739 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627739 = validateParameter(valid_21627739, JString, required = false,
                                   default = nil)
  if valid_21627739 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627739
  var valid_21627740 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627740 = validateParameter(valid_21627740, JString, required = false,
                                   default = nil)
  if valid_21627740 != nil:
    section.add "X-Amz-Algorithm", valid_21627740
  var valid_21627741 = header.getOrDefault("X-Amz-Signature")
  valid_21627741 = validateParameter(valid_21627741, JString, required = false,
                                   default = nil)
  if valid_21627741 != nil:
    section.add "X-Amz-Signature", valid_21627741
  var valid_21627742 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627742 = validateParameter(valid_21627742, JString, required = false,
                                   default = nil)
  if valid_21627742 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627742
  var valid_21627743 = header.getOrDefault("X-Amz-Credential")
  valid_21627743 = validateParameter(valid_21627743, JString, required = false,
                                   default = nil)
  if valid_21627743 != nil:
    section.add "X-Amz-Credential", valid_21627743
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceIdentifier: JString
  ##                   : <p>The identifier of the event source for which events will be returned. If this parameter is not specified, then all sources are included in the response.</p> <p>Constraints:</p> <p>If <i>SourceIdentifier</i> is supplied, <i>SourceType</i> must also be provided.</p> <ul> <li> <p>Specify a cluster identifier when <i>SourceType</i> is <code>cluster</code>.</p> </li> <li> <p>Specify a cluster security group name when <i>SourceType</i> is <code>cluster-security-group</code>.</p> </li> <li> <p>Specify a cluster parameter group name when <i>SourceType</i> is <code>cluster-parameter-group</code>.</p> </li> <li> <p>Specify a cluster snapshot identifier when <i>SourceType</i> is <code>cluster-snapshot</code>.</p> </li> </ul>
  ##   Marker: JString
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeEvents</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   StartTime: JString
  ##            : <p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: <code>2009-07-08T18:00Z</code> </p>
  ##   Duration: JInt
  ##           : <p>The number of minutes prior to the time of the request for which to retrieve events. For example, if the request is sent at 18:00 and you specify a duration of 60, then only events which have occurred after 17:00 will be returned.</p> <p>Default: <code>60</code> </p>
  ##   EndTime: JString
  ##          : <p>The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: <code>2009-07-08T18:00Z</code> </p>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   SourceType: JString
  ##             : <p>The event source to retrieve events for. If no value is specified, all events are returned.</p> <p>Constraints:</p> <p>If <i>SourceType</i> is supplied, <i>SourceIdentifier</i> must also be provided.</p> <ul> <li> <p>Specify <code>cluster</code> when <i>SourceIdentifier</i> is a cluster identifier.</p> </li> <li> <p>Specify <code>cluster-security-group</code> when <i>SourceIdentifier</i> is a cluster security group name.</p> </li> <li> <p>Specify <code>cluster-parameter-group</code> when <i>SourceIdentifier</i> is a cluster parameter group name.</p> </li> <li> <p>Specify <code>cluster-snapshot</code> when <i>SourceIdentifier</i> is a cluster snapshot identifier.</p> </li> </ul>
  section = newJObject()
  var valid_21627744 = formData.getOrDefault("SourceIdentifier")
  valid_21627744 = validateParameter(valid_21627744, JString, required = false,
                                   default = nil)
  if valid_21627744 != nil:
    section.add "SourceIdentifier", valid_21627744
  var valid_21627745 = formData.getOrDefault("Marker")
  valid_21627745 = validateParameter(valid_21627745, JString, required = false,
                                   default = nil)
  if valid_21627745 != nil:
    section.add "Marker", valid_21627745
  var valid_21627746 = formData.getOrDefault("StartTime")
  valid_21627746 = validateParameter(valid_21627746, JString, required = false,
                                   default = nil)
  if valid_21627746 != nil:
    section.add "StartTime", valid_21627746
  var valid_21627747 = formData.getOrDefault("Duration")
  valid_21627747 = validateParameter(valid_21627747, JInt, required = false,
                                   default = nil)
  if valid_21627747 != nil:
    section.add "Duration", valid_21627747
  var valid_21627748 = formData.getOrDefault("EndTime")
  valid_21627748 = validateParameter(valid_21627748, JString, required = false,
                                   default = nil)
  if valid_21627748 != nil:
    section.add "EndTime", valid_21627748
  var valid_21627749 = formData.getOrDefault("MaxRecords")
  valid_21627749 = validateParameter(valid_21627749, JInt, required = false,
                                   default = nil)
  if valid_21627749 != nil:
    section.add "MaxRecords", valid_21627749
  var valid_21627750 = formData.getOrDefault("SourceType")
  valid_21627750 = validateParameter(valid_21627750, JString, required = false,
                                   default = newJString("cluster"))
  if valid_21627750 != nil:
    section.add "SourceType", valid_21627750
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627751: Call_PostDescribeEvents_21627732; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns events related to clusters, security groups, snapshots, and parameter groups for the past 14 days. Events specific to a particular cluster, security group, snapshot or parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  let valid = call_21627751.validator(path, query, header, formData, body, _)
  let scheme = call_21627751.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627751.makeUrl(scheme.get, call_21627751.host, call_21627751.base,
                               call_21627751.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627751, uri, valid, _)

proc call*(call_21627752: Call_PostDescribeEvents_21627732;
          SourceIdentifier: string = ""; Marker: string = ""; StartTime: string = "";
          Action: string = "DescribeEvents"; Duration: int = 0; EndTime: string = "";
          MaxRecords: int = 0; Version: string = "2012-12-01";
          SourceType: string = "cluster"): Recallable =
  ## postDescribeEvents
  ## Returns events related to clusters, security groups, snapshots, and parameter groups for the past 14 days. Events specific to a particular cluster, security group, snapshot or parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ##   SourceIdentifier: string
  ##                   : <p>The identifier of the event source for which events will be returned. If this parameter is not specified, then all sources are included in the response.</p> <p>Constraints:</p> <p>If <i>SourceIdentifier</i> is supplied, <i>SourceType</i> must also be provided.</p> <ul> <li> <p>Specify a cluster identifier when <i>SourceType</i> is <code>cluster</code>.</p> </li> <li> <p>Specify a cluster security group name when <i>SourceType</i> is <code>cluster-security-group</code>.</p> </li> <li> <p>Specify a cluster parameter group name when <i>SourceType</i> is <code>cluster-parameter-group</code>.</p> </li> <li> <p>Specify a cluster snapshot identifier when <i>SourceType</i> is <code>cluster-snapshot</code>.</p> </li> </ul>
  ##   Marker: string
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeEvents</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   StartTime: string
  ##            : <p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: <code>2009-07-08T18:00Z</code> </p>
  ##   Action: string (required)
  ##   Duration: int
  ##           : <p>The number of minutes prior to the time of the request for which to retrieve events. For example, if the request is sent at 18:00 and you specify a duration of 60, then only events which have occurred after 17:00 will be returned.</p> <p>Default: <code>60</code> </p>
  ##   EndTime: string
  ##          : <p>The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: <code>2009-07-08T18:00Z</code> </p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   Version: string (required)
  ##   SourceType: string
  ##             : <p>The event source to retrieve events for. If no value is specified, all events are returned.</p> <p>Constraints:</p> <p>If <i>SourceType</i> is supplied, <i>SourceIdentifier</i> must also be provided.</p> <ul> <li> <p>Specify <code>cluster</code> when <i>SourceIdentifier</i> is a cluster identifier.</p> </li> <li> <p>Specify <code>cluster-security-group</code> when <i>SourceIdentifier</i> is a cluster security group name.</p> </li> <li> <p>Specify <code>cluster-parameter-group</code> when <i>SourceIdentifier</i> is a cluster parameter group name.</p> </li> <li> <p>Specify <code>cluster-snapshot</code> when <i>SourceIdentifier</i> is a cluster snapshot identifier.</p> </li> </ul>
  var query_21627753 = newJObject()
  var formData_21627754 = newJObject()
  add(formData_21627754, "SourceIdentifier", newJString(SourceIdentifier))
  add(formData_21627754, "Marker", newJString(Marker))
  add(formData_21627754, "StartTime", newJString(StartTime))
  add(query_21627753, "Action", newJString(Action))
  add(formData_21627754, "Duration", newJInt(Duration))
  add(formData_21627754, "EndTime", newJString(EndTime))
  add(formData_21627754, "MaxRecords", newJInt(MaxRecords))
  add(query_21627753, "Version", newJString(Version))
  add(formData_21627754, "SourceType", newJString(SourceType))
  result = call_21627752.call(nil, query_21627753, nil, formData_21627754, nil)

var postDescribeEvents* = Call_PostDescribeEvents_21627732(
    name: "postDescribeEvents", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=DescribeEvents",
    validator: validate_PostDescribeEvents_21627733, base: "/",
    makeUrl: url_PostDescribeEvents_21627734, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEvents_21627710 = ref object of OpenApiRestCall_21625418
proc url_GetDescribeEvents_21627712(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEvents_21627711(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Returns events related to clusters, security groups, snapshots, and parameter groups for the past 14 days. Events specific to a particular cluster, security group, snapshot or parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : <p>The event source to retrieve events for. If no value is specified, all events are returned.</p> <p>Constraints:</p> <p>If <i>SourceType</i> is supplied, <i>SourceIdentifier</i> must also be provided.</p> <ul> <li> <p>Specify <code>cluster</code> when <i>SourceIdentifier</i> is a cluster identifier.</p> </li> <li> <p>Specify <code>cluster-security-group</code> when <i>SourceIdentifier</i> is a cluster security group name.</p> </li> <li> <p>Specify <code>cluster-parameter-group</code> when <i>SourceIdentifier</i> is a cluster parameter group name.</p> </li> <li> <p>Specify <code>cluster-snapshot</code> when <i>SourceIdentifier</i> is a cluster snapshot identifier.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   StartTime: JString
  ##            : <p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: <code>2009-07-08T18:00Z</code> </p>
  ##   Action: JString (required)
  ##   SourceIdentifier: JString
  ##                   : <p>The identifier of the event source for which events will be returned. If this parameter is not specified, then all sources are included in the response.</p> <p>Constraints:</p> <p>If <i>SourceIdentifier</i> is supplied, <i>SourceType</i> must also be provided.</p> <ul> <li> <p>Specify a cluster identifier when <i>SourceType</i> is <code>cluster</code>.</p> </li> <li> <p>Specify a cluster security group name when <i>SourceType</i> is <code>cluster-security-group</code>.</p> </li> <li> <p>Specify a cluster parameter group name when <i>SourceType</i> is <code>cluster-parameter-group</code>.</p> </li> <li> <p>Specify a cluster snapshot identifier when <i>SourceType</i> is <code>cluster-snapshot</code>.</p> </li> </ul>
  ##   Marker: JString
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeEvents</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   Duration: JInt
  ##           : <p>The number of minutes prior to the time of the request for which to retrieve events. For example, if the request is sent at 18:00 and you specify a duration of 60, then only events which have occurred after 17:00 will be returned.</p> <p>Default: <code>60</code> </p>
  ##   EndTime: JString
  ##          : <p>The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: <code>2009-07-08T18:00Z</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627713 = query.getOrDefault("SourceType")
  valid_21627713 = validateParameter(valid_21627713, JString, required = false,
                                   default = newJString("cluster"))
  if valid_21627713 != nil:
    section.add "SourceType", valid_21627713
  var valid_21627714 = query.getOrDefault("MaxRecords")
  valid_21627714 = validateParameter(valid_21627714, JInt, required = false,
                                   default = nil)
  if valid_21627714 != nil:
    section.add "MaxRecords", valid_21627714
  var valid_21627715 = query.getOrDefault("StartTime")
  valid_21627715 = validateParameter(valid_21627715, JString, required = false,
                                   default = nil)
  if valid_21627715 != nil:
    section.add "StartTime", valid_21627715
  var valid_21627716 = query.getOrDefault("Action")
  valid_21627716 = validateParameter(valid_21627716, JString, required = true,
                                   default = newJString("DescribeEvents"))
  if valid_21627716 != nil:
    section.add "Action", valid_21627716
  var valid_21627717 = query.getOrDefault("SourceIdentifier")
  valid_21627717 = validateParameter(valid_21627717, JString, required = false,
                                   default = nil)
  if valid_21627717 != nil:
    section.add "SourceIdentifier", valid_21627717
  var valid_21627718 = query.getOrDefault("Marker")
  valid_21627718 = validateParameter(valid_21627718, JString, required = false,
                                   default = nil)
  if valid_21627718 != nil:
    section.add "Marker", valid_21627718
  var valid_21627719 = query.getOrDefault("Duration")
  valid_21627719 = validateParameter(valid_21627719, JInt, required = false,
                                   default = nil)
  if valid_21627719 != nil:
    section.add "Duration", valid_21627719
  var valid_21627720 = query.getOrDefault("EndTime")
  valid_21627720 = validateParameter(valid_21627720, JString, required = false,
                                   default = nil)
  if valid_21627720 != nil:
    section.add "EndTime", valid_21627720
  var valid_21627721 = query.getOrDefault("Version")
  valid_21627721 = validateParameter(valid_21627721, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627721 != nil:
    section.add "Version", valid_21627721
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627722 = header.getOrDefault("X-Amz-Date")
  valid_21627722 = validateParameter(valid_21627722, JString, required = false,
                                   default = nil)
  if valid_21627722 != nil:
    section.add "X-Amz-Date", valid_21627722
  var valid_21627723 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627723 = validateParameter(valid_21627723, JString, required = false,
                                   default = nil)
  if valid_21627723 != nil:
    section.add "X-Amz-Security-Token", valid_21627723
  var valid_21627724 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627724 = validateParameter(valid_21627724, JString, required = false,
                                   default = nil)
  if valid_21627724 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627724
  var valid_21627725 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627725 = validateParameter(valid_21627725, JString, required = false,
                                   default = nil)
  if valid_21627725 != nil:
    section.add "X-Amz-Algorithm", valid_21627725
  var valid_21627726 = header.getOrDefault("X-Amz-Signature")
  valid_21627726 = validateParameter(valid_21627726, JString, required = false,
                                   default = nil)
  if valid_21627726 != nil:
    section.add "X-Amz-Signature", valid_21627726
  var valid_21627727 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627727 = validateParameter(valid_21627727, JString, required = false,
                                   default = nil)
  if valid_21627727 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627727
  var valid_21627728 = header.getOrDefault("X-Amz-Credential")
  valid_21627728 = validateParameter(valid_21627728, JString, required = false,
                                   default = nil)
  if valid_21627728 != nil:
    section.add "X-Amz-Credential", valid_21627728
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627729: Call_GetDescribeEvents_21627710; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns events related to clusters, security groups, snapshots, and parameter groups for the past 14 days. Events specific to a particular cluster, security group, snapshot or parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  let valid = call_21627729.validator(path, query, header, formData, body, _)
  let scheme = call_21627729.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627729.makeUrl(scheme.get, call_21627729.host, call_21627729.base,
                               call_21627729.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627729, uri, valid, _)

proc call*(call_21627730: Call_GetDescribeEvents_21627710;
          SourceType: string = "cluster"; MaxRecords: int = 0; StartTime: string = "";
          Action: string = "DescribeEvents"; SourceIdentifier: string = "";
          Marker: string = ""; Duration: int = 0; EndTime: string = "";
          Version: string = "2012-12-01"): Recallable =
  ## getDescribeEvents
  ## Returns events related to clusters, security groups, snapshots, and parameter groups for the past 14 days. Events specific to a particular cluster, security group, snapshot or parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ##   SourceType: string
  ##             : <p>The event source to retrieve events for. If no value is specified, all events are returned.</p> <p>Constraints:</p> <p>If <i>SourceType</i> is supplied, <i>SourceIdentifier</i> must also be provided.</p> <ul> <li> <p>Specify <code>cluster</code> when <i>SourceIdentifier</i> is a cluster identifier.</p> </li> <li> <p>Specify <code>cluster-security-group</code> when <i>SourceIdentifier</i> is a cluster security group name.</p> </li> <li> <p>Specify <code>cluster-parameter-group</code> when <i>SourceIdentifier</i> is a cluster parameter group name.</p> </li> <li> <p>Specify <code>cluster-snapshot</code> when <i>SourceIdentifier</i> is a cluster snapshot identifier.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   StartTime: string
  ##            : <p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: <code>2009-07-08T18:00Z</code> </p>
  ##   Action: string (required)
  ##   SourceIdentifier: string
  ##                   : <p>The identifier of the event source for which events will be returned. If this parameter is not specified, then all sources are included in the response.</p> <p>Constraints:</p> <p>If <i>SourceIdentifier</i> is supplied, <i>SourceType</i> must also be provided.</p> <ul> <li> <p>Specify a cluster identifier when <i>SourceType</i> is <code>cluster</code>.</p> </li> <li> <p>Specify a cluster security group name when <i>SourceType</i> is <code>cluster-security-group</code>.</p> </li> <li> <p>Specify a cluster parameter group name when <i>SourceType</i> is <code>cluster-parameter-group</code>.</p> </li> <li> <p>Specify a cluster snapshot identifier when <i>SourceType</i> is <code>cluster-snapshot</code>.</p> </li> </ul>
  ##   Marker: string
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeEvents</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   Duration: int
  ##           : <p>The number of minutes prior to the time of the request for which to retrieve events. For example, if the request is sent at 18:00 and you specify a duration of 60, then only events which have occurred after 17:00 will be returned.</p> <p>Default: <code>60</code> </p>
  ##   EndTime: string
  ##          : <p>The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: <code>2009-07-08T18:00Z</code> </p>
  ##   Version: string (required)
  var query_21627731 = newJObject()
  add(query_21627731, "SourceType", newJString(SourceType))
  add(query_21627731, "MaxRecords", newJInt(MaxRecords))
  add(query_21627731, "StartTime", newJString(StartTime))
  add(query_21627731, "Action", newJString(Action))
  add(query_21627731, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_21627731, "Marker", newJString(Marker))
  add(query_21627731, "Duration", newJInt(Duration))
  add(query_21627731, "EndTime", newJString(EndTime))
  add(query_21627731, "Version", newJString(Version))
  result = call_21627730.call(nil, query_21627731, nil, nil, nil)

var getDescribeEvents* = Call_GetDescribeEvents_21627710(name: "getDescribeEvents",
    meth: HttpMethod.HttpGet, host: "redshift.amazonaws.com",
    route: "/#Action=DescribeEvents", validator: validate_GetDescribeEvents_21627711,
    base: "/", makeUrl: url_GetDescribeEvents_21627712,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeHsmClientCertificates_21627775 = ref object of OpenApiRestCall_21625418
proc url_PostDescribeHsmClientCertificates_21627777(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeHsmClientCertificates_21627776(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns information about the specified HSM client certificate. If no certificate ID is specified, returns information about all the HSM certificates owned by your AWS customer account.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all HSM client certificates that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all HSM client certificates that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, HSM client certificates are returned regardless of whether they have tag keys or values associated with them.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627778 = query.getOrDefault("Action")
  valid_21627778 = validateParameter(valid_21627778, JString, required = true, default = newJString(
      "DescribeHsmClientCertificates"))
  if valid_21627778 != nil:
    section.add "Action", valid_21627778
  var valid_21627779 = query.getOrDefault("Version")
  valid_21627779 = validateParameter(valid_21627779, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627779 != nil:
    section.add "Version", valid_21627779
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627780 = header.getOrDefault("X-Amz-Date")
  valid_21627780 = validateParameter(valid_21627780, JString, required = false,
                                   default = nil)
  if valid_21627780 != nil:
    section.add "X-Amz-Date", valid_21627780
  var valid_21627781 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627781 = validateParameter(valid_21627781, JString, required = false,
                                   default = nil)
  if valid_21627781 != nil:
    section.add "X-Amz-Security-Token", valid_21627781
  var valid_21627782 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627782 = validateParameter(valid_21627782, JString, required = false,
                                   default = nil)
  if valid_21627782 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627782
  var valid_21627783 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627783 = validateParameter(valid_21627783, JString, required = false,
                                   default = nil)
  if valid_21627783 != nil:
    section.add "X-Amz-Algorithm", valid_21627783
  var valid_21627784 = header.getOrDefault("X-Amz-Signature")
  valid_21627784 = validateParameter(valid_21627784, JString, required = false,
                                   default = nil)
  if valid_21627784 != nil:
    section.add "X-Amz-Signature", valid_21627784
  var valid_21627785 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627785 = validateParameter(valid_21627785, JString, required = false,
                                   default = nil)
  if valid_21627785 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627785
  var valid_21627786 = header.getOrDefault("X-Amz-Credential")
  valid_21627786 = validateParameter(valid_21627786, JString, required = false,
                                   default = nil)
  if valid_21627786 != nil:
    section.add "X-Amz-Credential", valid_21627786
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeHsmClientCertificates</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   HsmClientCertificateIdentifier: JString
  ##                                 : The identifier of a specific HSM client certificate for which you want information. If no identifier is specified, information is returned for all HSM client certificates owned by your AWS customer account.
  ##   TagKeys: JArray
  ##          : A tag key or keys for which you want to return all matching HSM client certificates that are associated with the specified key or keys. For example, suppose that you have HSM client certificates that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the HSM client certificates that have either or both of these tag keys associated with them.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   TagValues: JArray
  ##            : A tag value or values for which you want to return all matching HSM client certificates that are associated with the specified tag value or values. For example, suppose that you have HSM client certificates that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the HSM client certificates that have either or both of these tag values associated with them.
  section = newJObject()
  var valid_21627787 = formData.getOrDefault("Marker")
  valid_21627787 = validateParameter(valid_21627787, JString, required = false,
                                   default = nil)
  if valid_21627787 != nil:
    section.add "Marker", valid_21627787
  var valid_21627788 = formData.getOrDefault("HsmClientCertificateIdentifier")
  valid_21627788 = validateParameter(valid_21627788, JString, required = false,
                                   default = nil)
  if valid_21627788 != nil:
    section.add "HsmClientCertificateIdentifier", valid_21627788
  var valid_21627789 = formData.getOrDefault("TagKeys")
  valid_21627789 = validateParameter(valid_21627789, JArray, required = false,
                                   default = nil)
  if valid_21627789 != nil:
    section.add "TagKeys", valid_21627789
  var valid_21627790 = formData.getOrDefault("MaxRecords")
  valid_21627790 = validateParameter(valid_21627790, JInt, required = false,
                                   default = nil)
  if valid_21627790 != nil:
    section.add "MaxRecords", valid_21627790
  var valid_21627791 = formData.getOrDefault("TagValues")
  valid_21627791 = validateParameter(valid_21627791, JArray, required = false,
                                   default = nil)
  if valid_21627791 != nil:
    section.add "TagValues", valid_21627791
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627792: Call_PostDescribeHsmClientCertificates_21627775;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns information about the specified HSM client certificate. If no certificate ID is specified, returns information about all the HSM certificates owned by your AWS customer account.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all HSM client certificates that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all HSM client certificates that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, HSM client certificates are returned regardless of whether they have tag keys or values associated with them.</p>
  ## 
  let valid = call_21627792.validator(path, query, header, formData, body, _)
  let scheme = call_21627792.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627792.makeUrl(scheme.get, call_21627792.host, call_21627792.base,
                               call_21627792.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627792, uri, valid, _)

proc call*(call_21627793: Call_PostDescribeHsmClientCertificates_21627775;
          Marker: string = ""; Action: string = "DescribeHsmClientCertificates";
          HsmClientCertificateIdentifier: string = ""; TagKeys: JsonNode = nil;
          MaxRecords: int = 0; TagValues: JsonNode = nil; Version: string = "2012-12-01"): Recallable =
  ## postDescribeHsmClientCertificates
  ## <p>Returns information about the specified HSM client certificate. If no certificate ID is specified, returns information about all the HSM certificates owned by your AWS customer account.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all HSM client certificates that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all HSM client certificates that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, HSM client certificates are returned regardless of whether they have tag keys or values associated with them.</p>
  ##   Marker: string
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeHsmClientCertificates</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   Action: string (required)
  ##   HsmClientCertificateIdentifier: string
  ##                                 : The identifier of a specific HSM client certificate for which you want information. If no identifier is specified, information is returned for all HSM client certificates owned by your AWS customer account.
  ##   TagKeys: JArray
  ##          : A tag key or keys for which you want to return all matching HSM client certificates that are associated with the specified key or keys. For example, suppose that you have HSM client certificates that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the HSM client certificates that have either or both of these tag keys associated with them.
  ##   MaxRecords: int
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   TagValues: JArray
  ##            : A tag value or values for which you want to return all matching HSM client certificates that are associated with the specified tag value or values. For example, suppose that you have HSM client certificates that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the HSM client certificates that have either or both of these tag values associated with them.
  ##   Version: string (required)
  var query_21627794 = newJObject()
  var formData_21627795 = newJObject()
  add(formData_21627795, "Marker", newJString(Marker))
  add(query_21627794, "Action", newJString(Action))
  add(formData_21627795, "HsmClientCertificateIdentifier",
      newJString(HsmClientCertificateIdentifier))
  if TagKeys != nil:
    formData_21627795.add "TagKeys", TagKeys
  add(formData_21627795, "MaxRecords", newJInt(MaxRecords))
  if TagValues != nil:
    formData_21627795.add "TagValues", TagValues
  add(query_21627794, "Version", newJString(Version))
  result = call_21627793.call(nil, query_21627794, nil, formData_21627795, nil)

var postDescribeHsmClientCertificates* = Call_PostDescribeHsmClientCertificates_21627775(
    name: "postDescribeHsmClientCertificates", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com",
    route: "/#Action=DescribeHsmClientCertificates",
    validator: validate_PostDescribeHsmClientCertificates_21627776, base: "/",
    makeUrl: url_PostDescribeHsmClientCertificates_21627777,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeHsmClientCertificates_21627755 = ref object of OpenApiRestCall_21625418
proc url_GetDescribeHsmClientCertificates_21627757(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeHsmClientCertificates_21627756(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns information about the specified HSM client certificate. If no certificate ID is specified, returns information about all the HSM certificates owned by your AWS customer account.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all HSM client certificates that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all HSM client certificates that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, HSM client certificates are returned regardless of whether they have tag keys or values associated with them.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TagValues: JArray
  ##            : A tag value or values for which you want to return all matching HSM client certificates that are associated with the specified tag value or values. For example, suppose that you have HSM client certificates that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the HSM client certificates that have either or both of these tag values associated with them.
  ##   HsmClientCertificateIdentifier: JString
  ##                                 : The identifier of a specific HSM client certificate for which you want information. If no identifier is specified, information is returned for all HSM client certificates owned by your AWS customer account.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeHsmClientCertificates</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   TagKeys: JArray
  ##          : A tag key or keys for which you want to return all matching HSM client certificates that are associated with the specified key or keys. For example, suppose that you have HSM client certificates that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the HSM client certificates that have either or both of these tag keys associated with them.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627758 = query.getOrDefault("TagValues")
  valid_21627758 = validateParameter(valid_21627758, JArray, required = false,
                                   default = nil)
  if valid_21627758 != nil:
    section.add "TagValues", valid_21627758
  var valid_21627759 = query.getOrDefault("HsmClientCertificateIdentifier")
  valid_21627759 = validateParameter(valid_21627759, JString, required = false,
                                   default = nil)
  if valid_21627759 != nil:
    section.add "HsmClientCertificateIdentifier", valid_21627759
  var valid_21627760 = query.getOrDefault("MaxRecords")
  valid_21627760 = validateParameter(valid_21627760, JInt, required = false,
                                   default = nil)
  if valid_21627760 != nil:
    section.add "MaxRecords", valid_21627760
  var valid_21627761 = query.getOrDefault("Action")
  valid_21627761 = validateParameter(valid_21627761, JString, required = true, default = newJString(
      "DescribeHsmClientCertificates"))
  if valid_21627761 != nil:
    section.add "Action", valid_21627761
  var valid_21627762 = query.getOrDefault("Marker")
  valid_21627762 = validateParameter(valid_21627762, JString, required = false,
                                   default = nil)
  if valid_21627762 != nil:
    section.add "Marker", valid_21627762
  var valid_21627763 = query.getOrDefault("TagKeys")
  valid_21627763 = validateParameter(valid_21627763, JArray, required = false,
                                   default = nil)
  if valid_21627763 != nil:
    section.add "TagKeys", valid_21627763
  var valid_21627764 = query.getOrDefault("Version")
  valid_21627764 = validateParameter(valid_21627764, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627764 != nil:
    section.add "Version", valid_21627764
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627765 = header.getOrDefault("X-Amz-Date")
  valid_21627765 = validateParameter(valid_21627765, JString, required = false,
                                   default = nil)
  if valid_21627765 != nil:
    section.add "X-Amz-Date", valid_21627765
  var valid_21627766 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627766 = validateParameter(valid_21627766, JString, required = false,
                                   default = nil)
  if valid_21627766 != nil:
    section.add "X-Amz-Security-Token", valid_21627766
  var valid_21627767 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627767 = validateParameter(valid_21627767, JString, required = false,
                                   default = nil)
  if valid_21627767 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627767
  var valid_21627768 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627768 = validateParameter(valid_21627768, JString, required = false,
                                   default = nil)
  if valid_21627768 != nil:
    section.add "X-Amz-Algorithm", valid_21627768
  var valid_21627769 = header.getOrDefault("X-Amz-Signature")
  valid_21627769 = validateParameter(valid_21627769, JString, required = false,
                                   default = nil)
  if valid_21627769 != nil:
    section.add "X-Amz-Signature", valid_21627769
  var valid_21627770 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627770 = validateParameter(valid_21627770, JString, required = false,
                                   default = nil)
  if valid_21627770 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627770
  var valid_21627771 = header.getOrDefault("X-Amz-Credential")
  valid_21627771 = validateParameter(valid_21627771, JString, required = false,
                                   default = nil)
  if valid_21627771 != nil:
    section.add "X-Amz-Credential", valid_21627771
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627772: Call_GetDescribeHsmClientCertificates_21627755;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns information about the specified HSM client certificate. If no certificate ID is specified, returns information about all the HSM certificates owned by your AWS customer account.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all HSM client certificates that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all HSM client certificates that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, HSM client certificates are returned regardless of whether they have tag keys or values associated with them.</p>
  ## 
  let valid = call_21627772.validator(path, query, header, formData, body, _)
  let scheme = call_21627772.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627772.makeUrl(scheme.get, call_21627772.host, call_21627772.base,
                               call_21627772.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627772, uri, valid, _)

proc call*(call_21627773: Call_GetDescribeHsmClientCertificates_21627755;
          TagValues: JsonNode = nil; HsmClientCertificateIdentifier: string = "";
          MaxRecords: int = 0; Action: string = "DescribeHsmClientCertificates";
          Marker: string = ""; TagKeys: JsonNode = nil; Version: string = "2012-12-01"): Recallable =
  ## getDescribeHsmClientCertificates
  ## <p>Returns information about the specified HSM client certificate. If no certificate ID is specified, returns information about all the HSM certificates owned by your AWS customer account.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all HSM client certificates that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all HSM client certificates that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, HSM client certificates are returned regardless of whether they have tag keys or values associated with them.</p>
  ##   TagValues: JArray
  ##            : A tag value or values for which you want to return all matching HSM client certificates that are associated with the specified tag value or values. For example, suppose that you have HSM client certificates that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the HSM client certificates that have either or both of these tag values associated with them.
  ##   HsmClientCertificateIdentifier: string
  ##                                 : The identifier of a specific HSM client certificate for which you want information. If no identifier is specified, information is returned for all HSM client certificates owned by your AWS customer account.
  ##   MaxRecords: int
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeHsmClientCertificates</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   TagKeys: JArray
  ##          : A tag key or keys for which you want to return all matching HSM client certificates that are associated with the specified key or keys. For example, suppose that you have HSM client certificates that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the HSM client certificates that have either or both of these tag keys associated with them.
  ##   Version: string (required)
  var query_21627774 = newJObject()
  if TagValues != nil:
    query_21627774.add "TagValues", TagValues
  add(query_21627774, "HsmClientCertificateIdentifier",
      newJString(HsmClientCertificateIdentifier))
  add(query_21627774, "MaxRecords", newJInt(MaxRecords))
  add(query_21627774, "Action", newJString(Action))
  add(query_21627774, "Marker", newJString(Marker))
  if TagKeys != nil:
    query_21627774.add "TagKeys", TagKeys
  add(query_21627774, "Version", newJString(Version))
  result = call_21627773.call(nil, query_21627774, nil, nil, nil)

var getDescribeHsmClientCertificates* = Call_GetDescribeHsmClientCertificates_21627755(
    name: "getDescribeHsmClientCertificates", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com",
    route: "/#Action=DescribeHsmClientCertificates",
    validator: validate_GetDescribeHsmClientCertificates_21627756, base: "/",
    makeUrl: url_GetDescribeHsmClientCertificates_21627757,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeHsmConfigurations_21627816 = ref object of OpenApiRestCall_21625418
proc url_PostDescribeHsmConfigurations_21627818(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeHsmConfigurations_21627817(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns information about the specified Amazon Redshift HSM configuration. If no configuration ID is specified, returns information about all the HSM configurations owned by your AWS customer account.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all HSM connections that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all HSM connections that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, HSM connections are returned regardless of whether they have tag keys or values associated with them.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627819 = query.getOrDefault("Action")
  valid_21627819 = validateParameter(valid_21627819, JString, required = true, default = newJString(
      "DescribeHsmConfigurations"))
  if valid_21627819 != nil:
    section.add "Action", valid_21627819
  var valid_21627820 = query.getOrDefault("Version")
  valid_21627820 = validateParameter(valid_21627820, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627820 != nil:
    section.add "Version", valid_21627820
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627821 = header.getOrDefault("X-Amz-Date")
  valid_21627821 = validateParameter(valid_21627821, JString, required = false,
                                   default = nil)
  if valid_21627821 != nil:
    section.add "X-Amz-Date", valid_21627821
  var valid_21627822 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627822 = validateParameter(valid_21627822, JString, required = false,
                                   default = nil)
  if valid_21627822 != nil:
    section.add "X-Amz-Security-Token", valid_21627822
  var valid_21627823 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627823 = validateParameter(valid_21627823, JString, required = false,
                                   default = nil)
  if valid_21627823 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627823
  var valid_21627824 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627824 = validateParameter(valid_21627824, JString, required = false,
                                   default = nil)
  if valid_21627824 != nil:
    section.add "X-Amz-Algorithm", valid_21627824
  var valid_21627825 = header.getOrDefault("X-Amz-Signature")
  valid_21627825 = validateParameter(valid_21627825, JString, required = false,
                                   default = nil)
  if valid_21627825 != nil:
    section.add "X-Amz-Signature", valid_21627825
  var valid_21627826 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627826 = validateParameter(valid_21627826, JString, required = false,
                                   default = nil)
  if valid_21627826 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627826
  var valid_21627827 = header.getOrDefault("X-Amz-Credential")
  valid_21627827 = validateParameter(valid_21627827, JString, required = false,
                                   default = nil)
  if valid_21627827 != nil:
    section.add "X-Amz-Credential", valid_21627827
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeHsmConfigurations</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   HsmConfigurationIdentifier: JString
  ##                             : The identifier of a specific Amazon Redshift HSM configuration to be described. If no identifier is specified, information is returned for all HSM configurations owned by your AWS customer account.
  ##   TagKeys: JArray
  ##          : A tag key or keys for which you want to return all matching HSM configurations that are associated with the specified key or keys. For example, suppose that you have HSM configurations that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the HSM configurations that have either or both of these tag keys associated with them.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   TagValues: JArray
  ##            : A tag value or values for which you want to return all matching HSM configurations that are associated with the specified tag value or values. For example, suppose that you have HSM configurations that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the HSM configurations that have either or both of these tag values associated with them.
  section = newJObject()
  var valid_21627828 = formData.getOrDefault("Marker")
  valid_21627828 = validateParameter(valid_21627828, JString, required = false,
                                   default = nil)
  if valid_21627828 != nil:
    section.add "Marker", valid_21627828
  var valid_21627829 = formData.getOrDefault("HsmConfigurationIdentifier")
  valid_21627829 = validateParameter(valid_21627829, JString, required = false,
                                   default = nil)
  if valid_21627829 != nil:
    section.add "HsmConfigurationIdentifier", valid_21627829
  var valid_21627830 = formData.getOrDefault("TagKeys")
  valid_21627830 = validateParameter(valid_21627830, JArray, required = false,
                                   default = nil)
  if valid_21627830 != nil:
    section.add "TagKeys", valid_21627830
  var valid_21627831 = formData.getOrDefault("MaxRecords")
  valid_21627831 = validateParameter(valid_21627831, JInt, required = false,
                                   default = nil)
  if valid_21627831 != nil:
    section.add "MaxRecords", valid_21627831
  var valid_21627832 = formData.getOrDefault("TagValues")
  valid_21627832 = validateParameter(valid_21627832, JArray, required = false,
                                   default = nil)
  if valid_21627832 != nil:
    section.add "TagValues", valid_21627832
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627833: Call_PostDescribeHsmConfigurations_21627816;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns information about the specified Amazon Redshift HSM configuration. If no configuration ID is specified, returns information about all the HSM configurations owned by your AWS customer account.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all HSM connections that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all HSM connections that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, HSM connections are returned regardless of whether they have tag keys or values associated with them.</p>
  ## 
  let valid = call_21627833.validator(path, query, header, formData, body, _)
  let scheme = call_21627833.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627833.makeUrl(scheme.get, call_21627833.host, call_21627833.base,
                               call_21627833.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627833, uri, valid, _)

proc call*(call_21627834: Call_PostDescribeHsmConfigurations_21627816;
          Marker: string = ""; HsmConfigurationIdentifier: string = "";
          Action: string = "DescribeHsmConfigurations"; TagKeys: JsonNode = nil;
          MaxRecords: int = 0; TagValues: JsonNode = nil; Version: string = "2012-12-01"): Recallable =
  ## postDescribeHsmConfigurations
  ## <p>Returns information about the specified Amazon Redshift HSM configuration. If no configuration ID is specified, returns information about all the HSM configurations owned by your AWS customer account.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all HSM connections that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all HSM connections that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, HSM connections are returned regardless of whether they have tag keys or values associated with them.</p>
  ##   Marker: string
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeHsmConfigurations</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   HsmConfigurationIdentifier: string
  ##                             : The identifier of a specific Amazon Redshift HSM configuration to be described. If no identifier is specified, information is returned for all HSM configurations owned by your AWS customer account.
  ##   Action: string (required)
  ##   TagKeys: JArray
  ##          : A tag key or keys for which you want to return all matching HSM configurations that are associated with the specified key or keys. For example, suppose that you have HSM configurations that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the HSM configurations that have either or both of these tag keys associated with them.
  ##   MaxRecords: int
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   TagValues: JArray
  ##            : A tag value or values for which you want to return all matching HSM configurations that are associated with the specified tag value or values. For example, suppose that you have HSM configurations that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the HSM configurations that have either or both of these tag values associated with them.
  ##   Version: string (required)
  var query_21627835 = newJObject()
  var formData_21627836 = newJObject()
  add(formData_21627836, "Marker", newJString(Marker))
  add(formData_21627836, "HsmConfigurationIdentifier",
      newJString(HsmConfigurationIdentifier))
  add(query_21627835, "Action", newJString(Action))
  if TagKeys != nil:
    formData_21627836.add "TagKeys", TagKeys
  add(formData_21627836, "MaxRecords", newJInt(MaxRecords))
  if TagValues != nil:
    formData_21627836.add "TagValues", TagValues
  add(query_21627835, "Version", newJString(Version))
  result = call_21627834.call(nil, query_21627835, nil, formData_21627836, nil)

var postDescribeHsmConfigurations* = Call_PostDescribeHsmConfigurations_21627816(
    name: "postDescribeHsmConfigurations", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=DescribeHsmConfigurations",
    validator: validate_PostDescribeHsmConfigurations_21627817, base: "/",
    makeUrl: url_PostDescribeHsmConfigurations_21627818,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeHsmConfigurations_21627796 = ref object of OpenApiRestCall_21625418
proc url_GetDescribeHsmConfigurations_21627798(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeHsmConfigurations_21627797(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns information about the specified Amazon Redshift HSM configuration. If no configuration ID is specified, returns information about all the HSM configurations owned by your AWS customer account.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all HSM connections that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all HSM connections that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, HSM connections are returned regardless of whether they have tag keys or values associated with them.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TagValues: JArray
  ##            : A tag value or values for which you want to return all matching HSM configurations that are associated with the specified tag value or values. For example, suppose that you have HSM configurations that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the HSM configurations that have either or both of these tag values associated with them.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   HsmConfigurationIdentifier: JString
  ##                             : The identifier of a specific Amazon Redshift HSM configuration to be described. If no identifier is specified, information is returned for all HSM configurations owned by your AWS customer account.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeHsmConfigurations</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   TagKeys: JArray
  ##          : A tag key or keys for which you want to return all matching HSM configurations that are associated with the specified key or keys. For example, suppose that you have HSM configurations that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the HSM configurations that have either or both of these tag keys associated with them.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627799 = query.getOrDefault("TagValues")
  valid_21627799 = validateParameter(valid_21627799, JArray, required = false,
                                   default = nil)
  if valid_21627799 != nil:
    section.add "TagValues", valid_21627799
  var valid_21627800 = query.getOrDefault("MaxRecords")
  valid_21627800 = validateParameter(valid_21627800, JInt, required = false,
                                   default = nil)
  if valid_21627800 != nil:
    section.add "MaxRecords", valid_21627800
  var valid_21627801 = query.getOrDefault("HsmConfigurationIdentifier")
  valid_21627801 = validateParameter(valid_21627801, JString, required = false,
                                   default = nil)
  if valid_21627801 != nil:
    section.add "HsmConfigurationIdentifier", valid_21627801
  var valid_21627802 = query.getOrDefault("Action")
  valid_21627802 = validateParameter(valid_21627802, JString, required = true, default = newJString(
      "DescribeHsmConfigurations"))
  if valid_21627802 != nil:
    section.add "Action", valid_21627802
  var valid_21627803 = query.getOrDefault("Marker")
  valid_21627803 = validateParameter(valid_21627803, JString, required = false,
                                   default = nil)
  if valid_21627803 != nil:
    section.add "Marker", valid_21627803
  var valid_21627804 = query.getOrDefault("TagKeys")
  valid_21627804 = validateParameter(valid_21627804, JArray, required = false,
                                   default = nil)
  if valid_21627804 != nil:
    section.add "TagKeys", valid_21627804
  var valid_21627805 = query.getOrDefault("Version")
  valid_21627805 = validateParameter(valid_21627805, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627805 != nil:
    section.add "Version", valid_21627805
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627806 = header.getOrDefault("X-Amz-Date")
  valid_21627806 = validateParameter(valid_21627806, JString, required = false,
                                   default = nil)
  if valid_21627806 != nil:
    section.add "X-Amz-Date", valid_21627806
  var valid_21627807 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627807 = validateParameter(valid_21627807, JString, required = false,
                                   default = nil)
  if valid_21627807 != nil:
    section.add "X-Amz-Security-Token", valid_21627807
  var valid_21627808 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627808 = validateParameter(valid_21627808, JString, required = false,
                                   default = nil)
  if valid_21627808 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627808
  var valid_21627809 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627809 = validateParameter(valid_21627809, JString, required = false,
                                   default = nil)
  if valid_21627809 != nil:
    section.add "X-Amz-Algorithm", valid_21627809
  var valid_21627810 = header.getOrDefault("X-Amz-Signature")
  valid_21627810 = validateParameter(valid_21627810, JString, required = false,
                                   default = nil)
  if valid_21627810 != nil:
    section.add "X-Amz-Signature", valid_21627810
  var valid_21627811 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627811 = validateParameter(valid_21627811, JString, required = false,
                                   default = nil)
  if valid_21627811 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627811
  var valid_21627812 = header.getOrDefault("X-Amz-Credential")
  valid_21627812 = validateParameter(valid_21627812, JString, required = false,
                                   default = nil)
  if valid_21627812 != nil:
    section.add "X-Amz-Credential", valid_21627812
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627813: Call_GetDescribeHsmConfigurations_21627796;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns information about the specified Amazon Redshift HSM configuration. If no configuration ID is specified, returns information about all the HSM configurations owned by your AWS customer account.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all HSM connections that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all HSM connections that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, HSM connections are returned regardless of whether they have tag keys or values associated with them.</p>
  ## 
  let valid = call_21627813.validator(path, query, header, formData, body, _)
  let scheme = call_21627813.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627813.makeUrl(scheme.get, call_21627813.host, call_21627813.base,
                               call_21627813.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627813, uri, valid, _)

proc call*(call_21627814: Call_GetDescribeHsmConfigurations_21627796;
          TagValues: JsonNode = nil; MaxRecords: int = 0;
          HsmConfigurationIdentifier: string = "";
          Action: string = "DescribeHsmConfigurations"; Marker: string = "";
          TagKeys: JsonNode = nil; Version: string = "2012-12-01"): Recallable =
  ## getDescribeHsmConfigurations
  ## <p>Returns information about the specified Amazon Redshift HSM configuration. If no configuration ID is specified, returns information about all the HSM configurations owned by your AWS customer account.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all HSM connections that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all HSM connections that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, HSM connections are returned regardless of whether they have tag keys or values associated with them.</p>
  ##   TagValues: JArray
  ##            : A tag value or values for which you want to return all matching HSM configurations that are associated with the specified tag value or values. For example, suppose that you have HSM configurations that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the HSM configurations that have either or both of these tag values associated with them.
  ##   MaxRecords: int
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   HsmConfigurationIdentifier: string
  ##                             : The identifier of a specific Amazon Redshift HSM configuration to be described. If no identifier is specified, information is returned for all HSM configurations owned by your AWS customer account.
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeHsmConfigurations</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   TagKeys: JArray
  ##          : A tag key or keys for which you want to return all matching HSM configurations that are associated with the specified key or keys. For example, suppose that you have HSM configurations that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the HSM configurations that have either or both of these tag keys associated with them.
  ##   Version: string (required)
  var query_21627815 = newJObject()
  if TagValues != nil:
    query_21627815.add "TagValues", TagValues
  add(query_21627815, "MaxRecords", newJInt(MaxRecords))
  add(query_21627815, "HsmConfigurationIdentifier",
      newJString(HsmConfigurationIdentifier))
  add(query_21627815, "Action", newJString(Action))
  add(query_21627815, "Marker", newJString(Marker))
  if TagKeys != nil:
    query_21627815.add "TagKeys", TagKeys
  add(query_21627815, "Version", newJString(Version))
  result = call_21627814.call(nil, query_21627815, nil, nil, nil)

var getDescribeHsmConfigurations* = Call_GetDescribeHsmConfigurations_21627796(
    name: "getDescribeHsmConfigurations", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=DescribeHsmConfigurations",
    validator: validate_GetDescribeHsmConfigurations_21627797, base: "/",
    makeUrl: url_GetDescribeHsmConfigurations_21627798,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeLoggingStatus_21627853 = ref object of OpenApiRestCall_21625418
proc url_PostDescribeLoggingStatus_21627855(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeLoggingStatus_21627854(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Describes whether information, such as queries and connection attempts, is being logged for the specified Amazon Redshift cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627856 = query.getOrDefault("Action")
  valid_21627856 = validateParameter(valid_21627856, JString, required = true, default = newJString(
      "DescribeLoggingStatus"))
  if valid_21627856 != nil:
    section.add "Action", valid_21627856
  var valid_21627857 = query.getOrDefault("Version")
  valid_21627857 = validateParameter(valid_21627857, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627857 != nil:
    section.add "Version", valid_21627857
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627858 = header.getOrDefault("X-Amz-Date")
  valid_21627858 = validateParameter(valid_21627858, JString, required = false,
                                   default = nil)
  if valid_21627858 != nil:
    section.add "X-Amz-Date", valid_21627858
  var valid_21627859 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627859 = validateParameter(valid_21627859, JString, required = false,
                                   default = nil)
  if valid_21627859 != nil:
    section.add "X-Amz-Security-Token", valid_21627859
  var valid_21627860 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627860 = validateParameter(valid_21627860, JString, required = false,
                                   default = nil)
  if valid_21627860 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627860
  var valid_21627861 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627861 = validateParameter(valid_21627861, JString, required = false,
                                   default = nil)
  if valid_21627861 != nil:
    section.add "X-Amz-Algorithm", valid_21627861
  var valid_21627862 = header.getOrDefault("X-Amz-Signature")
  valid_21627862 = validateParameter(valid_21627862, JString, required = false,
                                   default = nil)
  if valid_21627862 != nil:
    section.add "X-Amz-Signature", valid_21627862
  var valid_21627863 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627863 = validateParameter(valid_21627863, JString, required = false,
                                   default = nil)
  if valid_21627863 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627863
  var valid_21627864 = header.getOrDefault("X-Amz-Credential")
  valid_21627864 = validateParameter(valid_21627864, JString, required = false,
                                   default = nil)
  if valid_21627864 != nil:
    section.add "X-Amz-Credential", valid_21627864
  result.add "header", section
  ## parameters in `formData` object:
  ##   ClusterIdentifier: JString (required)
  ##                    : <p>The identifier of the cluster from which to get the logging status.</p> <p>Example: <code>examplecluster</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ClusterIdentifier` field"
  var valid_21627865 = formData.getOrDefault("ClusterIdentifier")
  valid_21627865 = validateParameter(valid_21627865, JString, required = true,
                                   default = nil)
  if valid_21627865 != nil:
    section.add "ClusterIdentifier", valid_21627865
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627866: Call_PostDescribeLoggingStatus_21627853;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Describes whether information, such as queries and connection attempts, is being logged for the specified Amazon Redshift cluster.
  ## 
  let valid = call_21627866.validator(path, query, header, formData, body, _)
  let scheme = call_21627866.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627866.makeUrl(scheme.get, call_21627866.host, call_21627866.base,
                               call_21627866.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627866, uri, valid, _)

proc call*(call_21627867: Call_PostDescribeLoggingStatus_21627853;
          ClusterIdentifier: string; Action: string = "DescribeLoggingStatus";
          Version: string = "2012-12-01"): Recallable =
  ## postDescribeLoggingStatus
  ## Describes whether information, such as queries and connection attempts, is being logged for the specified Amazon Redshift cluster.
  ##   Action: string (required)
  ##   ClusterIdentifier: string (required)
  ##                    : <p>The identifier of the cluster from which to get the logging status.</p> <p>Example: <code>examplecluster</code> </p>
  ##   Version: string (required)
  var query_21627868 = newJObject()
  var formData_21627869 = newJObject()
  add(query_21627868, "Action", newJString(Action))
  add(formData_21627869, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(query_21627868, "Version", newJString(Version))
  result = call_21627867.call(nil, query_21627868, nil, formData_21627869, nil)

var postDescribeLoggingStatus* = Call_PostDescribeLoggingStatus_21627853(
    name: "postDescribeLoggingStatus", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=DescribeLoggingStatus",
    validator: validate_PostDescribeLoggingStatus_21627854, base: "/",
    makeUrl: url_PostDescribeLoggingStatus_21627855,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeLoggingStatus_21627837 = ref object of OpenApiRestCall_21625418
proc url_GetDescribeLoggingStatus_21627839(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeLoggingStatus_21627838(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Describes whether information, such as queries and connection attempts, is being logged for the specified Amazon Redshift cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ClusterIdentifier: JString (required)
  ##                    : <p>The identifier of the cluster from which to get the logging status.</p> <p>Example: <code>examplecluster</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627840 = query.getOrDefault("Action")
  valid_21627840 = validateParameter(valid_21627840, JString, required = true, default = newJString(
      "DescribeLoggingStatus"))
  if valid_21627840 != nil:
    section.add "Action", valid_21627840
  var valid_21627841 = query.getOrDefault("ClusterIdentifier")
  valid_21627841 = validateParameter(valid_21627841, JString, required = true,
                                   default = nil)
  if valid_21627841 != nil:
    section.add "ClusterIdentifier", valid_21627841
  var valid_21627842 = query.getOrDefault("Version")
  valid_21627842 = validateParameter(valid_21627842, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627842 != nil:
    section.add "Version", valid_21627842
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627843 = header.getOrDefault("X-Amz-Date")
  valid_21627843 = validateParameter(valid_21627843, JString, required = false,
                                   default = nil)
  if valid_21627843 != nil:
    section.add "X-Amz-Date", valid_21627843
  var valid_21627844 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627844 = validateParameter(valid_21627844, JString, required = false,
                                   default = nil)
  if valid_21627844 != nil:
    section.add "X-Amz-Security-Token", valid_21627844
  var valid_21627845 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627845 = validateParameter(valid_21627845, JString, required = false,
                                   default = nil)
  if valid_21627845 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627845
  var valid_21627846 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627846 = validateParameter(valid_21627846, JString, required = false,
                                   default = nil)
  if valid_21627846 != nil:
    section.add "X-Amz-Algorithm", valid_21627846
  var valid_21627847 = header.getOrDefault("X-Amz-Signature")
  valid_21627847 = validateParameter(valid_21627847, JString, required = false,
                                   default = nil)
  if valid_21627847 != nil:
    section.add "X-Amz-Signature", valid_21627847
  var valid_21627848 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627848 = validateParameter(valid_21627848, JString, required = false,
                                   default = nil)
  if valid_21627848 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627848
  var valid_21627849 = header.getOrDefault("X-Amz-Credential")
  valid_21627849 = validateParameter(valid_21627849, JString, required = false,
                                   default = nil)
  if valid_21627849 != nil:
    section.add "X-Amz-Credential", valid_21627849
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627850: Call_GetDescribeLoggingStatus_21627837;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Describes whether information, such as queries and connection attempts, is being logged for the specified Amazon Redshift cluster.
  ## 
  let valid = call_21627850.validator(path, query, header, formData, body, _)
  let scheme = call_21627850.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627850.makeUrl(scheme.get, call_21627850.host, call_21627850.base,
                               call_21627850.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627850, uri, valid, _)

proc call*(call_21627851: Call_GetDescribeLoggingStatus_21627837;
          ClusterIdentifier: string; Action: string = "DescribeLoggingStatus";
          Version: string = "2012-12-01"): Recallable =
  ## getDescribeLoggingStatus
  ## Describes whether information, such as queries and connection attempts, is being logged for the specified Amazon Redshift cluster.
  ##   Action: string (required)
  ##   ClusterIdentifier: string (required)
  ##                    : <p>The identifier of the cluster from which to get the logging status.</p> <p>Example: <code>examplecluster</code> </p>
  ##   Version: string (required)
  var query_21627852 = newJObject()
  add(query_21627852, "Action", newJString(Action))
  add(query_21627852, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(query_21627852, "Version", newJString(Version))
  result = call_21627851.call(nil, query_21627852, nil, nil, nil)

var getDescribeLoggingStatus* = Call_GetDescribeLoggingStatus_21627837(
    name: "getDescribeLoggingStatus", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=DescribeLoggingStatus",
    validator: validate_GetDescribeLoggingStatus_21627838, base: "/",
    makeUrl: url_GetDescribeLoggingStatus_21627839,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeNodeConfigurationOptions_21627892 = ref object of OpenApiRestCall_21625418
proc url_PostDescribeNodeConfigurationOptions_21627894(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeNodeConfigurationOptions_21627893(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Returns properties of possible node configurations such as node type, number of nodes, and disk usage for the specified action type.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627895 = query.getOrDefault("Action")
  valid_21627895 = validateParameter(valid_21627895, JString, required = true, default = newJString(
      "DescribeNodeConfigurationOptions"))
  if valid_21627895 != nil:
    section.add "Action", valid_21627895
  var valid_21627896 = query.getOrDefault("Version")
  valid_21627896 = validateParameter(valid_21627896, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627896 != nil:
    section.add "Version", valid_21627896
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627897 = header.getOrDefault("X-Amz-Date")
  valid_21627897 = validateParameter(valid_21627897, JString, required = false,
                                   default = nil)
  if valid_21627897 != nil:
    section.add "X-Amz-Date", valid_21627897
  var valid_21627898 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627898 = validateParameter(valid_21627898, JString, required = false,
                                   default = nil)
  if valid_21627898 != nil:
    section.add "X-Amz-Security-Token", valid_21627898
  var valid_21627899 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627899 = validateParameter(valid_21627899, JString, required = false,
                                   default = nil)
  if valid_21627899 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627899
  var valid_21627900 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627900 = validateParameter(valid_21627900, JString, required = false,
                                   default = nil)
  if valid_21627900 != nil:
    section.add "X-Amz-Algorithm", valid_21627900
  var valid_21627901 = header.getOrDefault("X-Amz-Signature")
  valid_21627901 = validateParameter(valid_21627901, JString, required = false,
                                   default = nil)
  if valid_21627901 != nil:
    section.add "X-Amz-Signature", valid_21627901
  var valid_21627902 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627902 = validateParameter(valid_21627902, JString, required = false,
                                   default = nil)
  if valid_21627902 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627902
  var valid_21627903 = header.getOrDefault("X-Amz-Credential")
  valid_21627903 = validateParameter(valid_21627903, JString, required = false,
                                   default = nil)
  if valid_21627903 != nil:
    section.add "X-Amz-Credential", valid_21627903
  result.add "header", section
  ## parameters in `formData` object:
  ##   Filter: JArray
  ##         : A set of name, operator, and value items to filter the results.
  ##   Marker: JString
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeNodeConfigurationOptions</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   OwnerAccount: JString
  ##               : The AWS customer account used to create or copy the snapshot. Required if you are restoring a snapshot you do not own, optional if you own the snapshot.
  ##   ActionType: JString (required)
  ##             : The action type to evaluate for possible node configurations. Specify "restore-cluster" to get configuration combinations based on an existing snapshot. Specify "recommend-node-config" to get configuration recommendations based on an existing cluster or snapshot. Specify "resize-cluster" to get configuration combinations for elastic resize based on an existing cluster. 
  ##   ClusterIdentifier: JString
  ##                    : The identifier of the cluster to evaluate for possible node configurations.
  ##   SnapshotIdentifier: JString
  ##                     : The identifier of the snapshot to evaluate for possible node configurations.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>500</code> </p> <p>Constraints: minimum 100, maximum 500.</p>
  section = newJObject()
  var valid_21627904 = formData.getOrDefault("Filter")
  valid_21627904 = validateParameter(valid_21627904, JArray, required = false,
                                   default = nil)
  if valid_21627904 != nil:
    section.add "Filter", valid_21627904
  var valid_21627905 = formData.getOrDefault("Marker")
  valid_21627905 = validateParameter(valid_21627905, JString, required = false,
                                   default = nil)
  if valid_21627905 != nil:
    section.add "Marker", valid_21627905
  var valid_21627906 = formData.getOrDefault("OwnerAccount")
  valid_21627906 = validateParameter(valid_21627906, JString, required = false,
                                   default = nil)
  if valid_21627906 != nil:
    section.add "OwnerAccount", valid_21627906
  var valid_21627907 = formData.getOrDefault("ActionType")
  valid_21627907 = validateParameter(valid_21627907, JString, required = true,
                                   default = newJString("restore-cluster"))
  if valid_21627907 != nil:
    section.add "ActionType", valid_21627907
  var valid_21627908 = formData.getOrDefault("ClusterIdentifier")
  valid_21627908 = validateParameter(valid_21627908, JString, required = false,
                                   default = nil)
  if valid_21627908 != nil:
    section.add "ClusterIdentifier", valid_21627908
  var valid_21627909 = formData.getOrDefault("SnapshotIdentifier")
  valid_21627909 = validateParameter(valid_21627909, JString, required = false,
                                   default = nil)
  if valid_21627909 != nil:
    section.add "SnapshotIdentifier", valid_21627909
  var valid_21627910 = formData.getOrDefault("MaxRecords")
  valid_21627910 = validateParameter(valid_21627910, JInt, required = false,
                                   default = nil)
  if valid_21627910 != nil:
    section.add "MaxRecords", valid_21627910
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627911: Call_PostDescribeNodeConfigurationOptions_21627892;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns properties of possible node configurations such as node type, number of nodes, and disk usage for the specified action type.
  ## 
  let valid = call_21627911.validator(path, query, header, formData, body, _)
  let scheme = call_21627911.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627911.makeUrl(scheme.get, call_21627911.host, call_21627911.base,
                               call_21627911.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627911, uri, valid, _)

proc call*(call_21627912: Call_PostDescribeNodeConfigurationOptions_21627892;
          Filter: JsonNode = nil; Marker: string = "";
          Action: string = "DescribeNodeConfigurationOptions";
          OwnerAccount: string = ""; ActionType: string = "restore-cluster";
          ClusterIdentifier: string = ""; SnapshotIdentifier: string = "";
          MaxRecords: int = 0; Version: string = "2012-12-01"): Recallable =
  ## postDescribeNodeConfigurationOptions
  ## Returns properties of possible node configurations such as node type, number of nodes, and disk usage for the specified action type.
  ##   Filter: JArray
  ##         : A set of name, operator, and value items to filter the results.
  ##   Marker: string
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeNodeConfigurationOptions</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   Action: string (required)
  ##   OwnerAccount: string
  ##               : The AWS customer account used to create or copy the snapshot. Required if you are restoring a snapshot you do not own, optional if you own the snapshot.
  ##   ActionType: string (required)
  ##             : The action type to evaluate for possible node configurations. Specify "restore-cluster" to get configuration combinations based on an existing snapshot. Specify "recommend-node-config" to get configuration recommendations based on an existing cluster or snapshot. Specify "resize-cluster" to get configuration combinations for elastic resize based on an existing cluster. 
  ##   ClusterIdentifier: string
  ##                    : The identifier of the cluster to evaluate for possible node configurations.
  ##   SnapshotIdentifier: string
  ##                     : The identifier of the snapshot to evaluate for possible node configurations.
  ##   MaxRecords: int
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>500</code> </p> <p>Constraints: minimum 100, maximum 500.</p>
  ##   Version: string (required)
  var query_21627913 = newJObject()
  var formData_21627914 = newJObject()
  if Filter != nil:
    formData_21627914.add "Filter", Filter
  add(formData_21627914, "Marker", newJString(Marker))
  add(query_21627913, "Action", newJString(Action))
  add(formData_21627914, "OwnerAccount", newJString(OwnerAccount))
  add(formData_21627914, "ActionType", newJString(ActionType))
  add(formData_21627914, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(formData_21627914, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  add(formData_21627914, "MaxRecords", newJInt(MaxRecords))
  add(query_21627913, "Version", newJString(Version))
  result = call_21627912.call(nil, query_21627913, nil, formData_21627914, nil)

var postDescribeNodeConfigurationOptions* = Call_PostDescribeNodeConfigurationOptions_21627892(
    name: "postDescribeNodeConfigurationOptions", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com",
    route: "/#Action=DescribeNodeConfigurationOptions",
    validator: validate_PostDescribeNodeConfigurationOptions_21627893, base: "/",
    makeUrl: url_PostDescribeNodeConfigurationOptions_21627894,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeNodeConfigurationOptions_21627870 = ref object of OpenApiRestCall_21625418
proc url_GetDescribeNodeConfigurationOptions_21627872(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeNodeConfigurationOptions_21627871(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Returns properties of possible node configurations such as node type, number of nodes, and disk usage for the specified action type.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>500</code> </p> <p>Constraints: minimum 100, maximum 500.</p>
  ##   Filter: JArray
  ##         : A set of name, operator, and value items to filter the results.
  ##   ActionType: JString (required)
  ##             : The action type to evaluate for possible node configurations. Specify "restore-cluster" to get configuration combinations based on an existing snapshot. Specify "recommend-node-config" to get configuration recommendations based on an existing cluster or snapshot. Specify "resize-cluster" to get configuration combinations for elastic resize based on an existing cluster. 
  ##   Action: JString (required)
  ##   ClusterIdentifier: JString
  ##                    : The identifier of the cluster to evaluate for possible node configurations.
  ##   OwnerAccount: JString
  ##               : The AWS customer account used to create or copy the snapshot. Required if you are restoring a snapshot you do not own, optional if you own the snapshot.
  ##   Marker: JString
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeNodeConfigurationOptions</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   SnapshotIdentifier: JString
  ##                     : The identifier of the snapshot to evaluate for possible node configurations.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627873 = query.getOrDefault("MaxRecords")
  valid_21627873 = validateParameter(valid_21627873, JInt, required = false,
                                   default = nil)
  if valid_21627873 != nil:
    section.add "MaxRecords", valid_21627873
  var valid_21627874 = query.getOrDefault("Filter")
  valid_21627874 = validateParameter(valid_21627874, JArray, required = false,
                                   default = nil)
  if valid_21627874 != nil:
    section.add "Filter", valid_21627874
  var valid_21627875 = query.getOrDefault("ActionType")
  valid_21627875 = validateParameter(valid_21627875, JString, required = true,
                                   default = newJString("restore-cluster"))
  if valid_21627875 != nil:
    section.add "ActionType", valid_21627875
  var valid_21627876 = query.getOrDefault("Action")
  valid_21627876 = validateParameter(valid_21627876, JString, required = true, default = newJString(
      "DescribeNodeConfigurationOptions"))
  if valid_21627876 != nil:
    section.add "Action", valid_21627876
  var valid_21627877 = query.getOrDefault("ClusterIdentifier")
  valid_21627877 = validateParameter(valid_21627877, JString, required = false,
                                   default = nil)
  if valid_21627877 != nil:
    section.add "ClusterIdentifier", valid_21627877
  var valid_21627878 = query.getOrDefault("OwnerAccount")
  valid_21627878 = validateParameter(valid_21627878, JString, required = false,
                                   default = nil)
  if valid_21627878 != nil:
    section.add "OwnerAccount", valid_21627878
  var valid_21627879 = query.getOrDefault("Marker")
  valid_21627879 = validateParameter(valid_21627879, JString, required = false,
                                   default = nil)
  if valid_21627879 != nil:
    section.add "Marker", valid_21627879
  var valid_21627880 = query.getOrDefault("SnapshotIdentifier")
  valid_21627880 = validateParameter(valid_21627880, JString, required = false,
                                   default = nil)
  if valid_21627880 != nil:
    section.add "SnapshotIdentifier", valid_21627880
  var valid_21627881 = query.getOrDefault("Version")
  valid_21627881 = validateParameter(valid_21627881, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627881 != nil:
    section.add "Version", valid_21627881
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627882 = header.getOrDefault("X-Amz-Date")
  valid_21627882 = validateParameter(valid_21627882, JString, required = false,
                                   default = nil)
  if valid_21627882 != nil:
    section.add "X-Amz-Date", valid_21627882
  var valid_21627883 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627883 = validateParameter(valid_21627883, JString, required = false,
                                   default = nil)
  if valid_21627883 != nil:
    section.add "X-Amz-Security-Token", valid_21627883
  var valid_21627884 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627884 = validateParameter(valid_21627884, JString, required = false,
                                   default = nil)
  if valid_21627884 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627884
  var valid_21627885 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627885 = validateParameter(valid_21627885, JString, required = false,
                                   default = nil)
  if valid_21627885 != nil:
    section.add "X-Amz-Algorithm", valid_21627885
  var valid_21627886 = header.getOrDefault("X-Amz-Signature")
  valid_21627886 = validateParameter(valid_21627886, JString, required = false,
                                   default = nil)
  if valid_21627886 != nil:
    section.add "X-Amz-Signature", valid_21627886
  var valid_21627887 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627887 = validateParameter(valid_21627887, JString, required = false,
                                   default = nil)
  if valid_21627887 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627887
  var valid_21627888 = header.getOrDefault("X-Amz-Credential")
  valid_21627888 = validateParameter(valid_21627888, JString, required = false,
                                   default = nil)
  if valid_21627888 != nil:
    section.add "X-Amz-Credential", valid_21627888
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627889: Call_GetDescribeNodeConfigurationOptions_21627870;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns properties of possible node configurations such as node type, number of nodes, and disk usage for the specified action type.
  ## 
  let valid = call_21627889.validator(path, query, header, formData, body, _)
  let scheme = call_21627889.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627889.makeUrl(scheme.get, call_21627889.host, call_21627889.base,
                               call_21627889.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627889, uri, valid, _)

proc call*(call_21627890: Call_GetDescribeNodeConfigurationOptions_21627870;
          MaxRecords: int = 0; Filter: JsonNode = nil;
          ActionType: string = "restore-cluster";
          Action: string = "DescribeNodeConfigurationOptions";
          ClusterIdentifier: string = ""; OwnerAccount: string = "";
          Marker: string = ""; SnapshotIdentifier: string = "";
          Version: string = "2012-12-01"): Recallable =
  ## getDescribeNodeConfigurationOptions
  ## Returns properties of possible node configurations such as node type, number of nodes, and disk usage for the specified action type.
  ##   MaxRecords: int
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>500</code> </p> <p>Constraints: minimum 100, maximum 500.</p>
  ##   Filter: JArray
  ##         : A set of name, operator, and value items to filter the results.
  ##   ActionType: string (required)
  ##             : The action type to evaluate for possible node configurations. Specify "restore-cluster" to get configuration combinations based on an existing snapshot. Specify "recommend-node-config" to get configuration recommendations based on an existing cluster or snapshot. Specify "resize-cluster" to get configuration combinations for elastic resize based on an existing cluster. 
  ##   Action: string (required)
  ##   ClusterIdentifier: string
  ##                    : The identifier of the cluster to evaluate for possible node configurations.
  ##   OwnerAccount: string
  ##               : The AWS customer account used to create or copy the snapshot. Required if you are restoring a snapshot you do not own, optional if you own the snapshot.
  ##   Marker: string
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeNodeConfigurationOptions</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   SnapshotIdentifier: string
  ##                     : The identifier of the snapshot to evaluate for possible node configurations.
  ##   Version: string (required)
  var query_21627891 = newJObject()
  add(query_21627891, "MaxRecords", newJInt(MaxRecords))
  if Filter != nil:
    query_21627891.add "Filter", Filter
  add(query_21627891, "ActionType", newJString(ActionType))
  add(query_21627891, "Action", newJString(Action))
  add(query_21627891, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(query_21627891, "OwnerAccount", newJString(OwnerAccount))
  add(query_21627891, "Marker", newJString(Marker))
  add(query_21627891, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  add(query_21627891, "Version", newJString(Version))
  result = call_21627890.call(nil, query_21627891, nil, nil, nil)

var getDescribeNodeConfigurationOptions* = Call_GetDescribeNodeConfigurationOptions_21627870(
    name: "getDescribeNodeConfigurationOptions", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com",
    route: "/#Action=DescribeNodeConfigurationOptions",
    validator: validate_GetDescribeNodeConfigurationOptions_21627871, base: "/",
    makeUrl: url_GetDescribeNodeConfigurationOptions_21627872,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeOrderableClusterOptions_21627934 = ref object of OpenApiRestCall_21625418
proc url_PostDescribeOrderableClusterOptions_21627936(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeOrderableClusterOptions_21627935(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Returns a list of orderable cluster options. Before you create a new cluster you can use this operation to find what options are available, such as the EC2 Availability Zones (AZ) in the specific AWS Region that you can specify, and the node types you can request. The node types differ by available storage, memory, CPU and price. With the cost involved you might want to obtain a list of cluster options in the specific region and specify values when creating a cluster. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627937 = query.getOrDefault("Action")
  valid_21627937 = validateParameter(valid_21627937, JString, required = true, default = newJString(
      "DescribeOrderableClusterOptions"))
  if valid_21627937 != nil:
    section.add "Action", valid_21627937
  var valid_21627938 = query.getOrDefault("Version")
  valid_21627938 = validateParameter(valid_21627938, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627938 != nil:
    section.add "Version", valid_21627938
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627939 = header.getOrDefault("X-Amz-Date")
  valid_21627939 = validateParameter(valid_21627939, JString, required = false,
                                   default = nil)
  if valid_21627939 != nil:
    section.add "X-Amz-Date", valid_21627939
  var valid_21627940 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627940 = validateParameter(valid_21627940, JString, required = false,
                                   default = nil)
  if valid_21627940 != nil:
    section.add "X-Amz-Security-Token", valid_21627940
  var valid_21627941 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627941 = validateParameter(valid_21627941, JString, required = false,
                                   default = nil)
  if valid_21627941 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627941
  var valid_21627942 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627942 = validateParameter(valid_21627942, JString, required = false,
                                   default = nil)
  if valid_21627942 != nil:
    section.add "X-Amz-Algorithm", valid_21627942
  var valid_21627943 = header.getOrDefault("X-Amz-Signature")
  valid_21627943 = validateParameter(valid_21627943, JString, required = false,
                                   default = nil)
  if valid_21627943 != nil:
    section.add "X-Amz-Signature", valid_21627943
  var valid_21627944 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627944 = validateParameter(valid_21627944, JString, required = false,
                                   default = nil)
  if valid_21627944 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627944
  var valid_21627945 = header.getOrDefault("X-Amz-Credential")
  valid_21627945 = validateParameter(valid_21627945, JString, required = false,
                                   default = nil)
  if valid_21627945 != nil:
    section.add "X-Amz-Credential", valid_21627945
  result.add "header", section
  ## parameters in `formData` object:
  ##   ClusterVersion: JString
  ##                 : <p>The version filter value. Specify this parameter to show only the available offerings matching the specified version.</p> <p>Default: All versions.</p> <p>Constraints: Must be one of the version returned from <a>DescribeClusterVersions</a>.</p>
  ##   Marker: JString
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeOrderableClusterOptions</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   NodeType: JString
  ##           : The node type filter value. Specify this parameter to show only the available offerings matching the specified node type.
  section = newJObject()
  var valid_21627946 = formData.getOrDefault("ClusterVersion")
  valid_21627946 = validateParameter(valid_21627946, JString, required = false,
                                   default = nil)
  if valid_21627946 != nil:
    section.add "ClusterVersion", valid_21627946
  var valid_21627947 = formData.getOrDefault("Marker")
  valid_21627947 = validateParameter(valid_21627947, JString, required = false,
                                   default = nil)
  if valid_21627947 != nil:
    section.add "Marker", valid_21627947
  var valid_21627948 = formData.getOrDefault("MaxRecords")
  valid_21627948 = validateParameter(valid_21627948, JInt, required = false,
                                   default = nil)
  if valid_21627948 != nil:
    section.add "MaxRecords", valid_21627948
  var valid_21627949 = formData.getOrDefault("NodeType")
  valid_21627949 = validateParameter(valid_21627949, JString, required = false,
                                   default = nil)
  if valid_21627949 != nil:
    section.add "NodeType", valid_21627949
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627950: Call_PostDescribeOrderableClusterOptions_21627934;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns a list of orderable cluster options. Before you create a new cluster you can use this operation to find what options are available, such as the EC2 Availability Zones (AZ) in the specific AWS Region that you can specify, and the node types you can request. The node types differ by available storage, memory, CPU and price. With the cost involved you might want to obtain a list of cluster options in the specific region and specify values when creating a cluster. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.
  ## 
  let valid = call_21627950.validator(path, query, header, formData, body, _)
  let scheme = call_21627950.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627950.makeUrl(scheme.get, call_21627950.host, call_21627950.base,
                               call_21627950.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627950, uri, valid, _)

proc call*(call_21627951: Call_PostDescribeOrderableClusterOptions_21627934;
          ClusterVersion: string = ""; Marker: string = "";
          Action: string = "DescribeOrderableClusterOptions"; MaxRecords: int = 0;
          Version: string = "2012-12-01"; NodeType: string = ""): Recallable =
  ## postDescribeOrderableClusterOptions
  ## Returns a list of orderable cluster options. Before you create a new cluster you can use this operation to find what options are available, such as the EC2 Availability Zones (AZ) in the specific AWS Region that you can specify, and the node types you can request. The node types differ by available storage, memory, CPU and price. With the cost involved you might want to obtain a list of cluster options in the specific region and specify values when creating a cluster. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.
  ##   ClusterVersion: string
  ##                 : <p>The version filter value. Specify this parameter to show only the available offerings matching the specified version.</p> <p>Default: All versions.</p> <p>Constraints: Must be one of the version returned from <a>DescribeClusterVersions</a>.</p>
  ##   Marker: string
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeOrderableClusterOptions</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   Version: string (required)
  ##   NodeType: string
  ##           : The node type filter value. Specify this parameter to show only the available offerings matching the specified node type.
  var query_21627952 = newJObject()
  var formData_21627953 = newJObject()
  add(formData_21627953, "ClusterVersion", newJString(ClusterVersion))
  add(formData_21627953, "Marker", newJString(Marker))
  add(query_21627952, "Action", newJString(Action))
  add(formData_21627953, "MaxRecords", newJInt(MaxRecords))
  add(query_21627952, "Version", newJString(Version))
  add(formData_21627953, "NodeType", newJString(NodeType))
  result = call_21627951.call(nil, query_21627952, nil, formData_21627953, nil)

var postDescribeOrderableClusterOptions* = Call_PostDescribeOrderableClusterOptions_21627934(
    name: "postDescribeOrderableClusterOptions", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com",
    route: "/#Action=DescribeOrderableClusterOptions",
    validator: validate_PostDescribeOrderableClusterOptions_21627935, base: "/",
    makeUrl: url_PostDescribeOrderableClusterOptions_21627936,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeOrderableClusterOptions_21627915 = ref object of OpenApiRestCall_21625418
proc url_GetDescribeOrderableClusterOptions_21627917(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeOrderableClusterOptions_21627916(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Returns a list of orderable cluster options. Before you create a new cluster you can use this operation to find what options are available, such as the EC2 Availability Zones (AZ) in the specific AWS Region that you can specify, and the node types you can request. The node types differ by available storage, memory, CPU and price. With the cost involved you might want to obtain a list of cluster options in the specific region and specify values when creating a cluster. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeOrderableClusterOptions</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   NodeType: JString
  ##           : The node type filter value. Specify this parameter to show only the available offerings matching the specified node type.
  ##   ClusterVersion: JString
  ##                 : <p>The version filter value. Specify this parameter to show only the available offerings matching the specified version.</p> <p>Default: All versions.</p> <p>Constraints: Must be one of the version returned from <a>DescribeClusterVersions</a>.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627918 = query.getOrDefault("MaxRecords")
  valid_21627918 = validateParameter(valid_21627918, JInt, required = false,
                                   default = nil)
  if valid_21627918 != nil:
    section.add "MaxRecords", valid_21627918
  var valid_21627919 = query.getOrDefault("Action")
  valid_21627919 = validateParameter(valid_21627919, JString, required = true, default = newJString(
      "DescribeOrderableClusterOptions"))
  if valid_21627919 != nil:
    section.add "Action", valid_21627919
  var valid_21627920 = query.getOrDefault("Marker")
  valid_21627920 = validateParameter(valid_21627920, JString, required = false,
                                   default = nil)
  if valid_21627920 != nil:
    section.add "Marker", valid_21627920
  var valid_21627921 = query.getOrDefault("NodeType")
  valid_21627921 = validateParameter(valid_21627921, JString, required = false,
                                   default = nil)
  if valid_21627921 != nil:
    section.add "NodeType", valid_21627921
  var valid_21627922 = query.getOrDefault("ClusterVersion")
  valid_21627922 = validateParameter(valid_21627922, JString, required = false,
                                   default = nil)
  if valid_21627922 != nil:
    section.add "ClusterVersion", valid_21627922
  var valid_21627923 = query.getOrDefault("Version")
  valid_21627923 = validateParameter(valid_21627923, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627923 != nil:
    section.add "Version", valid_21627923
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627924 = header.getOrDefault("X-Amz-Date")
  valid_21627924 = validateParameter(valid_21627924, JString, required = false,
                                   default = nil)
  if valid_21627924 != nil:
    section.add "X-Amz-Date", valid_21627924
  var valid_21627925 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627925 = validateParameter(valid_21627925, JString, required = false,
                                   default = nil)
  if valid_21627925 != nil:
    section.add "X-Amz-Security-Token", valid_21627925
  var valid_21627926 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627926 = validateParameter(valid_21627926, JString, required = false,
                                   default = nil)
  if valid_21627926 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627926
  var valid_21627927 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627927 = validateParameter(valid_21627927, JString, required = false,
                                   default = nil)
  if valid_21627927 != nil:
    section.add "X-Amz-Algorithm", valid_21627927
  var valid_21627928 = header.getOrDefault("X-Amz-Signature")
  valid_21627928 = validateParameter(valid_21627928, JString, required = false,
                                   default = nil)
  if valid_21627928 != nil:
    section.add "X-Amz-Signature", valid_21627928
  var valid_21627929 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627929 = validateParameter(valid_21627929, JString, required = false,
                                   default = nil)
  if valid_21627929 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627929
  var valid_21627930 = header.getOrDefault("X-Amz-Credential")
  valid_21627930 = validateParameter(valid_21627930, JString, required = false,
                                   default = nil)
  if valid_21627930 != nil:
    section.add "X-Amz-Credential", valid_21627930
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627931: Call_GetDescribeOrderableClusterOptions_21627915;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns a list of orderable cluster options. Before you create a new cluster you can use this operation to find what options are available, such as the EC2 Availability Zones (AZ) in the specific AWS Region that you can specify, and the node types you can request. The node types differ by available storage, memory, CPU and price. With the cost involved you might want to obtain a list of cluster options in the specific region and specify values when creating a cluster. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.
  ## 
  let valid = call_21627931.validator(path, query, header, formData, body, _)
  let scheme = call_21627931.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627931.makeUrl(scheme.get, call_21627931.host, call_21627931.base,
                               call_21627931.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627931, uri, valid, _)

proc call*(call_21627932: Call_GetDescribeOrderableClusterOptions_21627915;
          MaxRecords: int = 0; Action: string = "DescribeOrderableClusterOptions";
          Marker: string = ""; NodeType: string = ""; ClusterVersion: string = "";
          Version: string = "2012-12-01"): Recallable =
  ## getDescribeOrderableClusterOptions
  ## Returns a list of orderable cluster options. Before you create a new cluster you can use this operation to find what options are available, such as the EC2 Availability Zones (AZ) in the specific AWS Region that you can specify, and the node types you can request. The node types differ by available storage, memory, CPU and price. With the cost involved you might want to obtain a list of cluster options in the specific region and specify values when creating a cluster. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.
  ##   MaxRecords: int
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeOrderableClusterOptions</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   NodeType: string
  ##           : The node type filter value. Specify this parameter to show only the available offerings matching the specified node type.
  ##   ClusterVersion: string
  ##                 : <p>The version filter value. Specify this parameter to show only the available offerings matching the specified version.</p> <p>Default: All versions.</p> <p>Constraints: Must be one of the version returned from <a>DescribeClusterVersions</a>.</p>
  ##   Version: string (required)
  var query_21627933 = newJObject()
  add(query_21627933, "MaxRecords", newJInt(MaxRecords))
  add(query_21627933, "Action", newJString(Action))
  add(query_21627933, "Marker", newJString(Marker))
  add(query_21627933, "NodeType", newJString(NodeType))
  add(query_21627933, "ClusterVersion", newJString(ClusterVersion))
  add(query_21627933, "Version", newJString(Version))
  result = call_21627932.call(nil, query_21627933, nil, nil, nil)

var getDescribeOrderableClusterOptions* = Call_GetDescribeOrderableClusterOptions_21627915(
    name: "getDescribeOrderableClusterOptions", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com",
    route: "/#Action=DescribeOrderableClusterOptions",
    validator: validate_GetDescribeOrderableClusterOptions_21627916, base: "/",
    makeUrl: url_GetDescribeOrderableClusterOptions_21627917,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReservedNodeOfferings_21627972 = ref object of OpenApiRestCall_21625418
proc url_PostDescribeReservedNodeOfferings_21627974(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeReservedNodeOfferings_21627973(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns a list of the available reserved node offerings by Amazon Redshift with their descriptions including the node type, the fixed and recurring costs of reserving the node and duration the node will be reserved for you. These descriptions help you determine which reserve node offering you want to purchase. You then use the unique offering ID in you call to <a>PurchaseReservedNodeOffering</a> to reserve one or more nodes for your Amazon Redshift cluster. </p> <p> For more information about reserved node offerings, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/purchase-reserved-node-instance.html">Purchasing Reserved Nodes</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627975 = query.getOrDefault("Action")
  valid_21627975 = validateParameter(valid_21627975, JString, required = true, default = newJString(
      "DescribeReservedNodeOfferings"))
  if valid_21627975 != nil:
    section.add "Action", valid_21627975
  var valid_21627976 = query.getOrDefault("Version")
  valid_21627976 = validateParameter(valid_21627976, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627976 != nil:
    section.add "Version", valid_21627976
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627977 = header.getOrDefault("X-Amz-Date")
  valid_21627977 = validateParameter(valid_21627977, JString, required = false,
                                   default = nil)
  if valid_21627977 != nil:
    section.add "X-Amz-Date", valid_21627977
  var valid_21627978 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627978 = validateParameter(valid_21627978, JString, required = false,
                                   default = nil)
  if valid_21627978 != nil:
    section.add "X-Amz-Security-Token", valid_21627978
  var valid_21627979 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627979 = validateParameter(valid_21627979, JString, required = false,
                                   default = nil)
  if valid_21627979 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627979
  var valid_21627980 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627980 = validateParameter(valid_21627980, JString, required = false,
                                   default = nil)
  if valid_21627980 != nil:
    section.add "X-Amz-Algorithm", valid_21627980
  var valid_21627981 = header.getOrDefault("X-Amz-Signature")
  valid_21627981 = validateParameter(valid_21627981, JString, required = false,
                                   default = nil)
  if valid_21627981 != nil:
    section.add "X-Amz-Signature", valid_21627981
  var valid_21627982 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627982 = validateParameter(valid_21627982, JString, required = false,
                                   default = nil)
  if valid_21627982 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627982
  var valid_21627983 = header.getOrDefault("X-Amz-Credential")
  valid_21627983 = validateParameter(valid_21627983, JString, required = false,
                                   default = nil)
  if valid_21627983 != nil:
    section.add "X-Amz-Credential", valid_21627983
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReservedNodeOfferingId: JString
  ##                         : The unique identifier for the offering.
  ##   Marker: JString
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeReservedNodeOfferings</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_21627984 = formData.getOrDefault("ReservedNodeOfferingId")
  valid_21627984 = validateParameter(valid_21627984, JString, required = false,
                                   default = nil)
  if valid_21627984 != nil:
    section.add "ReservedNodeOfferingId", valid_21627984
  var valid_21627985 = formData.getOrDefault("Marker")
  valid_21627985 = validateParameter(valid_21627985, JString, required = false,
                                   default = nil)
  if valid_21627985 != nil:
    section.add "Marker", valid_21627985
  var valid_21627986 = formData.getOrDefault("MaxRecords")
  valid_21627986 = validateParameter(valid_21627986, JInt, required = false,
                                   default = nil)
  if valid_21627986 != nil:
    section.add "MaxRecords", valid_21627986
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627987: Call_PostDescribeReservedNodeOfferings_21627972;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns a list of the available reserved node offerings by Amazon Redshift with their descriptions including the node type, the fixed and recurring costs of reserving the node and duration the node will be reserved for you. These descriptions help you determine which reserve node offering you want to purchase. You then use the unique offering ID in you call to <a>PurchaseReservedNodeOffering</a> to reserve one or more nodes for your Amazon Redshift cluster. </p> <p> For more information about reserved node offerings, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/purchase-reserved-node-instance.html">Purchasing Reserved Nodes</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  let valid = call_21627987.validator(path, query, header, formData, body, _)
  let scheme = call_21627987.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627987.makeUrl(scheme.get, call_21627987.host, call_21627987.base,
                               call_21627987.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627987, uri, valid, _)

proc call*(call_21627988: Call_PostDescribeReservedNodeOfferings_21627972;
          ReservedNodeOfferingId: string = ""; Marker: string = "";
          Action: string = "DescribeReservedNodeOfferings"; MaxRecords: int = 0;
          Version: string = "2012-12-01"): Recallable =
  ## postDescribeReservedNodeOfferings
  ## <p>Returns a list of the available reserved node offerings by Amazon Redshift with their descriptions including the node type, the fixed and recurring costs of reserving the node and duration the node will be reserved for you. These descriptions help you determine which reserve node offering you want to purchase. You then use the unique offering ID in you call to <a>PurchaseReservedNodeOffering</a> to reserve one or more nodes for your Amazon Redshift cluster. </p> <p> For more information about reserved node offerings, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/purchase-reserved-node-instance.html">Purchasing Reserved Nodes</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ##   ReservedNodeOfferingId: string
  ##                         : The unique identifier for the offering.
  ##   Marker: string
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeReservedNodeOfferings</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_21627989 = newJObject()
  var formData_21627990 = newJObject()
  add(formData_21627990, "ReservedNodeOfferingId",
      newJString(ReservedNodeOfferingId))
  add(formData_21627990, "Marker", newJString(Marker))
  add(query_21627989, "Action", newJString(Action))
  add(formData_21627990, "MaxRecords", newJInt(MaxRecords))
  add(query_21627989, "Version", newJString(Version))
  result = call_21627988.call(nil, query_21627989, nil, formData_21627990, nil)

var postDescribeReservedNodeOfferings* = Call_PostDescribeReservedNodeOfferings_21627972(
    name: "postDescribeReservedNodeOfferings", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com",
    route: "/#Action=DescribeReservedNodeOfferings",
    validator: validate_PostDescribeReservedNodeOfferings_21627973, base: "/",
    makeUrl: url_PostDescribeReservedNodeOfferings_21627974,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReservedNodeOfferings_21627954 = ref object of OpenApiRestCall_21625418
proc url_GetDescribeReservedNodeOfferings_21627956(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeReservedNodeOfferings_21627955(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns a list of the available reserved node offerings by Amazon Redshift with their descriptions including the node type, the fixed and recurring costs of reserving the node and duration the node will be reserved for you. These descriptions help you determine which reserve node offering you want to purchase. You then use the unique offering ID in you call to <a>PurchaseReservedNodeOffering</a> to reserve one or more nodes for your Amazon Redshift cluster. </p> <p> For more information about reserved node offerings, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/purchase-reserved-node-instance.html">Purchasing Reserved Nodes</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   ReservedNodeOfferingId: JString
  ##                         : The unique identifier for the offering.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeReservedNodeOfferings</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627957 = query.getOrDefault("MaxRecords")
  valid_21627957 = validateParameter(valid_21627957, JInt, required = false,
                                   default = nil)
  if valid_21627957 != nil:
    section.add "MaxRecords", valid_21627957
  var valid_21627958 = query.getOrDefault("ReservedNodeOfferingId")
  valid_21627958 = validateParameter(valid_21627958, JString, required = false,
                                   default = nil)
  if valid_21627958 != nil:
    section.add "ReservedNodeOfferingId", valid_21627958
  var valid_21627959 = query.getOrDefault("Action")
  valid_21627959 = validateParameter(valid_21627959, JString, required = true, default = newJString(
      "DescribeReservedNodeOfferings"))
  if valid_21627959 != nil:
    section.add "Action", valid_21627959
  var valid_21627960 = query.getOrDefault("Marker")
  valid_21627960 = validateParameter(valid_21627960, JString, required = false,
                                   default = nil)
  if valid_21627960 != nil:
    section.add "Marker", valid_21627960
  var valid_21627961 = query.getOrDefault("Version")
  valid_21627961 = validateParameter(valid_21627961, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627961 != nil:
    section.add "Version", valid_21627961
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627962 = header.getOrDefault("X-Amz-Date")
  valid_21627962 = validateParameter(valid_21627962, JString, required = false,
                                   default = nil)
  if valid_21627962 != nil:
    section.add "X-Amz-Date", valid_21627962
  var valid_21627963 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627963 = validateParameter(valid_21627963, JString, required = false,
                                   default = nil)
  if valid_21627963 != nil:
    section.add "X-Amz-Security-Token", valid_21627963
  var valid_21627964 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627964 = validateParameter(valid_21627964, JString, required = false,
                                   default = nil)
  if valid_21627964 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627964
  var valid_21627965 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627965 = validateParameter(valid_21627965, JString, required = false,
                                   default = nil)
  if valid_21627965 != nil:
    section.add "X-Amz-Algorithm", valid_21627965
  var valid_21627966 = header.getOrDefault("X-Amz-Signature")
  valid_21627966 = validateParameter(valid_21627966, JString, required = false,
                                   default = nil)
  if valid_21627966 != nil:
    section.add "X-Amz-Signature", valid_21627966
  var valid_21627967 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627967 = validateParameter(valid_21627967, JString, required = false,
                                   default = nil)
  if valid_21627967 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627967
  var valid_21627968 = header.getOrDefault("X-Amz-Credential")
  valid_21627968 = validateParameter(valid_21627968, JString, required = false,
                                   default = nil)
  if valid_21627968 != nil:
    section.add "X-Amz-Credential", valid_21627968
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627969: Call_GetDescribeReservedNodeOfferings_21627954;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns a list of the available reserved node offerings by Amazon Redshift with their descriptions including the node type, the fixed and recurring costs of reserving the node and duration the node will be reserved for you. These descriptions help you determine which reserve node offering you want to purchase. You then use the unique offering ID in you call to <a>PurchaseReservedNodeOffering</a> to reserve one or more nodes for your Amazon Redshift cluster. </p> <p> For more information about reserved node offerings, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/purchase-reserved-node-instance.html">Purchasing Reserved Nodes</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  let valid = call_21627969.validator(path, query, header, formData, body, _)
  let scheme = call_21627969.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627969.makeUrl(scheme.get, call_21627969.host, call_21627969.base,
                               call_21627969.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627969, uri, valid, _)

proc call*(call_21627970: Call_GetDescribeReservedNodeOfferings_21627954;
          MaxRecords: int = 0; ReservedNodeOfferingId: string = "";
          Action: string = "DescribeReservedNodeOfferings"; Marker: string = "";
          Version: string = "2012-12-01"): Recallable =
  ## getDescribeReservedNodeOfferings
  ## <p>Returns a list of the available reserved node offerings by Amazon Redshift with their descriptions including the node type, the fixed and recurring costs of reserving the node and duration the node will be reserved for you. These descriptions help you determine which reserve node offering you want to purchase. You then use the unique offering ID in you call to <a>PurchaseReservedNodeOffering</a> to reserve one or more nodes for your Amazon Redshift cluster. </p> <p> For more information about reserved node offerings, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/purchase-reserved-node-instance.html">Purchasing Reserved Nodes</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   ReservedNodeOfferingId: string
  ##                         : The unique identifier for the offering.
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeReservedNodeOfferings</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   Version: string (required)
  var query_21627971 = newJObject()
  add(query_21627971, "MaxRecords", newJInt(MaxRecords))
  add(query_21627971, "ReservedNodeOfferingId", newJString(ReservedNodeOfferingId))
  add(query_21627971, "Action", newJString(Action))
  add(query_21627971, "Marker", newJString(Marker))
  add(query_21627971, "Version", newJString(Version))
  result = call_21627970.call(nil, query_21627971, nil, nil, nil)

var getDescribeReservedNodeOfferings* = Call_GetDescribeReservedNodeOfferings_21627954(
    name: "getDescribeReservedNodeOfferings", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com",
    route: "/#Action=DescribeReservedNodeOfferings",
    validator: validate_GetDescribeReservedNodeOfferings_21627955, base: "/",
    makeUrl: url_GetDescribeReservedNodeOfferings_21627956,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReservedNodes_21628009 = ref object of OpenApiRestCall_21625418
proc url_PostDescribeReservedNodes_21628011(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeReservedNodes_21628010(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Returns the descriptions of the reserved nodes.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628012 = query.getOrDefault("Action")
  valid_21628012 = validateParameter(valid_21628012, JString, required = true, default = newJString(
      "DescribeReservedNodes"))
  if valid_21628012 != nil:
    section.add "Action", valid_21628012
  var valid_21628013 = query.getOrDefault("Version")
  valid_21628013 = validateParameter(valid_21628013, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628013 != nil:
    section.add "Version", valid_21628013
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628014 = header.getOrDefault("X-Amz-Date")
  valid_21628014 = validateParameter(valid_21628014, JString, required = false,
                                   default = nil)
  if valid_21628014 != nil:
    section.add "X-Amz-Date", valid_21628014
  var valid_21628015 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628015 = validateParameter(valid_21628015, JString, required = false,
                                   default = nil)
  if valid_21628015 != nil:
    section.add "X-Amz-Security-Token", valid_21628015
  var valid_21628016 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628016 = validateParameter(valid_21628016, JString, required = false,
                                   default = nil)
  if valid_21628016 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628016
  var valid_21628017 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628017 = validateParameter(valid_21628017, JString, required = false,
                                   default = nil)
  if valid_21628017 != nil:
    section.add "X-Amz-Algorithm", valid_21628017
  var valid_21628018 = header.getOrDefault("X-Amz-Signature")
  valid_21628018 = validateParameter(valid_21628018, JString, required = false,
                                   default = nil)
  if valid_21628018 != nil:
    section.add "X-Amz-Signature", valid_21628018
  var valid_21628019 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628019 = validateParameter(valid_21628019, JString, required = false,
                                   default = nil)
  if valid_21628019 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628019
  var valid_21628020 = header.getOrDefault("X-Amz-Credential")
  valid_21628020 = validateParameter(valid_21628020, JString, required = false,
                                   default = nil)
  if valid_21628020 != nil:
    section.add "X-Amz-Credential", valid_21628020
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReservedNodeId: JString
  ##                 : Identifier for the node reservation.
  ##   Marker: JString
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeReservedNodes</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_21628021 = formData.getOrDefault("ReservedNodeId")
  valid_21628021 = validateParameter(valid_21628021, JString, required = false,
                                   default = nil)
  if valid_21628021 != nil:
    section.add "ReservedNodeId", valid_21628021
  var valid_21628022 = formData.getOrDefault("Marker")
  valid_21628022 = validateParameter(valid_21628022, JString, required = false,
                                   default = nil)
  if valid_21628022 != nil:
    section.add "Marker", valid_21628022
  var valid_21628023 = formData.getOrDefault("MaxRecords")
  valid_21628023 = validateParameter(valid_21628023, JInt, required = false,
                                   default = nil)
  if valid_21628023 != nil:
    section.add "MaxRecords", valid_21628023
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628024: Call_PostDescribeReservedNodes_21628009;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns the descriptions of the reserved nodes.
  ## 
  let valid = call_21628024.validator(path, query, header, formData, body, _)
  let scheme = call_21628024.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628024.makeUrl(scheme.get, call_21628024.host, call_21628024.base,
                               call_21628024.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628024, uri, valid, _)

proc call*(call_21628025: Call_PostDescribeReservedNodes_21628009;
          ReservedNodeId: string = ""; Marker: string = "";
          Action: string = "DescribeReservedNodes"; MaxRecords: int = 0;
          Version: string = "2012-12-01"): Recallable =
  ## postDescribeReservedNodes
  ## Returns the descriptions of the reserved nodes.
  ##   ReservedNodeId: string
  ##                 : Identifier for the node reservation.
  ##   Marker: string
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeReservedNodes</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_21628026 = newJObject()
  var formData_21628027 = newJObject()
  add(formData_21628027, "ReservedNodeId", newJString(ReservedNodeId))
  add(formData_21628027, "Marker", newJString(Marker))
  add(query_21628026, "Action", newJString(Action))
  add(formData_21628027, "MaxRecords", newJInt(MaxRecords))
  add(query_21628026, "Version", newJString(Version))
  result = call_21628025.call(nil, query_21628026, nil, formData_21628027, nil)

var postDescribeReservedNodes* = Call_PostDescribeReservedNodes_21628009(
    name: "postDescribeReservedNodes", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=DescribeReservedNodes",
    validator: validate_PostDescribeReservedNodes_21628010, base: "/",
    makeUrl: url_PostDescribeReservedNodes_21628011,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReservedNodes_21627991 = ref object of OpenApiRestCall_21625418
proc url_GetDescribeReservedNodes_21627993(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeReservedNodes_21627992(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Returns the descriptions of the reserved nodes.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeReservedNodes</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   Version: JString (required)
  ##   ReservedNodeId: JString
  ##                 : Identifier for the node reservation.
  section = newJObject()
  var valid_21627994 = query.getOrDefault("MaxRecords")
  valid_21627994 = validateParameter(valid_21627994, JInt, required = false,
                                   default = nil)
  if valid_21627994 != nil:
    section.add "MaxRecords", valid_21627994
  var valid_21627995 = query.getOrDefault("Action")
  valid_21627995 = validateParameter(valid_21627995, JString, required = true, default = newJString(
      "DescribeReservedNodes"))
  if valid_21627995 != nil:
    section.add "Action", valid_21627995
  var valid_21627996 = query.getOrDefault("Marker")
  valid_21627996 = validateParameter(valid_21627996, JString, required = false,
                                   default = nil)
  if valid_21627996 != nil:
    section.add "Marker", valid_21627996
  var valid_21627997 = query.getOrDefault("Version")
  valid_21627997 = validateParameter(valid_21627997, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21627997 != nil:
    section.add "Version", valid_21627997
  var valid_21627998 = query.getOrDefault("ReservedNodeId")
  valid_21627998 = validateParameter(valid_21627998, JString, required = false,
                                   default = nil)
  if valid_21627998 != nil:
    section.add "ReservedNodeId", valid_21627998
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627999 = header.getOrDefault("X-Amz-Date")
  valid_21627999 = validateParameter(valid_21627999, JString, required = false,
                                   default = nil)
  if valid_21627999 != nil:
    section.add "X-Amz-Date", valid_21627999
  var valid_21628000 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628000 = validateParameter(valid_21628000, JString, required = false,
                                   default = nil)
  if valid_21628000 != nil:
    section.add "X-Amz-Security-Token", valid_21628000
  var valid_21628001 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628001 = validateParameter(valid_21628001, JString, required = false,
                                   default = nil)
  if valid_21628001 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628001
  var valid_21628002 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628002 = validateParameter(valid_21628002, JString, required = false,
                                   default = nil)
  if valid_21628002 != nil:
    section.add "X-Amz-Algorithm", valid_21628002
  var valid_21628003 = header.getOrDefault("X-Amz-Signature")
  valid_21628003 = validateParameter(valid_21628003, JString, required = false,
                                   default = nil)
  if valid_21628003 != nil:
    section.add "X-Amz-Signature", valid_21628003
  var valid_21628004 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628004 = validateParameter(valid_21628004, JString, required = false,
                                   default = nil)
  if valid_21628004 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628004
  var valid_21628005 = header.getOrDefault("X-Amz-Credential")
  valid_21628005 = validateParameter(valid_21628005, JString, required = false,
                                   default = nil)
  if valid_21628005 != nil:
    section.add "X-Amz-Credential", valid_21628005
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628006: Call_GetDescribeReservedNodes_21627991;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns the descriptions of the reserved nodes.
  ## 
  let valid = call_21628006.validator(path, query, header, formData, body, _)
  let scheme = call_21628006.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628006.makeUrl(scheme.get, call_21628006.host, call_21628006.base,
                               call_21628006.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628006, uri, valid, _)

proc call*(call_21628007: Call_GetDescribeReservedNodes_21627991;
          MaxRecords: int = 0; Action: string = "DescribeReservedNodes";
          Marker: string = ""; Version: string = "2012-12-01";
          ReservedNodeId: string = ""): Recallable =
  ## getDescribeReservedNodes
  ## Returns the descriptions of the reserved nodes.
  ##   MaxRecords: int
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeReservedNodes</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   Version: string (required)
  ##   ReservedNodeId: string
  ##                 : Identifier for the node reservation.
  var query_21628008 = newJObject()
  add(query_21628008, "MaxRecords", newJInt(MaxRecords))
  add(query_21628008, "Action", newJString(Action))
  add(query_21628008, "Marker", newJString(Marker))
  add(query_21628008, "Version", newJString(Version))
  add(query_21628008, "ReservedNodeId", newJString(ReservedNodeId))
  result = call_21628007.call(nil, query_21628008, nil, nil, nil)

var getDescribeReservedNodes* = Call_GetDescribeReservedNodes_21627991(
    name: "getDescribeReservedNodes", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=DescribeReservedNodes",
    validator: validate_GetDescribeReservedNodes_21627992, base: "/",
    makeUrl: url_GetDescribeReservedNodes_21627993,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeResize_21628044 = ref object of OpenApiRestCall_21625418
proc url_PostDescribeResize_21628046(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeResize_21628045(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Returns information about the last resize operation for the specified cluster. If no resize operation has ever been initiated for the specified cluster, a <code>HTTP 404</code> error is returned. If a resize operation was initiated and completed, the status of the resize remains as <code>SUCCEEDED</code> until the next resize. </p> <p>A resize operation can be requested using <a>ModifyCluster</a> and specifying a different number or type of nodes for the cluster. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628047 = query.getOrDefault("Action")
  valid_21628047 = validateParameter(valid_21628047, JString, required = true,
                                   default = newJString("DescribeResize"))
  if valid_21628047 != nil:
    section.add "Action", valid_21628047
  var valid_21628048 = query.getOrDefault("Version")
  valid_21628048 = validateParameter(valid_21628048, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628048 != nil:
    section.add "Version", valid_21628048
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628049 = header.getOrDefault("X-Amz-Date")
  valid_21628049 = validateParameter(valid_21628049, JString, required = false,
                                   default = nil)
  if valid_21628049 != nil:
    section.add "X-Amz-Date", valid_21628049
  var valid_21628050 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628050 = validateParameter(valid_21628050, JString, required = false,
                                   default = nil)
  if valid_21628050 != nil:
    section.add "X-Amz-Security-Token", valid_21628050
  var valid_21628051 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628051 = validateParameter(valid_21628051, JString, required = false,
                                   default = nil)
  if valid_21628051 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628051
  var valid_21628052 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628052 = validateParameter(valid_21628052, JString, required = false,
                                   default = nil)
  if valid_21628052 != nil:
    section.add "X-Amz-Algorithm", valid_21628052
  var valid_21628053 = header.getOrDefault("X-Amz-Signature")
  valid_21628053 = validateParameter(valid_21628053, JString, required = false,
                                   default = nil)
  if valid_21628053 != nil:
    section.add "X-Amz-Signature", valid_21628053
  var valid_21628054 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628054 = validateParameter(valid_21628054, JString, required = false,
                                   default = nil)
  if valid_21628054 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628054
  var valid_21628055 = header.getOrDefault("X-Amz-Credential")
  valid_21628055 = validateParameter(valid_21628055, JString, required = false,
                                   default = nil)
  if valid_21628055 != nil:
    section.add "X-Amz-Credential", valid_21628055
  result.add "header", section
  ## parameters in `formData` object:
  ##   ClusterIdentifier: JString (required)
  ##                    : <p>The unique identifier of a cluster whose resize progress you are requesting. This parameter is case-sensitive.</p> <p>By default, resize operations for all clusters defined for an AWS account are returned.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ClusterIdentifier` field"
  var valid_21628056 = formData.getOrDefault("ClusterIdentifier")
  valid_21628056 = validateParameter(valid_21628056, JString, required = true,
                                   default = nil)
  if valid_21628056 != nil:
    section.add "ClusterIdentifier", valid_21628056
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628057: Call_PostDescribeResize_21628044; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns information about the last resize operation for the specified cluster. If no resize operation has ever been initiated for the specified cluster, a <code>HTTP 404</code> error is returned. If a resize operation was initiated and completed, the status of the resize remains as <code>SUCCEEDED</code> until the next resize. </p> <p>A resize operation can be requested using <a>ModifyCluster</a> and specifying a different number or type of nodes for the cluster. </p>
  ## 
  let valid = call_21628057.validator(path, query, header, formData, body, _)
  let scheme = call_21628057.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628057.makeUrl(scheme.get, call_21628057.host, call_21628057.base,
                               call_21628057.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628057, uri, valid, _)

proc call*(call_21628058: Call_PostDescribeResize_21628044;
          ClusterIdentifier: string; Action: string = "DescribeResize";
          Version: string = "2012-12-01"): Recallable =
  ## postDescribeResize
  ## <p>Returns information about the last resize operation for the specified cluster. If no resize operation has ever been initiated for the specified cluster, a <code>HTTP 404</code> error is returned. If a resize operation was initiated and completed, the status of the resize remains as <code>SUCCEEDED</code> until the next resize. </p> <p>A resize operation can be requested using <a>ModifyCluster</a> and specifying a different number or type of nodes for the cluster. </p>
  ##   Action: string (required)
  ##   ClusterIdentifier: string (required)
  ##                    : <p>The unique identifier of a cluster whose resize progress you are requesting. This parameter is case-sensitive.</p> <p>By default, resize operations for all clusters defined for an AWS account are returned.</p>
  ##   Version: string (required)
  var query_21628059 = newJObject()
  var formData_21628060 = newJObject()
  add(query_21628059, "Action", newJString(Action))
  add(formData_21628060, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(query_21628059, "Version", newJString(Version))
  result = call_21628058.call(nil, query_21628059, nil, formData_21628060, nil)

var postDescribeResize* = Call_PostDescribeResize_21628044(
    name: "postDescribeResize", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=DescribeResize",
    validator: validate_PostDescribeResize_21628045, base: "/",
    makeUrl: url_PostDescribeResize_21628046, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeResize_21628028 = ref object of OpenApiRestCall_21625418
proc url_GetDescribeResize_21628030(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeResize_21628029(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Returns information about the last resize operation for the specified cluster. If no resize operation has ever been initiated for the specified cluster, a <code>HTTP 404</code> error is returned. If a resize operation was initiated and completed, the status of the resize remains as <code>SUCCEEDED</code> until the next resize. </p> <p>A resize operation can be requested using <a>ModifyCluster</a> and specifying a different number or type of nodes for the cluster. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ClusterIdentifier: JString (required)
  ##                    : <p>The unique identifier of a cluster whose resize progress you are requesting. This parameter is case-sensitive.</p> <p>By default, resize operations for all clusters defined for an AWS account are returned.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628031 = query.getOrDefault("Action")
  valid_21628031 = validateParameter(valid_21628031, JString, required = true,
                                   default = newJString("DescribeResize"))
  if valid_21628031 != nil:
    section.add "Action", valid_21628031
  var valid_21628032 = query.getOrDefault("ClusterIdentifier")
  valid_21628032 = validateParameter(valid_21628032, JString, required = true,
                                   default = nil)
  if valid_21628032 != nil:
    section.add "ClusterIdentifier", valid_21628032
  var valid_21628033 = query.getOrDefault("Version")
  valid_21628033 = validateParameter(valid_21628033, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628033 != nil:
    section.add "Version", valid_21628033
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628034 = header.getOrDefault("X-Amz-Date")
  valid_21628034 = validateParameter(valid_21628034, JString, required = false,
                                   default = nil)
  if valid_21628034 != nil:
    section.add "X-Amz-Date", valid_21628034
  var valid_21628035 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628035 = validateParameter(valid_21628035, JString, required = false,
                                   default = nil)
  if valid_21628035 != nil:
    section.add "X-Amz-Security-Token", valid_21628035
  var valid_21628036 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628036 = validateParameter(valid_21628036, JString, required = false,
                                   default = nil)
  if valid_21628036 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628036
  var valid_21628037 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628037 = validateParameter(valid_21628037, JString, required = false,
                                   default = nil)
  if valid_21628037 != nil:
    section.add "X-Amz-Algorithm", valid_21628037
  var valid_21628038 = header.getOrDefault("X-Amz-Signature")
  valid_21628038 = validateParameter(valid_21628038, JString, required = false,
                                   default = nil)
  if valid_21628038 != nil:
    section.add "X-Amz-Signature", valid_21628038
  var valid_21628039 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628039 = validateParameter(valid_21628039, JString, required = false,
                                   default = nil)
  if valid_21628039 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628039
  var valid_21628040 = header.getOrDefault("X-Amz-Credential")
  valid_21628040 = validateParameter(valid_21628040, JString, required = false,
                                   default = nil)
  if valid_21628040 != nil:
    section.add "X-Amz-Credential", valid_21628040
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628041: Call_GetDescribeResize_21628028; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns information about the last resize operation for the specified cluster. If no resize operation has ever been initiated for the specified cluster, a <code>HTTP 404</code> error is returned. If a resize operation was initiated and completed, the status of the resize remains as <code>SUCCEEDED</code> until the next resize. </p> <p>A resize operation can be requested using <a>ModifyCluster</a> and specifying a different number or type of nodes for the cluster. </p>
  ## 
  let valid = call_21628041.validator(path, query, header, formData, body, _)
  let scheme = call_21628041.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628041.makeUrl(scheme.get, call_21628041.host, call_21628041.base,
                               call_21628041.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628041, uri, valid, _)

proc call*(call_21628042: Call_GetDescribeResize_21628028;
          ClusterIdentifier: string; Action: string = "DescribeResize";
          Version: string = "2012-12-01"): Recallable =
  ## getDescribeResize
  ## <p>Returns information about the last resize operation for the specified cluster. If no resize operation has ever been initiated for the specified cluster, a <code>HTTP 404</code> error is returned. If a resize operation was initiated and completed, the status of the resize remains as <code>SUCCEEDED</code> until the next resize. </p> <p>A resize operation can be requested using <a>ModifyCluster</a> and specifying a different number or type of nodes for the cluster. </p>
  ##   Action: string (required)
  ##   ClusterIdentifier: string (required)
  ##                    : <p>The unique identifier of a cluster whose resize progress you are requesting. This parameter is case-sensitive.</p> <p>By default, resize operations for all clusters defined for an AWS account are returned.</p>
  ##   Version: string (required)
  var query_21628043 = newJObject()
  add(query_21628043, "Action", newJString(Action))
  add(query_21628043, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(query_21628043, "Version", newJString(Version))
  result = call_21628042.call(nil, query_21628043, nil, nil, nil)

var getDescribeResize* = Call_GetDescribeResize_21628028(name: "getDescribeResize",
    meth: HttpMethod.HttpGet, host: "redshift.amazonaws.com",
    route: "/#Action=DescribeResize", validator: validate_GetDescribeResize_21628029,
    base: "/", makeUrl: url_GetDescribeResize_21628030,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeScheduledActions_21628084 = ref object of OpenApiRestCall_21625418
proc url_PostDescribeScheduledActions_21628086(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeScheduledActions_21628085(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Describes properties of scheduled actions. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628087 = query.getOrDefault("Action")
  valid_21628087 = validateParameter(valid_21628087, JString, required = true, default = newJString(
      "DescribeScheduledActions"))
  if valid_21628087 != nil:
    section.add "Action", valid_21628087
  var valid_21628088 = query.getOrDefault("Version")
  valid_21628088 = validateParameter(valid_21628088, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628088 != nil:
    section.add "Version", valid_21628088
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628089 = header.getOrDefault("X-Amz-Date")
  valid_21628089 = validateParameter(valid_21628089, JString, required = false,
                                   default = nil)
  if valid_21628089 != nil:
    section.add "X-Amz-Date", valid_21628089
  var valid_21628090 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628090 = validateParameter(valid_21628090, JString, required = false,
                                   default = nil)
  if valid_21628090 != nil:
    section.add "X-Amz-Security-Token", valid_21628090
  var valid_21628091 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628091 = validateParameter(valid_21628091, JString, required = false,
                                   default = nil)
  if valid_21628091 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628091
  var valid_21628092 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628092 = validateParameter(valid_21628092, JString, required = false,
                                   default = nil)
  if valid_21628092 != nil:
    section.add "X-Amz-Algorithm", valid_21628092
  var valid_21628093 = header.getOrDefault("X-Amz-Signature")
  valid_21628093 = validateParameter(valid_21628093, JString, required = false,
                                   default = nil)
  if valid_21628093 != nil:
    section.add "X-Amz-Signature", valid_21628093
  var valid_21628094 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628094 = validateParameter(valid_21628094, JString, required = false,
                                   default = nil)
  if valid_21628094 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628094
  var valid_21628095 = header.getOrDefault("X-Amz-Credential")
  valid_21628095 = validateParameter(valid_21628095, JString, required = false,
                                   default = nil)
  if valid_21628095 != nil:
    section.add "X-Amz-Credential", valid_21628095
  result.add "header", section
  ## parameters in `formData` object:
  ##   Active: JBool
  ##         : If true, retrieve only active scheduled actions. If false, retrieve only disabled scheduled actions. 
  ##   Marker: JString
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeScheduledActions</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   StartTime: JString
  ##            : The start time in UTC of the scheduled actions to retrieve. Only active scheduled actions that have invocations after this time are retrieved.
  ##   ScheduledActionName: JString
  ##                      : The name of the scheduled action to retrieve. 
  ##   Filters: JArray
  ##          : List of scheduled action filters. 
  ##   EndTime: JString
  ##          : The end time in UTC of the scheduled action to retrieve. Only active scheduled actions that have invocations before this time are retrieved.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   TargetActionType: JString
  ##                   : The type of the scheduled actions to retrieve. 
  section = newJObject()
  var valid_21628096 = formData.getOrDefault("Active")
  valid_21628096 = validateParameter(valid_21628096, JBool, required = false,
                                   default = nil)
  if valid_21628096 != nil:
    section.add "Active", valid_21628096
  var valid_21628097 = formData.getOrDefault("Marker")
  valid_21628097 = validateParameter(valid_21628097, JString, required = false,
                                   default = nil)
  if valid_21628097 != nil:
    section.add "Marker", valid_21628097
  var valid_21628098 = formData.getOrDefault("StartTime")
  valid_21628098 = validateParameter(valid_21628098, JString, required = false,
                                   default = nil)
  if valid_21628098 != nil:
    section.add "StartTime", valid_21628098
  var valid_21628099 = formData.getOrDefault("ScheduledActionName")
  valid_21628099 = validateParameter(valid_21628099, JString, required = false,
                                   default = nil)
  if valid_21628099 != nil:
    section.add "ScheduledActionName", valid_21628099
  var valid_21628100 = formData.getOrDefault("Filters")
  valid_21628100 = validateParameter(valid_21628100, JArray, required = false,
                                   default = nil)
  if valid_21628100 != nil:
    section.add "Filters", valid_21628100
  var valid_21628101 = formData.getOrDefault("EndTime")
  valid_21628101 = validateParameter(valid_21628101, JString, required = false,
                                   default = nil)
  if valid_21628101 != nil:
    section.add "EndTime", valid_21628101
  var valid_21628102 = formData.getOrDefault("MaxRecords")
  valid_21628102 = validateParameter(valid_21628102, JInt, required = false,
                                   default = nil)
  if valid_21628102 != nil:
    section.add "MaxRecords", valid_21628102
  var valid_21628103 = formData.getOrDefault("TargetActionType")
  valid_21628103 = validateParameter(valid_21628103, JString, required = false,
                                   default = newJString("ResizeCluster"))
  if valid_21628103 != nil:
    section.add "TargetActionType", valid_21628103
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628104: Call_PostDescribeScheduledActions_21628084;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Describes properties of scheduled actions. 
  ## 
  let valid = call_21628104.validator(path, query, header, formData, body, _)
  let scheme = call_21628104.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628104.makeUrl(scheme.get, call_21628104.host, call_21628104.base,
                               call_21628104.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628104, uri, valid, _)

proc call*(call_21628105: Call_PostDescribeScheduledActions_21628084;
          Active: bool = false; Marker: string = ""; StartTime: string = "";
          Action: string = "DescribeScheduledActions";
          ScheduledActionName: string = ""; Filters: JsonNode = nil;
          EndTime: string = ""; MaxRecords: int = 0; Version: string = "2012-12-01";
          TargetActionType: string = "ResizeCluster"): Recallable =
  ## postDescribeScheduledActions
  ## Describes properties of scheduled actions. 
  ##   Active: bool
  ##         : If true, retrieve only active scheduled actions. If false, retrieve only disabled scheduled actions. 
  ##   Marker: string
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeScheduledActions</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   StartTime: string
  ##            : The start time in UTC of the scheduled actions to retrieve. Only active scheduled actions that have invocations after this time are retrieved.
  ##   Action: string (required)
  ##   ScheduledActionName: string
  ##                      : The name of the scheduled action to retrieve. 
  ##   Filters: JArray
  ##          : List of scheduled action filters. 
  ##   EndTime: string
  ##          : The end time in UTC of the scheduled action to retrieve. Only active scheduled actions that have invocations before this time are retrieved.
  ##   MaxRecords: int
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   Version: string (required)
  ##   TargetActionType: string
  ##                   : The type of the scheduled actions to retrieve. 
  var query_21628106 = newJObject()
  var formData_21628107 = newJObject()
  add(formData_21628107, "Active", newJBool(Active))
  add(formData_21628107, "Marker", newJString(Marker))
  add(formData_21628107, "StartTime", newJString(StartTime))
  add(query_21628106, "Action", newJString(Action))
  add(formData_21628107, "ScheduledActionName", newJString(ScheduledActionName))
  if Filters != nil:
    formData_21628107.add "Filters", Filters
  add(formData_21628107, "EndTime", newJString(EndTime))
  add(formData_21628107, "MaxRecords", newJInt(MaxRecords))
  add(query_21628106, "Version", newJString(Version))
  add(formData_21628107, "TargetActionType", newJString(TargetActionType))
  result = call_21628105.call(nil, query_21628106, nil, formData_21628107, nil)

var postDescribeScheduledActions* = Call_PostDescribeScheduledActions_21628084(
    name: "postDescribeScheduledActions", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=DescribeScheduledActions",
    validator: validate_PostDescribeScheduledActions_21628085, base: "/",
    makeUrl: url_PostDescribeScheduledActions_21628086,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeScheduledActions_21628061 = ref object of OpenApiRestCall_21625418
proc url_GetDescribeScheduledActions_21628063(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeScheduledActions_21628062(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Describes properties of scheduled actions. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TargetActionType: JString
  ##                   : The type of the scheduled actions to retrieve. 
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   ScheduledActionName: JString
  ##                      : The name of the scheduled action to retrieve. 
  ##   StartTime: JString
  ##            : The start time in UTC of the scheduled actions to retrieve. Only active scheduled actions that have invocations after this time are retrieved.
  ##   Filters: JArray
  ##          : List of scheduled action filters. 
  ##   Action: JString (required)
  ##   Active: JBool
  ##         : If true, retrieve only active scheduled actions. If false, retrieve only disabled scheduled actions. 
  ##   Marker: JString
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeScheduledActions</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   EndTime: JString
  ##          : The end time in UTC of the scheduled action to retrieve. Only active scheduled actions that have invocations before this time are retrieved.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628064 = query.getOrDefault("TargetActionType")
  valid_21628064 = validateParameter(valid_21628064, JString, required = false,
                                   default = newJString("ResizeCluster"))
  if valid_21628064 != nil:
    section.add "TargetActionType", valid_21628064
  var valid_21628065 = query.getOrDefault("MaxRecords")
  valid_21628065 = validateParameter(valid_21628065, JInt, required = false,
                                   default = nil)
  if valid_21628065 != nil:
    section.add "MaxRecords", valid_21628065
  var valid_21628066 = query.getOrDefault("ScheduledActionName")
  valid_21628066 = validateParameter(valid_21628066, JString, required = false,
                                   default = nil)
  if valid_21628066 != nil:
    section.add "ScheduledActionName", valid_21628066
  var valid_21628067 = query.getOrDefault("StartTime")
  valid_21628067 = validateParameter(valid_21628067, JString, required = false,
                                   default = nil)
  if valid_21628067 != nil:
    section.add "StartTime", valid_21628067
  var valid_21628068 = query.getOrDefault("Filters")
  valid_21628068 = validateParameter(valid_21628068, JArray, required = false,
                                   default = nil)
  if valid_21628068 != nil:
    section.add "Filters", valid_21628068
  var valid_21628069 = query.getOrDefault("Action")
  valid_21628069 = validateParameter(valid_21628069, JString, required = true, default = newJString(
      "DescribeScheduledActions"))
  if valid_21628069 != nil:
    section.add "Action", valid_21628069
  var valid_21628070 = query.getOrDefault("Active")
  valid_21628070 = validateParameter(valid_21628070, JBool, required = false,
                                   default = nil)
  if valid_21628070 != nil:
    section.add "Active", valid_21628070
  var valid_21628071 = query.getOrDefault("Marker")
  valid_21628071 = validateParameter(valid_21628071, JString, required = false,
                                   default = nil)
  if valid_21628071 != nil:
    section.add "Marker", valid_21628071
  var valid_21628072 = query.getOrDefault("EndTime")
  valid_21628072 = validateParameter(valid_21628072, JString, required = false,
                                   default = nil)
  if valid_21628072 != nil:
    section.add "EndTime", valid_21628072
  var valid_21628073 = query.getOrDefault("Version")
  valid_21628073 = validateParameter(valid_21628073, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628073 != nil:
    section.add "Version", valid_21628073
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628074 = header.getOrDefault("X-Amz-Date")
  valid_21628074 = validateParameter(valid_21628074, JString, required = false,
                                   default = nil)
  if valid_21628074 != nil:
    section.add "X-Amz-Date", valid_21628074
  var valid_21628075 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628075 = validateParameter(valid_21628075, JString, required = false,
                                   default = nil)
  if valid_21628075 != nil:
    section.add "X-Amz-Security-Token", valid_21628075
  var valid_21628076 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628076 = validateParameter(valid_21628076, JString, required = false,
                                   default = nil)
  if valid_21628076 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628076
  var valid_21628077 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628077 = validateParameter(valid_21628077, JString, required = false,
                                   default = nil)
  if valid_21628077 != nil:
    section.add "X-Amz-Algorithm", valid_21628077
  var valid_21628078 = header.getOrDefault("X-Amz-Signature")
  valid_21628078 = validateParameter(valid_21628078, JString, required = false,
                                   default = nil)
  if valid_21628078 != nil:
    section.add "X-Amz-Signature", valid_21628078
  var valid_21628079 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628079 = validateParameter(valid_21628079, JString, required = false,
                                   default = nil)
  if valid_21628079 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628079
  var valid_21628080 = header.getOrDefault("X-Amz-Credential")
  valid_21628080 = validateParameter(valid_21628080, JString, required = false,
                                   default = nil)
  if valid_21628080 != nil:
    section.add "X-Amz-Credential", valid_21628080
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628081: Call_GetDescribeScheduledActions_21628061;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Describes properties of scheduled actions. 
  ## 
  let valid = call_21628081.validator(path, query, header, formData, body, _)
  let scheme = call_21628081.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628081.makeUrl(scheme.get, call_21628081.host, call_21628081.base,
                               call_21628081.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628081, uri, valid, _)

proc call*(call_21628082: Call_GetDescribeScheduledActions_21628061;
          TargetActionType: string = "ResizeCluster"; MaxRecords: int = 0;
          ScheduledActionName: string = ""; StartTime: string = "";
          Filters: JsonNode = nil; Action: string = "DescribeScheduledActions";
          Active: bool = false; Marker: string = ""; EndTime: string = "";
          Version: string = "2012-12-01"): Recallable =
  ## getDescribeScheduledActions
  ## Describes properties of scheduled actions. 
  ##   TargetActionType: string
  ##                   : The type of the scheduled actions to retrieve. 
  ##   MaxRecords: int
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   ScheduledActionName: string
  ##                      : The name of the scheduled action to retrieve. 
  ##   StartTime: string
  ##            : The start time in UTC of the scheduled actions to retrieve. Only active scheduled actions that have invocations after this time are retrieved.
  ##   Filters: JArray
  ##          : List of scheduled action filters. 
  ##   Action: string (required)
  ##   Active: bool
  ##         : If true, retrieve only active scheduled actions. If false, retrieve only disabled scheduled actions. 
  ##   Marker: string
  ##         : An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeScheduledActions</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
  ##   EndTime: string
  ##          : The end time in UTC of the scheduled action to retrieve. Only active scheduled actions that have invocations before this time are retrieved.
  ##   Version: string (required)
  var query_21628083 = newJObject()
  add(query_21628083, "TargetActionType", newJString(TargetActionType))
  add(query_21628083, "MaxRecords", newJInt(MaxRecords))
  add(query_21628083, "ScheduledActionName", newJString(ScheduledActionName))
  add(query_21628083, "StartTime", newJString(StartTime))
  if Filters != nil:
    query_21628083.add "Filters", Filters
  add(query_21628083, "Action", newJString(Action))
  add(query_21628083, "Active", newJBool(Active))
  add(query_21628083, "Marker", newJString(Marker))
  add(query_21628083, "EndTime", newJString(EndTime))
  add(query_21628083, "Version", newJString(Version))
  result = call_21628082.call(nil, query_21628083, nil, nil, nil)

var getDescribeScheduledActions* = Call_GetDescribeScheduledActions_21628061(
    name: "getDescribeScheduledActions", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=DescribeScheduledActions",
    validator: validate_GetDescribeScheduledActions_21628062, base: "/",
    makeUrl: url_GetDescribeScheduledActions_21628063,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeSnapshotCopyGrants_21628128 = ref object of OpenApiRestCall_21625418
proc url_PostDescribeSnapshotCopyGrants_21628130(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeSnapshotCopyGrants_21628129(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns a list of snapshot copy grants owned by the AWS account in the destination region.</p> <p> For more information about managing snapshot copy grants, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-db-encryption.html">Amazon Redshift Database Encryption</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628131 = query.getOrDefault("Action")
  valid_21628131 = validateParameter(valid_21628131, JString, required = true, default = newJString(
      "DescribeSnapshotCopyGrants"))
  if valid_21628131 != nil:
    section.add "Action", valid_21628131
  var valid_21628132 = query.getOrDefault("Version")
  valid_21628132 = validateParameter(valid_21628132, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628132 != nil:
    section.add "Version", valid_21628132
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628133 = header.getOrDefault("X-Amz-Date")
  valid_21628133 = validateParameter(valid_21628133, JString, required = false,
                                   default = nil)
  if valid_21628133 != nil:
    section.add "X-Amz-Date", valid_21628133
  var valid_21628134 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628134 = validateParameter(valid_21628134, JString, required = false,
                                   default = nil)
  if valid_21628134 != nil:
    section.add "X-Amz-Security-Token", valid_21628134
  var valid_21628135 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628135 = validateParameter(valid_21628135, JString, required = false,
                                   default = nil)
  if valid_21628135 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628135
  var valid_21628136 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628136 = validateParameter(valid_21628136, JString, required = false,
                                   default = nil)
  if valid_21628136 != nil:
    section.add "X-Amz-Algorithm", valid_21628136
  var valid_21628137 = header.getOrDefault("X-Amz-Signature")
  valid_21628137 = validateParameter(valid_21628137, JString, required = false,
                                   default = nil)
  if valid_21628137 != nil:
    section.add "X-Amz-Signature", valid_21628137
  var valid_21628138 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628138 = validateParameter(valid_21628138, JString, required = false,
                                   default = nil)
  if valid_21628138 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628138
  var valid_21628139 = header.getOrDefault("X-Amz-Credential")
  valid_21628139 = validateParameter(valid_21628139, JString, required = false,
                                   default = nil)
  if valid_21628139 != nil:
    section.add "X-Amz-Credential", valid_21628139
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : <p>An optional parameter that specifies the starting point to return a set of response records. When the results of a <code>DescribeSnapshotCopyGrant</code> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. </p> <p>Constraints: You can specify either the <b>SnapshotCopyGrantName</b> parameter or the <b>Marker</b> parameter, but not both. </p>
  ##   SnapshotCopyGrantName: JString
  ##                        : The name of the snapshot copy grant.
  ##   TagKeys: JArray
  ##          : A tag key or keys for which you want to return all matching resources that are associated with the specified key or keys. For example, suppose that you have resources tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with all resources that have either or both of these tag keys associated with them.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   TagValues: JArray
  ##            : A tag value or values for which you want to return all matching resources that are associated with the specified value or values. For example, suppose that you have resources tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with all resources that have either or both of these tag values associated with them.
  section = newJObject()
  var valid_21628140 = formData.getOrDefault("Marker")
  valid_21628140 = validateParameter(valid_21628140, JString, required = false,
                                   default = nil)
  if valid_21628140 != nil:
    section.add "Marker", valid_21628140
  var valid_21628141 = formData.getOrDefault("SnapshotCopyGrantName")
  valid_21628141 = validateParameter(valid_21628141, JString, required = false,
                                   default = nil)
  if valid_21628141 != nil:
    section.add "SnapshotCopyGrantName", valid_21628141
  var valid_21628142 = formData.getOrDefault("TagKeys")
  valid_21628142 = validateParameter(valid_21628142, JArray, required = false,
                                   default = nil)
  if valid_21628142 != nil:
    section.add "TagKeys", valid_21628142
  var valid_21628143 = formData.getOrDefault("MaxRecords")
  valid_21628143 = validateParameter(valid_21628143, JInt, required = false,
                                   default = nil)
  if valid_21628143 != nil:
    section.add "MaxRecords", valid_21628143
  var valid_21628144 = formData.getOrDefault("TagValues")
  valid_21628144 = validateParameter(valid_21628144, JArray, required = false,
                                   default = nil)
  if valid_21628144 != nil:
    section.add "TagValues", valid_21628144
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628145: Call_PostDescribeSnapshotCopyGrants_21628128;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns a list of snapshot copy grants owned by the AWS account in the destination region.</p> <p> For more information about managing snapshot copy grants, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-db-encryption.html">Amazon Redshift Database Encryption</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p>
  ## 
  let valid = call_21628145.validator(path, query, header, formData, body, _)
  let scheme = call_21628145.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628145.makeUrl(scheme.get, call_21628145.host, call_21628145.base,
                               call_21628145.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628145, uri, valid, _)

proc call*(call_21628146: Call_PostDescribeSnapshotCopyGrants_21628128;
          Marker: string = ""; Action: string = "DescribeSnapshotCopyGrants";
          SnapshotCopyGrantName: string = ""; TagKeys: JsonNode = nil;
          MaxRecords: int = 0; TagValues: JsonNode = nil; Version: string = "2012-12-01"): Recallable =
  ## postDescribeSnapshotCopyGrants
  ## <p>Returns a list of snapshot copy grants owned by the AWS account in the destination region.</p> <p> For more information about managing snapshot copy grants, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-db-encryption.html">Amazon Redshift Database Encryption</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p>
  ##   Marker: string
  ##         : <p>An optional parameter that specifies the starting point to return a set of response records. When the results of a <code>DescribeSnapshotCopyGrant</code> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. </p> <p>Constraints: You can specify either the <b>SnapshotCopyGrantName</b> parameter or the <b>Marker</b> parameter, but not both. </p>
  ##   Action: string (required)
  ##   SnapshotCopyGrantName: string
  ##                        : The name of the snapshot copy grant.
  ##   TagKeys: JArray
  ##          : A tag key or keys for which you want to return all matching resources that are associated with the specified key or keys. For example, suppose that you have resources tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with all resources that have either or both of these tag keys associated with them.
  ##   MaxRecords: int
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   TagValues: JArray
  ##            : A tag value or values for which you want to return all matching resources that are associated with the specified value or values. For example, suppose that you have resources tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with all resources that have either or both of these tag values associated with them.
  ##   Version: string (required)
  var query_21628147 = newJObject()
  var formData_21628148 = newJObject()
  add(formData_21628148, "Marker", newJString(Marker))
  add(query_21628147, "Action", newJString(Action))
  add(formData_21628148, "SnapshotCopyGrantName",
      newJString(SnapshotCopyGrantName))
  if TagKeys != nil:
    formData_21628148.add "TagKeys", TagKeys
  add(formData_21628148, "MaxRecords", newJInt(MaxRecords))
  if TagValues != nil:
    formData_21628148.add "TagValues", TagValues
  add(query_21628147, "Version", newJString(Version))
  result = call_21628146.call(nil, query_21628147, nil, formData_21628148, nil)

var postDescribeSnapshotCopyGrants* = Call_PostDescribeSnapshotCopyGrants_21628128(
    name: "postDescribeSnapshotCopyGrants", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=DescribeSnapshotCopyGrants",
    validator: validate_PostDescribeSnapshotCopyGrants_21628129, base: "/",
    makeUrl: url_PostDescribeSnapshotCopyGrants_21628130,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeSnapshotCopyGrants_21628108 = ref object of OpenApiRestCall_21625418
proc url_GetDescribeSnapshotCopyGrants_21628110(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeSnapshotCopyGrants_21628109(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns a list of snapshot copy grants owned by the AWS account in the destination region.</p> <p> For more information about managing snapshot copy grants, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-db-encryption.html">Amazon Redshift Database Encryption</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TagValues: JArray
  ##            : A tag value or values for which you want to return all matching resources that are associated with the specified value or values. For example, suppose that you have resources tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with all resources that have either or both of these tag values associated with them.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : <p>An optional parameter that specifies the starting point to return a set of response records. When the results of a <code>DescribeSnapshotCopyGrant</code> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. </p> <p>Constraints: You can specify either the <b>SnapshotCopyGrantName</b> parameter or the <b>Marker</b> parameter, but not both. </p>
  ##   SnapshotCopyGrantName: JString
  ##                        : The name of the snapshot copy grant.
  ##   TagKeys: JArray
  ##          : A tag key or keys for which you want to return all matching resources that are associated with the specified key or keys. For example, suppose that you have resources tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with all resources that have either or both of these tag keys associated with them.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628111 = query.getOrDefault("TagValues")
  valid_21628111 = validateParameter(valid_21628111, JArray, required = false,
                                   default = nil)
  if valid_21628111 != nil:
    section.add "TagValues", valid_21628111
  var valid_21628112 = query.getOrDefault("MaxRecords")
  valid_21628112 = validateParameter(valid_21628112, JInt, required = false,
                                   default = nil)
  if valid_21628112 != nil:
    section.add "MaxRecords", valid_21628112
  var valid_21628113 = query.getOrDefault("Action")
  valid_21628113 = validateParameter(valid_21628113, JString, required = true, default = newJString(
      "DescribeSnapshotCopyGrants"))
  if valid_21628113 != nil:
    section.add "Action", valid_21628113
  var valid_21628114 = query.getOrDefault("Marker")
  valid_21628114 = validateParameter(valid_21628114, JString, required = false,
                                   default = nil)
  if valid_21628114 != nil:
    section.add "Marker", valid_21628114
  var valid_21628115 = query.getOrDefault("SnapshotCopyGrantName")
  valid_21628115 = validateParameter(valid_21628115, JString, required = false,
                                   default = nil)
  if valid_21628115 != nil:
    section.add "SnapshotCopyGrantName", valid_21628115
  var valid_21628116 = query.getOrDefault("TagKeys")
  valid_21628116 = validateParameter(valid_21628116, JArray, required = false,
                                   default = nil)
  if valid_21628116 != nil:
    section.add "TagKeys", valid_21628116
  var valid_21628117 = query.getOrDefault("Version")
  valid_21628117 = validateParameter(valid_21628117, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628117 != nil:
    section.add "Version", valid_21628117
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628118 = header.getOrDefault("X-Amz-Date")
  valid_21628118 = validateParameter(valid_21628118, JString, required = false,
                                   default = nil)
  if valid_21628118 != nil:
    section.add "X-Amz-Date", valid_21628118
  var valid_21628119 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628119 = validateParameter(valid_21628119, JString, required = false,
                                   default = nil)
  if valid_21628119 != nil:
    section.add "X-Amz-Security-Token", valid_21628119
  var valid_21628120 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628120 = validateParameter(valid_21628120, JString, required = false,
                                   default = nil)
  if valid_21628120 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628120
  var valid_21628121 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628121 = validateParameter(valid_21628121, JString, required = false,
                                   default = nil)
  if valid_21628121 != nil:
    section.add "X-Amz-Algorithm", valid_21628121
  var valid_21628122 = header.getOrDefault("X-Amz-Signature")
  valid_21628122 = validateParameter(valid_21628122, JString, required = false,
                                   default = nil)
  if valid_21628122 != nil:
    section.add "X-Amz-Signature", valid_21628122
  var valid_21628123 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628123 = validateParameter(valid_21628123, JString, required = false,
                                   default = nil)
  if valid_21628123 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628123
  var valid_21628124 = header.getOrDefault("X-Amz-Credential")
  valid_21628124 = validateParameter(valid_21628124, JString, required = false,
                                   default = nil)
  if valid_21628124 != nil:
    section.add "X-Amz-Credential", valid_21628124
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628125: Call_GetDescribeSnapshotCopyGrants_21628108;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns a list of snapshot copy grants owned by the AWS account in the destination region.</p> <p> For more information about managing snapshot copy grants, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-db-encryption.html">Amazon Redshift Database Encryption</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p>
  ## 
  let valid = call_21628125.validator(path, query, header, formData, body, _)
  let scheme = call_21628125.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628125.makeUrl(scheme.get, call_21628125.host, call_21628125.base,
                               call_21628125.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628125, uri, valid, _)

proc call*(call_21628126: Call_GetDescribeSnapshotCopyGrants_21628108;
          TagValues: JsonNode = nil; MaxRecords: int = 0;
          Action: string = "DescribeSnapshotCopyGrants"; Marker: string = "";
          SnapshotCopyGrantName: string = ""; TagKeys: JsonNode = nil;
          Version: string = "2012-12-01"): Recallable =
  ## getDescribeSnapshotCopyGrants
  ## <p>Returns a list of snapshot copy grants owned by the AWS account in the destination region.</p> <p> For more information about managing snapshot copy grants, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-db-encryption.html">Amazon Redshift Database Encryption</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p>
  ##   TagValues: JArray
  ##            : A tag value or values for which you want to return all matching resources that are associated with the specified value or values. For example, suppose that you have resources tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with all resources that have either or both of these tag values associated with them.
  ##   MaxRecords: int
  ##             : <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : <p>An optional parameter that specifies the starting point to return a set of response records. When the results of a <code>DescribeSnapshotCopyGrant</code> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. </p> <p>Constraints: You can specify either the <b>SnapshotCopyGrantName</b> parameter or the <b>Marker</b> parameter, but not both. </p>
  ##   SnapshotCopyGrantName: string
  ##                        : The name of the snapshot copy grant.
  ##   TagKeys: JArray
  ##          : A tag key or keys for which you want to return all matching resources that are associated with the specified key or keys. For example, suppose that you have resources tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with all resources that have either or both of these tag keys associated with them.
  ##   Version: string (required)
  var query_21628127 = newJObject()
  if TagValues != nil:
    query_21628127.add "TagValues", TagValues
  add(query_21628127, "MaxRecords", newJInt(MaxRecords))
  add(query_21628127, "Action", newJString(Action))
  add(query_21628127, "Marker", newJString(Marker))
  add(query_21628127, "SnapshotCopyGrantName", newJString(SnapshotCopyGrantName))
  if TagKeys != nil:
    query_21628127.add "TagKeys", TagKeys
  add(query_21628127, "Version", newJString(Version))
  result = call_21628126.call(nil, query_21628127, nil, nil, nil)

var getDescribeSnapshotCopyGrants* = Call_GetDescribeSnapshotCopyGrants_21628108(
    name: "getDescribeSnapshotCopyGrants", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=DescribeSnapshotCopyGrants",
    validator: validate_GetDescribeSnapshotCopyGrants_21628109, base: "/",
    makeUrl: url_GetDescribeSnapshotCopyGrants_21628110,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeSnapshotSchedules_21628170 = ref object of OpenApiRestCall_21625418
proc url_PostDescribeSnapshotSchedules_21628172(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeSnapshotSchedules_21628171(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Returns a list of snapshot schedules. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628173 = query.getOrDefault("Action")
  valid_21628173 = validateParameter(valid_21628173, JString, required = true, default = newJString(
      "DescribeSnapshotSchedules"))
  if valid_21628173 != nil:
    section.add "Action", valid_21628173
  var valid_21628174 = query.getOrDefault("Version")
  valid_21628174 = validateParameter(valid_21628174, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628174 != nil:
    section.add "Version", valid_21628174
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628175 = header.getOrDefault("X-Amz-Date")
  valid_21628175 = validateParameter(valid_21628175, JString, required = false,
                                   default = nil)
  if valid_21628175 != nil:
    section.add "X-Amz-Date", valid_21628175
  var valid_21628176 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628176 = validateParameter(valid_21628176, JString, required = false,
                                   default = nil)
  if valid_21628176 != nil:
    section.add "X-Amz-Security-Token", valid_21628176
  var valid_21628177 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628177 = validateParameter(valid_21628177, JString, required = false,
                                   default = nil)
  if valid_21628177 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628177
  var valid_21628178 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628178 = validateParameter(valid_21628178, JString, required = false,
                                   default = nil)
  if valid_21628178 != nil:
    section.add "X-Amz-Algorithm", valid_21628178
  var valid_21628179 = header.getOrDefault("X-Amz-Signature")
  valid_21628179 = validateParameter(valid_21628179, JString, required = false,
                                   default = nil)
  if valid_21628179 != nil:
    section.add "X-Amz-Signature", valid_21628179
  var valid_21628180 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628180 = validateParameter(valid_21628180, JString, required = false,
                                   default = nil)
  if valid_21628180 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628180
  var valid_21628181 = header.getOrDefault("X-Amz-Credential")
  valid_21628181 = validateParameter(valid_21628181, JString, required = false,
                                   default = nil)
  if valid_21628181 != nil:
    section.add "X-Amz-Credential", valid_21628181
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the <code>marker</code> parameter and retrying the command. If the <code>marker</code> field is empty, all response records have been retrieved for the request.
  ##   ClusterIdentifier: JString
  ##                    : The unique identifier for the cluster whose snapshot schedules you want to view.
  ##   ScheduleIdentifier: JString
  ##                     : A unique identifier for a snapshot schedule.
  ##   TagKeys: JArray
  ##          : The key value for a snapshot schedule tag.
  ##   MaxRecords: JInt
  ##             : The maximum number or response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned <code>marker</code> value.
  ##   TagValues: JArray
  ##            : The value corresponding to the key of the snapshot schedule tag.
  section = newJObject()
  var valid_21628182 = formData.getOrDefault("Marker")
  valid_21628182 = validateParameter(valid_21628182, JString, required = false,
                                   default = nil)
  if valid_21628182 != nil:
    section.add "Marker", valid_21628182
  var valid_21628183 = formData.getOrDefault("ClusterIdentifier")
  valid_21628183 = validateParameter(valid_21628183, JString, required = false,
                                   default = nil)
  if valid_21628183 != nil:
    section.add "ClusterIdentifier", valid_21628183
  var valid_21628184 = formData.getOrDefault("ScheduleIdentifier")
  valid_21628184 = validateParameter(valid_21628184, JString, required = false,
                                   default = nil)
  if valid_21628184 != nil:
    section.add "ScheduleIdentifier", valid_21628184
  var valid_21628185 = formData.getOrDefault("TagKeys")
  valid_21628185 = validateParameter(valid_21628185, JArray, required = false,
                                   default = nil)
  if valid_21628185 != nil:
    section.add "TagKeys", valid_21628185
  var valid_21628186 = formData.getOrDefault("MaxRecords")
  valid_21628186 = validateParameter(valid_21628186, JInt, required = false,
                                   default = nil)
  if valid_21628186 != nil:
    section.add "MaxRecords", valid_21628186
  var valid_21628187 = formData.getOrDefault("TagValues")
  valid_21628187 = validateParameter(valid_21628187, JArray, required = false,
                                   default = nil)
  if valid_21628187 != nil:
    section.add "TagValues", valid_21628187
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628188: Call_PostDescribeSnapshotSchedules_21628170;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns a list of snapshot schedules. 
  ## 
  let valid = call_21628188.validator(path, query, header, formData, body, _)
  let scheme = call_21628188.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628188.makeUrl(scheme.get, call_21628188.host, call_21628188.base,
                               call_21628188.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628188, uri, valid, _)

proc call*(call_21628189: Call_PostDescribeSnapshotSchedules_21628170;
          Marker: string = ""; Action: string = "DescribeSnapshotSchedules";
          ClusterIdentifier: string = ""; ScheduleIdentifier: string = "";
          TagKeys: JsonNode = nil; MaxRecords: int = 0; TagValues: JsonNode = nil;
          Version: string = "2012-12-01"): Recallable =
  ## postDescribeSnapshotSchedules
  ## Returns a list of snapshot schedules. 
  ##   Marker: string
  ##         : A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the <code>marker</code> parameter and retrying the command. If the <code>marker</code> field is empty, all response records have been retrieved for the request.
  ##   Action: string (required)
  ##   ClusterIdentifier: string
  ##                    : The unique identifier for the cluster whose snapshot schedules you want to view.
  ##   ScheduleIdentifier: string
  ##                     : A unique identifier for a snapshot schedule.
  ##   TagKeys: JArray
  ##          : The key value for a snapshot schedule tag.
  ##   MaxRecords: int
  ##             : The maximum number or response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned <code>marker</code> value.
  ##   TagValues: JArray
  ##            : The value corresponding to the key of the snapshot schedule tag.
  ##   Version: string (required)
  var query_21628190 = newJObject()
  var formData_21628191 = newJObject()
  add(formData_21628191, "Marker", newJString(Marker))
  add(query_21628190, "Action", newJString(Action))
  add(formData_21628191, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(formData_21628191, "ScheduleIdentifier", newJString(ScheduleIdentifier))
  if TagKeys != nil:
    formData_21628191.add "TagKeys", TagKeys
  add(formData_21628191, "MaxRecords", newJInt(MaxRecords))
  if TagValues != nil:
    formData_21628191.add "TagValues", TagValues
  add(query_21628190, "Version", newJString(Version))
  result = call_21628189.call(nil, query_21628190, nil, formData_21628191, nil)

var postDescribeSnapshotSchedules* = Call_PostDescribeSnapshotSchedules_21628170(
    name: "postDescribeSnapshotSchedules", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=DescribeSnapshotSchedules",
    validator: validate_PostDescribeSnapshotSchedules_21628171, base: "/",
    makeUrl: url_PostDescribeSnapshotSchedules_21628172,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeSnapshotSchedules_21628149 = ref object of OpenApiRestCall_21625418
proc url_GetDescribeSnapshotSchedules_21628151(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeSnapshotSchedules_21628150(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Returns a list of snapshot schedules. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TagValues: JArray
  ##            : The value corresponding to the key of the snapshot schedule tag.
  ##   MaxRecords: JInt
  ##             : The maximum number or response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned <code>marker</code> value.
  ##   Action: JString (required)
  ##   ClusterIdentifier: JString
  ##                    : The unique identifier for the cluster whose snapshot schedules you want to view.
  ##   ScheduleIdentifier: JString
  ##                     : A unique identifier for a snapshot schedule.
  ##   Marker: JString
  ##         : A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the <code>marker</code> parameter and retrying the command. If the <code>marker</code> field is empty, all response records have been retrieved for the request.
  ##   TagKeys: JArray
  ##          : The key value for a snapshot schedule tag.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628152 = query.getOrDefault("TagValues")
  valid_21628152 = validateParameter(valid_21628152, JArray, required = false,
                                   default = nil)
  if valid_21628152 != nil:
    section.add "TagValues", valid_21628152
  var valid_21628153 = query.getOrDefault("MaxRecords")
  valid_21628153 = validateParameter(valid_21628153, JInt, required = false,
                                   default = nil)
  if valid_21628153 != nil:
    section.add "MaxRecords", valid_21628153
  var valid_21628154 = query.getOrDefault("Action")
  valid_21628154 = validateParameter(valid_21628154, JString, required = true, default = newJString(
      "DescribeSnapshotSchedules"))
  if valid_21628154 != nil:
    section.add "Action", valid_21628154
  var valid_21628155 = query.getOrDefault("ClusterIdentifier")
  valid_21628155 = validateParameter(valid_21628155, JString, required = false,
                                   default = nil)
  if valid_21628155 != nil:
    section.add "ClusterIdentifier", valid_21628155
  var valid_21628156 = query.getOrDefault("ScheduleIdentifier")
  valid_21628156 = validateParameter(valid_21628156, JString, required = false,
                                   default = nil)
  if valid_21628156 != nil:
    section.add "ScheduleIdentifier", valid_21628156
  var valid_21628157 = query.getOrDefault("Marker")
  valid_21628157 = validateParameter(valid_21628157, JString, required = false,
                                   default = nil)
  if valid_21628157 != nil:
    section.add "Marker", valid_21628157
  var valid_21628158 = query.getOrDefault("TagKeys")
  valid_21628158 = validateParameter(valid_21628158, JArray, required = false,
                                   default = nil)
  if valid_21628158 != nil:
    section.add "TagKeys", valid_21628158
  var valid_21628159 = query.getOrDefault("Version")
  valid_21628159 = validateParameter(valid_21628159, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628159 != nil:
    section.add "Version", valid_21628159
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628160 = header.getOrDefault("X-Amz-Date")
  valid_21628160 = validateParameter(valid_21628160, JString, required = false,
                                   default = nil)
  if valid_21628160 != nil:
    section.add "X-Amz-Date", valid_21628160
  var valid_21628161 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628161 = validateParameter(valid_21628161, JString, required = false,
                                   default = nil)
  if valid_21628161 != nil:
    section.add "X-Amz-Security-Token", valid_21628161
  var valid_21628162 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628162 = validateParameter(valid_21628162, JString, required = false,
                                   default = nil)
  if valid_21628162 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628162
  var valid_21628163 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628163 = validateParameter(valid_21628163, JString, required = false,
                                   default = nil)
  if valid_21628163 != nil:
    section.add "X-Amz-Algorithm", valid_21628163
  var valid_21628164 = header.getOrDefault("X-Amz-Signature")
  valid_21628164 = validateParameter(valid_21628164, JString, required = false,
                                   default = nil)
  if valid_21628164 != nil:
    section.add "X-Amz-Signature", valid_21628164
  var valid_21628165 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628165 = validateParameter(valid_21628165, JString, required = false,
                                   default = nil)
  if valid_21628165 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628165
  var valid_21628166 = header.getOrDefault("X-Amz-Credential")
  valid_21628166 = validateParameter(valid_21628166, JString, required = false,
                                   default = nil)
  if valid_21628166 != nil:
    section.add "X-Amz-Credential", valid_21628166
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628167: Call_GetDescribeSnapshotSchedules_21628149;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns a list of snapshot schedules. 
  ## 
  let valid = call_21628167.validator(path, query, header, formData, body, _)
  let scheme = call_21628167.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628167.makeUrl(scheme.get, call_21628167.host, call_21628167.base,
                               call_21628167.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628167, uri, valid, _)

proc call*(call_21628168: Call_GetDescribeSnapshotSchedules_21628149;
          TagValues: JsonNode = nil; MaxRecords: int = 0;
          Action: string = "DescribeSnapshotSchedules";
          ClusterIdentifier: string = ""; ScheduleIdentifier: string = "";
          Marker: string = ""; TagKeys: JsonNode = nil; Version: string = "2012-12-01"): Recallable =
  ## getDescribeSnapshotSchedules
  ## Returns a list of snapshot schedules. 
  ##   TagValues: JArray
  ##            : The value corresponding to the key of the snapshot schedule tag.
  ##   MaxRecords: int
  ##             : The maximum number or response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned <code>marker</code> value.
  ##   Action: string (required)
  ##   ClusterIdentifier: string
  ##                    : The unique identifier for the cluster whose snapshot schedules you want to view.
  ##   ScheduleIdentifier: string
  ##                     : A unique identifier for a snapshot schedule.
  ##   Marker: string
  ##         : A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the <code>marker</code> parameter and retrying the command. If the <code>marker</code> field is empty, all response records have been retrieved for the request.
  ##   TagKeys: JArray
  ##          : The key value for a snapshot schedule tag.
  ##   Version: string (required)
  var query_21628169 = newJObject()
  if TagValues != nil:
    query_21628169.add "TagValues", TagValues
  add(query_21628169, "MaxRecords", newJInt(MaxRecords))
  add(query_21628169, "Action", newJString(Action))
  add(query_21628169, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(query_21628169, "ScheduleIdentifier", newJString(ScheduleIdentifier))
  add(query_21628169, "Marker", newJString(Marker))
  if TagKeys != nil:
    query_21628169.add "TagKeys", TagKeys
  add(query_21628169, "Version", newJString(Version))
  result = call_21628168.call(nil, query_21628169, nil, nil, nil)

var getDescribeSnapshotSchedules* = Call_GetDescribeSnapshotSchedules_21628149(
    name: "getDescribeSnapshotSchedules", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=DescribeSnapshotSchedules",
    validator: validate_GetDescribeSnapshotSchedules_21628150, base: "/",
    makeUrl: url_GetDescribeSnapshotSchedules_21628151,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeStorage_21628207 = ref object of OpenApiRestCall_21625418
proc url_PostDescribeStorage_21628209(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeStorage_21628208(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Returns account level backups storage size and provisional storage.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628210 = query.getOrDefault("Action")
  valid_21628210 = validateParameter(valid_21628210, JString, required = true,
                                   default = newJString("DescribeStorage"))
  if valid_21628210 != nil:
    section.add "Action", valid_21628210
  var valid_21628211 = query.getOrDefault("Version")
  valid_21628211 = validateParameter(valid_21628211, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628211 != nil:
    section.add "Version", valid_21628211
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628212 = header.getOrDefault("X-Amz-Date")
  valid_21628212 = validateParameter(valid_21628212, JString, required = false,
                                   default = nil)
  if valid_21628212 != nil:
    section.add "X-Amz-Date", valid_21628212
  var valid_21628213 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628213 = validateParameter(valid_21628213, JString, required = false,
                                   default = nil)
  if valid_21628213 != nil:
    section.add "X-Amz-Security-Token", valid_21628213
  var valid_21628214 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628214 = validateParameter(valid_21628214, JString, required = false,
                                   default = nil)
  if valid_21628214 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628214
  var valid_21628215 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628215 = validateParameter(valid_21628215, JString, required = false,
                                   default = nil)
  if valid_21628215 != nil:
    section.add "X-Amz-Algorithm", valid_21628215
  var valid_21628216 = header.getOrDefault("X-Amz-Signature")
  valid_21628216 = validateParameter(valid_21628216, JString, required = false,
                                   default = nil)
  if valid_21628216 != nil:
    section.add "X-Amz-Signature", valid_21628216
  var valid_21628217 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628217 = validateParameter(valid_21628217, JString, required = false,
                                   default = nil)
  if valid_21628217 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628217
  var valid_21628218 = header.getOrDefault("X-Amz-Credential")
  valid_21628218 = validateParameter(valid_21628218, JString, required = false,
                                   default = nil)
  if valid_21628218 != nil:
    section.add "X-Amz-Credential", valid_21628218
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628219: Call_PostDescribeStorage_21628207; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns account level backups storage size and provisional storage.
  ## 
  let valid = call_21628219.validator(path, query, header, formData, body, _)
  let scheme = call_21628219.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628219.makeUrl(scheme.get, call_21628219.host, call_21628219.base,
                               call_21628219.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628219, uri, valid, _)

proc call*(call_21628220: Call_PostDescribeStorage_21628207;
          Action: string = "DescribeStorage"; Version: string = "2012-12-01"): Recallable =
  ## postDescribeStorage
  ## Returns account level backups storage size and provisional storage.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21628221 = newJObject()
  add(query_21628221, "Action", newJString(Action))
  add(query_21628221, "Version", newJString(Version))
  result = call_21628220.call(nil, query_21628221, nil, nil, nil)

var postDescribeStorage* = Call_PostDescribeStorage_21628207(
    name: "postDescribeStorage", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=DescribeStorage",
    validator: validate_PostDescribeStorage_21628208, base: "/",
    makeUrl: url_PostDescribeStorage_21628209,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeStorage_21628192 = ref object of OpenApiRestCall_21625418
proc url_GetDescribeStorage_21628194(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeStorage_21628193(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Returns account level backups storage size and provisional storage.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628195 = query.getOrDefault("Action")
  valid_21628195 = validateParameter(valid_21628195, JString, required = true,
                                   default = newJString("DescribeStorage"))
  if valid_21628195 != nil:
    section.add "Action", valid_21628195
  var valid_21628196 = query.getOrDefault("Version")
  valid_21628196 = validateParameter(valid_21628196, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628196 != nil:
    section.add "Version", valid_21628196
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628197 = header.getOrDefault("X-Amz-Date")
  valid_21628197 = validateParameter(valid_21628197, JString, required = false,
                                   default = nil)
  if valid_21628197 != nil:
    section.add "X-Amz-Date", valid_21628197
  var valid_21628198 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628198 = validateParameter(valid_21628198, JString, required = false,
                                   default = nil)
  if valid_21628198 != nil:
    section.add "X-Amz-Security-Token", valid_21628198
  var valid_21628199 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628199 = validateParameter(valid_21628199, JString, required = false,
                                   default = nil)
  if valid_21628199 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628199
  var valid_21628200 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628200 = validateParameter(valid_21628200, JString, required = false,
                                   default = nil)
  if valid_21628200 != nil:
    section.add "X-Amz-Algorithm", valid_21628200
  var valid_21628201 = header.getOrDefault("X-Amz-Signature")
  valid_21628201 = validateParameter(valid_21628201, JString, required = false,
                                   default = nil)
  if valid_21628201 != nil:
    section.add "X-Amz-Signature", valid_21628201
  var valid_21628202 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628202 = validateParameter(valid_21628202, JString, required = false,
                                   default = nil)
  if valid_21628202 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628202
  var valid_21628203 = header.getOrDefault("X-Amz-Credential")
  valid_21628203 = validateParameter(valid_21628203, JString, required = false,
                                   default = nil)
  if valid_21628203 != nil:
    section.add "X-Amz-Credential", valid_21628203
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628204: Call_GetDescribeStorage_21628192; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns account level backups storage size and provisional storage.
  ## 
  let valid = call_21628204.validator(path, query, header, formData, body, _)
  let scheme = call_21628204.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628204.makeUrl(scheme.get, call_21628204.host, call_21628204.base,
                               call_21628204.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628204, uri, valid, _)

proc call*(call_21628205: Call_GetDescribeStorage_21628192;
          Action: string = "DescribeStorage"; Version: string = "2012-12-01"): Recallable =
  ## getDescribeStorage
  ## Returns account level backups storage size and provisional storage.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21628206 = newJObject()
  add(query_21628206, "Action", newJString(Action))
  add(query_21628206, "Version", newJString(Version))
  result = call_21628205.call(nil, query_21628206, nil, nil, nil)

var getDescribeStorage* = Call_GetDescribeStorage_21628192(
    name: "getDescribeStorage", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=DescribeStorage",
    validator: validate_GetDescribeStorage_21628193, base: "/",
    makeUrl: url_GetDescribeStorage_21628194, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeTableRestoreStatus_21628241 = ref object of OpenApiRestCall_21625418
proc url_PostDescribeTableRestoreStatus_21628243(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeTableRestoreStatus_21628242(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Lists the status of one or more table restore requests made using the <a>RestoreTableFromClusterSnapshot</a> API action. If you don't specify a value for the <code>TableRestoreRequestId</code> parameter, then <code>DescribeTableRestoreStatus</code> returns the status of all table restore requests ordered by the date and time of the request in ascending order. Otherwise <code>DescribeTableRestoreStatus</code> returns the status of the table specified by <code>TableRestoreRequestId</code>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628244 = query.getOrDefault("Action")
  valid_21628244 = validateParameter(valid_21628244, JString, required = true, default = newJString(
      "DescribeTableRestoreStatus"))
  if valid_21628244 != nil:
    section.add "Action", valid_21628244
  var valid_21628245 = query.getOrDefault("Version")
  valid_21628245 = validateParameter(valid_21628245, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628245 != nil:
    section.add "Version", valid_21628245
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628246 = header.getOrDefault("X-Amz-Date")
  valid_21628246 = validateParameter(valid_21628246, JString, required = false,
                                   default = nil)
  if valid_21628246 != nil:
    section.add "X-Amz-Date", valid_21628246
  var valid_21628247 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628247 = validateParameter(valid_21628247, JString, required = false,
                                   default = nil)
  if valid_21628247 != nil:
    section.add "X-Amz-Security-Token", valid_21628247
  var valid_21628248 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628248 = validateParameter(valid_21628248, JString, required = false,
                                   default = nil)
  if valid_21628248 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628248
  var valid_21628249 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628249 = validateParameter(valid_21628249, JString, required = false,
                                   default = nil)
  if valid_21628249 != nil:
    section.add "X-Amz-Algorithm", valid_21628249
  var valid_21628250 = header.getOrDefault("X-Amz-Signature")
  valid_21628250 = validateParameter(valid_21628250, JString, required = false,
                                   default = nil)
  if valid_21628250 != nil:
    section.add "X-Amz-Signature", valid_21628250
  var valid_21628251 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628251 = validateParameter(valid_21628251, JString, required = false,
                                   default = nil)
  if valid_21628251 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628251
  var valid_21628252 = header.getOrDefault("X-Amz-Credential")
  valid_21628252 = validateParameter(valid_21628252, JString, required = false,
                                   default = nil)
  if valid_21628252 != nil:
    section.add "X-Amz-Credential", valid_21628252
  result.add "header", section
  ## parameters in `formData` object:
  ##   TableRestoreRequestId: JString
  ##                        : The identifier of the table restore request to return status for. If you don't specify a <code>TableRestoreRequestId</code> value, then <code>DescribeTableRestoreStatus</code> returns the status of all in-progress table restore requests.
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeTableRestoreStatus</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the <code>MaxRecords</code> parameter.
  ##   ClusterIdentifier: JString
  ##                    : The Amazon Redshift cluster that the table is being restored to.
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.
  section = newJObject()
  var valid_21628253 = formData.getOrDefault("TableRestoreRequestId")
  valid_21628253 = validateParameter(valid_21628253, JString, required = false,
                                   default = nil)
  if valid_21628253 != nil:
    section.add "TableRestoreRequestId", valid_21628253
  var valid_21628254 = formData.getOrDefault("Marker")
  valid_21628254 = validateParameter(valid_21628254, JString, required = false,
                                   default = nil)
  if valid_21628254 != nil:
    section.add "Marker", valid_21628254
  var valid_21628255 = formData.getOrDefault("ClusterIdentifier")
  valid_21628255 = validateParameter(valid_21628255, JString, required = false,
                                   default = nil)
  if valid_21628255 != nil:
    section.add "ClusterIdentifier", valid_21628255
  var valid_21628256 = formData.getOrDefault("MaxRecords")
  valid_21628256 = validateParameter(valid_21628256, JInt, required = false,
                                   default = nil)
  if valid_21628256 != nil:
    section.add "MaxRecords", valid_21628256
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628257: Call_PostDescribeTableRestoreStatus_21628241;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the status of one or more table restore requests made using the <a>RestoreTableFromClusterSnapshot</a> API action. If you don't specify a value for the <code>TableRestoreRequestId</code> parameter, then <code>DescribeTableRestoreStatus</code> returns the status of all table restore requests ordered by the date and time of the request in ascending order. Otherwise <code>DescribeTableRestoreStatus</code> returns the status of the table specified by <code>TableRestoreRequestId</code>.
  ## 
  let valid = call_21628257.validator(path, query, header, formData, body, _)
  let scheme = call_21628257.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628257.makeUrl(scheme.get, call_21628257.host, call_21628257.base,
                               call_21628257.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628257, uri, valid, _)

proc call*(call_21628258: Call_PostDescribeTableRestoreStatus_21628241;
          TableRestoreRequestId: string = ""; Marker: string = "";
          Action: string = "DescribeTableRestoreStatus";
          ClusterIdentifier: string = ""; MaxRecords: int = 0;
          Version: string = "2012-12-01"): Recallable =
  ## postDescribeTableRestoreStatus
  ## Lists the status of one or more table restore requests made using the <a>RestoreTableFromClusterSnapshot</a> API action. If you don't specify a value for the <code>TableRestoreRequestId</code> parameter, then <code>DescribeTableRestoreStatus</code> returns the status of all table restore requests ordered by the date and time of the request in ascending order. Otherwise <code>DescribeTableRestoreStatus</code> returns the status of the table specified by <code>TableRestoreRequestId</code>.
  ##   TableRestoreRequestId: string
  ##                        : The identifier of the table restore request to return status for. If you don't specify a <code>TableRestoreRequestId</code> value, then <code>DescribeTableRestoreStatus</code> returns the status of all in-progress table restore requests.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeTableRestoreStatus</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the <code>MaxRecords</code> parameter.
  ##   Action: string (required)
  ##   ClusterIdentifier: string
  ##                    : The Amazon Redshift cluster that the table is being restored to.
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.
  ##   Version: string (required)
  var query_21628259 = newJObject()
  var formData_21628260 = newJObject()
  add(formData_21628260, "TableRestoreRequestId",
      newJString(TableRestoreRequestId))
  add(formData_21628260, "Marker", newJString(Marker))
  add(query_21628259, "Action", newJString(Action))
  add(formData_21628260, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(formData_21628260, "MaxRecords", newJInt(MaxRecords))
  add(query_21628259, "Version", newJString(Version))
  result = call_21628258.call(nil, query_21628259, nil, formData_21628260, nil)

var postDescribeTableRestoreStatus* = Call_PostDescribeTableRestoreStatus_21628241(
    name: "postDescribeTableRestoreStatus", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=DescribeTableRestoreStatus",
    validator: validate_PostDescribeTableRestoreStatus_21628242, base: "/",
    makeUrl: url_PostDescribeTableRestoreStatus_21628243,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeTableRestoreStatus_21628222 = ref object of OpenApiRestCall_21625418
proc url_GetDescribeTableRestoreStatus_21628224(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeTableRestoreStatus_21628223(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Lists the status of one or more table restore requests made using the <a>RestoreTableFromClusterSnapshot</a> API action. If you don't specify a value for the <code>TableRestoreRequestId</code> parameter, then <code>DescribeTableRestoreStatus</code> returns the status of all table restore requests ordered by the date and time of the request in ascending order. Otherwise <code>DescribeTableRestoreStatus</code> returns the status of the table specified by <code>TableRestoreRequestId</code>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.
  ##   Action: JString (required)
  ##   ClusterIdentifier: JString
  ##                    : The Amazon Redshift cluster that the table is being restored to.
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeTableRestoreStatus</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the <code>MaxRecords</code> parameter.
  ##   Version: JString (required)
  ##   TableRestoreRequestId: JString
  ##                        : The identifier of the table restore request to return status for. If you don't specify a <code>TableRestoreRequestId</code> value, then <code>DescribeTableRestoreStatus</code> returns the status of all in-progress table restore requests.
  section = newJObject()
  var valid_21628225 = query.getOrDefault("MaxRecords")
  valid_21628225 = validateParameter(valid_21628225, JInt, required = false,
                                   default = nil)
  if valid_21628225 != nil:
    section.add "MaxRecords", valid_21628225
  var valid_21628226 = query.getOrDefault("Action")
  valid_21628226 = validateParameter(valid_21628226, JString, required = true, default = newJString(
      "DescribeTableRestoreStatus"))
  if valid_21628226 != nil:
    section.add "Action", valid_21628226
  var valid_21628227 = query.getOrDefault("ClusterIdentifier")
  valid_21628227 = validateParameter(valid_21628227, JString, required = false,
                                   default = nil)
  if valid_21628227 != nil:
    section.add "ClusterIdentifier", valid_21628227
  var valid_21628228 = query.getOrDefault("Marker")
  valid_21628228 = validateParameter(valid_21628228, JString, required = false,
                                   default = nil)
  if valid_21628228 != nil:
    section.add "Marker", valid_21628228
  var valid_21628229 = query.getOrDefault("Version")
  valid_21628229 = validateParameter(valid_21628229, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628229 != nil:
    section.add "Version", valid_21628229
  var valid_21628230 = query.getOrDefault("TableRestoreRequestId")
  valid_21628230 = validateParameter(valid_21628230, JString, required = false,
                                   default = nil)
  if valid_21628230 != nil:
    section.add "TableRestoreRequestId", valid_21628230
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628231 = header.getOrDefault("X-Amz-Date")
  valid_21628231 = validateParameter(valid_21628231, JString, required = false,
                                   default = nil)
  if valid_21628231 != nil:
    section.add "X-Amz-Date", valid_21628231
  var valid_21628232 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628232 = validateParameter(valid_21628232, JString, required = false,
                                   default = nil)
  if valid_21628232 != nil:
    section.add "X-Amz-Security-Token", valid_21628232
  var valid_21628233 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628233 = validateParameter(valid_21628233, JString, required = false,
                                   default = nil)
  if valid_21628233 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628233
  var valid_21628234 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628234 = validateParameter(valid_21628234, JString, required = false,
                                   default = nil)
  if valid_21628234 != nil:
    section.add "X-Amz-Algorithm", valid_21628234
  var valid_21628235 = header.getOrDefault("X-Amz-Signature")
  valid_21628235 = validateParameter(valid_21628235, JString, required = false,
                                   default = nil)
  if valid_21628235 != nil:
    section.add "X-Amz-Signature", valid_21628235
  var valid_21628236 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628236 = validateParameter(valid_21628236, JString, required = false,
                                   default = nil)
  if valid_21628236 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628236
  var valid_21628237 = header.getOrDefault("X-Amz-Credential")
  valid_21628237 = validateParameter(valid_21628237, JString, required = false,
                                   default = nil)
  if valid_21628237 != nil:
    section.add "X-Amz-Credential", valid_21628237
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628238: Call_GetDescribeTableRestoreStatus_21628222;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the status of one or more table restore requests made using the <a>RestoreTableFromClusterSnapshot</a> API action. If you don't specify a value for the <code>TableRestoreRequestId</code> parameter, then <code>DescribeTableRestoreStatus</code> returns the status of all table restore requests ordered by the date and time of the request in ascending order. Otherwise <code>DescribeTableRestoreStatus</code> returns the status of the table specified by <code>TableRestoreRequestId</code>.
  ## 
  let valid = call_21628238.validator(path, query, header, formData, body, _)
  let scheme = call_21628238.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628238.makeUrl(scheme.get, call_21628238.host, call_21628238.base,
                               call_21628238.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628238, uri, valid, _)

proc call*(call_21628239: Call_GetDescribeTableRestoreStatus_21628222;
          MaxRecords: int = 0; Action: string = "DescribeTableRestoreStatus";
          ClusterIdentifier: string = ""; Marker: string = "";
          Version: string = "2012-12-01"; TableRestoreRequestId: string = ""): Recallable =
  ## getDescribeTableRestoreStatus
  ## Lists the status of one or more table restore requests made using the <a>RestoreTableFromClusterSnapshot</a> API action. If you don't specify a value for the <code>TableRestoreRequestId</code> parameter, then <code>DescribeTableRestoreStatus</code> returns the status of all table restore requests ordered by the date and time of the request in ascending order. Otherwise <code>DescribeTableRestoreStatus</code> returns the status of the table specified by <code>TableRestoreRequestId</code>.
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.
  ##   Action: string (required)
  ##   ClusterIdentifier: string
  ##                    : The Amazon Redshift cluster that the table is being restored to.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeTableRestoreStatus</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the <code>MaxRecords</code> parameter.
  ##   Version: string (required)
  ##   TableRestoreRequestId: string
  ##                        : The identifier of the table restore request to return status for. If you don't specify a <code>TableRestoreRequestId</code> value, then <code>DescribeTableRestoreStatus</code> returns the status of all in-progress table restore requests.
  var query_21628240 = newJObject()
  add(query_21628240, "MaxRecords", newJInt(MaxRecords))
  add(query_21628240, "Action", newJString(Action))
  add(query_21628240, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(query_21628240, "Marker", newJString(Marker))
  add(query_21628240, "Version", newJString(Version))
  add(query_21628240, "TableRestoreRequestId", newJString(TableRestoreRequestId))
  result = call_21628239.call(nil, query_21628240, nil, nil, nil)

var getDescribeTableRestoreStatus* = Call_GetDescribeTableRestoreStatus_21628222(
    name: "getDescribeTableRestoreStatus", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=DescribeTableRestoreStatus",
    validator: validate_GetDescribeTableRestoreStatus_21628223, base: "/",
    makeUrl: url_GetDescribeTableRestoreStatus_21628224,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeTags_21628282 = ref object of OpenApiRestCall_21625418
proc url_PostDescribeTags_21628284(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeTags_21628283(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Returns a list of tags. You can return tags from a specific resource by specifying an ARN, or you can return all tags for a given type of resource, such as clusters, snapshots, and so on.</p> <p>The following are limitations for <code>DescribeTags</code>: </p> <ul> <li> <p>You cannot specify an ARN and a resource-type value together in the same request.</p> </li> <li> <p>You cannot use the <code>MaxRecords</code> and <code>Marker</code> parameters together with the ARN parameter.</p> </li> <li> <p>The <code>MaxRecords</code> parameter can be a range from 10 to 50 results to return in a request.</p> </li> </ul> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all resources that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all resources that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, resources are returned regardless of whether they have tag keys or values associated with them.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628285 = query.getOrDefault("Action")
  valid_21628285 = validateParameter(valid_21628285, JString, required = true,
                                   default = newJString("DescribeTags"))
  if valid_21628285 != nil:
    section.add "Action", valid_21628285
  var valid_21628286 = query.getOrDefault("Version")
  valid_21628286 = validateParameter(valid_21628286, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628286 != nil:
    section.add "Version", valid_21628286
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628287 = header.getOrDefault("X-Amz-Date")
  valid_21628287 = validateParameter(valid_21628287, JString, required = false,
                                   default = nil)
  if valid_21628287 != nil:
    section.add "X-Amz-Date", valid_21628287
  var valid_21628288 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628288 = validateParameter(valid_21628288, JString, required = false,
                                   default = nil)
  if valid_21628288 != nil:
    section.add "X-Amz-Security-Token", valid_21628288
  var valid_21628289 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628289 = validateParameter(valid_21628289, JString, required = false,
                                   default = nil)
  if valid_21628289 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628289
  var valid_21628290 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628290 = validateParameter(valid_21628290, JString, required = false,
                                   default = nil)
  if valid_21628290 != nil:
    section.add "X-Amz-Algorithm", valid_21628290
  var valid_21628291 = header.getOrDefault("X-Amz-Signature")
  valid_21628291 = validateParameter(valid_21628291, JString, required = false,
                                   default = nil)
  if valid_21628291 != nil:
    section.add "X-Amz-Signature", valid_21628291
  var valid_21628292 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628292 = validateParameter(valid_21628292, JString, required = false,
                                   default = nil)
  if valid_21628292 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628292
  var valid_21628293 = header.getOrDefault("X-Amz-Credential")
  valid_21628293 = validateParameter(valid_21628293, JString, required = false,
                                   default = nil)
  if valid_21628293 != nil:
    section.add "X-Amz-Credential", valid_21628293
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the <code>marker</code> parameter and retrying the command. If the <code>marker</code> field is empty, all response records have been retrieved for the request. 
  ##   ResourceType: JString
  ##               : <p>The type of resource with which you want to view tags. Valid resource types are: </p> <ul> <li> <p>Cluster</p> </li> <li> <p>CIDR/IP</p> </li> <li> <p>EC2 security group</p> </li> <li> <p>Snapshot</p> </li> <li> <p>Cluster security group</p> </li> <li> <p>Subnet group</p> </li> <li> <p>HSM connection</p> </li> <li> <p>HSM certificate</p> </li> <li> <p>Parameter group</p> </li> <li> <p>Snapshot copy grant</p> </li> </ul> <p>For more information about Amazon Redshift resource types and constructing ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-access-control-overview.html#redshift-iam-access-control-specify-actions">Specifying Policy Elements: Actions, Effects, Resources, and Principals</a> in the Amazon Redshift Cluster Management Guide. </p>
  ##   TagKeys: JArray
  ##          : A tag key or keys for which you want to return all matching resources that are associated with the specified key or keys. For example, suppose that you have resources tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with all resources that have either or both of these tag keys associated with them.
  ##   ResourceName: JString
  ##               : The Amazon Resource Name (ARN) for which you want to describe the tag or tags. For example, <code>arn:aws:redshift:us-east-2:123456789:cluster:t1</code>. 
  ##   MaxRecords: JInt
  ##             : The maximum number or response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned <code>marker</code> value. 
  ##   TagValues: JArray
  ##            : A tag value or values for which you want to return all matching resources that are associated with the specified value or values. For example, suppose that you have resources tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with all resources that have either or both of these tag values associated with them.
  section = newJObject()
  var valid_21628294 = formData.getOrDefault("Marker")
  valid_21628294 = validateParameter(valid_21628294, JString, required = false,
                                   default = nil)
  if valid_21628294 != nil:
    section.add "Marker", valid_21628294
  var valid_21628295 = formData.getOrDefault("ResourceType")
  valid_21628295 = validateParameter(valid_21628295, JString, required = false,
                                   default = nil)
  if valid_21628295 != nil:
    section.add "ResourceType", valid_21628295
  var valid_21628296 = formData.getOrDefault("TagKeys")
  valid_21628296 = validateParameter(valid_21628296, JArray, required = false,
                                   default = nil)
  if valid_21628296 != nil:
    section.add "TagKeys", valid_21628296
  var valid_21628297 = formData.getOrDefault("ResourceName")
  valid_21628297 = validateParameter(valid_21628297, JString, required = false,
                                   default = nil)
  if valid_21628297 != nil:
    section.add "ResourceName", valid_21628297
  var valid_21628298 = formData.getOrDefault("MaxRecords")
  valid_21628298 = validateParameter(valid_21628298, JInt, required = false,
                                   default = nil)
  if valid_21628298 != nil:
    section.add "MaxRecords", valid_21628298
  var valid_21628299 = formData.getOrDefault("TagValues")
  valid_21628299 = validateParameter(valid_21628299, JArray, required = false,
                                   default = nil)
  if valid_21628299 != nil:
    section.add "TagValues", valid_21628299
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628300: Call_PostDescribeTags_21628282; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns a list of tags. You can return tags from a specific resource by specifying an ARN, or you can return all tags for a given type of resource, such as clusters, snapshots, and so on.</p> <p>The following are limitations for <code>DescribeTags</code>: </p> <ul> <li> <p>You cannot specify an ARN and a resource-type value together in the same request.</p> </li> <li> <p>You cannot use the <code>MaxRecords</code> and <code>Marker</code> parameters together with the ARN parameter.</p> </li> <li> <p>The <code>MaxRecords</code> parameter can be a range from 10 to 50 results to return in a request.</p> </li> </ul> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all resources that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all resources that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, resources are returned regardless of whether they have tag keys or values associated with them.</p>
  ## 
  let valid = call_21628300.validator(path, query, header, formData, body, _)
  let scheme = call_21628300.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628300.makeUrl(scheme.get, call_21628300.host, call_21628300.base,
                               call_21628300.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628300, uri, valid, _)

proc call*(call_21628301: Call_PostDescribeTags_21628282; Marker: string = "";
          Action: string = "DescribeTags"; ResourceType: string = "";
          TagKeys: JsonNode = nil; ResourceName: string = ""; MaxRecords: int = 0;
          TagValues: JsonNode = nil; Version: string = "2012-12-01"): Recallable =
  ## postDescribeTags
  ## <p>Returns a list of tags. You can return tags from a specific resource by specifying an ARN, or you can return all tags for a given type of resource, such as clusters, snapshots, and so on.</p> <p>The following are limitations for <code>DescribeTags</code>: </p> <ul> <li> <p>You cannot specify an ARN and a resource-type value together in the same request.</p> </li> <li> <p>You cannot use the <code>MaxRecords</code> and <code>Marker</code> parameters together with the ARN parameter.</p> </li> <li> <p>The <code>MaxRecords</code> parameter can be a range from 10 to 50 results to return in a request.</p> </li> </ul> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all resources that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all resources that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, resources are returned regardless of whether they have tag keys or values associated with them.</p>
  ##   Marker: string
  ##         : A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the <code>marker</code> parameter and retrying the command. If the <code>marker</code> field is empty, all response records have been retrieved for the request. 
  ##   Action: string (required)
  ##   ResourceType: string
  ##               : <p>The type of resource with which you want to view tags. Valid resource types are: </p> <ul> <li> <p>Cluster</p> </li> <li> <p>CIDR/IP</p> </li> <li> <p>EC2 security group</p> </li> <li> <p>Snapshot</p> </li> <li> <p>Cluster security group</p> </li> <li> <p>Subnet group</p> </li> <li> <p>HSM connection</p> </li> <li> <p>HSM certificate</p> </li> <li> <p>Parameter group</p> </li> <li> <p>Snapshot copy grant</p> </li> </ul> <p>For more information about Amazon Redshift resource types and constructing ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-access-control-overview.html#redshift-iam-access-control-specify-actions">Specifying Policy Elements: Actions, Effects, Resources, and Principals</a> in the Amazon Redshift Cluster Management Guide. </p>
  ##   TagKeys: JArray
  ##          : A tag key or keys for which you want to return all matching resources that are associated with the specified key or keys. For example, suppose that you have resources tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with all resources that have either or both of these tag keys associated with them.
  ##   ResourceName: string
  ##               : The Amazon Resource Name (ARN) for which you want to describe the tag or tags. For example, <code>arn:aws:redshift:us-east-2:123456789:cluster:t1</code>. 
  ##   MaxRecords: int
  ##             : The maximum number or response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned <code>marker</code> value. 
  ##   TagValues: JArray
  ##            : A tag value or values for which you want to return all matching resources that are associated with the specified value or values. For example, suppose that you have resources tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with all resources that have either or both of these tag values associated with them.
  ##   Version: string (required)
  var query_21628302 = newJObject()
  var formData_21628303 = newJObject()
  add(formData_21628303, "Marker", newJString(Marker))
  add(query_21628302, "Action", newJString(Action))
  add(formData_21628303, "ResourceType", newJString(ResourceType))
  if TagKeys != nil:
    formData_21628303.add "TagKeys", TagKeys
  add(formData_21628303, "ResourceName", newJString(ResourceName))
  add(formData_21628303, "MaxRecords", newJInt(MaxRecords))
  if TagValues != nil:
    formData_21628303.add "TagValues", TagValues
  add(query_21628302, "Version", newJString(Version))
  result = call_21628301.call(nil, query_21628302, nil, formData_21628303, nil)

var postDescribeTags* = Call_PostDescribeTags_21628282(name: "postDescribeTags",
    meth: HttpMethod.HttpPost, host: "redshift.amazonaws.com",
    route: "/#Action=DescribeTags", validator: validate_PostDescribeTags_21628283,
    base: "/", makeUrl: url_PostDescribeTags_21628284,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeTags_21628261 = ref object of OpenApiRestCall_21625418
proc url_GetDescribeTags_21628263(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeTags_21628262(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Returns a list of tags. You can return tags from a specific resource by specifying an ARN, or you can return all tags for a given type of resource, such as clusters, snapshots, and so on.</p> <p>The following are limitations for <code>DescribeTags</code>: </p> <ul> <li> <p>You cannot specify an ARN and a resource-type value together in the same request.</p> </li> <li> <p>You cannot use the <code>MaxRecords</code> and <code>Marker</code> parameters together with the ARN parameter.</p> </li> <li> <p>The <code>MaxRecords</code> parameter can be a range from 10 to 50 results to return in a request.</p> </li> </ul> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all resources that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all resources that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, resources are returned regardless of whether they have tag keys or values associated with them.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TagValues: JArray
  ##            : A tag value or values for which you want to return all matching resources that are associated with the specified value or values. For example, suppose that you have resources tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with all resources that have either or both of these tag values associated with them.
  ##   MaxRecords: JInt
  ##             : The maximum number or response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned <code>marker</code> value. 
  ##   ResourceName: JString
  ##               : The Amazon Resource Name (ARN) for which you want to describe the tag or tags. For example, <code>arn:aws:redshift:us-east-2:123456789:cluster:t1</code>. 
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the <code>marker</code> parameter and retrying the command. If the <code>marker</code> field is empty, all response records have been retrieved for the request. 
  ##   TagKeys: JArray
  ##          : A tag key or keys for which you want to return all matching resources that are associated with the specified key or keys. For example, suppose that you have resources tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with all resources that have either or both of these tag keys associated with them.
  ##   ResourceType: JString
  ##               : <p>The type of resource with which you want to view tags. Valid resource types are: </p> <ul> <li> <p>Cluster</p> </li> <li> <p>CIDR/IP</p> </li> <li> <p>EC2 security group</p> </li> <li> <p>Snapshot</p> </li> <li> <p>Cluster security group</p> </li> <li> <p>Subnet group</p> </li> <li> <p>HSM connection</p> </li> <li> <p>HSM certificate</p> </li> <li> <p>Parameter group</p> </li> <li> <p>Snapshot copy grant</p> </li> </ul> <p>For more information about Amazon Redshift resource types and constructing ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-access-control-overview.html#redshift-iam-access-control-specify-actions">Specifying Policy Elements: Actions, Effects, Resources, and Principals</a> in the Amazon Redshift Cluster Management Guide. </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628264 = query.getOrDefault("TagValues")
  valid_21628264 = validateParameter(valid_21628264, JArray, required = false,
                                   default = nil)
  if valid_21628264 != nil:
    section.add "TagValues", valid_21628264
  var valid_21628265 = query.getOrDefault("MaxRecords")
  valid_21628265 = validateParameter(valid_21628265, JInt, required = false,
                                   default = nil)
  if valid_21628265 != nil:
    section.add "MaxRecords", valid_21628265
  var valid_21628266 = query.getOrDefault("ResourceName")
  valid_21628266 = validateParameter(valid_21628266, JString, required = false,
                                   default = nil)
  if valid_21628266 != nil:
    section.add "ResourceName", valid_21628266
  var valid_21628267 = query.getOrDefault("Action")
  valid_21628267 = validateParameter(valid_21628267, JString, required = true,
                                   default = newJString("DescribeTags"))
  if valid_21628267 != nil:
    section.add "Action", valid_21628267
  var valid_21628268 = query.getOrDefault("Marker")
  valid_21628268 = validateParameter(valid_21628268, JString, required = false,
                                   default = nil)
  if valid_21628268 != nil:
    section.add "Marker", valid_21628268
  var valid_21628269 = query.getOrDefault("TagKeys")
  valid_21628269 = validateParameter(valid_21628269, JArray, required = false,
                                   default = nil)
  if valid_21628269 != nil:
    section.add "TagKeys", valid_21628269
  var valid_21628270 = query.getOrDefault("ResourceType")
  valid_21628270 = validateParameter(valid_21628270, JString, required = false,
                                   default = nil)
  if valid_21628270 != nil:
    section.add "ResourceType", valid_21628270
  var valid_21628271 = query.getOrDefault("Version")
  valid_21628271 = validateParameter(valid_21628271, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628271 != nil:
    section.add "Version", valid_21628271
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628272 = header.getOrDefault("X-Amz-Date")
  valid_21628272 = validateParameter(valid_21628272, JString, required = false,
                                   default = nil)
  if valid_21628272 != nil:
    section.add "X-Amz-Date", valid_21628272
  var valid_21628273 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628273 = validateParameter(valid_21628273, JString, required = false,
                                   default = nil)
  if valid_21628273 != nil:
    section.add "X-Amz-Security-Token", valid_21628273
  var valid_21628274 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628274 = validateParameter(valid_21628274, JString, required = false,
                                   default = nil)
  if valid_21628274 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628274
  var valid_21628275 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628275 = validateParameter(valid_21628275, JString, required = false,
                                   default = nil)
  if valid_21628275 != nil:
    section.add "X-Amz-Algorithm", valid_21628275
  var valid_21628276 = header.getOrDefault("X-Amz-Signature")
  valid_21628276 = validateParameter(valid_21628276, JString, required = false,
                                   default = nil)
  if valid_21628276 != nil:
    section.add "X-Amz-Signature", valid_21628276
  var valid_21628277 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628277 = validateParameter(valid_21628277, JString, required = false,
                                   default = nil)
  if valid_21628277 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628277
  var valid_21628278 = header.getOrDefault("X-Amz-Credential")
  valid_21628278 = validateParameter(valid_21628278, JString, required = false,
                                   default = nil)
  if valid_21628278 != nil:
    section.add "X-Amz-Credential", valid_21628278
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628279: Call_GetDescribeTags_21628261; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns a list of tags. You can return tags from a specific resource by specifying an ARN, or you can return all tags for a given type of resource, such as clusters, snapshots, and so on.</p> <p>The following are limitations for <code>DescribeTags</code>: </p> <ul> <li> <p>You cannot specify an ARN and a resource-type value together in the same request.</p> </li> <li> <p>You cannot use the <code>MaxRecords</code> and <code>Marker</code> parameters together with the ARN parameter.</p> </li> <li> <p>The <code>MaxRecords</code> parameter can be a range from 10 to 50 results to return in a request.</p> </li> </ul> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all resources that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all resources that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, resources are returned regardless of whether they have tag keys or values associated with them.</p>
  ## 
  let valid = call_21628279.validator(path, query, header, formData, body, _)
  let scheme = call_21628279.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628279.makeUrl(scheme.get, call_21628279.host, call_21628279.base,
                               call_21628279.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628279, uri, valid, _)

proc call*(call_21628280: Call_GetDescribeTags_21628261; TagValues: JsonNode = nil;
          MaxRecords: int = 0; ResourceName: string = "";
          Action: string = "DescribeTags"; Marker: string = ""; TagKeys: JsonNode = nil;
          ResourceType: string = ""; Version: string = "2012-12-01"): Recallable =
  ## getDescribeTags
  ## <p>Returns a list of tags. You can return tags from a specific resource by specifying an ARN, or you can return all tags for a given type of resource, such as clusters, snapshots, and so on.</p> <p>The following are limitations for <code>DescribeTags</code>: </p> <ul> <li> <p>You cannot specify an ARN and a resource-type value together in the same request.</p> </li> <li> <p>You cannot use the <code>MaxRecords</code> and <code>Marker</code> parameters together with the ARN parameter.</p> </li> <li> <p>The <code>MaxRecords</code> parameter can be a range from 10 to 50 results to return in a request.</p> </li> </ul> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all resources that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all resources that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, resources are returned regardless of whether they have tag keys or values associated with them.</p>
  ##   TagValues: JArray
  ##            : A tag value or values for which you want to return all matching resources that are associated with the specified value or values. For example, suppose that you have resources tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with all resources that have either or both of these tag values associated with them.
  ##   MaxRecords: int
  ##             : The maximum number or response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned <code>marker</code> value. 
  ##   ResourceName: string
  ##               : The Amazon Resource Name (ARN) for which you want to describe the tag or tags. For example, <code>arn:aws:redshift:us-east-2:123456789:cluster:t1</code>. 
  ##   Action: string (required)
  ##   Marker: string
  ##         : A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the <code>marker</code> parameter and retrying the command. If the <code>marker</code> field is empty, all response records have been retrieved for the request. 
  ##   TagKeys: JArray
  ##          : A tag key or keys for which you want to return all matching resources that are associated with the specified key or keys. For example, suppose that you have resources tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with all resources that have either or both of these tag keys associated with them.
  ##   ResourceType: string
  ##               : <p>The type of resource with which you want to view tags. Valid resource types are: </p> <ul> <li> <p>Cluster</p> </li> <li> <p>CIDR/IP</p> </li> <li> <p>EC2 security group</p> </li> <li> <p>Snapshot</p> </li> <li> <p>Cluster security group</p> </li> <li> <p>Subnet group</p> </li> <li> <p>HSM connection</p> </li> <li> <p>HSM certificate</p> </li> <li> <p>Parameter group</p> </li> <li> <p>Snapshot copy grant</p> </li> </ul> <p>For more information about Amazon Redshift resource types and constructing ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-access-control-overview.html#redshift-iam-access-control-specify-actions">Specifying Policy Elements: Actions, Effects, Resources, and Principals</a> in the Amazon Redshift Cluster Management Guide. </p>
  ##   Version: string (required)
  var query_21628281 = newJObject()
  if TagValues != nil:
    query_21628281.add "TagValues", TagValues
  add(query_21628281, "MaxRecords", newJInt(MaxRecords))
  add(query_21628281, "ResourceName", newJString(ResourceName))
  add(query_21628281, "Action", newJString(Action))
  add(query_21628281, "Marker", newJString(Marker))
  if TagKeys != nil:
    query_21628281.add "TagKeys", TagKeys
  add(query_21628281, "ResourceType", newJString(ResourceType))
  add(query_21628281, "Version", newJString(Version))
  result = call_21628280.call(nil, query_21628281, nil, nil, nil)

var getDescribeTags* = Call_GetDescribeTags_21628261(name: "getDescribeTags",
    meth: HttpMethod.HttpGet, host: "redshift.amazonaws.com",
    route: "/#Action=DescribeTags", validator: validate_GetDescribeTags_21628262,
    base: "/", makeUrl: url_GetDescribeTags_21628263,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDisableLogging_21628320 = ref object of OpenApiRestCall_21625418
proc url_PostDisableLogging_21628322(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDisableLogging_21628321(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Stops logging information, such as queries and connection attempts, for the specified Amazon Redshift cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628323 = query.getOrDefault("Action")
  valid_21628323 = validateParameter(valid_21628323, JString, required = true,
                                   default = newJString("DisableLogging"))
  if valid_21628323 != nil:
    section.add "Action", valid_21628323
  var valid_21628324 = query.getOrDefault("Version")
  valid_21628324 = validateParameter(valid_21628324, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628324 != nil:
    section.add "Version", valid_21628324
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628325 = header.getOrDefault("X-Amz-Date")
  valid_21628325 = validateParameter(valid_21628325, JString, required = false,
                                   default = nil)
  if valid_21628325 != nil:
    section.add "X-Amz-Date", valid_21628325
  var valid_21628326 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628326 = validateParameter(valid_21628326, JString, required = false,
                                   default = nil)
  if valid_21628326 != nil:
    section.add "X-Amz-Security-Token", valid_21628326
  var valid_21628327 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628327 = validateParameter(valid_21628327, JString, required = false,
                                   default = nil)
  if valid_21628327 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628327
  var valid_21628328 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628328 = validateParameter(valid_21628328, JString, required = false,
                                   default = nil)
  if valid_21628328 != nil:
    section.add "X-Amz-Algorithm", valid_21628328
  var valid_21628329 = header.getOrDefault("X-Amz-Signature")
  valid_21628329 = validateParameter(valid_21628329, JString, required = false,
                                   default = nil)
  if valid_21628329 != nil:
    section.add "X-Amz-Signature", valid_21628329
  var valid_21628330 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628330 = validateParameter(valid_21628330, JString, required = false,
                                   default = nil)
  if valid_21628330 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628330
  var valid_21628331 = header.getOrDefault("X-Amz-Credential")
  valid_21628331 = validateParameter(valid_21628331, JString, required = false,
                                   default = nil)
  if valid_21628331 != nil:
    section.add "X-Amz-Credential", valid_21628331
  result.add "header", section
  ## parameters in `formData` object:
  ##   ClusterIdentifier: JString (required)
  ##                    : <p>The identifier of the cluster on which logging is to be stopped.</p> <p>Example: <code>examplecluster</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ClusterIdentifier` field"
  var valid_21628332 = formData.getOrDefault("ClusterIdentifier")
  valid_21628332 = validateParameter(valid_21628332, JString, required = true,
                                   default = nil)
  if valid_21628332 != nil:
    section.add "ClusterIdentifier", valid_21628332
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628333: Call_PostDisableLogging_21628320; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Stops logging information, such as queries and connection attempts, for the specified Amazon Redshift cluster.
  ## 
  let valid = call_21628333.validator(path, query, header, formData, body, _)
  let scheme = call_21628333.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628333.makeUrl(scheme.get, call_21628333.host, call_21628333.base,
                               call_21628333.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628333, uri, valid, _)

proc call*(call_21628334: Call_PostDisableLogging_21628320;
          ClusterIdentifier: string; Action: string = "DisableLogging";
          Version: string = "2012-12-01"): Recallable =
  ## postDisableLogging
  ## Stops logging information, such as queries and connection attempts, for the specified Amazon Redshift cluster.
  ##   Action: string (required)
  ##   ClusterIdentifier: string (required)
  ##                    : <p>The identifier of the cluster on which logging is to be stopped.</p> <p>Example: <code>examplecluster</code> </p>
  ##   Version: string (required)
  var query_21628335 = newJObject()
  var formData_21628336 = newJObject()
  add(query_21628335, "Action", newJString(Action))
  add(formData_21628336, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(query_21628335, "Version", newJString(Version))
  result = call_21628334.call(nil, query_21628335, nil, formData_21628336, nil)

var postDisableLogging* = Call_PostDisableLogging_21628320(
    name: "postDisableLogging", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=DisableLogging",
    validator: validate_PostDisableLogging_21628321, base: "/",
    makeUrl: url_PostDisableLogging_21628322, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDisableLogging_21628304 = ref object of OpenApiRestCall_21625418
proc url_GetDisableLogging_21628306(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDisableLogging_21628305(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Stops logging information, such as queries and connection attempts, for the specified Amazon Redshift cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ClusterIdentifier: JString (required)
  ##                    : <p>The identifier of the cluster on which logging is to be stopped.</p> <p>Example: <code>examplecluster</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628307 = query.getOrDefault("Action")
  valid_21628307 = validateParameter(valid_21628307, JString, required = true,
                                   default = newJString("DisableLogging"))
  if valid_21628307 != nil:
    section.add "Action", valid_21628307
  var valid_21628308 = query.getOrDefault("ClusterIdentifier")
  valid_21628308 = validateParameter(valid_21628308, JString, required = true,
                                   default = nil)
  if valid_21628308 != nil:
    section.add "ClusterIdentifier", valid_21628308
  var valid_21628309 = query.getOrDefault("Version")
  valid_21628309 = validateParameter(valid_21628309, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628309 != nil:
    section.add "Version", valid_21628309
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628310 = header.getOrDefault("X-Amz-Date")
  valid_21628310 = validateParameter(valid_21628310, JString, required = false,
                                   default = nil)
  if valid_21628310 != nil:
    section.add "X-Amz-Date", valid_21628310
  var valid_21628311 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628311 = validateParameter(valid_21628311, JString, required = false,
                                   default = nil)
  if valid_21628311 != nil:
    section.add "X-Amz-Security-Token", valid_21628311
  var valid_21628312 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628312 = validateParameter(valid_21628312, JString, required = false,
                                   default = nil)
  if valid_21628312 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628312
  var valid_21628313 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628313 = validateParameter(valid_21628313, JString, required = false,
                                   default = nil)
  if valid_21628313 != nil:
    section.add "X-Amz-Algorithm", valid_21628313
  var valid_21628314 = header.getOrDefault("X-Amz-Signature")
  valid_21628314 = validateParameter(valid_21628314, JString, required = false,
                                   default = nil)
  if valid_21628314 != nil:
    section.add "X-Amz-Signature", valid_21628314
  var valid_21628315 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628315 = validateParameter(valid_21628315, JString, required = false,
                                   default = nil)
  if valid_21628315 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628315
  var valid_21628316 = header.getOrDefault("X-Amz-Credential")
  valid_21628316 = validateParameter(valid_21628316, JString, required = false,
                                   default = nil)
  if valid_21628316 != nil:
    section.add "X-Amz-Credential", valid_21628316
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628317: Call_GetDisableLogging_21628304; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Stops logging information, such as queries and connection attempts, for the specified Amazon Redshift cluster.
  ## 
  let valid = call_21628317.validator(path, query, header, formData, body, _)
  let scheme = call_21628317.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628317.makeUrl(scheme.get, call_21628317.host, call_21628317.base,
                               call_21628317.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628317, uri, valid, _)

proc call*(call_21628318: Call_GetDisableLogging_21628304;
          ClusterIdentifier: string; Action: string = "DisableLogging";
          Version: string = "2012-12-01"): Recallable =
  ## getDisableLogging
  ## Stops logging information, such as queries and connection attempts, for the specified Amazon Redshift cluster.
  ##   Action: string (required)
  ##   ClusterIdentifier: string (required)
  ##                    : <p>The identifier of the cluster on which logging is to be stopped.</p> <p>Example: <code>examplecluster</code> </p>
  ##   Version: string (required)
  var query_21628319 = newJObject()
  add(query_21628319, "Action", newJString(Action))
  add(query_21628319, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(query_21628319, "Version", newJString(Version))
  result = call_21628318.call(nil, query_21628319, nil, nil, nil)

var getDisableLogging* = Call_GetDisableLogging_21628304(name: "getDisableLogging",
    meth: HttpMethod.HttpGet, host: "redshift.amazonaws.com",
    route: "/#Action=DisableLogging", validator: validate_GetDisableLogging_21628305,
    base: "/", makeUrl: url_GetDisableLogging_21628306,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDisableSnapshotCopy_21628353 = ref object of OpenApiRestCall_21625418
proc url_PostDisableSnapshotCopy_21628355(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDisableSnapshotCopy_21628354(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Disables the automatic copying of snapshots from one region to another region for a specified cluster.</p> <p>If your cluster and its snapshots are encrypted using a customer master key (CMK) from AWS KMS, use <a>DeleteSnapshotCopyGrant</a> to delete the grant that grants Amazon Redshift permission to the CMK in the destination region. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628356 = query.getOrDefault("Action")
  valid_21628356 = validateParameter(valid_21628356, JString, required = true,
                                   default = newJString("DisableSnapshotCopy"))
  if valid_21628356 != nil:
    section.add "Action", valid_21628356
  var valid_21628357 = query.getOrDefault("Version")
  valid_21628357 = validateParameter(valid_21628357, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628357 != nil:
    section.add "Version", valid_21628357
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628358 = header.getOrDefault("X-Amz-Date")
  valid_21628358 = validateParameter(valid_21628358, JString, required = false,
                                   default = nil)
  if valid_21628358 != nil:
    section.add "X-Amz-Date", valid_21628358
  var valid_21628359 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628359 = validateParameter(valid_21628359, JString, required = false,
                                   default = nil)
  if valid_21628359 != nil:
    section.add "X-Amz-Security-Token", valid_21628359
  var valid_21628360 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628360 = validateParameter(valid_21628360, JString, required = false,
                                   default = nil)
  if valid_21628360 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628360
  var valid_21628361 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628361 = validateParameter(valid_21628361, JString, required = false,
                                   default = nil)
  if valid_21628361 != nil:
    section.add "X-Amz-Algorithm", valid_21628361
  var valid_21628362 = header.getOrDefault("X-Amz-Signature")
  valid_21628362 = validateParameter(valid_21628362, JString, required = false,
                                   default = nil)
  if valid_21628362 != nil:
    section.add "X-Amz-Signature", valid_21628362
  var valid_21628363 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628363 = validateParameter(valid_21628363, JString, required = false,
                                   default = nil)
  if valid_21628363 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628363
  var valid_21628364 = header.getOrDefault("X-Amz-Credential")
  valid_21628364 = validateParameter(valid_21628364, JString, required = false,
                                   default = nil)
  if valid_21628364 != nil:
    section.add "X-Amz-Credential", valid_21628364
  result.add "header", section
  ## parameters in `formData` object:
  ##   ClusterIdentifier: JString (required)
  ##                    : <p>The unique identifier of the source cluster that you want to disable copying of snapshots to a destination region.</p> <p>Constraints: Must be the valid name of an existing cluster that has cross-region snapshot copy enabled.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ClusterIdentifier` field"
  var valid_21628365 = formData.getOrDefault("ClusterIdentifier")
  valid_21628365 = validateParameter(valid_21628365, JString, required = true,
                                   default = nil)
  if valid_21628365 != nil:
    section.add "ClusterIdentifier", valid_21628365
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628366: Call_PostDisableSnapshotCopy_21628353;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Disables the automatic copying of snapshots from one region to another region for a specified cluster.</p> <p>If your cluster and its snapshots are encrypted using a customer master key (CMK) from AWS KMS, use <a>DeleteSnapshotCopyGrant</a> to delete the grant that grants Amazon Redshift permission to the CMK in the destination region. </p>
  ## 
  let valid = call_21628366.validator(path, query, header, formData, body, _)
  let scheme = call_21628366.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628366.makeUrl(scheme.get, call_21628366.host, call_21628366.base,
                               call_21628366.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628366, uri, valid, _)

proc call*(call_21628367: Call_PostDisableSnapshotCopy_21628353;
          ClusterIdentifier: string; Action: string = "DisableSnapshotCopy";
          Version: string = "2012-12-01"): Recallable =
  ## postDisableSnapshotCopy
  ## <p>Disables the automatic copying of snapshots from one region to another region for a specified cluster.</p> <p>If your cluster and its snapshots are encrypted using a customer master key (CMK) from AWS KMS, use <a>DeleteSnapshotCopyGrant</a> to delete the grant that grants Amazon Redshift permission to the CMK in the destination region. </p>
  ##   Action: string (required)
  ##   ClusterIdentifier: string (required)
  ##                    : <p>The unique identifier of the source cluster that you want to disable copying of snapshots to a destination region.</p> <p>Constraints: Must be the valid name of an existing cluster that has cross-region snapshot copy enabled.</p>
  ##   Version: string (required)
  var query_21628368 = newJObject()
  var formData_21628369 = newJObject()
  add(query_21628368, "Action", newJString(Action))
  add(formData_21628369, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(query_21628368, "Version", newJString(Version))
  result = call_21628367.call(nil, query_21628368, nil, formData_21628369, nil)

var postDisableSnapshotCopy* = Call_PostDisableSnapshotCopy_21628353(
    name: "postDisableSnapshotCopy", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=DisableSnapshotCopy",
    validator: validate_PostDisableSnapshotCopy_21628354, base: "/",
    makeUrl: url_PostDisableSnapshotCopy_21628355,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDisableSnapshotCopy_21628337 = ref object of OpenApiRestCall_21625418
proc url_GetDisableSnapshotCopy_21628339(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDisableSnapshotCopy_21628338(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Disables the automatic copying of snapshots from one region to another region for a specified cluster.</p> <p>If your cluster and its snapshots are encrypted using a customer master key (CMK) from AWS KMS, use <a>DeleteSnapshotCopyGrant</a> to delete the grant that grants Amazon Redshift permission to the CMK in the destination region. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ClusterIdentifier: JString (required)
  ##                    : <p>The unique identifier of the source cluster that you want to disable copying of snapshots to a destination region.</p> <p>Constraints: Must be the valid name of an existing cluster that has cross-region snapshot copy enabled.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628340 = query.getOrDefault("Action")
  valid_21628340 = validateParameter(valid_21628340, JString, required = true,
                                   default = newJString("DisableSnapshotCopy"))
  if valid_21628340 != nil:
    section.add "Action", valid_21628340
  var valid_21628341 = query.getOrDefault("ClusterIdentifier")
  valid_21628341 = validateParameter(valid_21628341, JString, required = true,
                                   default = nil)
  if valid_21628341 != nil:
    section.add "ClusterIdentifier", valid_21628341
  var valid_21628342 = query.getOrDefault("Version")
  valid_21628342 = validateParameter(valid_21628342, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628342 != nil:
    section.add "Version", valid_21628342
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628343 = header.getOrDefault("X-Amz-Date")
  valid_21628343 = validateParameter(valid_21628343, JString, required = false,
                                   default = nil)
  if valid_21628343 != nil:
    section.add "X-Amz-Date", valid_21628343
  var valid_21628344 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628344 = validateParameter(valid_21628344, JString, required = false,
                                   default = nil)
  if valid_21628344 != nil:
    section.add "X-Amz-Security-Token", valid_21628344
  var valid_21628345 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628345 = validateParameter(valid_21628345, JString, required = false,
                                   default = nil)
  if valid_21628345 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628345
  var valid_21628346 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628346 = validateParameter(valid_21628346, JString, required = false,
                                   default = nil)
  if valid_21628346 != nil:
    section.add "X-Amz-Algorithm", valid_21628346
  var valid_21628347 = header.getOrDefault("X-Amz-Signature")
  valid_21628347 = validateParameter(valid_21628347, JString, required = false,
                                   default = nil)
  if valid_21628347 != nil:
    section.add "X-Amz-Signature", valid_21628347
  var valid_21628348 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628348 = validateParameter(valid_21628348, JString, required = false,
                                   default = nil)
  if valid_21628348 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628348
  var valid_21628349 = header.getOrDefault("X-Amz-Credential")
  valid_21628349 = validateParameter(valid_21628349, JString, required = false,
                                   default = nil)
  if valid_21628349 != nil:
    section.add "X-Amz-Credential", valid_21628349
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628350: Call_GetDisableSnapshotCopy_21628337;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Disables the automatic copying of snapshots from one region to another region for a specified cluster.</p> <p>If your cluster and its snapshots are encrypted using a customer master key (CMK) from AWS KMS, use <a>DeleteSnapshotCopyGrant</a> to delete the grant that grants Amazon Redshift permission to the CMK in the destination region. </p>
  ## 
  let valid = call_21628350.validator(path, query, header, formData, body, _)
  let scheme = call_21628350.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628350.makeUrl(scheme.get, call_21628350.host, call_21628350.base,
                               call_21628350.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628350, uri, valid, _)

proc call*(call_21628351: Call_GetDisableSnapshotCopy_21628337;
          ClusterIdentifier: string; Action: string = "DisableSnapshotCopy";
          Version: string = "2012-12-01"): Recallable =
  ## getDisableSnapshotCopy
  ## <p>Disables the automatic copying of snapshots from one region to another region for a specified cluster.</p> <p>If your cluster and its snapshots are encrypted using a customer master key (CMK) from AWS KMS, use <a>DeleteSnapshotCopyGrant</a> to delete the grant that grants Amazon Redshift permission to the CMK in the destination region. </p>
  ##   Action: string (required)
  ##   ClusterIdentifier: string (required)
  ##                    : <p>The unique identifier of the source cluster that you want to disable copying of snapshots to a destination region.</p> <p>Constraints: Must be the valid name of an existing cluster that has cross-region snapshot copy enabled.</p>
  ##   Version: string (required)
  var query_21628352 = newJObject()
  add(query_21628352, "Action", newJString(Action))
  add(query_21628352, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(query_21628352, "Version", newJString(Version))
  result = call_21628351.call(nil, query_21628352, nil, nil, nil)

var getDisableSnapshotCopy* = Call_GetDisableSnapshotCopy_21628337(
    name: "getDisableSnapshotCopy", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=DisableSnapshotCopy",
    validator: validate_GetDisableSnapshotCopy_21628338, base: "/",
    makeUrl: url_GetDisableSnapshotCopy_21628339,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostEnableLogging_21628388 = ref object of OpenApiRestCall_21625418
proc url_PostEnableLogging_21628390(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostEnableLogging_21628389(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Starts logging information, such as queries and connection attempts, for the specified Amazon Redshift cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628391 = query.getOrDefault("Action")
  valid_21628391 = validateParameter(valid_21628391, JString, required = true,
                                   default = newJString("EnableLogging"))
  if valid_21628391 != nil:
    section.add "Action", valid_21628391
  var valid_21628392 = query.getOrDefault("Version")
  valid_21628392 = validateParameter(valid_21628392, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628392 != nil:
    section.add "Version", valid_21628392
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628393 = header.getOrDefault("X-Amz-Date")
  valid_21628393 = validateParameter(valid_21628393, JString, required = false,
                                   default = nil)
  if valid_21628393 != nil:
    section.add "X-Amz-Date", valid_21628393
  var valid_21628394 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628394 = validateParameter(valid_21628394, JString, required = false,
                                   default = nil)
  if valid_21628394 != nil:
    section.add "X-Amz-Security-Token", valid_21628394
  var valid_21628395 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628395 = validateParameter(valid_21628395, JString, required = false,
                                   default = nil)
  if valid_21628395 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628395
  var valid_21628396 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628396 = validateParameter(valid_21628396, JString, required = false,
                                   default = nil)
  if valid_21628396 != nil:
    section.add "X-Amz-Algorithm", valid_21628396
  var valid_21628397 = header.getOrDefault("X-Amz-Signature")
  valid_21628397 = validateParameter(valid_21628397, JString, required = false,
                                   default = nil)
  if valid_21628397 != nil:
    section.add "X-Amz-Signature", valid_21628397
  var valid_21628398 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628398 = validateParameter(valid_21628398, JString, required = false,
                                   default = nil)
  if valid_21628398 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628398
  var valid_21628399 = header.getOrDefault("X-Amz-Credential")
  valid_21628399 = validateParameter(valid_21628399, JString, required = false,
                                   default = nil)
  if valid_21628399 != nil:
    section.add "X-Amz-Credential", valid_21628399
  result.add "header", section
  ## parameters in `formData` object:
  ##   S3KeyPrefix: JString
  ##              : <p>The prefix applied to the log file names.</p> <p>Constraints:</p> <ul> <li> <p>Cannot exceed 512 characters</p> </li> <li> <p>Cannot contain spaces( ), double quotes ("), single quotes ('), a backslash (\), or control characters. The hexadecimal codes for invalid characters are: </p> <ul> <li> <p>x00 to x20</p> </li> <li> <p>x22</p> </li> <li> <p>x27</p> </li> <li> <p>x5c</p> </li> <li> <p>x7f or larger</p> </li> </ul> </li> </ul>
  ##   BucketName: JString (required)
  ##             : <p>The name of an existing S3 bucket where the log files are to be stored.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the same region as the cluster</p> </li> <li> <p>The cluster must have read bucket and put object permissions</p> </li> </ul>
  ##   ClusterIdentifier: JString (required)
  ##                    : <p>The identifier of the cluster on which logging is to be started.</p> <p>Example: <code>examplecluster</code> </p>
  section = newJObject()
  var valid_21628400 = formData.getOrDefault("S3KeyPrefix")
  valid_21628400 = validateParameter(valid_21628400, JString, required = false,
                                   default = nil)
  if valid_21628400 != nil:
    section.add "S3KeyPrefix", valid_21628400
  assert formData != nil,
        "formData argument is necessary due to required `BucketName` field"
  var valid_21628401 = formData.getOrDefault("BucketName")
  valid_21628401 = validateParameter(valid_21628401, JString, required = true,
                                   default = nil)
  if valid_21628401 != nil:
    section.add "BucketName", valid_21628401
  var valid_21628402 = formData.getOrDefault("ClusterIdentifier")
  valid_21628402 = validateParameter(valid_21628402, JString, required = true,
                                   default = nil)
  if valid_21628402 != nil:
    section.add "ClusterIdentifier", valid_21628402
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628403: Call_PostEnableLogging_21628388; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Starts logging information, such as queries and connection attempts, for the specified Amazon Redshift cluster.
  ## 
  let valid = call_21628403.validator(path, query, header, formData, body, _)
  let scheme = call_21628403.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628403.makeUrl(scheme.get, call_21628403.host, call_21628403.base,
                               call_21628403.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628403, uri, valid, _)

proc call*(call_21628404: Call_PostEnableLogging_21628388; BucketName: string;
          ClusterIdentifier: string; S3KeyPrefix: string = "";
          Action: string = "EnableLogging"; Version: string = "2012-12-01"): Recallable =
  ## postEnableLogging
  ## Starts logging information, such as queries and connection attempts, for the specified Amazon Redshift cluster.
  ##   S3KeyPrefix: string
  ##              : <p>The prefix applied to the log file names.</p> <p>Constraints:</p> <ul> <li> <p>Cannot exceed 512 characters</p> </li> <li> <p>Cannot contain spaces( ), double quotes ("), single quotes ('), a backslash (\), or control characters. The hexadecimal codes for invalid characters are: </p> <ul> <li> <p>x00 to x20</p> </li> <li> <p>x22</p> </li> <li> <p>x27</p> </li> <li> <p>x5c</p> </li> <li> <p>x7f or larger</p> </li> </ul> </li> </ul>
  ##   BucketName: string (required)
  ##             : <p>The name of an existing S3 bucket where the log files are to be stored.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the same region as the cluster</p> </li> <li> <p>The cluster must have read bucket and put object permissions</p> </li> </ul>
  ##   Action: string (required)
  ##   ClusterIdentifier: string (required)
  ##                    : <p>The identifier of the cluster on which logging is to be started.</p> <p>Example: <code>examplecluster</code> </p>
  ##   Version: string (required)
  var query_21628405 = newJObject()
  var formData_21628406 = newJObject()
  add(formData_21628406, "S3KeyPrefix", newJString(S3KeyPrefix))
  add(formData_21628406, "BucketName", newJString(BucketName))
  add(query_21628405, "Action", newJString(Action))
  add(formData_21628406, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(query_21628405, "Version", newJString(Version))
  result = call_21628404.call(nil, query_21628405, nil, formData_21628406, nil)

var postEnableLogging* = Call_PostEnableLogging_21628388(name: "postEnableLogging",
    meth: HttpMethod.HttpPost, host: "redshift.amazonaws.com",
    route: "/#Action=EnableLogging", validator: validate_PostEnableLogging_21628389,
    base: "/", makeUrl: url_PostEnableLogging_21628390,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetEnableLogging_21628370 = ref object of OpenApiRestCall_21625418
proc url_GetEnableLogging_21628372(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetEnableLogging_21628371(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Starts logging information, such as queries and connection attempts, for the specified Amazon Redshift cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   S3KeyPrefix: JString
  ##              : <p>The prefix applied to the log file names.</p> <p>Constraints:</p> <ul> <li> <p>Cannot exceed 512 characters</p> </li> <li> <p>Cannot contain spaces( ), double quotes ("), single quotes ('), a backslash (\), or control characters. The hexadecimal codes for invalid characters are: </p> <ul> <li> <p>x00 to x20</p> </li> <li> <p>x22</p> </li> <li> <p>x27</p> </li> <li> <p>x5c</p> </li> <li> <p>x7f or larger</p> </li> </ul> </li> </ul>
  ##   BucketName: JString (required)
  ##             : <p>The name of an existing S3 bucket where the log files are to be stored.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the same region as the cluster</p> </li> <li> <p>The cluster must have read bucket and put object permissions</p> </li> </ul>
  ##   Action: JString (required)
  ##   ClusterIdentifier: JString (required)
  ##                    : <p>The identifier of the cluster on which logging is to be started.</p> <p>Example: <code>examplecluster</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628373 = query.getOrDefault("S3KeyPrefix")
  valid_21628373 = validateParameter(valid_21628373, JString, required = false,
                                   default = nil)
  if valid_21628373 != nil:
    section.add "S3KeyPrefix", valid_21628373
  assert query != nil,
        "query argument is necessary due to required `BucketName` field"
  var valid_21628374 = query.getOrDefault("BucketName")
  valid_21628374 = validateParameter(valid_21628374, JString, required = true,
                                   default = nil)
  if valid_21628374 != nil:
    section.add "BucketName", valid_21628374
  var valid_21628375 = query.getOrDefault("Action")
  valid_21628375 = validateParameter(valid_21628375, JString, required = true,
                                   default = newJString("EnableLogging"))
  if valid_21628375 != nil:
    section.add "Action", valid_21628375
  var valid_21628376 = query.getOrDefault("ClusterIdentifier")
  valid_21628376 = validateParameter(valid_21628376, JString, required = true,
                                   default = nil)
  if valid_21628376 != nil:
    section.add "ClusterIdentifier", valid_21628376
  var valid_21628377 = query.getOrDefault("Version")
  valid_21628377 = validateParameter(valid_21628377, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628377 != nil:
    section.add "Version", valid_21628377
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628378 = header.getOrDefault("X-Amz-Date")
  valid_21628378 = validateParameter(valid_21628378, JString, required = false,
                                   default = nil)
  if valid_21628378 != nil:
    section.add "X-Amz-Date", valid_21628378
  var valid_21628379 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628379 = validateParameter(valid_21628379, JString, required = false,
                                   default = nil)
  if valid_21628379 != nil:
    section.add "X-Amz-Security-Token", valid_21628379
  var valid_21628380 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628380 = validateParameter(valid_21628380, JString, required = false,
                                   default = nil)
  if valid_21628380 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628380
  var valid_21628381 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628381 = validateParameter(valid_21628381, JString, required = false,
                                   default = nil)
  if valid_21628381 != nil:
    section.add "X-Amz-Algorithm", valid_21628381
  var valid_21628382 = header.getOrDefault("X-Amz-Signature")
  valid_21628382 = validateParameter(valid_21628382, JString, required = false,
                                   default = nil)
  if valid_21628382 != nil:
    section.add "X-Amz-Signature", valid_21628382
  var valid_21628383 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628383 = validateParameter(valid_21628383, JString, required = false,
                                   default = nil)
  if valid_21628383 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628383
  var valid_21628384 = header.getOrDefault("X-Amz-Credential")
  valid_21628384 = validateParameter(valid_21628384, JString, required = false,
                                   default = nil)
  if valid_21628384 != nil:
    section.add "X-Amz-Credential", valid_21628384
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628385: Call_GetEnableLogging_21628370; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Starts logging information, such as queries and connection attempts, for the specified Amazon Redshift cluster.
  ## 
  let valid = call_21628385.validator(path, query, header, formData, body, _)
  let scheme = call_21628385.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628385.makeUrl(scheme.get, call_21628385.host, call_21628385.base,
                               call_21628385.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628385, uri, valid, _)

proc call*(call_21628386: Call_GetEnableLogging_21628370; BucketName: string;
          ClusterIdentifier: string; S3KeyPrefix: string = "";
          Action: string = "EnableLogging"; Version: string = "2012-12-01"): Recallable =
  ## getEnableLogging
  ## Starts logging information, such as queries and connection attempts, for the specified Amazon Redshift cluster.
  ##   S3KeyPrefix: string
  ##              : <p>The prefix applied to the log file names.</p> <p>Constraints:</p> <ul> <li> <p>Cannot exceed 512 characters</p> </li> <li> <p>Cannot contain spaces( ), double quotes ("), single quotes ('), a backslash (\), or control characters. The hexadecimal codes for invalid characters are: </p> <ul> <li> <p>x00 to x20</p> </li> <li> <p>x22</p> </li> <li> <p>x27</p> </li> <li> <p>x5c</p> </li> <li> <p>x7f or larger</p> </li> </ul> </li> </ul>
  ##   BucketName: string (required)
  ##             : <p>The name of an existing S3 bucket where the log files are to be stored.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the same region as the cluster</p> </li> <li> <p>The cluster must have read bucket and put object permissions</p> </li> </ul>
  ##   Action: string (required)
  ##   ClusterIdentifier: string (required)
  ##                    : <p>The identifier of the cluster on which logging is to be started.</p> <p>Example: <code>examplecluster</code> </p>
  ##   Version: string (required)
  var query_21628387 = newJObject()
  add(query_21628387, "S3KeyPrefix", newJString(S3KeyPrefix))
  add(query_21628387, "BucketName", newJString(BucketName))
  add(query_21628387, "Action", newJString(Action))
  add(query_21628387, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(query_21628387, "Version", newJString(Version))
  result = call_21628386.call(nil, query_21628387, nil, nil, nil)

var getEnableLogging* = Call_GetEnableLogging_21628370(name: "getEnableLogging",
    meth: HttpMethod.HttpGet, host: "redshift.amazonaws.com",
    route: "/#Action=EnableLogging", validator: validate_GetEnableLogging_21628371,
    base: "/", makeUrl: url_GetEnableLogging_21628372,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostEnableSnapshotCopy_21628427 = ref object of OpenApiRestCall_21625418
proc url_PostEnableSnapshotCopy_21628429(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostEnableSnapshotCopy_21628428(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Enables the automatic copy of snapshots from one region to another region for a specified cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628430 = query.getOrDefault("Action")
  valid_21628430 = validateParameter(valid_21628430, JString, required = true,
                                   default = newJString("EnableSnapshotCopy"))
  if valid_21628430 != nil:
    section.add "Action", valid_21628430
  var valid_21628431 = query.getOrDefault("Version")
  valid_21628431 = validateParameter(valid_21628431, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628431 != nil:
    section.add "Version", valid_21628431
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628432 = header.getOrDefault("X-Amz-Date")
  valid_21628432 = validateParameter(valid_21628432, JString, required = false,
                                   default = nil)
  if valid_21628432 != nil:
    section.add "X-Amz-Date", valid_21628432
  var valid_21628433 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628433 = validateParameter(valid_21628433, JString, required = false,
                                   default = nil)
  if valid_21628433 != nil:
    section.add "X-Amz-Security-Token", valid_21628433
  var valid_21628434 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628434 = validateParameter(valid_21628434, JString, required = false,
                                   default = nil)
  if valid_21628434 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628434
  var valid_21628435 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628435 = validateParameter(valid_21628435, JString, required = false,
                                   default = nil)
  if valid_21628435 != nil:
    section.add "X-Amz-Algorithm", valid_21628435
  var valid_21628436 = header.getOrDefault("X-Amz-Signature")
  valid_21628436 = validateParameter(valid_21628436, JString, required = false,
                                   default = nil)
  if valid_21628436 != nil:
    section.add "X-Amz-Signature", valid_21628436
  var valid_21628437 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628437 = validateParameter(valid_21628437, JString, required = false,
                                   default = nil)
  if valid_21628437 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628437
  var valid_21628438 = header.getOrDefault("X-Amz-Credential")
  valid_21628438 = validateParameter(valid_21628438, JString, required = false,
                                   default = nil)
  if valid_21628438 != nil:
    section.add "X-Amz-Credential", valid_21628438
  result.add "header", section
  ## parameters in `formData` object:
  ##   RetentionPeriod: JInt
  ##                  : <p>The number of days to retain automated snapshots in the destination region after they are copied from the source region.</p> <p>Default: 7.</p> <p>Constraints: Must be at least 1 and no more than 35.</p>
  ##   SnapshotCopyGrantName: JString
  ##                        : The name of the snapshot copy grant to use when snapshots of an AWS KMS-encrypted cluster are copied to the destination region.
  ##   DestinationRegion: JString (required)
  ##                    : <p>The destination AWS Region that you want to copy snapshots to.</p> <p>Constraints: Must be the name of a valid AWS Region. For more information, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/rande.html#redshift_region">Regions and Endpoints</a> in the Amazon Web Services General Reference. </p>
  ##   ClusterIdentifier: JString (required)
  ##                    : <p>The unique identifier of the source cluster to copy snapshots from.</p> <p>Constraints: Must be the valid name of an existing cluster that does not already have cross-region snapshot copy enabled.</p>
  ##   ManualSnapshotRetentionPeriod: JInt
  ##                                : <p>The number of days to retain newly copied snapshots in the destination AWS Region after they are copied from the source AWS Region. If the value is -1, the manual snapshot is retained indefinitely. </p> <p>The value must be either -1 or an integer between 1 and 3,653.</p>
  section = newJObject()
  var valid_21628439 = formData.getOrDefault("RetentionPeriod")
  valid_21628439 = validateParameter(valid_21628439, JInt, required = false,
                                   default = nil)
  if valid_21628439 != nil:
    section.add "RetentionPeriod", valid_21628439
  var valid_21628440 = formData.getOrDefault("SnapshotCopyGrantName")
  valid_21628440 = validateParameter(valid_21628440, JString, required = false,
                                   default = nil)
  if valid_21628440 != nil:
    section.add "SnapshotCopyGrantName", valid_21628440
  assert formData != nil, "formData argument is necessary due to required `DestinationRegion` field"
  var valid_21628441 = formData.getOrDefault("DestinationRegion")
  valid_21628441 = validateParameter(valid_21628441, JString, required = true,
                                   default = nil)
  if valid_21628441 != nil:
    section.add "DestinationRegion", valid_21628441
  var valid_21628442 = formData.getOrDefault("ClusterIdentifier")
  valid_21628442 = validateParameter(valid_21628442, JString, required = true,
                                   default = nil)
  if valid_21628442 != nil:
    section.add "ClusterIdentifier", valid_21628442
  var valid_21628443 = formData.getOrDefault("ManualSnapshotRetentionPeriod")
  valid_21628443 = validateParameter(valid_21628443, JInt, required = false,
                                   default = nil)
  if valid_21628443 != nil:
    section.add "ManualSnapshotRetentionPeriod", valid_21628443
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628444: Call_PostEnableSnapshotCopy_21628427;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Enables the automatic copy of snapshots from one region to another region for a specified cluster.
  ## 
  let valid = call_21628444.validator(path, query, header, formData, body, _)
  let scheme = call_21628444.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628444.makeUrl(scheme.get, call_21628444.host, call_21628444.base,
                               call_21628444.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628444, uri, valid, _)

proc call*(call_21628445: Call_PostEnableSnapshotCopy_21628427;
          DestinationRegion: string; ClusterIdentifier: string;
          RetentionPeriod: int = 0; Action: string = "EnableSnapshotCopy";
          SnapshotCopyGrantName: string = "";
          ManualSnapshotRetentionPeriod: int = 0; Version: string = "2012-12-01"): Recallable =
  ## postEnableSnapshotCopy
  ## Enables the automatic copy of snapshots from one region to another region for a specified cluster.
  ##   RetentionPeriod: int
  ##                  : <p>The number of days to retain automated snapshots in the destination region after they are copied from the source region.</p> <p>Default: 7.</p> <p>Constraints: Must be at least 1 and no more than 35.</p>
  ##   Action: string (required)
  ##   SnapshotCopyGrantName: string
  ##                        : The name of the snapshot copy grant to use when snapshots of an AWS KMS-encrypted cluster are copied to the destination region.
  ##   DestinationRegion: string (required)
  ##                    : <p>The destination AWS Region that you want to copy snapshots to.</p> <p>Constraints: Must be the name of a valid AWS Region. For more information, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/rande.html#redshift_region">Regions and Endpoints</a> in the Amazon Web Services General Reference. </p>
  ##   ClusterIdentifier: string (required)
  ##                    : <p>The unique identifier of the source cluster to copy snapshots from.</p> <p>Constraints: Must be the valid name of an existing cluster that does not already have cross-region snapshot copy enabled.</p>
  ##   ManualSnapshotRetentionPeriod: int
  ##                                : <p>The number of days to retain newly copied snapshots in the destination AWS Region after they are copied from the source AWS Region. If the value is -1, the manual snapshot is retained indefinitely. </p> <p>The value must be either -1 or an integer between 1 and 3,653.</p>
  ##   Version: string (required)
  var query_21628446 = newJObject()
  var formData_21628447 = newJObject()
  add(formData_21628447, "RetentionPeriod", newJInt(RetentionPeriod))
  add(query_21628446, "Action", newJString(Action))
  add(formData_21628447, "SnapshotCopyGrantName",
      newJString(SnapshotCopyGrantName))
  add(formData_21628447, "DestinationRegion", newJString(DestinationRegion))
  add(formData_21628447, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(formData_21628447, "ManualSnapshotRetentionPeriod",
      newJInt(ManualSnapshotRetentionPeriod))
  add(query_21628446, "Version", newJString(Version))
  result = call_21628445.call(nil, query_21628446, nil, formData_21628447, nil)

var postEnableSnapshotCopy* = Call_PostEnableSnapshotCopy_21628427(
    name: "postEnableSnapshotCopy", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=EnableSnapshotCopy",
    validator: validate_PostEnableSnapshotCopy_21628428, base: "/",
    makeUrl: url_PostEnableSnapshotCopy_21628429,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetEnableSnapshotCopy_21628407 = ref object of OpenApiRestCall_21625418
proc url_GetEnableSnapshotCopy_21628409(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetEnableSnapshotCopy_21628408(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Enables the automatic copy of snapshots from one region to another region for a specified cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DestinationRegion: JString (required)
  ##                    : <p>The destination AWS Region that you want to copy snapshots to.</p> <p>Constraints: Must be the name of a valid AWS Region. For more information, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/rande.html#redshift_region">Regions and Endpoints</a> in the Amazon Web Services General Reference. </p>
  ##   Action: JString (required)
  ##   ClusterIdentifier: JString (required)
  ##                    : <p>The unique identifier of the source cluster to copy snapshots from.</p> <p>Constraints: Must be the valid name of an existing cluster that does not already have cross-region snapshot copy enabled.</p>
  ##   SnapshotCopyGrantName: JString
  ##                        : The name of the snapshot copy grant to use when snapshots of an AWS KMS-encrypted cluster are copied to the destination region.
  ##   RetentionPeriod: JInt
  ##                  : <p>The number of days to retain automated snapshots in the destination region after they are copied from the source region.</p> <p>Default: 7.</p> <p>Constraints: Must be at least 1 and no more than 35.</p>
  ##   Version: JString (required)
  ##   ManualSnapshotRetentionPeriod: JInt
  ##                                : <p>The number of days to retain newly copied snapshots in the destination AWS Region after they are copied from the source AWS Region. If the value is -1, the manual snapshot is retained indefinitely. </p> <p>The value must be either -1 or an integer between 1 and 3,653.</p>
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `DestinationRegion` field"
  var valid_21628410 = query.getOrDefault("DestinationRegion")
  valid_21628410 = validateParameter(valid_21628410, JString, required = true,
                                   default = nil)
  if valid_21628410 != nil:
    section.add "DestinationRegion", valid_21628410
  var valid_21628411 = query.getOrDefault("Action")
  valid_21628411 = validateParameter(valid_21628411, JString, required = true,
                                   default = newJString("EnableSnapshotCopy"))
  if valid_21628411 != nil:
    section.add "Action", valid_21628411
  var valid_21628412 = query.getOrDefault("ClusterIdentifier")
  valid_21628412 = validateParameter(valid_21628412, JString, required = true,
                                   default = nil)
  if valid_21628412 != nil:
    section.add "ClusterIdentifier", valid_21628412
  var valid_21628413 = query.getOrDefault("SnapshotCopyGrantName")
  valid_21628413 = validateParameter(valid_21628413, JString, required = false,
                                   default = nil)
  if valid_21628413 != nil:
    section.add "SnapshotCopyGrantName", valid_21628413
  var valid_21628414 = query.getOrDefault("RetentionPeriod")
  valid_21628414 = validateParameter(valid_21628414, JInt, required = false,
                                   default = nil)
  if valid_21628414 != nil:
    section.add "RetentionPeriod", valid_21628414
  var valid_21628415 = query.getOrDefault("Version")
  valid_21628415 = validateParameter(valid_21628415, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628415 != nil:
    section.add "Version", valid_21628415
  var valid_21628416 = query.getOrDefault("ManualSnapshotRetentionPeriod")
  valid_21628416 = validateParameter(valid_21628416, JInt, required = false,
                                   default = nil)
  if valid_21628416 != nil:
    section.add "ManualSnapshotRetentionPeriod", valid_21628416
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628417 = header.getOrDefault("X-Amz-Date")
  valid_21628417 = validateParameter(valid_21628417, JString, required = false,
                                   default = nil)
  if valid_21628417 != nil:
    section.add "X-Amz-Date", valid_21628417
  var valid_21628418 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628418 = validateParameter(valid_21628418, JString, required = false,
                                   default = nil)
  if valid_21628418 != nil:
    section.add "X-Amz-Security-Token", valid_21628418
  var valid_21628419 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628419 = validateParameter(valid_21628419, JString, required = false,
                                   default = nil)
  if valid_21628419 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628419
  var valid_21628420 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628420 = validateParameter(valid_21628420, JString, required = false,
                                   default = nil)
  if valid_21628420 != nil:
    section.add "X-Amz-Algorithm", valid_21628420
  var valid_21628421 = header.getOrDefault("X-Amz-Signature")
  valid_21628421 = validateParameter(valid_21628421, JString, required = false,
                                   default = nil)
  if valid_21628421 != nil:
    section.add "X-Amz-Signature", valid_21628421
  var valid_21628422 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628422 = validateParameter(valid_21628422, JString, required = false,
                                   default = nil)
  if valid_21628422 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628422
  var valid_21628423 = header.getOrDefault("X-Amz-Credential")
  valid_21628423 = validateParameter(valid_21628423, JString, required = false,
                                   default = nil)
  if valid_21628423 != nil:
    section.add "X-Amz-Credential", valid_21628423
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628424: Call_GetEnableSnapshotCopy_21628407;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Enables the automatic copy of snapshots from one region to another region for a specified cluster.
  ## 
  let valid = call_21628424.validator(path, query, header, formData, body, _)
  let scheme = call_21628424.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628424.makeUrl(scheme.get, call_21628424.host, call_21628424.base,
                               call_21628424.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628424, uri, valid, _)

proc call*(call_21628425: Call_GetEnableSnapshotCopy_21628407;
          DestinationRegion: string; ClusterIdentifier: string;
          Action: string = "EnableSnapshotCopy"; SnapshotCopyGrantName: string = "";
          RetentionPeriod: int = 0; Version: string = "2012-12-01";
          ManualSnapshotRetentionPeriod: int = 0): Recallable =
  ## getEnableSnapshotCopy
  ## Enables the automatic copy of snapshots from one region to another region for a specified cluster.
  ##   DestinationRegion: string (required)
  ##                    : <p>The destination AWS Region that you want to copy snapshots to.</p> <p>Constraints: Must be the name of a valid AWS Region. For more information, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/rande.html#redshift_region">Regions and Endpoints</a> in the Amazon Web Services General Reference. </p>
  ##   Action: string (required)
  ##   ClusterIdentifier: string (required)
  ##                    : <p>The unique identifier of the source cluster to copy snapshots from.</p> <p>Constraints: Must be the valid name of an existing cluster that does not already have cross-region snapshot copy enabled.</p>
  ##   SnapshotCopyGrantName: string
  ##                        : The name of the snapshot copy grant to use when snapshots of an AWS KMS-encrypted cluster are copied to the destination region.
  ##   RetentionPeriod: int
  ##                  : <p>The number of days to retain automated snapshots in the destination region after they are copied from the source region.</p> <p>Default: 7.</p> <p>Constraints: Must be at least 1 and no more than 35.</p>
  ##   Version: string (required)
  ##   ManualSnapshotRetentionPeriod: int
  ##                                : <p>The number of days to retain newly copied snapshots in the destination AWS Region after they are copied from the source AWS Region. If the value is -1, the manual snapshot is retained indefinitely. </p> <p>The value must be either -1 or an integer between 1 and 3,653.</p>
  var query_21628426 = newJObject()
  add(query_21628426, "DestinationRegion", newJString(DestinationRegion))
  add(query_21628426, "Action", newJString(Action))
  add(query_21628426, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(query_21628426, "SnapshotCopyGrantName", newJString(SnapshotCopyGrantName))
  add(query_21628426, "RetentionPeriod", newJInt(RetentionPeriod))
  add(query_21628426, "Version", newJString(Version))
  add(query_21628426, "ManualSnapshotRetentionPeriod",
      newJInt(ManualSnapshotRetentionPeriod))
  result = call_21628425.call(nil, query_21628426, nil, nil, nil)

var getEnableSnapshotCopy* = Call_GetEnableSnapshotCopy_21628407(
    name: "getEnableSnapshotCopy", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=EnableSnapshotCopy",
    validator: validate_GetEnableSnapshotCopy_21628408, base: "/",
    makeUrl: url_GetEnableSnapshotCopy_21628409,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetClusterCredentials_21628469 = ref object of OpenApiRestCall_21625418
proc url_PostGetClusterCredentials_21628471(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetClusterCredentials_21628470(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Returns a database user name and temporary password with temporary authorization to log on to an Amazon Redshift database. The action returns the database user name prefixed with <code>IAM:</code> if <code>AutoCreate</code> is <code>False</code> or <code>IAMA:</code> if <code>AutoCreate</code> is <code>True</code>. You can optionally specify one or more database user groups that the user will join at log on. By default, the temporary credentials expire in 900 seconds. You can optionally specify a duration between 900 seconds (15 minutes) and 3600 seconds (60 minutes). For more information, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/generating-user-credentials.html">Using IAM Authentication to Generate Database User Credentials</a> in the Amazon Redshift Cluster Management Guide.</p> <p>The AWS Identity and Access Management (IAM)user or role that executes GetClusterCredentials must have an IAM policy attached that allows access to all necessary actions and resources. For more information about permissions, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-access-control-identity-based.html#redshift-policy-resources.getclustercredentials-resources">Resource Policies for GetClusterCredentials</a> in the Amazon Redshift Cluster Management Guide.</p> <p>If the <code>DbGroups</code> parameter is specified, the IAM policy must allow the <code>redshift:JoinGroup</code> action with access to the listed <code>dbgroups</code>. </p> <p>In addition, if the <code>AutoCreate</code> parameter is set to <code>True</code>, then the policy must include the <code>redshift:CreateClusterUser</code> privilege.</p> <p>If the <code>DbName</code> parameter is specified, the IAM policy must allow access to the resource <code>dbname</code> for the specified database name. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628472 = query.getOrDefault("Action")
  valid_21628472 = validateParameter(valid_21628472, JString, required = true, default = newJString(
      "GetClusterCredentials"))
  if valid_21628472 != nil:
    section.add "Action", valid_21628472
  var valid_21628473 = query.getOrDefault("Version")
  valid_21628473 = validateParameter(valid_21628473, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628473 != nil:
    section.add "Version", valid_21628473
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628474 = header.getOrDefault("X-Amz-Date")
  valid_21628474 = validateParameter(valid_21628474, JString, required = false,
                                   default = nil)
  if valid_21628474 != nil:
    section.add "X-Amz-Date", valid_21628474
  var valid_21628475 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628475 = validateParameter(valid_21628475, JString, required = false,
                                   default = nil)
  if valid_21628475 != nil:
    section.add "X-Amz-Security-Token", valid_21628475
  var valid_21628476 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628476 = validateParameter(valid_21628476, JString, required = false,
                                   default = nil)
  if valid_21628476 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628476
  var valid_21628477 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628477 = validateParameter(valid_21628477, JString, required = false,
                                   default = nil)
  if valid_21628477 != nil:
    section.add "X-Amz-Algorithm", valid_21628477
  var valid_21628478 = header.getOrDefault("X-Amz-Signature")
  valid_21628478 = validateParameter(valid_21628478, JString, required = false,
                                   default = nil)
  if valid_21628478 != nil:
    section.add "X-Amz-Signature", valid_21628478
  var valid_21628479 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628479 = validateParameter(valid_21628479, JString, required = false,
                                   default = nil)
  if valid_21628479 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628479
  var valid_21628480 = header.getOrDefault("X-Amz-Credential")
  valid_21628480 = validateParameter(valid_21628480, JString, required = false,
                                   default = nil)
  if valid_21628480 != nil:
    section.add "X-Amz-Credential", valid_21628480
  result.add "header", section
  ## parameters in `formData` object:
  ##   DbUser: JString (required)
  ##         : <p>The name of a database user. If a user name matching <code>DbUser</code> exists in the database, the temporary user credentials have the same permissions as the existing user. If <code>DbUser</code> doesn't exist in the database and <code>Autocreate</code> is <code>True</code>, a new user is created using the value for <code>DbUser</code> with PUBLIC permissions. If a database user matching the value for <code>DbUser</code> doesn't exist and <code>Autocreate</code> is <code>False</code>, then the command succeeds but the connection attempt will fail because the user doesn't exist in the database.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_USER.html">CREATE USER</a> in the Amazon Redshift Database Developer Guide. </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 64 alphanumeric characters or hyphens. The user name can't be <code>PUBLIC</code>.</p> </li> <li> <p>Must contain only lowercase letters, numbers, underscore, plus sign, period (dot), at symbol (@), or hyphen.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Must not contain a colon ( : ) or slash ( / ). </p> </li> <li> <p>Cannot be a reserved word. A list of reserved words can be found in <a 
  ## href="http://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html">Reserved Words</a> in the Amazon Redshift Database Developer Guide.</p> </li> </ul>
  ##   AutoCreate: JBool
  ##             : Create a database user with the name specified for the user named in <code>DbUser</code> if one does not exist.
  ##   ClusterIdentifier: JString (required)
  ##                    : The unique identifier of the cluster that contains the database for which your are requesting credentials. This parameter is case sensitive.
  ##   DbName: JString
  ##         : <p>The name of a database that <code>DbUser</code> is authorized to log on to. If <code>DbName</code> is not specified, <code>DbUser</code> can log on to any existing database.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 64 alphanumeric characters or hyphens</p> </li> <li> <p>Must contain only lowercase letters, numbers, underscore, plus sign, period (dot), at symbol (@), or hyphen.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Must not contain a colon ( : ) or slash ( / ). </p> </li> <li> <p>Cannot be a reserved word. A list of reserved words can be found in <a 
  ## href="http://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html">Reserved Words</a> in the Amazon Redshift Database Developer Guide.</p> </li> </ul>
  ##   DbGroups: JArray
  ##           : <p>A list of the names of existing database groups that the user named in <code>DbUser</code> will join for the current session, in addition to any group memberships for an existing user. If not specified, a new user is added only to PUBLIC.</p> <p>Database group name constraints</p> <ul> <li> <p>Must be 1 to 64 alphanumeric characters or hyphens</p> </li> <li> <p>Must contain only lowercase letters, numbers, underscore, plus sign, period (dot), at symbol (@), or hyphen.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Must not contain a colon ( : ) or slash ( / ). </p> </li> <li> <p>Cannot be a reserved word. A list of reserved words can be found in <a 
  ## href="http://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html">Reserved Words</a> in the Amazon Redshift Database Developer Guide.</p> </li> </ul>
  ##   DurationSeconds: JInt
  ##                  : <p>The number of seconds until the returned temporary password expires.</p> <p>Constraint: minimum 900, maximum 3600.</p> <p>Default: 900</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `DbUser` field"
  var valid_21628481 = formData.getOrDefault("DbUser")
  valid_21628481 = validateParameter(valid_21628481, JString, required = true,
                                   default = nil)
  if valid_21628481 != nil:
    section.add "DbUser", valid_21628481
  var valid_21628482 = formData.getOrDefault("AutoCreate")
  valid_21628482 = validateParameter(valid_21628482, JBool, required = false,
                                   default = nil)
  if valid_21628482 != nil:
    section.add "AutoCreate", valid_21628482
  var valid_21628483 = formData.getOrDefault("ClusterIdentifier")
  valid_21628483 = validateParameter(valid_21628483, JString, required = true,
                                   default = nil)
  if valid_21628483 != nil:
    section.add "ClusterIdentifier", valid_21628483
  var valid_21628484 = formData.getOrDefault("DbName")
  valid_21628484 = validateParameter(valid_21628484, JString, required = false,
                                   default = nil)
  if valid_21628484 != nil:
    section.add "DbName", valid_21628484
  var valid_21628485 = formData.getOrDefault("DbGroups")
  valid_21628485 = validateParameter(valid_21628485, JArray, required = false,
                                   default = nil)
  if valid_21628485 != nil:
    section.add "DbGroups", valid_21628485
  var valid_21628486 = formData.getOrDefault("DurationSeconds")
  valid_21628486 = validateParameter(valid_21628486, JInt, required = false,
                                   default = nil)
  if valid_21628486 != nil:
    section.add "DurationSeconds", valid_21628486
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628487: Call_PostGetClusterCredentials_21628469;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns a database user name and temporary password with temporary authorization to log on to an Amazon Redshift database. The action returns the database user name prefixed with <code>IAM:</code> if <code>AutoCreate</code> is <code>False</code> or <code>IAMA:</code> if <code>AutoCreate</code> is <code>True</code>. You can optionally specify one or more database user groups that the user will join at log on. By default, the temporary credentials expire in 900 seconds. You can optionally specify a duration between 900 seconds (15 minutes) and 3600 seconds (60 minutes). For more information, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/generating-user-credentials.html">Using IAM Authentication to Generate Database User Credentials</a> in the Amazon Redshift Cluster Management Guide.</p> <p>The AWS Identity and Access Management (IAM)user or role that executes GetClusterCredentials must have an IAM policy attached that allows access to all necessary actions and resources. For more information about permissions, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-access-control-identity-based.html#redshift-policy-resources.getclustercredentials-resources">Resource Policies for GetClusterCredentials</a> in the Amazon Redshift Cluster Management Guide.</p> <p>If the <code>DbGroups</code> parameter is specified, the IAM policy must allow the <code>redshift:JoinGroup</code> action with access to the listed <code>dbgroups</code>. </p> <p>In addition, if the <code>AutoCreate</code> parameter is set to <code>True</code>, then the policy must include the <code>redshift:CreateClusterUser</code> privilege.</p> <p>If the <code>DbName</code> parameter is specified, the IAM policy must allow access to the resource <code>dbname</code> for the specified database name. </p>
  ## 
  let valid = call_21628487.validator(path, query, header, formData, body, _)
  let scheme = call_21628487.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628487.makeUrl(scheme.get, call_21628487.host, call_21628487.base,
                               call_21628487.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628487, uri, valid, _)

proc call*(call_21628488: Call_PostGetClusterCredentials_21628469; DbUser: string;
          ClusterIdentifier: string; Action: string = "GetClusterCredentials";
          AutoCreate: bool = false; DbName: string = ""; DbGroups: JsonNode = nil;
          Version: string = "2012-12-01"; DurationSeconds: int = 0): Recallable =
  ## postGetClusterCredentials
  ## <p>Returns a database user name and temporary password with temporary authorization to log on to an Amazon Redshift database. The action returns the database user name prefixed with <code>IAM:</code> if <code>AutoCreate</code> is <code>False</code> or <code>IAMA:</code> if <code>AutoCreate</code> is <code>True</code>. You can optionally specify one or more database user groups that the user will join at log on. By default, the temporary credentials expire in 900 seconds. You can optionally specify a duration between 900 seconds (15 minutes) and 3600 seconds (60 minutes). For more information, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/generating-user-credentials.html">Using IAM Authentication to Generate Database User Credentials</a> in the Amazon Redshift Cluster Management Guide.</p> <p>The AWS Identity and Access Management (IAM)user or role that executes GetClusterCredentials must have an IAM policy attached that allows access to all necessary actions and resources. For more information about permissions, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-access-control-identity-based.html#redshift-policy-resources.getclustercredentials-resources">Resource Policies for GetClusterCredentials</a> in the Amazon Redshift Cluster Management Guide.</p> <p>If the <code>DbGroups</code> parameter is specified, the IAM policy must allow the <code>redshift:JoinGroup</code> action with access to the listed <code>dbgroups</code>. </p> <p>In addition, if the <code>AutoCreate</code> parameter is set to <code>True</code>, then the policy must include the <code>redshift:CreateClusterUser</code> privilege.</p> <p>If the <code>DbName</code> parameter is specified, the IAM policy must allow access to the resource <code>dbname</code> for the specified database name. </p>
  ##   DbUser: string (required)
  ##         : <p>The name of a database user. If a user name matching <code>DbUser</code> exists in the database, the temporary user credentials have the same permissions as the existing user. If <code>DbUser</code> doesn't exist in the database and <code>Autocreate</code> is <code>True</code>, a new user is created using the value for <code>DbUser</code> with PUBLIC permissions. If a database user matching the value for <code>DbUser</code> doesn't exist and <code>Autocreate</code> is <code>False</code>, then the command succeeds but the connection attempt will fail because the user doesn't exist in the database.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_USER.html">CREATE USER</a> in the Amazon Redshift Database Developer Guide. </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 64 alphanumeric characters or hyphens. The user name can't be <code>PUBLIC</code>.</p> </li> <li> <p>Must contain only lowercase letters, numbers, underscore, plus sign, period (dot), at symbol (@), or hyphen.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Must not contain a colon ( : ) or slash ( / ). </p> </li> <li> <p>Cannot be a reserved word. A list of reserved words can be found in <a 
  ## href="http://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html">Reserved Words</a> in the Amazon Redshift Database Developer Guide.</p> </li> </ul>
  ##   Action: string (required)
  ##   AutoCreate: bool
  ##             : Create a database user with the name specified for the user named in <code>DbUser</code> if one does not exist.
  ##   ClusterIdentifier: string (required)
  ##                    : The unique identifier of the cluster that contains the database for which your are requesting credentials. This parameter is case sensitive.
  ##   DbName: string
  ##         : <p>The name of a database that <code>DbUser</code> is authorized to log on to. If <code>DbName</code> is not specified, <code>DbUser</code> can log on to any existing database.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 64 alphanumeric characters or hyphens</p> </li> <li> <p>Must contain only lowercase letters, numbers, underscore, plus sign, period (dot), at symbol (@), or hyphen.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Must not contain a colon ( : ) or slash ( / ). </p> </li> <li> <p>Cannot be a reserved word. A list of reserved words can be found in <a 
  ## href="http://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html">Reserved Words</a> in the Amazon Redshift Database Developer Guide.</p> </li> </ul>
  ##   DbGroups: JArray
  ##           : <p>A list of the names of existing database groups that the user named in <code>DbUser</code> will join for the current session, in addition to any group memberships for an existing user. If not specified, a new user is added only to PUBLIC.</p> <p>Database group name constraints</p> <ul> <li> <p>Must be 1 to 64 alphanumeric characters or hyphens</p> </li> <li> <p>Must contain only lowercase letters, numbers, underscore, plus sign, period (dot), at symbol (@), or hyphen.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Must not contain a colon ( : ) or slash ( / ). </p> </li> <li> <p>Cannot be a reserved word. A list of reserved words can be found in <a 
  ## href="http://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html">Reserved Words</a> in the Amazon Redshift Database Developer Guide.</p> </li> </ul>
  ##   Version: string (required)
  ##   DurationSeconds: int
  ##                  : <p>The number of seconds until the returned temporary password expires.</p> <p>Constraint: minimum 900, maximum 3600.</p> <p>Default: 900</p>
  var query_21628489 = newJObject()
  var formData_21628490 = newJObject()
  add(formData_21628490, "DbUser", newJString(DbUser))
  add(query_21628489, "Action", newJString(Action))
  add(formData_21628490, "AutoCreate", newJBool(AutoCreate))
  add(formData_21628490, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(formData_21628490, "DbName", newJString(DbName))
  if DbGroups != nil:
    formData_21628490.add "DbGroups", DbGroups
  add(query_21628489, "Version", newJString(Version))
  add(formData_21628490, "DurationSeconds", newJInt(DurationSeconds))
  result = call_21628488.call(nil, query_21628489, nil, formData_21628490, nil)

var postGetClusterCredentials* = Call_PostGetClusterCredentials_21628469(
    name: "postGetClusterCredentials", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=GetClusterCredentials",
    validator: validate_PostGetClusterCredentials_21628470, base: "/",
    makeUrl: url_PostGetClusterCredentials_21628471,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetClusterCredentials_21628448 = ref object of OpenApiRestCall_21625418
proc url_GetGetClusterCredentials_21628450(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetClusterCredentials_21628449(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Returns a database user name and temporary password with temporary authorization to log on to an Amazon Redshift database. The action returns the database user name prefixed with <code>IAM:</code> if <code>AutoCreate</code> is <code>False</code> or <code>IAMA:</code> if <code>AutoCreate</code> is <code>True</code>. You can optionally specify one or more database user groups that the user will join at log on. By default, the temporary credentials expire in 900 seconds. You can optionally specify a duration between 900 seconds (15 minutes) and 3600 seconds (60 minutes). For more information, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/generating-user-credentials.html">Using IAM Authentication to Generate Database User Credentials</a> in the Amazon Redshift Cluster Management Guide.</p> <p>The AWS Identity and Access Management (IAM)user or role that executes GetClusterCredentials must have an IAM policy attached that allows access to all necessary actions and resources. For more information about permissions, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-access-control-identity-based.html#redshift-policy-resources.getclustercredentials-resources">Resource Policies for GetClusterCredentials</a> in the Amazon Redshift Cluster Management Guide.</p> <p>If the <code>DbGroups</code> parameter is specified, the IAM policy must allow the <code>redshift:JoinGroup</code> action with access to the listed <code>dbgroups</code>. </p> <p>In addition, if the <code>AutoCreate</code> parameter is set to <code>True</code>, then the policy must include the <code>redshift:CreateClusterUser</code> privilege.</p> <p>If the <code>DbName</code> parameter is specified, the IAM policy must allow access to the resource <code>dbname</code> for the specified database name. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DbGroups: JArray
  ##           : <p>A list of the names of existing database groups that the user named in <code>DbUser</code> will join for the current session, in addition to any group memberships for an existing user. If not specified, a new user is added only to PUBLIC.</p> <p>Database group name constraints</p> <ul> <li> <p>Must be 1 to 64 alphanumeric characters or hyphens</p> </li> <li> <p>Must contain only lowercase letters, numbers, underscore, plus sign, period (dot), at symbol (@), or hyphen.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Must not contain a colon ( : ) or slash ( / ). </p> </li> <li> <p>Cannot be a reserved word. A list of reserved words can be found in <a 
  ## href="http://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html">Reserved Words</a> in the Amazon Redshift Database Developer Guide.</p> </li> </ul>
  ##   DurationSeconds: JInt
  ##                  : <p>The number of seconds until the returned temporary password expires.</p> <p>Constraint: minimum 900, maximum 3600.</p> <p>Default: 900</p>
  ##   DbName: JString
  ##         : <p>The name of a database that <code>DbUser</code> is authorized to log on to. If <code>DbName</code> is not specified, <code>DbUser</code> can log on to any existing database.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 64 alphanumeric characters or hyphens</p> </li> <li> <p>Must contain only lowercase letters, numbers, underscore, plus sign, period (dot), at symbol (@), or hyphen.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Must not contain a colon ( : ) or slash ( / ). </p> </li> <li> <p>Cannot be a reserved word. A list of reserved words can be found in <a 
  ## href="http://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html">Reserved Words</a> in the Amazon Redshift Database Developer Guide.</p> </li> </ul>
  ##   Action: JString (required)
  ##   ClusterIdentifier: JString (required)
  ##                    : The unique identifier of the cluster that contains the database for which your are requesting credentials. This parameter is case sensitive.
  ##   AutoCreate: JBool
  ##             : Create a database user with the name specified for the user named in <code>DbUser</code> if one does not exist.
  ##   DbUser: JString (required)
  ##         : <p>The name of a database user. If a user name matching <code>DbUser</code> exists in the database, the temporary user credentials have the same permissions as the existing user. If <code>DbUser</code> doesn't exist in the database and <code>Autocreate</code> is <code>True</code>, a new user is created using the value for <code>DbUser</code> with PUBLIC permissions. If a database user matching the value for <code>DbUser</code> doesn't exist and <code>Autocreate</code> is <code>False</code>, then the command succeeds but the connection attempt will fail because the user doesn't exist in the database.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_USER.html">CREATE USER</a> in the Amazon Redshift Database Developer Guide. </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 64 alphanumeric characters or hyphens. The user name can't be <code>PUBLIC</code>.</p> </li> <li> <p>Must contain only lowercase letters, numbers, underscore, plus sign, period (dot), at symbol (@), or hyphen.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Must not contain a colon ( : ) or slash ( / ). </p> </li> <li> <p>Cannot be a reserved word. A list of reserved words can be found in <a 
  ## href="http://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html">Reserved Words</a> in the Amazon Redshift Database Developer Guide.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628451 = query.getOrDefault("DbGroups")
  valid_21628451 = validateParameter(valid_21628451, JArray, required = false,
                                   default = nil)
  if valid_21628451 != nil:
    section.add "DbGroups", valid_21628451
  var valid_21628452 = query.getOrDefault("DurationSeconds")
  valid_21628452 = validateParameter(valid_21628452, JInt, required = false,
                                   default = nil)
  if valid_21628452 != nil:
    section.add "DurationSeconds", valid_21628452
  var valid_21628453 = query.getOrDefault("DbName")
  valid_21628453 = validateParameter(valid_21628453, JString, required = false,
                                   default = nil)
  if valid_21628453 != nil:
    section.add "DbName", valid_21628453
  var valid_21628454 = query.getOrDefault("Action")
  valid_21628454 = validateParameter(valid_21628454, JString, required = true, default = newJString(
      "GetClusterCredentials"))
  if valid_21628454 != nil:
    section.add "Action", valid_21628454
  var valid_21628455 = query.getOrDefault("ClusterIdentifier")
  valid_21628455 = validateParameter(valid_21628455, JString, required = true,
                                   default = nil)
  if valid_21628455 != nil:
    section.add "ClusterIdentifier", valid_21628455
  var valid_21628456 = query.getOrDefault("AutoCreate")
  valid_21628456 = validateParameter(valid_21628456, JBool, required = false,
                                   default = nil)
  if valid_21628456 != nil:
    section.add "AutoCreate", valid_21628456
  var valid_21628457 = query.getOrDefault("DbUser")
  valid_21628457 = validateParameter(valid_21628457, JString, required = true,
                                   default = nil)
  if valid_21628457 != nil:
    section.add "DbUser", valid_21628457
  var valid_21628458 = query.getOrDefault("Version")
  valid_21628458 = validateParameter(valid_21628458, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628458 != nil:
    section.add "Version", valid_21628458
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628459 = header.getOrDefault("X-Amz-Date")
  valid_21628459 = validateParameter(valid_21628459, JString, required = false,
                                   default = nil)
  if valid_21628459 != nil:
    section.add "X-Amz-Date", valid_21628459
  var valid_21628460 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628460 = validateParameter(valid_21628460, JString, required = false,
                                   default = nil)
  if valid_21628460 != nil:
    section.add "X-Amz-Security-Token", valid_21628460
  var valid_21628461 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628461 = validateParameter(valid_21628461, JString, required = false,
                                   default = nil)
  if valid_21628461 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628461
  var valid_21628462 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628462 = validateParameter(valid_21628462, JString, required = false,
                                   default = nil)
  if valid_21628462 != nil:
    section.add "X-Amz-Algorithm", valid_21628462
  var valid_21628463 = header.getOrDefault("X-Amz-Signature")
  valid_21628463 = validateParameter(valid_21628463, JString, required = false,
                                   default = nil)
  if valid_21628463 != nil:
    section.add "X-Amz-Signature", valid_21628463
  var valid_21628464 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628464 = validateParameter(valid_21628464, JString, required = false,
                                   default = nil)
  if valid_21628464 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628464
  var valid_21628465 = header.getOrDefault("X-Amz-Credential")
  valid_21628465 = validateParameter(valid_21628465, JString, required = false,
                                   default = nil)
  if valid_21628465 != nil:
    section.add "X-Amz-Credential", valid_21628465
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628466: Call_GetGetClusterCredentials_21628448;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns a database user name and temporary password with temporary authorization to log on to an Amazon Redshift database. The action returns the database user name prefixed with <code>IAM:</code> if <code>AutoCreate</code> is <code>False</code> or <code>IAMA:</code> if <code>AutoCreate</code> is <code>True</code>. You can optionally specify one or more database user groups that the user will join at log on. By default, the temporary credentials expire in 900 seconds. You can optionally specify a duration between 900 seconds (15 minutes) and 3600 seconds (60 minutes). For more information, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/generating-user-credentials.html">Using IAM Authentication to Generate Database User Credentials</a> in the Amazon Redshift Cluster Management Guide.</p> <p>The AWS Identity and Access Management (IAM)user or role that executes GetClusterCredentials must have an IAM policy attached that allows access to all necessary actions and resources. For more information about permissions, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-access-control-identity-based.html#redshift-policy-resources.getclustercredentials-resources">Resource Policies for GetClusterCredentials</a> in the Amazon Redshift Cluster Management Guide.</p> <p>If the <code>DbGroups</code> parameter is specified, the IAM policy must allow the <code>redshift:JoinGroup</code> action with access to the listed <code>dbgroups</code>. </p> <p>In addition, if the <code>AutoCreate</code> parameter is set to <code>True</code>, then the policy must include the <code>redshift:CreateClusterUser</code> privilege.</p> <p>If the <code>DbName</code> parameter is specified, the IAM policy must allow access to the resource <code>dbname</code> for the specified database name. </p>
  ## 
  let valid = call_21628466.validator(path, query, header, formData, body, _)
  let scheme = call_21628466.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628466.makeUrl(scheme.get, call_21628466.host, call_21628466.base,
                               call_21628466.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628466, uri, valid, _)

proc call*(call_21628467: Call_GetGetClusterCredentials_21628448;
          ClusterIdentifier: string; DbUser: string; DbGroups: JsonNode = nil;
          DurationSeconds: int = 0; DbName: string = "";
          Action: string = "GetClusterCredentials"; AutoCreate: bool = false;
          Version: string = "2012-12-01"): Recallable =
  ## getGetClusterCredentials
  ## <p>Returns a database user name and temporary password with temporary authorization to log on to an Amazon Redshift database. The action returns the database user name prefixed with <code>IAM:</code> if <code>AutoCreate</code> is <code>False</code> or <code>IAMA:</code> if <code>AutoCreate</code> is <code>True</code>. You can optionally specify one or more database user groups that the user will join at log on. By default, the temporary credentials expire in 900 seconds. You can optionally specify a duration between 900 seconds (15 minutes) and 3600 seconds (60 minutes). For more information, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/generating-user-credentials.html">Using IAM Authentication to Generate Database User Credentials</a> in the Amazon Redshift Cluster Management Guide.</p> <p>The AWS Identity and Access Management (IAM)user or role that executes GetClusterCredentials must have an IAM policy attached that allows access to all necessary actions and resources. For more information about permissions, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-access-control-identity-based.html#redshift-policy-resources.getclustercredentials-resources">Resource Policies for GetClusterCredentials</a> in the Amazon Redshift Cluster Management Guide.</p> <p>If the <code>DbGroups</code> parameter is specified, the IAM policy must allow the <code>redshift:JoinGroup</code> action with access to the listed <code>dbgroups</code>. </p> <p>In addition, if the <code>AutoCreate</code> parameter is set to <code>True</code>, then the policy must include the <code>redshift:CreateClusterUser</code> privilege.</p> <p>If the <code>DbName</code> parameter is specified, the IAM policy must allow access to the resource <code>dbname</code> for the specified database name. </p>
  ##   DbGroups: JArray
  ##           : <p>A list of the names of existing database groups that the user named in <code>DbUser</code> will join for the current session, in addition to any group memberships for an existing user. If not specified, a new user is added only to PUBLIC.</p> <p>Database group name constraints</p> <ul> <li> <p>Must be 1 to 64 alphanumeric characters or hyphens</p> </li> <li> <p>Must contain only lowercase letters, numbers, underscore, plus sign, period (dot), at symbol (@), or hyphen.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Must not contain a colon ( : ) or slash ( / ). </p> </li> <li> <p>Cannot be a reserved word. A list of reserved words can be found in <a 
  ## href="http://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html">Reserved Words</a> in the Amazon Redshift Database Developer Guide.</p> </li> </ul>
  ##   DurationSeconds: int
  ##                  : <p>The number of seconds until the returned temporary password expires.</p> <p>Constraint: minimum 900, maximum 3600.</p> <p>Default: 900</p>
  ##   DbName: string
  ##         : <p>The name of a database that <code>DbUser</code> is authorized to log on to. If <code>DbName</code> is not specified, <code>DbUser</code> can log on to any existing database.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 64 alphanumeric characters or hyphens</p> </li> <li> <p>Must contain only lowercase letters, numbers, underscore, plus sign, period (dot), at symbol (@), or hyphen.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Must not contain a colon ( : ) or slash ( / ). </p> </li> <li> <p>Cannot be a reserved word. A list of reserved words can be found in <a 
  ## href="http://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html">Reserved Words</a> in the Amazon Redshift Database Developer Guide.</p> </li> </ul>
  ##   Action: string (required)
  ##   ClusterIdentifier: string (required)
  ##                    : The unique identifier of the cluster that contains the database for which your are requesting credentials. This parameter is case sensitive.
  ##   AutoCreate: bool
  ##             : Create a database user with the name specified for the user named in <code>DbUser</code> if one does not exist.
  ##   DbUser: string (required)
  ##         : <p>The name of a database user. If a user name matching <code>DbUser</code> exists in the database, the temporary user credentials have the same permissions as the existing user. If <code>DbUser</code> doesn't exist in the database and <code>Autocreate</code> is <code>True</code>, a new user is created using the value for <code>DbUser</code> with PUBLIC permissions. If a database user matching the value for <code>DbUser</code> doesn't exist and <code>Autocreate</code> is <code>False</code>, then the command succeeds but the connection attempt will fail because the user doesn't exist in the database.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_USER.html">CREATE USER</a> in the Amazon Redshift Database Developer Guide. </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 64 alphanumeric characters or hyphens. The user name can't be <code>PUBLIC</code>.</p> </li> <li> <p>Must contain only lowercase letters, numbers, underscore, plus sign, period (dot), at symbol (@), or hyphen.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Must not contain a colon ( : ) or slash ( / ). </p> </li> <li> <p>Cannot be a reserved word. A list of reserved words can be found in <a 
  ## href="http://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html">Reserved Words</a> in the Amazon Redshift Database Developer Guide.</p> </li> </ul>
  ##   Version: string (required)
  var query_21628468 = newJObject()
  if DbGroups != nil:
    query_21628468.add "DbGroups", DbGroups
  add(query_21628468, "DurationSeconds", newJInt(DurationSeconds))
  add(query_21628468, "DbName", newJString(DbName))
  add(query_21628468, "Action", newJString(Action))
  add(query_21628468, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(query_21628468, "AutoCreate", newJBool(AutoCreate))
  add(query_21628468, "DbUser", newJString(DbUser))
  add(query_21628468, "Version", newJString(Version))
  result = call_21628467.call(nil, query_21628468, nil, nil, nil)

var getGetClusterCredentials* = Call_GetGetClusterCredentials_21628448(
    name: "getGetClusterCredentials", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=GetClusterCredentials",
    validator: validate_GetGetClusterCredentials_21628449, base: "/",
    makeUrl: url_GetGetClusterCredentials_21628450,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetReservedNodeExchangeOfferings_21628509 = ref object of OpenApiRestCall_21625418
proc url_PostGetReservedNodeExchangeOfferings_21628511(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetReservedNodeExchangeOfferings_21628510(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Returns an array of DC2 ReservedNodeOfferings that matches the payment type, term, and usage price of the given DC1 reserved node.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628512 = query.getOrDefault("Action")
  valid_21628512 = validateParameter(valid_21628512, JString, required = true, default = newJString(
      "GetReservedNodeExchangeOfferings"))
  if valid_21628512 != nil:
    section.add "Action", valid_21628512
  var valid_21628513 = query.getOrDefault("Version")
  valid_21628513 = validateParameter(valid_21628513, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628513 != nil:
    section.add "Version", valid_21628513
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628514 = header.getOrDefault("X-Amz-Date")
  valid_21628514 = validateParameter(valid_21628514, JString, required = false,
                                   default = nil)
  if valid_21628514 != nil:
    section.add "X-Amz-Date", valid_21628514
  var valid_21628515 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628515 = validateParameter(valid_21628515, JString, required = false,
                                   default = nil)
  if valid_21628515 != nil:
    section.add "X-Amz-Security-Token", valid_21628515
  var valid_21628516 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628516 = validateParameter(valid_21628516, JString, required = false,
                                   default = nil)
  if valid_21628516 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628516
  var valid_21628517 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628517 = validateParameter(valid_21628517, JString, required = false,
                                   default = nil)
  if valid_21628517 != nil:
    section.add "X-Amz-Algorithm", valid_21628517
  var valid_21628518 = header.getOrDefault("X-Amz-Signature")
  valid_21628518 = validateParameter(valid_21628518, JString, required = false,
                                   default = nil)
  if valid_21628518 != nil:
    section.add "X-Amz-Signature", valid_21628518
  var valid_21628519 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628519 = validateParameter(valid_21628519, JString, required = false,
                                   default = nil)
  if valid_21628519 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628519
  var valid_21628520 = header.getOrDefault("X-Amz-Credential")
  valid_21628520 = validateParameter(valid_21628520, JString, required = false,
                                   default = nil)
  if valid_21628520 != nil:
    section.add "X-Amz-Credential", valid_21628520
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReservedNodeId: JString (required)
  ##                 : A string representing the node identifier for the DC1 Reserved Node to be exchanged.
  ##   Marker: JString
  ##         : A value that indicates the starting point for the next set of ReservedNodeOfferings.
  ##   MaxRecords: JInt
  ##             : An integer setting the maximum number of ReservedNodeOfferings to retrieve.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ReservedNodeId` field"
  var valid_21628521 = formData.getOrDefault("ReservedNodeId")
  valid_21628521 = validateParameter(valid_21628521, JString, required = true,
                                   default = nil)
  if valid_21628521 != nil:
    section.add "ReservedNodeId", valid_21628521
  var valid_21628522 = formData.getOrDefault("Marker")
  valid_21628522 = validateParameter(valid_21628522, JString, required = false,
                                   default = nil)
  if valid_21628522 != nil:
    section.add "Marker", valid_21628522
  var valid_21628523 = formData.getOrDefault("MaxRecords")
  valid_21628523 = validateParameter(valid_21628523, JInt, required = false,
                                   default = nil)
  if valid_21628523 != nil:
    section.add "MaxRecords", valid_21628523
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628524: Call_PostGetReservedNodeExchangeOfferings_21628509;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns an array of DC2 ReservedNodeOfferings that matches the payment type, term, and usage price of the given DC1 reserved node.
  ## 
  let valid = call_21628524.validator(path, query, header, formData, body, _)
  let scheme = call_21628524.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628524.makeUrl(scheme.get, call_21628524.host, call_21628524.base,
                               call_21628524.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628524, uri, valid, _)

proc call*(call_21628525: Call_PostGetReservedNodeExchangeOfferings_21628509;
          ReservedNodeId: string; Marker: string = "";
          Action: string = "GetReservedNodeExchangeOfferings"; MaxRecords: int = 0;
          Version: string = "2012-12-01"): Recallable =
  ## postGetReservedNodeExchangeOfferings
  ## Returns an array of DC2 ReservedNodeOfferings that matches the payment type, term, and usage price of the given DC1 reserved node.
  ##   ReservedNodeId: string (required)
  ##                 : A string representing the node identifier for the DC1 Reserved Node to be exchanged.
  ##   Marker: string
  ##         : A value that indicates the starting point for the next set of ReservedNodeOfferings.
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : An integer setting the maximum number of ReservedNodeOfferings to retrieve.
  ##   Version: string (required)
  var query_21628526 = newJObject()
  var formData_21628527 = newJObject()
  add(formData_21628527, "ReservedNodeId", newJString(ReservedNodeId))
  add(formData_21628527, "Marker", newJString(Marker))
  add(query_21628526, "Action", newJString(Action))
  add(formData_21628527, "MaxRecords", newJInt(MaxRecords))
  add(query_21628526, "Version", newJString(Version))
  result = call_21628525.call(nil, query_21628526, nil, formData_21628527, nil)

var postGetReservedNodeExchangeOfferings* = Call_PostGetReservedNodeExchangeOfferings_21628509(
    name: "postGetReservedNodeExchangeOfferings", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com",
    route: "/#Action=GetReservedNodeExchangeOfferings",
    validator: validate_PostGetReservedNodeExchangeOfferings_21628510, base: "/",
    makeUrl: url_PostGetReservedNodeExchangeOfferings_21628511,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetReservedNodeExchangeOfferings_21628491 = ref object of OpenApiRestCall_21625418
proc url_GetGetReservedNodeExchangeOfferings_21628493(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetReservedNodeExchangeOfferings_21628492(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Returns an array of DC2 ReservedNodeOfferings that matches the payment type, term, and usage price of the given DC1 reserved node.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : An integer setting the maximum number of ReservedNodeOfferings to retrieve.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : A value that indicates the starting point for the next set of ReservedNodeOfferings.
  ##   Version: JString (required)
  ##   ReservedNodeId: JString (required)
  ##                 : A string representing the node identifier for the DC1 Reserved Node to be exchanged.
  section = newJObject()
  var valid_21628494 = query.getOrDefault("MaxRecords")
  valid_21628494 = validateParameter(valid_21628494, JInt, required = false,
                                   default = nil)
  if valid_21628494 != nil:
    section.add "MaxRecords", valid_21628494
  var valid_21628495 = query.getOrDefault("Action")
  valid_21628495 = validateParameter(valid_21628495, JString, required = true, default = newJString(
      "GetReservedNodeExchangeOfferings"))
  if valid_21628495 != nil:
    section.add "Action", valid_21628495
  var valid_21628496 = query.getOrDefault("Marker")
  valid_21628496 = validateParameter(valid_21628496, JString, required = false,
                                   default = nil)
  if valid_21628496 != nil:
    section.add "Marker", valid_21628496
  var valid_21628497 = query.getOrDefault("Version")
  valid_21628497 = validateParameter(valid_21628497, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628497 != nil:
    section.add "Version", valid_21628497
  var valid_21628498 = query.getOrDefault("ReservedNodeId")
  valid_21628498 = validateParameter(valid_21628498, JString, required = true,
                                   default = nil)
  if valid_21628498 != nil:
    section.add "ReservedNodeId", valid_21628498
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628499 = header.getOrDefault("X-Amz-Date")
  valid_21628499 = validateParameter(valid_21628499, JString, required = false,
                                   default = nil)
  if valid_21628499 != nil:
    section.add "X-Amz-Date", valid_21628499
  var valid_21628500 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628500 = validateParameter(valid_21628500, JString, required = false,
                                   default = nil)
  if valid_21628500 != nil:
    section.add "X-Amz-Security-Token", valid_21628500
  var valid_21628501 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628501 = validateParameter(valid_21628501, JString, required = false,
                                   default = nil)
  if valid_21628501 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628501
  var valid_21628502 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628502 = validateParameter(valid_21628502, JString, required = false,
                                   default = nil)
  if valid_21628502 != nil:
    section.add "X-Amz-Algorithm", valid_21628502
  var valid_21628503 = header.getOrDefault("X-Amz-Signature")
  valid_21628503 = validateParameter(valid_21628503, JString, required = false,
                                   default = nil)
  if valid_21628503 != nil:
    section.add "X-Amz-Signature", valid_21628503
  var valid_21628504 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628504 = validateParameter(valid_21628504, JString, required = false,
                                   default = nil)
  if valid_21628504 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628504
  var valid_21628505 = header.getOrDefault("X-Amz-Credential")
  valid_21628505 = validateParameter(valid_21628505, JString, required = false,
                                   default = nil)
  if valid_21628505 != nil:
    section.add "X-Amz-Credential", valid_21628505
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628506: Call_GetGetReservedNodeExchangeOfferings_21628491;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns an array of DC2 ReservedNodeOfferings that matches the payment type, term, and usage price of the given DC1 reserved node.
  ## 
  let valid = call_21628506.validator(path, query, header, formData, body, _)
  let scheme = call_21628506.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628506.makeUrl(scheme.get, call_21628506.host, call_21628506.base,
                               call_21628506.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628506, uri, valid, _)

proc call*(call_21628507: Call_GetGetReservedNodeExchangeOfferings_21628491;
          ReservedNodeId: string; MaxRecords: int = 0;
          Action: string = "GetReservedNodeExchangeOfferings"; Marker: string = "";
          Version: string = "2012-12-01"): Recallable =
  ## getGetReservedNodeExchangeOfferings
  ## Returns an array of DC2 ReservedNodeOfferings that matches the payment type, term, and usage price of the given DC1 reserved node.
  ##   MaxRecords: int
  ##             : An integer setting the maximum number of ReservedNodeOfferings to retrieve.
  ##   Action: string (required)
  ##   Marker: string
  ##         : A value that indicates the starting point for the next set of ReservedNodeOfferings.
  ##   Version: string (required)
  ##   ReservedNodeId: string (required)
  ##                 : A string representing the node identifier for the DC1 Reserved Node to be exchanged.
  var query_21628508 = newJObject()
  add(query_21628508, "MaxRecords", newJInt(MaxRecords))
  add(query_21628508, "Action", newJString(Action))
  add(query_21628508, "Marker", newJString(Marker))
  add(query_21628508, "Version", newJString(Version))
  add(query_21628508, "ReservedNodeId", newJString(ReservedNodeId))
  result = call_21628507.call(nil, query_21628508, nil, nil, nil)

var getGetReservedNodeExchangeOfferings* = Call_GetGetReservedNodeExchangeOfferings_21628491(
    name: "getGetReservedNodeExchangeOfferings", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com",
    route: "/#Action=GetReservedNodeExchangeOfferings",
    validator: validate_GetGetReservedNodeExchangeOfferings_21628492, base: "/",
    makeUrl: url_GetGetReservedNodeExchangeOfferings_21628493,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyCluster_21628565 = ref object of OpenApiRestCall_21625418
proc url_PostModifyCluster_21628567(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyCluster_21628566(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Modifies the settings for a cluster.</p> <p>You can also change node type and the number of nodes to scale up or down the cluster. When resizing a cluster, you must specify both the number of nodes and the node type even if one of the parameters does not change.</p> <p>You can add another security or parameter group, or change the master user password. Resetting a cluster password or modifying the security groups associated with a cluster do not need a reboot. However, modifying a parameter group requires a reboot for parameters to take effect. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628568 = query.getOrDefault("Action")
  valid_21628568 = validateParameter(valid_21628568, JString, required = true,
                                   default = newJString("ModifyCluster"))
  if valid_21628568 != nil:
    section.add "Action", valid_21628568
  var valid_21628569 = query.getOrDefault("Version")
  valid_21628569 = validateParameter(valid_21628569, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628569 != nil:
    section.add "Version", valid_21628569
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628570 = header.getOrDefault("X-Amz-Date")
  valid_21628570 = validateParameter(valid_21628570, JString, required = false,
                                   default = nil)
  if valid_21628570 != nil:
    section.add "X-Amz-Date", valid_21628570
  var valid_21628571 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628571 = validateParameter(valid_21628571, JString, required = false,
                                   default = nil)
  if valid_21628571 != nil:
    section.add "X-Amz-Security-Token", valid_21628571
  var valid_21628572 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628572 = validateParameter(valid_21628572, JString, required = false,
                                   default = nil)
  if valid_21628572 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628572
  var valid_21628573 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628573 = validateParameter(valid_21628573, JString, required = false,
                                   default = nil)
  if valid_21628573 != nil:
    section.add "X-Amz-Algorithm", valid_21628573
  var valid_21628574 = header.getOrDefault("X-Amz-Signature")
  valid_21628574 = validateParameter(valid_21628574, JString, required = false,
                                   default = nil)
  if valid_21628574 != nil:
    section.add "X-Amz-Signature", valid_21628574
  var valid_21628575 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628575 = validateParameter(valid_21628575, JString, required = false,
                                   default = nil)
  if valid_21628575 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628575
  var valid_21628576 = header.getOrDefault("X-Amz-Credential")
  valid_21628576 = validateParameter(valid_21628576, JString, required = false,
                                   default = nil)
  if valid_21628576 != nil:
    section.add "X-Amz-Credential", valid_21628576
  result.add "header", section
  ## parameters in `formData` object:
  ##   EnhancedVpcRouting: JBool
  ##                     : <p>An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html">Enhanced VPC Routing</a> in the Amazon Redshift Cluster Management Guide.</p> <p>If this option is <code>true</code>, enhanced VPC routing is enabled. </p> <p>Default: false</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of virtual private cloud (VPC) security groups to be associated with the cluster. This change is asynchronously applied as soon as possible.
  ##   ClusterVersion: JString
  ##                 : <p>The new version number of the Amazon Redshift engine to upgrade to.</p> <p>For major version upgrades, if a non-default cluster parameter group is currently in use, a new cluster parameter group in the cluster parameter group family for the new version must be specified. The new cluster parameter group can be the default for that cluster parameter group family. For more information about parameters and parameter groups, go to <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>Example: <code>1.0</code> </p>
  ##   ClusterType: JString
  ##              : <p>The new cluster type.</p> <p>When you submit your cluster resize request, your existing cluster goes into a read-only mode. After Amazon Redshift provisions a new cluster based on your resize requirements, there will be outage for a period while the old cluster is deleted and your connection is switched to the new cluster. You can use <a>DescribeResize</a> to track the progress of the resize request. </p> <p>Valid Values: <code> multi-node | single-node </code> </p>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the cluster master user. This change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <note> <p>Operations never return the password, so this operation provides a way to regain access to the master user account for a cluster if the password is lost.</p> </note> <p>Default: Uses existing setting.</p> <p>Constraints:</p> <ul> <li> <p>Must be between 8 and 64 characters in length.</p> </li> <li> <p>Must contain at least one uppercase letter.</p> </li> <li> <p>Must contain at least one lowercase letter.</p> </li> <li> <p>Must contain one number.</p> </li> <li> <p>Can be any printable ASCII character (ASCII code 33 to 126) except ' (single quote), " (double quote), \, /, @, or space.</p> </li> </ul>
  ##   ClusterSecurityGroups: JArray
  ##                        : <p>A list of cluster security groups to be authorized on this cluster. This change is asynchronously applied as soon as possible.</p> <p>Security groups currently associated with the cluster, and not in the list of groups to apply, will be revoked from the cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Encrypted: JBool
  ##            : <p>Indicates whether the cluster is encrypted. If the value is encrypted (true) and you provide a value for the <code>KmsKeyId</code> parameter, we encrypt the cluster with the provided <code>KmsKeyId</code>. If you don't provide a <code>KmsKeyId</code>, we encrypt with the default key. In the China region we use legacy encryption if you specify that the cluster is encrypted.</p> <p>If the value is not encrypted (false), then the cluster is decrypted. </p>
  ##   HsmConfigurationIdentifier: JString
  ##                             : Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
  ##   HsmClientCertificateIdentifier: JString
  ##                                 : Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
  ##   PubliclyAccessible: JBool
  ##                     : If <code>true</code>, the cluster can be accessed from a public network. Only clusters in VPCs can be set to be publicly available.
  ##   ClusterIdentifier: JString (required)
  ##                    : <p>The unique identifier of the cluster to be modified.</p> <p>Example: <code>examplecluster</code> </p>
  ##   NumberOfNodes: JInt
  ##                : <p>The new number of nodes of the cluster. If you specify a new number of nodes, you must also specify the node type parameter.</p> <p> For more information about resizing clusters, go to <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/rs-resize-tutorial.html">Resizing Clusters in Amazon Redshift</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>Valid Values: Integer greater than <code>0</code>.</p>
  ##   ClusterParameterGroupName: JString
  ##                            : <p>The name of the cluster parameter group to apply to this cluster. This change is applied only after the cluster is rebooted. To reboot a cluster use <a>RebootCluster</a>. </p> <p>Default: Uses existing setting.</p> <p>Constraints: The cluster parameter group must be in the same parameter group family that matches the cluster version.</p>
  ##   KmsKeyId: JString
  ##           : The AWS Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the cluster.
  ##   ManualSnapshotRetentionPeriod: JInt
  ##                                : <p>The default for number of days that a newly created manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely. This value doesn't retroactively change the retention periods of existing manual snapshots.</p> <p>The value must be either -1 or an integer between 1 and 3,653.</p> <p>The default value is -1.</p>
  ##   ElasticIp: JString
  ##            : <p>The Elastic IP (EIP) address for the cluster.</p> <p>Constraints: The cluster must be provisioned in EC2-VPC and publicly-accessible through an Internet gateway. For more information about provisioning clusters in EC2-VPC, go to <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#cluster-platforms">Supported Platforms to Launch Your Cluster</a> in the Amazon Redshift Cluster Management Guide.</p>
  ##   NewClusterIdentifier: JString
  ##                       : <p>The new identifier for the cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>Alphabetic characters must be lowercase.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Must be unique for all clusters within an AWS account.</p> </li> </ul> <p>Example: <code>examplecluster</code> </p>
  ##   AllowVersionUpgrade: JBool
  ##                      : <p>If <code>true</code>, major version upgrades will be applied automatically to the cluster during the maintenance window. </p> <p>Default: <code>false</code> </p>
  ##   AutomatedSnapshotRetentionPeriod: JInt
  ##                                   : <p>The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with <a>CreateClusterSnapshot</a>. </p> <p>If you decrease the automated snapshot retention period from its current value, existing automated snapshots that fall outside of the new retention period will be immediately deleted.</p> <p>Default: Uses existing setting.</p> <p>Constraints: Must be a value from 0 to 35.</p>
  ##   NodeType: JString
  ##           : <p>The new node type of the cluster. If you specify a new node type, you must also specify the number of nodes parameter.</p> <p> For more information about resizing clusters, go to <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/rs-resize-tutorial.html">Resizing Clusters in Amazon Redshift</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>Valid Values: <code>ds2.xlarge</code> | <code>ds2.8xlarge</code> | <code>dc1.large</code> | <code>dc1.8xlarge</code> | <code>dc2.large</code> | <code>dc2.8xlarge</code> | <code>ra3.16xlarge</code> </p>
  ##   MaintenanceTrackName: JString
  ##                       : The name for the maintenance track that you want to assign for the cluster. This name change is asynchronous. The new track name stays in the <code>PendingModifiedValues</code> for the cluster until the next maintenance window. When the maintenance track changes, the cluster is switched to the latest cluster release available for the maintenance track. At this point, the maintenance track name is applied.
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, if necessary. If system maintenance is necessary during the window, it may result in an outage.</p> <p>This maintenance window change is made immediately. If the new maintenance window indicates the current time, there must be at least 120 minutes between the current time and end of the window in order to ensure that pending changes are applied.</p> <p>Default: Uses existing setting.</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi, for example <code>wed:07:30-wed:08:00</code>.</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes.</p>
  section = newJObject()
  var valid_21628577 = formData.getOrDefault("EnhancedVpcRouting")
  valid_21628577 = validateParameter(valid_21628577, JBool, required = false,
                                   default = nil)
  if valid_21628577 != nil:
    section.add "EnhancedVpcRouting", valid_21628577
  var valid_21628578 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_21628578 = validateParameter(valid_21628578, JArray, required = false,
                                   default = nil)
  if valid_21628578 != nil:
    section.add "VpcSecurityGroupIds", valid_21628578
  var valid_21628579 = formData.getOrDefault("ClusterVersion")
  valid_21628579 = validateParameter(valid_21628579, JString, required = false,
                                   default = nil)
  if valid_21628579 != nil:
    section.add "ClusterVersion", valid_21628579
  var valid_21628580 = formData.getOrDefault("ClusterType")
  valid_21628580 = validateParameter(valid_21628580, JString, required = false,
                                   default = nil)
  if valid_21628580 != nil:
    section.add "ClusterType", valid_21628580
  var valid_21628581 = formData.getOrDefault("MasterUserPassword")
  valid_21628581 = validateParameter(valid_21628581, JString, required = false,
                                   default = nil)
  if valid_21628581 != nil:
    section.add "MasterUserPassword", valid_21628581
  var valid_21628582 = formData.getOrDefault("ClusterSecurityGroups")
  valid_21628582 = validateParameter(valid_21628582, JArray, required = false,
                                   default = nil)
  if valid_21628582 != nil:
    section.add "ClusterSecurityGroups", valid_21628582
  var valid_21628583 = formData.getOrDefault("Encrypted")
  valid_21628583 = validateParameter(valid_21628583, JBool, required = false,
                                   default = nil)
  if valid_21628583 != nil:
    section.add "Encrypted", valid_21628583
  var valid_21628584 = formData.getOrDefault("HsmConfigurationIdentifier")
  valid_21628584 = validateParameter(valid_21628584, JString, required = false,
                                   default = nil)
  if valid_21628584 != nil:
    section.add "HsmConfigurationIdentifier", valid_21628584
  var valid_21628585 = formData.getOrDefault("HsmClientCertificateIdentifier")
  valid_21628585 = validateParameter(valid_21628585, JString, required = false,
                                   default = nil)
  if valid_21628585 != nil:
    section.add "HsmClientCertificateIdentifier", valid_21628585
  var valid_21628586 = formData.getOrDefault("PubliclyAccessible")
  valid_21628586 = validateParameter(valid_21628586, JBool, required = false,
                                   default = nil)
  if valid_21628586 != nil:
    section.add "PubliclyAccessible", valid_21628586
  assert formData != nil, "formData argument is necessary due to required `ClusterIdentifier` field"
  var valid_21628587 = formData.getOrDefault("ClusterIdentifier")
  valid_21628587 = validateParameter(valid_21628587, JString, required = true,
                                   default = nil)
  if valid_21628587 != nil:
    section.add "ClusterIdentifier", valid_21628587
  var valid_21628588 = formData.getOrDefault("NumberOfNodes")
  valid_21628588 = validateParameter(valid_21628588, JInt, required = false,
                                   default = nil)
  if valid_21628588 != nil:
    section.add "NumberOfNodes", valid_21628588
  var valid_21628589 = formData.getOrDefault("ClusterParameterGroupName")
  valid_21628589 = validateParameter(valid_21628589, JString, required = false,
                                   default = nil)
  if valid_21628589 != nil:
    section.add "ClusterParameterGroupName", valid_21628589
  var valid_21628590 = formData.getOrDefault("KmsKeyId")
  valid_21628590 = validateParameter(valid_21628590, JString, required = false,
                                   default = nil)
  if valid_21628590 != nil:
    section.add "KmsKeyId", valid_21628590
  var valid_21628591 = formData.getOrDefault("ManualSnapshotRetentionPeriod")
  valid_21628591 = validateParameter(valid_21628591, JInt, required = false,
                                   default = nil)
  if valid_21628591 != nil:
    section.add "ManualSnapshotRetentionPeriod", valid_21628591
  var valid_21628592 = formData.getOrDefault("ElasticIp")
  valid_21628592 = validateParameter(valid_21628592, JString, required = false,
                                   default = nil)
  if valid_21628592 != nil:
    section.add "ElasticIp", valid_21628592
  var valid_21628593 = formData.getOrDefault("NewClusterIdentifier")
  valid_21628593 = validateParameter(valid_21628593, JString, required = false,
                                   default = nil)
  if valid_21628593 != nil:
    section.add "NewClusterIdentifier", valid_21628593
  var valid_21628594 = formData.getOrDefault("AllowVersionUpgrade")
  valid_21628594 = validateParameter(valid_21628594, JBool, required = false,
                                   default = nil)
  if valid_21628594 != nil:
    section.add "AllowVersionUpgrade", valid_21628594
  var valid_21628595 = formData.getOrDefault("AutomatedSnapshotRetentionPeriod")
  valid_21628595 = validateParameter(valid_21628595, JInt, required = false,
                                   default = nil)
  if valid_21628595 != nil:
    section.add "AutomatedSnapshotRetentionPeriod", valid_21628595
  var valid_21628596 = formData.getOrDefault("NodeType")
  valid_21628596 = validateParameter(valid_21628596, JString, required = false,
                                   default = nil)
  if valid_21628596 != nil:
    section.add "NodeType", valid_21628596
  var valid_21628597 = formData.getOrDefault("MaintenanceTrackName")
  valid_21628597 = validateParameter(valid_21628597, JString, required = false,
                                   default = nil)
  if valid_21628597 != nil:
    section.add "MaintenanceTrackName", valid_21628597
  var valid_21628598 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_21628598 = validateParameter(valid_21628598, JString, required = false,
                                   default = nil)
  if valid_21628598 != nil:
    section.add "PreferredMaintenanceWindow", valid_21628598
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628599: Call_PostModifyCluster_21628565; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Modifies the settings for a cluster.</p> <p>You can also change node type and the number of nodes to scale up or down the cluster. When resizing a cluster, you must specify both the number of nodes and the node type even if one of the parameters does not change.</p> <p>You can add another security or parameter group, or change the master user password. Resetting a cluster password or modifying the security groups associated with a cluster do not need a reboot. However, modifying a parameter group requires a reboot for parameters to take effect. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  let valid = call_21628599.validator(path, query, header, formData, body, _)
  let scheme = call_21628599.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628599.makeUrl(scheme.get, call_21628599.host, call_21628599.base,
                               call_21628599.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628599, uri, valid, _)

proc call*(call_21628600: Call_PostModifyCluster_21628565;
          ClusterIdentifier: string; EnhancedVpcRouting: bool = false;
          VpcSecurityGroupIds: JsonNode = nil; ClusterVersion: string = "";
          ClusterType: string = ""; MasterUserPassword: string = "";
          ClusterSecurityGroups: JsonNode = nil; Encrypted: bool = false;
          HsmConfigurationIdentifier: string = ""; Action: string = "ModifyCluster";
          HsmClientCertificateIdentifier: string = "";
          PubliclyAccessible: bool = false; NumberOfNodes: int = 0;
          ClusterParameterGroupName: string = ""; KmsKeyId: string = "";
          ManualSnapshotRetentionPeriod: int = 0; ElasticIp: string = "";
          NewClusterIdentifier: string = ""; AllowVersionUpgrade: bool = false;
          AutomatedSnapshotRetentionPeriod: int = 0; Version: string = "2012-12-01";
          NodeType: string = ""; MaintenanceTrackName: string = "";
          PreferredMaintenanceWindow: string = ""): Recallable =
  ## postModifyCluster
  ## <p>Modifies the settings for a cluster.</p> <p>You can also change node type and the number of nodes to scale up or down the cluster. When resizing a cluster, you must specify both the number of nodes and the node type even if one of the parameters does not change.</p> <p>You can add another security or parameter group, or change the master user password. Resetting a cluster password or modifying the security groups associated with a cluster do not need a reboot. However, modifying a parameter group requires a reboot for parameters to take effect. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ##   EnhancedVpcRouting: bool
  ##                     : <p>An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html">Enhanced VPC Routing</a> in the Amazon Redshift Cluster Management Guide.</p> <p>If this option is <code>true</code>, enhanced VPC routing is enabled. </p> <p>Default: false</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of virtual private cloud (VPC) security groups to be associated with the cluster. This change is asynchronously applied as soon as possible.
  ##   ClusterVersion: string
  ##                 : <p>The new version number of the Amazon Redshift engine to upgrade to.</p> <p>For major version upgrades, if a non-default cluster parameter group is currently in use, a new cluster parameter group in the cluster parameter group family for the new version must be specified. The new cluster parameter group can be the default for that cluster parameter group family. For more information about parameters and parameter groups, go to <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>Example: <code>1.0</code> </p>
  ##   ClusterType: string
  ##              : <p>The new cluster type.</p> <p>When you submit your cluster resize request, your existing cluster goes into a read-only mode. After Amazon Redshift provisions a new cluster based on your resize requirements, there will be outage for a period while the old cluster is deleted and your connection is switched to the new cluster. You can use <a>DescribeResize</a> to track the progress of the resize request. </p> <p>Valid Values: <code> multi-node | single-node </code> </p>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the cluster master user. This change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <note> <p>Operations never return the password, so this operation provides a way to regain access to the master user account for a cluster if the password is lost.</p> </note> <p>Default: Uses existing setting.</p> <p>Constraints:</p> <ul> <li> <p>Must be between 8 and 64 characters in length.</p> </li> <li> <p>Must contain at least one uppercase letter.</p> </li> <li> <p>Must contain at least one lowercase letter.</p> </li> <li> <p>Must contain one number.</p> </li> <li> <p>Can be any printable ASCII character (ASCII code 33 to 126) except ' (single quote), " (double quote), \, /, @, or space.</p> </li> </ul>
  ##   ClusterSecurityGroups: JArray
  ##                        : <p>A list of cluster security groups to be authorized on this cluster. This change is asynchronously applied as soon as possible.</p> <p>Security groups currently associated with the cluster, and not in the list of groups to apply, will be revoked from the cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Encrypted: bool
  ##            : <p>Indicates whether the cluster is encrypted. If the value is encrypted (true) and you provide a value for the <code>KmsKeyId</code> parameter, we encrypt the cluster with the provided <code>KmsKeyId</code>. If you don't provide a <code>KmsKeyId</code>, we encrypt with the default key. In the China region we use legacy encryption if you specify that the cluster is encrypted.</p> <p>If the value is not encrypted (false), then the cluster is decrypted. </p>
  ##   HsmConfigurationIdentifier: string
  ##                             : Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
  ##   Action: string (required)
  ##   HsmClientCertificateIdentifier: string
  ##                                 : Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
  ##   PubliclyAccessible: bool
  ##                     : If <code>true</code>, the cluster can be accessed from a public network. Only clusters in VPCs can be set to be publicly available.
  ##   ClusterIdentifier: string (required)
  ##                    : <p>The unique identifier of the cluster to be modified.</p> <p>Example: <code>examplecluster</code> </p>
  ##   NumberOfNodes: int
  ##                : <p>The new number of nodes of the cluster. If you specify a new number of nodes, you must also specify the node type parameter.</p> <p> For more information about resizing clusters, go to <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/rs-resize-tutorial.html">Resizing Clusters in Amazon Redshift</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>Valid Values: Integer greater than <code>0</code>.</p>
  ##   ClusterParameterGroupName: string
  ##                            : <p>The name of the cluster parameter group to apply to this cluster. This change is applied only after the cluster is rebooted. To reboot a cluster use <a>RebootCluster</a>. </p> <p>Default: Uses existing setting.</p> <p>Constraints: The cluster parameter group must be in the same parameter group family that matches the cluster version.</p>
  ##   KmsKeyId: string
  ##           : The AWS Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the cluster.
  ##   ManualSnapshotRetentionPeriod: int
  ##                                : <p>The default for number of days that a newly created manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely. This value doesn't retroactively change the retention periods of existing manual snapshots.</p> <p>The value must be either -1 or an integer between 1 and 3,653.</p> <p>The default value is -1.</p>
  ##   ElasticIp: string
  ##            : <p>The Elastic IP (EIP) address for the cluster.</p> <p>Constraints: The cluster must be provisioned in EC2-VPC and publicly-accessible through an Internet gateway. For more information about provisioning clusters in EC2-VPC, go to <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#cluster-platforms">Supported Platforms to Launch Your Cluster</a> in the Amazon Redshift Cluster Management Guide.</p>
  ##   NewClusterIdentifier: string
  ##                       : <p>The new identifier for the cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>Alphabetic characters must be lowercase.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Must be unique for all clusters within an AWS account.</p> </li> </ul> <p>Example: <code>examplecluster</code> </p>
  ##   AllowVersionUpgrade: bool
  ##                      : <p>If <code>true</code>, major version upgrades will be applied automatically to the cluster during the maintenance window. </p> <p>Default: <code>false</code> </p>
  ##   AutomatedSnapshotRetentionPeriod: int
  ##                                   : <p>The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with <a>CreateClusterSnapshot</a>. </p> <p>If you decrease the automated snapshot retention period from its current value, existing automated snapshots that fall outside of the new retention period will be immediately deleted.</p> <p>Default: Uses existing setting.</p> <p>Constraints: Must be a value from 0 to 35.</p>
  ##   Version: string (required)
  ##   NodeType: string
  ##           : <p>The new node type of the cluster. If you specify a new node type, you must also specify the number of nodes parameter.</p> <p> For more information about resizing clusters, go to <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/rs-resize-tutorial.html">Resizing Clusters in Amazon Redshift</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>Valid Values: <code>ds2.xlarge</code> | <code>ds2.8xlarge</code> | <code>dc1.large</code> | <code>dc1.8xlarge</code> | <code>dc2.large</code> | <code>dc2.8xlarge</code> | <code>ra3.16xlarge</code> </p>
  ##   MaintenanceTrackName: string
  ##                       : The name for the maintenance track that you want to assign for the cluster. This name change is asynchronous. The new track name stays in the <code>PendingModifiedValues</code> for the cluster until the next maintenance window. When the maintenance track changes, the cluster is switched to the latest cluster release available for the maintenance track. At this point, the maintenance track name is applied.
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, if necessary. If system maintenance is necessary during the window, it may result in an outage.</p> <p>This maintenance window change is made immediately. If the new maintenance window indicates the current time, there must be at least 120 minutes between the current time and end of the window in order to ensure that pending changes are applied.</p> <p>Default: Uses existing setting.</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi, for example <code>wed:07:30-wed:08:00</code>.</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes.</p>
  var query_21628601 = newJObject()
  var formData_21628602 = newJObject()
  add(formData_21628602, "EnhancedVpcRouting", newJBool(EnhancedVpcRouting))
  if VpcSecurityGroupIds != nil:
    formData_21628602.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_21628602, "ClusterVersion", newJString(ClusterVersion))
  add(formData_21628602, "ClusterType", newJString(ClusterType))
  add(formData_21628602, "MasterUserPassword", newJString(MasterUserPassword))
  if ClusterSecurityGroups != nil:
    formData_21628602.add "ClusterSecurityGroups", ClusterSecurityGroups
  add(formData_21628602, "Encrypted", newJBool(Encrypted))
  add(formData_21628602, "HsmConfigurationIdentifier",
      newJString(HsmConfigurationIdentifier))
  add(query_21628601, "Action", newJString(Action))
  add(formData_21628602, "HsmClientCertificateIdentifier",
      newJString(HsmClientCertificateIdentifier))
  add(formData_21628602, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_21628602, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(formData_21628602, "NumberOfNodes", newJInt(NumberOfNodes))
  add(formData_21628602, "ClusterParameterGroupName",
      newJString(ClusterParameterGroupName))
  add(formData_21628602, "KmsKeyId", newJString(KmsKeyId))
  add(formData_21628602, "ManualSnapshotRetentionPeriod",
      newJInt(ManualSnapshotRetentionPeriod))
  add(formData_21628602, "ElasticIp", newJString(ElasticIp))
  add(formData_21628602, "NewClusterIdentifier", newJString(NewClusterIdentifier))
  add(formData_21628602, "AllowVersionUpgrade", newJBool(AllowVersionUpgrade))
  add(formData_21628602, "AutomatedSnapshotRetentionPeriod",
      newJInt(AutomatedSnapshotRetentionPeriod))
  add(query_21628601, "Version", newJString(Version))
  add(formData_21628602, "NodeType", newJString(NodeType))
  add(formData_21628602, "MaintenanceTrackName", newJString(MaintenanceTrackName))
  add(formData_21628602, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  result = call_21628600.call(nil, query_21628601, nil, formData_21628602, nil)

var postModifyCluster* = Call_PostModifyCluster_21628565(name: "postModifyCluster",
    meth: HttpMethod.HttpPost, host: "redshift.amazonaws.com",
    route: "/#Action=ModifyCluster", validator: validate_PostModifyCluster_21628566,
    base: "/", makeUrl: url_PostModifyCluster_21628567,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyCluster_21628528 = ref object of OpenApiRestCall_21625418
proc url_GetModifyCluster_21628530(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyCluster_21628529(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Modifies the settings for a cluster.</p> <p>You can also change node type and the number of nodes to scale up or down the cluster. When resizing a cluster, you must specify both the number of nodes and the node type even if one of the parameters does not change.</p> <p>You can add another security or parameter group, or change the master user password. Resetting a cluster password or modifying the security groups associated with a cluster do not need a reboot. However, modifying a parameter group requires a reboot for parameters to take effect. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ClusterSecurityGroups: JArray
  ##                        : <p>A list of cluster security groups to be authorized on this cluster. This change is asynchronously applied as soon as possible.</p> <p>Security groups currently associated with the cluster, and not in the list of groups to apply, will be revoked from the cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   HsmClientCertificateIdentifier: JString
  ##                                 : Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, if necessary. If system maintenance is necessary during the window, it may result in an outage.</p> <p>This maintenance window change is made immediately. If the new maintenance window indicates the current time, there must be at least 120 minutes between the current time and end of the window in order to ensure that pending changes are applied.</p> <p>Default: Uses existing setting.</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi, for example <code>wed:07:30-wed:08:00</code>.</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes.</p>
  ##   Encrypted: JBool
  ##            : <p>Indicates whether the cluster is encrypted. If the value is encrypted (true) and you provide a value for the <code>KmsKeyId</code> parameter, we encrypt the cluster with the provided <code>KmsKeyId</code>. If you don't provide a <code>KmsKeyId</code>, we encrypt with the default key. In the China region we use legacy encryption if you specify that the cluster is encrypted.</p> <p>If the value is not encrypted (false), then the cluster is decrypted. </p>
  ##   MaintenanceTrackName: JString
  ##                       : The name for the maintenance track that you want to assign for the cluster. This name change is asynchronous. The new track name stays in the <code>PendingModifiedValues</code> for the cluster until the next maintenance window. When the maintenance track changes, the cluster is switched to the latest cluster release available for the maintenance track. At this point, the maintenance track name is applied.
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the cluster master user. This change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <note> <p>Operations never return the password, so this operation provides a way to regain access to the master user account for a cluster if the password is lost.</p> </note> <p>Default: Uses existing setting.</p> <p>Constraints:</p> <ul> <li> <p>Must be between 8 and 64 characters in length.</p> </li> <li> <p>Must contain at least one uppercase letter.</p> </li> <li> <p>Must contain at least one lowercase letter.</p> </li> <li> <p>Must contain one number.</p> </li> <li> <p>Can be any printable ASCII character (ASCII code 33 to 126) except ' (single quote), " (double quote), \, /, @, or space.</p> </li> </ul>
  ##   AllowVersionUpgrade: JBool
  ##                      : <p>If <code>true</code>, major version upgrades will be applied automatically to the cluster during the maintenance window. </p> <p>Default: <code>false</code> </p>
  ##   EnhancedVpcRouting: JBool
  ##                     : <p>An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html">Enhanced VPC Routing</a> in the Amazon Redshift Cluster Management Guide.</p> <p>If this option is <code>true</code>, enhanced VPC routing is enabled. </p> <p>Default: false</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of virtual private cloud (VPC) security groups to be associated with the cluster. This change is asynchronously applied as soon as possible.
  ##   ClusterParameterGroupName: JString
  ##                            : <p>The name of the cluster parameter group to apply to this cluster. This change is applied only after the cluster is rebooted. To reboot a cluster use <a>RebootCluster</a>. </p> <p>Default: Uses existing setting.</p> <p>Constraints: The cluster parameter group must be in the same parameter group family that matches the cluster version.</p>
  ##   HsmConfigurationIdentifier: JString
  ##                             : Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
  ##   NewClusterIdentifier: JString
  ##                       : <p>The new identifier for the cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>Alphabetic characters must be lowercase.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Must be unique for all clusters within an AWS account.</p> </li> </ul> <p>Example: <code>examplecluster</code> </p>
  ##   ElasticIp: JString
  ##            : <p>The Elastic IP (EIP) address for the cluster.</p> <p>Constraints: The cluster must be provisioned in EC2-VPC and publicly-accessible through an Internet gateway. For more information about provisioning clusters in EC2-VPC, go to <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#cluster-platforms">Supported Platforms to Launch Your Cluster</a> in the Amazon Redshift Cluster Management Guide.</p>
  ##   ClusterIdentifier: JString (required)
  ##                    : <p>The unique identifier of the cluster to be modified.</p> <p>Example: <code>examplecluster</code> </p>
  ##   Action: JString (required)
  ##   KmsKeyId: JString
  ##           : The AWS Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the cluster.
  ##   PubliclyAccessible: JBool
  ##                     : If <code>true</code>, the cluster can be accessed from a public network. Only clusters in VPCs can be set to be publicly available.
  ##   NumberOfNodes: JInt
  ##                : <p>The new number of nodes of the cluster. If you specify a new number of nodes, you must also specify the node type parameter.</p> <p> For more information about resizing clusters, go to <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/rs-resize-tutorial.html">Resizing Clusters in Amazon Redshift</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>Valid Values: Integer greater than <code>0</code>.</p>
  ##   AutomatedSnapshotRetentionPeriod: JInt
  ##                                   : <p>The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with <a>CreateClusterSnapshot</a>. </p> <p>If you decrease the automated snapshot retention period from its current value, existing automated snapshots that fall outside of the new retention period will be immediately deleted.</p> <p>Default: Uses existing setting.</p> <p>Constraints: Must be a value from 0 to 35.</p>
  ##   NodeType: JString
  ##           : <p>The new node type of the cluster. If you specify a new node type, you must also specify the number of nodes parameter.</p> <p> For more information about resizing clusters, go to <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/rs-resize-tutorial.html">Resizing Clusters in Amazon Redshift</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>Valid Values: <code>ds2.xlarge</code> | <code>ds2.8xlarge</code> | <code>dc1.large</code> | <code>dc1.8xlarge</code> | <code>dc2.large</code> | <code>dc2.8xlarge</code> | <code>ra3.16xlarge</code> </p>
  ##   ClusterVersion: JString
  ##                 : <p>The new version number of the Amazon Redshift engine to upgrade to.</p> <p>For major version upgrades, if a non-default cluster parameter group is currently in use, a new cluster parameter group in the cluster parameter group family for the new version must be specified. The new cluster parameter group can be the default for that cluster parameter group family. For more information about parameters and parameter groups, go to <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>Example: <code>1.0</code> </p>
  ##   Version: JString (required)
  ##   ClusterType: JString
  ##              : <p>The new cluster type.</p> <p>When you submit your cluster resize request, your existing cluster goes into a read-only mode. After Amazon Redshift provisions a new cluster based on your resize requirements, there will be outage for a period while the old cluster is deleted and your connection is switched to the new cluster. You can use <a>DescribeResize</a> to track the progress of the resize request. </p> <p>Valid Values: <code> multi-node | single-node </code> </p>
  ##   ManualSnapshotRetentionPeriod: JInt
  ##                                : <p>The default for number of days that a newly created manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely. This value doesn't retroactively change the retention periods of existing manual snapshots.</p> <p>The value must be either -1 or an integer between 1 and 3,653.</p> <p>The default value is -1.</p>
  section = newJObject()
  var valid_21628531 = query.getOrDefault("ClusterSecurityGroups")
  valid_21628531 = validateParameter(valid_21628531, JArray, required = false,
                                   default = nil)
  if valid_21628531 != nil:
    section.add "ClusterSecurityGroups", valid_21628531
  var valid_21628532 = query.getOrDefault("HsmClientCertificateIdentifier")
  valid_21628532 = validateParameter(valid_21628532, JString, required = false,
                                   default = nil)
  if valid_21628532 != nil:
    section.add "HsmClientCertificateIdentifier", valid_21628532
  var valid_21628533 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_21628533 = validateParameter(valid_21628533, JString, required = false,
                                   default = nil)
  if valid_21628533 != nil:
    section.add "PreferredMaintenanceWindow", valid_21628533
  var valid_21628534 = query.getOrDefault("Encrypted")
  valid_21628534 = validateParameter(valid_21628534, JBool, required = false,
                                   default = nil)
  if valid_21628534 != nil:
    section.add "Encrypted", valid_21628534
  var valid_21628535 = query.getOrDefault("MaintenanceTrackName")
  valid_21628535 = validateParameter(valid_21628535, JString, required = false,
                                   default = nil)
  if valid_21628535 != nil:
    section.add "MaintenanceTrackName", valid_21628535
  var valid_21628536 = query.getOrDefault("MasterUserPassword")
  valid_21628536 = validateParameter(valid_21628536, JString, required = false,
                                   default = nil)
  if valid_21628536 != nil:
    section.add "MasterUserPassword", valid_21628536
  var valid_21628537 = query.getOrDefault("AllowVersionUpgrade")
  valid_21628537 = validateParameter(valid_21628537, JBool, required = false,
                                   default = nil)
  if valid_21628537 != nil:
    section.add "AllowVersionUpgrade", valid_21628537
  var valid_21628538 = query.getOrDefault("EnhancedVpcRouting")
  valid_21628538 = validateParameter(valid_21628538, JBool, required = false,
                                   default = nil)
  if valid_21628538 != nil:
    section.add "EnhancedVpcRouting", valid_21628538
  var valid_21628539 = query.getOrDefault("VpcSecurityGroupIds")
  valid_21628539 = validateParameter(valid_21628539, JArray, required = false,
                                   default = nil)
  if valid_21628539 != nil:
    section.add "VpcSecurityGroupIds", valid_21628539
  var valid_21628540 = query.getOrDefault("ClusterParameterGroupName")
  valid_21628540 = validateParameter(valid_21628540, JString, required = false,
                                   default = nil)
  if valid_21628540 != nil:
    section.add "ClusterParameterGroupName", valid_21628540
  var valid_21628541 = query.getOrDefault("HsmConfigurationIdentifier")
  valid_21628541 = validateParameter(valid_21628541, JString, required = false,
                                   default = nil)
  if valid_21628541 != nil:
    section.add "HsmConfigurationIdentifier", valid_21628541
  var valid_21628542 = query.getOrDefault("NewClusterIdentifier")
  valid_21628542 = validateParameter(valid_21628542, JString, required = false,
                                   default = nil)
  if valid_21628542 != nil:
    section.add "NewClusterIdentifier", valid_21628542
  var valid_21628543 = query.getOrDefault("ElasticIp")
  valid_21628543 = validateParameter(valid_21628543, JString, required = false,
                                   default = nil)
  if valid_21628543 != nil:
    section.add "ElasticIp", valid_21628543
  assert query != nil,
        "query argument is necessary due to required `ClusterIdentifier` field"
  var valid_21628544 = query.getOrDefault("ClusterIdentifier")
  valid_21628544 = validateParameter(valid_21628544, JString, required = true,
                                   default = nil)
  if valid_21628544 != nil:
    section.add "ClusterIdentifier", valid_21628544
  var valid_21628545 = query.getOrDefault("Action")
  valid_21628545 = validateParameter(valid_21628545, JString, required = true,
                                   default = newJString("ModifyCluster"))
  if valid_21628545 != nil:
    section.add "Action", valid_21628545
  var valid_21628546 = query.getOrDefault("KmsKeyId")
  valid_21628546 = validateParameter(valid_21628546, JString, required = false,
                                   default = nil)
  if valid_21628546 != nil:
    section.add "KmsKeyId", valid_21628546
  var valid_21628547 = query.getOrDefault("PubliclyAccessible")
  valid_21628547 = validateParameter(valid_21628547, JBool, required = false,
                                   default = nil)
  if valid_21628547 != nil:
    section.add "PubliclyAccessible", valid_21628547
  var valid_21628548 = query.getOrDefault("NumberOfNodes")
  valid_21628548 = validateParameter(valid_21628548, JInt, required = false,
                                   default = nil)
  if valid_21628548 != nil:
    section.add "NumberOfNodes", valid_21628548
  var valid_21628549 = query.getOrDefault("AutomatedSnapshotRetentionPeriod")
  valid_21628549 = validateParameter(valid_21628549, JInt, required = false,
                                   default = nil)
  if valid_21628549 != nil:
    section.add "AutomatedSnapshotRetentionPeriod", valid_21628549
  var valid_21628550 = query.getOrDefault("NodeType")
  valid_21628550 = validateParameter(valid_21628550, JString, required = false,
                                   default = nil)
  if valid_21628550 != nil:
    section.add "NodeType", valid_21628550
  var valid_21628551 = query.getOrDefault("ClusterVersion")
  valid_21628551 = validateParameter(valid_21628551, JString, required = false,
                                   default = nil)
  if valid_21628551 != nil:
    section.add "ClusterVersion", valid_21628551
  var valid_21628552 = query.getOrDefault("Version")
  valid_21628552 = validateParameter(valid_21628552, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628552 != nil:
    section.add "Version", valid_21628552
  var valid_21628553 = query.getOrDefault("ClusterType")
  valid_21628553 = validateParameter(valid_21628553, JString, required = false,
                                   default = nil)
  if valid_21628553 != nil:
    section.add "ClusterType", valid_21628553
  var valid_21628554 = query.getOrDefault("ManualSnapshotRetentionPeriod")
  valid_21628554 = validateParameter(valid_21628554, JInt, required = false,
                                   default = nil)
  if valid_21628554 != nil:
    section.add "ManualSnapshotRetentionPeriod", valid_21628554
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628555 = header.getOrDefault("X-Amz-Date")
  valid_21628555 = validateParameter(valid_21628555, JString, required = false,
                                   default = nil)
  if valid_21628555 != nil:
    section.add "X-Amz-Date", valid_21628555
  var valid_21628556 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628556 = validateParameter(valid_21628556, JString, required = false,
                                   default = nil)
  if valid_21628556 != nil:
    section.add "X-Amz-Security-Token", valid_21628556
  var valid_21628557 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628557 = validateParameter(valid_21628557, JString, required = false,
                                   default = nil)
  if valid_21628557 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628557
  var valid_21628558 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628558 = validateParameter(valid_21628558, JString, required = false,
                                   default = nil)
  if valid_21628558 != nil:
    section.add "X-Amz-Algorithm", valid_21628558
  var valid_21628559 = header.getOrDefault("X-Amz-Signature")
  valid_21628559 = validateParameter(valid_21628559, JString, required = false,
                                   default = nil)
  if valid_21628559 != nil:
    section.add "X-Amz-Signature", valid_21628559
  var valid_21628560 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628560 = validateParameter(valid_21628560, JString, required = false,
                                   default = nil)
  if valid_21628560 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628560
  var valid_21628561 = header.getOrDefault("X-Amz-Credential")
  valid_21628561 = validateParameter(valid_21628561, JString, required = false,
                                   default = nil)
  if valid_21628561 != nil:
    section.add "X-Amz-Credential", valid_21628561
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628562: Call_GetModifyCluster_21628528; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Modifies the settings for a cluster.</p> <p>You can also change node type and the number of nodes to scale up or down the cluster. When resizing a cluster, you must specify both the number of nodes and the node type even if one of the parameters does not change.</p> <p>You can add another security or parameter group, or change the master user password. Resetting a cluster password or modifying the security groups associated with a cluster do not need a reboot. However, modifying a parameter group requires a reboot for parameters to take effect. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  let valid = call_21628562.validator(path, query, header, formData, body, _)
  let scheme = call_21628562.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628562.makeUrl(scheme.get, call_21628562.host, call_21628562.base,
                               call_21628562.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628562, uri, valid, _)

proc call*(call_21628563: Call_GetModifyCluster_21628528;
          ClusterIdentifier: string; ClusterSecurityGroups: JsonNode = nil;
          HsmClientCertificateIdentifier: string = "";
          PreferredMaintenanceWindow: string = ""; Encrypted: bool = false;
          MaintenanceTrackName: string = ""; MasterUserPassword: string = "";
          AllowVersionUpgrade: bool = false; EnhancedVpcRouting: bool = false;
          VpcSecurityGroupIds: JsonNode = nil;
          ClusterParameterGroupName: string = "";
          HsmConfigurationIdentifier: string = "";
          NewClusterIdentifier: string = ""; ElasticIp: string = "";
          Action: string = "ModifyCluster"; KmsKeyId: string = "";
          PubliclyAccessible: bool = false; NumberOfNodes: int = 0;
          AutomatedSnapshotRetentionPeriod: int = 0; NodeType: string = "";
          ClusterVersion: string = ""; Version: string = "2012-12-01";
          ClusterType: string = ""; ManualSnapshotRetentionPeriod: int = 0): Recallable =
  ## getModifyCluster
  ## <p>Modifies the settings for a cluster.</p> <p>You can also change node type and the number of nodes to scale up or down the cluster. When resizing a cluster, you must specify both the number of nodes and the node type even if one of the parameters does not change.</p> <p>You can add another security or parameter group, or change the master user password. Resetting a cluster password or modifying the security groups associated with a cluster do not need a reboot. However, modifying a parameter group requires a reboot for parameters to take effect. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ##   ClusterSecurityGroups: JArray
  ##                        : <p>A list of cluster security groups to be authorized on this cluster. This change is asynchronously applied as soon as possible.</p> <p>Security groups currently associated with the cluster, and not in the list of groups to apply, will be revoked from the cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   HsmClientCertificateIdentifier: string
  ##                                 : Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, if necessary. If system maintenance is necessary during the window, it may result in an outage.</p> <p>This maintenance window change is made immediately. If the new maintenance window indicates the current time, there must be at least 120 minutes between the current time and end of the window in order to ensure that pending changes are applied.</p> <p>Default: Uses existing setting.</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi, for example <code>wed:07:30-wed:08:00</code>.</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes.</p>
  ##   Encrypted: bool
  ##            : <p>Indicates whether the cluster is encrypted. If the value is encrypted (true) and you provide a value for the <code>KmsKeyId</code> parameter, we encrypt the cluster with the provided <code>KmsKeyId</code>. If you don't provide a <code>KmsKeyId</code>, we encrypt with the default key. In the China region we use legacy encryption if you specify that the cluster is encrypted.</p> <p>If the value is not encrypted (false), then the cluster is decrypted. </p>
  ##   MaintenanceTrackName: string
  ##                       : The name for the maintenance track that you want to assign for the cluster. This name change is asynchronous. The new track name stays in the <code>PendingModifiedValues</code> for the cluster until the next maintenance window. When the maintenance track changes, the cluster is switched to the latest cluster release available for the maintenance track. At this point, the maintenance track name is applied.
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the cluster master user. This change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <note> <p>Operations never return the password, so this operation provides a way to regain access to the master user account for a cluster if the password is lost.</p> </note> <p>Default: Uses existing setting.</p> <p>Constraints:</p> <ul> <li> <p>Must be between 8 and 64 characters in length.</p> </li> <li> <p>Must contain at least one uppercase letter.</p> </li> <li> <p>Must contain at least one lowercase letter.</p> </li> <li> <p>Must contain one number.</p> </li> <li> <p>Can be any printable ASCII character (ASCII code 33 to 126) except ' (single quote), " (double quote), \, /, @, or space.</p> </li> </ul>
  ##   AllowVersionUpgrade: bool
  ##                      : <p>If <code>true</code>, major version upgrades will be applied automatically to the cluster during the maintenance window. </p> <p>Default: <code>false</code> </p>
  ##   EnhancedVpcRouting: bool
  ##                     : <p>An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html">Enhanced VPC Routing</a> in the Amazon Redshift Cluster Management Guide.</p> <p>If this option is <code>true</code>, enhanced VPC routing is enabled. </p> <p>Default: false</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of virtual private cloud (VPC) security groups to be associated with the cluster. This change is asynchronously applied as soon as possible.
  ##   ClusterParameterGroupName: string
  ##                            : <p>The name of the cluster parameter group to apply to this cluster. This change is applied only after the cluster is rebooted. To reboot a cluster use <a>RebootCluster</a>. </p> <p>Default: Uses existing setting.</p> <p>Constraints: The cluster parameter group must be in the same parameter group family that matches the cluster version.</p>
  ##   HsmConfigurationIdentifier: string
  ##                             : Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
  ##   NewClusterIdentifier: string
  ##                       : <p>The new identifier for the cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>Alphabetic characters must be lowercase.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Must be unique for all clusters within an AWS account.</p> </li> </ul> <p>Example: <code>examplecluster</code> </p>
  ##   ElasticIp: string
  ##            : <p>The Elastic IP (EIP) address for the cluster.</p> <p>Constraints: The cluster must be provisioned in EC2-VPC and publicly-accessible through an Internet gateway. For more information about provisioning clusters in EC2-VPC, go to <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#cluster-platforms">Supported Platforms to Launch Your Cluster</a> in the Amazon Redshift Cluster Management Guide.</p>
  ##   ClusterIdentifier: string (required)
  ##                    : <p>The unique identifier of the cluster to be modified.</p> <p>Example: <code>examplecluster</code> </p>
  ##   Action: string (required)
  ##   KmsKeyId: string
  ##           : The AWS Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the cluster.
  ##   PubliclyAccessible: bool
  ##                     : If <code>true</code>, the cluster can be accessed from a public network. Only clusters in VPCs can be set to be publicly available.
  ##   NumberOfNodes: int
  ##                : <p>The new number of nodes of the cluster. If you specify a new number of nodes, you must also specify the node type parameter.</p> <p> For more information about resizing clusters, go to <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/rs-resize-tutorial.html">Resizing Clusters in Amazon Redshift</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>Valid Values: Integer greater than <code>0</code>.</p>
  ##   AutomatedSnapshotRetentionPeriod: int
  ##                                   : <p>The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with <a>CreateClusterSnapshot</a>. </p> <p>If you decrease the automated snapshot retention period from its current value, existing automated snapshots that fall outside of the new retention period will be immediately deleted.</p> <p>Default: Uses existing setting.</p> <p>Constraints: Must be a value from 0 to 35.</p>
  ##   NodeType: string
  ##           : <p>The new node type of the cluster. If you specify a new node type, you must also specify the number of nodes parameter.</p> <p> For more information about resizing clusters, go to <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/rs-resize-tutorial.html">Resizing Clusters in Amazon Redshift</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>Valid Values: <code>ds2.xlarge</code> | <code>ds2.8xlarge</code> | <code>dc1.large</code> | <code>dc1.8xlarge</code> | <code>dc2.large</code> | <code>dc2.8xlarge</code> | <code>ra3.16xlarge</code> </p>
  ##   ClusterVersion: string
  ##                 : <p>The new version number of the Amazon Redshift engine to upgrade to.</p> <p>For major version upgrades, if a non-default cluster parameter group is currently in use, a new cluster parameter group in the cluster parameter group family for the new version must be specified. The new cluster parameter group can be the default for that cluster parameter group family. For more information about parameters and parameter groups, go to <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>Example: <code>1.0</code> </p>
  ##   Version: string (required)
  ##   ClusterType: string
  ##              : <p>The new cluster type.</p> <p>When you submit your cluster resize request, your existing cluster goes into a read-only mode. After Amazon Redshift provisions a new cluster based on your resize requirements, there will be outage for a period while the old cluster is deleted and your connection is switched to the new cluster. You can use <a>DescribeResize</a> to track the progress of the resize request. </p> <p>Valid Values: <code> multi-node | single-node </code> </p>
  ##   ManualSnapshotRetentionPeriod: int
  ##                                : <p>The default for number of days that a newly created manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely. This value doesn't retroactively change the retention periods of existing manual snapshots.</p> <p>The value must be either -1 or an integer between 1 and 3,653.</p> <p>The default value is -1.</p>
  var query_21628564 = newJObject()
  if ClusterSecurityGroups != nil:
    query_21628564.add "ClusterSecurityGroups", ClusterSecurityGroups
  add(query_21628564, "HsmClientCertificateIdentifier",
      newJString(HsmClientCertificateIdentifier))
  add(query_21628564, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_21628564, "Encrypted", newJBool(Encrypted))
  add(query_21628564, "MaintenanceTrackName", newJString(MaintenanceTrackName))
  add(query_21628564, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_21628564, "AllowVersionUpgrade", newJBool(AllowVersionUpgrade))
  add(query_21628564, "EnhancedVpcRouting", newJBool(EnhancedVpcRouting))
  if VpcSecurityGroupIds != nil:
    query_21628564.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_21628564, "ClusterParameterGroupName",
      newJString(ClusterParameterGroupName))
  add(query_21628564, "HsmConfigurationIdentifier",
      newJString(HsmConfigurationIdentifier))
  add(query_21628564, "NewClusterIdentifier", newJString(NewClusterIdentifier))
  add(query_21628564, "ElasticIp", newJString(ElasticIp))
  add(query_21628564, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(query_21628564, "Action", newJString(Action))
  add(query_21628564, "KmsKeyId", newJString(KmsKeyId))
  add(query_21628564, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_21628564, "NumberOfNodes", newJInt(NumberOfNodes))
  add(query_21628564, "AutomatedSnapshotRetentionPeriod",
      newJInt(AutomatedSnapshotRetentionPeriod))
  add(query_21628564, "NodeType", newJString(NodeType))
  add(query_21628564, "ClusterVersion", newJString(ClusterVersion))
  add(query_21628564, "Version", newJString(Version))
  add(query_21628564, "ClusterType", newJString(ClusterType))
  add(query_21628564, "ManualSnapshotRetentionPeriod",
      newJInt(ManualSnapshotRetentionPeriod))
  result = call_21628563.call(nil, query_21628564, nil, nil, nil)

var getModifyCluster* = Call_GetModifyCluster_21628528(name: "getModifyCluster",
    meth: HttpMethod.HttpGet, host: "redshift.amazonaws.com",
    route: "/#Action=ModifyCluster", validator: validate_GetModifyCluster_21628529,
    base: "/", makeUrl: url_GetModifyCluster_21628530,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyClusterDbRevision_21628620 = ref object of OpenApiRestCall_21625418
proc url_PostModifyClusterDbRevision_21628622(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyClusterDbRevision_21628621(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Modifies the database revision of a cluster. The database revision is a unique revision of the database running in a cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628623 = query.getOrDefault("Action")
  valid_21628623 = validateParameter(valid_21628623, JString, required = true, default = newJString(
      "ModifyClusterDbRevision"))
  if valid_21628623 != nil:
    section.add "Action", valid_21628623
  var valid_21628624 = query.getOrDefault("Version")
  valid_21628624 = validateParameter(valid_21628624, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628624 != nil:
    section.add "Version", valid_21628624
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628625 = header.getOrDefault("X-Amz-Date")
  valid_21628625 = validateParameter(valid_21628625, JString, required = false,
                                   default = nil)
  if valid_21628625 != nil:
    section.add "X-Amz-Date", valid_21628625
  var valid_21628626 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628626 = validateParameter(valid_21628626, JString, required = false,
                                   default = nil)
  if valid_21628626 != nil:
    section.add "X-Amz-Security-Token", valid_21628626
  var valid_21628627 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628627 = validateParameter(valid_21628627, JString, required = false,
                                   default = nil)
  if valid_21628627 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628627
  var valid_21628628 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628628 = validateParameter(valid_21628628, JString, required = false,
                                   default = nil)
  if valid_21628628 != nil:
    section.add "X-Amz-Algorithm", valid_21628628
  var valid_21628629 = header.getOrDefault("X-Amz-Signature")
  valid_21628629 = validateParameter(valid_21628629, JString, required = false,
                                   default = nil)
  if valid_21628629 != nil:
    section.add "X-Amz-Signature", valid_21628629
  var valid_21628630 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628630 = validateParameter(valid_21628630, JString, required = false,
                                   default = nil)
  if valid_21628630 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628630
  var valid_21628631 = header.getOrDefault("X-Amz-Credential")
  valid_21628631 = validateParameter(valid_21628631, JString, required = false,
                                   default = nil)
  if valid_21628631 != nil:
    section.add "X-Amz-Credential", valid_21628631
  result.add "header", section
  ## parameters in `formData` object:
  ##   RevisionTarget: JString (required)
  ##                 : The identifier of the database revision. You can retrieve this value from the response to the <a>DescribeClusterDbRevisions</a> request.
  ##   ClusterIdentifier: JString (required)
  ##                    : <p>The unique identifier of a cluster whose database revision you want to modify. </p> <p>Example: <code>examplecluster</code> </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RevisionTarget` field"
  var valid_21628632 = formData.getOrDefault("RevisionTarget")
  valid_21628632 = validateParameter(valid_21628632, JString, required = true,
                                   default = nil)
  if valid_21628632 != nil:
    section.add "RevisionTarget", valid_21628632
  var valid_21628633 = formData.getOrDefault("ClusterIdentifier")
  valid_21628633 = validateParameter(valid_21628633, JString, required = true,
                                   default = nil)
  if valid_21628633 != nil:
    section.add "ClusterIdentifier", valid_21628633
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628634: Call_PostModifyClusterDbRevision_21628620;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Modifies the database revision of a cluster. The database revision is a unique revision of the database running in a cluster.
  ## 
  let valid = call_21628634.validator(path, query, header, formData, body, _)
  let scheme = call_21628634.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628634.makeUrl(scheme.get, call_21628634.host, call_21628634.base,
                               call_21628634.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628634, uri, valid, _)

proc call*(call_21628635: Call_PostModifyClusterDbRevision_21628620;
          RevisionTarget: string; ClusterIdentifier: string;
          Action: string = "ModifyClusterDbRevision"; Version: string = "2012-12-01"): Recallable =
  ## postModifyClusterDbRevision
  ## Modifies the database revision of a cluster. The database revision is a unique revision of the database running in a cluster.
  ##   RevisionTarget: string (required)
  ##                 : The identifier of the database revision. You can retrieve this value from the response to the <a>DescribeClusterDbRevisions</a> request.
  ##   Action: string (required)
  ##   ClusterIdentifier: string (required)
  ##                    : <p>The unique identifier of a cluster whose database revision you want to modify. </p> <p>Example: <code>examplecluster</code> </p>
  ##   Version: string (required)
  var query_21628636 = newJObject()
  var formData_21628637 = newJObject()
  add(formData_21628637, "RevisionTarget", newJString(RevisionTarget))
  add(query_21628636, "Action", newJString(Action))
  add(formData_21628637, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(query_21628636, "Version", newJString(Version))
  result = call_21628635.call(nil, query_21628636, nil, formData_21628637, nil)

var postModifyClusterDbRevision* = Call_PostModifyClusterDbRevision_21628620(
    name: "postModifyClusterDbRevision", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=ModifyClusterDbRevision",
    validator: validate_PostModifyClusterDbRevision_21628621, base: "/",
    makeUrl: url_PostModifyClusterDbRevision_21628622,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyClusterDbRevision_21628603 = ref object of OpenApiRestCall_21625418
proc url_GetModifyClusterDbRevision_21628605(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyClusterDbRevision_21628604(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Modifies the database revision of a cluster. The database revision is a unique revision of the database running in a cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RevisionTarget: JString (required)
  ##                 : The identifier of the database revision. You can retrieve this value from the response to the <a>DescribeClusterDbRevisions</a> request.
  ##   Action: JString (required)
  ##   ClusterIdentifier: JString (required)
  ##                    : <p>The unique identifier of a cluster whose database revision you want to modify. </p> <p>Example: <code>examplecluster</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RevisionTarget` field"
  var valid_21628606 = query.getOrDefault("RevisionTarget")
  valid_21628606 = validateParameter(valid_21628606, JString, required = true,
                                   default = nil)
  if valid_21628606 != nil:
    section.add "RevisionTarget", valid_21628606
  var valid_21628607 = query.getOrDefault("Action")
  valid_21628607 = validateParameter(valid_21628607, JString, required = true, default = newJString(
      "ModifyClusterDbRevision"))
  if valid_21628607 != nil:
    section.add "Action", valid_21628607
  var valid_21628608 = query.getOrDefault("ClusterIdentifier")
  valid_21628608 = validateParameter(valid_21628608, JString, required = true,
                                   default = nil)
  if valid_21628608 != nil:
    section.add "ClusterIdentifier", valid_21628608
  var valid_21628609 = query.getOrDefault("Version")
  valid_21628609 = validateParameter(valid_21628609, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628609 != nil:
    section.add "Version", valid_21628609
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628610 = header.getOrDefault("X-Amz-Date")
  valid_21628610 = validateParameter(valid_21628610, JString, required = false,
                                   default = nil)
  if valid_21628610 != nil:
    section.add "X-Amz-Date", valid_21628610
  var valid_21628611 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628611 = validateParameter(valid_21628611, JString, required = false,
                                   default = nil)
  if valid_21628611 != nil:
    section.add "X-Amz-Security-Token", valid_21628611
  var valid_21628612 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628612 = validateParameter(valid_21628612, JString, required = false,
                                   default = nil)
  if valid_21628612 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628612
  var valid_21628613 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628613 = validateParameter(valid_21628613, JString, required = false,
                                   default = nil)
  if valid_21628613 != nil:
    section.add "X-Amz-Algorithm", valid_21628613
  var valid_21628614 = header.getOrDefault("X-Amz-Signature")
  valid_21628614 = validateParameter(valid_21628614, JString, required = false,
                                   default = nil)
  if valid_21628614 != nil:
    section.add "X-Amz-Signature", valid_21628614
  var valid_21628615 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628615 = validateParameter(valid_21628615, JString, required = false,
                                   default = nil)
  if valid_21628615 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628615
  var valid_21628616 = header.getOrDefault("X-Amz-Credential")
  valid_21628616 = validateParameter(valid_21628616, JString, required = false,
                                   default = nil)
  if valid_21628616 != nil:
    section.add "X-Amz-Credential", valid_21628616
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628617: Call_GetModifyClusterDbRevision_21628603;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Modifies the database revision of a cluster. The database revision is a unique revision of the database running in a cluster.
  ## 
  let valid = call_21628617.validator(path, query, header, formData, body, _)
  let scheme = call_21628617.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628617.makeUrl(scheme.get, call_21628617.host, call_21628617.base,
                               call_21628617.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628617, uri, valid, _)

proc call*(call_21628618: Call_GetModifyClusterDbRevision_21628603;
          RevisionTarget: string; ClusterIdentifier: string;
          Action: string = "ModifyClusterDbRevision"; Version: string = "2012-12-01"): Recallable =
  ## getModifyClusterDbRevision
  ## Modifies the database revision of a cluster. The database revision is a unique revision of the database running in a cluster.
  ##   RevisionTarget: string (required)
  ##                 : The identifier of the database revision. You can retrieve this value from the response to the <a>DescribeClusterDbRevisions</a> request.
  ##   Action: string (required)
  ##   ClusterIdentifier: string (required)
  ##                    : <p>The unique identifier of a cluster whose database revision you want to modify. </p> <p>Example: <code>examplecluster</code> </p>
  ##   Version: string (required)
  var query_21628619 = newJObject()
  add(query_21628619, "RevisionTarget", newJString(RevisionTarget))
  add(query_21628619, "Action", newJString(Action))
  add(query_21628619, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(query_21628619, "Version", newJString(Version))
  result = call_21628618.call(nil, query_21628619, nil, nil, nil)

var getModifyClusterDbRevision* = Call_GetModifyClusterDbRevision_21628603(
    name: "getModifyClusterDbRevision", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=ModifyClusterDbRevision",
    validator: validate_GetModifyClusterDbRevision_21628604, base: "/",
    makeUrl: url_GetModifyClusterDbRevision_21628605,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyClusterIamRoles_21628656 = ref object of OpenApiRestCall_21625418
proc url_PostModifyClusterIamRoles_21628658(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyClusterIamRoles_21628657(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Modifies the list of AWS Identity and Access Management (IAM) roles that can be used by the cluster to access other AWS services.</p> <p>A cluster can have up to 10 IAM roles associated at any time.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628659 = query.getOrDefault("Action")
  valid_21628659 = validateParameter(valid_21628659, JString, required = true, default = newJString(
      "ModifyClusterIamRoles"))
  if valid_21628659 != nil:
    section.add "Action", valid_21628659
  var valid_21628660 = query.getOrDefault("Version")
  valid_21628660 = validateParameter(valid_21628660, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628660 != nil:
    section.add "Version", valid_21628660
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628661 = header.getOrDefault("X-Amz-Date")
  valid_21628661 = validateParameter(valid_21628661, JString, required = false,
                                   default = nil)
  if valid_21628661 != nil:
    section.add "X-Amz-Date", valid_21628661
  var valid_21628662 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628662 = validateParameter(valid_21628662, JString, required = false,
                                   default = nil)
  if valid_21628662 != nil:
    section.add "X-Amz-Security-Token", valid_21628662
  var valid_21628663 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628663 = validateParameter(valid_21628663, JString, required = false,
                                   default = nil)
  if valid_21628663 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628663
  var valid_21628664 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628664 = validateParameter(valid_21628664, JString, required = false,
                                   default = nil)
  if valid_21628664 != nil:
    section.add "X-Amz-Algorithm", valid_21628664
  var valid_21628665 = header.getOrDefault("X-Amz-Signature")
  valid_21628665 = validateParameter(valid_21628665, JString, required = false,
                                   default = nil)
  if valid_21628665 != nil:
    section.add "X-Amz-Signature", valid_21628665
  var valid_21628666 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628666 = validateParameter(valid_21628666, JString, required = false,
                                   default = nil)
  if valid_21628666 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628666
  var valid_21628667 = header.getOrDefault("X-Amz-Credential")
  valid_21628667 = validateParameter(valid_21628667, JString, required = false,
                                   default = nil)
  if valid_21628667 != nil:
    section.add "X-Amz-Credential", valid_21628667
  result.add "header", section
  ## parameters in `formData` object:
  ##   ClusterIdentifier: JString (required)
  ##                    : The unique identifier of the cluster for which you want to associate or disassociate IAM roles.
  ##   AddIamRoles: JArray
  ##              : Zero or more IAM roles to associate with the cluster. The roles must be in their Amazon Resource Name (ARN) format. You can associate up to 10 IAM roles with a single cluster in a single request.
  ##   RemoveIamRoles: JArray
  ##                 : Zero or more IAM roles in ARN format to disassociate from the cluster. You can disassociate up to 10 IAM roles from a single cluster in a single request.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ClusterIdentifier` field"
  var valid_21628668 = formData.getOrDefault("ClusterIdentifier")
  valid_21628668 = validateParameter(valid_21628668, JString, required = true,
                                   default = nil)
  if valid_21628668 != nil:
    section.add "ClusterIdentifier", valid_21628668
  var valid_21628669 = formData.getOrDefault("AddIamRoles")
  valid_21628669 = validateParameter(valid_21628669, JArray, required = false,
                                   default = nil)
  if valid_21628669 != nil:
    section.add "AddIamRoles", valid_21628669
  var valid_21628670 = formData.getOrDefault("RemoveIamRoles")
  valid_21628670 = validateParameter(valid_21628670, JArray, required = false,
                                   default = nil)
  if valid_21628670 != nil:
    section.add "RemoveIamRoles", valid_21628670
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628671: Call_PostModifyClusterIamRoles_21628656;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Modifies the list of AWS Identity and Access Management (IAM) roles that can be used by the cluster to access other AWS services.</p> <p>A cluster can have up to 10 IAM roles associated at any time.</p>
  ## 
  let valid = call_21628671.validator(path, query, header, formData, body, _)
  let scheme = call_21628671.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628671.makeUrl(scheme.get, call_21628671.host, call_21628671.base,
                               call_21628671.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628671, uri, valid, _)

proc call*(call_21628672: Call_PostModifyClusterIamRoles_21628656;
          ClusterIdentifier: string; Action: string = "ModifyClusterIamRoles";
          AddIamRoles: JsonNode = nil; RemoveIamRoles: JsonNode = nil;
          Version: string = "2012-12-01"): Recallable =
  ## postModifyClusterIamRoles
  ## <p>Modifies the list of AWS Identity and Access Management (IAM) roles that can be used by the cluster to access other AWS services.</p> <p>A cluster can have up to 10 IAM roles associated at any time.</p>
  ##   Action: string (required)
  ##   ClusterIdentifier: string (required)
  ##                    : The unique identifier of the cluster for which you want to associate or disassociate IAM roles.
  ##   AddIamRoles: JArray
  ##              : Zero or more IAM roles to associate with the cluster. The roles must be in their Amazon Resource Name (ARN) format. You can associate up to 10 IAM roles with a single cluster in a single request.
  ##   RemoveIamRoles: JArray
  ##                 : Zero or more IAM roles in ARN format to disassociate from the cluster. You can disassociate up to 10 IAM roles from a single cluster in a single request.
  ##   Version: string (required)
  var query_21628673 = newJObject()
  var formData_21628674 = newJObject()
  add(query_21628673, "Action", newJString(Action))
  add(formData_21628674, "ClusterIdentifier", newJString(ClusterIdentifier))
  if AddIamRoles != nil:
    formData_21628674.add "AddIamRoles", AddIamRoles
  if RemoveIamRoles != nil:
    formData_21628674.add "RemoveIamRoles", RemoveIamRoles
  add(query_21628673, "Version", newJString(Version))
  result = call_21628672.call(nil, query_21628673, nil, formData_21628674, nil)

var postModifyClusterIamRoles* = Call_PostModifyClusterIamRoles_21628656(
    name: "postModifyClusterIamRoles", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=ModifyClusterIamRoles",
    validator: validate_PostModifyClusterIamRoles_21628657, base: "/",
    makeUrl: url_PostModifyClusterIamRoles_21628658,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyClusterIamRoles_21628638 = ref object of OpenApiRestCall_21625418
proc url_GetModifyClusterIamRoles_21628640(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyClusterIamRoles_21628639(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Modifies the list of AWS Identity and Access Management (IAM) roles that can be used by the cluster to access other AWS services.</p> <p>A cluster can have up to 10 IAM roles associated at any time.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AddIamRoles: JArray
  ##              : Zero or more IAM roles to associate with the cluster. The roles must be in their Amazon Resource Name (ARN) format. You can associate up to 10 IAM roles with a single cluster in a single request.
  ##   RemoveIamRoles: JArray
  ##                 : Zero or more IAM roles in ARN format to disassociate from the cluster. You can disassociate up to 10 IAM roles from a single cluster in a single request.
  ##   Action: JString (required)
  ##   ClusterIdentifier: JString (required)
  ##                    : The unique identifier of the cluster for which you want to associate or disassociate IAM roles.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628641 = query.getOrDefault("AddIamRoles")
  valid_21628641 = validateParameter(valid_21628641, JArray, required = false,
                                   default = nil)
  if valid_21628641 != nil:
    section.add "AddIamRoles", valid_21628641
  var valid_21628642 = query.getOrDefault("RemoveIamRoles")
  valid_21628642 = validateParameter(valid_21628642, JArray, required = false,
                                   default = nil)
  if valid_21628642 != nil:
    section.add "RemoveIamRoles", valid_21628642
  var valid_21628643 = query.getOrDefault("Action")
  valid_21628643 = validateParameter(valid_21628643, JString, required = true, default = newJString(
      "ModifyClusterIamRoles"))
  if valid_21628643 != nil:
    section.add "Action", valid_21628643
  var valid_21628644 = query.getOrDefault("ClusterIdentifier")
  valid_21628644 = validateParameter(valid_21628644, JString, required = true,
                                   default = nil)
  if valid_21628644 != nil:
    section.add "ClusterIdentifier", valid_21628644
  var valid_21628645 = query.getOrDefault("Version")
  valid_21628645 = validateParameter(valid_21628645, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628645 != nil:
    section.add "Version", valid_21628645
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628646 = header.getOrDefault("X-Amz-Date")
  valid_21628646 = validateParameter(valid_21628646, JString, required = false,
                                   default = nil)
  if valid_21628646 != nil:
    section.add "X-Amz-Date", valid_21628646
  var valid_21628647 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628647 = validateParameter(valid_21628647, JString, required = false,
                                   default = nil)
  if valid_21628647 != nil:
    section.add "X-Amz-Security-Token", valid_21628647
  var valid_21628648 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628648 = validateParameter(valid_21628648, JString, required = false,
                                   default = nil)
  if valid_21628648 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628648
  var valid_21628649 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628649 = validateParameter(valid_21628649, JString, required = false,
                                   default = nil)
  if valid_21628649 != nil:
    section.add "X-Amz-Algorithm", valid_21628649
  var valid_21628650 = header.getOrDefault("X-Amz-Signature")
  valid_21628650 = validateParameter(valid_21628650, JString, required = false,
                                   default = nil)
  if valid_21628650 != nil:
    section.add "X-Amz-Signature", valid_21628650
  var valid_21628651 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628651 = validateParameter(valid_21628651, JString, required = false,
                                   default = nil)
  if valid_21628651 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628651
  var valid_21628652 = header.getOrDefault("X-Amz-Credential")
  valid_21628652 = validateParameter(valid_21628652, JString, required = false,
                                   default = nil)
  if valid_21628652 != nil:
    section.add "X-Amz-Credential", valid_21628652
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628653: Call_GetModifyClusterIamRoles_21628638;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Modifies the list of AWS Identity and Access Management (IAM) roles that can be used by the cluster to access other AWS services.</p> <p>A cluster can have up to 10 IAM roles associated at any time.</p>
  ## 
  let valid = call_21628653.validator(path, query, header, formData, body, _)
  let scheme = call_21628653.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628653.makeUrl(scheme.get, call_21628653.host, call_21628653.base,
                               call_21628653.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628653, uri, valid, _)

proc call*(call_21628654: Call_GetModifyClusterIamRoles_21628638;
          ClusterIdentifier: string; AddIamRoles: JsonNode = nil;
          RemoveIamRoles: JsonNode = nil; Action: string = "ModifyClusterIamRoles";
          Version: string = "2012-12-01"): Recallable =
  ## getModifyClusterIamRoles
  ## <p>Modifies the list of AWS Identity and Access Management (IAM) roles that can be used by the cluster to access other AWS services.</p> <p>A cluster can have up to 10 IAM roles associated at any time.</p>
  ##   AddIamRoles: JArray
  ##              : Zero or more IAM roles to associate with the cluster. The roles must be in their Amazon Resource Name (ARN) format. You can associate up to 10 IAM roles with a single cluster in a single request.
  ##   RemoveIamRoles: JArray
  ##                 : Zero or more IAM roles in ARN format to disassociate from the cluster. You can disassociate up to 10 IAM roles from a single cluster in a single request.
  ##   Action: string (required)
  ##   ClusterIdentifier: string (required)
  ##                    : The unique identifier of the cluster for which you want to associate or disassociate IAM roles.
  ##   Version: string (required)
  var query_21628655 = newJObject()
  if AddIamRoles != nil:
    query_21628655.add "AddIamRoles", AddIamRoles
  if RemoveIamRoles != nil:
    query_21628655.add "RemoveIamRoles", RemoveIamRoles
  add(query_21628655, "Action", newJString(Action))
  add(query_21628655, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(query_21628655, "Version", newJString(Version))
  result = call_21628654.call(nil, query_21628655, nil, nil, nil)

var getModifyClusterIamRoles* = Call_GetModifyClusterIamRoles_21628638(
    name: "getModifyClusterIamRoles", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=ModifyClusterIamRoles",
    validator: validate_GetModifyClusterIamRoles_21628639, base: "/",
    makeUrl: url_GetModifyClusterIamRoles_21628640,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyClusterMaintenance_21628696 = ref object of OpenApiRestCall_21625418
proc url_PostModifyClusterMaintenance_21628698(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyClusterMaintenance_21628697(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Modifies the maintenance settings of a cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628699 = query.getOrDefault("Action")
  valid_21628699 = validateParameter(valid_21628699, JString, required = true, default = newJString(
      "ModifyClusterMaintenance"))
  if valid_21628699 != nil:
    section.add "Action", valid_21628699
  var valid_21628700 = query.getOrDefault("Version")
  valid_21628700 = validateParameter(valid_21628700, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628700 != nil:
    section.add "Version", valid_21628700
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628701 = header.getOrDefault("X-Amz-Date")
  valid_21628701 = validateParameter(valid_21628701, JString, required = false,
                                   default = nil)
  if valid_21628701 != nil:
    section.add "X-Amz-Date", valid_21628701
  var valid_21628702 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628702 = validateParameter(valid_21628702, JString, required = false,
                                   default = nil)
  if valid_21628702 != nil:
    section.add "X-Amz-Security-Token", valid_21628702
  var valid_21628703 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628703 = validateParameter(valid_21628703, JString, required = false,
                                   default = nil)
  if valid_21628703 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628703
  var valid_21628704 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628704 = validateParameter(valid_21628704, JString, required = false,
                                   default = nil)
  if valid_21628704 != nil:
    section.add "X-Amz-Algorithm", valid_21628704
  var valid_21628705 = header.getOrDefault("X-Amz-Signature")
  valid_21628705 = validateParameter(valid_21628705, JString, required = false,
                                   default = nil)
  if valid_21628705 != nil:
    section.add "X-Amz-Signature", valid_21628705
  var valid_21628706 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628706 = validateParameter(valid_21628706, JString, required = false,
                                   default = nil)
  if valid_21628706 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628706
  var valid_21628707 = header.getOrDefault("X-Amz-Credential")
  valid_21628707 = validateParameter(valid_21628707, JString, required = false,
                                   default = nil)
  if valid_21628707 != nil:
    section.add "X-Amz-Credential", valid_21628707
  result.add "header", section
  ## parameters in `formData` object:
  ##   DeferMaintenanceDuration: JInt
  ##                           : An integer indicating the duration of the maintenance window in days. If you specify a duration, you can't specify an end time. The duration must be 45 days or less.
  ##   DeferMaintenanceIdentifier: JString
  ##                             : A unique identifier for the deferred maintenance window.
  ##   DeferMaintenanceStartTime: JString
  ##                            : A timestamp indicating the start time for the deferred maintenance window.
  ##   ClusterIdentifier: JString (required)
  ##                    : A unique identifier for the cluster.
  ##   DeferMaintenanceEndTime: JString
  ##                          : A timestamp indicating end time for the deferred maintenance window. If you specify an end time, you can't specify a duration.
  ##   DeferMaintenance: JBool
  ##                   : A boolean indicating whether to enable the deferred maintenance window. 
  section = newJObject()
  var valid_21628708 = formData.getOrDefault("DeferMaintenanceDuration")
  valid_21628708 = validateParameter(valid_21628708, JInt, required = false,
                                   default = nil)
  if valid_21628708 != nil:
    section.add "DeferMaintenanceDuration", valid_21628708
  var valid_21628709 = formData.getOrDefault("DeferMaintenanceIdentifier")
  valid_21628709 = validateParameter(valid_21628709, JString, required = false,
                                   default = nil)
  if valid_21628709 != nil:
    section.add "DeferMaintenanceIdentifier", valid_21628709
  var valid_21628710 = formData.getOrDefault("DeferMaintenanceStartTime")
  valid_21628710 = validateParameter(valid_21628710, JString, required = false,
                                   default = nil)
  if valid_21628710 != nil:
    section.add "DeferMaintenanceStartTime", valid_21628710
  assert formData != nil, "formData argument is necessary due to required `ClusterIdentifier` field"
  var valid_21628711 = formData.getOrDefault("ClusterIdentifier")
  valid_21628711 = validateParameter(valid_21628711, JString, required = true,
                                   default = nil)
  if valid_21628711 != nil:
    section.add "ClusterIdentifier", valid_21628711
  var valid_21628712 = formData.getOrDefault("DeferMaintenanceEndTime")
  valid_21628712 = validateParameter(valid_21628712, JString, required = false,
                                   default = nil)
  if valid_21628712 != nil:
    section.add "DeferMaintenanceEndTime", valid_21628712
  var valid_21628713 = formData.getOrDefault("DeferMaintenance")
  valid_21628713 = validateParameter(valid_21628713, JBool, required = false,
                                   default = nil)
  if valid_21628713 != nil:
    section.add "DeferMaintenance", valid_21628713
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628714: Call_PostModifyClusterMaintenance_21628696;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Modifies the maintenance settings of a cluster.
  ## 
  let valid = call_21628714.validator(path, query, header, formData, body, _)
  let scheme = call_21628714.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628714.makeUrl(scheme.get, call_21628714.host, call_21628714.base,
                               call_21628714.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628714, uri, valid, _)

proc call*(call_21628715: Call_PostModifyClusterMaintenance_21628696;
          ClusterIdentifier: string; DeferMaintenanceDuration: int = 0;
          DeferMaintenanceIdentifier: string = "";
          Action: string = "ModifyClusterMaintenance";
          DeferMaintenanceStartTime: string = "";
          DeferMaintenanceEndTime: string = ""; DeferMaintenance: bool = false;
          Version: string = "2012-12-01"): Recallable =
  ## postModifyClusterMaintenance
  ## Modifies the maintenance settings of a cluster.
  ##   DeferMaintenanceDuration: int
  ##                           : An integer indicating the duration of the maintenance window in days. If you specify a duration, you can't specify an end time. The duration must be 45 days or less.
  ##   DeferMaintenanceIdentifier: string
  ##                             : A unique identifier for the deferred maintenance window.
  ##   Action: string (required)
  ##   DeferMaintenanceStartTime: string
  ##                            : A timestamp indicating the start time for the deferred maintenance window.
  ##   ClusterIdentifier: string (required)
  ##                    : A unique identifier for the cluster.
  ##   DeferMaintenanceEndTime: string
  ##                          : A timestamp indicating end time for the deferred maintenance window. If you specify an end time, you can't specify a duration.
  ##   DeferMaintenance: bool
  ##                   : A boolean indicating whether to enable the deferred maintenance window. 
  ##   Version: string (required)
  var query_21628716 = newJObject()
  var formData_21628717 = newJObject()
  add(formData_21628717, "DeferMaintenanceDuration",
      newJInt(DeferMaintenanceDuration))
  add(formData_21628717, "DeferMaintenanceIdentifier",
      newJString(DeferMaintenanceIdentifier))
  add(query_21628716, "Action", newJString(Action))
  add(formData_21628717, "DeferMaintenanceStartTime",
      newJString(DeferMaintenanceStartTime))
  add(formData_21628717, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(formData_21628717, "DeferMaintenanceEndTime",
      newJString(DeferMaintenanceEndTime))
  add(formData_21628717, "DeferMaintenance", newJBool(DeferMaintenance))
  add(query_21628716, "Version", newJString(Version))
  result = call_21628715.call(nil, query_21628716, nil, formData_21628717, nil)

var postModifyClusterMaintenance* = Call_PostModifyClusterMaintenance_21628696(
    name: "postModifyClusterMaintenance", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=ModifyClusterMaintenance",
    validator: validate_PostModifyClusterMaintenance_21628697, base: "/",
    makeUrl: url_PostModifyClusterMaintenance_21628698,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyClusterMaintenance_21628675 = ref object of OpenApiRestCall_21625418
proc url_GetModifyClusterMaintenance_21628677(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyClusterMaintenance_21628676(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Modifies the maintenance settings of a cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DeferMaintenanceStartTime: JString
  ##                            : A timestamp indicating the start time for the deferred maintenance window.
  ##   DeferMaintenanceDuration: JInt
  ##                           : An integer indicating the duration of the maintenance window in days. If you specify a duration, you can't specify an end time. The duration must be 45 days or less.
  ##   DeferMaintenanceEndTime: JString
  ##                          : A timestamp indicating end time for the deferred maintenance window. If you specify an end time, you can't specify a duration.
  ##   DeferMaintenanceIdentifier: JString
  ##                             : A unique identifier for the deferred maintenance window.
  ##   DeferMaintenance: JBool
  ##                   : A boolean indicating whether to enable the deferred maintenance window. 
  ##   Action: JString (required)
  ##   ClusterIdentifier: JString (required)
  ##                    : A unique identifier for the cluster.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628678 = query.getOrDefault("DeferMaintenanceStartTime")
  valid_21628678 = validateParameter(valid_21628678, JString, required = false,
                                   default = nil)
  if valid_21628678 != nil:
    section.add "DeferMaintenanceStartTime", valid_21628678
  var valid_21628679 = query.getOrDefault("DeferMaintenanceDuration")
  valid_21628679 = validateParameter(valid_21628679, JInt, required = false,
                                   default = nil)
  if valid_21628679 != nil:
    section.add "DeferMaintenanceDuration", valid_21628679
  var valid_21628680 = query.getOrDefault("DeferMaintenanceEndTime")
  valid_21628680 = validateParameter(valid_21628680, JString, required = false,
                                   default = nil)
  if valid_21628680 != nil:
    section.add "DeferMaintenanceEndTime", valid_21628680
  var valid_21628681 = query.getOrDefault("DeferMaintenanceIdentifier")
  valid_21628681 = validateParameter(valid_21628681, JString, required = false,
                                   default = nil)
  if valid_21628681 != nil:
    section.add "DeferMaintenanceIdentifier", valid_21628681
  var valid_21628682 = query.getOrDefault("DeferMaintenance")
  valid_21628682 = validateParameter(valid_21628682, JBool, required = false,
                                   default = nil)
  if valid_21628682 != nil:
    section.add "DeferMaintenance", valid_21628682
  var valid_21628683 = query.getOrDefault("Action")
  valid_21628683 = validateParameter(valid_21628683, JString, required = true, default = newJString(
      "ModifyClusterMaintenance"))
  if valid_21628683 != nil:
    section.add "Action", valid_21628683
  var valid_21628684 = query.getOrDefault("ClusterIdentifier")
  valid_21628684 = validateParameter(valid_21628684, JString, required = true,
                                   default = nil)
  if valid_21628684 != nil:
    section.add "ClusterIdentifier", valid_21628684
  var valid_21628685 = query.getOrDefault("Version")
  valid_21628685 = validateParameter(valid_21628685, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628685 != nil:
    section.add "Version", valid_21628685
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628686 = header.getOrDefault("X-Amz-Date")
  valid_21628686 = validateParameter(valid_21628686, JString, required = false,
                                   default = nil)
  if valid_21628686 != nil:
    section.add "X-Amz-Date", valid_21628686
  var valid_21628687 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628687 = validateParameter(valid_21628687, JString, required = false,
                                   default = nil)
  if valid_21628687 != nil:
    section.add "X-Amz-Security-Token", valid_21628687
  var valid_21628688 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628688 = validateParameter(valid_21628688, JString, required = false,
                                   default = nil)
  if valid_21628688 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628688
  var valid_21628689 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628689 = validateParameter(valid_21628689, JString, required = false,
                                   default = nil)
  if valid_21628689 != nil:
    section.add "X-Amz-Algorithm", valid_21628689
  var valid_21628690 = header.getOrDefault("X-Amz-Signature")
  valid_21628690 = validateParameter(valid_21628690, JString, required = false,
                                   default = nil)
  if valid_21628690 != nil:
    section.add "X-Amz-Signature", valid_21628690
  var valid_21628691 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628691 = validateParameter(valid_21628691, JString, required = false,
                                   default = nil)
  if valid_21628691 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628691
  var valid_21628692 = header.getOrDefault("X-Amz-Credential")
  valid_21628692 = validateParameter(valid_21628692, JString, required = false,
                                   default = nil)
  if valid_21628692 != nil:
    section.add "X-Amz-Credential", valid_21628692
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628693: Call_GetModifyClusterMaintenance_21628675;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Modifies the maintenance settings of a cluster.
  ## 
  let valid = call_21628693.validator(path, query, header, formData, body, _)
  let scheme = call_21628693.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628693.makeUrl(scheme.get, call_21628693.host, call_21628693.base,
                               call_21628693.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628693, uri, valid, _)

proc call*(call_21628694: Call_GetModifyClusterMaintenance_21628675;
          ClusterIdentifier: string; DeferMaintenanceStartTime: string = "";
          DeferMaintenanceDuration: int = 0; DeferMaintenanceEndTime: string = "";
          DeferMaintenanceIdentifier: string = ""; DeferMaintenance: bool = false;
          Action: string = "ModifyClusterMaintenance";
          Version: string = "2012-12-01"): Recallable =
  ## getModifyClusterMaintenance
  ## Modifies the maintenance settings of a cluster.
  ##   DeferMaintenanceStartTime: string
  ##                            : A timestamp indicating the start time for the deferred maintenance window.
  ##   DeferMaintenanceDuration: int
  ##                           : An integer indicating the duration of the maintenance window in days. If you specify a duration, you can't specify an end time. The duration must be 45 days or less.
  ##   DeferMaintenanceEndTime: string
  ##                          : A timestamp indicating end time for the deferred maintenance window. If you specify an end time, you can't specify a duration.
  ##   DeferMaintenanceIdentifier: string
  ##                             : A unique identifier for the deferred maintenance window.
  ##   DeferMaintenance: bool
  ##                   : A boolean indicating whether to enable the deferred maintenance window. 
  ##   Action: string (required)
  ##   ClusterIdentifier: string (required)
  ##                    : A unique identifier for the cluster.
  ##   Version: string (required)
  var query_21628695 = newJObject()
  add(query_21628695, "DeferMaintenanceStartTime",
      newJString(DeferMaintenanceStartTime))
  add(query_21628695, "DeferMaintenanceDuration",
      newJInt(DeferMaintenanceDuration))
  add(query_21628695, "DeferMaintenanceEndTime",
      newJString(DeferMaintenanceEndTime))
  add(query_21628695, "DeferMaintenanceIdentifier",
      newJString(DeferMaintenanceIdentifier))
  add(query_21628695, "DeferMaintenance", newJBool(DeferMaintenance))
  add(query_21628695, "Action", newJString(Action))
  add(query_21628695, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(query_21628695, "Version", newJString(Version))
  result = call_21628694.call(nil, query_21628695, nil, nil, nil)

var getModifyClusterMaintenance* = Call_GetModifyClusterMaintenance_21628675(
    name: "getModifyClusterMaintenance", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=ModifyClusterMaintenance",
    validator: validate_GetModifyClusterMaintenance_21628676, base: "/",
    makeUrl: url_GetModifyClusterMaintenance_21628677,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyClusterParameterGroup_21628735 = ref object of OpenApiRestCall_21625418
proc url_PostModifyClusterParameterGroup_21628737(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyClusterParameterGroup_21628736(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Modifies the parameters of a parameter group.</p> <p> For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628738 = query.getOrDefault("Action")
  valid_21628738 = validateParameter(valid_21628738, JString, required = true, default = newJString(
      "ModifyClusterParameterGroup"))
  if valid_21628738 != nil:
    section.add "Action", valid_21628738
  var valid_21628739 = query.getOrDefault("Version")
  valid_21628739 = validateParameter(valid_21628739, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628739 != nil:
    section.add "Version", valid_21628739
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628740 = header.getOrDefault("X-Amz-Date")
  valid_21628740 = validateParameter(valid_21628740, JString, required = false,
                                   default = nil)
  if valid_21628740 != nil:
    section.add "X-Amz-Date", valid_21628740
  var valid_21628741 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628741 = validateParameter(valid_21628741, JString, required = false,
                                   default = nil)
  if valid_21628741 != nil:
    section.add "X-Amz-Security-Token", valid_21628741
  var valid_21628742 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628742 = validateParameter(valid_21628742, JString, required = false,
                                   default = nil)
  if valid_21628742 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628742
  var valid_21628743 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628743 = validateParameter(valid_21628743, JString, required = false,
                                   default = nil)
  if valid_21628743 != nil:
    section.add "X-Amz-Algorithm", valid_21628743
  var valid_21628744 = header.getOrDefault("X-Amz-Signature")
  valid_21628744 = validateParameter(valid_21628744, JString, required = false,
                                   default = nil)
  if valid_21628744 != nil:
    section.add "X-Amz-Signature", valid_21628744
  var valid_21628745 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628745 = validateParameter(valid_21628745, JString, required = false,
                                   default = nil)
  if valid_21628745 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628745
  var valid_21628746 = header.getOrDefault("X-Amz-Credential")
  valid_21628746 = validateParameter(valid_21628746, JString, required = false,
                                   default = nil)
  if valid_21628746 != nil:
    section.add "X-Amz-Credential", valid_21628746
  result.add "header", section
  ## parameters in `formData` object:
  ##   ParameterGroupName: JString (required)
  ##                     : The name of the parameter group to be modified.
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameters to be modified. A maximum of 20 parameters can be modified in a single request.</p> <p>For each parameter to be modified, you must supply at least the parameter name and parameter value; other name-value pairs of the parameter are optional.</p> <p>For the workload management (WLM) configuration, you must supply all the name-value pairs in the wlm_json_configuration parameter.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ParameterGroupName` field"
  var valid_21628747 = formData.getOrDefault("ParameterGroupName")
  valid_21628747 = validateParameter(valid_21628747, JString, required = true,
                                   default = nil)
  if valid_21628747 != nil:
    section.add "ParameterGroupName", valid_21628747
  var valid_21628748 = formData.getOrDefault("Parameters")
  valid_21628748 = validateParameter(valid_21628748, JArray, required = true,
                                   default = nil)
  if valid_21628748 != nil:
    section.add "Parameters", valid_21628748
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628749: Call_PostModifyClusterParameterGroup_21628735;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Modifies the parameters of a parameter group.</p> <p> For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  let valid = call_21628749.validator(path, query, header, formData, body, _)
  let scheme = call_21628749.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628749.makeUrl(scheme.get, call_21628749.host, call_21628749.base,
                               call_21628749.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628749, uri, valid, _)

proc call*(call_21628750: Call_PostModifyClusterParameterGroup_21628735;
          ParameterGroupName: string; Parameters: JsonNode;
          Action: string = "ModifyClusterParameterGroup";
          Version: string = "2012-12-01"): Recallable =
  ## postModifyClusterParameterGroup
  ## <p>Modifies the parameters of a parameter group.</p> <p> For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ##   ParameterGroupName: string (required)
  ##                     : The name of the parameter group to be modified.
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameters to be modified. A maximum of 20 parameters can be modified in a single request.</p> <p>For each parameter to be modified, you must supply at least the parameter name and parameter value; other name-value pairs of the parameter are optional.</p> <p>For the workload management (WLM) configuration, you must supply all the name-value pairs in the wlm_json_configuration parameter.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21628751 = newJObject()
  var formData_21628752 = newJObject()
  add(formData_21628752, "ParameterGroupName", newJString(ParameterGroupName))
  if Parameters != nil:
    formData_21628752.add "Parameters", Parameters
  add(query_21628751, "Action", newJString(Action))
  add(query_21628751, "Version", newJString(Version))
  result = call_21628750.call(nil, query_21628751, nil, formData_21628752, nil)

var postModifyClusterParameterGroup* = Call_PostModifyClusterParameterGroup_21628735(
    name: "postModifyClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=ModifyClusterParameterGroup",
    validator: validate_PostModifyClusterParameterGroup_21628736, base: "/",
    makeUrl: url_PostModifyClusterParameterGroup_21628737,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyClusterParameterGroup_21628718 = ref object of OpenApiRestCall_21625418
proc url_GetModifyClusterParameterGroup_21628720(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyClusterParameterGroup_21628719(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Modifies the parameters of a parameter group.</p> <p> For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ParameterGroupName: JString (required)
  ##                     : The name of the parameter group to be modified.
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameters to be modified. A maximum of 20 parameters can be modified in a single request.</p> <p>For each parameter to be modified, you must supply at least the parameter name and parameter value; other name-value pairs of the parameter are optional.</p> <p>For the workload management (WLM) configuration, you must supply all the name-value pairs in the wlm_json_configuration parameter.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ParameterGroupName` field"
  var valid_21628721 = query.getOrDefault("ParameterGroupName")
  valid_21628721 = validateParameter(valid_21628721, JString, required = true,
                                   default = nil)
  if valid_21628721 != nil:
    section.add "ParameterGroupName", valid_21628721
  var valid_21628722 = query.getOrDefault("Parameters")
  valid_21628722 = validateParameter(valid_21628722, JArray, required = true,
                                   default = nil)
  if valid_21628722 != nil:
    section.add "Parameters", valid_21628722
  var valid_21628723 = query.getOrDefault("Action")
  valid_21628723 = validateParameter(valid_21628723, JString, required = true, default = newJString(
      "ModifyClusterParameterGroup"))
  if valid_21628723 != nil:
    section.add "Action", valid_21628723
  var valid_21628724 = query.getOrDefault("Version")
  valid_21628724 = validateParameter(valid_21628724, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628724 != nil:
    section.add "Version", valid_21628724
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628725 = header.getOrDefault("X-Amz-Date")
  valid_21628725 = validateParameter(valid_21628725, JString, required = false,
                                   default = nil)
  if valid_21628725 != nil:
    section.add "X-Amz-Date", valid_21628725
  var valid_21628726 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628726 = validateParameter(valid_21628726, JString, required = false,
                                   default = nil)
  if valid_21628726 != nil:
    section.add "X-Amz-Security-Token", valid_21628726
  var valid_21628727 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628727 = validateParameter(valid_21628727, JString, required = false,
                                   default = nil)
  if valid_21628727 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628727
  var valid_21628728 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628728 = validateParameter(valid_21628728, JString, required = false,
                                   default = nil)
  if valid_21628728 != nil:
    section.add "X-Amz-Algorithm", valid_21628728
  var valid_21628729 = header.getOrDefault("X-Amz-Signature")
  valid_21628729 = validateParameter(valid_21628729, JString, required = false,
                                   default = nil)
  if valid_21628729 != nil:
    section.add "X-Amz-Signature", valid_21628729
  var valid_21628730 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628730 = validateParameter(valid_21628730, JString, required = false,
                                   default = nil)
  if valid_21628730 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628730
  var valid_21628731 = header.getOrDefault("X-Amz-Credential")
  valid_21628731 = validateParameter(valid_21628731, JString, required = false,
                                   default = nil)
  if valid_21628731 != nil:
    section.add "X-Amz-Credential", valid_21628731
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628732: Call_GetModifyClusterParameterGroup_21628718;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Modifies the parameters of a parameter group.</p> <p> For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  let valid = call_21628732.validator(path, query, header, formData, body, _)
  let scheme = call_21628732.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628732.makeUrl(scheme.get, call_21628732.host, call_21628732.base,
                               call_21628732.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628732, uri, valid, _)

proc call*(call_21628733: Call_GetModifyClusterParameterGroup_21628718;
          ParameterGroupName: string; Parameters: JsonNode;
          Action: string = "ModifyClusterParameterGroup";
          Version: string = "2012-12-01"): Recallable =
  ## getModifyClusterParameterGroup
  ## <p>Modifies the parameters of a parameter group.</p> <p> For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ##   ParameterGroupName: string (required)
  ##                     : The name of the parameter group to be modified.
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameters to be modified. A maximum of 20 parameters can be modified in a single request.</p> <p>For each parameter to be modified, you must supply at least the parameter name and parameter value; other name-value pairs of the parameter are optional.</p> <p>For the workload management (WLM) configuration, you must supply all the name-value pairs in the wlm_json_configuration parameter.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21628734 = newJObject()
  add(query_21628734, "ParameterGroupName", newJString(ParameterGroupName))
  if Parameters != nil:
    query_21628734.add "Parameters", Parameters
  add(query_21628734, "Action", newJString(Action))
  add(query_21628734, "Version", newJString(Version))
  result = call_21628733.call(nil, query_21628734, nil, nil, nil)

var getModifyClusterParameterGroup* = Call_GetModifyClusterParameterGroup_21628718(
    name: "getModifyClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=ModifyClusterParameterGroup",
    validator: validate_GetModifyClusterParameterGroup_21628719, base: "/",
    makeUrl: url_GetModifyClusterParameterGroup_21628720,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyClusterSnapshot_21628771 = ref object of OpenApiRestCall_21625418
proc url_PostModifyClusterSnapshot_21628773(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyClusterSnapshot_21628772(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Modifies the settings for a snapshot.</p> <p>This exanmple modifies the manual retention period setting for a cluster snapshot.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628774 = query.getOrDefault("Action")
  valid_21628774 = validateParameter(valid_21628774, JString, required = true, default = newJString(
      "ModifyClusterSnapshot"))
  if valid_21628774 != nil:
    section.add "Action", valid_21628774
  var valid_21628775 = query.getOrDefault("Version")
  valid_21628775 = validateParameter(valid_21628775, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628775 != nil:
    section.add "Version", valid_21628775
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628776 = header.getOrDefault("X-Amz-Date")
  valid_21628776 = validateParameter(valid_21628776, JString, required = false,
                                   default = nil)
  if valid_21628776 != nil:
    section.add "X-Amz-Date", valid_21628776
  var valid_21628777 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628777 = validateParameter(valid_21628777, JString, required = false,
                                   default = nil)
  if valid_21628777 != nil:
    section.add "X-Amz-Security-Token", valid_21628777
  var valid_21628778 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628778 = validateParameter(valid_21628778, JString, required = false,
                                   default = nil)
  if valid_21628778 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628778
  var valid_21628779 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628779 = validateParameter(valid_21628779, JString, required = false,
                                   default = nil)
  if valid_21628779 != nil:
    section.add "X-Amz-Algorithm", valid_21628779
  var valid_21628780 = header.getOrDefault("X-Amz-Signature")
  valid_21628780 = validateParameter(valid_21628780, JString, required = false,
                                   default = nil)
  if valid_21628780 != nil:
    section.add "X-Amz-Signature", valid_21628780
  var valid_21628781 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628781 = validateParameter(valid_21628781, JString, required = false,
                                   default = nil)
  if valid_21628781 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628781
  var valid_21628782 = header.getOrDefault("X-Amz-Credential")
  valid_21628782 = validateParameter(valid_21628782, JString, required = false,
                                   default = nil)
  if valid_21628782 != nil:
    section.add "X-Amz-Credential", valid_21628782
  result.add "header", section
  ## parameters in `formData` object:
  ##   Force: JBool
  ##        : A Boolean option to override an exception if the retention period has already passed.
  ##   SnapshotIdentifier: JString (required)
  ##                     : The identifier of the snapshot whose setting you want to modify.
  ##   ManualSnapshotRetentionPeriod: JInt
  ##                                : <p>The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely.</p> <p>If the manual snapshot falls outside of the new retention period, you can specify the force option to immediately delete the snapshot.</p> <p>The value must be either -1 or an integer between 1 and 3,653.</p>
  section = newJObject()
  var valid_21628783 = formData.getOrDefault("Force")
  valid_21628783 = validateParameter(valid_21628783, JBool, required = false,
                                   default = nil)
  if valid_21628783 != nil:
    section.add "Force", valid_21628783
  assert formData != nil, "formData argument is necessary due to required `SnapshotIdentifier` field"
  var valid_21628784 = formData.getOrDefault("SnapshotIdentifier")
  valid_21628784 = validateParameter(valid_21628784, JString, required = true,
                                   default = nil)
  if valid_21628784 != nil:
    section.add "SnapshotIdentifier", valid_21628784
  var valid_21628785 = formData.getOrDefault("ManualSnapshotRetentionPeriod")
  valid_21628785 = validateParameter(valid_21628785, JInt, required = false,
                                   default = nil)
  if valid_21628785 != nil:
    section.add "ManualSnapshotRetentionPeriod", valid_21628785
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628786: Call_PostModifyClusterSnapshot_21628771;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Modifies the settings for a snapshot.</p> <p>This exanmple modifies the manual retention period setting for a cluster snapshot.</p>
  ## 
  let valid = call_21628786.validator(path, query, header, formData, body, _)
  let scheme = call_21628786.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628786.makeUrl(scheme.get, call_21628786.host, call_21628786.base,
                               call_21628786.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628786, uri, valid, _)

proc call*(call_21628787: Call_PostModifyClusterSnapshot_21628771;
          SnapshotIdentifier: string; Force: bool = false;
          Action: string = "ModifyClusterSnapshot";
          ManualSnapshotRetentionPeriod: int = 0; Version: string = "2012-12-01"): Recallable =
  ## postModifyClusterSnapshot
  ## <p>Modifies the settings for a snapshot.</p> <p>This exanmple modifies the manual retention period setting for a cluster snapshot.</p>
  ##   Force: bool
  ##        : A Boolean option to override an exception if the retention period has already passed.
  ##   Action: string (required)
  ##   SnapshotIdentifier: string (required)
  ##                     : The identifier of the snapshot whose setting you want to modify.
  ##   ManualSnapshotRetentionPeriod: int
  ##                                : <p>The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely.</p> <p>If the manual snapshot falls outside of the new retention period, you can specify the force option to immediately delete the snapshot.</p> <p>The value must be either -1 or an integer between 1 and 3,653.</p>
  ##   Version: string (required)
  var query_21628788 = newJObject()
  var formData_21628789 = newJObject()
  add(formData_21628789, "Force", newJBool(Force))
  add(query_21628788, "Action", newJString(Action))
  add(formData_21628789, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  add(formData_21628789, "ManualSnapshotRetentionPeriod",
      newJInt(ManualSnapshotRetentionPeriod))
  add(query_21628788, "Version", newJString(Version))
  result = call_21628787.call(nil, query_21628788, nil, formData_21628789, nil)

var postModifyClusterSnapshot* = Call_PostModifyClusterSnapshot_21628771(
    name: "postModifyClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=ModifyClusterSnapshot",
    validator: validate_PostModifyClusterSnapshot_21628772, base: "/",
    makeUrl: url_PostModifyClusterSnapshot_21628773,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyClusterSnapshot_21628753 = ref object of OpenApiRestCall_21625418
proc url_GetModifyClusterSnapshot_21628755(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyClusterSnapshot_21628754(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Modifies the settings for a snapshot.</p> <p>This exanmple modifies the manual retention period setting for a cluster snapshot.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   SnapshotIdentifier: JString (required)
  ##                     : The identifier of the snapshot whose setting you want to modify.
  ##   Version: JString (required)
  ##   Force: JBool
  ##        : A Boolean option to override an exception if the retention period has already passed.
  ##   ManualSnapshotRetentionPeriod: JInt
  ##                                : <p>The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely.</p> <p>If the manual snapshot falls outside of the new retention period, you can specify the force option to immediately delete the snapshot.</p> <p>The value must be either -1 or an integer between 1 and 3,653.</p>
  section = newJObject()
  var valid_21628756 = query.getOrDefault("Action")
  valid_21628756 = validateParameter(valid_21628756, JString, required = true, default = newJString(
      "ModifyClusterSnapshot"))
  if valid_21628756 != nil:
    section.add "Action", valid_21628756
  var valid_21628757 = query.getOrDefault("SnapshotIdentifier")
  valid_21628757 = validateParameter(valid_21628757, JString, required = true,
                                   default = nil)
  if valid_21628757 != nil:
    section.add "SnapshotIdentifier", valid_21628757
  var valid_21628758 = query.getOrDefault("Version")
  valid_21628758 = validateParameter(valid_21628758, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628758 != nil:
    section.add "Version", valid_21628758
  var valid_21628759 = query.getOrDefault("Force")
  valid_21628759 = validateParameter(valid_21628759, JBool, required = false,
                                   default = nil)
  if valid_21628759 != nil:
    section.add "Force", valid_21628759
  var valid_21628760 = query.getOrDefault("ManualSnapshotRetentionPeriod")
  valid_21628760 = validateParameter(valid_21628760, JInt, required = false,
                                   default = nil)
  if valid_21628760 != nil:
    section.add "ManualSnapshotRetentionPeriod", valid_21628760
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628761 = header.getOrDefault("X-Amz-Date")
  valid_21628761 = validateParameter(valid_21628761, JString, required = false,
                                   default = nil)
  if valid_21628761 != nil:
    section.add "X-Amz-Date", valid_21628761
  var valid_21628762 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628762 = validateParameter(valid_21628762, JString, required = false,
                                   default = nil)
  if valid_21628762 != nil:
    section.add "X-Amz-Security-Token", valid_21628762
  var valid_21628763 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628763 = validateParameter(valid_21628763, JString, required = false,
                                   default = nil)
  if valid_21628763 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628763
  var valid_21628764 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628764 = validateParameter(valid_21628764, JString, required = false,
                                   default = nil)
  if valid_21628764 != nil:
    section.add "X-Amz-Algorithm", valid_21628764
  var valid_21628765 = header.getOrDefault("X-Amz-Signature")
  valid_21628765 = validateParameter(valid_21628765, JString, required = false,
                                   default = nil)
  if valid_21628765 != nil:
    section.add "X-Amz-Signature", valid_21628765
  var valid_21628766 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628766 = validateParameter(valid_21628766, JString, required = false,
                                   default = nil)
  if valid_21628766 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628766
  var valid_21628767 = header.getOrDefault("X-Amz-Credential")
  valid_21628767 = validateParameter(valid_21628767, JString, required = false,
                                   default = nil)
  if valid_21628767 != nil:
    section.add "X-Amz-Credential", valid_21628767
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628768: Call_GetModifyClusterSnapshot_21628753;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Modifies the settings for a snapshot.</p> <p>This exanmple modifies the manual retention period setting for a cluster snapshot.</p>
  ## 
  let valid = call_21628768.validator(path, query, header, formData, body, _)
  let scheme = call_21628768.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628768.makeUrl(scheme.get, call_21628768.host, call_21628768.base,
                               call_21628768.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628768, uri, valid, _)

proc call*(call_21628769: Call_GetModifyClusterSnapshot_21628753;
          SnapshotIdentifier: string; Action: string = "ModifyClusterSnapshot";
          Version: string = "2012-12-01"; Force: bool = false;
          ManualSnapshotRetentionPeriod: int = 0): Recallable =
  ## getModifyClusterSnapshot
  ## <p>Modifies the settings for a snapshot.</p> <p>This exanmple modifies the manual retention period setting for a cluster snapshot.</p>
  ##   Action: string (required)
  ##   SnapshotIdentifier: string (required)
  ##                     : The identifier of the snapshot whose setting you want to modify.
  ##   Version: string (required)
  ##   Force: bool
  ##        : A Boolean option to override an exception if the retention period has already passed.
  ##   ManualSnapshotRetentionPeriod: int
  ##                                : <p>The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely.</p> <p>If the manual snapshot falls outside of the new retention period, you can specify the force option to immediately delete the snapshot.</p> <p>The value must be either -1 or an integer between 1 and 3,653.</p>
  var query_21628770 = newJObject()
  add(query_21628770, "Action", newJString(Action))
  add(query_21628770, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  add(query_21628770, "Version", newJString(Version))
  add(query_21628770, "Force", newJBool(Force))
  add(query_21628770, "ManualSnapshotRetentionPeriod",
      newJInt(ManualSnapshotRetentionPeriod))
  result = call_21628769.call(nil, query_21628770, nil, nil, nil)

var getModifyClusterSnapshot* = Call_GetModifyClusterSnapshot_21628753(
    name: "getModifyClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=ModifyClusterSnapshot",
    validator: validate_GetModifyClusterSnapshot_21628754, base: "/",
    makeUrl: url_GetModifyClusterSnapshot_21628755,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyClusterSnapshotSchedule_21628808 = ref object of OpenApiRestCall_21625418
proc url_PostModifyClusterSnapshotSchedule_21628810(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyClusterSnapshotSchedule_21628809(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Modifies a snapshot schedule for a cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628811 = query.getOrDefault("Action")
  valid_21628811 = validateParameter(valid_21628811, JString, required = true, default = newJString(
      "ModifyClusterSnapshotSchedule"))
  if valid_21628811 != nil:
    section.add "Action", valid_21628811
  var valid_21628812 = query.getOrDefault("Version")
  valid_21628812 = validateParameter(valid_21628812, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628812 != nil:
    section.add "Version", valid_21628812
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628813 = header.getOrDefault("X-Amz-Date")
  valid_21628813 = validateParameter(valid_21628813, JString, required = false,
                                   default = nil)
  if valid_21628813 != nil:
    section.add "X-Amz-Date", valid_21628813
  var valid_21628814 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628814 = validateParameter(valid_21628814, JString, required = false,
                                   default = nil)
  if valid_21628814 != nil:
    section.add "X-Amz-Security-Token", valid_21628814
  var valid_21628815 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628815 = validateParameter(valid_21628815, JString, required = false,
                                   default = nil)
  if valid_21628815 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628815
  var valid_21628816 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628816 = validateParameter(valid_21628816, JString, required = false,
                                   default = nil)
  if valid_21628816 != nil:
    section.add "X-Amz-Algorithm", valid_21628816
  var valid_21628817 = header.getOrDefault("X-Amz-Signature")
  valid_21628817 = validateParameter(valid_21628817, JString, required = false,
                                   default = nil)
  if valid_21628817 != nil:
    section.add "X-Amz-Signature", valid_21628817
  var valid_21628818 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628818 = validateParameter(valid_21628818, JString, required = false,
                                   default = nil)
  if valid_21628818 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628818
  var valid_21628819 = header.getOrDefault("X-Amz-Credential")
  valid_21628819 = validateParameter(valid_21628819, JString, required = false,
                                   default = nil)
  if valid_21628819 != nil:
    section.add "X-Amz-Credential", valid_21628819
  result.add "header", section
  ## parameters in `formData` object:
  ##   DisassociateSchedule: JBool
  ##                       : A boolean to indicate whether to remove the assoiciation between the cluster and the schedule.
  ##   ClusterIdentifier: JString (required)
  ##                    : A unique identifier for the cluster whose snapshot schedule you want to modify. 
  ##   ScheduleIdentifier: JString
  ##                     : A unique alphanumeric identifier for the schedule that you want to associate with the cluster.
  section = newJObject()
  var valid_21628820 = formData.getOrDefault("DisassociateSchedule")
  valid_21628820 = validateParameter(valid_21628820, JBool, required = false,
                                   default = nil)
  if valid_21628820 != nil:
    section.add "DisassociateSchedule", valid_21628820
  assert formData != nil, "formData argument is necessary due to required `ClusterIdentifier` field"
  var valid_21628821 = formData.getOrDefault("ClusterIdentifier")
  valid_21628821 = validateParameter(valid_21628821, JString, required = true,
                                   default = nil)
  if valid_21628821 != nil:
    section.add "ClusterIdentifier", valid_21628821
  var valid_21628822 = formData.getOrDefault("ScheduleIdentifier")
  valid_21628822 = validateParameter(valid_21628822, JString, required = false,
                                   default = nil)
  if valid_21628822 != nil:
    section.add "ScheduleIdentifier", valid_21628822
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628823: Call_PostModifyClusterSnapshotSchedule_21628808;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Modifies a snapshot schedule for a cluster.
  ## 
  let valid = call_21628823.validator(path, query, header, formData, body, _)
  let scheme = call_21628823.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628823.makeUrl(scheme.get, call_21628823.host, call_21628823.base,
                               call_21628823.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628823, uri, valid, _)

proc call*(call_21628824: Call_PostModifyClusterSnapshotSchedule_21628808;
          ClusterIdentifier: string; DisassociateSchedule: bool = false;
          Action: string = "ModifyClusterSnapshotSchedule";
          ScheduleIdentifier: string = ""; Version: string = "2012-12-01"): Recallable =
  ## postModifyClusterSnapshotSchedule
  ## Modifies a snapshot schedule for a cluster.
  ##   DisassociateSchedule: bool
  ##                       : A boolean to indicate whether to remove the assoiciation between the cluster and the schedule.
  ##   Action: string (required)
  ##   ClusterIdentifier: string (required)
  ##                    : A unique identifier for the cluster whose snapshot schedule you want to modify. 
  ##   ScheduleIdentifier: string
  ##                     : A unique alphanumeric identifier for the schedule that you want to associate with the cluster.
  ##   Version: string (required)
  var query_21628825 = newJObject()
  var formData_21628826 = newJObject()
  add(formData_21628826, "DisassociateSchedule", newJBool(DisassociateSchedule))
  add(query_21628825, "Action", newJString(Action))
  add(formData_21628826, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(formData_21628826, "ScheduleIdentifier", newJString(ScheduleIdentifier))
  add(query_21628825, "Version", newJString(Version))
  result = call_21628824.call(nil, query_21628825, nil, formData_21628826, nil)

var postModifyClusterSnapshotSchedule* = Call_PostModifyClusterSnapshotSchedule_21628808(
    name: "postModifyClusterSnapshotSchedule", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com",
    route: "/#Action=ModifyClusterSnapshotSchedule",
    validator: validate_PostModifyClusterSnapshotSchedule_21628809, base: "/",
    makeUrl: url_PostModifyClusterSnapshotSchedule_21628810,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyClusterSnapshotSchedule_21628790 = ref object of OpenApiRestCall_21625418
proc url_GetModifyClusterSnapshotSchedule_21628792(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyClusterSnapshotSchedule_21628791(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Modifies a snapshot schedule for a cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ClusterIdentifier: JString (required)
  ##                    : A unique identifier for the cluster whose snapshot schedule you want to modify. 
  ##   ScheduleIdentifier: JString
  ##                     : A unique alphanumeric identifier for the schedule that you want to associate with the cluster.
  ##   DisassociateSchedule: JBool
  ##                       : A boolean to indicate whether to remove the assoiciation between the cluster and the schedule.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628793 = query.getOrDefault("Action")
  valid_21628793 = validateParameter(valid_21628793, JString, required = true, default = newJString(
      "ModifyClusterSnapshotSchedule"))
  if valid_21628793 != nil:
    section.add "Action", valid_21628793
  var valid_21628794 = query.getOrDefault("ClusterIdentifier")
  valid_21628794 = validateParameter(valid_21628794, JString, required = true,
                                   default = nil)
  if valid_21628794 != nil:
    section.add "ClusterIdentifier", valid_21628794
  var valid_21628795 = query.getOrDefault("ScheduleIdentifier")
  valid_21628795 = validateParameter(valid_21628795, JString, required = false,
                                   default = nil)
  if valid_21628795 != nil:
    section.add "ScheduleIdentifier", valid_21628795
  var valid_21628796 = query.getOrDefault("DisassociateSchedule")
  valid_21628796 = validateParameter(valid_21628796, JBool, required = false,
                                   default = nil)
  if valid_21628796 != nil:
    section.add "DisassociateSchedule", valid_21628796
  var valid_21628797 = query.getOrDefault("Version")
  valid_21628797 = validateParameter(valid_21628797, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628797 != nil:
    section.add "Version", valid_21628797
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628798 = header.getOrDefault("X-Amz-Date")
  valid_21628798 = validateParameter(valid_21628798, JString, required = false,
                                   default = nil)
  if valid_21628798 != nil:
    section.add "X-Amz-Date", valid_21628798
  var valid_21628799 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628799 = validateParameter(valid_21628799, JString, required = false,
                                   default = nil)
  if valid_21628799 != nil:
    section.add "X-Amz-Security-Token", valid_21628799
  var valid_21628800 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628800 = validateParameter(valid_21628800, JString, required = false,
                                   default = nil)
  if valid_21628800 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628800
  var valid_21628801 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628801 = validateParameter(valid_21628801, JString, required = false,
                                   default = nil)
  if valid_21628801 != nil:
    section.add "X-Amz-Algorithm", valid_21628801
  var valid_21628802 = header.getOrDefault("X-Amz-Signature")
  valid_21628802 = validateParameter(valid_21628802, JString, required = false,
                                   default = nil)
  if valid_21628802 != nil:
    section.add "X-Amz-Signature", valid_21628802
  var valid_21628803 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628803 = validateParameter(valid_21628803, JString, required = false,
                                   default = nil)
  if valid_21628803 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628803
  var valid_21628804 = header.getOrDefault("X-Amz-Credential")
  valid_21628804 = validateParameter(valid_21628804, JString, required = false,
                                   default = nil)
  if valid_21628804 != nil:
    section.add "X-Amz-Credential", valid_21628804
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628805: Call_GetModifyClusterSnapshotSchedule_21628790;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Modifies a snapshot schedule for a cluster.
  ## 
  let valid = call_21628805.validator(path, query, header, formData, body, _)
  let scheme = call_21628805.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628805.makeUrl(scheme.get, call_21628805.host, call_21628805.base,
                               call_21628805.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628805, uri, valid, _)

proc call*(call_21628806: Call_GetModifyClusterSnapshotSchedule_21628790;
          ClusterIdentifier: string;
          Action: string = "ModifyClusterSnapshotSchedule";
          ScheduleIdentifier: string = ""; DisassociateSchedule: bool = false;
          Version: string = "2012-12-01"): Recallable =
  ## getModifyClusterSnapshotSchedule
  ## Modifies a snapshot schedule for a cluster.
  ##   Action: string (required)
  ##   ClusterIdentifier: string (required)
  ##                    : A unique identifier for the cluster whose snapshot schedule you want to modify. 
  ##   ScheduleIdentifier: string
  ##                     : A unique alphanumeric identifier for the schedule that you want to associate with the cluster.
  ##   DisassociateSchedule: bool
  ##                       : A boolean to indicate whether to remove the assoiciation between the cluster and the schedule.
  ##   Version: string (required)
  var query_21628807 = newJObject()
  add(query_21628807, "Action", newJString(Action))
  add(query_21628807, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(query_21628807, "ScheduleIdentifier", newJString(ScheduleIdentifier))
  add(query_21628807, "DisassociateSchedule", newJBool(DisassociateSchedule))
  add(query_21628807, "Version", newJString(Version))
  result = call_21628806.call(nil, query_21628807, nil, nil, nil)

var getModifyClusterSnapshotSchedule* = Call_GetModifyClusterSnapshotSchedule_21628790(
    name: "getModifyClusterSnapshotSchedule", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com",
    route: "/#Action=ModifyClusterSnapshotSchedule",
    validator: validate_GetModifyClusterSnapshotSchedule_21628791, base: "/",
    makeUrl: url_GetModifyClusterSnapshotSchedule_21628792,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyClusterSubnetGroup_21628845 = ref object of OpenApiRestCall_21625418
proc url_PostModifyClusterSubnetGroup_21628847(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyClusterSubnetGroup_21628846(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Modifies a cluster subnet group to include the specified list of VPC subnets. The operation replaces the existing list of subnets with the new list of subnets.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628848 = query.getOrDefault("Action")
  valid_21628848 = validateParameter(valid_21628848, JString, required = true, default = newJString(
      "ModifyClusterSubnetGroup"))
  if valid_21628848 != nil:
    section.add "Action", valid_21628848
  var valid_21628849 = query.getOrDefault("Version")
  valid_21628849 = validateParameter(valid_21628849, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628849 != nil:
    section.add "Version", valid_21628849
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628850 = header.getOrDefault("X-Amz-Date")
  valid_21628850 = validateParameter(valid_21628850, JString, required = false,
                                   default = nil)
  if valid_21628850 != nil:
    section.add "X-Amz-Date", valid_21628850
  var valid_21628851 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628851 = validateParameter(valid_21628851, JString, required = false,
                                   default = nil)
  if valid_21628851 != nil:
    section.add "X-Amz-Security-Token", valid_21628851
  var valid_21628852 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628852 = validateParameter(valid_21628852, JString, required = false,
                                   default = nil)
  if valid_21628852 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628852
  var valid_21628853 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628853 = validateParameter(valid_21628853, JString, required = false,
                                   default = nil)
  if valid_21628853 != nil:
    section.add "X-Amz-Algorithm", valid_21628853
  var valid_21628854 = header.getOrDefault("X-Amz-Signature")
  valid_21628854 = validateParameter(valid_21628854, JString, required = false,
                                   default = nil)
  if valid_21628854 != nil:
    section.add "X-Amz-Signature", valid_21628854
  var valid_21628855 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628855 = validateParameter(valid_21628855, JString, required = false,
                                   default = nil)
  if valid_21628855 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628855
  var valid_21628856 = header.getOrDefault("X-Amz-Credential")
  valid_21628856 = validateParameter(valid_21628856, JString, required = false,
                                   default = nil)
  if valid_21628856 != nil:
    section.add "X-Amz-Credential", valid_21628856
  result.add "header", section
  ## parameters in `formData` object:
  ##   SubnetIds: JArray (required)
  ##            : An array of VPC subnet IDs. A maximum of 20 subnets can be modified in a single request.
  ##   Description: JString
  ##              : A text description of the subnet group to be modified.
  ##   ClusterSubnetGroupName: JString (required)
  ##                         : The name of the subnet group to be modified.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SubnetIds` field"
  var valid_21628857 = formData.getOrDefault("SubnetIds")
  valid_21628857 = validateParameter(valid_21628857, JArray, required = true,
                                   default = nil)
  if valid_21628857 != nil:
    section.add "SubnetIds", valid_21628857
  var valid_21628858 = formData.getOrDefault("Description")
  valid_21628858 = validateParameter(valid_21628858, JString, required = false,
                                   default = nil)
  if valid_21628858 != nil:
    section.add "Description", valid_21628858
  var valid_21628859 = formData.getOrDefault("ClusterSubnetGroupName")
  valid_21628859 = validateParameter(valid_21628859, JString, required = true,
                                   default = nil)
  if valid_21628859 != nil:
    section.add "ClusterSubnetGroupName", valid_21628859
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628860: Call_PostModifyClusterSubnetGroup_21628845;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Modifies a cluster subnet group to include the specified list of VPC subnets. The operation replaces the existing list of subnets with the new list of subnets.
  ## 
  let valid = call_21628860.validator(path, query, header, formData, body, _)
  let scheme = call_21628860.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628860.makeUrl(scheme.get, call_21628860.host, call_21628860.base,
                               call_21628860.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628860, uri, valid, _)

proc call*(call_21628861: Call_PostModifyClusterSubnetGroup_21628845;
          SubnetIds: JsonNode; ClusterSubnetGroupName: string;
          Action: string = "ModifyClusterSubnetGroup";
          Version: string = "2012-12-01"; Description: string = ""): Recallable =
  ## postModifyClusterSubnetGroup
  ## Modifies a cluster subnet group to include the specified list of VPC subnets. The operation replaces the existing list of subnets with the new list of subnets.
  ##   SubnetIds: JArray (required)
  ##            : An array of VPC subnet IDs. A maximum of 20 subnets can be modified in a single request.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Description: string
  ##              : A text description of the subnet group to be modified.
  ##   ClusterSubnetGroupName: string (required)
  ##                         : The name of the subnet group to be modified.
  var query_21628862 = newJObject()
  var formData_21628863 = newJObject()
  if SubnetIds != nil:
    formData_21628863.add "SubnetIds", SubnetIds
  add(query_21628862, "Action", newJString(Action))
  add(query_21628862, "Version", newJString(Version))
  add(formData_21628863, "Description", newJString(Description))
  add(formData_21628863, "ClusterSubnetGroupName",
      newJString(ClusterSubnetGroupName))
  result = call_21628861.call(nil, query_21628862, nil, formData_21628863, nil)

var postModifyClusterSubnetGroup* = Call_PostModifyClusterSubnetGroup_21628845(
    name: "postModifyClusterSubnetGroup", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=ModifyClusterSubnetGroup",
    validator: validate_PostModifyClusterSubnetGroup_21628846, base: "/",
    makeUrl: url_PostModifyClusterSubnetGroup_21628847,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyClusterSubnetGroup_21628827 = ref object of OpenApiRestCall_21625418
proc url_GetModifyClusterSubnetGroup_21628829(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyClusterSubnetGroup_21628828(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Modifies a cluster subnet group to include the specified list of VPC subnets. The operation replaces the existing list of subnets with the new list of subnets.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ClusterSubnetGroupName: JString (required)
  ##                         : The name of the subnet group to be modified.
  ##   Description: JString
  ##              : A text description of the subnet group to be modified.
  ##   Action: JString (required)
  ##   SubnetIds: JArray (required)
  ##            : An array of VPC subnet IDs. A maximum of 20 subnets can be modified in a single request.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ClusterSubnetGroupName` field"
  var valid_21628830 = query.getOrDefault("ClusterSubnetGroupName")
  valid_21628830 = validateParameter(valid_21628830, JString, required = true,
                                   default = nil)
  if valid_21628830 != nil:
    section.add "ClusterSubnetGroupName", valid_21628830
  var valid_21628831 = query.getOrDefault("Description")
  valid_21628831 = validateParameter(valid_21628831, JString, required = false,
                                   default = nil)
  if valid_21628831 != nil:
    section.add "Description", valid_21628831
  var valid_21628832 = query.getOrDefault("Action")
  valid_21628832 = validateParameter(valid_21628832, JString, required = true, default = newJString(
      "ModifyClusterSubnetGroup"))
  if valid_21628832 != nil:
    section.add "Action", valid_21628832
  var valid_21628833 = query.getOrDefault("SubnetIds")
  valid_21628833 = validateParameter(valid_21628833, JArray, required = true,
                                   default = nil)
  if valid_21628833 != nil:
    section.add "SubnetIds", valid_21628833
  var valid_21628834 = query.getOrDefault("Version")
  valid_21628834 = validateParameter(valid_21628834, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628834 != nil:
    section.add "Version", valid_21628834
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628835 = header.getOrDefault("X-Amz-Date")
  valid_21628835 = validateParameter(valid_21628835, JString, required = false,
                                   default = nil)
  if valid_21628835 != nil:
    section.add "X-Amz-Date", valid_21628835
  var valid_21628836 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628836 = validateParameter(valid_21628836, JString, required = false,
                                   default = nil)
  if valid_21628836 != nil:
    section.add "X-Amz-Security-Token", valid_21628836
  var valid_21628837 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628837 = validateParameter(valid_21628837, JString, required = false,
                                   default = nil)
  if valid_21628837 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628837
  var valid_21628838 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628838 = validateParameter(valid_21628838, JString, required = false,
                                   default = nil)
  if valid_21628838 != nil:
    section.add "X-Amz-Algorithm", valid_21628838
  var valid_21628839 = header.getOrDefault("X-Amz-Signature")
  valid_21628839 = validateParameter(valid_21628839, JString, required = false,
                                   default = nil)
  if valid_21628839 != nil:
    section.add "X-Amz-Signature", valid_21628839
  var valid_21628840 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628840 = validateParameter(valid_21628840, JString, required = false,
                                   default = nil)
  if valid_21628840 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628840
  var valid_21628841 = header.getOrDefault("X-Amz-Credential")
  valid_21628841 = validateParameter(valid_21628841, JString, required = false,
                                   default = nil)
  if valid_21628841 != nil:
    section.add "X-Amz-Credential", valid_21628841
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628842: Call_GetModifyClusterSubnetGroup_21628827;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Modifies a cluster subnet group to include the specified list of VPC subnets. The operation replaces the existing list of subnets with the new list of subnets.
  ## 
  let valid = call_21628842.validator(path, query, header, formData, body, _)
  let scheme = call_21628842.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628842.makeUrl(scheme.get, call_21628842.host, call_21628842.base,
                               call_21628842.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628842, uri, valid, _)

proc call*(call_21628843: Call_GetModifyClusterSubnetGroup_21628827;
          ClusterSubnetGroupName: string; SubnetIds: JsonNode;
          Description: string = ""; Action: string = "ModifyClusterSubnetGroup";
          Version: string = "2012-12-01"): Recallable =
  ## getModifyClusterSubnetGroup
  ## Modifies a cluster subnet group to include the specified list of VPC subnets. The operation replaces the existing list of subnets with the new list of subnets.
  ##   ClusterSubnetGroupName: string (required)
  ##                         : The name of the subnet group to be modified.
  ##   Description: string
  ##              : A text description of the subnet group to be modified.
  ##   Action: string (required)
  ##   SubnetIds: JArray (required)
  ##            : An array of VPC subnet IDs. A maximum of 20 subnets can be modified in a single request.
  ##   Version: string (required)
  var query_21628844 = newJObject()
  add(query_21628844, "ClusterSubnetGroupName", newJString(ClusterSubnetGroupName))
  add(query_21628844, "Description", newJString(Description))
  add(query_21628844, "Action", newJString(Action))
  if SubnetIds != nil:
    query_21628844.add "SubnetIds", SubnetIds
  add(query_21628844, "Version", newJString(Version))
  result = call_21628843.call(nil, query_21628844, nil, nil, nil)

var getModifyClusterSubnetGroup* = Call_GetModifyClusterSubnetGroup_21628827(
    name: "getModifyClusterSubnetGroup", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=ModifyClusterSubnetGroup",
    validator: validate_GetModifyClusterSubnetGroup_21628828, base: "/",
    makeUrl: url_GetModifyClusterSubnetGroup_21628829,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyEventSubscription_21628886 = ref object of OpenApiRestCall_21625418
proc url_PostModifyEventSubscription_21628888(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyEventSubscription_21628887(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Modifies an existing Amazon Redshift event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628889 = query.getOrDefault("Action")
  valid_21628889 = validateParameter(valid_21628889, JString, required = true, default = newJString(
      "ModifyEventSubscription"))
  if valid_21628889 != nil:
    section.add "Action", valid_21628889
  var valid_21628890 = query.getOrDefault("Version")
  valid_21628890 = validateParameter(valid_21628890, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628890 != nil:
    section.add "Version", valid_21628890
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628891 = header.getOrDefault("X-Amz-Date")
  valid_21628891 = validateParameter(valid_21628891, JString, required = false,
                                   default = nil)
  if valid_21628891 != nil:
    section.add "X-Amz-Date", valid_21628891
  var valid_21628892 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628892 = validateParameter(valid_21628892, JString, required = false,
                                   default = nil)
  if valid_21628892 != nil:
    section.add "X-Amz-Security-Token", valid_21628892
  var valid_21628893 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628893 = validateParameter(valid_21628893, JString, required = false,
                                   default = nil)
  if valid_21628893 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628893
  var valid_21628894 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628894 = validateParameter(valid_21628894, JString, required = false,
                                   default = nil)
  if valid_21628894 != nil:
    section.add "X-Amz-Algorithm", valid_21628894
  var valid_21628895 = header.getOrDefault("X-Amz-Signature")
  valid_21628895 = validateParameter(valid_21628895, JString, required = false,
                                   default = nil)
  if valid_21628895 != nil:
    section.add "X-Amz-Signature", valid_21628895
  var valid_21628896 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628896 = validateParameter(valid_21628896, JString, required = false,
                                   default = nil)
  if valid_21628896 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628896
  var valid_21628897 = header.getOrDefault("X-Amz-Credential")
  valid_21628897 = validateParameter(valid_21628897, JString, required = false,
                                   default = nil)
  if valid_21628897 != nil:
    section.add "X-Amz-Credential", valid_21628897
  result.add "header", section
  ## parameters in `formData` object:
  ##   Enabled: JBool
  ##          : A Boolean value indicating if the subscription is enabled. <code>true</code> indicates the subscription is enabled 
  ##   EventCategories: JArray
  ##                  : <p>Specifies the Amazon Redshift event categories to be published by the event notification subscription.</p> <p>Values: configuration, management, monitoring, security</p>
  ##   SnsTopicArn: JString
  ##              : The Amazon Resource Name (ARN) of the SNS topic to be used by the event notification subscription.
  ##   Severity: JString
  ##           : <p>Specifies the Amazon Redshift event severity to be published by the event notification subscription.</p> <p>Values: ERROR, INFO</p>
  ##   SourceIds: JArray
  ##            : <p>A list of one or more identifiers of Amazon Redshift source objects. All of the objects must be of the same type as was specified in the source type parameter. The event subscription will return only events generated by the specified objects. If not specified, then events are returned for all objects within the source type specified.</p> <p>Example: my-cluster-1, my-cluster-2</p> <p>Example: my-snapshot-20131010</p>
  ##   SubscriptionName: JString (required)
  ##                   : The name of the modified Amazon Redshift event notification subscription.
  ##   SourceType: JString
  ##             : <p>The type of source that will be generating the events. For example, if you want to be notified of events generated by a cluster, you would set this parameter to cluster. If this value is not specified, events are returned for all Amazon Redshift objects in your AWS account. You must specify a source type in order to specify source IDs.</p> <p>Valid values: cluster, cluster-parameter-group, cluster-security-group, cluster-snapshot, and scheduled-action.</p>
  section = newJObject()
  var valid_21628898 = formData.getOrDefault("Enabled")
  valid_21628898 = validateParameter(valid_21628898, JBool, required = false,
                                   default = nil)
  if valid_21628898 != nil:
    section.add "Enabled", valid_21628898
  var valid_21628899 = formData.getOrDefault("EventCategories")
  valid_21628899 = validateParameter(valid_21628899, JArray, required = false,
                                   default = nil)
  if valid_21628899 != nil:
    section.add "EventCategories", valid_21628899
  var valid_21628900 = formData.getOrDefault("SnsTopicArn")
  valid_21628900 = validateParameter(valid_21628900, JString, required = false,
                                   default = nil)
  if valid_21628900 != nil:
    section.add "SnsTopicArn", valid_21628900
  var valid_21628901 = formData.getOrDefault("Severity")
  valid_21628901 = validateParameter(valid_21628901, JString, required = false,
                                   default = nil)
  if valid_21628901 != nil:
    section.add "Severity", valid_21628901
  var valid_21628902 = formData.getOrDefault("SourceIds")
  valid_21628902 = validateParameter(valid_21628902, JArray, required = false,
                                   default = nil)
  if valid_21628902 != nil:
    section.add "SourceIds", valid_21628902
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_21628903 = formData.getOrDefault("SubscriptionName")
  valid_21628903 = validateParameter(valid_21628903, JString, required = true,
                                   default = nil)
  if valid_21628903 != nil:
    section.add "SubscriptionName", valid_21628903
  var valid_21628904 = formData.getOrDefault("SourceType")
  valid_21628904 = validateParameter(valid_21628904, JString, required = false,
                                   default = nil)
  if valid_21628904 != nil:
    section.add "SourceType", valid_21628904
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628905: Call_PostModifyEventSubscription_21628886;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Modifies an existing Amazon Redshift event notification subscription.
  ## 
  let valid = call_21628905.validator(path, query, header, formData, body, _)
  let scheme = call_21628905.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628905.makeUrl(scheme.get, call_21628905.host, call_21628905.base,
                               call_21628905.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628905, uri, valid, _)

proc call*(call_21628906: Call_PostModifyEventSubscription_21628886;
          SubscriptionName: string; Enabled: bool = false;
          EventCategories: JsonNode = nil; SnsTopicArn: string = "";
          Severity: string = ""; SourceIds: JsonNode = nil;
          Action: string = "ModifyEventSubscription";
          Version: string = "2012-12-01"; SourceType: string = ""): Recallable =
  ## postModifyEventSubscription
  ## Modifies an existing Amazon Redshift event notification subscription.
  ##   Enabled: bool
  ##          : A Boolean value indicating if the subscription is enabled. <code>true</code> indicates the subscription is enabled 
  ##   EventCategories: JArray
  ##                  : <p>Specifies the Amazon Redshift event categories to be published by the event notification subscription.</p> <p>Values: configuration, management, monitoring, security</p>
  ##   SnsTopicArn: string
  ##              : The Amazon Resource Name (ARN) of the SNS topic to be used by the event notification subscription.
  ##   Severity: string
  ##           : <p>Specifies the Amazon Redshift event severity to be published by the event notification subscription.</p> <p>Values: ERROR, INFO</p>
  ##   SourceIds: JArray
  ##            : <p>A list of one or more identifiers of Amazon Redshift source objects. All of the objects must be of the same type as was specified in the source type parameter. The event subscription will return only events generated by the specified objects. If not specified, then events are returned for all objects within the source type specified.</p> <p>Example: my-cluster-1, my-cluster-2</p> <p>Example: my-snapshot-20131010</p>
  ##   SubscriptionName: string (required)
  ##                   : The name of the modified Amazon Redshift event notification subscription.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   SourceType: string
  ##             : <p>The type of source that will be generating the events. For example, if you want to be notified of events generated by a cluster, you would set this parameter to cluster. If this value is not specified, events are returned for all Amazon Redshift objects in your AWS account. You must specify a source type in order to specify source IDs.</p> <p>Valid values: cluster, cluster-parameter-group, cluster-security-group, cluster-snapshot, and scheduled-action.</p>
  var query_21628907 = newJObject()
  var formData_21628908 = newJObject()
  add(formData_21628908, "Enabled", newJBool(Enabled))
  if EventCategories != nil:
    formData_21628908.add "EventCategories", EventCategories
  add(formData_21628908, "SnsTopicArn", newJString(SnsTopicArn))
  add(formData_21628908, "Severity", newJString(Severity))
  if SourceIds != nil:
    formData_21628908.add "SourceIds", SourceIds
  add(formData_21628908, "SubscriptionName", newJString(SubscriptionName))
  add(query_21628907, "Action", newJString(Action))
  add(query_21628907, "Version", newJString(Version))
  add(formData_21628908, "SourceType", newJString(SourceType))
  result = call_21628906.call(nil, query_21628907, nil, formData_21628908, nil)

var postModifyEventSubscription* = Call_PostModifyEventSubscription_21628886(
    name: "postModifyEventSubscription", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=ModifyEventSubscription",
    validator: validate_PostModifyEventSubscription_21628887, base: "/",
    makeUrl: url_PostModifyEventSubscription_21628888,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyEventSubscription_21628864 = ref object of OpenApiRestCall_21625418
proc url_GetModifyEventSubscription_21628866(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyEventSubscription_21628865(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Modifies an existing Amazon Redshift event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : <p>The type of source that will be generating the events. For example, if you want to be notified of events generated by a cluster, you would set this parameter to cluster. If this value is not specified, events are returned for all Amazon Redshift objects in your AWS account. You must specify a source type in order to specify source IDs.</p> <p>Valid values: cluster, cluster-parameter-group, cluster-security-group, cluster-snapshot, and scheduled-action.</p>
  ##   SourceIds: JArray
  ##            : <p>A list of one or more identifiers of Amazon Redshift source objects. All of the objects must be of the same type as was specified in the source type parameter. The event subscription will return only events generated by the specified objects. If not specified, then events are returned for all objects within the source type specified.</p> <p>Example: my-cluster-1, my-cluster-2</p> <p>Example: my-snapshot-20131010</p>
  ##   Enabled: JBool
  ##          : A Boolean value indicating if the subscription is enabled. <code>true</code> indicates the subscription is enabled 
  ##   Action: JString (required)
  ##   SnsTopicArn: JString
  ##              : The Amazon Resource Name (ARN) of the SNS topic to be used by the event notification subscription.
  ##   EventCategories: JArray
  ##                  : <p>Specifies the Amazon Redshift event categories to be published by the event notification subscription.</p> <p>Values: configuration, management, monitoring, security</p>
  ##   SubscriptionName: JString (required)
  ##                   : The name of the modified Amazon Redshift event notification subscription.
  ##   Severity: JString
  ##           : <p>Specifies the Amazon Redshift event severity to be published by the event notification subscription.</p> <p>Values: ERROR, INFO</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628867 = query.getOrDefault("SourceType")
  valid_21628867 = validateParameter(valid_21628867, JString, required = false,
                                   default = nil)
  if valid_21628867 != nil:
    section.add "SourceType", valid_21628867
  var valid_21628868 = query.getOrDefault("SourceIds")
  valid_21628868 = validateParameter(valid_21628868, JArray, required = false,
                                   default = nil)
  if valid_21628868 != nil:
    section.add "SourceIds", valid_21628868
  var valid_21628869 = query.getOrDefault("Enabled")
  valid_21628869 = validateParameter(valid_21628869, JBool, required = false,
                                   default = nil)
  if valid_21628869 != nil:
    section.add "Enabled", valid_21628869
  var valid_21628870 = query.getOrDefault("Action")
  valid_21628870 = validateParameter(valid_21628870, JString, required = true, default = newJString(
      "ModifyEventSubscription"))
  if valid_21628870 != nil:
    section.add "Action", valid_21628870
  var valid_21628871 = query.getOrDefault("SnsTopicArn")
  valid_21628871 = validateParameter(valid_21628871, JString, required = false,
                                   default = nil)
  if valid_21628871 != nil:
    section.add "SnsTopicArn", valid_21628871
  var valid_21628872 = query.getOrDefault("EventCategories")
  valid_21628872 = validateParameter(valid_21628872, JArray, required = false,
                                   default = nil)
  if valid_21628872 != nil:
    section.add "EventCategories", valid_21628872
  var valid_21628873 = query.getOrDefault("SubscriptionName")
  valid_21628873 = validateParameter(valid_21628873, JString, required = true,
                                   default = nil)
  if valid_21628873 != nil:
    section.add "SubscriptionName", valid_21628873
  var valid_21628874 = query.getOrDefault("Severity")
  valid_21628874 = validateParameter(valid_21628874, JString, required = false,
                                   default = nil)
  if valid_21628874 != nil:
    section.add "Severity", valid_21628874
  var valid_21628875 = query.getOrDefault("Version")
  valid_21628875 = validateParameter(valid_21628875, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628875 != nil:
    section.add "Version", valid_21628875
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628876 = header.getOrDefault("X-Amz-Date")
  valid_21628876 = validateParameter(valid_21628876, JString, required = false,
                                   default = nil)
  if valid_21628876 != nil:
    section.add "X-Amz-Date", valid_21628876
  var valid_21628877 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628877 = validateParameter(valid_21628877, JString, required = false,
                                   default = nil)
  if valid_21628877 != nil:
    section.add "X-Amz-Security-Token", valid_21628877
  var valid_21628878 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628878 = validateParameter(valid_21628878, JString, required = false,
                                   default = nil)
  if valid_21628878 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628878
  var valid_21628879 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628879 = validateParameter(valid_21628879, JString, required = false,
                                   default = nil)
  if valid_21628879 != nil:
    section.add "X-Amz-Algorithm", valid_21628879
  var valid_21628880 = header.getOrDefault("X-Amz-Signature")
  valid_21628880 = validateParameter(valid_21628880, JString, required = false,
                                   default = nil)
  if valid_21628880 != nil:
    section.add "X-Amz-Signature", valid_21628880
  var valid_21628881 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628881 = validateParameter(valid_21628881, JString, required = false,
                                   default = nil)
  if valid_21628881 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628881
  var valid_21628882 = header.getOrDefault("X-Amz-Credential")
  valid_21628882 = validateParameter(valid_21628882, JString, required = false,
                                   default = nil)
  if valid_21628882 != nil:
    section.add "X-Amz-Credential", valid_21628882
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628883: Call_GetModifyEventSubscription_21628864;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Modifies an existing Amazon Redshift event notification subscription.
  ## 
  let valid = call_21628883.validator(path, query, header, formData, body, _)
  let scheme = call_21628883.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628883.makeUrl(scheme.get, call_21628883.host, call_21628883.base,
                               call_21628883.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628883, uri, valid, _)

proc call*(call_21628884: Call_GetModifyEventSubscription_21628864;
          SubscriptionName: string; SourceType: string = "";
          SourceIds: JsonNode = nil; Enabled: bool = false;
          Action: string = "ModifyEventSubscription"; SnsTopicArn: string = "";
          EventCategories: JsonNode = nil; Severity: string = "";
          Version: string = "2012-12-01"): Recallable =
  ## getModifyEventSubscription
  ## Modifies an existing Amazon Redshift event notification subscription.
  ##   SourceType: string
  ##             : <p>The type of source that will be generating the events. For example, if you want to be notified of events generated by a cluster, you would set this parameter to cluster. If this value is not specified, events are returned for all Amazon Redshift objects in your AWS account. You must specify a source type in order to specify source IDs.</p> <p>Valid values: cluster, cluster-parameter-group, cluster-security-group, cluster-snapshot, and scheduled-action.</p>
  ##   SourceIds: JArray
  ##            : <p>A list of one or more identifiers of Amazon Redshift source objects. All of the objects must be of the same type as was specified in the source type parameter. The event subscription will return only events generated by the specified objects. If not specified, then events are returned for all objects within the source type specified.</p> <p>Example: my-cluster-1, my-cluster-2</p> <p>Example: my-snapshot-20131010</p>
  ##   Enabled: bool
  ##          : A Boolean value indicating if the subscription is enabled. <code>true</code> indicates the subscription is enabled 
  ##   Action: string (required)
  ##   SnsTopicArn: string
  ##              : The Amazon Resource Name (ARN) of the SNS topic to be used by the event notification subscription.
  ##   EventCategories: JArray
  ##                  : <p>Specifies the Amazon Redshift event categories to be published by the event notification subscription.</p> <p>Values: configuration, management, monitoring, security</p>
  ##   SubscriptionName: string (required)
  ##                   : The name of the modified Amazon Redshift event notification subscription.
  ##   Severity: string
  ##           : <p>Specifies the Amazon Redshift event severity to be published by the event notification subscription.</p> <p>Values: ERROR, INFO</p>
  ##   Version: string (required)
  var query_21628885 = newJObject()
  add(query_21628885, "SourceType", newJString(SourceType))
  if SourceIds != nil:
    query_21628885.add "SourceIds", SourceIds
  add(query_21628885, "Enabled", newJBool(Enabled))
  add(query_21628885, "Action", newJString(Action))
  add(query_21628885, "SnsTopicArn", newJString(SnsTopicArn))
  if EventCategories != nil:
    query_21628885.add "EventCategories", EventCategories
  add(query_21628885, "SubscriptionName", newJString(SubscriptionName))
  add(query_21628885, "Severity", newJString(Severity))
  add(query_21628885, "Version", newJString(Version))
  result = call_21628884.call(nil, query_21628885, nil, nil, nil)

var getModifyEventSubscription* = Call_GetModifyEventSubscription_21628864(
    name: "getModifyEventSubscription", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=ModifyEventSubscription",
    validator: validate_GetModifyEventSubscription_21628865, base: "/",
    makeUrl: url_GetModifyEventSubscription_21628866,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyScheduledAction_21628932 = ref object of OpenApiRestCall_21625418
proc url_PostModifyScheduledAction_21628934(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyScheduledAction_21628933(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Modifies a scheduled action. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628935 = query.getOrDefault("Action")
  valid_21628935 = validateParameter(valid_21628935, JString, required = true, default = newJString(
      "ModifyScheduledAction"))
  if valid_21628935 != nil:
    section.add "Action", valid_21628935
  var valid_21628936 = query.getOrDefault("Version")
  valid_21628936 = validateParameter(valid_21628936, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628936 != nil:
    section.add "Version", valid_21628936
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628937 = header.getOrDefault("X-Amz-Date")
  valid_21628937 = validateParameter(valid_21628937, JString, required = false,
                                   default = nil)
  if valid_21628937 != nil:
    section.add "X-Amz-Date", valid_21628937
  var valid_21628938 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628938 = validateParameter(valid_21628938, JString, required = false,
                                   default = nil)
  if valid_21628938 != nil:
    section.add "X-Amz-Security-Token", valid_21628938
  var valid_21628939 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628939 = validateParameter(valid_21628939, JString, required = false,
                                   default = nil)
  if valid_21628939 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628939
  var valid_21628940 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628940 = validateParameter(valid_21628940, JString, required = false,
                                   default = nil)
  if valid_21628940 != nil:
    section.add "X-Amz-Algorithm", valid_21628940
  var valid_21628941 = header.getOrDefault("X-Amz-Signature")
  valid_21628941 = validateParameter(valid_21628941, JString, required = false,
                                   default = nil)
  if valid_21628941 != nil:
    section.add "X-Amz-Signature", valid_21628941
  var valid_21628942 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628942 = validateParameter(valid_21628942, JString, required = false,
                                   default = nil)
  if valid_21628942 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628942
  var valid_21628943 = header.getOrDefault("X-Amz-Credential")
  valid_21628943 = validateParameter(valid_21628943, JString, required = false,
                                   default = nil)
  if valid_21628943 != nil:
    section.add "X-Amz-Credential", valid_21628943
  result.add "header", section
  ## parameters in `formData` object:
  ##   Schedule: JString
  ##           : A modified schedule in either <code>at( )</code> or <code>cron( )</code> format. For more information about this parameter, see <a>ScheduledAction</a>.
  ##   ScheduledActionDescription: JString
  ##                             : A modified description of the scheduled action. 
  ##   TargetAction.ResizeCluster: JString
  ##                             : The action type that specifies an Amazon Redshift API operation that is supported by the Amazon Redshift scheduler. 
  ## An action that runs a <code>ResizeCluster</code> API operation. 
  ##   StartTime: JString
  ##            : A modified start time of the scheduled action. For more information about this parameter, see <a>ScheduledAction</a>. 
  ##   ScheduledActionName: JString (required)
  ##                      : The name of the scheduled action to modify. 
  ##   Enable: JBool
  ##         : A modified enable flag of the scheduled action. If true, the scheduled action is active. If false, the scheduled action is disabled. 
  ##   IamRole: JString
  ##          : A different IAM role to assume to run the target action. For more information about this parameter, see <a>ScheduledAction</a>.
  ##   EndTime: JString
  ##          : A modified end time of the scheduled action. For more information about this parameter, see <a>ScheduledAction</a>. 
  section = newJObject()
  var valid_21628944 = formData.getOrDefault("Schedule")
  valid_21628944 = validateParameter(valid_21628944, JString, required = false,
                                   default = nil)
  if valid_21628944 != nil:
    section.add "Schedule", valid_21628944
  var valid_21628945 = formData.getOrDefault("ScheduledActionDescription")
  valid_21628945 = validateParameter(valid_21628945, JString, required = false,
                                   default = nil)
  if valid_21628945 != nil:
    section.add "ScheduledActionDescription", valid_21628945
  var valid_21628946 = formData.getOrDefault("TargetAction.ResizeCluster")
  valid_21628946 = validateParameter(valid_21628946, JString, required = false,
                                   default = nil)
  if valid_21628946 != nil:
    section.add "TargetAction.ResizeCluster", valid_21628946
  var valid_21628947 = formData.getOrDefault("StartTime")
  valid_21628947 = validateParameter(valid_21628947, JString, required = false,
                                   default = nil)
  if valid_21628947 != nil:
    section.add "StartTime", valid_21628947
  assert formData != nil, "formData argument is necessary due to required `ScheduledActionName` field"
  var valid_21628948 = formData.getOrDefault("ScheduledActionName")
  valid_21628948 = validateParameter(valid_21628948, JString, required = true,
                                   default = nil)
  if valid_21628948 != nil:
    section.add "ScheduledActionName", valid_21628948
  var valid_21628949 = formData.getOrDefault("Enable")
  valid_21628949 = validateParameter(valid_21628949, JBool, required = false,
                                   default = nil)
  if valid_21628949 != nil:
    section.add "Enable", valid_21628949
  var valid_21628950 = formData.getOrDefault("IamRole")
  valid_21628950 = validateParameter(valid_21628950, JString, required = false,
                                   default = nil)
  if valid_21628950 != nil:
    section.add "IamRole", valid_21628950
  var valid_21628951 = formData.getOrDefault("EndTime")
  valid_21628951 = validateParameter(valid_21628951, JString, required = false,
                                   default = nil)
  if valid_21628951 != nil:
    section.add "EndTime", valid_21628951
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628952: Call_PostModifyScheduledAction_21628932;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Modifies a scheduled action. 
  ## 
  let valid = call_21628952.validator(path, query, header, formData, body, _)
  let scheme = call_21628952.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628952.makeUrl(scheme.get, call_21628952.host, call_21628952.base,
                               call_21628952.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628952, uri, valid, _)

proc call*(call_21628953: Call_PostModifyScheduledAction_21628932;
          ScheduledActionName: string; Schedule: string = "";
          ScheduledActionDescription: string = "";
          TargetActionResizeCluster: string = ""; StartTime: string = "";
          Action: string = "ModifyScheduledAction"; Enable: bool = false;
          IamRole: string = ""; EndTime: string = ""; Version: string = "2012-12-01"): Recallable =
  ## postModifyScheduledAction
  ## Modifies a scheduled action. 
  ##   Schedule: string
  ##           : A modified schedule in either <code>at( )</code> or <code>cron( )</code> format. For more information about this parameter, see <a>ScheduledAction</a>.
  ##   ScheduledActionDescription: string
  ##                             : A modified description of the scheduled action. 
  ##   TargetActionResizeCluster: string
  ##                            : The action type that specifies an Amazon Redshift API operation that is supported by the Amazon Redshift scheduler. 
  ## An action that runs a <code>ResizeCluster</code> API operation. 
  ##   StartTime: string
  ##            : A modified start time of the scheduled action. For more information about this parameter, see <a>ScheduledAction</a>. 
  ##   Action: string (required)
  ##   ScheduledActionName: string (required)
  ##                      : The name of the scheduled action to modify. 
  ##   Enable: bool
  ##         : A modified enable flag of the scheduled action. If true, the scheduled action is active. If false, the scheduled action is disabled. 
  ##   IamRole: string
  ##          : A different IAM role to assume to run the target action. For more information about this parameter, see <a>ScheduledAction</a>.
  ##   EndTime: string
  ##          : A modified end time of the scheduled action. For more information about this parameter, see <a>ScheduledAction</a>. 
  ##   Version: string (required)
  var query_21628954 = newJObject()
  var formData_21628955 = newJObject()
  add(formData_21628955, "Schedule", newJString(Schedule))
  add(formData_21628955, "ScheduledActionDescription",
      newJString(ScheduledActionDescription))
  add(formData_21628955, "TargetAction.ResizeCluster",
      newJString(TargetActionResizeCluster))
  add(formData_21628955, "StartTime", newJString(StartTime))
  add(query_21628954, "Action", newJString(Action))
  add(formData_21628955, "ScheduledActionName", newJString(ScheduledActionName))
  add(formData_21628955, "Enable", newJBool(Enable))
  add(formData_21628955, "IamRole", newJString(IamRole))
  add(formData_21628955, "EndTime", newJString(EndTime))
  add(query_21628954, "Version", newJString(Version))
  result = call_21628953.call(nil, query_21628954, nil, formData_21628955, nil)

var postModifyScheduledAction* = Call_PostModifyScheduledAction_21628932(
    name: "postModifyScheduledAction", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=ModifyScheduledAction",
    validator: validate_PostModifyScheduledAction_21628933, base: "/",
    makeUrl: url_PostModifyScheduledAction_21628934,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyScheduledAction_21628909 = ref object of OpenApiRestCall_21625418
proc url_GetModifyScheduledAction_21628911(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyScheduledAction_21628910(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Modifies a scheduled action. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Schedule: JString
  ##           : A modified schedule in either <code>at( )</code> or <code>cron( )</code> format. For more information about this parameter, see <a>ScheduledAction</a>.
  ##   ScheduledActionName: JString (required)
  ##                      : The name of the scheduled action to modify. 
  ##   StartTime: JString
  ##            : A modified start time of the scheduled action. For more information about this parameter, see <a>ScheduledAction</a>. 
  ##   IamRole: JString
  ##          : A different IAM role to assume to run the target action. For more information about this parameter, see <a>ScheduledAction</a>.
  ##   Enable: JBool
  ##         : A modified enable flag of the scheduled action. If true, the scheduled action is active. If false, the scheduled action is disabled. 
  ##   Action: JString (required)
  ##   EndTime: JString
  ##          : A modified end time of the scheduled action. For more information about this parameter, see <a>ScheduledAction</a>. 
  ##   Version: JString (required)
  ##   ScheduledActionDescription: JString
  ##                             : A modified description of the scheduled action. 
  ##   TargetAction.ResizeCluster: JString
  ##                             : The action type that specifies an Amazon Redshift API operation that is supported by the Amazon Redshift scheduler. 
  ## An action that runs a <code>ResizeCluster</code> API operation. 
  section = newJObject()
  var valid_21628912 = query.getOrDefault("Schedule")
  valid_21628912 = validateParameter(valid_21628912, JString, required = false,
                                   default = nil)
  if valid_21628912 != nil:
    section.add "Schedule", valid_21628912
  assert query != nil, "query argument is necessary due to required `ScheduledActionName` field"
  var valid_21628913 = query.getOrDefault("ScheduledActionName")
  valid_21628913 = validateParameter(valid_21628913, JString, required = true,
                                   default = nil)
  if valid_21628913 != nil:
    section.add "ScheduledActionName", valid_21628913
  var valid_21628914 = query.getOrDefault("StartTime")
  valid_21628914 = validateParameter(valid_21628914, JString, required = false,
                                   default = nil)
  if valid_21628914 != nil:
    section.add "StartTime", valid_21628914
  var valid_21628915 = query.getOrDefault("IamRole")
  valid_21628915 = validateParameter(valid_21628915, JString, required = false,
                                   default = nil)
  if valid_21628915 != nil:
    section.add "IamRole", valid_21628915
  var valid_21628916 = query.getOrDefault("Enable")
  valid_21628916 = validateParameter(valid_21628916, JBool, required = false,
                                   default = nil)
  if valid_21628916 != nil:
    section.add "Enable", valid_21628916
  var valid_21628917 = query.getOrDefault("Action")
  valid_21628917 = validateParameter(valid_21628917, JString, required = true, default = newJString(
      "ModifyScheduledAction"))
  if valid_21628917 != nil:
    section.add "Action", valid_21628917
  var valid_21628918 = query.getOrDefault("EndTime")
  valid_21628918 = validateParameter(valid_21628918, JString, required = false,
                                   default = nil)
  if valid_21628918 != nil:
    section.add "EndTime", valid_21628918
  var valid_21628919 = query.getOrDefault("Version")
  valid_21628919 = validateParameter(valid_21628919, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628919 != nil:
    section.add "Version", valid_21628919
  var valid_21628920 = query.getOrDefault("ScheduledActionDescription")
  valid_21628920 = validateParameter(valid_21628920, JString, required = false,
                                   default = nil)
  if valid_21628920 != nil:
    section.add "ScheduledActionDescription", valid_21628920
  var valid_21628921 = query.getOrDefault("TargetAction.ResizeCluster")
  valid_21628921 = validateParameter(valid_21628921, JString, required = false,
                                   default = nil)
  if valid_21628921 != nil:
    section.add "TargetAction.ResizeCluster", valid_21628921
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628922 = header.getOrDefault("X-Amz-Date")
  valid_21628922 = validateParameter(valid_21628922, JString, required = false,
                                   default = nil)
  if valid_21628922 != nil:
    section.add "X-Amz-Date", valid_21628922
  var valid_21628923 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628923 = validateParameter(valid_21628923, JString, required = false,
                                   default = nil)
  if valid_21628923 != nil:
    section.add "X-Amz-Security-Token", valid_21628923
  var valid_21628924 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628924 = validateParameter(valid_21628924, JString, required = false,
                                   default = nil)
  if valid_21628924 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628924
  var valid_21628925 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628925 = validateParameter(valid_21628925, JString, required = false,
                                   default = nil)
  if valid_21628925 != nil:
    section.add "X-Amz-Algorithm", valid_21628925
  var valid_21628926 = header.getOrDefault("X-Amz-Signature")
  valid_21628926 = validateParameter(valid_21628926, JString, required = false,
                                   default = nil)
  if valid_21628926 != nil:
    section.add "X-Amz-Signature", valid_21628926
  var valid_21628927 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628927 = validateParameter(valid_21628927, JString, required = false,
                                   default = nil)
  if valid_21628927 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628927
  var valid_21628928 = header.getOrDefault("X-Amz-Credential")
  valid_21628928 = validateParameter(valid_21628928, JString, required = false,
                                   default = nil)
  if valid_21628928 != nil:
    section.add "X-Amz-Credential", valid_21628928
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628929: Call_GetModifyScheduledAction_21628909;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Modifies a scheduled action. 
  ## 
  let valid = call_21628929.validator(path, query, header, formData, body, _)
  let scheme = call_21628929.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628929.makeUrl(scheme.get, call_21628929.host, call_21628929.base,
                               call_21628929.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628929, uri, valid, _)

proc call*(call_21628930: Call_GetModifyScheduledAction_21628909;
          ScheduledActionName: string; Schedule: string = ""; StartTime: string = "";
          IamRole: string = ""; Enable: bool = false;
          Action: string = "ModifyScheduledAction"; EndTime: string = "";
          Version: string = "2012-12-01"; ScheduledActionDescription: string = "";
          TargetActionResizeCluster: string = ""): Recallable =
  ## getModifyScheduledAction
  ## Modifies a scheduled action. 
  ##   Schedule: string
  ##           : A modified schedule in either <code>at( )</code> or <code>cron( )</code> format. For more information about this parameter, see <a>ScheduledAction</a>.
  ##   ScheduledActionName: string (required)
  ##                      : The name of the scheduled action to modify. 
  ##   StartTime: string
  ##            : A modified start time of the scheduled action. For more information about this parameter, see <a>ScheduledAction</a>. 
  ##   IamRole: string
  ##          : A different IAM role to assume to run the target action. For more information about this parameter, see <a>ScheduledAction</a>.
  ##   Enable: bool
  ##         : A modified enable flag of the scheduled action. If true, the scheduled action is active. If false, the scheduled action is disabled. 
  ##   Action: string (required)
  ##   EndTime: string
  ##          : A modified end time of the scheduled action. For more information about this parameter, see <a>ScheduledAction</a>. 
  ##   Version: string (required)
  ##   ScheduledActionDescription: string
  ##                             : A modified description of the scheduled action. 
  ##   TargetActionResizeCluster: string
  ##                            : The action type that specifies an Amazon Redshift API operation that is supported by the Amazon Redshift scheduler. 
  ## An action that runs a <code>ResizeCluster</code> API operation. 
  var query_21628931 = newJObject()
  add(query_21628931, "Schedule", newJString(Schedule))
  add(query_21628931, "ScheduledActionName", newJString(ScheduledActionName))
  add(query_21628931, "StartTime", newJString(StartTime))
  add(query_21628931, "IamRole", newJString(IamRole))
  add(query_21628931, "Enable", newJBool(Enable))
  add(query_21628931, "Action", newJString(Action))
  add(query_21628931, "EndTime", newJString(EndTime))
  add(query_21628931, "Version", newJString(Version))
  add(query_21628931, "ScheduledActionDescription",
      newJString(ScheduledActionDescription))
  add(query_21628931, "TargetAction.ResizeCluster",
      newJString(TargetActionResizeCluster))
  result = call_21628930.call(nil, query_21628931, nil, nil, nil)

var getModifyScheduledAction* = Call_GetModifyScheduledAction_21628909(
    name: "getModifyScheduledAction", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=ModifyScheduledAction",
    validator: validate_GetModifyScheduledAction_21628910, base: "/",
    makeUrl: url_GetModifyScheduledAction_21628911,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifySnapshotCopyRetentionPeriod_21628974 = ref object of OpenApiRestCall_21625418
proc url_PostModifySnapshotCopyRetentionPeriod_21628976(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifySnapshotCopyRetentionPeriod_21628975(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Modifies the number of days to retain snapshots in the destination AWS Region after they are copied from the source AWS Region. By default, this operation only changes the retention period of copied automated snapshots. The retention periods for both new and existing copied automated snapshots are updated with the new retention period. You can set the manual option to change only the retention periods of copied manual snapshots. If you set this option, only newly copied manual snapshots have the new retention period. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628977 = query.getOrDefault("Action")
  valid_21628977 = validateParameter(valid_21628977, JString, required = true, default = newJString(
      "ModifySnapshotCopyRetentionPeriod"))
  if valid_21628977 != nil:
    section.add "Action", valid_21628977
  var valid_21628978 = query.getOrDefault("Version")
  valid_21628978 = validateParameter(valid_21628978, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628978 != nil:
    section.add "Version", valid_21628978
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628979 = header.getOrDefault("X-Amz-Date")
  valid_21628979 = validateParameter(valid_21628979, JString, required = false,
                                   default = nil)
  if valid_21628979 != nil:
    section.add "X-Amz-Date", valid_21628979
  var valid_21628980 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628980 = validateParameter(valid_21628980, JString, required = false,
                                   default = nil)
  if valid_21628980 != nil:
    section.add "X-Amz-Security-Token", valid_21628980
  var valid_21628981 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628981 = validateParameter(valid_21628981, JString, required = false,
                                   default = nil)
  if valid_21628981 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628981
  var valid_21628982 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628982 = validateParameter(valid_21628982, JString, required = false,
                                   default = nil)
  if valid_21628982 != nil:
    section.add "X-Amz-Algorithm", valid_21628982
  var valid_21628983 = header.getOrDefault("X-Amz-Signature")
  valid_21628983 = validateParameter(valid_21628983, JString, required = false,
                                   default = nil)
  if valid_21628983 != nil:
    section.add "X-Amz-Signature", valid_21628983
  var valid_21628984 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628984 = validateParameter(valid_21628984, JString, required = false,
                                   default = nil)
  if valid_21628984 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628984
  var valid_21628985 = header.getOrDefault("X-Amz-Credential")
  valid_21628985 = validateParameter(valid_21628985, JString, required = false,
                                   default = nil)
  if valid_21628985 != nil:
    section.add "X-Amz-Credential", valid_21628985
  result.add "header", section
  ## parameters in `formData` object:
  ##   Manual: JBool
  ##         : Indicates whether to apply the snapshot retention period to newly copied manual snapshots instead of automated snapshots.
  ##   RetentionPeriod: JInt (required)
  ##                  : <p>The number of days to retain automated snapshots in the destination AWS Region after they are copied from the source AWS Region.</p> <p>By default, this only changes the retention period of copied automated snapshots. </p> <p>If you decrease the retention period for automated snapshots that are copied to a destination AWS Region, Amazon Redshift deletes any existing automated snapshots that were copied to the destination AWS Region and that fall outside of the new retention period.</p> <p>Constraints: Must be at least 1 and no more than 35 for automated snapshots. </p> <p>If you specify the <code>manual</code> option, only newly copied manual snapshots will have the new retention period. </p> <p>If you specify the value of -1 newly copied manual snapshots are retained indefinitely.</p> <p>Constraints: The number of days must be either -1 or an integer between 1 and 3,653 for manual snapshots.</p>
  ##   ClusterIdentifier: JString (required)
  ##                    : <p>The unique identifier of the cluster for which you want to change the retention period for either automated or manual snapshots that are copied to a destination AWS Region.</p> <p>Constraints: Must be the valid name of an existing cluster that has cross-region snapshot copy enabled.</p>
  section = newJObject()
  var valid_21628986 = formData.getOrDefault("Manual")
  valid_21628986 = validateParameter(valid_21628986, JBool, required = false,
                                   default = nil)
  if valid_21628986 != nil:
    section.add "Manual", valid_21628986
  assert formData != nil, "formData argument is necessary due to required `RetentionPeriod` field"
  var valid_21628987 = formData.getOrDefault("RetentionPeriod")
  valid_21628987 = validateParameter(valid_21628987, JInt, required = true,
                                   default = nil)
  if valid_21628987 != nil:
    section.add "RetentionPeriod", valid_21628987
  var valid_21628988 = formData.getOrDefault("ClusterIdentifier")
  valid_21628988 = validateParameter(valid_21628988, JString, required = true,
                                   default = nil)
  if valid_21628988 != nil:
    section.add "ClusterIdentifier", valid_21628988
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628989: Call_PostModifySnapshotCopyRetentionPeriod_21628974;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Modifies the number of days to retain snapshots in the destination AWS Region after they are copied from the source AWS Region. By default, this operation only changes the retention period of copied automated snapshots. The retention periods for both new and existing copied automated snapshots are updated with the new retention period. You can set the manual option to change only the retention periods of copied manual snapshots. If you set this option, only newly copied manual snapshots have the new retention period. 
  ## 
  let valid = call_21628989.validator(path, query, header, formData, body, _)
  let scheme = call_21628989.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628989.makeUrl(scheme.get, call_21628989.host, call_21628989.base,
                               call_21628989.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628989, uri, valid, _)

proc call*(call_21628990: Call_PostModifySnapshotCopyRetentionPeriod_21628974;
          RetentionPeriod: int; ClusterIdentifier: string; Manual: bool = false;
          Action: string = "ModifySnapshotCopyRetentionPeriod";
          Version: string = "2012-12-01"): Recallable =
  ## postModifySnapshotCopyRetentionPeriod
  ## Modifies the number of days to retain snapshots in the destination AWS Region after they are copied from the source AWS Region. By default, this operation only changes the retention period of copied automated snapshots. The retention periods for both new and existing copied automated snapshots are updated with the new retention period. You can set the manual option to change only the retention periods of copied manual snapshots. If you set this option, only newly copied manual snapshots have the new retention period. 
  ##   Manual: bool
  ##         : Indicates whether to apply the snapshot retention period to newly copied manual snapshots instead of automated snapshots.
  ##   RetentionPeriod: int (required)
  ##                  : <p>The number of days to retain automated snapshots in the destination AWS Region after they are copied from the source AWS Region.</p> <p>By default, this only changes the retention period of copied automated snapshots. </p> <p>If you decrease the retention period for automated snapshots that are copied to a destination AWS Region, Amazon Redshift deletes any existing automated snapshots that were copied to the destination AWS Region and that fall outside of the new retention period.</p> <p>Constraints: Must be at least 1 and no more than 35 for automated snapshots. </p> <p>If you specify the <code>manual</code> option, only newly copied manual snapshots will have the new retention period. </p> <p>If you specify the value of -1 newly copied manual snapshots are retained indefinitely.</p> <p>Constraints: The number of days must be either -1 or an integer between 1 and 3,653 for manual snapshots.</p>
  ##   Action: string (required)
  ##   ClusterIdentifier: string (required)
  ##                    : <p>The unique identifier of the cluster for which you want to change the retention period for either automated or manual snapshots that are copied to a destination AWS Region.</p> <p>Constraints: Must be the valid name of an existing cluster that has cross-region snapshot copy enabled.</p>
  ##   Version: string (required)
  var query_21628991 = newJObject()
  var formData_21628992 = newJObject()
  add(formData_21628992, "Manual", newJBool(Manual))
  add(formData_21628992, "RetentionPeriod", newJInt(RetentionPeriod))
  add(query_21628991, "Action", newJString(Action))
  add(formData_21628992, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(query_21628991, "Version", newJString(Version))
  result = call_21628990.call(nil, query_21628991, nil, formData_21628992, nil)

var postModifySnapshotCopyRetentionPeriod* = Call_PostModifySnapshotCopyRetentionPeriod_21628974(
    name: "postModifySnapshotCopyRetentionPeriod", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com",
    route: "/#Action=ModifySnapshotCopyRetentionPeriod",
    validator: validate_PostModifySnapshotCopyRetentionPeriod_21628975, base: "/",
    makeUrl: url_PostModifySnapshotCopyRetentionPeriod_21628976,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifySnapshotCopyRetentionPeriod_21628956 = ref object of OpenApiRestCall_21625418
proc url_GetModifySnapshotCopyRetentionPeriod_21628958(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifySnapshotCopyRetentionPeriod_21628957(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Modifies the number of days to retain snapshots in the destination AWS Region after they are copied from the source AWS Region. By default, this operation only changes the retention period of copied automated snapshots. The retention periods for both new and existing copied automated snapshots are updated with the new retention period. You can set the manual option to change only the retention periods of copied manual snapshots. If you set this option, only newly copied manual snapshots have the new retention period. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Manual: JBool
  ##         : Indicates whether to apply the snapshot retention period to newly copied manual snapshots instead of automated snapshots.
  ##   Action: JString (required)
  ##   ClusterIdentifier: JString (required)
  ##                    : <p>The unique identifier of the cluster for which you want to change the retention period for either automated or manual snapshots that are copied to a destination AWS Region.</p> <p>Constraints: Must be the valid name of an existing cluster that has cross-region snapshot copy enabled.</p>
  ##   RetentionPeriod: JInt (required)
  ##                  : <p>The number of days to retain automated snapshots in the destination AWS Region after they are copied from the source AWS Region.</p> <p>By default, this only changes the retention period of copied automated snapshots. </p> <p>If you decrease the retention period for automated snapshots that are copied to a destination AWS Region, Amazon Redshift deletes any existing automated snapshots that were copied to the destination AWS Region and that fall outside of the new retention period.</p> <p>Constraints: Must be at least 1 and no more than 35 for automated snapshots. </p> <p>If you specify the <code>manual</code> option, only newly copied manual snapshots will have the new retention period. </p> <p>If you specify the value of -1 newly copied manual snapshots are retained indefinitely.</p> <p>Constraints: The number of days must be either -1 or an integer between 1 and 3,653 for manual snapshots.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628959 = query.getOrDefault("Manual")
  valid_21628959 = validateParameter(valid_21628959, JBool, required = false,
                                   default = nil)
  if valid_21628959 != nil:
    section.add "Manual", valid_21628959
  var valid_21628960 = query.getOrDefault("Action")
  valid_21628960 = validateParameter(valid_21628960, JString, required = true, default = newJString(
      "ModifySnapshotCopyRetentionPeriod"))
  if valid_21628960 != nil:
    section.add "Action", valid_21628960
  var valid_21628961 = query.getOrDefault("ClusterIdentifier")
  valid_21628961 = validateParameter(valid_21628961, JString, required = true,
                                   default = nil)
  if valid_21628961 != nil:
    section.add "ClusterIdentifier", valid_21628961
  var valid_21628962 = query.getOrDefault("RetentionPeriod")
  valid_21628962 = validateParameter(valid_21628962, JInt, required = true,
                                   default = nil)
  if valid_21628962 != nil:
    section.add "RetentionPeriod", valid_21628962
  var valid_21628963 = query.getOrDefault("Version")
  valid_21628963 = validateParameter(valid_21628963, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628963 != nil:
    section.add "Version", valid_21628963
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628964 = header.getOrDefault("X-Amz-Date")
  valid_21628964 = validateParameter(valid_21628964, JString, required = false,
                                   default = nil)
  if valid_21628964 != nil:
    section.add "X-Amz-Date", valid_21628964
  var valid_21628965 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628965 = validateParameter(valid_21628965, JString, required = false,
                                   default = nil)
  if valid_21628965 != nil:
    section.add "X-Amz-Security-Token", valid_21628965
  var valid_21628966 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628966 = validateParameter(valid_21628966, JString, required = false,
                                   default = nil)
  if valid_21628966 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628966
  var valid_21628967 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628967 = validateParameter(valid_21628967, JString, required = false,
                                   default = nil)
  if valid_21628967 != nil:
    section.add "X-Amz-Algorithm", valid_21628967
  var valid_21628968 = header.getOrDefault("X-Amz-Signature")
  valid_21628968 = validateParameter(valid_21628968, JString, required = false,
                                   default = nil)
  if valid_21628968 != nil:
    section.add "X-Amz-Signature", valid_21628968
  var valid_21628969 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628969 = validateParameter(valid_21628969, JString, required = false,
                                   default = nil)
  if valid_21628969 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628969
  var valid_21628970 = header.getOrDefault("X-Amz-Credential")
  valid_21628970 = validateParameter(valid_21628970, JString, required = false,
                                   default = nil)
  if valid_21628970 != nil:
    section.add "X-Amz-Credential", valid_21628970
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628971: Call_GetModifySnapshotCopyRetentionPeriod_21628956;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Modifies the number of days to retain snapshots in the destination AWS Region after they are copied from the source AWS Region. By default, this operation only changes the retention period of copied automated snapshots. The retention periods for both new and existing copied automated snapshots are updated with the new retention period. You can set the manual option to change only the retention periods of copied manual snapshots. If you set this option, only newly copied manual snapshots have the new retention period. 
  ## 
  let valid = call_21628971.validator(path, query, header, formData, body, _)
  let scheme = call_21628971.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628971.makeUrl(scheme.get, call_21628971.host, call_21628971.base,
                               call_21628971.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628971, uri, valid, _)

proc call*(call_21628972: Call_GetModifySnapshotCopyRetentionPeriod_21628956;
          ClusterIdentifier: string; RetentionPeriod: int; Manual: bool = false;
          Action: string = "ModifySnapshotCopyRetentionPeriod";
          Version: string = "2012-12-01"): Recallable =
  ## getModifySnapshotCopyRetentionPeriod
  ## Modifies the number of days to retain snapshots in the destination AWS Region after they are copied from the source AWS Region. By default, this operation only changes the retention period of copied automated snapshots. The retention periods for both new and existing copied automated snapshots are updated with the new retention period. You can set the manual option to change only the retention periods of copied manual snapshots. If you set this option, only newly copied manual snapshots have the new retention period. 
  ##   Manual: bool
  ##         : Indicates whether to apply the snapshot retention period to newly copied manual snapshots instead of automated snapshots.
  ##   Action: string (required)
  ##   ClusterIdentifier: string (required)
  ##                    : <p>The unique identifier of the cluster for which you want to change the retention period for either automated or manual snapshots that are copied to a destination AWS Region.</p> <p>Constraints: Must be the valid name of an existing cluster that has cross-region snapshot copy enabled.</p>
  ##   RetentionPeriod: int (required)
  ##                  : <p>The number of days to retain automated snapshots in the destination AWS Region after they are copied from the source AWS Region.</p> <p>By default, this only changes the retention period of copied automated snapshots. </p> <p>If you decrease the retention period for automated snapshots that are copied to a destination AWS Region, Amazon Redshift deletes any existing automated snapshots that were copied to the destination AWS Region and that fall outside of the new retention period.</p> <p>Constraints: Must be at least 1 and no more than 35 for automated snapshots. </p> <p>If you specify the <code>manual</code> option, only newly copied manual snapshots will have the new retention period. </p> <p>If you specify the value of -1 newly copied manual snapshots are retained indefinitely.</p> <p>Constraints: The number of days must be either -1 or an integer between 1 and 3,653 for manual snapshots.</p>
  ##   Version: string (required)
  var query_21628973 = newJObject()
  add(query_21628973, "Manual", newJBool(Manual))
  add(query_21628973, "Action", newJString(Action))
  add(query_21628973, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(query_21628973, "RetentionPeriod", newJInt(RetentionPeriod))
  add(query_21628973, "Version", newJString(Version))
  result = call_21628972.call(nil, query_21628973, nil, nil, nil)

var getModifySnapshotCopyRetentionPeriod* = Call_GetModifySnapshotCopyRetentionPeriod_21628956(
    name: "getModifySnapshotCopyRetentionPeriod", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com",
    route: "/#Action=ModifySnapshotCopyRetentionPeriod",
    validator: validate_GetModifySnapshotCopyRetentionPeriod_21628957, base: "/",
    makeUrl: url_GetModifySnapshotCopyRetentionPeriod_21628958,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifySnapshotSchedule_21629010 = ref object of OpenApiRestCall_21625418
proc url_PostModifySnapshotSchedule_21629012(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifySnapshotSchedule_21629011(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Modifies a snapshot schedule. Any schedule associated with a cluster is modified asynchronously.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629013 = query.getOrDefault("Action")
  valid_21629013 = validateParameter(valid_21629013, JString, required = true, default = newJString(
      "ModifySnapshotSchedule"))
  if valid_21629013 != nil:
    section.add "Action", valid_21629013
  var valid_21629014 = query.getOrDefault("Version")
  valid_21629014 = validateParameter(valid_21629014, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21629014 != nil:
    section.add "Version", valid_21629014
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629015 = header.getOrDefault("X-Amz-Date")
  valid_21629015 = validateParameter(valid_21629015, JString, required = false,
                                   default = nil)
  if valid_21629015 != nil:
    section.add "X-Amz-Date", valid_21629015
  var valid_21629016 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629016 = validateParameter(valid_21629016, JString, required = false,
                                   default = nil)
  if valid_21629016 != nil:
    section.add "X-Amz-Security-Token", valid_21629016
  var valid_21629017 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629017 = validateParameter(valid_21629017, JString, required = false,
                                   default = nil)
  if valid_21629017 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629017
  var valid_21629018 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629018 = validateParameter(valid_21629018, JString, required = false,
                                   default = nil)
  if valid_21629018 != nil:
    section.add "X-Amz-Algorithm", valid_21629018
  var valid_21629019 = header.getOrDefault("X-Amz-Signature")
  valid_21629019 = validateParameter(valid_21629019, JString, required = false,
                                   default = nil)
  if valid_21629019 != nil:
    section.add "X-Amz-Signature", valid_21629019
  var valid_21629020 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629020 = validateParameter(valid_21629020, JString, required = false,
                                   default = nil)
  if valid_21629020 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629020
  var valid_21629021 = header.getOrDefault("X-Amz-Credential")
  valid_21629021 = validateParameter(valid_21629021, JString, required = false,
                                   default = nil)
  if valid_21629021 != nil:
    section.add "X-Amz-Credential", valid_21629021
  result.add "header", section
  ## parameters in `formData` object:
  ##   ScheduleDefinitions: JArray (required)
  ##                      : An updated list of schedule definitions. A schedule definition is made up of schedule expressions, for example, "cron(30 12 *)" or "rate(12 hours)".
  ##   ScheduleIdentifier: JString (required)
  ##                     : A unique alphanumeric identifier of the schedule to modify.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ScheduleDefinitions` field"
  var valid_21629022 = formData.getOrDefault("ScheduleDefinitions")
  valid_21629022 = validateParameter(valid_21629022, JArray, required = true,
                                   default = nil)
  if valid_21629022 != nil:
    section.add "ScheduleDefinitions", valid_21629022
  var valid_21629023 = formData.getOrDefault("ScheduleIdentifier")
  valid_21629023 = validateParameter(valid_21629023, JString, required = true,
                                   default = nil)
  if valid_21629023 != nil:
    section.add "ScheduleIdentifier", valid_21629023
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629024: Call_PostModifySnapshotSchedule_21629010;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Modifies a snapshot schedule. Any schedule associated with a cluster is modified asynchronously.
  ## 
  let valid = call_21629024.validator(path, query, header, formData, body, _)
  let scheme = call_21629024.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629024.makeUrl(scheme.get, call_21629024.host, call_21629024.base,
                               call_21629024.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629024, uri, valid, _)

proc call*(call_21629025: Call_PostModifySnapshotSchedule_21629010;
          ScheduleDefinitions: JsonNode; ScheduleIdentifier: string;
          Action: string = "ModifySnapshotSchedule"; Version: string = "2012-12-01"): Recallable =
  ## postModifySnapshotSchedule
  ## Modifies a snapshot schedule. Any schedule associated with a cluster is modified asynchronously.
  ##   ScheduleDefinitions: JArray (required)
  ##                      : An updated list of schedule definitions. A schedule definition is made up of schedule expressions, for example, "cron(30 12 *)" or "rate(12 hours)".
  ##   Action: string (required)
  ##   ScheduleIdentifier: string (required)
  ##                     : A unique alphanumeric identifier of the schedule to modify.
  ##   Version: string (required)
  var query_21629026 = newJObject()
  var formData_21629027 = newJObject()
  if ScheduleDefinitions != nil:
    formData_21629027.add "ScheduleDefinitions", ScheduleDefinitions
  add(query_21629026, "Action", newJString(Action))
  add(formData_21629027, "ScheduleIdentifier", newJString(ScheduleIdentifier))
  add(query_21629026, "Version", newJString(Version))
  result = call_21629025.call(nil, query_21629026, nil, formData_21629027, nil)

var postModifySnapshotSchedule* = Call_PostModifySnapshotSchedule_21629010(
    name: "postModifySnapshotSchedule", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=ModifySnapshotSchedule",
    validator: validate_PostModifySnapshotSchedule_21629011, base: "/",
    makeUrl: url_PostModifySnapshotSchedule_21629012,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifySnapshotSchedule_21628993 = ref object of OpenApiRestCall_21625418
proc url_GetModifySnapshotSchedule_21628995(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifySnapshotSchedule_21628994(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Modifies a snapshot schedule. Any schedule associated with a cluster is modified asynchronously.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ScheduleDefinitions: JArray (required)
  ##                      : An updated list of schedule definitions. A schedule definition is made up of schedule expressions, for example, "cron(30 12 *)" or "rate(12 hours)".
  ##   Action: JString (required)
  ##   ScheduleIdentifier: JString (required)
  ##                     : A unique alphanumeric identifier of the schedule to modify.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ScheduleDefinitions` field"
  var valid_21628996 = query.getOrDefault("ScheduleDefinitions")
  valid_21628996 = validateParameter(valid_21628996, JArray, required = true,
                                   default = nil)
  if valid_21628996 != nil:
    section.add "ScheduleDefinitions", valid_21628996
  var valid_21628997 = query.getOrDefault("Action")
  valid_21628997 = validateParameter(valid_21628997, JString, required = true, default = newJString(
      "ModifySnapshotSchedule"))
  if valid_21628997 != nil:
    section.add "Action", valid_21628997
  var valid_21628998 = query.getOrDefault("ScheduleIdentifier")
  valid_21628998 = validateParameter(valid_21628998, JString, required = true,
                                   default = nil)
  if valid_21628998 != nil:
    section.add "ScheduleIdentifier", valid_21628998
  var valid_21628999 = query.getOrDefault("Version")
  valid_21628999 = validateParameter(valid_21628999, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21628999 != nil:
    section.add "Version", valid_21628999
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629000 = header.getOrDefault("X-Amz-Date")
  valid_21629000 = validateParameter(valid_21629000, JString, required = false,
                                   default = nil)
  if valid_21629000 != nil:
    section.add "X-Amz-Date", valid_21629000
  var valid_21629001 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629001 = validateParameter(valid_21629001, JString, required = false,
                                   default = nil)
  if valid_21629001 != nil:
    section.add "X-Amz-Security-Token", valid_21629001
  var valid_21629002 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629002 = validateParameter(valid_21629002, JString, required = false,
                                   default = nil)
  if valid_21629002 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629002
  var valid_21629003 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629003 = validateParameter(valid_21629003, JString, required = false,
                                   default = nil)
  if valid_21629003 != nil:
    section.add "X-Amz-Algorithm", valid_21629003
  var valid_21629004 = header.getOrDefault("X-Amz-Signature")
  valid_21629004 = validateParameter(valid_21629004, JString, required = false,
                                   default = nil)
  if valid_21629004 != nil:
    section.add "X-Amz-Signature", valid_21629004
  var valid_21629005 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629005 = validateParameter(valid_21629005, JString, required = false,
                                   default = nil)
  if valid_21629005 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629005
  var valid_21629006 = header.getOrDefault("X-Amz-Credential")
  valid_21629006 = validateParameter(valid_21629006, JString, required = false,
                                   default = nil)
  if valid_21629006 != nil:
    section.add "X-Amz-Credential", valid_21629006
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629007: Call_GetModifySnapshotSchedule_21628993;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Modifies a snapshot schedule. Any schedule associated with a cluster is modified asynchronously.
  ## 
  let valid = call_21629007.validator(path, query, header, formData, body, _)
  let scheme = call_21629007.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629007.makeUrl(scheme.get, call_21629007.host, call_21629007.base,
                               call_21629007.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629007, uri, valid, _)

proc call*(call_21629008: Call_GetModifySnapshotSchedule_21628993;
          ScheduleDefinitions: JsonNode; ScheduleIdentifier: string;
          Action: string = "ModifySnapshotSchedule"; Version: string = "2012-12-01"): Recallable =
  ## getModifySnapshotSchedule
  ## Modifies a snapshot schedule. Any schedule associated with a cluster is modified asynchronously.
  ##   ScheduleDefinitions: JArray (required)
  ##                      : An updated list of schedule definitions. A schedule definition is made up of schedule expressions, for example, "cron(30 12 *)" or "rate(12 hours)".
  ##   Action: string (required)
  ##   ScheduleIdentifier: string (required)
  ##                     : A unique alphanumeric identifier of the schedule to modify.
  ##   Version: string (required)
  var query_21629009 = newJObject()
  if ScheduleDefinitions != nil:
    query_21629009.add "ScheduleDefinitions", ScheduleDefinitions
  add(query_21629009, "Action", newJString(Action))
  add(query_21629009, "ScheduleIdentifier", newJString(ScheduleIdentifier))
  add(query_21629009, "Version", newJString(Version))
  result = call_21629008.call(nil, query_21629009, nil, nil, nil)

var getModifySnapshotSchedule* = Call_GetModifySnapshotSchedule_21628993(
    name: "getModifySnapshotSchedule", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=ModifySnapshotSchedule",
    validator: validate_GetModifySnapshotSchedule_21628994, base: "/",
    makeUrl: url_GetModifySnapshotSchedule_21628995,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPurchaseReservedNodeOffering_21629045 = ref object of OpenApiRestCall_21625418
proc url_PostPurchaseReservedNodeOffering_21629047(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPurchaseReservedNodeOffering_21629046(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Allows you to purchase reserved nodes. Amazon Redshift offers a predefined set of reserved node offerings. You can purchase one or more of the offerings. You can call the <a>DescribeReservedNodeOfferings</a> API to obtain the available reserved node offerings. You can call this API by providing a specific reserved node offering and the number of nodes you want to reserve. </p> <p> For more information about reserved node offerings, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/purchase-reserved-node-instance.html">Purchasing Reserved Nodes</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629048 = query.getOrDefault("Action")
  valid_21629048 = validateParameter(valid_21629048, JString, required = true, default = newJString(
      "PurchaseReservedNodeOffering"))
  if valid_21629048 != nil:
    section.add "Action", valid_21629048
  var valid_21629049 = query.getOrDefault("Version")
  valid_21629049 = validateParameter(valid_21629049, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21629049 != nil:
    section.add "Version", valid_21629049
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629050 = header.getOrDefault("X-Amz-Date")
  valid_21629050 = validateParameter(valid_21629050, JString, required = false,
                                   default = nil)
  if valid_21629050 != nil:
    section.add "X-Amz-Date", valid_21629050
  var valid_21629051 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629051 = validateParameter(valid_21629051, JString, required = false,
                                   default = nil)
  if valid_21629051 != nil:
    section.add "X-Amz-Security-Token", valid_21629051
  var valid_21629052 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629052 = validateParameter(valid_21629052, JString, required = false,
                                   default = nil)
  if valid_21629052 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629052
  var valid_21629053 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629053 = validateParameter(valid_21629053, JString, required = false,
                                   default = nil)
  if valid_21629053 != nil:
    section.add "X-Amz-Algorithm", valid_21629053
  var valid_21629054 = header.getOrDefault("X-Amz-Signature")
  valid_21629054 = validateParameter(valid_21629054, JString, required = false,
                                   default = nil)
  if valid_21629054 != nil:
    section.add "X-Amz-Signature", valid_21629054
  var valid_21629055 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629055 = validateParameter(valid_21629055, JString, required = false,
                                   default = nil)
  if valid_21629055 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629055
  var valid_21629056 = header.getOrDefault("X-Amz-Credential")
  valid_21629056 = validateParameter(valid_21629056, JString, required = false,
                                   default = nil)
  if valid_21629056 != nil:
    section.add "X-Amz-Credential", valid_21629056
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReservedNodeOfferingId: JString (required)
  ##                         : The unique identifier of the reserved node offering you want to purchase.
  ##   NodeCount: JInt
  ##            : <p>The number of reserved nodes that you want to purchase.</p> <p>Default: <code>1</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ReservedNodeOfferingId` field"
  var valid_21629057 = formData.getOrDefault("ReservedNodeOfferingId")
  valid_21629057 = validateParameter(valid_21629057, JString, required = true,
                                   default = nil)
  if valid_21629057 != nil:
    section.add "ReservedNodeOfferingId", valid_21629057
  var valid_21629058 = formData.getOrDefault("NodeCount")
  valid_21629058 = validateParameter(valid_21629058, JInt, required = false,
                                   default = nil)
  if valid_21629058 != nil:
    section.add "NodeCount", valid_21629058
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629059: Call_PostPurchaseReservedNodeOffering_21629045;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Allows you to purchase reserved nodes. Amazon Redshift offers a predefined set of reserved node offerings. You can purchase one or more of the offerings. You can call the <a>DescribeReservedNodeOfferings</a> API to obtain the available reserved node offerings. You can call this API by providing a specific reserved node offering and the number of nodes you want to reserve. </p> <p> For more information about reserved node offerings, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/purchase-reserved-node-instance.html">Purchasing Reserved Nodes</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  let valid = call_21629059.validator(path, query, header, formData, body, _)
  let scheme = call_21629059.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629059.makeUrl(scheme.get, call_21629059.host, call_21629059.base,
                               call_21629059.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629059, uri, valid, _)

proc call*(call_21629060: Call_PostPurchaseReservedNodeOffering_21629045;
          ReservedNodeOfferingId: string; NodeCount: int = 0;
          Action: string = "PurchaseReservedNodeOffering";
          Version: string = "2012-12-01"): Recallable =
  ## postPurchaseReservedNodeOffering
  ## <p>Allows you to purchase reserved nodes. Amazon Redshift offers a predefined set of reserved node offerings. You can purchase one or more of the offerings. You can call the <a>DescribeReservedNodeOfferings</a> API to obtain the available reserved node offerings. You can call this API by providing a specific reserved node offering and the number of nodes you want to reserve. </p> <p> For more information about reserved node offerings, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/purchase-reserved-node-instance.html">Purchasing Reserved Nodes</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ##   ReservedNodeOfferingId: string (required)
  ##                         : The unique identifier of the reserved node offering you want to purchase.
  ##   NodeCount: int
  ##            : <p>The number of reserved nodes that you want to purchase.</p> <p>Default: <code>1</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21629061 = newJObject()
  var formData_21629062 = newJObject()
  add(formData_21629062, "ReservedNodeOfferingId",
      newJString(ReservedNodeOfferingId))
  add(formData_21629062, "NodeCount", newJInt(NodeCount))
  add(query_21629061, "Action", newJString(Action))
  add(query_21629061, "Version", newJString(Version))
  result = call_21629060.call(nil, query_21629061, nil, formData_21629062, nil)

var postPurchaseReservedNodeOffering* = Call_PostPurchaseReservedNodeOffering_21629045(
    name: "postPurchaseReservedNodeOffering", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com",
    route: "/#Action=PurchaseReservedNodeOffering",
    validator: validate_PostPurchaseReservedNodeOffering_21629046, base: "/",
    makeUrl: url_PostPurchaseReservedNodeOffering_21629047,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPurchaseReservedNodeOffering_21629028 = ref object of OpenApiRestCall_21625418
proc url_GetPurchaseReservedNodeOffering_21629030(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPurchaseReservedNodeOffering_21629029(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Allows you to purchase reserved nodes. Amazon Redshift offers a predefined set of reserved node offerings. You can purchase one or more of the offerings. You can call the <a>DescribeReservedNodeOfferings</a> API to obtain the available reserved node offerings. You can call this API by providing a specific reserved node offering and the number of nodes you want to reserve. </p> <p> For more information about reserved node offerings, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/purchase-reserved-node-instance.html">Purchasing Reserved Nodes</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ReservedNodeOfferingId: JString (required)
  ##                         : The unique identifier of the reserved node offering you want to purchase.
  ##   Action: JString (required)
  ##   NodeCount: JInt
  ##            : <p>The number of reserved nodes that you want to purchase.</p> <p>Default: <code>1</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ReservedNodeOfferingId` field"
  var valid_21629031 = query.getOrDefault("ReservedNodeOfferingId")
  valid_21629031 = validateParameter(valid_21629031, JString, required = true,
                                   default = nil)
  if valid_21629031 != nil:
    section.add "ReservedNodeOfferingId", valid_21629031
  var valid_21629032 = query.getOrDefault("Action")
  valid_21629032 = validateParameter(valid_21629032, JString, required = true, default = newJString(
      "PurchaseReservedNodeOffering"))
  if valid_21629032 != nil:
    section.add "Action", valid_21629032
  var valid_21629033 = query.getOrDefault("NodeCount")
  valid_21629033 = validateParameter(valid_21629033, JInt, required = false,
                                   default = nil)
  if valid_21629033 != nil:
    section.add "NodeCount", valid_21629033
  var valid_21629034 = query.getOrDefault("Version")
  valid_21629034 = validateParameter(valid_21629034, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21629034 != nil:
    section.add "Version", valid_21629034
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629035 = header.getOrDefault("X-Amz-Date")
  valid_21629035 = validateParameter(valid_21629035, JString, required = false,
                                   default = nil)
  if valid_21629035 != nil:
    section.add "X-Amz-Date", valid_21629035
  var valid_21629036 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629036 = validateParameter(valid_21629036, JString, required = false,
                                   default = nil)
  if valid_21629036 != nil:
    section.add "X-Amz-Security-Token", valid_21629036
  var valid_21629037 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629037 = validateParameter(valid_21629037, JString, required = false,
                                   default = nil)
  if valid_21629037 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629037
  var valid_21629038 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629038 = validateParameter(valid_21629038, JString, required = false,
                                   default = nil)
  if valid_21629038 != nil:
    section.add "X-Amz-Algorithm", valid_21629038
  var valid_21629039 = header.getOrDefault("X-Amz-Signature")
  valid_21629039 = validateParameter(valid_21629039, JString, required = false,
                                   default = nil)
  if valid_21629039 != nil:
    section.add "X-Amz-Signature", valid_21629039
  var valid_21629040 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629040 = validateParameter(valid_21629040, JString, required = false,
                                   default = nil)
  if valid_21629040 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629040
  var valid_21629041 = header.getOrDefault("X-Amz-Credential")
  valid_21629041 = validateParameter(valid_21629041, JString, required = false,
                                   default = nil)
  if valid_21629041 != nil:
    section.add "X-Amz-Credential", valid_21629041
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629042: Call_GetPurchaseReservedNodeOffering_21629028;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Allows you to purchase reserved nodes. Amazon Redshift offers a predefined set of reserved node offerings. You can purchase one or more of the offerings. You can call the <a>DescribeReservedNodeOfferings</a> API to obtain the available reserved node offerings. You can call this API by providing a specific reserved node offering and the number of nodes you want to reserve. </p> <p> For more information about reserved node offerings, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/purchase-reserved-node-instance.html">Purchasing Reserved Nodes</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  let valid = call_21629042.validator(path, query, header, formData, body, _)
  let scheme = call_21629042.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629042.makeUrl(scheme.get, call_21629042.host, call_21629042.base,
                               call_21629042.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629042, uri, valid, _)

proc call*(call_21629043: Call_GetPurchaseReservedNodeOffering_21629028;
          ReservedNodeOfferingId: string;
          Action: string = "PurchaseReservedNodeOffering"; NodeCount: int = 0;
          Version: string = "2012-12-01"): Recallable =
  ## getPurchaseReservedNodeOffering
  ## <p>Allows you to purchase reserved nodes. Amazon Redshift offers a predefined set of reserved node offerings. You can purchase one or more of the offerings. You can call the <a>DescribeReservedNodeOfferings</a> API to obtain the available reserved node offerings. You can call this API by providing a specific reserved node offering and the number of nodes you want to reserve. </p> <p> For more information about reserved node offerings, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/purchase-reserved-node-instance.html">Purchasing Reserved Nodes</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ##   ReservedNodeOfferingId: string (required)
  ##                         : The unique identifier of the reserved node offering you want to purchase.
  ##   Action: string (required)
  ##   NodeCount: int
  ##            : <p>The number of reserved nodes that you want to purchase.</p> <p>Default: <code>1</code> </p>
  ##   Version: string (required)
  var query_21629044 = newJObject()
  add(query_21629044, "ReservedNodeOfferingId", newJString(ReservedNodeOfferingId))
  add(query_21629044, "Action", newJString(Action))
  add(query_21629044, "NodeCount", newJInt(NodeCount))
  add(query_21629044, "Version", newJString(Version))
  result = call_21629043.call(nil, query_21629044, nil, nil, nil)

var getPurchaseReservedNodeOffering* = Call_GetPurchaseReservedNodeOffering_21629028(
    name: "getPurchaseReservedNodeOffering", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com",
    route: "/#Action=PurchaseReservedNodeOffering",
    validator: validate_GetPurchaseReservedNodeOffering_21629029, base: "/",
    makeUrl: url_GetPurchaseReservedNodeOffering_21629030,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRebootCluster_21629079 = ref object of OpenApiRestCall_21625418
proc url_PostRebootCluster_21629081(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRebootCluster_21629080(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Reboots a cluster. This action is taken as soon as possible. It results in a momentary outage to the cluster, during which the cluster status is set to <code>rebooting</code>. A cluster event is created when the reboot is completed. Any pending cluster modifications (see <a>ModifyCluster</a>) are applied at this reboot. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629082 = query.getOrDefault("Action")
  valid_21629082 = validateParameter(valid_21629082, JString, required = true,
                                   default = newJString("RebootCluster"))
  if valid_21629082 != nil:
    section.add "Action", valid_21629082
  var valid_21629083 = query.getOrDefault("Version")
  valid_21629083 = validateParameter(valid_21629083, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21629083 != nil:
    section.add "Version", valid_21629083
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629084 = header.getOrDefault("X-Amz-Date")
  valid_21629084 = validateParameter(valid_21629084, JString, required = false,
                                   default = nil)
  if valid_21629084 != nil:
    section.add "X-Amz-Date", valid_21629084
  var valid_21629085 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629085 = validateParameter(valid_21629085, JString, required = false,
                                   default = nil)
  if valid_21629085 != nil:
    section.add "X-Amz-Security-Token", valid_21629085
  var valid_21629086 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629086 = validateParameter(valid_21629086, JString, required = false,
                                   default = nil)
  if valid_21629086 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629086
  var valid_21629087 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629087 = validateParameter(valid_21629087, JString, required = false,
                                   default = nil)
  if valid_21629087 != nil:
    section.add "X-Amz-Algorithm", valid_21629087
  var valid_21629088 = header.getOrDefault("X-Amz-Signature")
  valid_21629088 = validateParameter(valid_21629088, JString, required = false,
                                   default = nil)
  if valid_21629088 != nil:
    section.add "X-Amz-Signature", valid_21629088
  var valid_21629089 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629089 = validateParameter(valid_21629089, JString, required = false,
                                   default = nil)
  if valid_21629089 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629089
  var valid_21629090 = header.getOrDefault("X-Amz-Credential")
  valid_21629090 = validateParameter(valid_21629090, JString, required = false,
                                   default = nil)
  if valid_21629090 != nil:
    section.add "X-Amz-Credential", valid_21629090
  result.add "header", section
  ## parameters in `formData` object:
  ##   ClusterIdentifier: JString (required)
  ##                    : The cluster identifier.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ClusterIdentifier` field"
  var valid_21629091 = formData.getOrDefault("ClusterIdentifier")
  valid_21629091 = validateParameter(valid_21629091, JString, required = true,
                                   default = nil)
  if valid_21629091 != nil:
    section.add "ClusterIdentifier", valid_21629091
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629092: Call_PostRebootCluster_21629079; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Reboots a cluster. This action is taken as soon as possible. It results in a momentary outage to the cluster, during which the cluster status is set to <code>rebooting</code>. A cluster event is created when the reboot is completed. Any pending cluster modifications (see <a>ModifyCluster</a>) are applied at this reboot. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>. 
  ## 
  let valid = call_21629092.validator(path, query, header, formData, body, _)
  let scheme = call_21629092.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629092.makeUrl(scheme.get, call_21629092.host, call_21629092.base,
                               call_21629092.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629092, uri, valid, _)

proc call*(call_21629093: Call_PostRebootCluster_21629079;
          ClusterIdentifier: string; Action: string = "RebootCluster";
          Version: string = "2012-12-01"): Recallable =
  ## postRebootCluster
  ## Reboots a cluster. This action is taken as soon as possible. It results in a momentary outage to the cluster, during which the cluster status is set to <code>rebooting</code>. A cluster event is created when the reboot is completed. Any pending cluster modifications (see <a>ModifyCluster</a>) are applied at this reboot. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>. 
  ##   Action: string (required)
  ##   ClusterIdentifier: string (required)
  ##                    : The cluster identifier.
  ##   Version: string (required)
  var query_21629094 = newJObject()
  var formData_21629095 = newJObject()
  add(query_21629094, "Action", newJString(Action))
  add(formData_21629095, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(query_21629094, "Version", newJString(Version))
  result = call_21629093.call(nil, query_21629094, nil, formData_21629095, nil)

var postRebootCluster* = Call_PostRebootCluster_21629079(name: "postRebootCluster",
    meth: HttpMethod.HttpPost, host: "redshift.amazonaws.com",
    route: "/#Action=RebootCluster", validator: validate_PostRebootCluster_21629080,
    base: "/", makeUrl: url_PostRebootCluster_21629081,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRebootCluster_21629063 = ref object of OpenApiRestCall_21625418
proc url_GetRebootCluster_21629065(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRebootCluster_21629064(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Reboots a cluster. This action is taken as soon as possible. It results in a momentary outage to the cluster, during which the cluster status is set to <code>rebooting</code>. A cluster event is created when the reboot is completed. Any pending cluster modifications (see <a>ModifyCluster</a>) are applied at this reboot. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ClusterIdentifier: JString (required)
  ##                    : The cluster identifier.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629066 = query.getOrDefault("Action")
  valid_21629066 = validateParameter(valid_21629066, JString, required = true,
                                   default = newJString("RebootCluster"))
  if valid_21629066 != nil:
    section.add "Action", valid_21629066
  var valid_21629067 = query.getOrDefault("ClusterIdentifier")
  valid_21629067 = validateParameter(valid_21629067, JString, required = true,
                                   default = nil)
  if valid_21629067 != nil:
    section.add "ClusterIdentifier", valid_21629067
  var valid_21629068 = query.getOrDefault("Version")
  valid_21629068 = validateParameter(valid_21629068, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21629068 != nil:
    section.add "Version", valid_21629068
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629069 = header.getOrDefault("X-Amz-Date")
  valid_21629069 = validateParameter(valid_21629069, JString, required = false,
                                   default = nil)
  if valid_21629069 != nil:
    section.add "X-Amz-Date", valid_21629069
  var valid_21629070 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629070 = validateParameter(valid_21629070, JString, required = false,
                                   default = nil)
  if valid_21629070 != nil:
    section.add "X-Amz-Security-Token", valid_21629070
  var valid_21629071 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629071 = validateParameter(valid_21629071, JString, required = false,
                                   default = nil)
  if valid_21629071 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629071
  var valid_21629072 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629072 = validateParameter(valid_21629072, JString, required = false,
                                   default = nil)
  if valid_21629072 != nil:
    section.add "X-Amz-Algorithm", valid_21629072
  var valid_21629073 = header.getOrDefault("X-Amz-Signature")
  valid_21629073 = validateParameter(valid_21629073, JString, required = false,
                                   default = nil)
  if valid_21629073 != nil:
    section.add "X-Amz-Signature", valid_21629073
  var valid_21629074 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629074 = validateParameter(valid_21629074, JString, required = false,
                                   default = nil)
  if valid_21629074 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629074
  var valid_21629075 = header.getOrDefault("X-Amz-Credential")
  valid_21629075 = validateParameter(valid_21629075, JString, required = false,
                                   default = nil)
  if valid_21629075 != nil:
    section.add "X-Amz-Credential", valid_21629075
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629076: Call_GetRebootCluster_21629063; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Reboots a cluster. This action is taken as soon as possible. It results in a momentary outage to the cluster, during which the cluster status is set to <code>rebooting</code>. A cluster event is created when the reboot is completed. Any pending cluster modifications (see <a>ModifyCluster</a>) are applied at this reboot. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>. 
  ## 
  let valid = call_21629076.validator(path, query, header, formData, body, _)
  let scheme = call_21629076.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629076.makeUrl(scheme.get, call_21629076.host, call_21629076.base,
                               call_21629076.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629076, uri, valid, _)

proc call*(call_21629077: Call_GetRebootCluster_21629063;
          ClusterIdentifier: string; Action: string = "RebootCluster";
          Version: string = "2012-12-01"): Recallable =
  ## getRebootCluster
  ## Reboots a cluster. This action is taken as soon as possible. It results in a momentary outage to the cluster, during which the cluster status is set to <code>rebooting</code>. A cluster event is created when the reboot is completed. Any pending cluster modifications (see <a>ModifyCluster</a>) are applied at this reboot. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>. 
  ##   Action: string (required)
  ##   ClusterIdentifier: string (required)
  ##                    : The cluster identifier.
  ##   Version: string (required)
  var query_21629078 = newJObject()
  add(query_21629078, "Action", newJString(Action))
  add(query_21629078, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(query_21629078, "Version", newJString(Version))
  result = call_21629077.call(nil, query_21629078, nil, nil, nil)

var getRebootCluster* = Call_GetRebootCluster_21629063(name: "getRebootCluster",
    meth: HttpMethod.HttpGet, host: "redshift.amazonaws.com",
    route: "/#Action=RebootCluster", validator: validate_GetRebootCluster_21629064,
    base: "/", makeUrl: url_GetRebootCluster_21629065,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetClusterParameterGroup_21629114 = ref object of OpenApiRestCall_21625418
proc url_PostResetClusterParameterGroup_21629116(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostResetClusterParameterGroup_21629115(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Sets one or more parameters of the specified parameter group to their default values and sets the source values of the parameters to "engine-default". To reset the entire parameter group specify the <i>ResetAllParameters</i> parameter. For parameter changes to take effect you must reboot any associated clusters. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629117 = query.getOrDefault("Action")
  valid_21629117 = validateParameter(valid_21629117, JString, required = true, default = newJString(
      "ResetClusterParameterGroup"))
  if valid_21629117 != nil:
    section.add "Action", valid_21629117
  var valid_21629118 = query.getOrDefault("Version")
  valid_21629118 = validateParameter(valid_21629118, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21629118 != nil:
    section.add "Version", valid_21629118
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629119 = header.getOrDefault("X-Amz-Date")
  valid_21629119 = validateParameter(valid_21629119, JString, required = false,
                                   default = nil)
  if valid_21629119 != nil:
    section.add "X-Amz-Date", valid_21629119
  var valid_21629120 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629120 = validateParameter(valid_21629120, JString, required = false,
                                   default = nil)
  if valid_21629120 != nil:
    section.add "X-Amz-Security-Token", valid_21629120
  var valid_21629121 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629121 = validateParameter(valid_21629121, JString, required = false,
                                   default = nil)
  if valid_21629121 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629121
  var valid_21629122 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629122 = validateParameter(valid_21629122, JString, required = false,
                                   default = nil)
  if valid_21629122 != nil:
    section.add "X-Amz-Algorithm", valid_21629122
  var valid_21629123 = header.getOrDefault("X-Amz-Signature")
  valid_21629123 = validateParameter(valid_21629123, JString, required = false,
                                   default = nil)
  if valid_21629123 != nil:
    section.add "X-Amz-Signature", valid_21629123
  var valid_21629124 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629124 = validateParameter(valid_21629124, JString, required = false,
                                   default = nil)
  if valid_21629124 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629124
  var valid_21629125 = header.getOrDefault("X-Amz-Credential")
  valid_21629125 = validateParameter(valid_21629125, JString, required = false,
                                   default = nil)
  if valid_21629125 != nil:
    section.add "X-Amz-Credential", valid_21629125
  result.add "header", section
  ## parameters in `formData` object:
  ##   ParameterGroupName: JString (required)
  ##                     : The name of the cluster parameter group to be reset.
  ##   Parameters: JArray
  ##             : <p>An array of names of parameters to be reset. If <i>ResetAllParameters</i> option is not used, then at least one parameter name must be supplied. </p> <p>Constraints: A maximum of 20 parameters can be reset in a single request.</p>
  ##   ResetAllParameters: JBool
  ##                     : <p>If <code>true</code>, all parameters in the specified parameter group will be reset to their default values. </p> <p>Default: <code>true</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ParameterGroupName` field"
  var valid_21629126 = formData.getOrDefault("ParameterGroupName")
  valid_21629126 = validateParameter(valid_21629126, JString, required = true,
                                   default = nil)
  if valid_21629126 != nil:
    section.add "ParameterGroupName", valid_21629126
  var valid_21629127 = formData.getOrDefault("Parameters")
  valid_21629127 = validateParameter(valid_21629127, JArray, required = false,
                                   default = nil)
  if valid_21629127 != nil:
    section.add "Parameters", valid_21629127
  var valid_21629128 = formData.getOrDefault("ResetAllParameters")
  valid_21629128 = validateParameter(valid_21629128, JBool, required = false,
                                   default = nil)
  if valid_21629128 != nil:
    section.add "ResetAllParameters", valid_21629128
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629129: Call_PostResetClusterParameterGroup_21629114;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Sets one or more parameters of the specified parameter group to their default values and sets the source values of the parameters to "engine-default". To reset the entire parameter group specify the <i>ResetAllParameters</i> parameter. For parameter changes to take effect you must reboot any associated clusters. 
  ## 
  let valid = call_21629129.validator(path, query, header, formData, body, _)
  let scheme = call_21629129.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629129.makeUrl(scheme.get, call_21629129.host, call_21629129.base,
                               call_21629129.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629129, uri, valid, _)

proc call*(call_21629130: Call_PostResetClusterParameterGroup_21629114;
          ParameterGroupName: string; Parameters: JsonNode = nil;
          Action: string = "ResetClusterParameterGroup";
          ResetAllParameters: bool = false; Version: string = "2012-12-01"): Recallable =
  ## postResetClusterParameterGroup
  ## Sets one or more parameters of the specified parameter group to their default values and sets the source values of the parameters to "engine-default". To reset the entire parameter group specify the <i>ResetAllParameters</i> parameter. For parameter changes to take effect you must reboot any associated clusters. 
  ##   ParameterGroupName: string (required)
  ##                     : The name of the cluster parameter group to be reset.
  ##   Parameters: JArray
  ##             : <p>An array of names of parameters to be reset. If <i>ResetAllParameters</i> option is not used, then at least one parameter name must be supplied. </p> <p>Constraints: A maximum of 20 parameters can be reset in a single request.</p>
  ##   Action: string (required)
  ##   ResetAllParameters: bool
  ##                     : <p>If <code>true</code>, all parameters in the specified parameter group will be reset to their default values. </p> <p>Default: <code>true</code> </p>
  ##   Version: string (required)
  var query_21629131 = newJObject()
  var formData_21629132 = newJObject()
  add(formData_21629132, "ParameterGroupName", newJString(ParameterGroupName))
  if Parameters != nil:
    formData_21629132.add "Parameters", Parameters
  add(query_21629131, "Action", newJString(Action))
  add(formData_21629132, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_21629131, "Version", newJString(Version))
  result = call_21629130.call(nil, query_21629131, nil, formData_21629132, nil)

var postResetClusterParameterGroup* = Call_PostResetClusterParameterGroup_21629114(
    name: "postResetClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=ResetClusterParameterGroup",
    validator: validate_PostResetClusterParameterGroup_21629115, base: "/",
    makeUrl: url_PostResetClusterParameterGroup_21629116,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetClusterParameterGroup_21629096 = ref object of OpenApiRestCall_21625418
proc url_GetResetClusterParameterGroup_21629098(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetResetClusterParameterGroup_21629097(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Sets one or more parameters of the specified parameter group to their default values and sets the source values of the parameters to "engine-default". To reset the entire parameter group specify the <i>ResetAllParameters</i> parameter. For parameter changes to take effect you must reboot any associated clusters. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ParameterGroupName: JString (required)
  ##                     : The name of the cluster parameter group to be reset.
  ##   Parameters: JArray
  ##             : <p>An array of names of parameters to be reset. If <i>ResetAllParameters</i> option is not used, then at least one parameter name must be supplied. </p> <p>Constraints: A maximum of 20 parameters can be reset in a single request.</p>
  ##   Action: JString (required)
  ##   ResetAllParameters: JBool
  ##                     : <p>If <code>true</code>, all parameters in the specified parameter group will be reset to their default values. </p> <p>Default: <code>true</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ParameterGroupName` field"
  var valid_21629099 = query.getOrDefault("ParameterGroupName")
  valid_21629099 = validateParameter(valid_21629099, JString, required = true,
                                   default = nil)
  if valid_21629099 != nil:
    section.add "ParameterGroupName", valid_21629099
  var valid_21629100 = query.getOrDefault("Parameters")
  valid_21629100 = validateParameter(valid_21629100, JArray, required = false,
                                   default = nil)
  if valid_21629100 != nil:
    section.add "Parameters", valid_21629100
  var valid_21629101 = query.getOrDefault("Action")
  valid_21629101 = validateParameter(valid_21629101, JString, required = true, default = newJString(
      "ResetClusterParameterGroup"))
  if valid_21629101 != nil:
    section.add "Action", valid_21629101
  var valid_21629102 = query.getOrDefault("ResetAllParameters")
  valid_21629102 = validateParameter(valid_21629102, JBool, required = false,
                                   default = nil)
  if valid_21629102 != nil:
    section.add "ResetAllParameters", valid_21629102
  var valid_21629103 = query.getOrDefault("Version")
  valid_21629103 = validateParameter(valid_21629103, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21629103 != nil:
    section.add "Version", valid_21629103
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629104 = header.getOrDefault("X-Amz-Date")
  valid_21629104 = validateParameter(valid_21629104, JString, required = false,
                                   default = nil)
  if valid_21629104 != nil:
    section.add "X-Amz-Date", valid_21629104
  var valid_21629105 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629105 = validateParameter(valid_21629105, JString, required = false,
                                   default = nil)
  if valid_21629105 != nil:
    section.add "X-Amz-Security-Token", valid_21629105
  var valid_21629106 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629106 = validateParameter(valid_21629106, JString, required = false,
                                   default = nil)
  if valid_21629106 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629106
  var valid_21629107 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629107 = validateParameter(valid_21629107, JString, required = false,
                                   default = nil)
  if valid_21629107 != nil:
    section.add "X-Amz-Algorithm", valid_21629107
  var valid_21629108 = header.getOrDefault("X-Amz-Signature")
  valid_21629108 = validateParameter(valid_21629108, JString, required = false,
                                   default = nil)
  if valid_21629108 != nil:
    section.add "X-Amz-Signature", valid_21629108
  var valid_21629109 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629109 = validateParameter(valid_21629109, JString, required = false,
                                   default = nil)
  if valid_21629109 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629109
  var valid_21629110 = header.getOrDefault("X-Amz-Credential")
  valid_21629110 = validateParameter(valid_21629110, JString, required = false,
                                   default = nil)
  if valid_21629110 != nil:
    section.add "X-Amz-Credential", valid_21629110
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629111: Call_GetResetClusterParameterGroup_21629096;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Sets one or more parameters of the specified parameter group to their default values and sets the source values of the parameters to "engine-default". To reset the entire parameter group specify the <i>ResetAllParameters</i> parameter. For parameter changes to take effect you must reboot any associated clusters. 
  ## 
  let valid = call_21629111.validator(path, query, header, formData, body, _)
  let scheme = call_21629111.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629111.makeUrl(scheme.get, call_21629111.host, call_21629111.base,
                               call_21629111.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629111, uri, valid, _)

proc call*(call_21629112: Call_GetResetClusterParameterGroup_21629096;
          ParameterGroupName: string; Parameters: JsonNode = nil;
          Action: string = "ResetClusterParameterGroup";
          ResetAllParameters: bool = false; Version: string = "2012-12-01"): Recallable =
  ## getResetClusterParameterGroup
  ## Sets one or more parameters of the specified parameter group to their default values and sets the source values of the parameters to "engine-default". To reset the entire parameter group specify the <i>ResetAllParameters</i> parameter. For parameter changes to take effect you must reboot any associated clusters. 
  ##   ParameterGroupName: string (required)
  ##                     : The name of the cluster parameter group to be reset.
  ##   Parameters: JArray
  ##             : <p>An array of names of parameters to be reset. If <i>ResetAllParameters</i> option is not used, then at least one parameter name must be supplied. </p> <p>Constraints: A maximum of 20 parameters can be reset in a single request.</p>
  ##   Action: string (required)
  ##   ResetAllParameters: bool
  ##                     : <p>If <code>true</code>, all parameters in the specified parameter group will be reset to their default values. </p> <p>Default: <code>true</code> </p>
  ##   Version: string (required)
  var query_21629113 = newJObject()
  add(query_21629113, "ParameterGroupName", newJString(ParameterGroupName))
  if Parameters != nil:
    query_21629113.add "Parameters", Parameters
  add(query_21629113, "Action", newJString(Action))
  add(query_21629113, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_21629113, "Version", newJString(Version))
  result = call_21629112.call(nil, query_21629113, nil, nil, nil)

var getResetClusterParameterGroup* = Call_GetResetClusterParameterGroup_21629096(
    name: "getResetClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=ResetClusterParameterGroup",
    validator: validate_GetResetClusterParameterGroup_21629097, base: "/",
    makeUrl: url_GetResetClusterParameterGroup_21629098,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResizeCluster_21629153 = ref object of OpenApiRestCall_21625418
proc url_PostResizeCluster_21629155(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostResizeCluster_21629154(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Changes the size of the cluster. You can change the cluster's type, or change the number or type of nodes. The default behavior is to use the elastic resize method. With an elastic resize, your cluster is available for read and write operations more quickly than with the classic resize method. </p> <p>Elastic resize operations have the following restrictions:</p> <ul> <li> <p>You can only resize clusters of the following types:</p> <ul> <li> <p>dc2.large</p> </li> <li> <p>dc2.8xlarge</p> </li> <li> <p>ds2.xlarge</p> </li> <li> <p>ds2.8xlarge</p> </li> <li> <p>ra3.16xlarge</p> </li> </ul> </li> <li> <p>The type of nodes that you add must match the node type for the cluster.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629156 = query.getOrDefault("Action")
  valid_21629156 = validateParameter(valid_21629156, JString, required = true,
                                   default = newJString("ResizeCluster"))
  if valid_21629156 != nil:
    section.add "Action", valid_21629156
  var valid_21629157 = query.getOrDefault("Version")
  valid_21629157 = validateParameter(valid_21629157, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21629157 != nil:
    section.add "Version", valid_21629157
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629158 = header.getOrDefault("X-Amz-Date")
  valid_21629158 = validateParameter(valid_21629158, JString, required = false,
                                   default = nil)
  if valid_21629158 != nil:
    section.add "X-Amz-Date", valid_21629158
  var valid_21629159 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629159 = validateParameter(valid_21629159, JString, required = false,
                                   default = nil)
  if valid_21629159 != nil:
    section.add "X-Amz-Security-Token", valid_21629159
  var valid_21629160 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629160 = validateParameter(valid_21629160, JString, required = false,
                                   default = nil)
  if valid_21629160 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629160
  var valid_21629161 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629161 = validateParameter(valid_21629161, JString, required = false,
                                   default = nil)
  if valid_21629161 != nil:
    section.add "X-Amz-Algorithm", valid_21629161
  var valid_21629162 = header.getOrDefault("X-Amz-Signature")
  valid_21629162 = validateParameter(valid_21629162, JString, required = false,
                                   default = nil)
  if valid_21629162 != nil:
    section.add "X-Amz-Signature", valid_21629162
  var valid_21629163 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629163 = validateParameter(valid_21629163, JString, required = false,
                                   default = nil)
  if valid_21629163 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629163
  var valid_21629164 = header.getOrDefault("X-Amz-Credential")
  valid_21629164 = validateParameter(valid_21629164, JString, required = false,
                                   default = nil)
  if valid_21629164 != nil:
    section.add "X-Amz-Credential", valid_21629164
  result.add "header", section
  ## parameters in `formData` object:
  ##   ClusterType: JString
  ##              : The new cluster type for the specified cluster.
  ##   ClusterIdentifier: JString (required)
  ##                    : The unique identifier for the cluster to resize.
  ##   NumberOfNodes: JInt
  ##                : The new number of nodes for the cluster.
  ##   Classic: JBool
  ##          : A boolean value indicating whether the resize operation is using the classic resize process. If you don't provide this parameter or set the value to <code>false</code>, the resize type is elastic. 
  ##   NodeType: JString
  ##           : The new node type for the nodes you are adding. If not specified, the cluster's current node type is used.
  section = newJObject()
  var valid_21629165 = formData.getOrDefault("ClusterType")
  valid_21629165 = validateParameter(valid_21629165, JString, required = false,
                                   default = nil)
  if valid_21629165 != nil:
    section.add "ClusterType", valid_21629165
  assert formData != nil, "formData argument is necessary due to required `ClusterIdentifier` field"
  var valid_21629166 = formData.getOrDefault("ClusterIdentifier")
  valid_21629166 = validateParameter(valid_21629166, JString, required = true,
                                   default = nil)
  if valid_21629166 != nil:
    section.add "ClusterIdentifier", valid_21629166
  var valid_21629167 = formData.getOrDefault("NumberOfNodes")
  valid_21629167 = validateParameter(valid_21629167, JInt, required = false,
                                   default = nil)
  if valid_21629167 != nil:
    section.add "NumberOfNodes", valid_21629167
  var valid_21629168 = formData.getOrDefault("Classic")
  valid_21629168 = validateParameter(valid_21629168, JBool, required = false,
                                   default = nil)
  if valid_21629168 != nil:
    section.add "Classic", valid_21629168
  var valid_21629169 = formData.getOrDefault("NodeType")
  valid_21629169 = validateParameter(valid_21629169, JString, required = false,
                                   default = nil)
  if valid_21629169 != nil:
    section.add "NodeType", valid_21629169
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629170: Call_PostResizeCluster_21629153; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Changes the size of the cluster. You can change the cluster's type, or change the number or type of nodes. The default behavior is to use the elastic resize method. With an elastic resize, your cluster is available for read and write operations more quickly than with the classic resize method. </p> <p>Elastic resize operations have the following restrictions:</p> <ul> <li> <p>You can only resize clusters of the following types:</p> <ul> <li> <p>dc2.large</p> </li> <li> <p>dc2.8xlarge</p> </li> <li> <p>ds2.xlarge</p> </li> <li> <p>ds2.8xlarge</p> </li> <li> <p>ra3.16xlarge</p> </li> </ul> </li> <li> <p>The type of nodes that you add must match the node type for the cluster.</p> </li> </ul>
  ## 
  let valid = call_21629170.validator(path, query, header, formData, body, _)
  let scheme = call_21629170.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629170.makeUrl(scheme.get, call_21629170.host, call_21629170.base,
                               call_21629170.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629170, uri, valid, _)

proc call*(call_21629171: Call_PostResizeCluster_21629153;
          ClusterIdentifier: string; ClusterType: string = "";
          Action: string = "ResizeCluster"; NumberOfNodes: int = 0;
          Classic: bool = false; Version: string = "2012-12-01"; NodeType: string = ""): Recallable =
  ## postResizeCluster
  ## <p>Changes the size of the cluster. You can change the cluster's type, or change the number or type of nodes. The default behavior is to use the elastic resize method. With an elastic resize, your cluster is available for read and write operations more quickly than with the classic resize method. </p> <p>Elastic resize operations have the following restrictions:</p> <ul> <li> <p>You can only resize clusters of the following types:</p> <ul> <li> <p>dc2.large</p> </li> <li> <p>dc2.8xlarge</p> </li> <li> <p>ds2.xlarge</p> </li> <li> <p>ds2.8xlarge</p> </li> <li> <p>ra3.16xlarge</p> </li> </ul> </li> <li> <p>The type of nodes that you add must match the node type for the cluster.</p> </li> </ul>
  ##   ClusterType: string
  ##              : The new cluster type for the specified cluster.
  ##   Action: string (required)
  ##   ClusterIdentifier: string (required)
  ##                    : The unique identifier for the cluster to resize.
  ##   NumberOfNodes: int
  ##                : The new number of nodes for the cluster.
  ##   Classic: bool
  ##          : A boolean value indicating whether the resize operation is using the classic resize process. If you don't provide this parameter or set the value to <code>false</code>, the resize type is elastic. 
  ##   Version: string (required)
  ##   NodeType: string
  ##           : The new node type for the nodes you are adding. If not specified, the cluster's current node type is used.
  var query_21629172 = newJObject()
  var formData_21629173 = newJObject()
  add(formData_21629173, "ClusterType", newJString(ClusterType))
  add(query_21629172, "Action", newJString(Action))
  add(formData_21629173, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(formData_21629173, "NumberOfNodes", newJInt(NumberOfNodes))
  add(formData_21629173, "Classic", newJBool(Classic))
  add(query_21629172, "Version", newJString(Version))
  add(formData_21629173, "NodeType", newJString(NodeType))
  result = call_21629171.call(nil, query_21629172, nil, formData_21629173, nil)

var postResizeCluster* = Call_PostResizeCluster_21629153(name: "postResizeCluster",
    meth: HttpMethod.HttpPost, host: "redshift.amazonaws.com",
    route: "/#Action=ResizeCluster", validator: validate_PostResizeCluster_21629154,
    base: "/", makeUrl: url_PostResizeCluster_21629155,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResizeCluster_21629133 = ref object of OpenApiRestCall_21625418
proc url_GetResizeCluster_21629135(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetResizeCluster_21629134(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Changes the size of the cluster. You can change the cluster's type, or change the number or type of nodes. The default behavior is to use the elastic resize method. With an elastic resize, your cluster is available for read and write operations more quickly than with the classic resize method. </p> <p>Elastic resize operations have the following restrictions:</p> <ul> <li> <p>You can only resize clusters of the following types:</p> <ul> <li> <p>dc2.large</p> </li> <li> <p>dc2.8xlarge</p> </li> <li> <p>ds2.xlarge</p> </li> <li> <p>ds2.8xlarge</p> </li> <li> <p>ra3.16xlarge</p> </li> </ul> </li> <li> <p>The type of nodes that you add must match the node type for the cluster.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ClusterIdentifier: JString (required)
  ##                    : The unique identifier for the cluster to resize.
  ##   Classic: JBool
  ##          : A boolean value indicating whether the resize operation is using the classic resize process. If you don't provide this parameter or set the value to <code>false</code>, the resize type is elastic. 
  ##   NumberOfNodes: JInt
  ##                : The new number of nodes for the cluster.
  ##   NodeType: JString
  ##           : The new node type for the nodes you are adding. If not specified, the cluster's current node type is used.
  ##   Version: JString (required)
  ##   ClusterType: JString
  ##              : The new cluster type for the specified cluster.
  section = newJObject()
  var valid_21629136 = query.getOrDefault("Action")
  valid_21629136 = validateParameter(valid_21629136, JString, required = true,
                                   default = newJString("ResizeCluster"))
  if valid_21629136 != nil:
    section.add "Action", valid_21629136
  var valid_21629137 = query.getOrDefault("ClusterIdentifier")
  valid_21629137 = validateParameter(valid_21629137, JString, required = true,
                                   default = nil)
  if valid_21629137 != nil:
    section.add "ClusterIdentifier", valid_21629137
  var valid_21629138 = query.getOrDefault("Classic")
  valid_21629138 = validateParameter(valid_21629138, JBool, required = false,
                                   default = nil)
  if valid_21629138 != nil:
    section.add "Classic", valid_21629138
  var valid_21629139 = query.getOrDefault("NumberOfNodes")
  valid_21629139 = validateParameter(valid_21629139, JInt, required = false,
                                   default = nil)
  if valid_21629139 != nil:
    section.add "NumberOfNodes", valid_21629139
  var valid_21629140 = query.getOrDefault("NodeType")
  valid_21629140 = validateParameter(valid_21629140, JString, required = false,
                                   default = nil)
  if valid_21629140 != nil:
    section.add "NodeType", valid_21629140
  var valid_21629141 = query.getOrDefault("Version")
  valid_21629141 = validateParameter(valid_21629141, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21629141 != nil:
    section.add "Version", valid_21629141
  var valid_21629142 = query.getOrDefault("ClusterType")
  valid_21629142 = validateParameter(valid_21629142, JString, required = false,
                                   default = nil)
  if valid_21629142 != nil:
    section.add "ClusterType", valid_21629142
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629143 = header.getOrDefault("X-Amz-Date")
  valid_21629143 = validateParameter(valid_21629143, JString, required = false,
                                   default = nil)
  if valid_21629143 != nil:
    section.add "X-Amz-Date", valid_21629143
  var valid_21629144 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629144 = validateParameter(valid_21629144, JString, required = false,
                                   default = nil)
  if valid_21629144 != nil:
    section.add "X-Amz-Security-Token", valid_21629144
  var valid_21629145 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629145 = validateParameter(valid_21629145, JString, required = false,
                                   default = nil)
  if valid_21629145 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629145
  var valid_21629146 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629146 = validateParameter(valid_21629146, JString, required = false,
                                   default = nil)
  if valid_21629146 != nil:
    section.add "X-Amz-Algorithm", valid_21629146
  var valid_21629147 = header.getOrDefault("X-Amz-Signature")
  valid_21629147 = validateParameter(valid_21629147, JString, required = false,
                                   default = nil)
  if valid_21629147 != nil:
    section.add "X-Amz-Signature", valid_21629147
  var valid_21629148 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629148 = validateParameter(valid_21629148, JString, required = false,
                                   default = nil)
  if valid_21629148 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629148
  var valid_21629149 = header.getOrDefault("X-Amz-Credential")
  valid_21629149 = validateParameter(valid_21629149, JString, required = false,
                                   default = nil)
  if valid_21629149 != nil:
    section.add "X-Amz-Credential", valid_21629149
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629150: Call_GetResizeCluster_21629133; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Changes the size of the cluster. You can change the cluster's type, or change the number or type of nodes. The default behavior is to use the elastic resize method. With an elastic resize, your cluster is available for read and write operations more quickly than with the classic resize method. </p> <p>Elastic resize operations have the following restrictions:</p> <ul> <li> <p>You can only resize clusters of the following types:</p> <ul> <li> <p>dc2.large</p> </li> <li> <p>dc2.8xlarge</p> </li> <li> <p>ds2.xlarge</p> </li> <li> <p>ds2.8xlarge</p> </li> <li> <p>ra3.16xlarge</p> </li> </ul> </li> <li> <p>The type of nodes that you add must match the node type for the cluster.</p> </li> </ul>
  ## 
  let valid = call_21629150.validator(path, query, header, formData, body, _)
  let scheme = call_21629150.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629150.makeUrl(scheme.get, call_21629150.host, call_21629150.base,
                               call_21629150.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629150, uri, valid, _)

proc call*(call_21629151: Call_GetResizeCluster_21629133;
          ClusterIdentifier: string; Action: string = "ResizeCluster";
          Classic: bool = false; NumberOfNodes: int = 0; NodeType: string = "";
          Version: string = "2012-12-01"; ClusterType: string = ""): Recallable =
  ## getResizeCluster
  ## <p>Changes the size of the cluster. You can change the cluster's type, or change the number or type of nodes. The default behavior is to use the elastic resize method. With an elastic resize, your cluster is available for read and write operations more quickly than with the classic resize method. </p> <p>Elastic resize operations have the following restrictions:</p> <ul> <li> <p>You can only resize clusters of the following types:</p> <ul> <li> <p>dc2.large</p> </li> <li> <p>dc2.8xlarge</p> </li> <li> <p>ds2.xlarge</p> </li> <li> <p>ds2.8xlarge</p> </li> <li> <p>ra3.16xlarge</p> </li> </ul> </li> <li> <p>The type of nodes that you add must match the node type for the cluster.</p> </li> </ul>
  ##   Action: string (required)
  ##   ClusterIdentifier: string (required)
  ##                    : The unique identifier for the cluster to resize.
  ##   Classic: bool
  ##          : A boolean value indicating whether the resize operation is using the classic resize process. If you don't provide this parameter or set the value to <code>false</code>, the resize type is elastic. 
  ##   NumberOfNodes: int
  ##                : The new number of nodes for the cluster.
  ##   NodeType: string
  ##           : The new node type for the nodes you are adding. If not specified, the cluster's current node type is used.
  ##   Version: string (required)
  ##   ClusterType: string
  ##              : The new cluster type for the specified cluster.
  var query_21629152 = newJObject()
  add(query_21629152, "Action", newJString(Action))
  add(query_21629152, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(query_21629152, "Classic", newJBool(Classic))
  add(query_21629152, "NumberOfNodes", newJInt(NumberOfNodes))
  add(query_21629152, "NodeType", newJString(NodeType))
  add(query_21629152, "Version", newJString(Version))
  add(query_21629152, "ClusterType", newJString(ClusterType))
  result = call_21629151.call(nil, query_21629152, nil, nil, nil)

var getResizeCluster* = Call_GetResizeCluster_21629133(name: "getResizeCluster",
    meth: HttpMethod.HttpGet, host: "redshift.amazonaws.com",
    route: "/#Action=ResizeCluster", validator: validate_GetResizeCluster_21629134,
    base: "/", makeUrl: url_GetResizeCluster_21629135,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreFromClusterSnapshot_21629215 = ref object of OpenApiRestCall_21625418
proc url_PostRestoreFromClusterSnapshot_21629217(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreFromClusterSnapshot_21629216(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Creates a new cluster from a snapshot. By default, Amazon Redshift creates the resulting cluster with the same configuration as the original cluster from which the snapshot was created, except that the new cluster is created with the default cluster security and parameter groups. After Amazon Redshift creates the cluster, you can use the <a>ModifyCluster</a> API to associate a different security group and different parameter group with the restored cluster. If you are using a DS node type, you can also choose to change to another DS node type of the same size during restore.</p> <p>If you restore a cluster into a VPC, you must provide a cluster subnet group where you want the cluster restored.</p> <p> For more information about working with snapshots, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629218 = query.getOrDefault("Action")
  valid_21629218 = validateParameter(valid_21629218, JString, required = true, default = newJString(
      "RestoreFromClusterSnapshot"))
  if valid_21629218 != nil:
    section.add "Action", valid_21629218
  var valid_21629219 = query.getOrDefault("Version")
  valid_21629219 = validateParameter(valid_21629219, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21629219 != nil:
    section.add "Version", valid_21629219
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629220 = header.getOrDefault("X-Amz-Date")
  valid_21629220 = validateParameter(valid_21629220, JString, required = false,
                                   default = nil)
  if valid_21629220 != nil:
    section.add "X-Amz-Date", valid_21629220
  var valid_21629221 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629221 = validateParameter(valid_21629221, JString, required = false,
                                   default = nil)
  if valid_21629221 != nil:
    section.add "X-Amz-Security-Token", valid_21629221
  var valid_21629222 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629222 = validateParameter(valid_21629222, JString, required = false,
                                   default = nil)
  if valid_21629222 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629222
  var valid_21629223 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629223 = validateParameter(valid_21629223, JString, required = false,
                                   default = nil)
  if valid_21629223 != nil:
    section.add "X-Amz-Algorithm", valid_21629223
  var valid_21629224 = header.getOrDefault("X-Amz-Signature")
  valid_21629224 = validateParameter(valid_21629224, JString, required = false,
                                   default = nil)
  if valid_21629224 != nil:
    section.add "X-Amz-Signature", valid_21629224
  var valid_21629225 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629225 = validateParameter(valid_21629225, JString, required = false,
                                   default = nil)
  if valid_21629225 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629225
  var valid_21629226 = header.getOrDefault("X-Amz-Credential")
  valid_21629226 = validateParameter(valid_21629226, JString, required = false,
                                   default = nil)
  if valid_21629226 != nil:
    section.add "X-Amz-Credential", valid_21629226
  result.add "header", section
  ## parameters in `formData` object:
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range (in UTC) during which automated cluster maintenance can occur.</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p> Default: The value selected for the cluster from which the snapshot was taken. For more information about the time blocks for each region, see <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#rs-maintenance-windows">Maintenance Windows</a> in Amazon Redshift Cluster Management Guide. </p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   EnhancedVpcRouting: JBool
  ##                     : <p>An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html">Enhanced VPC Routing</a> in the Amazon Redshift Cluster Management Guide.</p> <p>If this option is <code>true</code>, enhanced VPC routing is enabled. </p> <p>Default: false</p>
  ##   Port: JInt
  ##       : <p>The port number on which the cluster accepts connections.</p> <p>Default: The same port as the original cluster.</p> <p>Constraints: Must be between <code>1115</code> and <code>65535</code>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Virtual Private Cloud (VPC) security groups to be associated with the cluster.</p> <p>Default: The default VPC security group is associated with the cluster.</p> <p>VPC security groups only apply to clusters in VPCs.</p>
  ##   AdditionalInfo: JString
  ##                 : Reserved.
  ##   AvailabilityZone: JString
  ##                   : <p>The Amazon EC2 Availability Zone in which to restore the cluster.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Example: <code>us-east-2a</code> </p>
  ##   SnapshotClusterIdentifier: JString
  ##                            : The name of the cluster the source snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.
  ##   ClusterSecurityGroups: JArray
  ##                        : <p>A list of security groups to be associated with this cluster.</p> <p>Default: The default cluster security group for Amazon Redshift.</p> <p>Cluster security groups only apply to clusters outside of VPCs.</p>
  ##   HsmConfigurationIdentifier: JString
  ##                             : Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
  ##   OwnerAccount: JString
  ##               : The AWS customer account used to create or copy the snapshot. Required if you are restoring a snapshot you do not own, optional if you own the snapshot.
  ##   HsmClientCertificateIdentifier: JString
  ##                                 : Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
  ##   PubliclyAccessible: JBool
  ##                     : If <code>true</code>, the cluster can be accessed from a public network. 
  ##   ClusterIdentifier: JString (required)
  ##                    : <p>The identifier of the cluster that will be created from restoring the snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>Alphabetic characters must be lowercase.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Must be unique for all clusters within an AWS account.</p> </li> </ul>
  ##   IamRoles: JArray
  ##           : <p>A list of AWS Identity and Access Management (IAM) roles that can be used by the cluster to access other AWS services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. You can supply up to 10 IAM roles in a single request.</p> <p>A cluster can have up to 10 IAM roles associated at any time.</p>
  ##   SnapshotScheduleIdentifier: JString
  ##                             : A unique identifier for the snapshot schedule.
  ##   NumberOfNodes: JInt
  ##                : The number of nodes specified when provisioning the restored cluster.
  ##   ClusterParameterGroupName: JString
  ##                            : <p>The name of the parameter group to be associated with this cluster.</p> <p>Default: The default Amazon Redshift cluster parameter group. For information about the default parameter group, go to <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Working with Amazon Redshift Parameter Groups</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   KmsKeyId: JString
  ##           : The AWS Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the cluster that you restore from a shared snapshot.
  ##   SnapshotIdentifier: JString (required)
  ##                     : <p>The name of the snapshot from which to create the new cluster. This parameter isn't case sensitive.</p> <p>Example: <code>my-snapshot-id</code> </p>
  ##   ManualSnapshotRetentionPeriod: JInt
  ##                                : <p>The default number of days to retain a manual snapshot. If the value is -1, the snapshot is retained indefinitely. This setting doesn't change the retention period of existing snapshots.</p> <p>The value must be either -1 or an integer between 1 and 3,653.</p>
  ##   ElasticIp: JString
  ##            : The elastic IP (EIP) address for the cluster.
  ##   AllowVersionUpgrade: JBool
  ##                      : <p>If <code>true</code>, major version upgrades can be applied during the maintenance window to the Amazon Redshift engine that is running on the cluster. </p> <p>Default: <code>true</code> </p>
  ##   AutomatedSnapshotRetentionPeriod: JInt
  ##                                   : <p>The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with <a>CreateClusterSnapshot</a>. </p> <p>Default: The value selected for the cluster from which the snapshot was taken.</p> <p>Constraints: Must be a value from 0 to 35.</p>
  ##   NodeType: JString
  ##           : <p>The node type that the restored cluster will be provisioned with.</p> <p>Default: The node type of the cluster from which the snapshot was taken. You can modify this if you are using any DS node type. In that case, you can choose to restore into another DS node type of the same size. For example, you can restore ds1.8xlarge into ds2.8xlarge, or ds1.xlarge into ds2.xlarge. If you have a DC instance type, you must restore into that same instance type and size. In other words, you can only restore a dc1.large instance type into another dc1.large instance type or dc2.large instance type. You can't restore dc1.8xlarge to dc2.8xlarge. First restore to a dc1.8xlareg cluster, then resize to a dc2.8large cluster. For more information about node types, see <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#rs-about-clusters-and-nodes"> About Clusters and Nodes</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p>
  ##   MaintenanceTrackName: JString
  ##                       : The name of the maintenance track for the restored cluster. When you take a snapshot, the snapshot inherits the <code>MaintenanceTrack</code> value from the cluster. The snapshot might be on a different track than the cluster that was the source for the snapshot. For example, suppose that you take a snapshot of a cluster that is on the current track and then change the cluster to be on the trailing track. In this case, the snapshot and the source cluster are on different tracks.
  ##   ClusterSubnetGroupName: JString
  ##                         : <p>The name of the subnet group where you want to cluster restored.</p> <p>A snapshot of cluster in VPC can be restored only in VPC. Therefore, you must provide subnet group name where you want the cluster restored.</p>
  section = newJObject()
  var valid_21629227 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_21629227 = validateParameter(valid_21629227, JString, required = false,
                                   default = nil)
  if valid_21629227 != nil:
    section.add "PreferredMaintenanceWindow", valid_21629227
  var valid_21629228 = formData.getOrDefault("EnhancedVpcRouting")
  valid_21629228 = validateParameter(valid_21629228, JBool, required = false,
                                   default = nil)
  if valid_21629228 != nil:
    section.add "EnhancedVpcRouting", valid_21629228
  var valid_21629229 = formData.getOrDefault("Port")
  valid_21629229 = validateParameter(valid_21629229, JInt, required = false,
                                   default = nil)
  if valid_21629229 != nil:
    section.add "Port", valid_21629229
  var valid_21629230 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_21629230 = validateParameter(valid_21629230, JArray, required = false,
                                   default = nil)
  if valid_21629230 != nil:
    section.add "VpcSecurityGroupIds", valid_21629230
  var valid_21629231 = formData.getOrDefault("AdditionalInfo")
  valid_21629231 = validateParameter(valid_21629231, JString, required = false,
                                   default = nil)
  if valid_21629231 != nil:
    section.add "AdditionalInfo", valid_21629231
  var valid_21629232 = formData.getOrDefault("AvailabilityZone")
  valid_21629232 = validateParameter(valid_21629232, JString, required = false,
                                   default = nil)
  if valid_21629232 != nil:
    section.add "AvailabilityZone", valid_21629232
  var valid_21629233 = formData.getOrDefault("SnapshotClusterIdentifier")
  valid_21629233 = validateParameter(valid_21629233, JString, required = false,
                                   default = nil)
  if valid_21629233 != nil:
    section.add "SnapshotClusterIdentifier", valid_21629233
  var valid_21629234 = formData.getOrDefault("ClusterSecurityGroups")
  valid_21629234 = validateParameter(valid_21629234, JArray, required = false,
                                   default = nil)
  if valid_21629234 != nil:
    section.add "ClusterSecurityGroups", valid_21629234
  var valid_21629235 = formData.getOrDefault("HsmConfigurationIdentifier")
  valid_21629235 = validateParameter(valid_21629235, JString, required = false,
                                   default = nil)
  if valid_21629235 != nil:
    section.add "HsmConfigurationIdentifier", valid_21629235
  var valid_21629236 = formData.getOrDefault("OwnerAccount")
  valid_21629236 = validateParameter(valid_21629236, JString, required = false,
                                   default = nil)
  if valid_21629236 != nil:
    section.add "OwnerAccount", valid_21629236
  var valid_21629237 = formData.getOrDefault("HsmClientCertificateIdentifier")
  valid_21629237 = validateParameter(valid_21629237, JString, required = false,
                                   default = nil)
  if valid_21629237 != nil:
    section.add "HsmClientCertificateIdentifier", valid_21629237
  var valid_21629238 = formData.getOrDefault("PubliclyAccessible")
  valid_21629238 = validateParameter(valid_21629238, JBool, required = false,
                                   default = nil)
  if valid_21629238 != nil:
    section.add "PubliclyAccessible", valid_21629238
  assert formData != nil, "formData argument is necessary due to required `ClusterIdentifier` field"
  var valid_21629239 = formData.getOrDefault("ClusterIdentifier")
  valid_21629239 = validateParameter(valid_21629239, JString, required = true,
                                   default = nil)
  if valid_21629239 != nil:
    section.add "ClusterIdentifier", valid_21629239
  var valid_21629240 = formData.getOrDefault("IamRoles")
  valid_21629240 = validateParameter(valid_21629240, JArray, required = false,
                                   default = nil)
  if valid_21629240 != nil:
    section.add "IamRoles", valid_21629240
  var valid_21629241 = formData.getOrDefault("SnapshotScheduleIdentifier")
  valid_21629241 = validateParameter(valid_21629241, JString, required = false,
                                   default = nil)
  if valid_21629241 != nil:
    section.add "SnapshotScheduleIdentifier", valid_21629241
  var valid_21629242 = formData.getOrDefault("NumberOfNodes")
  valid_21629242 = validateParameter(valid_21629242, JInt, required = false,
                                   default = nil)
  if valid_21629242 != nil:
    section.add "NumberOfNodes", valid_21629242
  var valid_21629243 = formData.getOrDefault("ClusterParameterGroupName")
  valid_21629243 = validateParameter(valid_21629243, JString, required = false,
                                   default = nil)
  if valid_21629243 != nil:
    section.add "ClusterParameterGroupName", valid_21629243
  var valid_21629244 = formData.getOrDefault("KmsKeyId")
  valid_21629244 = validateParameter(valid_21629244, JString, required = false,
                                   default = nil)
  if valid_21629244 != nil:
    section.add "KmsKeyId", valid_21629244
  var valid_21629245 = formData.getOrDefault("SnapshotIdentifier")
  valid_21629245 = validateParameter(valid_21629245, JString, required = true,
                                   default = nil)
  if valid_21629245 != nil:
    section.add "SnapshotIdentifier", valid_21629245
  var valid_21629246 = formData.getOrDefault("ManualSnapshotRetentionPeriod")
  valid_21629246 = validateParameter(valid_21629246, JInt, required = false,
                                   default = nil)
  if valid_21629246 != nil:
    section.add "ManualSnapshotRetentionPeriod", valid_21629246
  var valid_21629247 = formData.getOrDefault("ElasticIp")
  valid_21629247 = validateParameter(valid_21629247, JString, required = false,
                                   default = nil)
  if valid_21629247 != nil:
    section.add "ElasticIp", valid_21629247
  var valid_21629248 = formData.getOrDefault("AllowVersionUpgrade")
  valid_21629248 = validateParameter(valid_21629248, JBool, required = false,
                                   default = nil)
  if valid_21629248 != nil:
    section.add "AllowVersionUpgrade", valid_21629248
  var valid_21629249 = formData.getOrDefault("AutomatedSnapshotRetentionPeriod")
  valid_21629249 = validateParameter(valid_21629249, JInt, required = false,
                                   default = nil)
  if valid_21629249 != nil:
    section.add "AutomatedSnapshotRetentionPeriod", valid_21629249
  var valid_21629250 = formData.getOrDefault("NodeType")
  valid_21629250 = validateParameter(valid_21629250, JString, required = false,
                                   default = nil)
  if valid_21629250 != nil:
    section.add "NodeType", valid_21629250
  var valid_21629251 = formData.getOrDefault("MaintenanceTrackName")
  valid_21629251 = validateParameter(valid_21629251, JString, required = false,
                                   default = nil)
  if valid_21629251 != nil:
    section.add "MaintenanceTrackName", valid_21629251
  var valid_21629252 = formData.getOrDefault("ClusterSubnetGroupName")
  valid_21629252 = validateParameter(valid_21629252, JString, required = false,
                                   default = nil)
  if valid_21629252 != nil:
    section.add "ClusterSubnetGroupName", valid_21629252
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629253: Call_PostRestoreFromClusterSnapshot_21629215;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new cluster from a snapshot. By default, Amazon Redshift creates the resulting cluster with the same configuration as the original cluster from which the snapshot was created, except that the new cluster is created with the default cluster security and parameter groups. After Amazon Redshift creates the cluster, you can use the <a>ModifyCluster</a> API to associate a different security group and different parameter group with the restored cluster. If you are using a DS node type, you can also choose to change to another DS node type of the same size during restore.</p> <p>If you restore a cluster into a VPC, you must provide a cluster subnet group where you want the cluster restored.</p> <p> For more information about working with snapshots, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  let valid = call_21629253.validator(path, query, header, formData, body, _)
  let scheme = call_21629253.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629253.makeUrl(scheme.get, call_21629253.host, call_21629253.base,
                               call_21629253.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629253, uri, valid, _)

proc call*(call_21629254: Call_PostRestoreFromClusterSnapshot_21629215;
          ClusterIdentifier: string; SnapshotIdentifier: string;
          PreferredMaintenanceWindow: string = ""; EnhancedVpcRouting: bool = false;
          Port: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          AdditionalInfo: string = ""; AvailabilityZone: string = "";
          SnapshotClusterIdentifier: string = "";
          ClusterSecurityGroups: JsonNode = nil;
          HsmConfigurationIdentifier: string = "";
          Action: string = "RestoreFromClusterSnapshot"; OwnerAccount: string = "";
          HsmClientCertificateIdentifier: string = "";
          PubliclyAccessible: bool = false; IamRoles: JsonNode = nil;
          SnapshotScheduleIdentifier: string = ""; NumberOfNodes: int = 0;
          ClusterParameterGroupName: string = ""; KmsKeyId: string = "";
          ManualSnapshotRetentionPeriod: int = 0; ElasticIp: string = "";
          AllowVersionUpgrade: bool = false;
          AutomatedSnapshotRetentionPeriod: int = 0; Version: string = "2012-12-01";
          NodeType: string = ""; MaintenanceTrackName: string = "";
          ClusterSubnetGroupName: string = ""): Recallable =
  ## postRestoreFromClusterSnapshot
  ## <p>Creates a new cluster from a snapshot. By default, Amazon Redshift creates the resulting cluster with the same configuration as the original cluster from which the snapshot was created, except that the new cluster is created with the default cluster security and parameter groups. After Amazon Redshift creates the cluster, you can use the <a>ModifyCluster</a> API to associate a different security group and different parameter group with the restored cluster. If you are using a DS node type, you can also choose to change to another DS node type of the same size during restore.</p> <p>If you restore a cluster into a VPC, you must provide a cluster subnet group where you want the cluster restored.</p> <p> For more information about working with snapshots, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range (in UTC) during which automated cluster maintenance can occur.</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p> Default: The value selected for the cluster from which the snapshot was taken. For more information about the time blocks for each region, see <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#rs-maintenance-windows">Maintenance Windows</a> in Amazon Redshift Cluster Management Guide. </p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   EnhancedVpcRouting: bool
  ##                     : <p>An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html">Enhanced VPC Routing</a> in the Amazon Redshift Cluster Management Guide.</p> <p>If this option is <code>true</code>, enhanced VPC routing is enabled. </p> <p>Default: false</p>
  ##   Port: int
  ##       : <p>The port number on which the cluster accepts connections.</p> <p>Default: The same port as the original cluster.</p> <p>Constraints: Must be between <code>1115</code> and <code>65535</code>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Virtual Private Cloud (VPC) security groups to be associated with the cluster.</p> <p>Default: The default VPC security group is associated with the cluster.</p> <p>VPC security groups only apply to clusters in VPCs.</p>
  ##   AdditionalInfo: string
  ##                 : Reserved.
  ##   AvailabilityZone: string
  ##                   : <p>The Amazon EC2 Availability Zone in which to restore the cluster.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Example: <code>us-east-2a</code> </p>
  ##   SnapshotClusterIdentifier: string
  ##                            : The name of the cluster the source snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.
  ##   ClusterSecurityGroups: JArray
  ##                        : <p>A list of security groups to be associated with this cluster.</p> <p>Default: The default cluster security group for Amazon Redshift.</p> <p>Cluster security groups only apply to clusters outside of VPCs.</p>
  ##   HsmConfigurationIdentifier: string
  ##                             : Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
  ##   Action: string (required)
  ##   OwnerAccount: string
  ##               : The AWS customer account used to create or copy the snapshot. Required if you are restoring a snapshot you do not own, optional if you own the snapshot.
  ##   HsmClientCertificateIdentifier: string
  ##                                 : Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
  ##   PubliclyAccessible: bool
  ##                     : If <code>true</code>, the cluster can be accessed from a public network. 
  ##   ClusterIdentifier: string (required)
  ##                    : <p>The identifier of the cluster that will be created from restoring the snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>Alphabetic characters must be lowercase.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Must be unique for all clusters within an AWS account.</p> </li> </ul>
  ##   IamRoles: JArray
  ##           : <p>A list of AWS Identity and Access Management (IAM) roles that can be used by the cluster to access other AWS services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. You can supply up to 10 IAM roles in a single request.</p> <p>A cluster can have up to 10 IAM roles associated at any time.</p>
  ##   SnapshotScheduleIdentifier: string
  ##                             : A unique identifier for the snapshot schedule.
  ##   NumberOfNodes: int
  ##                : The number of nodes specified when provisioning the restored cluster.
  ##   ClusterParameterGroupName: string
  ##                            : <p>The name of the parameter group to be associated with this cluster.</p> <p>Default: The default Amazon Redshift cluster parameter group. For information about the default parameter group, go to <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Working with Amazon Redshift Parameter Groups</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   KmsKeyId: string
  ##           : The AWS Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the cluster that you restore from a shared snapshot.
  ##   SnapshotIdentifier: string (required)
  ##                     : <p>The name of the snapshot from which to create the new cluster. This parameter isn't case sensitive.</p> <p>Example: <code>my-snapshot-id</code> </p>
  ##   ManualSnapshotRetentionPeriod: int
  ##                                : <p>The default number of days to retain a manual snapshot. If the value is -1, the snapshot is retained indefinitely. This setting doesn't change the retention period of existing snapshots.</p> <p>The value must be either -1 or an integer between 1 and 3,653.</p>
  ##   ElasticIp: string
  ##            : The elastic IP (EIP) address for the cluster.
  ##   AllowVersionUpgrade: bool
  ##                      : <p>If <code>true</code>, major version upgrades can be applied during the maintenance window to the Amazon Redshift engine that is running on the cluster. </p> <p>Default: <code>true</code> </p>
  ##   AutomatedSnapshotRetentionPeriod: int
  ##                                   : <p>The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with <a>CreateClusterSnapshot</a>. </p> <p>Default: The value selected for the cluster from which the snapshot was taken.</p> <p>Constraints: Must be a value from 0 to 35.</p>
  ##   Version: string (required)
  ##   NodeType: string
  ##           : <p>The node type that the restored cluster will be provisioned with.</p> <p>Default: The node type of the cluster from which the snapshot was taken. You can modify this if you are using any DS node type. In that case, you can choose to restore into another DS node type of the same size. For example, you can restore ds1.8xlarge into ds2.8xlarge, or ds1.xlarge into ds2.xlarge. If you have a DC instance type, you must restore into that same instance type and size. In other words, you can only restore a dc1.large instance type into another dc1.large instance type or dc2.large instance type. You can't restore dc1.8xlarge to dc2.8xlarge. First restore to a dc1.8xlareg cluster, then resize to a dc2.8large cluster. For more information about node types, see <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#rs-about-clusters-and-nodes"> About Clusters and Nodes</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p>
  ##   MaintenanceTrackName: string
  ##                       : The name of the maintenance track for the restored cluster. When you take a snapshot, the snapshot inherits the <code>MaintenanceTrack</code> value from the cluster. The snapshot might be on a different track than the cluster that was the source for the snapshot. For example, suppose that you take a snapshot of a cluster that is on the current track and then change the cluster to be on the trailing track. In this case, the snapshot and the source cluster are on different tracks.
  ##   ClusterSubnetGroupName: string
  ##                         : <p>The name of the subnet group where you want to cluster restored.</p> <p>A snapshot of cluster in VPC can be restored only in VPC. Therefore, you must provide subnet group name where you want the cluster restored.</p>
  var query_21629255 = newJObject()
  var formData_21629256 = newJObject()
  add(formData_21629256, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_21629256, "EnhancedVpcRouting", newJBool(EnhancedVpcRouting))
  add(formData_21629256, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    formData_21629256.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_21629256, "AdditionalInfo", newJString(AdditionalInfo))
  add(formData_21629256, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_21629256, "SnapshotClusterIdentifier",
      newJString(SnapshotClusterIdentifier))
  if ClusterSecurityGroups != nil:
    formData_21629256.add "ClusterSecurityGroups", ClusterSecurityGroups
  add(formData_21629256, "HsmConfigurationIdentifier",
      newJString(HsmConfigurationIdentifier))
  add(query_21629255, "Action", newJString(Action))
  add(formData_21629256, "OwnerAccount", newJString(OwnerAccount))
  add(formData_21629256, "HsmClientCertificateIdentifier",
      newJString(HsmClientCertificateIdentifier))
  add(formData_21629256, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_21629256, "ClusterIdentifier", newJString(ClusterIdentifier))
  if IamRoles != nil:
    formData_21629256.add "IamRoles", IamRoles
  add(formData_21629256, "SnapshotScheduleIdentifier",
      newJString(SnapshotScheduleIdentifier))
  add(formData_21629256, "NumberOfNodes", newJInt(NumberOfNodes))
  add(formData_21629256, "ClusterParameterGroupName",
      newJString(ClusterParameterGroupName))
  add(formData_21629256, "KmsKeyId", newJString(KmsKeyId))
  add(formData_21629256, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  add(formData_21629256, "ManualSnapshotRetentionPeriod",
      newJInt(ManualSnapshotRetentionPeriod))
  add(formData_21629256, "ElasticIp", newJString(ElasticIp))
  add(formData_21629256, "AllowVersionUpgrade", newJBool(AllowVersionUpgrade))
  add(formData_21629256, "AutomatedSnapshotRetentionPeriod",
      newJInt(AutomatedSnapshotRetentionPeriod))
  add(query_21629255, "Version", newJString(Version))
  add(formData_21629256, "NodeType", newJString(NodeType))
  add(formData_21629256, "MaintenanceTrackName", newJString(MaintenanceTrackName))
  add(formData_21629256, "ClusterSubnetGroupName",
      newJString(ClusterSubnetGroupName))
  result = call_21629254.call(nil, query_21629255, nil, formData_21629256, nil)

var postRestoreFromClusterSnapshot* = Call_PostRestoreFromClusterSnapshot_21629215(
    name: "postRestoreFromClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=RestoreFromClusterSnapshot",
    validator: validate_PostRestoreFromClusterSnapshot_21629216, base: "/",
    makeUrl: url_PostRestoreFromClusterSnapshot_21629217,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreFromClusterSnapshot_21629174 = ref object of OpenApiRestCall_21625418
proc url_GetRestoreFromClusterSnapshot_21629176(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreFromClusterSnapshot_21629175(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Creates a new cluster from a snapshot. By default, Amazon Redshift creates the resulting cluster with the same configuration as the original cluster from which the snapshot was created, except that the new cluster is created with the default cluster security and parameter groups. After Amazon Redshift creates the cluster, you can use the <a>ModifyCluster</a> API to associate a different security group and different parameter group with the restored cluster. If you are using a DS node type, you can also choose to change to another DS node type of the same size during restore.</p> <p>If you restore a cluster into a VPC, you must provide a cluster subnet group where you want the cluster restored.</p> <p> For more information about working with snapshots, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ClusterSecurityGroups: JArray
  ##                        : <p>A list of security groups to be associated with this cluster.</p> <p>Default: The default cluster security group for Amazon Redshift.</p> <p>Cluster security groups only apply to clusters outside of VPCs.</p>
  ##   ClusterSubnetGroupName: JString
  ##                         : <p>The name of the subnet group where you want to cluster restored.</p> <p>A snapshot of cluster in VPC can be restored only in VPC. Therefore, you must provide subnet group name where you want the cluster restored.</p>
  ##   HsmClientCertificateIdentifier: JString
  ##                                 : Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range (in UTC) during which automated cluster maintenance can occur.</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p> Default: The value selected for the cluster from which the snapshot was taken. For more information about the time blocks for each region, see <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#rs-maintenance-windows">Maintenance Windows</a> in Amazon Redshift Cluster Management Guide. </p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   MaintenanceTrackName: JString
  ##                       : The name of the maintenance track for the restored cluster. When you take a snapshot, the snapshot inherits the <code>MaintenanceTrack</code> value from the cluster. The snapshot might be on a different track than the cluster that was the source for the snapshot. For example, suppose that you take a snapshot of a cluster that is on the current track and then change the cluster to be on the trailing track. In this case, the snapshot and the source cluster are on different tracks.
  ##   IamRoles: JArray
  ##           : <p>A list of AWS Identity and Access Management (IAM) roles that can be used by the cluster to access other AWS services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. You can supply up to 10 IAM roles in a single request.</p> <p>A cluster can have up to 10 IAM roles associated at any time.</p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Amazon EC2 Availability Zone in which to restore the cluster.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Example: <code>us-east-2a</code> </p>
  ##   AllowVersionUpgrade: JBool
  ##                      : <p>If <code>true</code>, major version upgrades can be applied during the maintenance window to the Amazon Redshift engine that is running on the cluster. </p> <p>Default: <code>true</code> </p>
  ##   EnhancedVpcRouting: JBool
  ##                     : <p>An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html">Enhanced VPC Routing</a> in the Amazon Redshift Cluster Management Guide.</p> <p>If this option is <code>true</code>, enhanced VPC routing is enabled. </p> <p>Default: false</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Virtual Private Cloud (VPC) security groups to be associated with the cluster.</p> <p>Default: The default VPC security group is associated with the cluster.</p> <p>VPC security groups only apply to clusters in VPCs.</p>
  ##   ClusterParameterGroupName: JString
  ##                            : <p>The name of the parameter group to be associated with this cluster.</p> <p>Default: The default Amazon Redshift cluster parameter group. For information about the default parameter group, go to <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Working with Amazon Redshift Parameter Groups</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   HsmConfigurationIdentifier: JString
  ##                             : Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
  ##   SnapshotScheduleIdentifier: JString
  ##                             : A unique identifier for the snapshot schedule.
  ##   AdditionalInfo: JString
  ##                 : Reserved.
  ##   ElasticIp: JString
  ##            : The elastic IP (EIP) address for the cluster.
  ##   ClusterIdentifier: JString (required)
  ##                    : <p>The identifier of the cluster that will be created from restoring the snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>Alphabetic characters must be lowercase.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Must be unique for all clusters within an AWS account.</p> </li> </ul>
  ##   OwnerAccount: JString
  ##               : The AWS customer account used to create or copy the snapshot. Required if you are restoring a snapshot you do not own, optional if you own the snapshot.
  ##   Action: JString (required)
  ##   KmsKeyId: JString
  ##           : The AWS Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the cluster that you restore from a shared snapshot.
  ##   PubliclyAccessible: JBool
  ##                     : If <code>true</code>, the cluster can be accessed from a public network. 
  ##   SnapshotClusterIdentifier: JString
  ##                            : The name of the cluster the source snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.
  ##   Port: JInt
  ##       : <p>The port number on which the cluster accepts connections.</p> <p>Default: The same port as the original cluster.</p> <p>Constraints: Must be between <code>1115</code> and <code>65535</code>.</p>
  ##   NumberOfNodes: JInt
  ##                : The number of nodes specified when provisioning the restored cluster.
  ##   SnapshotIdentifier: JString (required)
  ##                     : <p>The name of the snapshot from which to create the new cluster. This parameter isn't case sensitive.</p> <p>Example: <code>my-snapshot-id</code> </p>
  ##   AutomatedSnapshotRetentionPeriod: JInt
  ##                                   : <p>The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with <a>CreateClusterSnapshot</a>. </p> <p>Default: The value selected for the cluster from which the snapshot was taken.</p> <p>Constraints: Must be a value from 0 to 35.</p>
  ##   NodeType: JString
  ##           : <p>The node type that the restored cluster will be provisioned with.</p> <p>Default: The node type of the cluster from which the snapshot was taken. You can modify this if you are using any DS node type. In that case, you can choose to restore into another DS node type of the same size. For example, you can restore ds1.8xlarge into ds2.8xlarge, or ds1.xlarge into ds2.xlarge. If you have a DC instance type, you must restore into that same instance type and size. In other words, you can only restore a dc1.large instance type into another dc1.large instance type or dc2.large instance type. You can't restore dc1.8xlarge to dc2.8xlarge. First restore to a dc1.8xlareg cluster, then resize to a dc2.8large cluster. For more information about node types, see <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#rs-about-clusters-and-nodes"> About Clusters and Nodes</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p>
  ##   Version: JString (required)
  ##   ManualSnapshotRetentionPeriod: JInt
  ##                                : <p>The default number of days to retain a manual snapshot. If the value is -1, the snapshot is retained indefinitely. This setting doesn't change the retention period of existing snapshots.</p> <p>The value must be either -1 or an integer between 1 and 3,653.</p>
  section = newJObject()
  var valid_21629177 = query.getOrDefault("ClusterSecurityGroups")
  valid_21629177 = validateParameter(valid_21629177, JArray, required = false,
                                   default = nil)
  if valid_21629177 != nil:
    section.add "ClusterSecurityGroups", valid_21629177
  var valid_21629178 = query.getOrDefault("ClusterSubnetGroupName")
  valid_21629178 = validateParameter(valid_21629178, JString, required = false,
                                   default = nil)
  if valid_21629178 != nil:
    section.add "ClusterSubnetGroupName", valid_21629178
  var valid_21629179 = query.getOrDefault("HsmClientCertificateIdentifier")
  valid_21629179 = validateParameter(valid_21629179, JString, required = false,
                                   default = nil)
  if valid_21629179 != nil:
    section.add "HsmClientCertificateIdentifier", valid_21629179
  var valid_21629180 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_21629180 = validateParameter(valid_21629180, JString, required = false,
                                   default = nil)
  if valid_21629180 != nil:
    section.add "PreferredMaintenanceWindow", valid_21629180
  var valid_21629181 = query.getOrDefault("MaintenanceTrackName")
  valid_21629181 = validateParameter(valid_21629181, JString, required = false,
                                   default = nil)
  if valid_21629181 != nil:
    section.add "MaintenanceTrackName", valid_21629181
  var valid_21629182 = query.getOrDefault("IamRoles")
  valid_21629182 = validateParameter(valid_21629182, JArray, required = false,
                                   default = nil)
  if valid_21629182 != nil:
    section.add "IamRoles", valid_21629182
  var valid_21629183 = query.getOrDefault("AvailabilityZone")
  valid_21629183 = validateParameter(valid_21629183, JString, required = false,
                                   default = nil)
  if valid_21629183 != nil:
    section.add "AvailabilityZone", valid_21629183
  var valid_21629184 = query.getOrDefault("AllowVersionUpgrade")
  valid_21629184 = validateParameter(valid_21629184, JBool, required = false,
                                   default = nil)
  if valid_21629184 != nil:
    section.add "AllowVersionUpgrade", valid_21629184
  var valid_21629185 = query.getOrDefault("EnhancedVpcRouting")
  valid_21629185 = validateParameter(valid_21629185, JBool, required = false,
                                   default = nil)
  if valid_21629185 != nil:
    section.add "EnhancedVpcRouting", valid_21629185
  var valid_21629186 = query.getOrDefault("VpcSecurityGroupIds")
  valid_21629186 = validateParameter(valid_21629186, JArray, required = false,
                                   default = nil)
  if valid_21629186 != nil:
    section.add "VpcSecurityGroupIds", valid_21629186
  var valid_21629187 = query.getOrDefault("ClusterParameterGroupName")
  valid_21629187 = validateParameter(valid_21629187, JString, required = false,
                                   default = nil)
  if valid_21629187 != nil:
    section.add "ClusterParameterGroupName", valid_21629187
  var valid_21629188 = query.getOrDefault("HsmConfigurationIdentifier")
  valid_21629188 = validateParameter(valid_21629188, JString, required = false,
                                   default = nil)
  if valid_21629188 != nil:
    section.add "HsmConfigurationIdentifier", valid_21629188
  var valid_21629189 = query.getOrDefault("SnapshotScheduleIdentifier")
  valid_21629189 = validateParameter(valid_21629189, JString, required = false,
                                   default = nil)
  if valid_21629189 != nil:
    section.add "SnapshotScheduleIdentifier", valid_21629189
  var valid_21629190 = query.getOrDefault("AdditionalInfo")
  valid_21629190 = validateParameter(valid_21629190, JString, required = false,
                                   default = nil)
  if valid_21629190 != nil:
    section.add "AdditionalInfo", valid_21629190
  var valid_21629191 = query.getOrDefault("ElasticIp")
  valid_21629191 = validateParameter(valid_21629191, JString, required = false,
                                   default = nil)
  if valid_21629191 != nil:
    section.add "ElasticIp", valid_21629191
  assert query != nil,
        "query argument is necessary due to required `ClusterIdentifier` field"
  var valid_21629192 = query.getOrDefault("ClusterIdentifier")
  valid_21629192 = validateParameter(valid_21629192, JString, required = true,
                                   default = nil)
  if valid_21629192 != nil:
    section.add "ClusterIdentifier", valid_21629192
  var valid_21629193 = query.getOrDefault("OwnerAccount")
  valid_21629193 = validateParameter(valid_21629193, JString, required = false,
                                   default = nil)
  if valid_21629193 != nil:
    section.add "OwnerAccount", valid_21629193
  var valid_21629194 = query.getOrDefault("Action")
  valid_21629194 = validateParameter(valid_21629194, JString, required = true, default = newJString(
      "RestoreFromClusterSnapshot"))
  if valid_21629194 != nil:
    section.add "Action", valid_21629194
  var valid_21629195 = query.getOrDefault("KmsKeyId")
  valid_21629195 = validateParameter(valid_21629195, JString, required = false,
                                   default = nil)
  if valid_21629195 != nil:
    section.add "KmsKeyId", valid_21629195
  var valid_21629196 = query.getOrDefault("PubliclyAccessible")
  valid_21629196 = validateParameter(valid_21629196, JBool, required = false,
                                   default = nil)
  if valid_21629196 != nil:
    section.add "PubliclyAccessible", valid_21629196
  var valid_21629197 = query.getOrDefault("SnapshotClusterIdentifier")
  valid_21629197 = validateParameter(valid_21629197, JString, required = false,
                                   default = nil)
  if valid_21629197 != nil:
    section.add "SnapshotClusterIdentifier", valid_21629197
  var valid_21629198 = query.getOrDefault("Port")
  valid_21629198 = validateParameter(valid_21629198, JInt, required = false,
                                   default = nil)
  if valid_21629198 != nil:
    section.add "Port", valid_21629198
  var valid_21629199 = query.getOrDefault("NumberOfNodes")
  valid_21629199 = validateParameter(valid_21629199, JInt, required = false,
                                   default = nil)
  if valid_21629199 != nil:
    section.add "NumberOfNodes", valid_21629199
  var valid_21629200 = query.getOrDefault("SnapshotIdentifier")
  valid_21629200 = validateParameter(valid_21629200, JString, required = true,
                                   default = nil)
  if valid_21629200 != nil:
    section.add "SnapshotIdentifier", valid_21629200
  var valid_21629201 = query.getOrDefault("AutomatedSnapshotRetentionPeriod")
  valid_21629201 = validateParameter(valid_21629201, JInt, required = false,
                                   default = nil)
  if valid_21629201 != nil:
    section.add "AutomatedSnapshotRetentionPeriod", valid_21629201
  var valid_21629202 = query.getOrDefault("NodeType")
  valid_21629202 = validateParameter(valid_21629202, JString, required = false,
                                   default = nil)
  if valid_21629202 != nil:
    section.add "NodeType", valid_21629202
  var valid_21629203 = query.getOrDefault("Version")
  valid_21629203 = validateParameter(valid_21629203, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21629203 != nil:
    section.add "Version", valid_21629203
  var valid_21629204 = query.getOrDefault("ManualSnapshotRetentionPeriod")
  valid_21629204 = validateParameter(valid_21629204, JInt, required = false,
                                   default = nil)
  if valid_21629204 != nil:
    section.add "ManualSnapshotRetentionPeriod", valid_21629204
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629205 = header.getOrDefault("X-Amz-Date")
  valid_21629205 = validateParameter(valid_21629205, JString, required = false,
                                   default = nil)
  if valid_21629205 != nil:
    section.add "X-Amz-Date", valid_21629205
  var valid_21629206 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629206 = validateParameter(valid_21629206, JString, required = false,
                                   default = nil)
  if valid_21629206 != nil:
    section.add "X-Amz-Security-Token", valid_21629206
  var valid_21629207 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629207 = validateParameter(valid_21629207, JString, required = false,
                                   default = nil)
  if valid_21629207 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629207
  var valid_21629208 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629208 = validateParameter(valid_21629208, JString, required = false,
                                   default = nil)
  if valid_21629208 != nil:
    section.add "X-Amz-Algorithm", valid_21629208
  var valid_21629209 = header.getOrDefault("X-Amz-Signature")
  valid_21629209 = validateParameter(valid_21629209, JString, required = false,
                                   default = nil)
  if valid_21629209 != nil:
    section.add "X-Amz-Signature", valid_21629209
  var valid_21629210 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629210 = validateParameter(valid_21629210, JString, required = false,
                                   default = nil)
  if valid_21629210 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629210
  var valid_21629211 = header.getOrDefault("X-Amz-Credential")
  valid_21629211 = validateParameter(valid_21629211, JString, required = false,
                                   default = nil)
  if valid_21629211 != nil:
    section.add "X-Amz-Credential", valid_21629211
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629212: Call_GetRestoreFromClusterSnapshot_21629174;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new cluster from a snapshot. By default, Amazon Redshift creates the resulting cluster with the same configuration as the original cluster from which the snapshot was created, except that the new cluster is created with the default cluster security and parameter groups. After Amazon Redshift creates the cluster, you can use the <a>ModifyCluster</a> API to associate a different security group and different parameter group with the restored cluster. If you are using a DS node type, you can also choose to change to another DS node type of the same size during restore.</p> <p>If you restore a cluster into a VPC, you must provide a cluster subnet group where you want the cluster restored.</p> <p> For more information about working with snapshots, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  let valid = call_21629212.validator(path, query, header, formData, body, _)
  let scheme = call_21629212.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629212.makeUrl(scheme.get, call_21629212.host, call_21629212.base,
                               call_21629212.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629212, uri, valid, _)

proc call*(call_21629213: Call_GetRestoreFromClusterSnapshot_21629174;
          ClusterIdentifier: string; SnapshotIdentifier: string;
          ClusterSecurityGroups: JsonNode = nil;
          ClusterSubnetGroupName: string = "";
          HsmClientCertificateIdentifier: string = "";
          PreferredMaintenanceWindow: string = "";
          MaintenanceTrackName: string = ""; IamRoles: JsonNode = nil;
          AvailabilityZone: string = ""; AllowVersionUpgrade: bool = false;
          EnhancedVpcRouting: bool = false; VpcSecurityGroupIds: JsonNode = nil;
          ClusterParameterGroupName: string = "";
          HsmConfigurationIdentifier: string = "";
          SnapshotScheduleIdentifier: string = ""; AdditionalInfo: string = "";
          ElasticIp: string = ""; OwnerAccount: string = "";
          Action: string = "RestoreFromClusterSnapshot"; KmsKeyId: string = "";
          PubliclyAccessible: bool = false; SnapshotClusterIdentifier: string = "";
          Port: int = 0; NumberOfNodes: int = 0;
          AutomatedSnapshotRetentionPeriod: int = 0; NodeType: string = "";
          Version: string = "2012-12-01"; ManualSnapshotRetentionPeriod: int = 0): Recallable =
  ## getRestoreFromClusterSnapshot
  ## <p>Creates a new cluster from a snapshot. By default, Amazon Redshift creates the resulting cluster with the same configuration as the original cluster from which the snapshot was created, except that the new cluster is created with the default cluster security and parameter groups. After Amazon Redshift creates the cluster, you can use the <a>ModifyCluster</a> API to associate a different security group and different parameter group with the restored cluster. If you are using a DS node type, you can also choose to change to another DS node type of the same size during restore.</p> <p>If you restore a cluster into a VPC, you must provide a cluster subnet group where you want the cluster restored.</p> <p> For more information about working with snapshots, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ##   ClusterSecurityGroups: JArray
  ##                        : <p>A list of security groups to be associated with this cluster.</p> <p>Default: The default cluster security group for Amazon Redshift.</p> <p>Cluster security groups only apply to clusters outside of VPCs.</p>
  ##   ClusterSubnetGroupName: string
  ##                         : <p>The name of the subnet group where you want to cluster restored.</p> <p>A snapshot of cluster in VPC can be restored only in VPC. Therefore, you must provide subnet group name where you want the cluster restored.</p>
  ##   HsmClientCertificateIdentifier: string
  ##                                 : Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range (in UTC) during which automated cluster maintenance can occur.</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p> Default: The value selected for the cluster from which the snapshot was taken. For more information about the time blocks for each region, see <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#rs-maintenance-windows">Maintenance Windows</a> in Amazon Redshift Cluster Management Guide. </p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   MaintenanceTrackName: string
  ##                       : The name of the maintenance track for the restored cluster. When you take a snapshot, the snapshot inherits the <code>MaintenanceTrack</code> value from the cluster. The snapshot might be on a different track than the cluster that was the source for the snapshot. For example, suppose that you take a snapshot of a cluster that is on the current track and then change the cluster to be on the trailing track. In this case, the snapshot and the source cluster are on different tracks.
  ##   IamRoles: JArray
  ##           : <p>A list of AWS Identity and Access Management (IAM) roles that can be used by the cluster to access other AWS services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. You can supply up to 10 IAM roles in a single request.</p> <p>A cluster can have up to 10 IAM roles associated at any time.</p>
  ##   AvailabilityZone: string
  ##                   : <p>The Amazon EC2 Availability Zone in which to restore the cluster.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Example: <code>us-east-2a</code> </p>
  ##   AllowVersionUpgrade: bool
  ##                      : <p>If <code>true</code>, major version upgrades can be applied during the maintenance window to the Amazon Redshift engine that is running on the cluster. </p> <p>Default: <code>true</code> </p>
  ##   EnhancedVpcRouting: bool
  ##                     : <p>An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html">Enhanced VPC Routing</a> in the Amazon Redshift Cluster Management Guide.</p> <p>If this option is <code>true</code>, enhanced VPC routing is enabled. </p> <p>Default: false</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Virtual Private Cloud (VPC) security groups to be associated with the cluster.</p> <p>Default: The default VPC security group is associated with the cluster.</p> <p>VPC security groups only apply to clusters in VPCs.</p>
  ##   ClusterParameterGroupName: string
  ##                            : <p>The name of the parameter group to be associated with this cluster.</p> <p>Default: The default Amazon Redshift cluster parameter group. For information about the default parameter group, go to <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Working with Amazon Redshift Parameter Groups</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   HsmConfigurationIdentifier: string
  ##                             : Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
  ##   SnapshotScheduleIdentifier: string
  ##                             : A unique identifier for the snapshot schedule.
  ##   AdditionalInfo: string
  ##                 : Reserved.
  ##   ElasticIp: string
  ##            : The elastic IP (EIP) address for the cluster.
  ##   ClusterIdentifier: string (required)
  ##                    : <p>The identifier of the cluster that will be created from restoring the snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>Alphabetic characters must be lowercase.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Must be unique for all clusters within an AWS account.</p> </li> </ul>
  ##   OwnerAccount: string
  ##               : The AWS customer account used to create or copy the snapshot. Required if you are restoring a snapshot you do not own, optional if you own the snapshot.
  ##   Action: string (required)
  ##   KmsKeyId: string
  ##           : The AWS Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the cluster that you restore from a shared snapshot.
  ##   PubliclyAccessible: bool
  ##                     : If <code>true</code>, the cluster can be accessed from a public network. 
  ##   SnapshotClusterIdentifier: string
  ##                            : The name of the cluster the source snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.
  ##   Port: int
  ##       : <p>The port number on which the cluster accepts connections.</p> <p>Default: The same port as the original cluster.</p> <p>Constraints: Must be between <code>1115</code> and <code>65535</code>.</p>
  ##   NumberOfNodes: int
  ##                : The number of nodes specified when provisioning the restored cluster.
  ##   SnapshotIdentifier: string (required)
  ##                     : <p>The name of the snapshot from which to create the new cluster. This parameter isn't case sensitive.</p> <p>Example: <code>my-snapshot-id</code> </p>
  ##   AutomatedSnapshotRetentionPeriod: int
  ##                                   : <p>The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with <a>CreateClusterSnapshot</a>. </p> <p>Default: The value selected for the cluster from which the snapshot was taken.</p> <p>Constraints: Must be a value from 0 to 35.</p>
  ##   NodeType: string
  ##           : <p>The node type that the restored cluster will be provisioned with.</p> <p>Default: The node type of the cluster from which the snapshot was taken. You can modify this if you are using any DS node type. In that case, you can choose to restore into another DS node type of the same size. For example, you can restore ds1.8xlarge into ds2.8xlarge, or ds1.xlarge into ds2.xlarge. If you have a DC instance type, you must restore into that same instance type and size. In other words, you can only restore a dc1.large instance type into another dc1.large instance type or dc2.large instance type. You can't restore dc1.8xlarge to dc2.8xlarge. First restore to a dc1.8xlareg cluster, then resize to a dc2.8large cluster. For more information about node types, see <a 
  ## href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#rs-about-clusters-and-nodes"> About Clusters and Nodes</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p>
  ##   Version: string (required)
  ##   ManualSnapshotRetentionPeriod: int
  ##                                : <p>The default number of days to retain a manual snapshot. If the value is -1, the snapshot is retained indefinitely. This setting doesn't change the retention period of existing snapshots.</p> <p>The value must be either -1 or an integer between 1 and 3,653.</p>
  var query_21629214 = newJObject()
  if ClusterSecurityGroups != nil:
    query_21629214.add "ClusterSecurityGroups", ClusterSecurityGroups
  add(query_21629214, "ClusterSubnetGroupName", newJString(ClusterSubnetGroupName))
  add(query_21629214, "HsmClientCertificateIdentifier",
      newJString(HsmClientCertificateIdentifier))
  add(query_21629214, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_21629214, "MaintenanceTrackName", newJString(MaintenanceTrackName))
  if IamRoles != nil:
    query_21629214.add "IamRoles", IamRoles
  add(query_21629214, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_21629214, "AllowVersionUpgrade", newJBool(AllowVersionUpgrade))
  add(query_21629214, "EnhancedVpcRouting", newJBool(EnhancedVpcRouting))
  if VpcSecurityGroupIds != nil:
    query_21629214.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_21629214, "ClusterParameterGroupName",
      newJString(ClusterParameterGroupName))
  add(query_21629214, "HsmConfigurationIdentifier",
      newJString(HsmConfigurationIdentifier))
  add(query_21629214, "SnapshotScheduleIdentifier",
      newJString(SnapshotScheduleIdentifier))
  add(query_21629214, "AdditionalInfo", newJString(AdditionalInfo))
  add(query_21629214, "ElasticIp", newJString(ElasticIp))
  add(query_21629214, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(query_21629214, "OwnerAccount", newJString(OwnerAccount))
  add(query_21629214, "Action", newJString(Action))
  add(query_21629214, "KmsKeyId", newJString(KmsKeyId))
  add(query_21629214, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_21629214, "SnapshotClusterIdentifier",
      newJString(SnapshotClusterIdentifier))
  add(query_21629214, "Port", newJInt(Port))
  add(query_21629214, "NumberOfNodes", newJInt(NumberOfNodes))
  add(query_21629214, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  add(query_21629214, "AutomatedSnapshotRetentionPeriod",
      newJInt(AutomatedSnapshotRetentionPeriod))
  add(query_21629214, "NodeType", newJString(NodeType))
  add(query_21629214, "Version", newJString(Version))
  add(query_21629214, "ManualSnapshotRetentionPeriod",
      newJInt(ManualSnapshotRetentionPeriod))
  result = call_21629213.call(nil, query_21629214, nil, nil, nil)

var getRestoreFromClusterSnapshot* = Call_GetRestoreFromClusterSnapshot_21629174(
    name: "getRestoreFromClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=RestoreFromClusterSnapshot",
    validator: validate_GetRestoreFromClusterSnapshot_21629175, base: "/",
    makeUrl: url_GetRestoreFromClusterSnapshot_21629176,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreTableFromClusterSnapshot_21629280 = ref object of OpenApiRestCall_21625418
proc url_PostRestoreTableFromClusterSnapshot_21629282(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreTableFromClusterSnapshot_21629281(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Creates a new table from a table in an Amazon Redshift cluster snapshot. You must create the new table within the Amazon Redshift cluster that the snapshot was taken from.</p> <p>You cannot use <code>RestoreTableFromClusterSnapshot</code> to restore a table with the same name as an existing table in an Amazon Redshift cluster. That is, you cannot overwrite an existing table in a cluster with a restored table. If you want to replace your original table with a new, restored table, then rename or drop your original table before you call <code>RestoreTableFromClusterSnapshot</code>. When you have renamed your original table, then you can pass the original name of the table as the <code>NewTableName</code> parameter value in the call to <code>RestoreTableFromClusterSnapshot</code>. This way, you can replace the original table with the table created from the snapshot.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629283 = query.getOrDefault("Action")
  valid_21629283 = validateParameter(valid_21629283, JString, required = true, default = newJString(
      "RestoreTableFromClusterSnapshot"))
  if valid_21629283 != nil:
    section.add "Action", valid_21629283
  var valid_21629284 = query.getOrDefault("Version")
  valid_21629284 = validateParameter(valid_21629284, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21629284 != nil:
    section.add "Version", valid_21629284
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629285 = header.getOrDefault("X-Amz-Date")
  valid_21629285 = validateParameter(valid_21629285, JString, required = false,
                                   default = nil)
  if valid_21629285 != nil:
    section.add "X-Amz-Date", valid_21629285
  var valid_21629286 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629286 = validateParameter(valid_21629286, JString, required = false,
                                   default = nil)
  if valid_21629286 != nil:
    section.add "X-Amz-Security-Token", valid_21629286
  var valid_21629287 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629287 = validateParameter(valid_21629287, JString, required = false,
                                   default = nil)
  if valid_21629287 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629287
  var valid_21629288 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629288 = validateParameter(valid_21629288, JString, required = false,
                                   default = nil)
  if valid_21629288 != nil:
    section.add "X-Amz-Algorithm", valid_21629288
  var valid_21629289 = header.getOrDefault("X-Amz-Signature")
  valid_21629289 = validateParameter(valid_21629289, JString, required = false,
                                   default = nil)
  if valid_21629289 != nil:
    section.add "X-Amz-Signature", valid_21629289
  var valid_21629290 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629290 = validateParameter(valid_21629290, JString, required = false,
                                   default = nil)
  if valid_21629290 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629290
  var valid_21629291 = header.getOrDefault("X-Amz-Credential")
  valid_21629291 = validateParameter(valid_21629291, JString, required = false,
                                   default = nil)
  if valid_21629291 != nil:
    section.add "X-Amz-Credential", valid_21629291
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceSchemaName: JString
  ##                   : The name of the source schema that contains the table to restore from. If you do not specify a <code>SourceSchemaName</code> value, the default is <code>public</code>.
  ##   SourceDatabaseName: JString (required)
  ##                     : The name of the source database that contains the table to restore from.
  ##   SourceTableName: JString (required)
  ##                  : The name of the source table to restore from.
  ##   ClusterIdentifier: JString (required)
  ##                    : The identifier of the Amazon Redshift cluster to restore the table to.
  ##   TargetDatabaseName: JString
  ##                     : The name of the database to restore the table to.
  ##   SnapshotIdentifier: JString (required)
  ##                     : The identifier of the snapshot to restore the table from. This snapshot must have been created from the Amazon Redshift cluster specified by the <code>ClusterIdentifier</code> parameter.
  ##   TargetSchemaName: JString
  ##                   : The name of the schema to restore the table to.
  ##   NewTableName: JString (required)
  ##               : The name of the table to create as a result of the current request.
  section = newJObject()
  var valid_21629292 = formData.getOrDefault("SourceSchemaName")
  valid_21629292 = validateParameter(valid_21629292, JString, required = false,
                                   default = nil)
  if valid_21629292 != nil:
    section.add "SourceSchemaName", valid_21629292
  assert formData != nil, "formData argument is necessary due to required `SourceDatabaseName` field"
  var valid_21629293 = formData.getOrDefault("SourceDatabaseName")
  valid_21629293 = validateParameter(valid_21629293, JString, required = true,
                                   default = nil)
  if valid_21629293 != nil:
    section.add "SourceDatabaseName", valid_21629293
  var valid_21629294 = formData.getOrDefault("SourceTableName")
  valid_21629294 = validateParameter(valid_21629294, JString, required = true,
                                   default = nil)
  if valid_21629294 != nil:
    section.add "SourceTableName", valid_21629294
  var valid_21629295 = formData.getOrDefault("ClusterIdentifier")
  valid_21629295 = validateParameter(valid_21629295, JString, required = true,
                                   default = nil)
  if valid_21629295 != nil:
    section.add "ClusterIdentifier", valid_21629295
  var valid_21629296 = formData.getOrDefault("TargetDatabaseName")
  valid_21629296 = validateParameter(valid_21629296, JString, required = false,
                                   default = nil)
  if valid_21629296 != nil:
    section.add "TargetDatabaseName", valid_21629296
  var valid_21629297 = formData.getOrDefault("SnapshotIdentifier")
  valid_21629297 = validateParameter(valid_21629297, JString, required = true,
                                   default = nil)
  if valid_21629297 != nil:
    section.add "SnapshotIdentifier", valid_21629297
  var valid_21629298 = formData.getOrDefault("TargetSchemaName")
  valid_21629298 = validateParameter(valid_21629298, JString, required = false,
                                   default = nil)
  if valid_21629298 != nil:
    section.add "TargetSchemaName", valid_21629298
  var valid_21629299 = formData.getOrDefault("NewTableName")
  valid_21629299 = validateParameter(valid_21629299, JString, required = true,
                                   default = nil)
  if valid_21629299 != nil:
    section.add "NewTableName", valid_21629299
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629300: Call_PostRestoreTableFromClusterSnapshot_21629280;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new table from a table in an Amazon Redshift cluster snapshot. You must create the new table within the Amazon Redshift cluster that the snapshot was taken from.</p> <p>You cannot use <code>RestoreTableFromClusterSnapshot</code> to restore a table with the same name as an existing table in an Amazon Redshift cluster. That is, you cannot overwrite an existing table in a cluster with a restored table. If you want to replace your original table with a new, restored table, then rename or drop your original table before you call <code>RestoreTableFromClusterSnapshot</code>. When you have renamed your original table, then you can pass the original name of the table as the <code>NewTableName</code> parameter value in the call to <code>RestoreTableFromClusterSnapshot</code>. This way, you can replace the original table with the table created from the snapshot.</p>
  ## 
  let valid = call_21629300.validator(path, query, header, formData, body, _)
  let scheme = call_21629300.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629300.makeUrl(scheme.get, call_21629300.host, call_21629300.base,
                               call_21629300.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629300, uri, valid, _)

proc call*(call_21629301: Call_PostRestoreTableFromClusterSnapshot_21629280;
          SourceDatabaseName: string; SourceTableName: string;
          ClusterIdentifier: string; SnapshotIdentifier: string;
          NewTableName: string; SourceSchemaName: string = "";
          Action: string = "RestoreTableFromClusterSnapshot";
          TargetDatabaseName: string = ""; TargetSchemaName: string = "";
          Version: string = "2012-12-01"): Recallable =
  ## postRestoreTableFromClusterSnapshot
  ## <p>Creates a new table from a table in an Amazon Redshift cluster snapshot. You must create the new table within the Amazon Redshift cluster that the snapshot was taken from.</p> <p>You cannot use <code>RestoreTableFromClusterSnapshot</code> to restore a table with the same name as an existing table in an Amazon Redshift cluster. That is, you cannot overwrite an existing table in a cluster with a restored table. If you want to replace your original table with a new, restored table, then rename or drop your original table before you call <code>RestoreTableFromClusterSnapshot</code>. When you have renamed your original table, then you can pass the original name of the table as the <code>NewTableName</code> parameter value in the call to <code>RestoreTableFromClusterSnapshot</code>. This way, you can replace the original table with the table created from the snapshot.</p>
  ##   SourceSchemaName: string
  ##                   : The name of the source schema that contains the table to restore from. If you do not specify a <code>SourceSchemaName</code> value, the default is <code>public</code>.
  ##   SourceDatabaseName: string (required)
  ##                     : The name of the source database that contains the table to restore from.
  ##   SourceTableName: string (required)
  ##                  : The name of the source table to restore from.
  ##   Action: string (required)
  ##   ClusterIdentifier: string (required)
  ##                    : The identifier of the Amazon Redshift cluster to restore the table to.
  ##   TargetDatabaseName: string
  ##                     : The name of the database to restore the table to.
  ##   SnapshotIdentifier: string (required)
  ##                     : The identifier of the snapshot to restore the table from. This snapshot must have been created from the Amazon Redshift cluster specified by the <code>ClusterIdentifier</code> parameter.
  ##   TargetSchemaName: string
  ##                   : The name of the schema to restore the table to.
  ##   NewTableName: string (required)
  ##               : The name of the table to create as a result of the current request.
  ##   Version: string (required)
  var query_21629302 = newJObject()
  var formData_21629303 = newJObject()
  add(formData_21629303, "SourceSchemaName", newJString(SourceSchemaName))
  add(formData_21629303, "SourceDatabaseName", newJString(SourceDatabaseName))
  add(formData_21629303, "SourceTableName", newJString(SourceTableName))
  add(query_21629302, "Action", newJString(Action))
  add(formData_21629303, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(formData_21629303, "TargetDatabaseName", newJString(TargetDatabaseName))
  add(formData_21629303, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  add(formData_21629303, "TargetSchemaName", newJString(TargetSchemaName))
  add(formData_21629303, "NewTableName", newJString(NewTableName))
  add(query_21629302, "Version", newJString(Version))
  result = call_21629301.call(nil, query_21629302, nil, formData_21629303, nil)

var postRestoreTableFromClusterSnapshot* = Call_PostRestoreTableFromClusterSnapshot_21629280(
    name: "postRestoreTableFromClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com",
    route: "/#Action=RestoreTableFromClusterSnapshot",
    validator: validate_PostRestoreTableFromClusterSnapshot_21629281, base: "/",
    makeUrl: url_PostRestoreTableFromClusterSnapshot_21629282,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreTableFromClusterSnapshot_21629257 = ref object of OpenApiRestCall_21625418
proc url_GetRestoreTableFromClusterSnapshot_21629259(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreTableFromClusterSnapshot_21629258(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Creates a new table from a table in an Amazon Redshift cluster snapshot. You must create the new table within the Amazon Redshift cluster that the snapshot was taken from.</p> <p>You cannot use <code>RestoreTableFromClusterSnapshot</code> to restore a table with the same name as an existing table in an Amazon Redshift cluster. That is, you cannot overwrite an existing table in a cluster with a restored table. If you want to replace your original table with a new, restored table, then rename or drop your original table before you call <code>RestoreTableFromClusterSnapshot</code>. When you have renamed your original table, then you can pass the original name of the table as the <code>NewTableName</code> parameter value in the call to <code>RestoreTableFromClusterSnapshot</code>. This way, you can replace the original table with the table created from the snapshot.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceDatabaseName: JString (required)
  ##                     : The name of the source database that contains the table to restore from.
  ##   SourceTableName: JString (required)
  ##                  : The name of the source table to restore from.
  ##   SourceSchemaName: JString
  ##                   : The name of the source schema that contains the table to restore from. If you do not specify a <code>SourceSchemaName</code> value, the default is <code>public</code>.
  ##   ClusterIdentifier: JString (required)
  ##                    : The identifier of the Amazon Redshift cluster to restore the table to.
  ##   Action: JString (required)
  ##   TargetDatabaseName: JString
  ##                     : The name of the database to restore the table to.
  ##   NewTableName: JString (required)
  ##               : The name of the table to create as a result of the current request.
  ##   SnapshotIdentifier: JString (required)
  ##                     : The identifier of the snapshot to restore the table from. This snapshot must have been created from the Amazon Redshift cluster specified by the <code>ClusterIdentifier</code> parameter.
  ##   Version: JString (required)
  ##   TargetSchemaName: JString
  ##                   : The name of the schema to restore the table to.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `SourceDatabaseName` field"
  var valid_21629260 = query.getOrDefault("SourceDatabaseName")
  valid_21629260 = validateParameter(valid_21629260, JString, required = true,
                                   default = nil)
  if valid_21629260 != nil:
    section.add "SourceDatabaseName", valid_21629260
  var valid_21629261 = query.getOrDefault("SourceTableName")
  valid_21629261 = validateParameter(valid_21629261, JString, required = true,
                                   default = nil)
  if valid_21629261 != nil:
    section.add "SourceTableName", valid_21629261
  var valid_21629262 = query.getOrDefault("SourceSchemaName")
  valid_21629262 = validateParameter(valid_21629262, JString, required = false,
                                   default = nil)
  if valid_21629262 != nil:
    section.add "SourceSchemaName", valid_21629262
  var valid_21629263 = query.getOrDefault("ClusterIdentifier")
  valid_21629263 = validateParameter(valid_21629263, JString, required = true,
                                   default = nil)
  if valid_21629263 != nil:
    section.add "ClusterIdentifier", valid_21629263
  var valid_21629264 = query.getOrDefault("Action")
  valid_21629264 = validateParameter(valid_21629264, JString, required = true, default = newJString(
      "RestoreTableFromClusterSnapshot"))
  if valid_21629264 != nil:
    section.add "Action", valid_21629264
  var valid_21629265 = query.getOrDefault("TargetDatabaseName")
  valid_21629265 = validateParameter(valid_21629265, JString, required = false,
                                   default = nil)
  if valid_21629265 != nil:
    section.add "TargetDatabaseName", valid_21629265
  var valid_21629266 = query.getOrDefault("NewTableName")
  valid_21629266 = validateParameter(valid_21629266, JString, required = true,
                                   default = nil)
  if valid_21629266 != nil:
    section.add "NewTableName", valid_21629266
  var valid_21629267 = query.getOrDefault("SnapshotIdentifier")
  valid_21629267 = validateParameter(valid_21629267, JString, required = true,
                                   default = nil)
  if valid_21629267 != nil:
    section.add "SnapshotIdentifier", valid_21629267
  var valid_21629268 = query.getOrDefault("Version")
  valid_21629268 = validateParameter(valid_21629268, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21629268 != nil:
    section.add "Version", valid_21629268
  var valid_21629269 = query.getOrDefault("TargetSchemaName")
  valid_21629269 = validateParameter(valid_21629269, JString, required = false,
                                   default = nil)
  if valid_21629269 != nil:
    section.add "TargetSchemaName", valid_21629269
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629270 = header.getOrDefault("X-Amz-Date")
  valid_21629270 = validateParameter(valid_21629270, JString, required = false,
                                   default = nil)
  if valid_21629270 != nil:
    section.add "X-Amz-Date", valid_21629270
  var valid_21629271 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629271 = validateParameter(valid_21629271, JString, required = false,
                                   default = nil)
  if valid_21629271 != nil:
    section.add "X-Amz-Security-Token", valid_21629271
  var valid_21629272 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629272 = validateParameter(valid_21629272, JString, required = false,
                                   default = nil)
  if valid_21629272 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629272
  var valid_21629273 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629273 = validateParameter(valid_21629273, JString, required = false,
                                   default = nil)
  if valid_21629273 != nil:
    section.add "X-Amz-Algorithm", valid_21629273
  var valid_21629274 = header.getOrDefault("X-Amz-Signature")
  valid_21629274 = validateParameter(valid_21629274, JString, required = false,
                                   default = nil)
  if valid_21629274 != nil:
    section.add "X-Amz-Signature", valid_21629274
  var valid_21629275 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629275 = validateParameter(valid_21629275, JString, required = false,
                                   default = nil)
  if valid_21629275 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629275
  var valid_21629276 = header.getOrDefault("X-Amz-Credential")
  valid_21629276 = validateParameter(valid_21629276, JString, required = false,
                                   default = nil)
  if valid_21629276 != nil:
    section.add "X-Amz-Credential", valid_21629276
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629277: Call_GetRestoreTableFromClusterSnapshot_21629257;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new table from a table in an Amazon Redshift cluster snapshot. You must create the new table within the Amazon Redshift cluster that the snapshot was taken from.</p> <p>You cannot use <code>RestoreTableFromClusterSnapshot</code> to restore a table with the same name as an existing table in an Amazon Redshift cluster. That is, you cannot overwrite an existing table in a cluster with a restored table. If you want to replace your original table with a new, restored table, then rename or drop your original table before you call <code>RestoreTableFromClusterSnapshot</code>. When you have renamed your original table, then you can pass the original name of the table as the <code>NewTableName</code> parameter value in the call to <code>RestoreTableFromClusterSnapshot</code>. This way, you can replace the original table with the table created from the snapshot.</p>
  ## 
  let valid = call_21629277.validator(path, query, header, formData, body, _)
  let scheme = call_21629277.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629277.makeUrl(scheme.get, call_21629277.host, call_21629277.base,
                               call_21629277.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629277, uri, valid, _)

proc call*(call_21629278: Call_GetRestoreTableFromClusterSnapshot_21629257;
          SourceDatabaseName: string; SourceTableName: string;
          ClusterIdentifier: string; NewTableName: string;
          SnapshotIdentifier: string; SourceSchemaName: string = "";
          Action: string = "RestoreTableFromClusterSnapshot";
          TargetDatabaseName: string = ""; Version: string = "2012-12-01";
          TargetSchemaName: string = ""): Recallable =
  ## getRestoreTableFromClusterSnapshot
  ## <p>Creates a new table from a table in an Amazon Redshift cluster snapshot. You must create the new table within the Amazon Redshift cluster that the snapshot was taken from.</p> <p>You cannot use <code>RestoreTableFromClusterSnapshot</code> to restore a table with the same name as an existing table in an Amazon Redshift cluster. That is, you cannot overwrite an existing table in a cluster with a restored table. If you want to replace your original table with a new, restored table, then rename or drop your original table before you call <code>RestoreTableFromClusterSnapshot</code>. When you have renamed your original table, then you can pass the original name of the table as the <code>NewTableName</code> parameter value in the call to <code>RestoreTableFromClusterSnapshot</code>. This way, you can replace the original table with the table created from the snapshot.</p>
  ##   SourceDatabaseName: string (required)
  ##                     : The name of the source database that contains the table to restore from.
  ##   SourceTableName: string (required)
  ##                  : The name of the source table to restore from.
  ##   SourceSchemaName: string
  ##                   : The name of the source schema that contains the table to restore from. If you do not specify a <code>SourceSchemaName</code> value, the default is <code>public</code>.
  ##   ClusterIdentifier: string (required)
  ##                    : The identifier of the Amazon Redshift cluster to restore the table to.
  ##   Action: string (required)
  ##   TargetDatabaseName: string
  ##                     : The name of the database to restore the table to.
  ##   NewTableName: string (required)
  ##               : The name of the table to create as a result of the current request.
  ##   SnapshotIdentifier: string (required)
  ##                     : The identifier of the snapshot to restore the table from. This snapshot must have been created from the Amazon Redshift cluster specified by the <code>ClusterIdentifier</code> parameter.
  ##   Version: string (required)
  ##   TargetSchemaName: string
  ##                   : The name of the schema to restore the table to.
  var query_21629279 = newJObject()
  add(query_21629279, "SourceDatabaseName", newJString(SourceDatabaseName))
  add(query_21629279, "SourceTableName", newJString(SourceTableName))
  add(query_21629279, "SourceSchemaName", newJString(SourceSchemaName))
  add(query_21629279, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(query_21629279, "Action", newJString(Action))
  add(query_21629279, "TargetDatabaseName", newJString(TargetDatabaseName))
  add(query_21629279, "NewTableName", newJString(NewTableName))
  add(query_21629279, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  add(query_21629279, "Version", newJString(Version))
  add(query_21629279, "TargetSchemaName", newJString(TargetSchemaName))
  result = call_21629278.call(nil, query_21629279, nil, nil, nil)

var getRestoreTableFromClusterSnapshot* = Call_GetRestoreTableFromClusterSnapshot_21629257(
    name: "getRestoreTableFromClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com",
    route: "/#Action=RestoreTableFromClusterSnapshot",
    validator: validate_GetRestoreTableFromClusterSnapshot_21629258, base: "/",
    makeUrl: url_GetRestoreTableFromClusterSnapshot_21629259,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRevokeClusterSecurityGroupIngress_21629323 = ref object of OpenApiRestCall_21625418
proc url_PostRevokeClusterSecurityGroupIngress_21629325(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRevokeClusterSecurityGroupIngress_21629324(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Revokes an ingress rule in an Amazon Redshift security group for a previously authorized IP range or Amazon EC2 security group. To add an ingress rule, see <a>AuthorizeClusterSecurityGroupIngress</a>. For information about managing security groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html">Amazon Redshift Cluster Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629326 = query.getOrDefault("Action")
  valid_21629326 = validateParameter(valid_21629326, JString, required = true, default = newJString(
      "RevokeClusterSecurityGroupIngress"))
  if valid_21629326 != nil:
    section.add "Action", valid_21629326
  var valid_21629327 = query.getOrDefault("Version")
  valid_21629327 = validateParameter(valid_21629327, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21629327 != nil:
    section.add "Version", valid_21629327
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629328 = header.getOrDefault("X-Amz-Date")
  valid_21629328 = validateParameter(valid_21629328, JString, required = false,
                                   default = nil)
  if valid_21629328 != nil:
    section.add "X-Amz-Date", valid_21629328
  var valid_21629329 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629329 = validateParameter(valid_21629329, JString, required = false,
                                   default = nil)
  if valid_21629329 != nil:
    section.add "X-Amz-Security-Token", valid_21629329
  var valid_21629330 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629330 = validateParameter(valid_21629330, JString, required = false,
                                   default = nil)
  if valid_21629330 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629330
  var valid_21629331 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629331 = validateParameter(valid_21629331, JString, required = false,
                                   default = nil)
  if valid_21629331 != nil:
    section.add "X-Amz-Algorithm", valid_21629331
  var valid_21629332 = header.getOrDefault("X-Amz-Signature")
  valid_21629332 = validateParameter(valid_21629332, JString, required = false,
                                   default = nil)
  if valid_21629332 != nil:
    section.add "X-Amz-Signature", valid_21629332
  var valid_21629333 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629333 = validateParameter(valid_21629333, JString, required = false,
                                   default = nil)
  if valid_21629333 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629333
  var valid_21629334 = header.getOrDefault("X-Amz-Credential")
  valid_21629334 = validateParameter(valid_21629334, JString, required = false,
                                   default = nil)
  if valid_21629334 != nil:
    section.add "X-Amz-Credential", valid_21629334
  result.add "header", section
  ## parameters in `formData` object:
  ##   EC2SecurityGroupName: JString
  ##                       : The name of the EC2 Security Group whose access is to be revoked. If <code>EC2SecurityGroupName</code> is specified, <code>EC2SecurityGroupOwnerId</code> must also be provided and <code>CIDRIP</code> cannot be provided. 
  ##   CIDRIP: JString
  ##         : The IP range for which to revoke access. This range must be a valid Classless Inter-Domain Routing (CIDR) block of IP addresses. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code> and <code>EC2SecurityGroupOwnerId</code> cannot be provided. 
  ##   EC2SecurityGroupOwnerId: JString
  ##                          : <p>The AWS account number of the owner of the security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID is not an acceptable value. If <code>EC2SecurityGroupOwnerId</code> is specified, <code>EC2SecurityGroupName</code> must also be provided. and <code>CIDRIP</code> cannot be provided. </p> <p>Example: <code>111122223333</code> </p>
  ##   ClusterSecurityGroupName: JString (required)
  ##                           : The name of the security Group from which to revoke the ingress rule.
  section = newJObject()
  var valid_21629335 = formData.getOrDefault("EC2SecurityGroupName")
  valid_21629335 = validateParameter(valid_21629335, JString, required = false,
                                   default = nil)
  if valid_21629335 != nil:
    section.add "EC2SecurityGroupName", valid_21629335
  var valid_21629336 = formData.getOrDefault("CIDRIP")
  valid_21629336 = validateParameter(valid_21629336, JString, required = false,
                                   default = nil)
  if valid_21629336 != nil:
    section.add "CIDRIP", valid_21629336
  var valid_21629337 = formData.getOrDefault("EC2SecurityGroupOwnerId")
  valid_21629337 = validateParameter(valid_21629337, JString, required = false,
                                   default = nil)
  if valid_21629337 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_21629337
  assert formData != nil, "formData argument is necessary due to required `ClusterSecurityGroupName` field"
  var valid_21629338 = formData.getOrDefault("ClusterSecurityGroupName")
  valid_21629338 = validateParameter(valid_21629338, JString, required = true,
                                   default = nil)
  if valid_21629338 != nil:
    section.add "ClusterSecurityGroupName", valid_21629338
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629339: Call_PostRevokeClusterSecurityGroupIngress_21629323;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Revokes an ingress rule in an Amazon Redshift security group for a previously authorized IP range or Amazon EC2 security group. To add an ingress rule, see <a>AuthorizeClusterSecurityGroupIngress</a>. For information about managing security groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html">Amazon Redshift Cluster Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>. 
  ## 
  let valid = call_21629339.validator(path, query, header, formData, body, _)
  let scheme = call_21629339.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629339.makeUrl(scheme.get, call_21629339.host, call_21629339.base,
                               call_21629339.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629339, uri, valid, _)

proc call*(call_21629340: Call_PostRevokeClusterSecurityGroupIngress_21629323;
          ClusterSecurityGroupName: string;
          Action: string = "RevokeClusterSecurityGroupIngress";
          EC2SecurityGroupName: string = ""; CIDRIP: string = "";
          Version: string = "2012-12-01"; EC2SecurityGroupOwnerId: string = ""): Recallable =
  ## postRevokeClusterSecurityGroupIngress
  ## Revokes an ingress rule in an Amazon Redshift security group for a previously authorized IP range or Amazon EC2 security group. To add an ingress rule, see <a>AuthorizeClusterSecurityGroupIngress</a>. For information about managing security groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html">Amazon Redshift Cluster Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>. 
  ##   Action: string (required)
  ##   EC2SecurityGroupName: string
  ##                       : The name of the EC2 Security Group whose access is to be revoked. If <code>EC2SecurityGroupName</code> is specified, <code>EC2SecurityGroupOwnerId</code> must also be provided and <code>CIDRIP</code> cannot be provided. 
  ##   CIDRIP: string
  ##         : The IP range for which to revoke access. This range must be a valid Classless Inter-Domain Routing (CIDR) block of IP addresses. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code> and <code>EC2SecurityGroupOwnerId</code> cannot be provided. 
  ##   Version: string (required)
  ##   EC2SecurityGroupOwnerId: string
  ##                          : <p>The AWS account number of the owner of the security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID is not an acceptable value. If <code>EC2SecurityGroupOwnerId</code> is specified, <code>EC2SecurityGroupName</code> must also be provided. and <code>CIDRIP</code> cannot be provided. </p> <p>Example: <code>111122223333</code> </p>
  ##   ClusterSecurityGroupName: string (required)
  ##                           : The name of the security Group from which to revoke the ingress rule.
  var query_21629341 = newJObject()
  var formData_21629342 = newJObject()
  add(query_21629341, "Action", newJString(Action))
  add(formData_21629342, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(formData_21629342, "CIDRIP", newJString(CIDRIP))
  add(query_21629341, "Version", newJString(Version))
  add(formData_21629342, "EC2SecurityGroupOwnerId",
      newJString(EC2SecurityGroupOwnerId))
  add(formData_21629342, "ClusterSecurityGroupName",
      newJString(ClusterSecurityGroupName))
  result = call_21629340.call(nil, query_21629341, nil, formData_21629342, nil)

var postRevokeClusterSecurityGroupIngress* = Call_PostRevokeClusterSecurityGroupIngress_21629323(
    name: "postRevokeClusterSecurityGroupIngress", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com",
    route: "/#Action=RevokeClusterSecurityGroupIngress",
    validator: validate_PostRevokeClusterSecurityGroupIngress_21629324, base: "/",
    makeUrl: url_PostRevokeClusterSecurityGroupIngress_21629325,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRevokeClusterSecurityGroupIngress_21629304 = ref object of OpenApiRestCall_21625418
proc url_GetRevokeClusterSecurityGroupIngress_21629306(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRevokeClusterSecurityGroupIngress_21629305(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Revokes an ingress rule in an Amazon Redshift security group for a previously authorized IP range or Amazon EC2 security group. To add an ingress rule, see <a>AuthorizeClusterSecurityGroupIngress</a>. For information about managing security groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html">Amazon Redshift Cluster Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ClusterSecurityGroupName: JString (required)
  ##                           : The name of the security Group from which to revoke the ingress rule.
  ##   EC2SecurityGroupOwnerId: JString
  ##                          : <p>The AWS account number of the owner of the security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID is not an acceptable value. If <code>EC2SecurityGroupOwnerId</code> is specified, <code>EC2SecurityGroupName</code> must also be provided. and <code>CIDRIP</code> cannot be provided. </p> <p>Example: <code>111122223333</code> </p>
  ##   Action: JString (required)
  ##   CIDRIP: JString
  ##         : The IP range for which to revoke access. This range must be a valid Classless Inter-Domain Routing (CIDR) block of IP addresses. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code> and <code>EC2SecurityGroupOwnerId</code> cannot be provided. 
  ##   EC2SecurityGroupName: JString
  ##                       : The name of the EC2 Security Group whose access is to be revoked. If <code>EC2SecurityGroupName</code> is specified, <code>EC2SecurityGroupOwnerId</code> must also be provided and <code>CIDRIP</code> cannot be provided. 
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ClusterSecurityGroupName` field"
  var valid_21629307 = query.getOrDefault("ClusterSecurityGroupName")
  valid_21629307 = validateParameter(valid_21629307, JString, required = true,
                                   default = nil)
  if valid_21629307 != nil:
    section.add "ClusterSecurityGroupName", valid_21629307
  var valid_21629308 = query.getOrDefault("EC2SecurityGroupOwnerId")
  valid_21629308 = validateParameter(valid_21629308, JString, required = false,
                                   default = nil)
  if valid_21629308 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_21629308
  var valid_21629309 = query.getOrDefault("Action")
  valid_21629309 = validateParameter(valid_21629309, JString, required = true, default = newJString(
      "RevokeClusterSecurityGroupIngress"))
  if valid_21629309 != nil:
    section.add "Action", valid_21629309
  var valid_21629310 = query.getOrDefault("CIDRIP")
  valid_21629310 = validateParameter(valid_21629310, JString, required = false,
                                   default = nil)
  if valid_21629310 != nil:
    section.add "CIDRIP", valid_21629310
  var valid_21629311 = query.getOrDefault("EC2SecurityGroupName")
  valid_21629311 = validateParameter(valid_21629311, JString, required = false,
                                   default = nil)
  if valid_21629311 != nil:
    section.add "EC2SecurityGroupName", valid_21629311
  var valid_21629312 = query.getOrDefault("Version")
  valid_21629312 = validateParameter(valid_21629312, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21629312 != nil:
    section.add "Version", valid_21629312
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629313 = header.getOrDefault("X-Amz-Date")
  valid_21629313 = validateParameter(valid_21629313, JString, required = false,
                                   default = nil)
  if valid_21629313 != nil:
    section.add "X-Amz-Date", valid_21629313
  var valid_21629314 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629314 = validateParameter(valid_21629314, JString, required = false,
                                   default = nil)
  if valid_21629314 != nil:
    section.add "X-Amz-Security-Token", valid_21629314
  var valid_21629315 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629315 = validateParameter(valid_21629315, JString, required = false,
                                   default = nil)
  if valid_21629315 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629315
  var valid_21629316 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629316 = validateParameter(valid_21629316, JString, required = false,
                                   default = nil)
  if valid_21629316 != nil:
    section.add "X-Amz-Algorithm", valid_21629316
  var valid_21629317 = header.getOrDefault("X-Amz-Signature")
  valid_21629317 = validateParameter(valid_21629317, JString, required = false,
                                   default = nil)
  if valid_21629317 != nil:
    section.add "X-Amz-Signature", valid_21629317
  var valid_21629318 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629318 = validateParameter(valid_21629318, JString, required = false,
                                   default = nil)
  if valid_21629318 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629318
  var valid_21629319 = header.getOrDefault("X-Amz-Credential")
  valid_21629319 = validateParameter(valid_21629319, JString, required = false,
                                   default = nil)
  if valid_21629319 != nil:
    section.add "X-Amz-Credential", valid_21629319
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629320: Call_GetRevokeClusterSecurityGroupIngress_21629304;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Revokes an ingress rule in an Amazon Redshift security group for a previously authorized IP range or Amazon EC2 security group. To add an ingress rule, see <a>AuthorizeClusterSecurityGroupIngress</a>. For information about managing security groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html">Amazon Redshift Cluster Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>. 
  ## 
  let valid = call_21629320.validator(path, query, header, formData, body, _)
  let scheme = call_21629320.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629320.makeUrl(scheme.get, call_21629320.host, call_21629320.base,
                               call_21629320.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629320, uri, valid, _)

proc call*(call_21629321: Call_GetRevokeClusterSecurityGroupIngress_21629304;
          ClusterSecurityGroupName: string; EC2SecurityGroupOwnerId: string = "";
          Action: string = "RevokeClusterSecurityGroupIngress"; CIDRIP: string = "";
          EC2SecurityGroupName: string = ""; Version: string = "2012-12-01"): Recallable =
  ## getRevokeClusterSecurityGroupIngress
  ## Revokes an ingress rule in an Amazon Redshift security group for a previously authorized IP range or Amazon EC2 security group. To add an ingress rule, see <a>AuthorizeClusterSecurityGroupIngress</a>. For information about managing security groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html">Amazon Redshift Cluster Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>. 
  ##   ClusterSecurityGroupName: string (required)
  ##                           : The name of the security Group from which to revoke the ingress rule.
  ##   EC2SecurityGroupOwnerId: string
  ##                          : <p>The AWS account number of the owner of the security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID is not an acceptable value. If <code>EC2SecurityGroupOwnerId</code> is specified, <code>EC2SecurityGroupName</code> must also be provided. and <code>CIDRIP</code> cannot be provided. </p> <p>Example: <code>111122223333</code> </p>
  ##   Action: string (required)
  ##   CIDRIP: string
  ##         : The IP range for which to revoke access. This range must be a valid Classless Inter-Domain Routing (CIDR) block of IP addresses. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code> and <code>EC2SecurityGroupOwnerId</code> cannot be provided. 
  ##   EC2SecurityGroupName: string
  ##                       : The name of the EC2 Security Group whose access is to be revoked. If <code>EC2SecurityGroupName</code> is specified, <code>EC2SecurityGroupOwnerId</code> must also be provided and <code>CIDRIP</code> cannot be provided. 
  ##   Version: string (required)
  var query_21629322 = newJObject()
  add(query_21629322, "ClusterSecurityGroupName",
      newJString(ClusterSecurityGroupName))
  add(query_21629322, "EC2SecurityGroupOwnerId",
      newJString(EC2SecurityGroupOwnerId))
  add(query_21629322, "Action", newJString(Action))
  add(query_21629322, "CIDRIP", newJString(CIDRIP))
  add(query_21629322, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(query_21629322, "Version", newJString(Version))
  result = call_21629321.call(nil, query_21629322, nil, nil, nil)

var getRevokeClusterSecurityGroupIngress* = Call_GetRevokeClusterSecurityGroupIngress_21629304(
    name: "getRevokeClusterSecurityGroupIngress", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com",
    route: "/#Action=RevokeClusterSecurityGroupIngress",
    validator: validate_GetRevokeClusterSecurityGroupIngress_21629305, base: "/",
    makeUrl: url_GetRevokeClusterSecurityGroupIngress_21629306,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRevokeSnapshotAccess_21629361 = ref object of OpenApiRestCall_21625418
proc url_PostRevokeSnapshotAccess_21629363(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRevokeSnapshotAccess_21629362(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Removes the ability of the specified AWS customer account to restore the specified snapshot. If the account is currently restoring the snapshot, the restore will run to completion.</p> <p> For more information about working with snapshots, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629364 = query.getOrDefault("Action")
  valid_21629364 = validateParameter(valid_21629364, JString, required = true,
                                   default = newJString("RevokeSnapshotAccess"))
  if valid_21629364 != nil:
    section.add "Action", valid_21629364
  var valid_21629365 = query.getOrDefault("Version")
  valid_21629365 = validateParameter(valid_21629365, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21629365 != nil:
    section.add "Version", valid_21629365
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629366 = header.getOrDefault("X-Amz-Date")
  valid_21629366 = validateParameter(valid_21629366, JString, required = false,
                                   default = nil)
  if valid_21629366 != nil:
    section.add "X-Amz-Date", valid_21629366
  var valid_21629367 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629367 = validateParameter(valid_21629367, JString, required = false,
                                   default = nil)
  if valid_21629367 != nil:
    section.add "X-Amz-Security-Token", valid_21629367
  var valid_21629368 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629368 = validateParameter(valid_21629368, JString, required = false,
                                   default = nil)
  if valid_21629368 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629368
  var valid_21629369 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629369 = validateParameter(valid_21629369, JString, required = false,
                                   default = nil)
  if valid_21629369 != nil:
    section.add "X-Amz-Algorithm", valid_21629369
  var valid_21629370 = header.getOrDefault("X-Amz-Signature")
  valid_21629370 = validateParameter(valid_21629370, JString, required = false,
                                   default = nil)
  if valid_21629370 != nil:
    section.add "X-Amz-Signature", valid_21629370
  var valid_21629371 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629371 = validateParameter(valid_21629371, JString, required = false,
                                   default = nil)
  if valid_21629371 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629371
  var valid_21629372 = header.getOrDefault("X-Amz-Credential")
  valid_21629372 = validateParameter(valid_21629372, JString, required = false,
                                   default = nil)
  if valid_21629372 != nil:
    section.add "X-Amz-Credential", valid_21629372
  result.add "header", section
  ## parameters in `formData` object:
  ##   AccountWithRestoreAccess: JString (required)
  ##                           : The identifier of the AWS customer account that can no longer restore the specified snapshot.
  ##   SnapshotClusterIdentifier: JString
  ##                            : The identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.
  ##   SnapshotIdentifier: JString (required)
  ##                     : The identifier of the snapshot that the account can no longer access.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AccountWithRestoreAccess` field"
  var valid_21629373 = formData.getOrDefault("AccountWithRestoreAccess")
  valid_21629373 = validateParameter(valid_21629373, JString, required = true,
                                   default = nil)
  if valid_21629373 != nil:
    section.add "AccountWithRestoreAccess", valid_21629373
  var valid_21629374 = formData.getOrDefault("SnapshotClusterIdentifier")
  valid_21629374 = validateParameter(valid_21629374, JString, required = false,
                                   default = nil)
  if valid_21629374 != nil:
    section.add "SnapshotClusterIdentifier", valid_21629374
  var valid_21629375 = formData.getOrDefault("SnapshotIdentifier")
  valid_21629375 = validateParameter(valid_21629375, JString, required = true,
                                   default = nil)
  if valid_21629375 != nil:
    section.add "SnapshotIdentifier", valid_21629375
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629376: Call_PostRevokeSnapshotAccess_21629361;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Removes the ability of the specified AWS customer account to restore the specified snapshot. If the account is currently restoring the snapshot, the restore will run to completion.</p> <p> For more information about working with snapshots, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  let valid = call_21629376.validator(path, query, header, formData, body, _)
  let scheme = call_21629376.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629376.makeUrl(scheme.get, call_21629376.host, call_21629376.base,
                               call_21629376.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629376, uri, valid, _)

proc call*(call_21629377: Call_PostRevokeSnapshotAccess_21629361;
          AccountWithRestoreAccess: string; SnapshotIdentifier: string;
          SnapshotClusterIdentifier: string = "";
          Action: string = "RevokeSnapshotAccess"; Version: string = "2012-12-01"): Recallable =
  ## postRevokeSnapshotAccess
  ## <p>Removes the ability of the specified AWS customer account to restore the specified snapshot. If the account is currently restoring the snapshot, the restore will run to completion.</p> <p> For more information about working with snapshots, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ##   AccountWithRestoreAccess: string (required)
  ##                           : The identifier of the AWS customer account that can no longer restore the specified snapshot.
  ##   SnapshotClusterIdentifier: string
  ##                            : The identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.
  ##   Action: string (required)
  ##   SnapshotIdentifier: string (required)
  ##                     : The identifier of the snapshot that the account can no longer access.
  ##   Version: string (required)
  var query_21629378 = newJObject()
  var formData_21629379 = newJObject()
  add(formData_21629379, "AccountWithRestoreAccess",
      newJString(AccountWithRestoreAccess))
  add(formData_21629379, "SnapshotClusterIdentifier",
      newJString(SnapshotClusterIdentifier))
  add(query_21629378, "Action", newJString(Action))
  add(formData_21629379, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  add(query_21629378, "Version", newJString(Version))
  result = call_21629377.call(nil, query_21629378, nil, formData_21629379, nil)

var postRevokeSnapshotAccess* = Call_PostRevokeSnapshotAccess_21629361(
    name: "postRevokeSnapshotAccess", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=RevokeSnapshotAccess",
    validator: validate_PostRevokeSnapshotAccess_21629362, base: "/",
    makeUrl: url_PostRevokeSnapshotAccess_21629363,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRevokeSnapshotAccess_21629343 = ref object of OpenApiRestCall_21625418
proc url_GetRevokeSnapshotAccess_21629345(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRevokeSnapshotAccess_21629344(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Removes the ability of the specified AWS customer account to restore the specified snapshot. If the account is currently restoring the snapshot, the restore will run to completion.</p> <p> For more information about working with snapshots, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AccountWithRestoreAccess: JString (required)
  ##                           : The identifier of the AWS customer account that can no longer restore the specified snapshot.
  ##   Action: JString (required)
  ##   SnapshotClusterIdentifier: JString
  ##                            : The identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.
  ##   SnapshotIdentifier: JString (required)
  ##                     : The identifier of the snapshot that the account can no longer access.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AccountWithRestoreAccess` field"
  var valid_21629346 = query.getOrDefault("AccountWithRestoreAccess")
  valid_21629346 = validateParameter(valid_21629346, JString, required = true,
                                   default = nil)
  if valid_21629346 != nil:
    section.add "AccountWithRestoreAccess", valid_21629346
  var valid_21629347 = query.getOrDefault("Action")
  valid_21629347 = validateParameter(valid_21629347, JString, required = true,
                                   default = newJString("RevokeSnapshotAccess"))
  if valid_21629347 != nil:
    section.add "Action", valid_21629347
  var valid_21629348 = query.getOrDefault("SnapshotClusterIdentifier")
  valid_21629348 = validateParameter(valid_21629348, JString, required = false,
                                   default = nil)
  if valid_21629348 != nil:
    section.add "SnapshotClusterIdentifier", valid_21629348
  var valid_21629349 = query.getOrDefault("SnapshotIdentifier")
  valid_21629349 = validateParameter(valid_21629349, JString, required = true,
                                   default = nil)
  if valid_21629349 != nil:
    section.add "SnapshotIdentifier", valid_21629349
  var valid_21629350 = query.getOrDefault("Version")
  valid_21629350 = validateParameter(valid_21629350, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21629350 != nil:
    section.add "Version", valid_21629350
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629351 = header.getOrDefault("X-Amz-Date")
  valid_21629351 = validateParameter(valid_21629351, JString, required = false,
                                   default = nil)
  if valid_21629351 != nil:
    section.add "X-Amz-Date", valid_21629351
  var valid_21629352 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629352 = validateParameter(valid_21629352, JString, required = false,
                                   default = nil)
  if valid_21629352 != nil:
    section.add "X-Amz-Security-Token", valid_21629352
  var valid_21629353 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629353 = validateParameter(valid_21629353, JString, required = false,
                                   default = nil)
  if valid_21629353 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629353
  var valid_21629354 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629354 = validateParameter(valid_21629354, JString, required = false,
                                   default = nil)
  if valid_21629354 != nil:
    section.add "X-Amz-Algorithm", valid_21629354
  var valid_21629355 = header.getOrDefault("X-Amz-Signature")
  valid_21629355 = validateParameter(valid_21629355, JString, required = false,
                                   default = nil)
  if valid_21629355 != nil:
    section.add "X-Amz-Signature", valid_21629355
  var valid_21629356 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629356 = validateParameter(valid_21629356, JString, required = false,
                                   default = nil)
  if valid_21629356 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629356
  var valid_21629357 = header.getOrDefault("X-Amz-Credential")
  valid_21629357 = validateParameter(valid_21629357, JString, required = false,
                                   default = nil)
  if valid_21629357 != nil:
    section.add "X-Amz-Credential", valid_21629357
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629358: Call_GetRevokeSnapshotAccess_21629343;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Removes the ability of the specified AWS customer account to restore the specified snapshot. If the account is currently restoring the snapshot, the restore will run to completion.</p> <p> For more information about working with snapshots, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ## 
  let valid = call_21629358.validator(path, query, header, formData, body, _)
  let scheme = call_21629358.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629358.makeUrl(scheme.get, call_21629358.host, call_21629358.base,
                               call_21629358.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629358, uri, valid, _)

proc call*(call_21629359: Call_GetRevokeSnapshotAccess_21629343;
          AccountWithRestoreAccess: string; SnapshotIdentifier: string;
          Action: string = "RevokeSnapshotAccess";
          SnapshotClusterIdentifier: string = ""; Version: string = "2012-12-01"): Recallable =
  ## getRevokeSnapshotAccess
  ## <p>Removes the ability of the specified AWS customer account to restore the specified snapshot. If the account is currently restoring the snapshot, the restore will run to completion.</p> <p> For more information about working with snapshots, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
  ##   AccountWithRestoreAccess: string (required)
  ##                           : The identifier of the AWS customer account that can no longer restore the specified snapshot.
  ##   Action: string (required)
  ##   SnapshotClusterIdentifier: string
  ##                            : The identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.
  ##   SnapshotIdentifier: string (required)
  ##                     : The identifier of the snapshot that the account can no longer access.
  ##   Version: string (required)
  var query_21629360 = newJObject()
  add(query_21629360, "AccountWithRestoreAccess",
      newJString(AccountWithRestoreAccess))
  add(query_21629360, "Action", newJString(Action))
  add(query_21629360, "SnapshotClusterIdentifier",
      newJString(SnapshotClusterIdentifier))
  add(query_21629360, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  add(query_21629360, "Version", newJString(Version))
  result = call_21629359.call(nil, query_21629360, nil, nil, nil)

var getRevokeSnapshotAccess* = Call_GetRevokeSnapshotAccess_21629343(
    name: "getRevokeSnapshotAccess", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=RevokeSnapshotAccess",
    validator: validate_GetRevokeSnapshotAccess_21629344, base: "/",
    makeUrl: url_GetRevokeSnapshotAccess_21629345,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRotateEncryptionKey_21629396 = ref object of OpenApiRestCall_21625418
proc url_PostRotateEncryptionKey_21629398(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRotateEncryptionKey_21629397(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Rotates the encryption keys for a cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629399 = query.getOrDefault("Action")
  valid_21629399 = validateParameter(valid_21629399, JString, required = true,
                                   default = newJString("RotateEncryptionKey"))
  if valid_21629399 != nil:
    section.add "Action", valid_21629399
  var valid_21629400 = query.getOrDefault("Version")
  valid_21629400 = validateParameter(valid_21629400, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21629400 != nil:
    section.add "Version", valid_21629400
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629401 = header.getOrDefault("X-Amz-Date")
  valid_21629401 = validateParameter(valid_21629401, JString, required = false,
                                   default = nil)
  if valid_21629401 != nil:
    section.add "X-Amz-Date", valid_21629401
  var valid_21629402 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629402 = validateParameter(valid_21629402, JString, required = false,
                                   default = nil)
  if valid_21629402 != nil:
    section.add "X-Amz-Security-Token", valid_21629402
  var valid_21629403 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629403 = validateParameter(valid_21629403, JString, required = false,
                                   default = nil)
  if valid_21629403 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629403
  var valid_21629404 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629404 = validateParameter(valid_21629404, JString, required = false,
                                   default = nil)
  if valid_21629404 != nil:
    section.add "X-Amz-Algorithm", valid_21629404
  var valid_21629405 = header.getOrDefault("X-Amz-Signature")
  valid_21629405 = validateParameter(valid_21629405, JString, required = false,
                                   default = nil)
  if valid_21629405 != nil:
    section.add "X-Amz-Signature", valid_21629405
  var valid_21629406 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629406 = validateParameter(valid_21629406, JString, required = false,
                                   default = nil)
  if valid_21629406 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629406
  var valid_21629407 = header.getOrDefault("X-Amz-Credential")
  valid_21629407 = validateParameter(valid_21629407, JString, required = false,
                                   default = nil)
  if valid_21629407 != nil:
    section.add "X-Amz-Credential", valid_21629407
  result.add "header", section
  ## parameters in `formData` object:
  ##   ClusterIdentifier: JString (required)
  ##                    : <p>The unique identifier of the cluster that you want to rotate the encryption keys for.</p> <p>Constraints: Must be the name of valid cluster that has encryption enabled.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ClusterIdentifier` field"
  var valid_21629408 = formData.getOrDefault("ClusterIdentifier")
  valid_21629408 = validateParameter(valid_21629408, JString, required = true,
                                   default = nil)
  if valid_21629408 != nil:
    section.add "ClusterIdentifier", valid_21629408
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629409: Call_PostRotateEncryptionKey_21629396;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Rotates the encryption keys for a cluster.
  ## 
  let valid = call_21629409.validator(path, query, header, formData, body, _)
  let scheme = call_21629409.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629409.makeUrl(scheme.get, call_21629409.host, call_21629409.base,
                               call_21629409.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629409, uri, valid, _)

proc call*(call_21629410: Call_PostRotateEncryptionKey_21629396;
          ClusterIdentifier: string; Action: string = "RotateEncryptionKey";
          Version: string = "2012-12-01"): Recallable =
  ## postRotateEncryptionKey
  ## Rotates the encryption keys for a cluster.
  ##   Action: string (required)
  ##   ClusterIdentifier: string (required)
  ##                    : <p>The unique identifier of the cluster that you want to rotate the encryption keys for.</p> <p>Constraints: Must be the name of valid cluster that has encryption enabled.</p>
  ##   Version: string (required)
  var query_21629411 = newJObject()
  var formData_21629412 = newJObject()
  add(query_21629411, "Action", newJString(Action))
  add(formData_21629412, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(query_21629411, "Version", newJString(Version))
  result = call_21629410.call(nil, query_21629411, nil, formData_21629412, nil)

var postRotateEncryptionKey* = Call_PostRotateEncryptionKey_21629396(
    name: "postRotateEncryptionKey", meth: HttpMethod.HttpPost,
    host: "redshift.amazonaws.com", route: "/#Action=RotateEncryptionKey",
    validator: validate_PostRotateEncryptionKey_21629397, base: "/",
    makeUrl: url_PostRotateEncryptionKey_21629398,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRotateEncryptionKey_21629380 = ref object of OpenApiRestCall_21625418
proc url_GetRotateEncryptionKey_21629382(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRotateEncryptionKey_21629381(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Rotates the encryption keys for a cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ClusterIdentifier: JString (required)
  ##                    : <p>The unique identifier of the cluster that you want to rotate the encryption keys for.</p> <p>Constraints: Must be the name of valid cluster that has encryption enabled.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629383 = query.getOrDefault("Action")
  valid_21629383 = validateParameter(valid_21629383, JString, required = true,
                                   default = newJString("RotateEncryptionKey"))
  if valid_21629383 != nil:
    section.add "Action", valid_21629383
  var valid_21629384 = query.getOrDefault("ClusterIdentifier")
  valid_21629384 = validateParameter(valid_21629384, JString, required = true,
                                   default = nil)
  if valid_21629384 != nil:
    section.add "ClusterIdentifier", valid_21629384
  var valid_21629385 = query.getOrDefault("Version")
  valid_21629385 = validateParameter(valid_21629385, JString, required = true,
                                   default = newJString("2012-12-01"))
  if valid_21629385 != nil:
    section.add "Version", valid_21629385
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629386 = header.getOrDefault("X-Amz-Date")
  valid_21629386 = validateParameter(valid_21629386, JString, required = false,
                                   default = nil)
  if valid_21629386 != nil:
    section.add "X-Amz-Date", valid_21629386
  var valid_21629387 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629387 = validateParameter(valid_21629387, JString, required = false,
                                   default = nil)
  if valid_21629387 != nil:
    section.add "X-Amz-Security-Token", valid_21629387
  var valid_21629388 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629388 = validateParameter(valid_21629388, JString, required = false,
                                   default = nil)
  if valid_21629388 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629388
  var valid_21629389 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629389 = validateParameter(valid_21629389, JString, required = false,
                                   default = nil)
  if valid_21629389 != nil:
    section.add "X-Amz-Algorithm", valid_21629389
  var valid_21629390 = header.getOrDefault("X-Amz-Signature")
  valid_21629390 = validateParameter(valid_21629390, JString, required = false,
                                   default = nil)
  if valid_21629390 != nil:
    section.add "X-Amz-Signature", valid_21629390
  var valid_21629391 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629391 = validateParameter(valid_21629391, JString, required = false,
                                   default = nil)
  if valid_21629391 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629391
  var valid_21629392 = header.getOrDefault("X-Amz-Credential")
  valid_21629392 = validateParameter(valid_21629392, JString, required = false,
                                   default = nil)
  if valid_21629392 != nil:
    section.add "X-Amz-Credential", valid_21629392
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629393: Call_GetRotateEncryptionKey_21629380;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Rotates the encryption keys for a cluster.
  ## 
  let valid = call_21629393.validator(path, query, header, formData, body, _)
  let scheme = call_21629393.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629393.makeUrl(scheme.get, call_21629393.host, call_21629393.base,
                               call_21629393.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629393, uri, valid, _)

proc call*(call_21629394: Call_GetRotateEncryptionKey_21629380;
          ClusterIdentifier: string; Action: string = "RotateEncryptionKey";
          Version: string = "2012-12-01"): Recallable =
  ## getRotateEncryptionKey
  ## Rotates the encryption keys for a cluster.
  ##   Action: string (required)
  ##   ClusterIdentifier: string (required)
  ##                    : <p>The unique identifier of the cluster that you want to rotate the encryption keys for.</p> <p>Constraints: Must be the name of valid cluster that has encryption enabled.</p>
  ##   Version: string (required)
  var query_21629395 = newJObject()
  add(query_21629395, "Action", newJString(Action))
  add(query_21629395, "ClusterIdentifier", newJString(ClusterIdentifier))
  add(query_21629395, "Version", newJString(Version))
  result = call_21629394.call(nil, query_21629395, nil, nil, nil)

var getRotateEncryptionKey* = Call_GetRotateEncryptionKey_21629380(
    name: "getRotateEncryptionKey", meth: HttpMethod.HttpGet,
    host: "redshift.amazonaws.com", route: "/#Action=RotateEncryptionKey",
    validator: validate_GetRotateEncryptionKey_21629381, base: "/",
    makeUrl: url_GetRotateEncryptionKey_21629382,
    schemes: {Scheme.Https, Scheme.Http})
export
  rest

type
  EnvKind = enum
    BakeIntoBinary = "Baking $1 into the binary",
    FetchFromEnv = "Fetch $1 from the environment"
template sloppyConst(via: EnvKind; name: untyped): untyped =
  import
    macros

  const
    name {.strdefine.}: string = case via
    of BakeIntoBinary:
      getEnv(astToStr(name), "")
    of FetchFromEnv:
      ""
  static :
    let msg = block:
      if name == "":
        "Missing $1 in the environment"
      else:
        $via
    warning msg % [astToStr(name)]

sloppyConst FetchFromEnv, AWS_ACCESS_KEY_ID
sloppyConst FetchFromEnv, AWS_SECRET_ACCESS_KEY
sloppyConst BakeIntoBinary, AWS_REGION
sloppyConst FetchFromEnv, AWS_ACCOUNT_ID
type
  XAmz = enum
    SecurityToken = "X-Amz-Security-Token", ContentSha256 = "X-Amz-Content-Sha256"
proc atozSign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", AWS_ACCESS_KEY_ID)
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", AWS_SECRET_ACCESS_KEY)
    region = os.getEnv("AWS_REGION", AWS_REGION)
  assert secret != "", "need $AWS_SECRET_ACCESS_KEY in environment"
  assert access != "", "need $AWS_ACCESS_KEY_ID in environment"
  assert region != "", "need $AWS_REGION in environment"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  recall.headers[$ContentSha256] = hash(recall.body, SHA256)
  let
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  recall.headers.del "Host"
  recall.url = $url

method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode; body = ""): Recallable {.
    base.} =
  ## the hook is a terrible earworm
  var
    headers = newHttpHeaders(massageHeaders(input.getOrDefault("header")))
    text = body
  if text.len == 0 and "body" in input:
    text = input.getOrDefault("body").getStr
    if not headers.hasKey("content-type"):
      headers["content-type"] = "application/x-amz-json-1.0"
  else:
    headers["content-md5"] = base64.encode text.toMD5
  if not headers.hasKey($SecurityToken):
    let session = getEnv("AWS_SESSION_TOKEN", "")
    if session != "":
      headers[$SecurityToken] = session
  result = newRecallable(call, url, headers, text)
  result.atozSign(input.getOrDefault("query"), SHA256)

when not defined(ssl):
  {.error: "use ssl".}